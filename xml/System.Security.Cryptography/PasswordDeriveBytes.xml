<Type Name="PasswordDeriveBytes" FullName="System.Security.Cryptography.PasswordDeriveBytes">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="114473ac3aded1fedb136d53f48725f47b5ea62e" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class PasswordDeriveBytes : System.Security.Cryptography.DeriveBytes" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PasswordDeriveBytes extends System.Security.Cryptography.DeriveBytes" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.PasswordDeriveBytes" />
  <TypeSignature Language="VB.NET" Value="Public Class PasswordDeriveBytes&#xA;Inherits DeriveBytes" />
  <TypeSignature Language="C++ CLI" Value="public ref class PasswordDeriveBytes : System::Security::Cryptography::DeriveBytes" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.DeriveBytes</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="7c1d1-101">Deriva uma chave de uma senha usando uma extensão do algoritmo PBKDF1.</span>
      <span class="sxs-lookup">
        <span data-stu-id="7c1d1-101">Derives a key from a password using an extension of the PBKDF1 algorithm.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7c1d1-102">Essa classe usa uma extensão do algoritmo PBKDF1 definido no padrão de v 2.0 PKCS n º 5 derivar bytes adequados para uso como o material de chave de uma senha.</span><span class="sxs-lookup"><span data-stu-id="7c1d1-102">This class uses an extension of the PBKDF1 algorithm defined in the PKCS#5 v2.0 standard to derive bytes suitable for use as key material from a password.</span></span> <span data-ttu-id="7c1d1-103">O padrão é documentado em IETF RRC 2898.</span><span class="sxs-lookup"><span data-stu-id="7c1d1-103">The standard is documented in IETF RRC 2898.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7c1d1-104">Nunca codificar uma senha em seu código-fonte.</span><span class="sxs-lookup"><span data-stu-id="7c1d1-104">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="7c1d1-105">Codificado senhas podem ser recuperadas de um assembly usando o [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) ferramenta, um editor hexadecimal, ou, simplesmente abrindo o assembly em um editor de texto como notepad.exe.</span><span class="sxs-lookup"><span data-stu-id="7c1d1-105">Hard coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7c1d1-106">O exemplo de código a seguir cria uma chave de uma senha usando o <xref:System.Security.Cryptography.PasswordDeriveBytes> classe.</span><span class="sxs-lookup"><span data-stu-id="7c1d1-106">The following code example creates a key from a password using the <xref:System.Security.Cryptography.PasswordDeriveBytes> class.</span></span>  
  
 [!code-cpp[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/cpp/sample.cpp#1)]
 [!code-csharp[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/CS/sample.cs#1)]
 [!code-vb[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/VB/sample.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7c1d1-107">Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-107">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (byte[] password, byte[] salt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] password, unsigned int8[] salt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As Byte(), salt As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(cli::array &lt;System::Byte&gt; ^ password, cli::array &lt;System::Byte&gt; ^ salt);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.Byte[]" />
        <Parameter Name="salt" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="password">
          <span data-ttu-id="7c1d1-108">A senha para a qual a chave é derivada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-108">The password to derive the key for.</span>
          </span>
        </param>
        <param name="salt">
          <span data-ttu-id="7c1d1-109">O sal da chave a ser usado para derivar a chave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-109">The key salt to use to derive the key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7c1d1-110">Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> especificando a senha e o sal da chave a serem usados para derivar a chave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-110">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class specifying the password and key salt to use to derive the key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="7c1d1-111">Nunca, codifique uma senha em seu código-fonte.</span><span class="sxs-lookup"><span data-stu-id="7c1d1-111">Never hard code a password within your source code.</span></span>  <span data-ttu-id="7c1d1-112">Senhas codificadas podem ser recuperadas de um assembly usando o [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), um editor hexadecimal, ou, simplesmente abrindo o assembly em um editor de texto como Notepad.exe.</span><span class="sxs-lookup"><span data-stu-id="7c1d1-112">Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7c1d1-113">O exemplo de código a seguir cria uma chave de uma senha usando o <xref:System.Security.Cryptography.PasswordDeriveBytes> classe.</span><span class="sxs-lookup"><span data-stu-id="7c1d1-113">The following code example creates a key from a password using the <xref:System.Security.Cryptography.PasswordDeriveBytes> class.</span></span>  
  
 [!code-cpp[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/cpp/sample.cpp#1)]
 [!code-csharp[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/CS/sample.cs#1)]
 [!code-vb[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (string strPassword, byte[] rgbSalt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string strPassword, unsigned int8[] rgbSalt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (strPassword As String, rgbSalt As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(System::String ^ strPassword, cli::array &lt;System::Byte&gt; ^ rgbSalt);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="strPassword" Type="System.String" />
        <Parameter Name="rgbSalt" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="strPassword">
          <span data-ttu-id="7c1d1-114">A senha para a qual derivar a chave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-114">The password for which to derive the key.</span>
          </span>
        </param>
        <param name="rgbSalt">
          <span data-ttu-id="7c1d1-115">O sal da chave a ser usado para derivar a chave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-115">The key salt to use to derive the key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7c1d1-116">Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> com a senha e o sal da chave a serem usados para derivar a chave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-116">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class with the password and key salt to use to derive the key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="7c1d1-117">Nunca codificar uma senha em seu código-fonte.</span><span class="sxs-lookup"><span data-stu-id="7c1d1-117">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="7c1d1-118">Codificado senhas podem ser recuperadas de um assembly usando o [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) ferramenta, um editor hexadecimal, ou, simplesmente abrindo o assembly em um editor de texto como notepad.exe.</span><span class="sxs-lookup"><span data-stu-id="7c1d1-118">Hard coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (byte[] password, byte[] salt, System.Security.Cryptography.CspParameters cspParams);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] password, unsigned int8[] salt, class System.Security.Cryptography.CspParameters cspParams) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.Security.Cryptography.CspParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As Byte(), salt As Byte(), cspParams As CspParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(cli::array &lt;System::Byte&gt; ^ password, cli::array &lt;System::Byte&gt; ^ salt, System::Security::Cryptography::CspParameters ^ cspParams);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.Byte[]" />
        <Parameter Name="salt" Type="System.Byte[]" />
        <Parameter Name="cspParams" Type="System.Security.Cryptography.CspParameters" />
      </Parameters>
      <Docs>
        <param name="password">
          <span data-ttu-id="7c1d1-119">A senha para a qual a chave é derivada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-119">The password to derive the key for.</span>
          </span>
        </param>
        <param name="salt">
          <span data-ttu-id="7c1d1-120">O sal da chave a ser usado para derivar a chave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-120">The key salt to use to derive the key.</span>
          </span>
        </param>
        <param name="cspParams">
          <span data-ttu-id="7c1d1-121">Os parâmetros CSP (provedor de serviços de criptografia) para a operação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-121">The cryptographic service provider (CSP) parameters for the operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7c1d1-122">Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> especificando a senha, o sal da chave e o CSP (provedor de serviços de criptografia) a ser usado para derivar a chave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-122">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class specifying the password, key salt, and cryptographic service provider (CSP) to use to derive the key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="7c1d1-123">Nunca, codifique uma senha em seu código-fonte.</span><span class="sxs-lookup"><span data-stu-id="7c1d1-123">Never hard code a password within your source code.</span></span>  <span data-ttu-id="7c1d1-124">Senhas codificadas podem ser recuperadas de um assembly usando o [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) l, um editor hexadecimal, ou, simplesmente abrindo o assembly em um editor de texto como Notepad.exe.</span><span class="sxs-lookup"><span data-stu-id="7c1d1-124">Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) l, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7c1d1-125">O exemplo de código a seguir cria uma chave de uma senha usando o <xref:System.Security.Cryptography.PasswordDeriveBytes> classe.</span><span class="sxs-lookup"><span data-stu-id="7c1d1-125">The following code example creates a key from a password using the <xref:System.Security.Cryptography.PasswordDeriveBytes> class.</span></span>  
  
 [!code-cpp[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/cpp/sample.cpp#1)]
 [!code-csharp[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/CS/sample.cs#1)]
 [!code-vb[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (string strPassword, byte[] rgbSalt, System.Security.Cryptography.CspParameters cspParams);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string strPassword, unsigned int8[] rgbSalt, class System.Security.Cryptography.CspParameters cspParams) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.Security.Cryptography.CspParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (strPassword As String, rgbSalt As Byte(), cspParams As CspParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(System::String ^ strPassword, cli::array &lt;System::Byte&gt; ^ rgbSalt, System::Security::Cryptography::CspParameters ^ cspParams);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="strPassword" Type="System.String" />
        <Parameter Name="rgbSalt" Type="System.Byte[]" />
        <Parameter Name="cspParams" Type="System.Security.Cryptography.CspParameters" />
      </Parameters>
      <Docs>
        <param name="strPassword">
          <span data-ttu-id="7c1d1-126">A senha para a qual derivar a chave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-126">The password for which to derive the key.</span>
          </span>
        </param>
        <param name="rgbSalt">
          <span data-ttu-id="7c1d1-127">O sal da chave a ser usado para derivar a chave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-127">The key salt to use to derive the key.</span>
          </span>
        </param>
        <param name="cspParams">
          <span data-ttu-id="7c1d1-128">Os parâmetros CSP para a operação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-128">The CSP parameters for the operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7c1d1-129">Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> com os parâmetros de senha, sal da chave e CSP (provedor de serviços de criptografia) a serem usados para derivar a chave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-129">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class with the password, key salt, and cryptographic service provider (CSP) parameters to use to derive the key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="7c1d1-130">Nunca codificar uma senha em seu código-fonte.</span><span class="sxs-lookup"><span data-stu-id="7c1d1-130">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="7c1d1-131">Codificado senhas podem ser recuperadas de um assembly usando o [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) ferramenta, um editor hexadecimal, ou, simplesmente abrindo o assembly em um editor de texto como notepad.exe.</span><span class="sxs-lookup"><span data-stu-id="7c1d1-131">Hard coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (byte[] password, byte[] salt, string hashName, int iterations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] password, unsigned int8[] salt, string hashName, int32 iterations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As Byte(), salt As Byte(), hashName As String, iterations As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(cli::array &lt;System::Byte&gt; ^ password, cli::array &lt;System::Byte&gt; ^ salt, System::String ^ hashName, int iterations);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.Byte[]" />
        <Parameter Name="salt" Type="System.Byte[]" />
        <Parameter Name="hashName" Type="System.String" />
        <Parameter Name="iterations" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="password">
          <span data-ttu-id="7c1d1-132">A senha para a qual a chave é derivada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-132">The password to derive the key for.</span>
          </span>
        </param>
        <param name="salt">
          <span data-ttu-id="7c1d1-133">O sal da chave a ser usado para derivar a chave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-133">The key salt to use to derive the key.</span>
          </span>
        </param>
        <param name="hashName">
          <span data-ttu-id="7c1d1-134">O algoritmo de hash a ser usado para derivar a chave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-134">The hash algorithm to use to derive the key.</span>
          </span>
        </param>
        <param name="iterations">
          <span data-ttu-id="7c1d1-135">A contagem de iterações a ser usada para derivar a chave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-135">The iteration count to use to derive the key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7c1d1-136">Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> especificando a senha, o sal da chave, o nome do hash e as iterações a serem usadas para derivar a chave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-136">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class specifying the password, key salt, hash name, and iterations to use to derive the key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="7c1d1-137">Nunca, codifique uma senha em seu código-fonte.</span><span class="sxs-lookup"><span data-stu-id="7c1d1-137">Never hard code a password within your source code.</span></span>  <span data-ttu-id="7c1d1-138">Senhas codificadas podem ser recuperadas de um assembly usando o [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), um editor hexadecimal, ou, simplesmente abrindo o assembly em um editor de texto como Notepad.exe.</span><span class="sxs-lookup"><span data-stu-id="7c1d1-138">Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
 <span data-ttu-id="7c1d1-139">Para obter uma lista de nomes de algoritmo de hash, consulte o <xref:System.Security.Cryptography.CryptoConfig> classe.</span><span class="sxs-lookup"><span data-stu-id="7c1d1-139">For a list of hash algorithm names, see the <xref:System.Security.Cryptography.CryptoConfig> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Security.Cryptography.CryptoConfig" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (string strPassword, byte[] rgbSalt, string strHashName, int iterations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string strPassword, unsigned int8[] rgbSalt, string strHashName, int32 iterations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (strPassword As String, rgbSalt As Byte(), strHashName As String, iterations As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(System::String ^ strPassword, cli::array &lt;System::Byte&gt; ^ rgbSalt, System::String ^ strHashName, int iterations);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="strPassword" Type="System.String" />
        <Parameter Name="rgbSalt" Type="System.Byte[]" />
        <Parameter Name="strHashName" Type="System.String" />
        <Parameter Name="iterations" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="strPassword">
          <span data-ttu-id="7c1d1-140">A senha para a qual derivar a chave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-140">The password for which to derive the key.</span>
          </span>
        </param>
        <param name="rgbSalt">
          <span data-ttu-id="7c1d1-141">O sal da chave a ser usado para derivar a chave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-141">The key salt to use to derive the key.</span>
          </span>
        </param>
        <param name="strHashName">
          <span data-ttu-id="7c1d1-142">O nome do algoritmo de hash para a operação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-142">The name of the hash algorithm for the operation.</span>
          </span>
        </param>
        <param name="iterations">
          <span data-ttu-id="7c1d1-143">O número de iterações para a operação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-143">The number of iterations for the operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7c1d1-144">Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> com a senha, o sal da chave, o nome do hash e o número de iterações a serem usadas para derivar a chave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-144">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class with the password, key salt, hash name, and number of iterations to use to derive the key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="7c1d1-145">Nunca codificar uma senha em seu código-fonte.</span><span class="sxs-lookup"><span data-stu-id="7c1d1-145">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="7c1d1-146">Codificado senhas podem ser recuperadas de um assembly usando o [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) ferramenta, um editor hexadecimal, ou, simplesmente abrindo o assembly em um editor de texto como notepad.exe.</span><span class="sxs-lookup"><span data-stu-id="7c1d1-146">Hard coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.</span></span>  
  
 <span data-ttu-id="7c1d1-147">Para obter uma lista de nomes de algoritmo de hash, consulte o <xref:System.Security.Cryptography.CryptoConfig> classe.</span><span class="sxs-lookup"><span data-stu-id="7c1d1-147">For a list of hash algorithm names, see the <xref:System.Security.Cryptography.CryptoConfig> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Security.Cryptography.CryptoConfig" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (byte[] password, byte[] salt, string hashName, int iterations, System.Security.Cryptography.CspParameters cspParams);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] password, unsigned int8[] salt, string hashName, int32 iterations, class System.Security.Cryptography.CspParameters cspParams) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As Byte(), salt As Byte(), hashName As String, iterations As Integer, cspParams As CspParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(cli::array &lt;System::Byte&gt; ^ password, cli::array &lt;System::Byte&gt; ^ salt, System::String ^ hashName, int iterations, System::Security::Cryptography::CspParameters ^ cspParams);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="password" Type="System.Byte[]" />
        <Parameter Name="salt" Type="System.Byte[]" />
        <Parameter Name="hashName" Type="System.String" />
        <Parameter Name="iterations" Type="System.Int32" />
        <Parameter Name="cspParams" Type="System.Security.Cryptography.CspParameters" />
      </Parameters>
      <Docs>
        <param name="password">
          <span data-ttu-id="7c1d1-148">A senha para a qual a chave é derivada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-148">The password to derive the key for.</span>
          </span>
        </param>
        <param name="salt">
          <span data-ttu-id="7c1d1-149">O sal da chave a ser usado para derivar a chave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-149">The key salt to use to derive the key.</span>
          </span>
        </param>
        <param name="hashName">
          <span data-ttu-id="7c1d1-150">O algoritmo de hash a ser usado para derivar a chave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-150">The hash algorithm to use to derive the key.</span>
          </span>
        </param>
        <param name="iterations">
          <span data-ttu-id="7c1d1-151">A contagem de iterações a ser usada para derivar a chave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-151">The iteration count to use to derive the key.</span>
          </span>
        </param>
        <param name="cspParams">
          <span data-ttu-id="7c1d1-152">Os parâmetros CSP (provedor de serviços de criptografia) para a operação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-152">The cryptographic service provider (CSP) parameters for the operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7c1d1-153">Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> especificando a senha, o sal da chave, o nome de hash, as iterações e o CSP (provedor de serviços de criptografia) a ser usado para derivar a chave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-153">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class specifying the password, key salt, hash name, iterations, and cryptographic service provider (CSP) to use to derive the key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="7c1d1-154">Nunca, codifique uma senha em seu código-fonte.</span><span class="sxs-lookup"><span data-stu-id="7c1d1-154">Never hard code a password within your source code.</span></span>  <span data-ttu-id="7c1d1-155">Senhas codificadas podem ser recuperadas de um assembly usando o [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), um editor hexadecimal, ou, simplesmente abrindo o assembly em um editor de texto como Notepad.exe.</span><span class="sxs-lookup"><span data-stu-id="7c1d1-155">Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
 <span data-ttu-id="7c1d1-156">Para obter uma lista de nomes de algoritmo de hash, consulte o <xref:System.Security.Cryptography.CryptoConfig> classe.</span><span class="sxs-lookup"><span data-stu-id="7c1d1-156">For a list of hash algorithm names, see the <xref:System.Security.Cryptography.CryptoConfig> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Security.Cryptography.CryptoConfig" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (string strPassword, byte[] rgbSalt, string strHashName, int iterations, System.Security.Cryptography.CspParameters cspParams);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string strPassword, unsigned int8[] rgbSalt, string strHashName, int32 iterations, class System.Security.Cryptography.CspParameters cspParams) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (strPassword As String, rgbSalt As Byte(), strHashName As String, iterations As Integer, cspParams As CspParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(System::String ^ strPassword, cli::array &lt;System::Byte&gt; ^ rgbSalt, System::String ^ strHashName, int iterations, System::Security::Cryptography::CspParameters ^ cspParams);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="strPassword" Type="System.String" />
        <Parameter Name="rgbSalt" Type="System.Byte[]" />
        <Parameter Name="strHashName" Type="System.String" />
        <Parameter Name="iterations" Type="System.Int32" />
        <Parameter Name="cspParams" Type="System.Security.Cryptography.CspParameters" />
      </Parameters>
      <Docs>
        <param name="strPassword">
          <span data-ttu-id="7c1d1-157">A senha para a qual derivar a chave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-157">The password for which to derive the key.</span>
          </span>
        </param>
        <param name="rgbSalt">
          <span data-ttu-id="7c1d1-158">O sal da chave a ser usado para derivar a chave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-158">The key salt to use to derive the key.</span>
          </span>
        </param>
        <param name="strHashName">
          <span data-ttu-id="7c1d1-159">O nome do algoritmo de hash para a operação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-159">The name of the hash algorithm for the operation.</span>
          </span>
        </param>
        <param name="iterations">
          <span data-ttu-id="7c1d1-160">O número de iterações para a operação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-160">The number of iterations for the operation.</span>
          </span>
        </param>
        <param name="cspParams">
          <span data-ttu-id="7c1d1-161">Os parâmetros CSP para a operação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-161">The CSP parameters for the operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7c1d1-162">Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> com os parâmetros de senha, sal da chave, nome de hash, número de iterações e CSP (provedor de serviços de criptografia) a serem usados para derivar a chave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-162">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class with the password, key salt, hash name, number of iterations, and cryptographic service provider (CSP) parameters to use to derive the key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="7c1d1-163">Nunca codificar uma senha em seu código-fonte.</span><span class="sxs-lookup"><span data-stu-id="7c1d1-163">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="7c1d1-164">Codificado senhas podem ser recuperadas de um assembly usando o [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) ferramenta, um editor hexadecimal, ou, simplesmente abrindo o assembly em um editor de texto como notepad.exe.</span><span class="sxs-lookup"><span data-stu-id="7c1d1-164">Hard coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.</span></span>  
  
 <span data-ttu-id="7c1d1-165">Para obter uma lista de nomes de algoritmo de hash, consulte o <xref:System.Security.Cryptography.CryptoConfig> classe.</span><span class="sxs-lookup"><span data-stu-id="7c1d1-165">For a list of hash algorithm names, see the <xref:System.Security.Cryptography.CryptoConfig> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Security.Cryptography.CryptoConfig" />
      </Docs>
    </Member>
    <Member MemberName="CryptDeriveKey">
      <MemberSignature Language="C#" Value="public byte[] CryptDeriveKey (string algname, string alghashname, int keySize, byte[] rgbIV);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] CryptDeriveKey(string algname, string alghashname, int32 keySize, unsigned int8[] rgbIV) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function CryptDeriveKey (algname As String, alghashname As String, keySize As Integer, rgbIV As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ CryptDeriveKey(System::String ^ algname, System::String ^ alghashname, int keySize, cli::array &lt;System::Byte&gt; ^ rgbIV);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algname" Type="System.String" />
        <Parameter Name="alghashname" Type="System.String" />
        <Parameter Name="keySize" Type="System.Int32" />
        <Parameter Name="rgbIV" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="algname">
          <span data-ttu-id="7c1d1-166">O nome do algoritmo para o qual a chave será derivada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-166">The algorithm name for which to derive the key.</span>
          </span>
        </param>
        <param name="alghashname">
          <span data-ttu-id="7c1d1-167">O nome do algoritmo de hash a ser usado para derivar a chave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-167">The hash algorithm name to use to derive the key.</span>
          </span>
        </param>
        <param name="keySize">
          <span data-ttu-id="7c1d1-168">O tamanho da chave, em bits, a ser derivada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-168">The size of the key, in bits, to derive.</span>
          </span>
        </param>
        <param name="rgbIV">
          <span data-ttu-id="7c1d1-169">O IV (vetor de inicialização) a ser usado para derivar a chave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-169">The initialization vector (IV) to use to derive the key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7c1d1-170">Deriva uma chave de criptografia do objeto <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-170">Derives a cryptographic key from the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7c1d1-171">A chave derivada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-171">The derived key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7c1d1-172">Essa função é um wrapper para a função de API de criptografia CryptDeriveKey() e pretende oferecer interoperabilidade com aplicativos usando a API de criptografia.</span><span class="sxs-lookup"><span data-stu-id="7c1d1-172">This function is a wrapper for the Crypto API function CryptDeriveKey(), and is intended to offer interoperability with applications using the Crypto API.</span></span>  
  
 <span data-ttu-id="7c1d1-173">Se o `keySize` parâmetro for definido como 0 bits, o tamanho de chave padrão para o algoritmo especificado será usado.</span><span class="sxs-lookup"><span data-stu-id="7c1d1-173">If the `keySize` parameter is set to 0 bits, the default key size for the specified algorithm is used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7c1d1-174">Este exemplo de código é parte de um exemplo maior fornecido para a <xref:System.Security.Cryptography.PasswordDeriveBytes> classe.</span><span class="sxs-lookup"><span data-stu-id="7c1d1-174">This code example is part of a larger example provided for the <xref:System.Security.Cryptography.PasswordDeriveBytes> class.</span></span>  
  
 [!code-cpp[Cryptography.PasswordDerivedbytes#2](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/cpp/sample.cpp#2)]
 [!code-csharp[Cryptography.PasswordDerivedbytes#2](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/CS/sample.cs#2)]
 [!code-vb[Cryptography.PasswordDerivedbytes#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/VB/sample.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="7c1d1-175">O parâmetro <paramref name="keySize" /> está incorreto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-175">The <paramref name="keySize" /> parameter is incorrect.</span>
          </span>
          <span data-ttu-id="7c1d1-176">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-176">-or-</span>
          </span>
          <span data-ttu-id="7c1d1-177">O CSP (provedor de serviços de criptografia) não pode ser adquirido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-177">The cryptographic service provider (CSP) cannot be acquired.</span>
          </span>
          <span data-ttu-id="7c1d1-178">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-178">-or-</span>
          </span>
          <span data-ttu-id="7c1d1-179">O parâmetro <paramref name="algname" /> não é um nome de algoritmo válido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-179">The <paramref name="algname" /> parameter is not a valid algorithm name.</span>
          </span>
          <span data-ttu-id="7c1d1-180">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-180">-or-</span>
          </span>
          <span data-ttu-id="7c1d1-181">O parâmetro <paramref name="alghashname" /> não é um nome de algoritmo de hash válido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-181">The <paramref name="alghashname" /> parameter is not a valid hash algorithm name.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="7c1d1-182">
            <see langword="true" /> para liberar recursos gerenciados e não gerenciados; <see langword="false" /> para liberar apenas recursos não gerenciados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-182">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7c1d1-183">Libera os recursos não gerenciados usados pela classe <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> e, opcionalmente, libera os recursos gerenciados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-183">Releases the unmanaged resources used by the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class and optionally releases the managed resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7c1d1-184">Este método é chamado pelo método público `Dispose()` e pelo método `Finalize`.</span><span class="sxs-lookup"><span data-stu-id="7c1d1-184">This method is called by the public `Dispose()` method and the `Finalize` method.</span></span> <span data-ttu-id="7c1d1-185">`Dispose()` invoca o método `Dispose(Boolean)` protegido com o parâmetro `disposing` definido como `true`.</span><span class="sxs-lookup"><span data-stu-id="7c1d1-185">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="7c1d1-186">`Finalize` invoca `Dispose` com `disposing` definido como `false`.</span><span class="sxs-lookup"><span data-stu-id="7c1d1-186">`Finalize` invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="7c1d1-187">Quando o `disposing` parâmetro é `true`, esse método libera todos os recursos mantidos por qualquer objeto gerenciado que este <xref:System.Security.Cryptography.PasswordDeriveBytes> referências.</span><span class="sxs-lookup"><span data-stu-id="7c1d1-187">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.PasswordDeriveBytes> references.</span></span> <span data-ttu-id="7c1d1-188">Este método invoca o método `Dispose()` de cada objeto referenciado.</span><span class="sxs-lookup"><span data-stu-id="7c1d1-188">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="7c1d1-189">
              <see langword="Dispose" /> pode ser chamado várias vezes por outros objetos.</span>
            <span class="sxs-lookup">
              <span data-stu-id="7c1d1-189">
                <see langword="Dispose" /> can be called multiple times by other objects.</span>
            </span>
            <span data-ttu-id="7c1d1-190">Ao substituir <see langword="Dispose(Boolean)" />, tenha cuidado em não para referenciar objetos que foi descartados anteriormente em uma chamada anterior para <see langword="Dispose" />.</span>
            <span class="sxs-lookup">
              <span data-stu-id="7c1d1-190">When overriding <see langword="Dispose(Boolean)" />, be careful not to reference objects that have been previously disposed in an earlier call to <see langword="Dispose" />.</span>
            </span>
            <span data-ttu-id="7c1d1-191">Para obter mais informações sobre como implementar <see langword="Dispose(Boolean)" />, consulte [implementar um método Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).</span>
            <span class="sxs-lookup">
              <span data-stu-id="7c1d1-191">For more information about how to implement <see langword="Dispose(Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span>
            </span>
            <span data-ttu-id="7c1d1-192">Para obter mais informações sobre <see langword="Dispose" /> e <see langword="Finalize" />, consulte [limpeza de recursos não gerenciados](~/docs/standard/garbage-collection/unmanaged.md).</span>
            <span class="sxs-lookup">
              <span data-stu-id="7c1d1-192">For more information about <see langword="Dispose" /> and <see langword="Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override byte[] GetBytes (int cb);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] GetBytes(int32 cb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.GetBytes(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (cb As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ GetBytes(int cb);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Rfc2898DeriveBytes replaces PasswordDeriveBytes for deriving key material from a password and is preferred in new applications.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cb" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="cb">
          <span data-ttu-id="7c1d1-193">O número de bytes de chave pseudoaleatórios a serem gerados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-193">The number of pseudo-random key bytes to generate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7c1d1-194">Retorna bytes de chave pseudoaleatórios.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-194">Returns pseudo-random key bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7c1d1-195">Uma matriz de bytes preenchida com bytes de chave pseudoaleatórios.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-195">A byte array filled with pseudo-random key bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7c1d1-196">Esse método pode criar qualquer número de bytes pseudo-aleatório.</span><span class="sxs-lookup"><span data-stu-id="7c1d1-196">This method can create any number of pseudo-random bytes.</span></span> <span data-ttu-id="7c1d1-197">No entanto, a intensidade da sequência de bytes é limitada pelo número de bytes na saída de hash.</span><span class="sxs-lookup"><span data-stu-id="7c1d1-197">However, the strength of the byte sequence is limited by the number of bytes in the hash output.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HashName">
      <MemberSignature Language="C#" Value="public string HashName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HashName" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.PasswordDeriveBytes.HashName" />
      <MemberSignature Language="VB.NET" Value="Public Property HashName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ HashName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7c1d1-198">Obtém ou define o nome do algoritmo de hash da operação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-198">Gets or sets the name of the hash algorithm for the operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7c1d1-199">O nome do algoritmo de hash para a operação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-199">The name of the hash algorithm for the operation.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="7c1d1-200">O nome do valor de hash é fixo e é feita uma tentativa de alterar esse valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-200">The name of the hash value is fixed and an attempt is made to change this value.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IterationCount">
      <MemberSignature Language="C#" Value="public int IterationCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 IterationCount" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.PasswordDeriveBytes.IterationCount" />
      <MemberSignature Language="VB.NET" Value="Public Property IterationCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int IterationCount { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7c1d1-201">Obtém ou define o número de iterações para a operação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-201">Gets or sets the number of iterations for the operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7c1d1-202">O número de iterações para a operação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-202">The number of iterations for the operation.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="7c1d1-203">O número de iterações é fixo e é feita uma tentativa de alterar esse valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-203">The number of iterations is fixed and an attempt is made to change this value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7c1d1-204">A propriedade não pode ser definida porque seu valor está fora do intervalo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-204">The property cannot be set because its value is out of range.</span>
          </span>
          <span data-ttu-id="7c1d1-205">Esta propriedade requer um número não negativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-205">This property requires a non-negative number.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public override void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Reset();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7c1d1-206">Redefine o estado da operação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-206">Resets the state of the operation.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Salt">
      <MemberSignature Language="C#" Value="public byte[] Salt { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Salt" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.PasswordDeriveBytes.Salt" />
      <MemberSignature Language="VB.NET" Value="Public Property Salt As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ Salt { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7c1d1-207">Obtém ou define o valor de sal da chave para a operação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-207">Gets or sets the key salt value for the operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7c1d1-208">O valor de sal da chave para a operação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-208">The key salt value for the operation.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7c1d1-209">Um ataque de dicionário é um ataque em que o invasor tenta descriptografar uma mensagem criptografada, comparando o valor criptografado com valores criptografados anteriormente computados para as chaves mais prováveis.</span><span class="sxs-lookup"><span data-stu-id="7c1d1-209">A dictionary attack is an attack in which the attacker attempts to decrypt an encrypted message by comparing the encrypted value with previously computed encrypted values for the most likely keys.</span></span> <span data-ttu-id="7c1d1-210">Esse ataque torna muito mais difícil pela introdução de bytes aleatórios no final da senha antes da derivação de chaves.</span><span class="sxs-lookup"><span data-stu-id="7c1d1-210">This attack is made much more difficult by the introduction of random bytes at the end of the password before the key derivation.</span></span> <span data-ttu-id="7c1d1-211">Esses bytes aleatórios são conhecidos como salt.</span><span class="sxs-lookup"><span data-stu-id="7c1d1-211">These random bytes are known as salt.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="7c1d1-212">O valor da chave de sal é fixo e é feita uma tentativa de alterar esse valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c1d1-212">The key salt value is fixed and an attempt is made to change this value.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>