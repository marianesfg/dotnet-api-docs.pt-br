<Type Name="CipherMode" FullName="System.Security.Cryptography.CipherMode">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="16396fdc5122018822821fb1334467baa735154b" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36530110" />
  </Metadata>
  <TypeSignature Language="C#" Value="public enum CipherMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed CipherMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.CipherMode" />
  <TypeSignature Language="VB.NET" Value="Public Enum CipherMode" />
  <TypeSignature Language="C++ CLI" Value="public enum class CipherMode" />
  <TypeSignature Language="F#" Value="type CipherMode = " />
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="976ff-101">Specifies the block cipher mode to use for encryption.</span>
      <span class="sxs-lookup">
        <span data-stu-id="976ff-101">Specifies the block cipher mode to use for encryption.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="976ff-102">Algoritmos de criptografia do bloco criptografam dados em unidades de bloco, em vez de um único byte por vez.</span><span class="sxs-lookup"><span data-stu-id="976ff-102">Block cipher algorithms encrypt data in block units, rather than a single byte at a time.</span></span> <span data-ttu-id="976ff-103">O tamanho do bloco mais comum é de 8 bytes.</span><span class="sxs-lookup"><span data-stu-id="976ff-103">The most common block size is 8 bytes.</span></span> <span data-ttu-id="976ff-104">Como cada bloco é processado muito, codificações em bloco fornecem um nível mais alto de segurança que codificações em fluxo.</span><span class="sxs-lookup"><span data-stu-id="976ff-104">Because each block is heavily processed, block ciphers provide a higher level of security than stream ciphers.</span></span> <span data-ttu-id="976ff-105">No entanto, os algoritmos de criptografia do bloco tendem a executar mais lentamente do que codificações em fluxo.</span><span class="sxs-lookup"><span data-stu-id="976ff-105">However, block cipher algorithms tend to execute more slowly than stream ciphers.</span></span>  
  
 <span data-ttu-id="976ff-106">Codificações em bloco usam o mesmo algoritmo de criptografia para cada bloco.</span><span class="sxs-lookup"><span data-stu-id="976ff-106">Block ciphers use the same encryption algorithm for each block.</span></span> <span data-ttu-id="976ff-107">Por isso, um bloco de texto sem formatação sempre retornará o mesmo texto de codificação quando criptografada com a mesma chave e algoritmo.</span><span class="sxs-lookup"><span data-stu-id="976ff-107">Because of this, a block of plain text will always return the same cipher text when encrypted with the same key and algorithm.</span></span> <span data-ttu-id="976ff-108">Como esse comportamento pode ser usado para descobrir uma codificação, modos de criptografia são introduzidos que modificam o processo de criptografia com base nos comentários de criptografias de bloco anteriores.</span><span class="sxs-lookup"><span data-stu-id="976ff-108">Because this behavior can be used to crack a cipher, cipher modes are introduced that modify the encryption process based on feedback from earlier block encryptions.</span></span> <span data-ttu-id="976ff-109">A criptografia resultante fornece um nível mais alto de segurança que a criptografia de um bloco simples.</span><span class="sxs-lookup"><span data-stu-id="976ff-109">The resulting encryption provides a higher level of security than a simple block encryption.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CBC">
      <MemberSignature Language="C#" Value="CBC" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Cryptography.CipherMode CBC = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.CipherMode.CBC" />
      <MemberSignature Language="VB.NET" Value="CBC" />
      <MemberSignature Language="C++ CLI" Value="CBC" />
      <MemberSignature Language="F#" Value="CBC = 1" Usage="System.Security.Cryptography.CipherMode.CBC" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.CipherMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="976ff-110">The Cipher Block Chaining (<see langword="CBC" />) mode introduces feedback.</span>
          <span class="sxs-lookup">
            <span data-stu-id="976ff-110">The Cipher Block Chaining (<see langword="CBC" />) mode introduces feedback.</span>
          </span>
          <span data-ttu-id="976ff-111">Before each plain text block is encrypted, it is combined with the cipher text of the previous block by a bitwise exclusive OR operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="976ff-111">Before each plain text block is encrypted, it is combined with the cipher text of the previous block by a bitwise exclusive OR operation.</span>
          </span>
          <span data-ttu-id="976ff-112">This ensures that even if the plain text contains many identical blocks, they will each encrypt to a different cipher text block.</span>
          <span class="sxs-lookup">
            <span data-stu-id="976ff-112">This ensures that even if the plain text contains many identical blocks, they will each encrypt to a different cipher text block.</span>
          </span>
          <span data-ttu-id="976ff-113">The initialization vector is combined with the first plain text block by a bitwise exclusive OR operation before the block is encrypted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="976ff-113">The initialization vector is combined with the first plain text block by a bitwise exclusive OR operation before the block is encrypted.</span>
          </span>
          <span data-ttu-id="976ff-114">If a single bit of the cipher text block is mangled, the corresponding plain text block will also be mangled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="976ff-114">If a single bit of the cipher text block is mangled, the corresponding plain text block will also be mangled.</span>
          </span>
          <span data-ttu-id="976ff-115">In addition, a bit in the subsequent block, in the same position as the original mangled bit, will be mangled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="976ff-115">In addition, a bit in the subsequent block, in the same position as the original mangled bit, will be mangled.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="CFB">
      <MemberSignature Language="C#" Value="CFB" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Cryptography.CipherMode CFB = int32(4)" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.CipherMode.CFB" />
      <MemberSignature Language="VB.NET" Value="CFB" />
      <MemberSignature Language="C++ CLI" Value="CFB" />
      <MemberSignature Language="F#" Value="CFB = 4" Usage="System.Security.Cryptography.CipherMode.CFB" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.CipherMode</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="976ff-116">The Cipher Feedback (<see langword="CFB" />) mode processes small increments of plain text into cipher text, instead of processing an entire block at a time.</span>
          <span class="sxs-lookup">
            <span data-stu-id="976ff-116">The Cipher Feedback (<see langword="CFB" />) mode processes small increments of plain text into cipher text, instead of processing an entire block at a time.</span>
          </span>
          <span data-ttu-id="976ff-117">This mode uses a shift register that is one block in length and is divided into sections.</span>
          <span class="sxs-lookup">
            <span data-stu-id="976ff-117">This mode uses a shift register that is one block in length and is divided into sections.</span>
          </span>
          <span data-ttu-id="976ff-118">For example, if the block size is 8 bytes, with one byte processed at a time, the shift register is divided into eight sections.</span>
          <span class="sxs-lookup">
            <span data-stu-id="976ff-118">For example, if the block size is 8 bytes, with one byte processed at a time, the shift register is divided into eight sections.</span>
          </span>
          <span data-ttu-id="976ff-119">If a bit in the cipher text is mangled, one plain text bit is mangled and the shift register is corrupted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="976ff-119">If a bit in the cipher text is mangled, one plain text bit is mangled and the shift register is corrupted.</span>
          </span>
          <span data-ttu-id="976ff-120">This results in the next several plain text increments being mangled until the bad bit is shifted out of the shift register.</span>
          <span class="sxs-lookup">
            <span data-stu-id="976ff-120">This results in the next several plain text increments being mangled until the bad bit is shifted out of the shift register.</span>
          </span>
          <span data-ttu-id="976ff-121">The default feedback size can vary by algorithm, but is typically either 8 bits or the number of bits of the block size.</span>
          <span class="sxs-lookup">
            <span data-stu-id="976ff-121">The default feedback size can vary by algorithm, but is typically either 8 bits or the number of bits of the block size.</span>
          </span>
          <span data-ttu-id="976ff-122">You can alter the number of feedback bits by using the <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize" /> property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="976ff-122">You can alter the number of feedback bits by using the <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize" /> property.</span>
          </span>
          <span data-ttu-id="976ff-123">Algorithms that support CFB use this property to set the feedback.</span>
          <span class="sxs-lookup">
            <span data-stu-id="976ff-123">Algorithms that support CFB use this property to set the feedback.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="CTS">
      <MemberSignature Language="C#" Value="CTS" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Cryptography.CipherMode CTS = int32(5)" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.CipherMode.CTS" />
      <MemberSignature Language="VB.NET" Value="CTS" />
      <MemberSignature Language="C++ CLI" Value="CTS" />
      <MemberSignature Language="F#" Value="CTS = 5" Usage="System.Security.Cryptography.CipherMode.CTS" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.CipherMode</ReturnType>
      </ReturnValue>
      <MemberValue>5</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="976ff-124">The Cipher Text Stealing (<see langword="CTS" />) mode handles any length of plain text and produces cipher text whose length matches the plain text length.</span>
          <span class="sxs-lookup">
            <span data-stu-id="976ff-124">The Cipher Text Stealing (<see langword="CTS" />) mode handles any length of plain text and produces cipher text whose length matches the plain text length.</span>
          </span>
          <span data-ttu-id="976ff-125">This mode behaves like the <see langword="CBC" /> mode for all but the last two blocks of the plain text.</span>
          <span class="sxs-lookup">
            <span data-stu-id="976ff-125">This mode behaves like the <see langword="CBC" /> mode for all but the last two blocks of the plain text.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="ECB">
      <MemberSignature Language="C#" Value="ECB" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Cryptography.CipherMode ECB = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.CipherMode.ECB" />
      <MemberSignature Language="VB.NET" Value="ECB" />
      <MemberSignature Language="C++ CLI" Value="ECB" />
      <MemberSignature Language="F#" Value="ECB = 2" Usage="System.Security.Cryptography.CipherMode.ECB" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.CipherMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="976ff-126">The Electronic Codebook (<see langword="ECB" />) mode encrypts each block individually.</span>
          <span class="sxs-lookup">
            <span data-stu-id="976ff-126">The Electronic Codebook (<see langword="ECB" />) mode encrypts each block individually.</span>
          </span>
          <span data-ttu-id="976ff-127">Any blocks of plain text that are identical and in the same message, or that are in a different message encrypted with the same key, will be transformed into identical cipher text blocks.</span>
          <span class="sxs-lookup">
            <span data-stu-id="976ff-127">Any blocks of plain text that are identical and in the same message, or that are in a different message encrypted with the same key, will be transformed into identical cipher text blocks.</span>
          </span>
          <span data-ttu-id="976ff-128">**Important**:  This mode is not recommended because it opens the door for multiple security exploits.</span>
          <span class="sxs-lookup">
            <span data-stu-id="976ff-128">**Important**:  This mode is not recommended because it opens the door for multiple security exploits.</span>
          </span>
          <span data-ttu-id="976ff-129">If the plain text to be encrypted contains substantial repetition, it is feasible for the cipher text to be broken one block at a time.</span>
          <span class="sxs-lookup">
            <span data-stu-id="976ff-129">If the plain text to be encrypted contains substantial repetition, it is feasible for the cipher text to be broken one block at a time.</span>
          </span>
          <span data-ttu-id="976ff-130">It is also possible to use block analysis to determine the encryption key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="976ff-130">It is also possible to use block analysis to determine the encryption key.</span>
          </span>
          <span data-ttu-id="976ff-131">Also, an active adversary can substitute and exchange individual blocks without detection, which allows blocks to be saved and inserted into the stream at other points without detection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="976ff-131">Also, an active adversary can substitute and exchange individual blocks without detection, which allows blocks to be saved and inserted into the stream at other points without detection.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="OFB">
      <MemberSignature Language="C#" Value="OFB" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Cryptography.CipherMode OFB = int32(3)" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.CipherMode.OFB" />
      <MemberSignature Language="VB.NET" Value="OFB" />
      <MemberSignature Language="C++ CLI" Value="OFB" />
      <MemberSignature Language="F#" Value="OFB = 3" Usage="System.Security.Cryptography.CipherMode.OFB" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.CipherMode</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="976ff-132">The Output Feedback (<see langword="OFB" />) mode processes small increments of plain text into cipher text instead of processing an entire block at a time.</span>
          <span class="sxs-lookup">
            <span data-stu-id="976ff-132">The Output Feedback (<see langword="OFB" />) mode processes small increments of plain text into cipher text instead of processing an entire block at a time.</span>
          </span>
          <span data-ttu-id="976ff-133">This mode is similar to <see langword="CFB" />; the only difference between the two modes is the way that the shift register is filled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="976ff-133">This mode is similar to <see langword="CFB" />; the only difference between the two modes is the way that the shift register is filled.</span>
          </span>
          <span data-ttu-id="976ff-134">If a bit in the cipher text is mangled, the corresponding bit of plain text will be mangled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="976ff-134">If a bit in the cipher text is mangled, the corresponding bit of plain text will be mangled.</span>
          </span>
          <span data-ttu-id="976ff-135">However, if there are extra or missing bits from the cipher text, the plain text will be mangled from that point on.</span>
          <span class="sxs-lookup">
            <span data-stu-id="976ff-135">However, if there are extra or missing bits from the cipher text, the plain text will be mangled from that point on.</span>
          </span>
        </summary>
      </Docs>
    </Member>
  </Members>
</Type>