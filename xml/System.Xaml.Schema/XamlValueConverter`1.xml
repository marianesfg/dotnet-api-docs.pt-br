<Type Name="XamlValueConverter&lt;TConverterBase&gt;" FullName="System.Xaml.Schema.XamlValueConverter&lt;TConverterBase&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8fc964041fd76fd09075ae9b58ed84f8a945a9da" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39916838" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XamlValueConverter&lt;TConverterBase&gt; : IEquatable&lt;System.Xaml.Schema.XamlValueConverter&lt;TConverterBase&gt;&gt; where TConverterBase : class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlValueConverter`1&lt;class TConverterBase&gt; extends System.Object implements class System.IEquatable`1&lt;class System.Xaml.Schema.XamlValueConverter`1&lt;!TConverterBase&gt;&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.Schema.XamlValueConverter`1" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlValueConverter(Of TConverterBase)&#xA;Implements IEquatable(Of XamlValueConverter(Of TConverterBase))" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TConverterBase&gt;&#xA; where TConverterBase : classpublic ref class XamlValueConverter : IEquatable&lt;System::Xaml::Schema::XamlValueConverter&lt;TConverterBase&gt; ^&gt;" />
  <TypeSignature Language="F#" Value="type XamlValueConverter&lt;'ConverterBase (requires 'ConverterBase : null)&gt; = class&#xA;    interface IEquatable&lt;XamlValueConverter&lt;'ConverterBase&gt;&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TConverterBase">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Xaml.Schema.XamlValueConverter&lt;TConverterBase&gt;&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TConverterBase">A CLR classe base para o conversor específico que este <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> representa. Normalmente isso é um dos seguintes: <see cref="T:System.ComponentModel.TypeConverter" />; <see cref="T:System.Windows.Markup.MarkupExtension" />; <see cref="T:System.Windows.Markup.ValueSerializer" />;</typeparam>
    <summary>Fornece uma superfície de API comum para técnicas que geram valores de serialização ou de inicialização para o XAML baseado em uma entrada que não seja o tipo de destino eventual. Isso inclui extensões de marcação e conversores de tipo.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 As instâncias desse tipo são retornadas pelos métodos da API do esquema de XAML, como <xref:System.Xaml.XamlType.LookupTypeConverter%2A>. A implementação genérica de <xref:System.Xaml.Schema.XamlValueConverter%601> fornece indireção para o assembly System. XAML, para que o sistema básico de esquema e o tipo XAML não tem que assumir dependências em um valor diferente de técnicas de conversão que normalmente são implementações em outros assemblies.  
  
 Um <xref:System.Xaml.Schema.XamlValueConverter%601> pode ser construída com um tipo de implementação nula, mas como uma <xref:System.Xaml.Schema.XamlValueConverter%601> retornará `null` para <xref:System.Xaml.Schema.XamlValueConverter%601.CreateInstance%2A>.  
  
 Assinaturas de construtor para <xref:System.Xaml.Schema.XamlValueConverter%601> usar um `converterType` parâmetro que referencia o tipo específico que implementa o comportamento de conversão. Para que estejam funcionando adequadamente <xref:System.Xaml.Schema.XamlValueConverter%601> (que possui um nonnull <xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A>), o `converterType` tipo deve ser conversíveis para o `TConverterBase` restrição. Uma condição de incompatibilidade não é imposta por construtores, mas pode produzir um <xref:System.InvalidCastException> em tempo de execução.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlValueConverter (Type converterType, System.Xaml.XamlType targetType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type converterType, class System.Xaml.XamlType targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlValueConverter`1.#ctor(System.Type,System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (converterType As Type, targetType As XamlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlValueConverter(Type ^ converterType, System::Xaml::XamlType ^ targetType);" />
      <MemberSignature Language="F#" Value="new System.Xaml.Schema.XamlValueConverter&lt;'ConverterBase (requires 'ConverterBase : null)&gt; : Type * System.Xaml.XamlType -&gt; System.Xaml.Schema.XamlValueConverter&lt;'ConverterBase (requires 'ConverterBase : null)&gt;" Usage="new System.Xaml.Schema.XamlValueConverter&lt;'ConverterBase (requires 'ConverterBase : null)&gt; (converterType, targetType)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="converterType" Type="System.Type" />
        <Parameter Name="targetType" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="converterType">O <see cref="T:System.Type" /> que implementa o comportamento do conversor.</param>
        <param name="targetType">O <see cref="T:System.Xaml.XamlType" /> de destino do <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />, com base em um conversor que implementa <see cref="T:System.Type" /> e o tipo de destino do <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlValueConverter (Type converterType, System.Xaml.XamlType targetType, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type converterType, class System.Xaml.XamlType targetType, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlValueConverter`1.#ctor(System.Type,System.Xaml.XamlType,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (converterType As Type, targetType As XamlType, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlValueConverter(Type ^ converterType, System::Xaml::XamlType ^ targetType, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Xaml.Schema.XamlValueConverter&lt;'ConverterBase (requires 'ConverterBase : null)&gt; : Type * System.Xaml.XamlType * string -&gt; System.Xaml.Schema.XamlValueConverter&lt;'ConverterBase (requires 'ConverterBase : null)&gt;" Usage="new System.Xaml.Schema.XamlValueConverter&lt;'ConverterBase (requires 'ConverterBase : null)&gt; (converterType, targetType, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="converterType" Type="System.Type" />
        <Parameter Name="targetType" Type="System.Xaml.XamlType" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="converterType">O <see cref="T:System.Type" /> que implementa o comportamento do conversor.</param>
        <param name="targetType">O <see cref="T:System.Xaml.XamlType" /> de destino do <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />.</param>
        <param name="name">O nome da cadeia de caracteres.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />, com base em um conversor que implementa <see cref="T:System.Type" />, o tipo de destino do <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> e um nome de cadeia de caracteres.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `name` é fornecido como `null`, um nome padrão é gerado com base em uma `converterType` ou `targetType`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Todos os três parâmetros são <see langword="null" /> (pelo menos um deve ser não nulo).</exception>
      </Docs>
    </Member>
    <Member MemberName="ConverterInstance">
      <MemberSignature Language="C#" Value="public TConverterBase ConverterInstance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TConverterBase ConverterInstance" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlValueConverter`1.ConverterInstance" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ConverterInstance As TConverterBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TConverterBase ConverterInstance { TConverterBase get(); };" />
      <MemberSignature Language="F#" Value="member this.ConverterInstance : 'ConverterBase" Usage="System.Xaml.Schema.XamlValueConverter&lt;'ConverterBase (requires 'ConverterBase : null)&gt;.ConverterInstance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TConverterBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém uma instância criada da implementação do conversor.</summary>
        <value>Uma instância criada da implementação do conversor, ou <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A> chama a implementação padrão protegido <xref:System.Xaml.Schema.XamlValueConverter%601.CreateInstance%2A> para obter seu valor (e podem estar acessando um valor armazenado se <xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A> já foi chamado uma vez neste <xref:System.Xaml.Schema.XamlValueConverter%601>.  
  
 Um <xref:System.Xaml.Schema.XamlValueConverter%601> pode ser construída com um tipo de implementação nula, mas como uma <xref:System.Xaml.Schema.XamlValueConverter%601> retornará `null` para <xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConverterType">
      <MemberSignature Language="C#" Value="public Type ConverterType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ConverterType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlValueConverter`1.ConverterType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ConverterType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ ConverterType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ConverterType : Type" Usage="System.Xaml.Schema.XamlValueConverter&lt;'ConverterBase (requires 'ConverterBase : null)&gt;.ConverterType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o <see cref="T:System.Type" /> para a classe que implementa o comportamento do conversor.</summary>
        <value>O <see cref="T:System.Type" /> para a classe que implementa o comportamento do conversor.</value>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Xaml.Schema.XamlValueConverter`1.#ctor(System.Type,System.Xaml.XamlType,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="protected virtual TConverterBase CreateInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance !TConverterBase CreateInstance() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlValueConverter`1.CreateInstance" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateInstance () As TConverterBase" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual TConverterBase CreateInstance();" />
      <MemberSignature Language="F#" Value="abstract member CreateInstance : unit -&gt; 'ConverterBase&#xA;override this.CreateInstance : unit -&gt; 'ConverterBase" Usage="xamlValueConverter.CreateInstance " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TConverterBase</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retorna uma instância da implementação do conversor.</summary>
        <returns>Uma instância da implementação do conversor ou <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xaml.Schema.XamlValueConverter%601.CreateInstance%2A> é protegido. Para obter uma instância do conversor com uma API pública, obtenha o valor de <xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A>.  
  
 Um <xref:System.Xaml.Schema.XamlValueConverter%601> pode ser construída com um tipo de implementação nula, mas como uma <xref:System.Xaml.Schema.XamlValueConverter%601> retornará `null` para <xref:System.Xaml.Schema.XamlValueConverter%601.CreateInstance%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xaml.XamlSchemaException">O conversor não implementou o tipo de base correto.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Determina se esta instância de <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> e um objeto têm o mesmo valor.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlValueConverter`1.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="xamlValueConverter.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">O objeto a ser comparado.</param>
        <summary>Determina se esta instância do <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> e um objeto especificado, que também deve ser um objeto <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />, têm o mesmo valor.</summary>
        <returns>
          <see langword="true" /> se <paramref name="obj" /> for um <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> e seu valor for o mesmo que o dessa instância; caso contrário, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Xaml.Schema.XamlValueConverter&lt;TConverterBase&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.Xaml.Schema.XamlValueConverter`1&lt;!TConverterBase&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlValueConverter`1.Equals(System.Xaml.Schema.XamlValueConverter{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As XamlValueConverter(Of TConverterBase)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Xaml::Schema::XamlValueConverter&lt;TConverterBase&gt; ^ other);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Xaml.Schema.XamlValueConverter&lt;'ConverterBase (requires 'ConverterBase : null)&gt; -&gt; bool" Usage="xamlValueConverter.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Xaml.Schema.XamlValueConverter&lt;TConverterBase&gt;" />
      </Parameters>
      <Docs>
        <param name="other">O <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> de comparação.</param>
        <summary>Determina se esta instância do <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> e outro objeto <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> têm o mesmo valor.</summary>
        <returns>
          <see langword="true" /> se <paramref name="other" /> for um <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> e seu valor for o mesmo que o dessa instância; caso contrário, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlValueConverter`1.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="xamlValueConverter.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retorna o código hash para este <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />.</summary>
        <returns>Um código hash inteiro.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlValueConverter`1.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Xaml.Schema.XamlValueConverter&lt;'ConverterBase (requires 'ConverterBase : null)&gt;.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um nome de cadeia de caracteres para este <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />.</summary>
        <value>Um nome de cadeia de caracteres para este <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor dessa propriedade é estabelecido por um dos seguintes:  
  
-   Um parâmetro de construtor (consulte <xref:System.Xaml.Schema.XamlValueConverter%601.%23ctor%2A?displayProperty=nameWithType>).  
  
-   Lógica interna que processa as outras entradas do construtor e uma cadeia de caracteres de formulários.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Xaml.Schema.XamlValueConverter&lt;TConverterBase&gt; converter1, System.Xaml.Schema.XamlValueConverter&lt;TConverterBase&gt; converter2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Xaml.Schema.XamlValueConverter`1&lt;!TConverterBase&gt; converter1, class System.Xaml.Schema.XamlValueConverter`1&lt;!TConverterBase&gt; converter2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlValueConverter`1.op_Equality(System.Xaml.Schema.XamlValueConverter{`0},System.Xaml.Schema.XamlValueConverter{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (converter1 As XamlValueConverter(Of TConverterBase), converter2 As XamlValueConverter(Of TConverterBase)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Xaml::Schema::XamlValueConverter&lt;TConverterBase&gt; ^ converter1, System::Xaml::Schema::XamlValueConverter&lt;TConverterBase&gt; ^ converter2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Xaml.Schema.XamlValueConverter&lt;'ConverterBase (requires 'ConverterBase : null)&gt; * System.Xaml.Schema.XamlValueConverter&lt;'ConverterBase (requires 'ConverterBase : null)&gt; -&gt; bool" Usage="converter1 = converter2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="converter1" Type="System.Xaml.Schema.XamlValueConverter&lt;TConverterBase&gt;" />
        <Parameter Name="converter2" Type="System.Xaml.Schema.XamlValueConverter&lt;TConverterBase&gt;" />
      </Parameters>
      <Docs>
        <param name="converter1">Um <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> ou <see langword="null" />.</param>
        <param name="converter2">Um <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> ou <see langword="null" />.</param>
        <summary>Determina se dois objetos <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> especificados têm o mesmo valor.</summary>
        <returns>
          <see langword="true" /> se o valor de <paramref name="converter1" /> for o mesmo que o valor de <paramref name="converter2" />; caso contrário, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Xaml.Schema.XamlValueConverter&lt;TConverterBase&gt; converter1, System.Xaml.Schema.XamlValueConverter&lt;TConverterBase&gt; converter2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Xaml.Schema.XamlValueConverter`1&lt;!TConverterBase&gt; converter1, class System.Xaml.Schema.XamlValueConverter`1&lt;!TConverterBase&gt; converter2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlValueConverter`1.op_Inequality(System.Xaml.Schema.XamlValueConverter{`0},System.Xaml.Schema.XamlValueConverter{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (converter1 As XamlValueConverter(Of TConverterBase), converter2 As XamlValueConverter(Of TConverterBase)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Xaml::Schema::XamlValueConverter&lt;TConverterBase&gt; ^ converter1, System::Xaml::Schema::XamlValueConverter&lt;TConverterBase&gt; ^ converter2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Xaml.Schema.XamlValueConverter&lt;'ConverterBase (requires 'ConverterBase : null)&gt; * System.Xaml.Schema.XamlValueConverter&lt;'ConverterBase (requires 'ConverterBase : null)&gt; -&gt; bool" Usage="System.Xaml.Schema.XamlValueConverter&lt;'ConverterBase (requires 'ConverterBase : null)&gt;.op_Inequality (converter1, converter2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="converter1" Type="System.Xaml.Schema.XamlValueConverter&lt;TConverterBase&gt;" />
        <Parameter Name="converter2" Type="System.Xaml.Schema.XamlValueConverter&lt;TConverterBase&gt;" />
      </Parameters>
      <Docs>
        <param name="converter1">Um <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> ou <see langword="null" />.</param>
        <param name="converter2">Um <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> ou <see langword="null" />.</param>
        <summary>Determina se dois objetos <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> especificados têm valores diferentes.</summary>
        <returns>
          <see langword="true" /> se o valor de <paramref name="converter1" /> for diferente do valor de <paramref name="converter2" />, caso contrário, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetType">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlType TargetType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlType TargetType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlValueConverter`1.TargetType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TargetType As XamlType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::XamlType ^ TargetType { System::Xaml::XamlType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TargetType : System.Xaml.XamlType" Usage="System.Xaml.Schema.XamlValueConverter&lt;'ConverterBase (requires 'ConverterBase : null)&gt;.TargetType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o <see cref="T:System.Xaml.XamlType" /> de destino do <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />.</summary>
        <value>O <see cref="T:System.Xaml.XamlType" /> de destino do <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Xaml.Schema.XamlValueConverter`1.#ctor(System.Type,System.Xaml.XamlType,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlValueConverter`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="xamlValueConverter.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retorna uma <see cref="T:System.String" /> que representa este <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />.</summary>
        <returns>Uma <see cref="T:System.String" /> que representa este <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Xaml.Schema.XamlValueConverter%601.ToString%2A> valor é baseado no <xref:System.Xaml.Schema.XamlValueConverter%601.Name%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>