<Type Name="XamlMemberInvoker" FullName="System.Xaml.Schema.XamlMemberInvoker">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1e0cb0fcd32ba923b0f5211ba5e74a9c11507929" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36445080" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XamlMemberInvoker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlMemberInvoker extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.Schema.XamlMemberInvoker" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlMemberInvoker" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlMemberInvoker" />
  <TypeSignature Language="F#" Value="type XamlMemberInvoker = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornece um ponto de extensão que pode acessar as características de um membro XAML por meio de técnicas que não são de reflexão.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A finalidade de <xref:System.Xaml.Schema.XamlMemberInvoker> é habilitar um trabalho que não depende de como totalmente os recursos CLR como atributos CLR, informações de reflexão por meio de tempo de execução de um sistema de tipo XAML extensível e esquemas <xref:System.Type> e <xref:System.Reflection.MemberInfo>, e assim por diante. As subclasses de <xref:System.Xaml.Schema.XamlMemberInvoker> são usados como parâmetros de entrada para os construtores alternativos de classes de esquema XAML como <xref:System.Xaml.XamlMember>. Você subclasse <xref:System.Xaml.XamlMember> e passar o <xref:System.Xaml.Schema.XamlMemberInvoker> por meio do construtor base. Junto com a definição de um <xref:System.Xaml.Schema.XamlMemberInvoker> para o construtor, você também deve fornecer substituições para pelo menos alguns do `Lookup` métodos de <xref:System.Xaml.XamlMember>.  
  
 <xref:System.Xaml.Schema.XamlMemberInvoker> tem uma implementação padrão. A implementação padrão segue um modelo semelhante para a implementação padrão de tipos de esquema XAML <xref:System.Xaml.XamlType> e <xref:System.Xaml.XamlMember>: o sistema de tipos CLR é usado para instanciação, valores e pesquisas, incluindo o uso de atributos CLR, <xref:System.Type> e <xref:System.Reflection.MemberInfo>, e assim por diante.  
  
 <xref:System.Xaml.Schema.XamlMemberInvoker> fornece métodos para get básico e operações de conjunto (<xref:System.Xaml.Schema.XamlMemberInvoker.GetValue%2A>; <xref:System.Xaml.Schema.XamlMemberInvoker.SetValue%2A>). Ele também fornece as propriedades <xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter%2A> e <xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter%2A>, mas eles não são virtuais.  
  
> [!NOTE]
>  É possível obter um <xref:System.Xaml.Schema.XamlMemberInvoker> valor que representa uma diretiva XAML, que é implementada como uma classe privada na implementação System. XAML. Se você tentar chamar <xref:System.Xaml.Schema.XamlMemberInvoker.GetValue%2A> ou <xref:System.Xaml.Schema.XamlMemberInvoker.SetValue%2A> neste chamador, uma exceção será lançada.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XamlMemberInvoker ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlMemberInvoker.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XamlMemberInvoker();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A implementação padrão está vazia.  
  
 Este construtor é chamado internamente para fornecer um valor para <xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A>. Para uma <xref:System.Xaml.Schema.XamlMemberInvoker> subclasse, espera-se que você use o <xref:System.Xaml.Schema.XamlMemberInvoker.%23ctor%28System.Xaml.XamlMember%29> assinatura para a construção ou fornecer uma substituição que chama <xref:System.Xaml.Schema.XamlMemberInvoker.%23ctor%28System.Xaml.XamlMember%29> como base. Fornecendo o <xref:System.Xaml.XamlMember> implementa uma padrão padrão onde <xref:System.Xaml.Schema.XamlMemberInvoker> é imutável.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlMemberInvoker (System.Xaml.XamlMember member);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xaml.XamlMember member) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlMemberInvoker.#ctor(System.Xaml.XamlMember)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (member As XamlMember)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlMemberInvoker(System::Xaml::XamlMember ^ member);" />
      <MemberSignature Language="F#" Value="new System.Xaml.Schema.XamlMemberInvoker : System.Xaml.XamlMember -&gt; System.Xaml.Schema.XamlMemberInvoker" Usage="new System.Xaml.Schema.XamlMemberInvoker member" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="member" Type="System.Xaml.XamlMember" />
      </Parameters>
      <Docs>
        <param name="member">O valor do <see cref="T:System.Xaml.XamlMember" /> para o membro XAML específico, relevante a este <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> com base em um <see cref="T:System.Xaml.XamlMember" /> fornecido.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este construtor é chamado internamente com base no <xref:System.Xaml.XamlMember> onde o <xref:System.Xaml.Schema.XamlMemberInvoker> é usado para a construção.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="member" /> é <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public virtual object GetValue (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetValue(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlMemberInvoker.GetValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetValue (instance As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetValue(System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="abstract member GetValue : obj -&gt; obj&#xA;override this.GetValue : obj -&gt; obj" Usage="xamlMemberInvoker.GetValue instance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">Uma instância do tipo de proprietário para o membro.</param>
        <summary>Obtém um valor da propriedade relevante de uma instância.</summary>
        <returns>O valor da propriedade solicitada.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="instance" /> é <see langword="null" />.</exception>
        <exception cref="T:System.NotSupportedException">Esse método foi invocado em um <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> que se baseia em um <see cref="T:System.Xaml.XamlMember" /> desconhecido.  **– ou – ** Esse método foi invocado em um membro somente gravação.  **– ou –** <see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter" /> é <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>A implementação base inclui uma chamada para o auxiliar interno <c>ThrowIfUnknown</c>. Sempre gera este auxiliar para casos em que um <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> baseia desconhecido <see cref="T:System.Xaml.XamlMember" />, que inclui casos onde o <see cref="P:System.Xaml.XamlMember.UnderlyingMember" /> do <see cref="T:System.Xaml.XamlMember" /> é <see langword="null" />.  A implementação base lança <see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter" /> é <see langword="null" />.  Para propriedades estáticas (<see cref="P:System.Reflection.MethodBase.IsStatic" /> é <see langword="true" /> por <see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter" />) a implementação padrão chama <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> na <see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter" /> passando <see langword="null" /> como o primeiro parâmetro e empacotado <paramref name="instance" /> no segundo. Propriedades não-estático, ele chama <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> e encaminha o <paramref name="instance" /> como o primeiro parâmetro e um pacote vazio como o segundo parâmetro.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public virtual void SetValue (object instance, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetValue(object instance, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlMemberInvoker.SetValue(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetValue (instance As Object, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetValue(System::Object ^ instance, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member SetValue : obj * obj -&gt; unit&#xA;override this.SetValue : obj * obj -&gt; unit" Usage="xamlMemberInvoker.SetValue (instance, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">Uma instância do tipo de proprietário para o membro.</param>
        <param name="value">O valor da propriedade a ser definido.</param>
        <summary>Define um valor da propriedade relevante em uma instância.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="instance" /> é <see langword="null" />.</exception>
        <exception cref="T:System.NotSupportedException">Esse método foi invocado em um <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> que se baseia em um <see cref="T:System.Xaml.XamlMember" /> desconhecido.  **– ou –** Esse método foi invocado em um membro somente leitura.  **– ou –** <see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter" /> é <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>A implementação base inclui uma chamada para o auxiliar interno <c>ThrowIfUnknown</c>. Sempre gera este auxiliar para casos em que um <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> baseia desconhecido <see cref="T:System.Xaml.XamlMember" />, que inclui casos onde o <see cref="P:System.Xaml.XamlMember.UnderlyingMember" /> do <see cref="T:System.Xaml.XamlMember" /> é <see langword="null" />.  A implementação base lança <see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter" /> é <see langword="null" />.  Para propriedades estáticas (<see cref="P:System.Reflection.MethodBase.IsStatic" /> é <see langword="true" /> por <see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter" />) a implementação padrão chama <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> na <see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter" /> passando <see langword="null" /> como o primeiro parâmetro e empacotamento <paramref name="instance" /> e <paramref name="value" /> como o segundo parâmetro. Propriedades não-estático, ele chama <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> e encaminha <paramref name="instance" /> como primeiro parâmetro e <paramref name="value" /> como segundo parâmetro.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeValue">
      <MemberSignature Language="C#" Value="public virtual System.Xaml.Schema.ShouldSerializeResult ShouldSerializeValue (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Xaml.Schema.ShouldSerializeResult ShouldSerializeValue(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlMemberInvoker.ShouldSerializeValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ShouldSerializeValue (instance As Object) As ShouldSerializeResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Xaml::Schema::ShouldSerializeResult ShouldSerializeValue(System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="abstract member ShouldSerializeValue : obj -&gt; System.Xaml.Schema.ShouldSerializeResult&#xA;override this.ShouldSerializeValue : obj -&gt; System.Xaml.Schema.ShouldSerializeResult" Usage="xamlMemberInvoker.ShouldSerializeValue instance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.ShouldSerializeResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">A instância com a propriedade a ser examinada quanto à persistência.</param>
        <summary>Indica se o valor deve ser persistido ao longo dos processos de serialização.</summary>
        <returns>Um valor da enumeração.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A implementação padrão retorna <xref:System.Xaml.Schema.ShouldSerializeResult.Default> se for o próprio membro XAML <xref:System.Xaml.XamlMember.IsUnknown%2A>, ou se nenhum CLR-reflexão relevante `ShouldSerialize` método foi encontrado no membro subjacente por meio de reflexão do padrão.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnderlyingGetter">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo UnderlyingGetter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo UnderlyingGetter" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UnderlyingGetter As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::MethodInfo ^ UnderlyingGetter { System::Reflection::MethodInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UnderlyingGetter : System.Reflection.MethodInfo" Usage="System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém a <see cref="T:System.Reflection.MethodInfo" /> para o método do CLR que obtém valores para a propriedade que é relevante para esse <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />.</summary>
        <value>O <see cref="T:System.Reflection.MethodInfo" /> para o CLR método que obtém valores de propriedade que é relevante para esse <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />, ou <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propriedade depende da chamada <xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A> sobre a construção de <xref:System.Xaml.XamlMember>. Para desconhecido <xref:System.Xaml.XamlMember>, ou para casos onde <xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A> retorna `null`, essa propriedade retornará `null`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnderlyingSetter">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo UnderlyingSetter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo UnderlyingSetter" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UnderlyingSetter As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::MethodInfo ^ UnderlyingSetter { System::Reflection::MethodInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UnderlyingSetter : System.Reflection.MethodInfo" Usage="System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém a <see cref="T:System.Reflection.MethodInfo" /> para o método do CLR que define valores para a propriedade que é relevante para esse <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />.</summary>
        <value>O <see cref="T:System.Reflection.MethodInfo" /> para o CLR o método que define valores para a propriedade que é relevante para esse <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />, ou <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propriedade depende da chamada <xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A> sobre a construção de <xref:System.Xaml.XamlMember>. Para desconhecido <xref:System.Xaml.XamlMember>, ou para casos onde <xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A> retorna `null`, essa propriedade retornará `null`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnknownInvoker">
      <MemberSignature Language="C#" Value="public static System.Xaml.Schema.XamlMemberInvoker UnknownInvoker { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Xaml.Schema.XamlMemberInvoker UnknownInvoker" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UnknownInvoker As XamlMemberInvoker" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Xaml::Schema::XamlMemberInvoker ^ UnknownInvoker { System::Xaml::Schema::XamlMemberInvoker ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UnknownInvoker : System.Xaml.Schema.XamlMemberInvoker" Usage="System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlMemberInvoker</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Fornece um valor estático que representa um <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> desconhecido, que não foi totalmente implementado.</summary>
        <value>Um valor estático que representa desconhecido, não é totalmente implementado <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Fornecer esse valor para um <xref:System.Xaml.Schema.XamlMemberInvoker> parâmetro de System. XAML definido API geralmente fará com que o código de chamada a gerar exceções.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>