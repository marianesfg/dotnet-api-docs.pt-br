<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XamlMemberInvoker.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac506593ac583c0f24c3b973fbdbfba42e69f84af7c.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">06593ac583c0f24c3b973fbdbfba42e69f84af7c</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xaml.Schema.XamlMemberInvoker">
          <source>Provides an extension point that can access member characteristics of a XAML member through techniques other than reflection.</source>
          <target state="translated">Fornece um ponto de extensão que pode acessar as características de um membro XAML por meio de técnicas que não são de reflexão.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlMemberInvoker">
          <source>The purpose of <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph> is to enable an extensible XAML type system, schema, and a working run time that does not rely as fully on CLR features such as CLR attributes, reflection information through <ph id="ph2">&lt;xref:System.Type&gt;</ph> and <ph id="ph3">&lt;xref:System.Reflection.MemberInfo&gt;</ph>, and so on.</source>
          <target state="translated">A finalidade de <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph> é habilitar um trabalho que não depende de como totalmente os recursos CLR como atributos CLR, informações de reflexão por meio de tempo de execução de um sistema de tipo XAML extensível e esquemas <ph id="ph2">&lt;xref:System.Type&gt;</ph> e <ph id="ph3">&lt;xref:System.Reflection.MemberInfo&gt;</ph>, e assim por diante.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlMemberInvoker">
          <source>Subclasses of <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph> are used as input parameters for the alternate constructors of XAML schema classes such as <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph>.</source>
          <target state="translated">As subclasses de <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph> são usados como parâmetros de entrada para os construtores alternativos de classes de esquema XAML como <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlMemberInvoker">
          <source>You subclass <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> and pass the <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph> through to the base constructor.</source>
          <target state="translated">Você subclasse <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> e passar o <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph> por meio do construtor base.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlMemberInvoker">
          <source>Along with defining a <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph> for the constructor, you must also provide overrides for at least some of the <ph id="ph2">`Lookup`</ph> methods of <ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph>.</source>
          <target state="translated">Junto com a definição de um <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph> para o construtor, você também deve fornecer substituições para pelo menos alguns do <ph id="ph2">`Lookup`</ph> métodos de <ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlMemberInvoker">
          <source><ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph> has a default implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph> tem uma implementação padrão.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlMemberInvoker">
          <source>The default implementation follows a similar model to the default implementation of XAML schema types <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> and <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph>: the CLR type system is used for instantiation, values and lookups, including using CLR attributes, <ph id="ph3">&lt;xref:System.Type&gt;</ph> and <ph id="ph4">&lt;xref:System.Reflection.MemberInfo&gt;</ph>, and so on.</source>
          <target state="translated">A implementação padrão segue um modelo semelhante para a implementação padrão de tipos de esquema XAML <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> e <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph>: o sistema de tipos CLR é usado para instanciação, valores e pesquisas, incluindo o uso de atributos CLR, <ph id="ph3">&lt;xref:System.Type&gt;</ph> e <ph id="ph4">&lt;xref:System.Reflection.MemberInfo&gt;</ph>, e assim por diante.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlMemberInvoker">
          <source><ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph> provides methods for basic get and set operations (<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.GetValue%2A&gt;</ph>; <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.SetValue%2A&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph> fornece métodos para get básico e operações de conjunto (<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.GetValue%2A&gt;</ph>; <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.SetValue%2A&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlMemberInvoker">
          <source>It also provides the properties <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter%2A&gt;</ph>, but these are not virtual.</source>
          <target state="translated">Ele também fornece as propriedades <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter%2A&gt;</ph>, mas eles não são virtuais.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlMemberInvoker">
          <source>It may be possible to obtain a <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph> value that represents a XAML directive, which is implemented as a private class in the System.Xaml implementation.</source>
          <target state="translated">É possível obter um <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph> valor que representa uma diretiva XAML, que é implementada como uma classe privada na implementação System. XAML.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlMemberInvoker">
          <source>If you attempt to call <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.GetValue%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.SetValue%2A&gt;</ph> on this invoker, an exception is thrown.</source>
          <target state="translated">Se você tentar chamar <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.GetValue%2A&gt;</ph> ou <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.SetValue%2A&gt;</ph> neste chamador, uma exceção será lançada.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="T:System.Xaml.Schema.XamlMemberInvoker">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> class.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlMemberInvoker.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> class.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlMemberInvoker.#ctor">
          <source>The default implementation is empty.</source>
          <target state="translated">A implementação padrão está vazia.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlMemberInvoker.#ctor">
          <source>This constructor is invoked internally to provide a value for <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A&gt;</ph>.</source>
          <target state="translated">Este construtor é chamado internamente para fornecer um valor para <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlMemberInvoker.#ctor">
          <source>For a <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph> subclass, it is expected that you either use the <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.%23ctor%28System.Xaml.XamlMember%29&gt;</ph> signature for construction or provide an override that calls <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.%23ctor%28System.Xaml.XamlMember%29&gt;</ph> as base.</source>
          <target state="translated">Para uma <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph> subclasse, espera-se que você use o <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.%23ctor%28System.Xaml.XamlMember%29&gt;</ph> assinatura para a construção ou fornecer uma substituição que chama <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.%23ctor%28System.Xaml.XamlMember%29&gt;</ph> como base.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlMemberInvoker.#ctor">
          <source>Providing the <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> implements a default pattern where <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph> is immutable.</source>
          <target state="translated">Fornecendo o <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> implementa uma padrão padrão onde <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph> é imutável.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlMemberInvoker.#ctor(System.Xaml.XamlMember)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> value for the specific XAML member relevant to this <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph>.</source>
          <target state="translated">O valor do <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> para o membro XAML específico, relevante a este <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlMemberInvoker.#ctor(System.Xaml.XamlMember)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> class, based on a provided <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> com base em um <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> fornecido.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlMemberInvoker.#ctor(System.Xaml.XamlMember)">
          <source>This constructor is called internally based on the <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> where the <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph> is used for construction.</source>
          <target state="translated">Este construtor é chamado internamente com base no <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> onde o <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph> é usado para a construção.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlMemberInvoker.#ctor(System.Xaml.XamlMember)">
          <source><ph id="ph1">&lt;paramref name="member" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="member" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlMemberInvoker.GetValue(System.Object)">
          <source>An instance of the owner type for the member.</source>
          <target state="translated">Uma instância do tipo de proprietário para o membro.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlMemberInvoker.GetValue(System.Object)">
          <source>Gets a value of the relevant property from an instance.</source>
          <target state="translated">Obtém um valor da propriedade relevante de uma instância.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlMemberInvoker.GetValue(System.Object)">
          <source>The requested property value.</source>
          <target state="translated">O valor da propriedade solicitada.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlMemberInvoker.GetValue(System.Object)">
          <source><ph id="ph1">&lt;paramref name="instance" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="instance" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlMemberInvoker.GetValue(System.Object)">
          <source>Invoked this method on a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> that is based on an unknown <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">Esse método foi invocado em um <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> que se baseia em um <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> desconhecido.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlMemberInvoker.GetValue(System.Object)">
          <source><bpt id="p1">**</bpt>-or-<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>- ou -<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlMemberInvoker.GetValue(System.Object)">
          <source>Invoked this method on a write-only member.</source>
          <target state="translated">Esse método foi invocado em um membro somente gravação.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlMemberInvoker.GetValue(System.Object)">
          <source><bpt id="p1">**</bpt>-or-<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>- ou -<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlMemberInvoker.GetValue(System.Object)">
          <source><ph id="ph1">&lt;see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlMemberInvoker.GetValue(System.Object)">
          <source>The base implementation includes a call to the internal helper <bpt id="p1">&lt;c&gt;</bpt>ThrowIfUnknown<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">A implementação base inclui uma chamada para o auxiliar interno <bpt id="p1">&lt;c&gt;</bpt>ThrowIfUnknown<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlMemberInvoker.GetValue(System.Object)">
          <source>This helper always throws for cases where a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> is based on an unknown <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>, which includes cases where the <ph id="ph3">&lt;see cref="P:System.Xaml.XamlMember.UnderlyingMember" /&gt;</ph> of the <ph id="ph4">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> is <ph id="ph5">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Sempre gera este auxiliar para casos em que um <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> baseia desconhecido <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>, que inclui casos onde o <ph id="ph3">&lt;see cref="P:System.Xaml.XamlMember.UnderlyingMember" /&gt;</ph> do <ph id="ph4">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> é <ph id="ph5">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlMemberInvoker.GetValue(System.Object)">
          <source>The base implementation throws if <ph id="ph1">&lt;see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">A implementação base lança <ph id="ph1">&lt;see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlMemberInvoker.GetValue(System.Object)">
          <source>For static properties (<ph id="ph1">&lt;see cref="P:System.Reflection.MethodBase.IsStatic" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph> per <ph id="ph3">&lt;see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter" /&gt;</ph>) the default implementation calls <ph id="ph4">&lt;see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /&gt;</ph> on <ph id="ph5">&lt;see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter" /&gt;</ph> passing <ph id="ph6">&lt;see langword="null" /&gt;</ph> as the first parameter and packaged <ph id="ph7">&lt;paramref name="instance" /&gt;</ph> in the second.</source>
          <target state="translated">Para propriedades estáticas (<ph id="ph1">&lt;see cref="P:System.Reflection.MethodBase.IsStatic" /&gt;</ph> é <ph id="ph2">&lt;see langword="true" /&gt;</ph> por <ph id="ph3">&lt;see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter" /&gt;</ph>) a implementação padrão chama <ph id="ph4">&lt;see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /&gt;</ph> na <ph id="ph5">&lt;see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter" /&gt;</ph> passando <ph id="ph6">&lt;see langword="null" /&gt;</ph> como o primeiro parâmetro e empacotado <ph id="ph7">&lt;paramref name="instance" /&gt;</ph> no segundo.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlMemberInvoker.GetValue(System.Object)">
          <source>For non-static properties, it calls <ph id="ph1">&lt;see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /&gt;</ph> and forwards the <ph id="ph2">&lt;paramref name="instance" /&gt;</ph> as the first parameter and an empty package as the second parameter.</source>
          <target state="translated">Propriedades não-estático, ele chama <ph id="ph1">&lt;see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /&gt;</ph> e encaminha o <ph id="ph2">&lt;paramref name="instance" /&gt;</ph> como o primeiro parâmetro e um pacote vazio como o segundo parâmetro.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlMemberInvoker.SetValue(System.Object,System.Object)">
          <source>An instance of the owner type for the member.</source>
          <target state="translated">Uma instância do tipo de proprietário para o membro.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlMemberInvoker.SetValue(System.Object,System.Object)">
          <source>The property value to set.</source>
          <target state="translated">O valor da propriedade a ser definido.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlMemberInvoker.SetValue(System.Object,System.Object)">
          <source>Sets a value of the relevant property on an instance.</source>
          <target state="translated">Define um valor da propriedade relevante em uma instância.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlMemberInvoker.SetValue(System.Object,System.Object)">
          <source><ph id="ph1">&lt;paramref name="instance" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="instance" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlMemberInvoker.SetValue(System.Object,System.Object)">
          <source>Invoked this method on a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> that is based on an unknown <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">Esse método foi invocado em um <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> que se baseia em um <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> desconhecido.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlMemberInvoker.SetValue(System.Object,System.Object)">
          <source><bpt id="p1">**</bpt>-or-<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>- ou -<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlMemberInvoker.SetValue(System.Object,System.Object)">
          <source>Invoked this method on a read-only member.</source>
          <target state="translated">Esse método foi invocado em um membro somente leitura.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlMemberInvoker.SetValue(System.Object,System.Object)">
          <source><bpt id="p1">**</bpt>-or-<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>- ou -<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlMemberInvoker.SetValue(System.Object,System.Object)">
          <source><ph id="ph1">&lt;see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlMemberInvoker.SetValue(System.Object,System.Object)">
          <source>The base implementation includes a call to the internal helper <bpt id="p1">&lt;c&gt;</bpt>ThrowIfUnknown<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">A implementação base inclui uma chamada para o auxiliar interno <bpt id="p1">&lt;c&gt;</bpt>ThrowIfUnknown<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlMemberInvoker.SetValue(System.Object,System.Object)">
          <source>This helper always throws for cases where a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> is based on an unknown <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>, which includes cases where the <ph id="ph3">&lt;see cref="P:System.Xaml.XamlMember.UnderlyingMember" /&gt;</ph> of the <ph id="ph4">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> is <ph id="ph5">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Sempre gera este auxiliar para casos em que um <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> baseia desconhecido <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>, que inclui casos onde o <ph id="ph3">&lt;see cref="P:System.Xaml.XamlMember.UnderlyingMember" /&gt;</ph> do <ph id="ph4">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> é <ph id="ph5">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlMemberInvoker.SetValue(System.Object,System.Object)">
          <source>The base implementation throws if <ph id="ph1">&lt;see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">A implementação base lança <ph id="ph1">&lt;see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlMemberInvoker.SetValue(System.Object,System.Object)">
          <source>For static properties (<ph id="ph1">&lt;see cref="P:System.Reflection.MethodBase.IsStatic" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph> per <ph id="ph3">&lt;see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter" /&gt;</ph>) the default implementation calls <ph id="ph4">&lt;see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /&gt;</ph> on <ph id="ph5">&lt;see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter" /&gt;</ph> passing <ph id="ph6">&lt;see langword="null" /&gt;</ph> as the first parameter and packaging <ph id="ph7">&lt;paramref name="instance" /&gt;</ph> and <ph id="ph8">&lt;paramref name="value" /&gt;</ph> as the second parameter.</source>
          <target state="translated">Para propriedades estáticas (<ph id="ph1">&lt;see cref="P:System.Reflection.MethodBase.IsStatic" /&gt;</ph> é <ph id="ph2">&lt;see langword="true" /&gt;</ph> por <ph id="ph3">&lt;see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter" /&gt;</ph>) a implementação padrão chama <ph id="ph4">&lt;see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /&gt;</ph> na <ph id="ph5">&lt;see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter" /&gt;</ph> passando <ph id="ph6">&lt;see langword="null" /&gt;</ph> como o primeiro parâmetro e empacotamento <ph id="ph7">&lt;paramref name="instance" /&gt;</ph> e <ph id="ph8">&lt;paramref name="value" /&gt;</ph> como o segundo parâmetro.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlMemberInvoker.SetValue(System.Object,System.Object)">
          <source>For non-static properties, it calls <ph id="ph1">&lt;see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /&gt;</ph> and forwards <ph id="ph2">&lt;paramref name="instance" /&gt;</ph> as first parameter and <ph id="ph3">&lt;paramref name="value" /&gt;</ph> as second parameter.</source>
          <target state="translated">Propriedades não-estático, ele chama <ph id="ph1">&lt;see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /&gt;</ph> e encaminha <ph id="ph2">&lt;paramref name="instance" /&gt;</ph> como primeiro parâmetro e <ph id="ph3">&lt;paramref name="value" /&gt;</ph> como segundo parâmetro.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlMemberInvoker.ShouldSerializeValue(System.Object)">
          <source>The instance with the property to be examined for persistence.</source>
          <target state="translated">A instância com a propriedade a ser examinada quanto à persistência.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlMemberInvoker.ShouldSerializeValue(System.Object)">
          <source>Indicates whether the value needs to be persisted by serialization processes.</source>
          <target state="translated">Indica se o valor deve ser persistido ao longo dos processos de serialização.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlMemberInvoker.ShouldSerializeValue(System.Object)">
          <source>A value of the enumeration.</source>
          <target state="translated">Um valor da enumeração.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlMemberInvoker.ShouldSerializeValue(System.Object)">
          <source>The default implementation returns <ph id="ph1">&lt;xref:System.Xaml.Schema.ShouldSerializeResult.Default&gt;</ph> if the XAML member itself is <ph id="ph2">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>, or if no CLR-reflection relevant <ph id="ph3">`ShouldSerialize`</ph> method is found on the underlying member through default reflection.</source>
          <target state="translated">A implementação padrão retorna <ph id="ph1">&lt;xref:System.Xaml.Schema.ShouldSerializeResult.Default&gt;</ph> se for o próprio membro XAML <ph id="ph2">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>, ou se nenhum CLR-reflexão relevante <ph id="ph3">`ShouldSerialize`</ph> método foi encontrado no membro subjacente por meio de reflexão do padrão.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> for the CLR method that gets values for the property that is relevant for this <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph>.</source>
          <target state="translated">Obtém a <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> para o método do CLR que obtém valores para a propriedade que é relevante para esse <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> for the CLR method that gets values for the property that is relevant for this <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph>, or <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> para o CLR método que obtém valores de propriedade que é relevante para esse <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph>, ou <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter">
          <source>This property relies on calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A&gt;</ph> on the constructing <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph>.</source>
          <target state="translated">Esta propriedade depende da chamada <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A&gt;</ph> sobre a construção de <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter">
          <source>For an unknown <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>, or for cases where <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A&gt;</ph> returns <ph id="ph3">`null`</ph>, this property returns <ph id="ph4">`null`</ph>.</source>
          <target state="translated">Para desconhecido <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>, ou para casos onde <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A&gt;</ph> retorna <ph id="ph3">`null`</ph>, essa propriedade retornará <ph id="ph4">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> for the CLR method that sets values for the property that is relevant for this <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph>.</source>
          <target state="translated">Obtém a <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> para o método do CLR que define valores para a propriedade que é relevante para esse <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> for the CLR method that sets values for the property that is relevant for this <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph>, or <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> para o CLR o método que define valores para a propriedade que é relevante para esse <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph>, ou <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter">
          <source>This property relies on calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A&gt;</ph> on the constructing <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph>.</source>
          <target state="translated">Esta propriedade depende da chamada <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A&gt;</ph> sobre a construção de <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter">
          <source>For an unknown <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>, or for cases where <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A&gt;</ph> returns <ph id="ph3">`null`</ph>, this property returns <ph id="ph4">`null`</ph>.</source>
          <target state="translated">Para desconhecido <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>, ou para casos onde <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A&gt;</ph> retorna <ph id="ph3">`null`</ph>, essa propriedade retornará <ph id="ph4">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="P:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker">
          <source>Provides a static value that represents an unknown, not fully implemented <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph>.</source>
          <target state="translated">Fornece um valor estático que representa um <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> desconhecido, que não foi totalmente implementado.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker">
          <source>A static value that represents an unknown, not fully implemented <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph>.</source>
          <target state="translated">Um valor estático que representa desconhecido, não é totalmente implementado <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker">
          <source>Supplying this value for a <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph> parameter of System.Xaml defined API will typically cause the called code to throw exceptions.</source>
          <target state="translated">Fornecer esse valor para um <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph> parâmetro de System. XAML definido API geralmente fará com que o código de chamada a gerar exceções.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>