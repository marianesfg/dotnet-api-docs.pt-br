<Type Name="XamlTypeInvoker" FullName="System.Xaml.Schema.XamlTypeInvoker">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d908be848800de954203e3d83f4d2005b60a7c55" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39916354" /></Metadata><TypeSignature Language="C#" Value="public class XamlTypeInvoker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlTypeInvoker extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.Schema.XamlTypeInvoker" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlTypeInvoker" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlTypeInvoker" />
  <TypeSignature Language="F#" Value="type XamlTypeInvoker = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornece um ponto de extensão que pode construir instâncias de um tipo XAML por meio de técnicas que não reflexão e construtores.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A finalidade <xref:System.Xaml.Schema.XamlTypeInvoker> é permitir que um sistema de tipo XAML extensível, esquema e um trabalho que não depende de como totalmente os recursos CLR como atributos CLR, informações de reflexão por meio de tempo de execução <xref:System.Type> e <xref:System.Reflection.MemberInfo>e assim por diante. As subclasses <xref:System.Xaml.Schema.XamlTypeInvoker> são usados como parâmetros de entrada para os construtores alternativos de classes de esquema XAML como <xref:System.Xaml.XamlType>. Você subclasse <xref:System.Xaml.XamlType> e passe o <xref:System.Xaml.Schema.XamlTypeInvoker> por meio de para o construtor base. Junto com a definição de um <xref:System.Xaml.Schema.XamlTypeInvoker> para o construtor, você também deve fornecer substituições para pelo menos alguns dos `Lookup` métodos de <xref:System.Xaml.XamlType>.  
  
 <xref:System.Xaml.Schema.XamlTypeInvoker> tem uma implementação padrão. A implementação padrão segue um modelo semelhante para a implementação padrão de tipos de esquema XAML <xref:System.Xaml.XamlType> e <xref:System.Xaml.XamlMember>: o sistema de tipos do CLR é usado para a instanciação, valores e pesquisas, incluindo o uso de atributos CLR, <xref:System.Type> e <xref:System.Reflection.MemberInfo>e assim por diante.  
  
 <xref:System.Xaml.Schema.XamlTypeInvoker> fornece métodos para a instanciação básico (<xref:System.Xaml.Schema.XamlTypeInvoker.CreateInstance%2A>) e métodos que são relevantes para os tipos em que o <xref:System.Xaml.XamlType> representa uma coleção, dicionário ou matriz (<xref:System.Xaml.Schema.XamlTypeInvoker.AddToCollection%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.GetItems%2A>).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XamlTypeInvoker ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XamlTypeInvoker();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A implementação padrão está vazia.  
  
 Este construtor é chamado internamente para fornecer um valor para <xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A>. Para um <xref:System.Xaml.Schema.XamlTypeInvoker> subclasse, espera-se que você use o <xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29> assinatura para a construção ou fornecer uma substituição que chama <xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29> como base. Fornecendo o <xref:System.Xaml.XamlType> implementam um padrão de padrão onde <xref:System.Xaml.Schema.XamlTypeInvoker> é imutável.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlTypeInvoker (System.Xaml.XamlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xaml.XamlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.#ctor(System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (type As XamlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlTypeInvoker(System::Xaml::XamlType ^ type);" />
      <MemberSignature Language="F#" Value="new System.Xaml.Schema.XamlTypeInvoker : System.Xaml.XamlType -&gt; System.Xaml.Schema.XamlTypeInvoker" Usage="new System.Xaml.Schema.XamlTypeInvoker type" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="type">O valor <see cref="T:System.Xaml.XamlType" /> para o tipo específico de XAML relevante a este <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> com base em um <see cref="T:System.Xaml.XamlType" /> fornecido.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse construtor é chamado internamente com base nas <xref:System.Xaml.XamlType> onde o <xref:System.Xaml.Schema.XamlTypeInvoker> é usado para a construção. O `type` fornecido aqui é relevante para todos os outro método chama para <xref:System.Xaml.Schema.XamlTypeInvoker>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="type" /> é <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddToCollection">
      <MemberSignature Language="C#" Value="public virtual void AddToCollection (object instance, object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddToCollection(object instance, object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddToCollection (instance As Object, item As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddToCollection(System::Object ^ instance, System::Object ^ item);" />
      <MemberSignature Language="F#" Value="abstract member AddToCollection : obj * obj -&gt; unit&#xA;override this.AddToCollection : obj * obj -&gt; unit" Usage="xamlTypeInvoker.AddToCollection (instance, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">Uma instância do tipo especificado pelo <see cref="T:System.Xaml.XamlType" /> usado para construir este <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</param>
        <param name="item">O item a ser adicionado.</param>
        <summary>Adiciona o item fornecido a uma instância do tipo relevante a esse <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você só deve chamar esse método em um <xref:System.Xaml.XamlType> que representa uma coleção.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Esse método foi invocado em um <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> que se baseia em um <see cref="T:System.Xaml.XamlType" /> desconhecido.  
  
 **-ou-**  
  
Invocado esse método em um <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> em que o tipo relevante não é uma coleção.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="instance" /> é <see langword="null" />.</exception>
        <exception cref="T:System.Xaml.XamlSchemaException"><see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> para este <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> retorna <see langword="null" />.</exception>
        <block subset="none" type="overrides"><para>A implementação base inclui uma chamada para o auxiliar interno <c>ThrowIfUnknown</c>. Sempre gera esse auxiliar para casos em que um <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> se baseia no desconhecida <see cref="T:System.Xaml.XamlType" />, que inclui casos onde o <see cref="P:System.Xaml.XamlType.UnderlyingType" /> da <see cref="T:System.Xaml.XamlType" /> é <see langword="null" />.  Internamente, as chamadas de implementação de base <see cref="P:System.Xaml.XamlType.IsCollection" />e gera se o resultado é <see langword="false" />.  A implementação base não precisa necessariamente usar seu próprio <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> implementação. Primeiro, uma conversão de <paramref name="instance" /> para <see cref="T:System.Collections.IList" /> é tentada. Se isso for bem-sucedido, uma chamada para <see cref="M:System.Collections.IList.Add(System.Object)" /> é feita e o método retorna. Caso contrário, a implementação base usa CLR <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> invocar subjacente <see langword="Add" /> método, conforme obtido de uma chamada para <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> para este <paramref name="" /> <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.  Na implementação de base, nenhuma exceção for gerada em se esse nível <paramref name="item" /> é <see langword="null" />. Ainda é possível que subjacente <see langword="Add" /> método irá gerar uma exceção quando invocada. Outras exceções de tempo de execução são possíveis se <see cref="P:System.Xaml.XamlType.ItemType" /> não retorna um resultado válido.</para></block>
      </Docs>
    </Member>
    <Member MemberName="AddToDictionary">
      <MemberSignature Language="C#" Value="public virtual void AddToDictionary (object instance, object key, object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddToDictionary(object instance, object key, object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddToDictionary (instance As Object, key As Object, item As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddToDictionary(System::Object ^ instance, System::Object ^ key, System::Object ^ item);" />
      <MemberSignature Language="F#" Value="abstract member AddToDictionary : obj * obj * obj -&gt; unit&#xA;override this.AddToDictionary : obj * obj * obj -&gt; unit" Usage="xamlTypeInvoker.AddToDictionary (instance, key, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">Uma instância do tipo especificado pelo <see cref="T:System.Xaml.XamlType" /> usado para construir este <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</param>
        <param name="key">Chave de dicionário para o item a ser adicionado.</param>
        <param name="item">O valor do item a adicionar.</param>
        <summary>Adiciona o valor de chave e item fornecido a uma instância do tipo que é relevante para esse <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você só deve chamar esse método em um <xref:System.Xaml.XamlType> que representa um dicionário.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Esse método foi invocado em um <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> que se baseia em um <see cref="T:System.Xaml.XamlType" /> desconhecido.  
  
 **-ou-**  
  
Invocado esse método em um <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> em que o tipo relevante não é um dicionário.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="instance" /> é <see langword="null" />.</exception>
        <exception cref="T:System.Xaml.XamlSchemaException"><see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> para este <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> retorna <see langword="null" />.</exception>
        <block subset="none" type="overrides"><para>A implementação base inclui uma chamada para o auxiliar interno <c>ThrowIfUnknown</c>. Sempre gera esse auxiliar para casos em que um <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> se baseia no desconhecida <see cref="T:System.Xaml.XamlType" />, que inclui casos onde o <see cref="P:System.Xaml.XamlType.UnderlyingType" /> da <see cref="T:System.Xaml.XamlType" /> é <see langword="null" />.  Internamente, as chamadas de implementação de base <see cref="P:System.Xaml.XamlType.IsDictionary" />e gera se o resultado é <see langword="false" />.  A implementação base não precisa necessariamente usar seu próprio <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> implementação. Primeiro, uma conversão de <paramref name="instance" /> para <see cref="T:System.Collections.IDictionary" /> é tentada. Se isso for bem-sucedido, uma chamada para <see cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" /> é feita e o método retorna. Caso contrário, a implementação base usa CLR <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> invocar subjacente <see langword="Add" /> método, conforme obtido de uma chamada para <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> para este <paramref name="" /> <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.  Na implementação de base, nenhuma exceção for gerada em se esse nível <paramref name="item" /> ou <paramref name="key" /> são <see langword="null" />. Ainda é possível que subjacente <see langword="Add" /> método irá gerar uma exceção quando invocada. Outras exceções de tempo de execução são possíveis se <see cref="P:System.Xaml.XamlType.ItemType" /> não retorna um resultado válido.</para></block>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public virtual object CreateInstance (object[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object CreateInstance(object[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateInstance (arguments As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ CreateInstance(cli::array &lt;System::Object ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="abstract member CreateInstance : obj[] -&gt; obj&#xA;override this.CreateInstance : obj[] -&gt; obj" Usage="xamlTypeInvoker.CreateInstance arguments" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arguments" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="arguments">Uma matriz de objetos que fornecem o <see langword="x:ConstructorArgs" /> para a instância. Pode ser <see langword="null" /> para tipos que não exigem nem usam <see langword="x:ConstructorArgs" />.</param>
        <summary>Cria uma instância do objeto com base no <see cref="T:System.Xaml.XamlType" /> iniciado pela construção para este <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</summary>
        <returns>A instância criada com base no <see cref="T:System.Xaml.XamlType" /> iniciado pela construção para este <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.MissingMethodException">Não foi possível resolver um construtor.</exception>
        <block subset="none" type="overrides"><para>A implementação base inclui uma chamada para o auxiliar interno <c>ThrowIfUnknown</c>. Sempre gera esse auxiliar para casos em que um <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> se baseia no desconhecida <see cref="T:System.Xaml.XamlType" />, que inclui casos onde o <see cref="P:System.Xaml.XamlType.UnderlyingType" /> da <see cref="T:System.Xaml.XamlType" /> é <see langword="null" />.</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetAddMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo GetAddMethod (System.Xaml.XamlType contentType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetAddMethod(class System.Xaml.XamlType contentType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAddMethod (contentType As XamlType) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetAddMethod(System::Xaml::XamlType ^ contentType);" />
      <MemberSignature Language="F#" Value="abstract member GetAddMethod : System.Xaml.XamlType -&gt; System.Reflection.MethodInfo&#xA;override this.GetAddMethod : System.Xaml.XamlType -&gt; System.Reflection.MethodInfo" Usage="xamlTypeInvoker.GetAddMethod contentType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contentType" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="contentType"><see cref="T:System.Xaml.XamlType" /> para o tipo de item que é usado pelo método <see langword="Add" />.</param>
        <summary>Retorna o método <see langword="Add" /> relevante para um <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> que é relevante a uma coleção ou a um dicionário.</summary>
        <returns>Informações <see cref="T:System.Reflection.MethodInfo" /> de CLR para o método <see langword="Add" /> ou nulo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método deverá retornar `null` para casos em que o <xref:System.Xaml.XamlType> para este <xref:System.Xaml.Schema.XamlTypeInvoker> não é uma coleção gravável ou dicionário. Especificamente, deve retornar `null` para casos em que <xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType> retorna `None`.  
  
> [!IMPORTANT]
>  Se você não estiver acessando um sistema de tipo XAML totalmente confiável, esse método tem o potencial de falso relatório <xref:System.Reflection.MethodInfo> informações aos chamadores.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="contentType" /> é <see langword="null" />.</exception>
        <block subset="none" type="overrides"><para>Retorna a implementação base <see langword="null" /> para casos em que um <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> baseia-se no desconhecida <see cref="T:System.Xaml.XamlType" />, que inclui casos onde o <see cref="P:System.Xaml.XamlType.UnderlyingType" /> da <see cref="T:System.Xaml.XamlType" /> é <see langword="null" />. Ele também retorna <see langword="null" /> se <see cref="P:System.Xaml.XamlType.ItemType" /> é <see langword="null" />.  Coleções de XAML potencialmente teriam mais de um <see langword="Add" /> método, como uma coleção de XAML potencialmente pode dar suporte a mais de um tipo de conteúdo (consulte <see cref="P:System.Xaml.XamlType.AllowedContentTypes" />, ou consulte <see cref="T:System.Windows.Markup.ContentWrapperAttribute" /> para obter informações sobre uma implementação desse conceito no WPF). A implementação padrão usa a lógica interna para retornar a melhor correspondência com base em como as assinaturas e o tipo de fornecido <paramref name="contentType" />.</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetEnumeratorMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo GetEnumeratorMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetEnumeratorMethod() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumeratorMethod () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetEnumeratorMethod();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumeratorMethod : unit -&gt; System.Reflection.MethodInfo&#xA;override this.GetEnumeratorMethod : unit -&gt; System.Reflection.MethodInfo" Usage="xamlTypeInvoker.GetEnumeratorMethod " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retorna um objeto que representa um método que pode fazer a enumeração sobre itens.</summary>
        <returns><see cref="T:System.Reflection.MethodInfo" /> para um método de enumerador ou <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Deve retornar `null` para casos em que <xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType> retorna `None`.  
  
> [!IMPORTANT]
>  Se você não estiver acessando um sistema de tipo XAML totalmente confiável, esse método tem o potencial de falso relatório <xref:System.Reflection.MethodInfo> informações aos chamadores.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>A implementação base chama um método auxiliar interno. Auxiliar retorna <see langword="null" /> para casos em que um <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> baseia-se no desconhecida <see cref="T:System.Xaml.XamlType" />, que inclui casos onde o <see cref="P:System.Xaml.XamlType.UnderlyingType" /> da <see cref="T:System.Xaml.XamlType" /> é <see langword="null" />. Ele também retorna <see langword="null" /> para casos em que <see cref="M:System.Xaml.XamlType.LookupCollectionKind" /> retorna <see langword="None" />.</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetItems">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IEnumerator GetItems (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetItems(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItems (instance As Object) As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetItems(System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="abstract member GetItems : obj -&gt; System.Collections.IEnumerator&#xA;override this.GetItems : obj -&gt; System.Collections.IEnumerator" Usage="xamlTypeInvoker.GetItems instance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">Uma instância do tipo especificado pelo <see cref="T:System.Xaml.XamlType" /> usado para construir este <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</param>
        <summary>Retorna um objeto <see cref="T:System.Collections.IEnumerator" /> que representa o conjunto de itens.</summary>
        <returns>Um objeto <see cref="T:System.Collections.IEnumerator" /> ou <see langword="null" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">Invocado esse método em um <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> que se baseia em um <see cref="T:System.Xaml.XamlType" /> desconhecido.  
  
 **-ou-**  
  
Invocado esse método em um <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> em que o tipo relevante não é uma coleção ou dicionário.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="instance" /> é <see langword="null" />.</exception>
        <block subset="none" type="overrides"><para>A implementação base inclui uma chamada para o auxiliar interno <c>ThrowIfUnknown</c>. Sempre gera esse auxiliar para casos em que um <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> se baseia no desconhecida <see cref="T:System.Xaml.XamlType" />, que inclui casos onde o <see cref="P:System.Xaml.XamlType.UnderlyingType" /> da <see cref="T:System.Xaml.XamlType" /> é <see langword="null" />.  A implementação base não precisa necessariamente usar seu próprio <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" /> implementação. Primeiro, uma conversão de <paramref name="instance" /> para <see cref="T:System.Collections.IEnumerable" /> é tentada. Se isso for bem-sucedido, uma chamada para <see cref="M:System.Collections.IEnumerable.GetEnumerator" /> é feita e o método retorna que retornam um valor. Caso contrário, a implementação base usa CLR <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> invocar subjacente <see langword="GetEnumerator" /> método, conforme obtido de uma chamada para <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" /> para este <paramref name="" /> <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</para></block>
      </Docs>
    </Member>
    <Member MemberName="SetMarkupExtensionHandler">
      <MemberSignature Language="C#" Value="public EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt; SetMarkupExtensionHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.EventHandler`1&lt;class System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt; SetMarkupExtensionHandler" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SetMarkupExtensionHandler As EventHandler(Of XamlSetMarkupExtensionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property EventHandler&lt;System::Windows::Markup::XamlSetMarkupExtensionEventArgs ^&gt; ^ SetMarkupExtensionHandler { EventHandler&lt;System::Windows::Markup::XamlSetMarkupExtensionEventArgs ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SetMarkupExtensionHandler : EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;" Usage="System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o manipulador a ser usado quando um <see cref="T:System.Xaml.XamlObjectWriter" /> chama um <see cref="T:System.Windows.Markup.MarkupExtension" /> implementado.</summary>
        <value>Uma implementação do manipulador que lida com esse caso.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O manipulador de eventos se baseia <xref:System.EventHandler%601> restrita com <xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs> dados de evento.  
  
 O valor retornado que invoca a <xref:System.Xaml.XamlType.LookupSetMarkupExtensionHandler%2A> comportamento do <xref:System.Xaml.XamlType> que o <xref:System.Xaml.Schema.XamlTypeInvoker> se baseia.  
  
 O valor retornado será `null` para um <xref:System.Xaml.Schema.XamlTypeInvoker> que se baseia em desconhecida <xref:System.Xaml.XamlType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTypeConverterHandler">
      <MemberSignature Language="C#" Value="public EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt; SetTypeConverterHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.EventHandler`1&lt;class System.Windows.Markup.XamlSetTypeConverterEventArgs&gt; SetTypeConverterHandler" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SetTypeConverterHandler As EventHandler(Of XamlSetTypeConverterEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property EventHandler&lt;System::Windows::Markup::XamlSetTypeConverterEventArgs ^&gt; ^ SetTypeConverterHandler { EventHandler&lt;System::Windows::Markup::XamlSetTypeConverterEventArgs ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SetTypeConverterHandler : EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt;" Usage="System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o manipulador a ser usado quando um <see cref="T:System.Xaml.XamlObjectWriter" /> chama um <see cref="T:System.ComponentModel.TypeConverter" /> implementado por CLR.</summary>
        <value>Uma implementação do manipulador que lida com esse caso.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O manipulador de eventos se baseia <xref:System.EventHandler%601> restrita com <xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs> dados de evento.  
  
 O valor retornado que invoca a <xref:System.Xaml.XamlType.LookupSetTypeConverterHandler%2A> comportamento do <xref:System.Xaml.XamlType> que o <xref:System.Xaml.Schema.XamlTypeInvoker> se baseia.  
  
 O valor retornado será `null` para um <xref:System.Xaml.Schema.XamlTypeInvoker> que se baseia em desconhecida <xref:System.Xaml.XamlType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnknownInvoker">
      <MemberSignature Language="C#" Value="public static System.Xaml.Schema.XamlTypeInvoker UnknownInvoker { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Xaml.Schema.XamlTypeInvoker UnknownInvoker" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UnknownInvoker As XamlTypeInvoker" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Xaml::Schema::XamlTypeInvoker ^ UnknownInvoker { System::Xaml::Schema::XamlTypeInvoker ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UnknownInvoker : System.Xaml.Schema.XamlTypeInvoker" Usage="System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlTypeInvoker</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Fornece um valor estático que representa um <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> desconhecido, que não foi totalmente implementado.</summary>
        <value>Um valor estático que representa um desconhecido, não foi totalmente implementado <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Fornecendo esse valor para um <xref:System.Xaml.Schema.XamlTypeInvoker> parâmetro de System. XAML definido API normalmente fará com que o código de chamada lançar exceções.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>