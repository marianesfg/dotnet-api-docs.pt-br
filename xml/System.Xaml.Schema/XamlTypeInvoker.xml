<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XamlTypeInvoker.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5504f5574033cb4de7a3c6a42e6208306d4dd86e5.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">504f5574033cb4de7a3c6a42e6208306d4dd86e5</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xaml.Schema.XamlTypeInvoker">
          <source>Provides an extension point that can construct instances of a XAML type through techniques other than reflection and constructors.</source>
          <target state="translated">Fornece um ponto de extensão que pode construir instâncias de um tipo XAML por meio de técnicas que não reflexão e construtores.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlTypeInvoker">
          <source>The purpose of <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> is to enable an extensible XAML type system, schema, and a working run time that does not rely as fully on CLR features such as CLR attributes, reflection information through <ph id="ph2">&lt;xref:System.Type&gt;</ph> and <ph id="ph3">&lt;xref:System.Reflection.MemberInfo&gt;</ph>, and so on.</source>
          <target state="translated">A finalidade de <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> é habilitar um trabalho que não depende de como totalmente os recursos CLR como atributos CLR, informações de reflexão por meio de tempo de execução de um sistema de tipo XAML extensível e esquemas <ph id="ph2">&lt;xref:System.Type&gt;</ph> e <ph id="ph3">&lt;xref:System.Reflection.MemberInfo&gt;</ph>, e assim por diante.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlTypeInvoker">
          <source>Subclasses of <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> are used as input parameters for the alternate constructors of XAML schema classes such as <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph>.</source>
          <target state="translated">As subclasses de <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> são usados como parâmetros de entrada para os construtores alternativos de classes de esquema XAML como <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlTypeInvoker">
          <source>You subclass <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> and pass the <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> through to the base constructor.</source>
          <target state="translated">Você subclasse <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> e passar o <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> por meio do construtor base.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlTypeInvoker">
          <source>Along with defining a <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> for the constructor, you must also provide overrides for at least some of the <ph id="ph2">`Lookup`</ph> methods of <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>.</source>
          <target state="translated">Junto com a definição de um <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> para o construtor, você também deve fornecer substituições para pelo menos alguns do <ph id="ph2">`Lookup`</ph> métodos de <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlTypeInvoker">
          <source><ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> has a default implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> tem uma implementação padrão.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlTypeInvoker">
          <source>The default implementation follows a similar model to the default implementation of XAML schema types <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> and <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph>: the CLR type system is used for instantiation, values and lookups, including using CLR attributes, <ph id="ph3">&lt;xref:System.Type&gt;</ph> and <ph id="ph4">&lt;xref:System.Reflection.MemberInfo&gt;</ph>, and so on.</source>
          <target state="translated">A implementação padrão segue um modelo semelhante para a implementação padrão de tipos de esquema XAML <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> e <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph>: o sistema de tipos CLR é usado para instanciação, valores e pesquisas, incluindo o uso de atributos CLR, <ph id="ph3">&lt;xref:System.Type&gt;</ph> e <ph id="ph4">&lt;xref:System.Reflection.MemberInfo&gt;</ph>, e assim por diante.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlTypeInvoker">
          <source><ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> provides methods for basic instantiation (<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.CreateInstance%2A&gt;</ph>) and methods that are relevant for types where the <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> represents a collection, dictionary or array (<ph id="ph4">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.AddToCollection%2A&gt;</ph>; <ph id="ph5">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary%2A&gt;</ph>; <ph id="ph6">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod%2A&gt;</ph>; <ph id="ph7">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod%2A&gt;</ph>; <ph id="ph8">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.GetItems%2A&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> fornece métodos para instanciação básica (<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.CreateInstance%2A&gt;</ph>) e métodos que são relevantes para os tipos de onde o <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> representa uma coleção, um dicionário ou uma matriz (<ph id="ph4">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.AddToCollection%2A&gt;</ph>; <ph id="ph5">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary%2A&gt;</ph>; <ph id="ph6">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod%2A&gt;</ph>; <ph id="ph7">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod%2A&gt;</ph>; <ph id="ph8">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.GetItems%2A&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="T:System.Xaml.Schema.XamlTypeInvoker">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> class.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> class.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.#ctor">
          <source>The default implementation is empty.</source>
          <target state="translated">A implementação padrão está vazia.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.#ctor">
          <source>This constructor is invoked internally to provide a value for <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A&gt;</ph>.</source>
          <target state="translated">Este construtor é chamado internamente para fornecer um valor para <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.#ctor">
          <source>For a <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> subclass, it is expected that you either use the <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29&gt;</ph> signature for construction or provide an override that calls <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29&gt;</ph> as base.</source>
          <target state="translated">Para uma <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> subclasse, espera-se que você use o <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29&gt;</ph> assinatura para a construção ou fornecer uma substituição que chama <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29&gt;</ph> como base.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.#ctor">
          <source>Providing the <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> implements a default pattern where <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> is immutable.</source>
          <target state="translated">Fornecendo o <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> implementa uma padrão padrão onde <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> é imutável.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.#ctor(System.Xaml.XamlType)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> value for the specific XAML type relevant to this <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">O valor <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> para o tipo específico de XAML relevante a este <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.#ctor(System.Xaml.XamlType)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> class, based on a provided <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> com base em um <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> fornecido.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.#ctor(System.Xaml.XamlType)">
          <source>This constructor is called internally based on the <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> where the <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> is used for construction.</source>
          <target state="translated">Este construtor é chamado internamente com base no <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> onde o <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> é usado para a construção.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.#ctor(System.Xaml.XamlType)">
          <source>The <ph id="ph1">`type`</ph> provided here is relevant to all other method calls for <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph>.</source>
          <target state="translated">O <ph id="ph1">`type`</ph> fornecidos aqui são relevantes para as chamadas para todos os outros método <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.#ctor(System.Xaml.XamlType)">
          <source><ph id="ph1">&lt;paramref name="type" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="type" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>An instance of the type specified by the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> used for constructing this <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">Uma instância do tipo especificado pelo <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> usado para construir este <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>The item to add.</source>
          <target state="translated">O item a ser adicionado.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>Adds the provided item to an instance of the type that is relevant to this <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">Adiciona o item fornecido a uma instância do tipo relevante a esse <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>You should only call this method on a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> that represents a collection.</source>
          <target state="translated">Você só deve chamar esse método em um <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> que representa uma coleção.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>Invoked this method on a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> that is based on an unknown <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">Esse método foi invocado em um <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> que se baseia em um <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> desconhecido.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source><bpt id="p1">**</bpt>-or-<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>-ou-<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>Invoked this method on a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> where the relevant type is not a collection.</source>
          <target state="translated">Invocado esse método em um <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> em que o tipo relevante não é uma coleção.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source><ph id="ph1">&lt;paramref name="instance" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="instance" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source><ph id="ph1">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph> for this <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> returns <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph> para este <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> retorna <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>The base implementation includes a call to the internal helper <bpt id="p1">&lt;c&gt;</bpt>ThrowIfUnknown<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">A implementação base inclui uma chamada para o auxiliar interno <bpt id="p1">&lt;c&gt;</bpt>ThrowIfUnknown<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>This helper always throws for cases where a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> is based on an unknown <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>, which includes cases where the <ph id="ph3">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph> of the <ph id="ph4">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> is <ph id="ph5">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Sempre gera este auxiliar para casos em que um <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> baseia desconhecido <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>, que inclui casos onde o <ph id="ph3">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph> do <ph id="ph4">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> é <ph id="ph5">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>Internally, the base implementation calls <ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.IsCollection" /&gt;</ph>, and throws if the result is <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Internamente, as chamadas de implementação de base <ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.IsCollection" /&gt;</ph>e gera se o resultado for <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>The base implementation does not necessarily use its own <ph id="ph1">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph> implementation.</source>
          <target state="translated">A implementação base não precisa necessariamente usar seu próprio <ph id="ph1">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph> implementação.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>First, a cast of <ph id="ph1">&lt;paramref name="instance" /&gt;</ph> to <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph> is attempted.</source>
          <target state="translated">Primeiro, uma conversão de <ph id="ph1">&lt;paramref name="instance" /&gt;</ph> para <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph> é tentada.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>If this succeeds, a call to <ph id="ph1">&lt;see cref="M:System.Collections.IList.Add(System.Object)" /&gt;</ph> is made and the method returns.</source>
          <target state="translated">Se isso tiver êxito, uma chamada para <ph id="ph1">&lt;see cref="M:System.Collections.IList.Add(System.Object)" /&gt;</ph> é feita e o método retorna.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>Otherwise, the base implementation uses CLR <ph id="ph1">&lt;see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /&gt;</ph> to invoke the underlying <ph id="ph2">&lt;see langword="Add" /&gt;</ph> method, as obtained from a call to <ph id="ph3">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph> for this <ph id="ph4">&lt;paramref name="" /&gt;</ph><ph id="ph5">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">Caso contrário, a implementação base usa CLR <ph id="ph1">&lt;see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /&gt;</ph> invocar subjacente <ph id="ph2">&lt;see langword="Add" /&gt;</ph> método, conforme obtidas de uma chamada para <ph id="ph3">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph> para este <ph id="ph4">&lt;paramref name="" /&gt;</ph> <ph id="ph5">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>In the base implementation no exception is raised at this level if <ph id="ph1">&lt;paramref name="item" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">A implementação base nenhuma exceção é gerada nesse nível se <ph id="ph1">&lt;paramref name="item" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>It is still possible that the underlying <ph id="ph1">&lt;see langword="Add" /&gt;</ph> method will raise an exception when invoked.</source>
          <target state="translated">Ainda é possível que subjacente <ph id="ph1">&lt;see langword="Add" /&gt;</ph> método gerará uma exceção quando invocado.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>Other run time exceptions are possible if <ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.ItemType" /&gt;</ph> does not return a valid result.</source>
          <target state="translated">Outras exceções de tempo de execução são possíveis se <ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.ItemType" /&gt;</ph> não retornar um resultado válido.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>An instance of the type specified by the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> used for constructing this <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">Uma instância do tipo especificado pelo <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> usado para construir este <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>Dictionary key for the item to add.</source>
          <target state="translated">Chave de dicionário para o item a ser adicionado.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>The item value to add.</source>
          <target state="translated">O valor do item a adicionar.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>Adds the provided key and item value to an instance of the type that is relevant to this <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">Adiciona o valor de chave e item fornecido a uma instância do tipo que é relevante para esse <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>You should only call this method on a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> that represents a dictionary.</source>
          <target state="translated">Você só deve chamar esse método em um <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> que representa um dicionário.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>Invoked this method on a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> that is based on an unknown <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">Esse método foi invocado em um <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> que se baseia em um <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> desconhecido.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source><bpt id="p1">**</bpt>-or-<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>-ou-<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>Invoked this method on a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> where the relevant type is not a dictionary.</source>
          <target state="translated">Invocado esse método em um <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> em que o tipo relevante não é um dicionário.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source><ph id="ph1">&lt;paramref name="instance" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="instance" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source><ph id="ph1">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph> for this <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> returns <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph> para este <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> retorna <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>The base implementation includes a call to the internal helper <bpt id="p1">&lt;c&gt;</bpt>ThrowIfUnknown<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">A implementação base inclui uma chamada para o auxiliar interno <bpt id="p1">&lt;c&gt;</bpt>ThrowIfUnknown<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>This helper always throws for cases where a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> is based on an unknown <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>, which includes cases where the <ph id="ph3">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph> of the <ph id="ph4">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> is <ph id="ph5">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Sempre gera este auxiliar para casos em que um <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> baseia desconhecido <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>, que inclui casos onde o <ph id="ph3">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph> do <ph id="ph4">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> é <ph id="ph5">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>Internally, the base implementation calls <ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.IsDictionary" /&gt;</ph>, and throws if the result is <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Internamente, as chamadas de implementação de base <ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.IsDictionary" /&gt;</ph>e gera se o resultado for <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>The base implementation does not necessarily use its own <ph id="ph1">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph> implementation.</source>
          <target state="translated">A implementação base não precisa necessariamente usar seu próprio <ph id="ph1">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph> implementação.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>First, a cast of <ph id="ph1">&lt;paramref name="instance" /&gt;</ph> to <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> is attempted.</source>
          <target state="translated">Primeiro, uma conversão de <ph id="ph1">&lt;paramref name="instance" /&gt;</ph> para <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> é tentada.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>If this succeeds, a call to <ph id="ph1">&lt;see cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" /&gt;</ph> is made and the method returns.</source>
          <target state="translated">Se isso tiver êxito, uma chamada para <ph id="ph1">&lt;see cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" /&gt;</ph> é feita e o método retorna.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>Otherwise, the base implementation uses CLR <ph id="ph1">&lt;see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /&gt;</ph> to invoke the underlying <ph id="ph2">&lt;see langword="Add" /&gt;</ph> method, as obtained from a call to <ph id="ph3">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph> for this <ph id="ph4">&lt;paramref name="" /&gt;</ph><ph id="ph5">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">Caso contrário, a implementação base usa CLR <ph id="ph1">&lt;see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /&gt;</ph> invocar subjacente <ph id="ph2">&lt;see langword="Add" /&gt;</ph> método, conforme obtidas de uma chamada para <ph id="ph3">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph> para este <ph id="ph4">&lt;paramref name="" /&gt;</ph> <ph id="ph5">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>In the base implementation no exception is raised at this level if <ph id="ph1">&lt;paramref name="item" /&gt;</ph> or <ph id="ph2">&lt;paramref name="key" /&gt;</ph> are <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">A implementação base nenhuma exceção é gerada nesse nível se <ph id="ph1">&lt;paramref name="item" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="key" /&gt;</ph> são <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>It is still possible that the underlying <ph id="ph1">&lt;see langword="Add" /&gt;</ph> method will raise an exception when invoked.</source>
          <target state="translated">Ainda é possível que subjacente <ph id="ph1">&lt;see langword="Add" /&gt;</ph> método gerará uma exceção quando invocado.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>Other run time exceptions are possible if <ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.ItemType" /&gt;</ph> does not return a valid result.</source>
          <target state="translated">Outras exceções de tempo de execução são possíveis se <ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.ItemType" /&gt;</ph> não retornar um resultado válido.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])">
          <source>An array of objects that supply the <ph id="ph1">&lt;see langword="x:ConstructorArgs" /&gt;</ph> for the instance.</source>
          <target state="translated">Uma matriz de objetos que fornecem o <ph id="ph1">&lt;see langword="x:ConstructorArgs" /&gt;</ph> para a instância.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])">
          <source>May be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for types that do not require or use <ph id="ph2">&lt;see langword="x:ConstructorArgs" /&gt;</ph>.</source>
          <target state="translated">Pode ser <ph id="ph1">&lt;see langword="null" /&gt;</ph> para tipos que não exigem nem usam <ph id="ph2">&lt;see langword="x:ConstructorArgs" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])">
          <source>Creates an object instance based on the construction-initiated <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> for this <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">Cria uma instância do objeto com base no <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> iniciado pela construção para este <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])">
          <source>The created instance based on the construction-initiated <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> for this <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">A instância criada com base no <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> iniciado pela construção para este <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])">
          <source>Could not resolve a constructor.</source>
          <target state="translated">Não foi possível resolver um construtor.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])">
          <source>The base implementation includes a call to the internal helper <bpt id="p1">&lt;c&gt;</bpt>ThrowIfUnknown<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">A implementação base inclui uma chamada para o auxiliar interno <bpt id="p1">&lt;c&gt;</bpt>ThrowIfUnknown<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])">
          <source>This helper always throws for cases where a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> is based on an unknown <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>, which includes cases where the <ph id="ph3">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph> of the <ph id="ph4">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> is <ph id="ph5">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Sempre gera este auxiliar para casos em que um <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> baseia desconhecido <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>, que inclui casos onde o <ph id="ph3">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph> do <ph id="ph4">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> é <ph id="ph5">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
          <source><ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> for the item type that is used by the <ph id="ph2">&lt;see langword="Add" /&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> para o tipo de item que é usado pelo método <ph id="ph2">&lt;see langword="Add" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
          <source>Returns the relevant <ph id="ph1">&lt;see langword="Add" /&gt;</ph> method for a <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> that is relevant to a collection or dictionary.</source>
          <target state="translated">Retorna o método <ph id="ph1">&lt;see langword="Add" /&gt;</ph> relevante para um <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> que é relevante a uma coleção ou a um dicionário.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
          <source>CLR <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> information for the <ph id="ph2">&lt;see langword="Add" /&gt;</ph> method, or null.</source>
          <target state="translated">Informações <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> de CLR para o método <ph id="ph2">&lt;see langword="Add" /&gt;</ph> ou nulo.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
          <source>This method should return <ph id="ph1">`null`</ph> for cases where the <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> for this <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> is not a writeable collection or dictionary.</source>
          <target state="translated">Esse método deve retornar <ph id="ph1">`null`</ph> para casos onde o <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> para este <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> não é uma coleção gravável ou dicionário.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
          <source>Specifically, should return <ph id="ph1">`null`</ph> for cases where <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType&gt;</ph> returns <ph id="ph3">`None`</ph>.</source>
          <target state="translated">Especificamente, deve retornar <ph id="ph1">`null`</ph> para casos onde <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType&gt;</ph> retorna <ph id="ph3">`None`</ph>.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
          <source>If you are not accessing a fully trusted XAML type system, this method has the potential to report false <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> information to callers.</source>
          <target state="translated">Se você não estiver acessando um sistema de tipo XAML totalmente confiável, esse método tem o potencial de falso relatório <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> informações para chamadores.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
          <source><ph id="ph1">&lt;paramref name="contentType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="contentType" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
          <source>The base implementation returns <ph id="ph1">&lt;see langword="null" /&gt;</ph> for cases where a <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> is based on an unknown <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>, which includes cases where the <ph id="ph4">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph> of the <ph id="ph5">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> is <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Retorna a implementação base <ph id="ph1">&lt;see langword="null" /&gt;</ph> para casos em que um <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> baseia desconhecido <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>, que inclui casos onde o <ph id="ph4">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph> do <ph id="ph5">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> é <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
          <source>It also returns <ph id="ph1">&lt;see langword="null" /&gt;</ph> if <ph id="ph2">&lt;see cref="P:System.Xaml.XamlType.ItemType" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Ele também retorna <ph id="ph1">&lt;see langword="null" /&gt;</ph> se <ph id="ph2">&lt;see cref="P:System.Xaml.XamlType.ItemType" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
          <source>XAML collections potentially have more than one <ph id="ph1">&lt;see langword="Add" /&gt;</ph> method, because a XAML collection can potentially support more than one content type (see <ph id="ph2">&lt;see cref="P:System.Xaml.XamlType.AllowedContentTypes" /&gt;</ph>, or see <ph id="ph3">&lt;see cref="T:System.Windows.Markup.ContentWrapperAttribute" /&gt;</ph> for information about one implementation of this concept in WPF).</source>
          <target state="translated">Coleções XAML podem tem mais de um <ph id="ph1">&lt;see langword="Add" /&gt;</ph> método, como uma coleção de XAML potencialmente pode dar suporte a mais de um tipo de conteúdo (consulte <ph id="ph2">&lt;see cref="P:System.Xaml.XamlType.AllowedContentTypes" /&gt;</ph>, ou consulte <ph id="ph3">&lt;see cref="T:System.Windows.Markup.ContentWrapperAttribute" /&gt;</ph> para obter informações sobre uma implementação desse conceito no WPF).</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
          <source>The default implementation uses internal logic to return the best match based on the signatures and the type of the supplied <ph id="ph1">&lt;paramref name="contentType" /&gt;</ph>.</source>
          <target state="translated">A implementação padrão usa a lógica interna para retornar a melhor correspondência com base em assinaturas e o tipo de fornecido <ph id="ph1">&lt;paramref name="contentType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod">
          <source>Returns an object representing a method that can enumerate over items.</source>
          <target state="translated">Retorna um objeto que representa um método que pode fazer a enumeração sobre itens.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod">
          <source><ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> for an enumerator method, or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> para um método de enumerador ou <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod">
          <source>Should return <ph id="ph1">`null`</ph> for cases where <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType&gt;</ph> returns <ph id="ph3">`None`</ph>.</source>
          <target state="translated">Deve retornar <ph id="ph1">`null`</ph> para casos onde <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType&gt;</ph> retorna <ph id="ph3">`None`</ph>.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod">
          <source>If you are not accessing a fully trusted XAML type system, this method has the potential to report false <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> information to callers.</source>
          <target state="translated">Se você não estiver acessando um sistema de tipo XAML totalmente confiável, esse método tem o potencial de falso relatório <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> informações para chamadores.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod">
          <source>The base implementation calls an internal helper method.</source>
          <target state="translated">A implementação base chama um método auxiliar interno.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod">
          <source>That helper returns <ph id="ph1">&lt;see langword="null" /&gt;</ph> for cases where a <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> is based on an unknown <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>, which includes cases where the <ph id="ph4">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph> of the <ph id="ph5">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> is <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Auxiliar retorna <ph id="ph1">&lt;see langword="null" /&gt;</ph> para casos em que um <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> baseia desconhecido <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>, que inclui casos onde o <ph id="ph4">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph> do <ph id="ph5">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> é <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod">
          <source>It also returns <ph id="ph1">&lt;see langword="null" /&gt;</ph> for cases where <ph id="ph2">&lt;see cref="M:System.Xaml.XamlType.LookupCollectionKind" /&gt;</ph> returns <ph id="ph3">&lt;see langword="None" /&gt;</ph>.</source>
          <target state="translated">Ele também retorna <ph id="ph1">&lt;see langword="null" /&gt;</ph> para casos onde <ph id="ph2">&lt;see cref="M:System.Xaml.XamlType.LookupCollectionKind" /&gt;</ph> retorna <ph id="ph3">&lt;see langword="None" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source>An instance of the type specified by the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> used for constructing this <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">Uma instância do tipo especificado pelo <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> usado para construir este <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> object representing the set of items.</source>
          <target state="translated">Retorna um objeto <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> que representa o conjunto de itens.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> object, or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um objeto <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> ou <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source>Invoked this method on a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> that is based on an unknown <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">Invocado esse método em um <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> que se baseia em um <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> desconhecido.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source><bpt id="p1">**</bpt>-or-<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>-ou-<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source>Invoked this method on a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> where the relevant type is not a collection or dictionary.</source>
          <target state="translated">Invocado esse método em um <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> em que o tipo relevante não é uma coleção ou dicionário.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source><ph id="ph1">&lt;paramref name="instance" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="instance" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source>The base implementation includes a call to the internal helper <bpt id="p1">&lt;c&gt;</bpt>ThrowIfUnknown<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">A implementação base inclui uma chamada para o auxiliar interno <bpt id="p1">&lt;c&gt;</bpt>ThrowIfUnknown<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source>This helper always throws for cases where a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> is based on an unknown <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>, which includes cases where the <ph id="ph3">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph> of the <ph id="ph4">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> is <ph id="ph5">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Sempre gera este auxiliar para casos em que um <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> baseia desconhecido <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>, que inclui casos onde o <ph id="ph3">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph> do <ph id="ph4">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> é <ph id="ph5">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source>The base implementation does not necessarily use its own <ph id="ph1">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" /&gt;</ph> implementation.</source>
          <target state="translated">A implementação base não precisa necessariamente usar seu próprio <ph id="ph1">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" /&gt;</ph> implementação.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source>First, a cast of <ph id="ph1">&lt;paramref name="instance" /&gt;</ph> to <ph id="ph2">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph> is attempted.</source>
          <target state="translated">Primeiro, uma conversão de <ph id="ph1">&lt;paramref name="instance" /&gt;</ph> para <ph id="ph2">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph> é tentada.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source>If this succeeds, a call to <ph id="ph1">&lt;see cref="M:System.Collections.IEnumerable.GetEnumerator" /&gt;</ph> is made and the method returns that return value.</source>
          <target state="translated">Se isso tiver êxito, uma chamada para <ph id="ph1">&lt;see cref="M:System.Collections.IEnumerable.GetEnumerator" /&gt;</ph> é feita e o método retorna que o valor de retorno.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source>Otherwise, the base implementation uses CLR <ph id="ph1">&lt;see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /&gt;</ph> to invoke the underlying <ph id="ph2">&lt;see langword="GetEnumerator" /&gt;</ph> method, as obtained from a call to <ph id="ph3">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" /&gt;</ph> for this <ph id="ph4">&lt;paramref name="" /&gt;</ph><ph id="ph5">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">Caso contrário, a implementação base usa CLR <ph id="ph1">&lt;see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /&gt;</ph> invocar subjacente <ph id="ph2">&lt;see langword="GetEnumerator" /&gt;</ph> método, conforme obtidas de uma chamada para <ph id="ph3">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" /&gt;</ph> para este <ph id="ph4">&lt;paramref name="" /&gt;</ph> <ph id="ph5">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="P:System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler">
          <source>Gets the handler to use when a <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph> calls into an implemented <ph id="ph2">&lt;see cref="T:System.Windows.Markup.MarkupExtension" /&gt;</ph>.</source>
          <target state="translated">Obtém o manipulador a ser usado quando um <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph> chama um <ph id="ph2">&lt;see cref="T:System.Windows.Markup.MarkupExtension" /&gt;</ph> implementado.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler">
          <source>A handler implementation that handles this case.</source>
          <target state="translated">Uma implementação do manipulador que manipula nesse caso.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler">
          <source>The event handler is based on <ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> constrained with <ph id="ph2">&lt;xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;</ph> event data.</source>
          <target state="translated">O manipulador de eventos é baseado no <ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> restrita com <ph id="ph2">&lt;xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;</ph> dados de evento.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler">
          <source>The value returned invokes the <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupSetMarkupExtensionHandler%2A&gt;</ph> behavior of the <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> that the <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> is based on.</source>
          <target state="translated">O valor retornado invoca o <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupSetMarkupExtensionHandler%2A&gt;</ph> comportamento do <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> que o <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> se baseia.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler">
          <source>The return value is <ph id="ph1">`null`</ph> for a <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> that is based on an unknown <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>.</source>
          <target state="translated">O valor de retorno é <ph id="ph1">`null`</ph> para um <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> que se baseia no desconhecido <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="P:System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler">
          <source>Gets the handler to use when a <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph> calls into a CLR-implemented <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph>.</source>
          <target state="translated">Obtém o manipulador a ser usado quando um <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph> chama um <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> implementado por CLR.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler">
          <source>A handler implementation that handles this case.</source>
          <target state="translated">Uma implementação do manipulador que manipula nesse caso.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler">
          <source>The event handler is based on <ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> constrained with <ph id="ph2">&lt;xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;</ph> event data.</source>
          <target state="translated">O manipulador de eventos é baseado no <ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> restrita com <ph id="ph2">&lt;xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;</ph> dados de evento.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler">
          <source>The value returned invokes the <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupSetTypeConverterHandler%2A&gt;</ph> behavior of the <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> that the <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> is based on.</source>
          <target state="translated">O valor retornado invoca o <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupSetTypeConverterHandler%2A&gt;</ph> comportamento do <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> que o <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> se baseia.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler">
          <source>The return value is <ph id="ph1">`null`</ph> for a <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> that is based on an unknown <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>.</source>
          <target state="translated">O valor de retorno é <ph id="ph1">`null`</ph> para um <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> que se baseia no desconhecido <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="P:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker">
          <source>Provides a static value that represents an unknown, not fully implemented <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">Fornece um valor estático que representa um <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> desconhecido, que não foi totalmente implementado.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker">
          <source>A static value that represents an unknown, not fully implemented <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">Um valor estático que representa desconhecido, não é totalmente implementado <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker">
          <source>Supplying this value for a <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> parameter of System.Xaml defined API will typically cause the called code to throw exceptions.</source>
          <target state="translated">Fornecer esse valor para um <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> parâmetro de System. XAML definido API geralmente fará com que o código de chamada a gerar exceções.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>