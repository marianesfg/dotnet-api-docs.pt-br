<Type Name="XamlTypeInvoker" FullName="System.Xaml.Schema.XamlTypeInvoker">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bd266704ee3fe75b84f3b0e3aa578f64c1e8009d" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36445038" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XamlTypeInvoker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlTypeInvoker extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.Schema.XamlTypeInvoker" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlTypeInvoker" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlTypeInvoker" />
  <TypeSignature Language="F#" Value="type XamlTypeInvoker = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides an extension point that can construct instances of a XAML type through techniques other than reflection and constructors.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A finalidade de <xref:System.Xaml.Schema.XamlTypeInvoker> é habilitar um trabalho que não depende de como totalmente os recursos CLR como atributos CLR, informações de reflexão por meio de tempo de execução de um sistema de tipo XAML extensível e esquemas <xref:System.Type> e <xref:System.Reflection.MemberInfo>, e assim por diante. As subclasses de <xref:System.Xaml.Schema.XamlTypeInvoker> são usados como parâmetros de entrada para os construtores alternativos de classes de esquema XAML como <xref:System.Xaml.XamlType>. Você subclasse <xref:System.Xaml.XamlType> e passar o <xref:System.Xaml.Schema.XamlTypeInvoker> por meio do construtor base. Junto com a definição de um <xref:System.Xaml.Schema.XamlTypeInvoker> para o construtor, você também deve fornecer substituições para pelo menos alguns do `Lookup` métodos de <xref:System.Xaml.XamlType>.  
  
 <xref:System.Xaml.Schema.XamlTypeInvoker> tem uma implementação padrão. A implementação padrão segue um modelo semelhante para a implementação padrão de tipos de esquema XAML <xref:System.Xaml.XamlType> e <xref:System.Xaml.XamlMember>: o sistema de tipos CLR é usado para instanciação, valores e pesquisas, incluindo o uso de atributos CLR, <xref:System.Type> e <xref:System.Reflection.MemberInfo>, e assim por diante.  
  
 <xref:System.Xaml.Schema.XamlTypeInvoker> fornece métodos para instanciação básica (<xref:System.Xaml.Schema.XamlTypeInvoker.CreateInstance%2A>) e métodos que são relevantes para os tipos de onde o <xref:System.Xaml.XamlType> representa uma coleção, um dicionário ou uma matriz (<xref:System.Xaml.Schema.XamlTypeInvoker.AddToCollection%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.GetItems%2A>).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> class.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XamlTypeInvoker ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XamlTypeInvoker();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A implementação padrão está vazia.  
  
 Este construtor é chamado internamente para fornecer um valor para <xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A>. Para uma <xref:System.Xaml.Schema.XamlTypeInvoker> subclasse, espera-se que você use o <xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29> assinatura para a construção ou fornecer uma substituição que chama <xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29> como base. Fornecendo o <xref:System.Xaml.XamlType> implementa uma padrão padrão onde <xref:System.Xaml.Schema.XamlTypeInvoker> é imutável.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlTypeInvoker (System.Xaml.XamlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xaml.XamlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.#ctor(System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (type As XamlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlTypeInvoker(System::Xaml::XamlType ^ type);" />
      <MemberSignature Language="F#" Value="new System.Xaml.Schema.XamlTypeInvoker : System.Xaml.XamlType -&gt; System.Xaml.Schema.XamlTypeInvoker" Usage="new System.Xaml.Schema.XamlTypeInvoker type" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="type">The <see cref="T:System.Xaml.XamlType" /> value for the specific XAML type relevant to this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> class, based on a provided <see cref="T:System.Xaml.XamlType" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este construtor é chamado internamente com base no <xref:System.Xaml.XamlType> onde o <xref:System.Xaml.Schema.XamlTypeInvoker> é usado para a construção. O `type` fornecidos aqui são relevantes para as chamadas para todos os outros método <xref:System.Xaml.Schema.XamlTypeInvoker>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddToCollection">
      <MemberSignature Language="C#" Value="public virtual void AddToCollection (object instance, object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddToCollection(object instance, object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddToCollection (instance As Object, item As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddToCollection(System::Object ^ instance, System::Object ^ item);" />
      <MemberSignature Language="F#" Value="abstract member AddToCollection : obj * obj -&gt; unit&#xA;override this.AddToCollection : obj * obj -&gt; unit" Usage="xamlTypeInvoker.AddToCollection (instance, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">An instance of the type specified by the <see cref="T:System.Xaml.XamlType" /> used for constructing this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</param>
        <param name="item">The item to add.</param>
        <summary>Adds the provided item to an instance of the type that is relevant to this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você só deve chamar esse método em um <xref:System.Xaml.XamlType> que representa uma coleção.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> that is based on an unknown <see cref="T:System.Xaml.XamlType" />.  **-or-**  Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> where the relevant type is not a collection.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="instance" /> is <see langword="null" />.</exception>
        <exception cref="T:System.Xaml.XamlSchemaException">
          <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> for this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> returns <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>A implementação base inclui uma chamada para o auxiliar interno <c>ThrowIfUnknown</c>. Sempre gera este auxiliar para casos em que um <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> baseia desconhecido <see cref="T:System.Xaml.XamlType" />, que inclui casos onde o <see cref="P:System.Xaml.XamlType.UnderlyingType" /> do <see cref="T:System.Xaml.XamlType" /> é <see langword="null" />.  Internamente, as chamadas de implementação de base <see cref="P:System.Xaml.XamlType.IsCollection" />e gera se o resultado for <see langword="false" />.  A implementação base não precisa necessariamente usar seu próprio <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> implementação. Primeiro, uma conversão de <paramref name="instance" /> para <see cref="T:System.Collections.IList" /> é tentada. Se isso tiver êxito, uma chamada para <see cref="M:System.Collections.IList.Add(System.Object)" /> é feita e o método retorna. Caso contrário, a implementação base usa CLR <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> invocar subjacente <see langword="Add" /> método, conforme obtidas de uma chamada para <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> para este <paramref name="" /><see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.  A implementação base nenhuma exceção é gerada nesse nível se <paramref name="item" /> é <see langword="null" />. Ainda é possível que subjacente <see langword="Add" /> método gerará uma exceção quando invocado. Outras exceções de tempo de execução são possíveis se <see cref="P:System.Xaml.XamlType.ItemType" /> não retornar um resultado válido.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="AddToDictionary">
      <MemberSignature Language="C#" Value="public virtual void AddToDictionary (object instance, object key, object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddToDictionary(object instance, object key, object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddToDictionary (instance As Object, key As Object, item As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddToDictionary(System::Object ^ instance, System::Object ^ key, System::Object ^ item);" />
      <MemberSignature Language="F#" Value="abstract member AddToDictionary : obj * obj * obj -&gt; unit&#xA;override this.AddToDictionary : obj * obj * obj -&gt; unit" Usage="xamlTypeInvoker.AddToDictionary (instance, key, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">An instance of the type specified by the <see cref="T:System.Xaml.XamlType" /> used for constructing this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</param>
        <param name="key">Dictionary key for the item to add.</param>
        <param name="item">The item value to add.</param>
        <summary>Adds the provided key and item value to an instance of the type that is relevant to this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você só deve chamar esse método em um <xref:System.Xaml.XamlType> que representa um dicionário.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> that is based on an unknown <see cref="T:System.Xaml.XamlType" />.  **-or-**  Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> where the relevant type is not a dictionary.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="instance" /> is <see langword="null" />.</exception>
        <exception cref="T:System.Xaml.XamlSchemaException">
          <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> for this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> returns <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>A implementação base inclui uma chamada para o auxiliar interno <c>ThrowIfUnknown</c>. Sempre gera este auxiliar para casos em que um <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> baseia desconhecido <see cref="T:System.Xaml.XamlType" />, que inclui casos onde o <see cref="P:System.Xaml.XamlType.UnderlyingType" /> do <see cref="T:System.Xaml.XamlType" /> é <see langword="null" />.  Internamente, as chamadas de implementação de base <see cref="P:System.Xaml.XamlType.IsDictionary" />e gera se o resultado for <see langword="false" />.  A implementação base não precisa necessariamente usar seu próprio <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> implementação. Primeiro, uma conversão de <paramref name="instance" /> para <see cref="T:System.Collections.IDictionary" /> é tentada. Se isso tiver êxito, uma chamada para <see cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" /> é feita e o método retorna. Caso contrário, a implementação base usa CLR <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> invocar subjacente <see langword="Add" /> método, conforme obtidas de uma chamada para <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> para este <paramref name="" /><see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.  A implementação base nenhuma exceção é gerada nesse nível se <paramref name="item" /> ou <paramref name="key" /> são <see langword="null" />. Ainda é possível que subjacente <see langword="Add" /> método gerará uma exceção quando invocado. Outras exceções de tempo de execução são possíveis se <see cref="P:System.Xaml.XamlType.ItemType" /> não retornar um resultado válido.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public virtual object CreateInstance (object[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object CreateInstance(object[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateInstance (arguments As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ CreateInstance(cli::array &lt;System::Object ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="abstract member CreateInstance : obj[] -&gt; obj&#xA;override this.CreateInstance : obj[] -&gt; obj" Usage="xamlTypeInvoker.CreateInstance arguments" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arguments" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="arguments">An array of objects that supply the <see langword="x:ConstructorArgs" /> for the instance. May be <see langword="null" /> for types that do not require or use <see langword="x:ConstructorArgs" />.</param>
        <summary>Creates an object instance based on the construction-initiated <see cref="T:System.Xaml.XamlType" /> for this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</summary>
        <returns>The created instance based on the construction-initiated <see cref="T:System.Xaml.XamlType" /> for this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.MissingMethodException">Could not resolve a constructor.</exception>
        <block subset="none" type="overrides">
          <para>A implementação base inclui uma chamada para o auxiliar interno <c>ThrowIfUnknown</c>. Sempre gera este auxiliar para casos em que um <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> baseia desconhecido <see cref="T:System.Xaml.XamlType" />, que inclui casos onde o <see cref="P:System.Xaml.XamlType.UnderlyingType" /> do <see cref="T:System.Xaml.XamlType" /> é <see langword="null" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetAddMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo GetAddMethod (System.Xaml.XamlType contentType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetAddMethod(class System.Xaml.XamlType contentType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAddMethod (contentType As XamlType) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetAddMethod(System::Xaml::XamlType ^ contentType);" />
      <MemberSignature Language="F#" Value="abstract member GetAddMethod : System.Xaml.XamlType -&gt; System.Reflection.MethodInfo&#xA;override this.GetAddMethod : System.Xaml.XamlType -&gt; System.Reflection.MethodInfo" Usage="xamlTypeInvoker.GetAddMethod contentType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contentType" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="contentType">
          <see cref="T:System.Xaml.XamlType" /> for the item type that is used by the <see langword="Add" /> method.</param>
        <summary>Returns the relevant <see langword="Add" /> method for a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> that is relevant to a collection or dictionary.</summary>
        <returns>CLR <see cref="T:System.Reflection.MethodInfo" /> information for the <see langword="Add" /> method, or null.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método deve retornar `null` para casos onde o <xref:System.Xaml.XamlType> para este <xref:System.Xaml.Schema.XamlTypeInvoker> não é uma coleção gravável ou dicionário. Especificamente, deve retornar `null` para casos onde <xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType> retorna `None`.  
  
> [!IMPORTANT]
>  Se você não estiver acessando um sistema de tipo XAML totalmente confiável, esse método tem o potencial de falso relatório <xref:System.Reflection.MethodInfo> informações para chamadores.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="contentType" /> is <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>Retorna a implementação base <see langword="null" /> para casos em que um <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> baseia desconhecido <see cref="T:System.Xaml.XamlType" />, que inclui casos onde o <see cref="P:System.Xaml.XamlType.UnderlyingType" /> do <see cref="T:System.Xaml.XamlType" /> é <see langword="null" />. Ele também retorna <see langword="null" /> se <see cref="P:System.Xaml.XamlType.ItemType" /> é <see langword="null" />.  Coleções XAML podem tem mais de um <see langword="Add" /> método, como uma coleção de XAML potencialmente pode dar suporte a mais de um tipo de conteúdo (consulte <see cref="P:System.Xaml.XamlType.AllowedContentTypes" />, ou consulte <see cref="T:System.Windows.Markup.ContentWrapperAttribute" /> para obter informações sobre uma implementação desse conceito no WPF). A implementação padrão usa a lógica interna para retornar a melhor correspondência com base em assinaturas e o tipo de fornecido <paramref name="contentType" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetEnumeratorMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo GetEnumeratorMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetEnumeratorMethod() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumeratorMethod () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetEnumeratorMethod();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumeratorMethod : unit -&gt; System.Reflection.MethodInfo&#xA;override this.GetEnumeratorMethod : unit -&gt; System.Reflection.MethodInfo" Usage="xamlTypeInvoker.GetEnumeratorMethod " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an object representing a method that can enumerate over items.</summary>
        <returns>
          <see cref="T:System.Reflection.MethodInfo" /> for an enumerator method, or <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Deve retornar `null` para casos onde <xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType> retorna `None`.  
  
> [!IMPORTANT]
>  Se você não estiver acessando um sistema de tipo XAML totalmente confiável, esse método tem o potencial de falso relatório <xref:System.Reflection.MethodInfo> informações para chamadores.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>A implementação base chama um método auxiliar interno. Auxiliar retorna <see langword="null" /> para casos em que um <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> baseia desconhecido <see cref="T:System.Xaml.XamlType" />, que inclui casos onde o <see cref="P:System.Xaml.XamlType.UnderlyingType" /> do <see cref="T:System.Xaml.XamlType" /> é <see langword="null" />. Ele também retorna <see langword="null" /> para casos onde <see cref="M:System.Xaml.XamlType.LookupCollectionKind" /> retorna <see langword="None" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetItems">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IEnumerator GetItems (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetItems(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItems (instance As Object) As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetItems(System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="abstract member GetItems : obj -&gt; System.Collections.IEnumerator&#xA;override this.GetItems : obj -&gt; System.Collections.IEnumerator" Usage="xamlTypeInvoker.GetItems instance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">An instance of the type specified by the <see cref="T:System.Xaml.XamlType" /> used for constructing this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</param>
        <summary>Returns an <see cref="T:System.Collections.IEnumerator" /> object representing the set of items.</summary>
        <returns>An <see cref="T:System.Collections.IEnumerator" /> object, or <see langword="null" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> that is based on an unknown <see cref="T:System.Xaml.XamlType" />.  **-or-**  Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> where the relevant type is not a collection or dictionary.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="instance" /> is <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>A implementação base inclui uma chamada para o auxiliar interno <c>ThrowIfUnknown</c>. Sempre gera este auxiliar para casos em que um <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> baseia desconhecido <see cref="T:System.Xaml.XamlType" />, que inclui casos onde o <see cref="P:System.Xaml.XamlType.UnderlyingType" /> do <see cref="T:System.Xaml.XamlType" /> é <see langword="null" />.  A implementação base não precisa necessariamente usar seu próprio <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" /> implementação. Primeiro, uma conversão de <paramref name="instance" /> para <see cref="T:System.Collections.IEnumerable" /> é tentada. Se isso tiver êxito, uma chamada para <see cref="M:System.Collections.IEnumerable.GetEnumerator" /> é feita e o método retorna que o valor de retorno. Caso contrário, a implementação base usa CLR <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> invocar subjacente <see langword="GetEnumerator" /> método, conforme obtidas de uma chamada para <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" /> para este <paramref name="" /><see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="SetMarkupExtensionHandler">
      <MemberSignature Language="C#" Value="public EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt; SetMarkupExtensionHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.EventHandler`1&lt;class System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt; SetMarkupExtensionHandler" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SetMarkupExtensionHandler As EventHandler(Of XamlSetMarkupExtensionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property EventHandler&lt;System::Windows::Markup::XamlSetMarkupExtensionEventArgs ^&gt; ^ SetMarkupExtensionHandler { EventHandler&lt;System::Windows::Markup::XamlSetMarkupExtensionEventArgs ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SetMarkupExtensionHandler : EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;" Usage="System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the handler to use when a <see cref="T:System.Xaml.XamlObjectWriter" /> calls into an implemented <see cref="T:System.Windows.Markup.MarkupExtension" />.</summary>
        <value>Uma implementação do manipulador que manipula nesse caso.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O manipulador de eventos é baseado no <xref:System.EventHandler%601> restrita com <xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs> dados de evento.  
  
 O valor retornado invoca o <xref:System.Xaml.XamlType.LookupSetMarkupExtensionHandler%2A> comportamento do <xref:System.Xaml.XamlType> que o <xref:System.Xaml.Schema.XamlTypeInvoker> se baseia.  
  
 O valor de retorno é `null` para um <xref:System.Xaml.Schema.XamlTypeInvoker> que se baseia no desconhecido <xref:System.Xaml.XamlType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTypeConverterHandler">
      <MemberSignature Language="C#" Value="public EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt; SetTypeConverterHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.EventHandler`1&lt;class System.Windows.Markup.XamlSetTypeConverterEventArgs&gt; SetTypeConverterHandler" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SetTypeConverterHandler As EventHandler(Of XamlSetTypeConverterEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property EventHandler&lt;System::Windows::Markup::XamlSetTypeConverterEventArgs ^&gt; ^ SetTypeConverterHandler { EventHandler&lt;System::Windows::Markup::XamlSetTypeConverterEventArgs ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SetTypeConverterHandler : EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt;" Usage="System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the handler to use when a <see cref="T:System.Xaml.XamlObjectWriter" /> calls into a CLR-implemented <see cref="T:System.ComponentModel.TypeConverter" />.</summary>
        <value>Uma implementação do manipulador que manipula nesse caso.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O manipulador de eventos é baseado no <xref:System.EventHandler%601> restrita com <xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs> dados de evento.  
  
 O valor retornado invoca o <xref:System.Xaml.XamlType.LookupSetTypeConverterHandler%2A> comportamento do <xref:System.Xaml.XamlType> que o <xref:System.Xaml.Schema.XamlTypeInvoker> se baseia.  
  
 O valor de retorno é `null` para um <xref:System.Xaml.Schema.XamlTypeInvoker> que se baseia no desconhecido <xref:System.Xaml.XamlType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnknownInvoker">
      <MemberSignature Language="C#" Value="public static System.Xaml.Schema.XamlTypeInvoker UnknownInvoker { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Xaml.Schema.XamlTypeInvoker UnknownInvoker" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UnknownInvoker As XamlTypeInvoker" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Xaml::Schema::XamlTypeInvoker ^ UnknownInvoker { System::Xaml::Schema::XamlTypeInvoker ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UnknownInvoker : System.Xaml.Schema.XamlTypeInvoker" Usage="System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlTypeInvoker</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides a static value that represents an unknown, not fully implemented <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</summary>
        <value>Um valor estático que representa desconhecido, não é totalmente implementado <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Fornecer esse valor para um <xref:System.Xaml.Schema.XamlTypeInvoker> parâmetro de System. XAML definido API geralmente fará com que o código de chamada a gerar exceções.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>