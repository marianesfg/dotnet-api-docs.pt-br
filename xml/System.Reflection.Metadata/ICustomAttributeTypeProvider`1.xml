<Type Name="ICustomAttributeTypeProvider&lt;TType&gt;" FullName="System.Reflection.Metadata.ICustomAttributeTypeProvider&lt;TType&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4e6847f4c19b736d095b91f2f0f22ad204048f65" /><Meta Name="ms.sourcegitcommit" Value="9a6da88bd5455e8274257ca7ad259b42f1de114f" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="05/22/2019" /><Meta Name="ms.locfileid" Value="66006348" /></Metadata><TypeSignature Language="C#" Value="public interface ICustomAttributeTypeProvider&lt;TType&gt; : System.Reflection.Metadata.ISimpleTypeProvider&lt;TType&gt;, System.Reflection.Metadata.ISZArrayTypeProvider&lt;TType&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICustomAttributeTypeProvider`1&lt;TType&gt; implements class System.Reflection.Metadata.ISimpleTypeProvider`1&lt;!TType&gt;, class System.Reflection.Metadata.ISZArrayTypeProvider`1&lt;!TType&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Metadata.ICustomAttributeTypeProvider`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICustomAttributeTypeProvider(Of TType)&#xA;Implements ISimpleTypeProvider(Of TType), ISZArrayTypeProvider(Of TType)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TType&gt;&#xA;public interface class ICustomAttributeTypeProvider : System::Reflection::Metadata::ISimpleTypeProvider&lt;TType&gt;, System::Reflection::Metadata::ISZArrayTypeProvider&lt;TType&gt;" />
  <TypeSignature Language="F#" Value="type ICustomAttributeTypeProvider&lt;'ype&gt; = interface&#xA;    interface ISimpleTypeProvider&lt;'ype&gt;&#xA;    interface ISZArrayTypeProvider&lt;'ype&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Metadata</AssemblyName>
    <AssemblyVersion>1.4.1.0</AssemblyVersion>
    <AssemblyVersion>1.4.2.0</AssemblyVersion>
    <AssemblyVersion>1.4.3.0</AssemblyVersion>
    <AssemblyVersion>1.4.4.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TType" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Reflection.Metadata.ISimpleTypeProvider&lt;TType&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Reflection.Metadata.ISZArrayTypeProvider&lt;TType&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TType">To be added.</typeparam>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="GetSystemType">
      <MemberSignature Language="C#" Value="public TType GetSystemType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TType GetSystemType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.ICustomAttributeTypeProvider`1.GetSystemType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSystemType () As TType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TType GetSystemType();" />
      <MemberSignature Language="F#" Value="abstract member GetSystemType : unit -&gt; 'ype" Usage="iCustomAttributeTypeProvider.GetSystemType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtém a representação de <typeparamref name="TType" /> para <see cref="T:System.Type" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromSerializedName">
      <MemberSignature Language="C#" Value="public TType GetTypeFromSerializedName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TType GetTypeFromSerializedName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.ICustomAttributeTypeProvider`1.GetTypeFromSerializedName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeFromSerializedName (name As String) As TType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TType GetTypeFromSerializedName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetTypeFromSerializedName : string -&gt; 'ype" Usage="iCustomAttributeTypeProvider.GetTypeFromSerializedName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="name">O nome do tipo serializado no chamado formato de "notação de reflexão" (conforme reconhecido pelo método <see cref="M:System.Type.GetType(System.String)" />.)</param>
        <summary>Obtém o símbolo de tipo do nome do tipo serializado.</summary>
        <returns>Uma instância de <typeparamref name="TType" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.BadImageFormatException">O nome está malformado.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUnderlyingEnumType">
      <MemberSignature Language="C#" Value="public System.Reflection.Metadata.PrimitiveTypeCode GetUnderlyingEnumType (TType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Reflection.Metadata.PrimitiveTypeCode GetUnderlyingEnumType(!TType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.ICustomAttributeTypeProvider`1.GetUnderlyingEnumType(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUnderlyingEnumType (type As TType) As PrimitiveTypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Metadata::PrimitiveTypeCode GetUnderlyingEnumType(TType type);" />
      <MemberSignature Language="F#" Value="abstract member GetUnderlyingEnumType : 'ype -&gt; System.Reflection.Metadata.PrimitiveTypeCode" Usage="iCustomAttributeTypeProvider.GetUnderlyingEnumType type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.PrimitiveTypeCode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="TType" Index="0" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="type">Um tipo enumerado.</param>
        <summary>Obtém o tipo subjacente do símbolo de tipo enumerado especificado.</summary>
        <returns>Um código de tipo que indica o tipo subjacente da enumeração.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.BadImageFormatException">O símbolo de tipo fornecido não representa uma enumeração.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsSystemType">
      <MemberSignature Language="C#" Value="public bool IsSystemType (TType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSystemType(!TType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.ICustomAttributeTypeProvider`1.IsSystemType(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsSystemType (type As TType) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsSystemType(TType type);" />
      <MemberSignature Language="F#" Value="abstract member IsSystemType : 'ype -&gt; bool" Usage="iCustomAttributeTypeProvider.IsSystemType type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="TType" Index="0" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="type">O tipo a ser verificado.</param>
        <summary>Verifica se o tipo especificado representa <see cref="T:System.Type" />.</summary>
        <returns><see langword="true" /> se o tipo fornecido for um <see cref="T:System.Type" />; caso contrário, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
