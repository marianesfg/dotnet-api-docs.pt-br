<Type Name="LongValidator" FullName="System.Configuration.LongValidator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e086934746ffe6874673ffed53bbac8da4eb0601" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37687425" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class LongValidator : System.Configuration.ConfigurationValidatorBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LongValidator extends System.Configuration.ConfigurationValidatorBase" />
  <TypeSignature Language="DocId" Value="T:System.Configuration.LongValidator" />
  <TypeSignature Language="VB.NET" Value="Public Class LongValidator&#xA;Inherits ConfigurationValidatorBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class LongValidator : System::Configuration::ConfigurationValidatorBase" />
  <TypeSignature Language="F#" Value="type LongValidator = class&#xA;    inherit ConfigurationValidatorBase" />
  <AssemblyInfo>
    <AssemblyName>System.Configuration</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.ConfigurationValidatorBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides validation of an <see cref="T:System.Int64" /> value.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Configuration.LongValidator> é usado para garantir um `long` (um inteiro com sinal 64-bit) atende a critérios específicos. Os critérios de validação é estabelecida quando uma instância da <xref:System.Configuration.LongValidator> classe é criada. O <xref:System.Configuration.LongValidator.%23ctor%28System.Int64%2CSystem.Int64%29> construtor garante que o `long` valor que está sendo validado adere a um mínimo e um comprimento máximo. O <xref:System.Configuration.LongValidator.%23ctor%28System.Int64%2CSystem.Int64%2CSystem.Boolean%29> construtor verifica o mínimo e máximo <xref:System.Int64> valores, bem como se o intervalo de validação é exclusivo. O <xref:System.Configuration.LongValidator.%23ctor%28System.Int64%2CSystem.Int64%2CSystem.Boolean%2CSystem.Int64%29> construtor verifica a três parâmetros anteriores e também verifica se o <xref:System.Int64> valor é igual a um valor de resolução específico.  
  
 O <xref:System.Configuration.LongValidator.CanValidate%2A> método determina se o tipo de objeto que está sendo validado corresponde ao tipo esperado. O objeto que está sendo validado é passado como um parâmetro do <xref:System.Configuration.LongValidator.Validate%2A> método.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como usar o <xref:System.Configuration.LongValidator> tipo.  
  
 [!code-csharp[System.Configuration.LongValidator#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Configuration.LongValidator/CS/LongValidator.cs#1)]
 [!code-vb[System.Configuration.LongValidator#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Configuration.LongValidator/VB/LongValidator.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Configuration.ConfigurationValidatorBase" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Configuration.LongValidator" /> class.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LongValidator (long minValue, long maxValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 minValue, int64 maxValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.LongValidator.#ctor(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (minValue As Long, maxValue As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LongValidator(long minValue, long maxValue);" />
      <MemberSignature Language="F#" Value="new System.Configuration.LongValidator : int64 * int64 -&gt; System.Configuration.LongValidator" Usage="new System.Configuration.LongValidator (minValue, maxValue)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="minValue" Type="System.Int64" />
        <Parameter Name="maxValue" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="minValue">An <see cref="T:System.Int64" /> value that specifies the minimum length of the <see langword="long" /> value.</param>
        <param name="maxValue">An <see cref="T:System.Int64" /> value that specifies the maximum length of the <see langword="long" /> value.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Configuration.LongValidator" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Configuration.LongValidator.%23ctor%2A> construtor garante que o valor longo que está sendo verificado adota um mínimo e um comprimento máximo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LongValidator (long minValue, long maxValue, bool rangeIsExclusive);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 minValue, int64 maxValue, bool rangeIsExclusive) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.LongValidator.#ctor(System.Int64,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (minValue As Long, maxValue As Long, rangeIsExclusive As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LongValidator(long minValue, long maxValue, bool rangeIsExclusive);" />
      <MemberSignature Language="F#" Value="new System.Configuration.LongValidator : int64 * int64 * bool -&gt; System.Configuration.LongValidator" Usage="new System.Configuration.LongValidator (minValue, maxValue, rangeIsExclusive)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="minValue" Type="System.Int64" />
        <Parameter Name="maxValue" Type="System.Int64" />
        <Parameter Name="rangeIsExclusive" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="minValue">An <see cref="T:System.Int64" /> value that specifies the minimum length of the <see langword="long" /> value.</param>
        <param name="maxValue">An <see cref="T:System.Int64" /> value that specifies the maximum length of the <see langword="long" /> value.</param>
        <param name="rangeIsExclusive">A <see cref="T:System.Boolean" /> value that specifies whether the validation range is exclusive.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Configuration.LongValidator" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando o <xref:System.Configuration.LongValidator.%23ctor%2A> construtor é usado, ele verifica o mínimo e máximo <xref:System.Int64> valores, bem como se o intervalo de validação é exclusivo. Quando o `rangeIsExclusive` parâmetro é definido como `true`, o <xref:System.Int64> valor não deve estar entre `minValue` e `maxValue`.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como usar o <xref:System.Configuration.LongValidator.%23ctor%2A> construtor. Este exemplo de código é parte de um exemplo maior fornecido para o <xref:System.Configuration.LongValidator> classe.  
  
 [!code-csharp[System.Configuration.LongValidator#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Configuration.LongValidator/CS/LongValidator.cs#2)]
 [!code-vb[System.Configuration.LongValidator#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Configuration.LongValidator/VB/LongValidator.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LongValidator (long minValue, long maxValue, bool rangeIsExclusive, long resolution);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 minValue, int64 maxValue, bool rangeIsExclusive, int64 resolution) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.LongValidator.#ctor(System.Int64,System.Int64,System.Boolean,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (minValue As Long, maxValue As Long, rangeIsExclusive As Boolean, resolution As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LongValidator(long minValue, long maxValue, bool rangeIsExclusive, long resolution);" />
      <MemberSignature Language="F#" Value="new System.Configuration.LongValidator : int64 * int64 * bool * int64 -&gt; System.Configuration.LongValidator" Usage="new System.Configuration.LongValidator (minValue, maxValue, rangeIsExclusive, resolution)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="minValue" Type="System.Int64" />
        <Parameter Name="maxValue" Type="System.Int64" />
        <Parameter Name="rangeIsExclusive" Type="System.Boolean" />
        <Parameter Name="resolution" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="minValue">An <see cref="T:System.Int64" /> value that specifies the minimum length of the <see langword="long" /> value.</param>
        <param name="maxValue">An <see cref="T:System.Int64" /> value that specifies the maximum length of the <see langword="long" /> value.</param>
        <param name="rangeIsExclusive">A <see cref="T:System.Boolean" /> value that specifies whether the validation range is exclusive.</param>
        <param name="resolution">An <see cref="T:System.Int64" /> value that specifies a specific value that must be matched.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Configuration.LongValidator" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando você especifica o `resolution`, o <xref:System.Int64> valor que está sendo validada deve ser igual ao valor para passar na validação.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="resolution" /> is equal to or less than <see langword="0" />.  \- or -  <paramref name="maxValue" /> is less than <paramref name="minValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CanValidate">
      <MemberSignature Language="C#" Value="public override bool CanValidate (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanValidate(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.LongValidator.CanValidate(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool CanValidate(Type ^ type);" />
      <MemberSignature Language="F#" Value="override this.CanValidate : Type -&gt; bool" Usage="longValidator.CanValidate type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">The type of object.</param>
        <summary>Determines whether the type of the object can be validated.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="type" /> parameter matches an <see cref="T:System.Int64" /> value; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo de código a seguir demonstra como usar o <xref:System.Configuration.LongValidator.CanValidate%2A> método. Este exemplo de código é parte de um exemplo maior fornecido para o <xref:System.Configuration.LongValidator> classe.  
  
 [!code-csharp[System.Configuration.LongValidator#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Configuration.LongValidator/CS/LongValidator.cs#3)]
 [!code-vb[System.Configuration.LongValidator#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Configuration.LongValidator/VB/LongValidator.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public override void Validate (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Validate(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.LongValidator.Validate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Validate (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Validate(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Validate : obj -&gt; unit" Usage="longValidator.Validate value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">The value of an object.</param>
        <summary>Determines whether the value of an object is valid.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Configuration.LongValidator> classe contém as regras necessárias para validar um <xref:System.Int64> objeto. As regras são estabelecidas quando uma instância da <xref:System.Configuration.LongValidator> classe é criada. O objeto a ser validado é passado como um parâmetro do <xref:System.Configuration.LongValidator.Validate%2A> método.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como usar o <xref:System.Configuration.LongValidator.Validate%2A> método. Este exemplo de código é parte de um exemplo maior fornecido para o <xref:System.Configuration.LongValidator> classe.  
  
 [!code-csharp[System.Configuration.LongValidator#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Configuration.LongValidator/CS/LongValidator.cs#4)]
 [!code-vb[System.Configuration.LongValidator#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Configuration.LongValidator/VB/LongValidator.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Configuration.ConfigurationValidatorBase" />
      </Docs>
    </Member>
  </Members>
</Type>