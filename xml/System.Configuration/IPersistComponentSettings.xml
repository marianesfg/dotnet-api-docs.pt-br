<Type Name="IPersistComponentSettings" FullName="System.Configuration.IPersistComponentSettings">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5677725efafffdc6505a5ad61b0bbab74e1352a8" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37687438" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IPersistComponentSettings" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPersistComponentSettings" />
  <TypeSignature Language="DocId" Value="T:System.Configuration.IPersistComponentSettings" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPersistComponentSettings" />
  <TypeSignature Language="C++ CLI" Value="public interface class IPersistComponentSettings" />
  <TypeSignature Language="F#" Value="type IPersistComponentSettings = interface" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Define a funcionalidade padrão para controles ou bibliotecas que armazenam e recuperam as configurações de aplicativo.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalmente, você pode adicionar suporte de configurações do aplicativo para um aplicativo, criando uma classe de wrapper de configurações, que é derivada de <xref:System.Configuration.ApplicationSettingsBase>e, em seguida, acrescentar propriedades especiais para essa classe. No entanto, essa abordagem não suficientemente encapsula as configurações de aplicativo para um controle, de modo que seu contêiner está blindado dos detalhes. O <xref:System.Configuration.IPersistComponentSettings> interface fornece um aplicativo com uma interface padrão para solicitações de alteração de estado de configurações de aplicativo como um módulo de controle, componente ou biblioteca de comunicação. Ferramentas de tempo de design também dependem dessa interface para gerenciar corretamente os controles e componentes.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Configuration.ApplicationSettingsBase" />
  </Docs>
  <Members>
    <Member MemberName="LoadComponentSettings">
      <MemberSignature Language="C#" Value="public void LoadComponentSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadComponentSettings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.IPersistComponentSettings.LoadComponentSettings" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadComponentSettings ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadComponentSettings();" />
      <MemberSignature Language="F#" Value="abstract member LoadComponentSettings : unit -&gt; unit" Usage="iPersistComponentSettings.LoadComponentSettings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Lê as configurações de aplicativo do controle em suas propriedades correspondentes e atualiza o estado do controle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Em geral, o <xref:System.Configuration.IPersistComponentSettings.LoadComponentSettings%2A> método executa duas operações essenciais:  
  
-   Faz com que cada instância de configurações do aplicativo contida pelo controle para atualizar os valores de suas propriedades de configurações do aplicativo, normalmente chamando seus <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> métodos.  
  
-   Conforme necessário, ele atualiza as propriedades gerais que dependem dessas configurações recarregadas propriedades. Por exemplo, se a classe de configurações continha uma `location` propriedade de configurações <xref:System.Configuration.IPersistComponentSettings.LoadComponentSettings%2A> deve garantir que o controle <xref:System.Windows.Forms.Control.Location%2A> propriedade é atualizada para refletir essa configuração recarregada.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.IPersistComponentSettings.SaveComponentSettings" />
        <altmember cref="M:System.Configuration.IPersistComponentSettings.ResetComponentSettings" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Reload" />
      </Docs>
    </Member>
    <Member MemberName="ResetComponentSettings">
      <MemberSignature Language="C#" Value="public void ResetComponentSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResetComponentSettings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.IPersistComponentSettings.ResetComponentSettings" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetComponentSettings ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetComponentSettings();" />
      <MemberSignature Language="F#" Value="abstract member ResetComponentSettings : unit -&gt; unit" Usage="iPersistComponentSettings.ResetComponentSettings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Redefine as propriedades de configurações do aplicativo do controle para seus valores padrão.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A implementação do <xref:System.Configuration.IPersistComponentSettings.ResetComponentSettings%2A> normalmente chamadas de método a <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> método em cada instância de uma classe de configurações de aplicativo que ele contém.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.IPersistComponentSettings.LoadComponentSettings" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Reset" />
      </Docs>
    </Member>
    <Member MemberName="SaveComponentSettings">
      <MemberSignature Language="C#" Value="public void SaveComponentSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SaveComponentSettings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.IPersistComponentSettings.SaveComponentSettings" />
      <MemberSignature Language="VB.NET" Value="Public Sub SaveComponentSettings ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SaveComponentSettings();" />
      <MemberSignature Language="F#" Value="abstract member SaveComponentSettings : unit -&gt; unit" Usage="iPersistComponentSettings.SaveComponentSettings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Persiste as propriedades de configurações do aplicativo do controle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A> método grava os valores das propriedades de configurações de aplicativo do controle para o armazenamento de dados associado. A técnica de serialização e armazenamento de dados usa o método é determinada pelo provedor de configurações associado a cada classe de configurações por meio de <xref:System.Configuration.SettingsProviderAttribute>. Você pode substituir a opção de provedor de configurações usando o <xref:System.Configuration.ISettingsProviderService> interface.  
  
> [!NOTE]
>  Se o <xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A> é de propriedade `true`, o controle deve chamar <xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A> em seu próprio <xref:System.Windows.Forms.Control.Dispose%2A> método para que os dados de configuração do controle são armazenados automaticamente antes do aplicativo é encerrado.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Configuration.IPersistComponentSettings.SaveSettings" />
        <altmember cref="M:System.Configuration.IPersistComponentSettings.LoadComponentSettings" />
        <altmember cref="M:System.Configuration.IPersistComponentSettings.ResetComponentSettings" />
        <altmember cref="T:System.Configuration.SettingsProvider" />
        <altmember cref="T:System.Configuration.LocalFileSettingsProvider" />
        <altmember cref="T:System.Configuration.SettingsProviderAttribute" />
        <altmember cref="T:System.Configuration.ISettingsProviderService" />
      </Docs>
    </Member>
    <Member MemberName="SaveSettings">
      <MemberSignature Language="C#" Value="public bool SaveSettings { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SaveSettings" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.IPersistComponentSettings.SaveSettings" />
      <MemberSignature Language="VB.NET" Value="Public Property SaveSettings As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SaveSettings { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SaveSettings : bool with get, set" Usage="System.Configuration.IPersistComponentSettings.SaveSettings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define um valor que indica se o controle deve ou não persistir automaticamente as propriedades de configurações de aplicativo dele.</summary>
        <value>
          <see langword="true" /> Se o controle deve persistir automaticamente seu estado; Caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se um controle contiver dados de configuração, isso geralmente será mantido esses dados em resposta a uma chamada explícita para o <xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A> método ou implicitamente, às vezes, quando o controle <xref:System.Windows.Forms.Control.Dispose%2A> método é invocado. O <xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A> propriedade determina se um controle persiste automaticamente seus dados de configuração quando ele é descartado.  
  
 O valor padrão de <xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A> depende da implementação do controle. A documentação para o controle deve indicar se ele usa as configurações do aplicativo, quais dados são mantidos e que o valor padrão da <xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A> é de propriedade.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra o modo adequado para um controle para verificar o valor da <xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A> antes de tentar manter automaticamente seus dados de configuração de propriedade.  
  
 `protected override void Dispose( bool disposing ) {`  
  
 `if(disposing) {`  
  
 `try {`  
  
 `if (SaveSettings) {`  
  
 `SaveComponentSettings();`  
  
 `}`  
  
 `}`  
  
 `finally {`  
  
 `//...`  
  
 `}`  
  
 `}`  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.IPersistComponentSettings.SaveComponentSettings" />
        <altmember cref="M:System.Configuration.SettingsBase.Save" />
      </Docs>
    </Member>
    <Member MemberName="SettingsKey">
      <MemberSignature Language="C#" Value="public string SettingsKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SettingsKey" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.IPersistComponentSettings.SettingsKey" />
      <MemberSignature Language="VB.NET" Value="Public Property SettingsKey As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SettingsKey { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SettingsKey : string with get, set" Usage="System.Configuration.IPersistComponentSettings.SettingsKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o valor da chave de configurações do aplicativo para a instância atual do controle.</summary>
        <value>Um <see cref="T:System.String" /> que contém a chave de configurações para a instância atual do controle.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Configuration.IPersistComponentSettings.SettingsKey%2A> propriedade para resolver a ambiguidade de grupos de propriedades de configurações do aplicativo quando houver várias instâncias da mesma classe de wrapper. Por exemplo, se um controle contém uma classe wrapper associado, em seguida, colocar várias instâncias do mesmo controle no mesmo aplicativo geralmente resultará em várias instâncias da classe wrapper. Uma chave de configurações é necessária somente quando os dados de configuração é diferente em uma base por instância; Por exemplo, o local dos controles dinamicamente posicionados.  
  
 As seguintes regras gerais se aplicam ao uso de <xref:System.Configuration.IPersistComponentSettings.SettingsKey%2A>:  
  
-   Um controle, assim como qualquer classe pode conter zero ou mais classes de configurações do aplicativo, derivado de <xref:System.Configuration.ApplicationSettingsBase>. Cada classe de configurações contém sua própria <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=nameWithType> propriedade, que ajuda a resolver a ambiguidade de várias instâncias dessa classe.  
  
-   Um controle deve separar seus dados por instância e seus dados compartilhados em classes de configurações diferentes.  
  
-   Para um controle com quaisquer dados de configuração por instância, o `get` acessador do <xref:System.Configuration.IPersistComponentSettings.SettingsKey%2A> propriedade como padrão o <xref:System.Windows.Forms.Control.Name%2A> do controle. Na maioria dos casos, o nome do controle será exclusivo dentro de um aplicativo. Se o controle contém somente dados de configuração, compartilhados `get` como padrão `null`.  
  
-   O `set` acessador para esta propriedade deve ser implementado para distinguir entre classes de configurações que contém dados de configuração compartilhada e por instância. Para cada classe de configurações que contêm dados por instância, `set` deve apenas passagem para o <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=nameWithType> propriedade da classe de configurações. Para classes de configurações que contém dados compartilhados, `set` não deve realizar nenhuma ação para essa classe de configurações.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.IPersistComponentSettings.SaveComponentSettings" />
        <altmember cref="P:System.Configuration.ApplicationSettingsBase.SettingsKey" />
      </Docs>
    </Member>
  </Members>
</Type>