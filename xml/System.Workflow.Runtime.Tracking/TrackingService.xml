<Type Name="TrackingService" FullName="System.Workflow.Runtime.Tracking.TrackingService">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9373e323744498669b0bf0e86ac35613e3afaad3" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51871204" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class TrackingService : System.Workflow.Runtime.Hosting.WorkflowRuntimeService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit TrackingService extends System.Workflow.Runtime.Hosting.WorkflowRuntimeService" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.Runtime.Tracking.TrackingService" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class TrackingService&#xA;Inherits WorkflowRuntimeService" />
  <TypeSignature Language="C++ CLI" Value="public ref class TrackingService abstract : System::Workflow::Runtime::Hosting::WorkflowRuntimeService" />
  <TypeSignature Language="F#" Value="type TrackingService = class&#xA;    inherit WorkflowRuntimeService" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.Runtime</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Workflow.Runtime.Hosting.WorkflowRuntimeService</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fornece a interface básica entre um serviço de acompanhamento e a infraestrutura de acompanhamento de tempo de execução.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 Um serviço de controle é responsável por fornecer canais de controle e perfis de rastreamento para o mecanismo de tempo de execução do fluxo de trabalho. O mecanismo de tempo de execução do fluxo de trabalho solicita uma <xref:System.Workflow.Runtime.Tracking.TrackingChannel> de um serviço de controle para cada instância de fluxo de trabalho para os quais ele tem um <xref:System.Workflow.Runtime.Tracking.TrackingProfile>. O mecanismo de tempo de execução do fluxo de trabalho usa esse <xref:System.Workflow.Runtime.Tracking.TrackingChannel> enviar registros de rastreamento associado a essa instância de fluxo de trabalho. Um <xref:System.Workflow.Runtime.Tracking.TrackingProfile> contém pontos de controle que especificam um conjunto de eventos para o qual a infra-estrutura de controle de tempo de execução deve enviar registros de rastreamento de rastreamento. Um <xref:System.Workflow.Runtime.Tracking.TrackingProfile> também pode especificar os dados a serem extraídos da instância de fluxo de trabalho quando ocorre um desses eventos de rastreamento.  
  
 A infraestrutura de acompanhamento de tempo de execução usa um <xref:System.Workflow.Runtime.Tracking.TrackingProfile> para filtrar eventos emitidos por uma instância de fluxo de trabalho de acompanhamento. Quando um evento de rastreamento é emitido que corresponde a um ponto de acompanhamento na <xref:System.Workflow.Runtime.Tracking.TrackingProfile>, a infraestrutura de acompanhamento de tempo de execução extrai todos os dados especificados no <xref:System.Workflow.Runtime.Tracking.TrackingProfile> da instância de fluxo de trabalho e encapsula esses dados e informações sobre o controle evento em um registro de acompanhamento. Esse registro de acompanhamento depois é enviado a <xref:System.Workflow.Runtime.Tracking.TrackingChannel> associado com a instância de fluxo de trabalho. Um registro de rastreamento pode ser um dos seguintes tipos:  
  
 <xref:System.Workflow.Runtime.Tracking.ActivityTrackingRecord>  
  
 <xref:System.Workflow.Runtime.Tracking.UserTrackingRecord>  
  
 <xref:System.Workflow.Runtime.Tracking.WorkflowTrackingRecord>  
  
 O aplicativo host pode usar o registro de acompanhamento de qualquer forma que ele escolhe. Por exemplo, o aplicativo host pode armazenar as informações de rastreamento em um banco de dados e usá-lo para implementar uma interface do usuário sofisticada, ou ele pode usar as informações para informar o administrador de uma condição que exige alguma ação. Você pode registrar um serviço de controle com o mecanismo de tempo de execução do fluxo de trabalho chamando <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A?displayProperty=nameWithType> ou incluindo a entrada apropriada no arquivo de configuração do aplicativo.  
  
 Todos os serviços de controle devem herdar a <xref:System.Workflow.Runtime.Tracking.TrackingService> classe abstrata. Essa classe define a interface básica entre um serviço de controle e a infraestrutura de acompanhamento de tempo de execução. As solicitações do mecanismo de tempo de execução de fluxo de trabalho uma <xref:System.Workflow.Runtime.Tracking.TrackingProfile> para uma instância de fluxo de trabalho específico ou um fluxo de trabalho <xref:System.Type> chamando um dos sobrecarregado <xref:System.Workflow.Runtime.Tracking.TrackingService.GetProfile%2A> métodos ou o <xref:System.Workflow.Runtime.Tracking.TrackingService.TryGetProfile%2A> método. As chamadas do mecanismo de tempo de execução de fluxo de trabalho <xref:System.Workflow.Runtime.Tracking.TrackingService.GetTrackingChannel%2A> a solicitação de um <xref:System.Workflow.Runtime.Tracking.TrackingChannel>.  
  
 O fluxo de trabalho controle o tempo de execução chama o <xref:System.Workflow.Runtime.Tracking.TrackingService.GetProfile%2A> e <xref:System.Workflow.Runtime.Tracking.TrackingService.TryGetProfile%2A> métodos sempre que uma instância de fluxo de trabalho é criada ou carregada do repositório de persistência. A sobrecarga associada a essas chamadas pode ser cara para o serviço de acompanhamento (muitos banco de dados chamadas, por exemplo). Você pode implementar o <xref:System.Workflow.Runtime.Tracking.IProfileNotification> interface em seu serviço de controle para contornar esse mecanismo baseado em chamada e usar eventos para notificar o mecanismo de tempo de execução de fluxo de trabalho de alterações para um <xref:System.Workflow.Runtime.Tracking.TrackingProfile>. Para acompanhar os serviços que implementam o <xref:System.Workflow.Runtime.Tracking.IProfileNotification> interface, o mecanismo de tempo de execução do fluxo de trabalho se inscreve para o <xref:System.Workflow.Runtime.Tracking.IProfileNotification.ProfileUpdated> e <xref:System.Workflow.Runtime.Tracking.IProfileNotification.ProfileRemoved> eventos. Seu serviço de controle pode disparar o evento apropriado quando ocorre uma alteração em um de seus perfis de acompanhamento. O <xref:System.Workflow.Runtime.Tracking.SqlTrackingService> classe implementa essa interface.  
  
 As chamadas do mecanismo de tempo de execução de fluxo de trabalho do <xref:System.Workflow.Runtime.Tracking.TrackingService.TryReloadProfile%2A> método para testar se um <xref:System.Workflow.Runtime.Tracking.TrackingProfile> foi atualizado ou removido como resultado de uma chamada explícita por um host ou um serviço para <xref:System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles%2A> em uma instância de fluxo de trabalho. Esse processo permite que um host ou o serviço alterar dinamicamente o perfil de rastreamento que está sendo usado para uma instância de fluxo de trabalho específico.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>-Quando você herdar de <see cref="T:System.Workflow.Runtime.Tracking.TrackingService" />, você deve substituir os seguintes membros: <see cref="M:System.Workflow.Runtime.Tracking.TrackingService.GetProfile(System.Guid)" />  
  
-   <see cref="M:System.Workflow.Runtime.Tracking.TrackingService.GetProfile(System.Type,System.Version)" />  
  
-   <see cref="M:System.Workflow.Runtime.Tracking.TrackingService.TryGetProfile(System.Type,System.Workflow.Runtime.Tracking.TrackingProfile@)" />  
  
-   <see cref="M:System.Workflow.Runtime.Tracking.TrackingService.GetTrackingChannel(System.Workflow.Runtime.Tracking.TrackingParameters)" />  
  
-   <see cref="M:System.Workflow.Runtime.Tracking.TrackingService.TryReloadProfile(System.Type,System.Guid,System.Workflow.Runtime.Tracking.TrackingProfile@)" /></para>
    </block>
    <altmember cref="T:System.Workflow.Runtime.Tracking.IProfileNotification" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TrackingService ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Tracking.TrackingService.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; TrackingService();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Quando implementado em uma classe derivada, inicializa uma nova instância da classe <see cref="T:System.Workflow.Runtime.Tracking.TrackingService" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir mostra como criar uma nova instância de um `TerminationTrackingService` objeto, de um tipo que deriva de `TrackingService`. Este exemplo é do exemplo do SDK de serviço de controle de encerramento. Para obter mais informações, consulte [exemplo de serviço de controle de encerramento](https://msdn.microsoft.com/library/29b7c0d7-cece-4bb9-96d0-c5b6c6e14439).  
  
 [!code-csharp[WF_Samples#111](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets1.cs#111)]
 [!code-vb[WF_Samples#111](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets1.vb#111)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetProfile">
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Deve ser substituído na classe derivada e, quando implementado, obtém o perfil de acompanhamento para uma instância de fluxo de trabalho ou o tipo de fluxo de trabalho especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um serviço de controle é responsável por gerenciar os perfis de controle disponíveis para tipos de fluxo de trabalho específico e as instâncias de fluxo de trabalho específico. Você pode implementar esse gerenciamento de forma que você escolher. Por exemplo, você pode retornar os mesmos <xref:System.Workflow.Runtime.Tracking.TrackingProfile> para cada fluxo de trabalho <xref:System.Type> e instância de fluxo de trabalho; ou você pode gerenciar um repositório sofisticado de rastreamento referenciados pela instância de fluxo de trabalho, os perfis de fluxo de trabalho <xref:System.Type>, e <xref:System.Version>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetProfile">
      <MemberSignature Language="C#" Value="protected internal abstract System.Workflow.Runtime.Tracking.TrackingProfile GetProfile (Guid workflowInstanceId);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Workflow.Runtime.Tracking.TrackingProfile GetProfile(valuetype System.Guid workflowInstanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Tracking.TrackingService.GetProfile(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend MustOverride Function GetProfile (workflowInstanceId As Guid) As TrackingProfile" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract System::Workflow::Runtime::Tracking::TrackingProfile ^ GetProfile(Guid workflowInstanceId);" />
      <MemberSignature Language="F#" Value="abstract member GetProfile : Guid -&gt; System.Workflow.Runtime.Tracking.TrackingProfile" Usage="trackingService.GetProfile workflowInstanceId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.Tracking.TrackingProfile</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowInstanceId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="workflowInstanceId">O <see cref="T:System.Guid" /> da instância de fluxo de trabalho.</param>
        <summary>Deve ser substituído na classe derivada e, quando implementado, retorna o perfil de acompanhamento para a instância de fluxo de trabalho especificada.</summary>
        <returns>O perfil de acompanhamento para a instância de fluxo de trabalho especificada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um serviço de controle é responsável por gerenciar os perfis de controle disponíveis para tipos de fluxo de trabalho específico e as instâncias de fluxo de trabalho específico. Você pode implementar esse gerenciamento de forma que você escolher. Por exemplo, você pode retornar os mesmos <xref:System.Workflow.Runtime.Tracking.TrackingProfile> para cada fluxo de trabalho <xref:System.Type> e instância de fluxo de trabalho; ou você pode gerenciar um repositório sofisticado de rastreamento referenciados pela instância de fluxo de trabalho, os perfis de fluxo de trabalho <xref:System.Type>, e <xref:System.Version>.  
  
   
  
## Examples  
 O exemplo a seguir mostra uma implementação do `GetProfile` método. Neste exemplo, várias sobrecargas do `GetProfile` privada uma única chamada de método `GetProfile` método, que retorna um padrão embutido em código, perfil de rastreamento. Este exemplo é do exemplo do SDK de serviço de controle de encerramento. Para obter mais informações, consulte [exemplo de serviço de controle de encerramento](https://msdn.microsoft.com/library/29b7c0d7-cece-4bb9-96d0-c5b6c6e14439).  
  
 [!code-csharp[WF_Samples#115](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets1.cs#115)]
 [!code-vb[WF_Samples#115](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets1.vb#115)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProfile">
      <MemberSignature Language="C#" Value="protected internal abstract System.Workflow.Runtime.Tracking.TrackingProfile GetProfile (Type workflowType, Version profileVersionId);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Workflow.Runtime.Tracking.TrackingProfile GetProfile(class System.Type workflowType, class System.Version profileVersionId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Tracking.TrackingService.GetProfile(System.Type,System.Version)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend MustOverride Function GetProfile (workflowType As Type, profileVersionId As Version) As TrackingProfile" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract System::Workflow::Runtime::Tracking::TrackingProfile ^ GetProfile(Type ^ workflowType, Version ^ profileVersionId);" />
      <MemberSignature Language="F#" Value="abstract member GetProfile : Type * Version -&gt; System.Workflow.Runtime.Tracking.TrackingProfile" Usage="trackingService.GetProfile (workflowType, profileVersionId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.Tracking.TrackingProfile</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowType" Type="System.Type" />
        <Parameter Name="profileVersionId" Type="System.Version" />
      </Parameters>
      <Docs>
        <param name="workflowType">O <see cref="T:System.Type" /> do fluxo de trabalho.</param>
        <param name="profileVersionId">O <see cref="T:System.Version" /> de perfil de acompanhamento.</param>
        <summary>Deve ser substituído na classe derivada e, quando implementado, retorna o perfil de acompanhamento, qualificado pela versão, para o <see cref="T:System.Type" /> do fluxo de trabalho especificado.</summary>
        <returns>O perfil de acompanhamento para o tipo de fluxo de trabalho especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um serviço de controle é responsável por gerenciar os perfis de controle disponíveis para tipos de fluxo de trabalho específico e as instâncias de fluxo de trabalho específico. Você pode implementar esse gerenciamento de forma que você escolher. Por exemplo, você pode retornar os mesmos <xref:System.Workflow.Runtime.Tracking.TrackingProfile> para cada fluxo de trabalho <xref:System.Type> e instância de fluxo de trabalho; ou você pode gerenciar um repositório sofisticado de rastreamento referenciados pela instância de fluxo de trabalho, os perfis de fluxo de trabalho <xref:System.Type>, e <xref:System.Version>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTrackingChannel">
      <MemberSignature Language="C#" Value="protected internal abstract System.Workflow.Runtime.Tracking.TrackingChannel GetTrackingChannel (System.Workflow.Runtime.Tracking.TrackingParameters parameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Workflow.Runtime.Tracking.TrackingChannel GetTrackingChannel(class System.Workflow.Runtime.Tracking.TrackingParameters parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Tracking.TrackingService.GetTrackingChannel(System.Workflow.Runtime.Tracking.TrackingParameters)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend MustOverride Function GetTrackingChannel (parameters As TrackingParameters) As TrackingChannel" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract System::Workflow::Runtime::Tracking::TrackingChannel ^ GetTrackingChannel(System::Workflow::Runtime::Tracking::TrackingParameters ^ parameters);" />
      <MemberSignature Language="F#" Value="abstract member GetTrackingChannel : System.Workflow.Runtime.Tracking.TrackingParameters -&gt; System.Workflow.Runtime.Tracking.TrackingChannel" Usage="trackingService.GetTrackingChannel parameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.Tracking.TrackingChannel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="System.Workflow.Runtime.Tracking.TrackingParameters" />
      </Parameters>
      <Docs>
        <param name="parameters">O <see cref="T:System.Workflow.Runtime.Tracking.TrackingParameters" /> associado à instância de fluxo de trabalho.</param>
        <summary>Deve ser substituído na classe derivada e, quando implementado, retorna o canal que a infraestrutura de acompanhamento de tempo de execução usa para enviar os registros de acompanhamento para o serviço de acompanhamento.</summary>
        <returns>O <see cref="T:System.Workflow.Runtime.Tracking.TrackingChannel" /> que é usado para enviar os registros de acompanhamento ao serviço de acompanhamento.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A infraestrutura de acompanhamento de tempo de execução usa um <xref:System.Workflow.Runtime.Tracking.TrackingChannel> para cada serviço de controle para cada instância de fluxo de trabalho. As chamadas do mecanismo de tempo de execução de fluxo de trabalho <xref:System.Workflow.Runtime.Tracking.TrackingService.GetTrackingChannel%2A> em cada serviço de controle para obter o <xref:System.Workflow.Runtime.Tracking.TrackingChannel> para o serviço. Você pode usar as informações transmitidas no <xref:System.Workflow.Runtime.Tracking.TrackingParameters> para associar dados de acompanhamento enviados no <xref:System.Workflow.Runtime.Tracking.TrackingChannel> para seu serviço de controle com uma instância de fluxo de trabalho raiz específica.  
  
   
  
## Examples  
 O exemplo a seguir mostra uma implementação do `GetTrackingChannel` método. Este exemplo é do exemplo do SDK de serviço de controle de encerramento. Para obter mais informações, consulte [exemplo de serviço de controle de encerramento](https://msdn.microsoft.com/library/29b7c0d7-cece-4bb9-96d0-c5b6c6e14439).  
  
 [!code-csharp[WF_Samples#113](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets1.cs#113)]
 [!code-vb[WF_Samples#113](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets1.vb#113)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetProfile">
      <MemberSignature Language="C#" Value="protected internal abstract bool TryGetProfile (Type workflowType, out System.Workflow.Runtime.Tracking.TrackingProfile profile);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool TryGetProfile(class System.Type workflowType, [out] class System.Workflow.Runtime.Tracking.TrackingProfile&amp; profile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Tracking.TrackingService.TryGetProfile(System.Type,System.Workflow.Runtime.Tracking.TrackingProfile@)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend MustOverride Function TryGetProfile (workflowType As Type, ByRef profile As TrackingProfile) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract bool TryGetProfile(Type ^ workflowType, [Runtime::InteropServices::Out] System::Workflow::Runtime::Tracking::TrackingProfile ^ % profile);" />
      <MemberSignature Language="F#" Value="abstract member TryGetProfile : Type *  -&gt; bool" Usage="trackingService.TryGetProfile (workflowType, profile)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowType" Type="System.Type" />
        <Parameter Name="profile" Type="System.Workflow.Runtime.Tracking.TrackingProfile" RefType="out" />
      </Parameters>
      <Docs>
        <param name="workflowType">O <see cref="T:System.Type" /> do fluxo de trabalho para o qual obter o perfil de acompanhamento.</param>
        <param name="profile">Quando este método é retornado, ele contém o <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" /> a carregar. Este parâmetro é passado não inicializado.</param>
        <summary>Deve ser substituído na classe derivada e, quando implementado, recupera o perfil de acompanhamento do tipo de fluxo de trabalho especificado, se houver um disponível.</summary>
        <returns>
          <see langword="true" /> se um <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" /> do fluxo de trabalho especificado <see cref="T:System.Type" /> estiver disponível; caso contrário, <see langword="false" />. Se <see langword="true" />, o <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" /> será retornado no <paramref name="profile" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um serviço de controle é responsável por gerenciar os perfis de controle disponíveis para tipos de fluxo de trabalho específico e as instâncias de fluxo de trabalho específico. Você pode implementar esse gerenciamento de forma que você escolher. Por exemplo, você pode retornar os mesmos <xref:System.Workflow.Runtime.Tracking.TrackingProfile> para cada fluxo de trabalho <xref:System.Type> e instância de fluxo de trabalho; ou você pode gerenciar um repositório sofisticado de rastreamento referenciados pela instância de fluxo de trabalho, os perfis de fluxo de trabalho <xref:System.Type>, e <xref:System.Version>.  
  
   
  
## Examples  
 O exemplo a seguir demonstra uma implementação do `TryGetProfile` método, que chama uma privada `GetProfile` método. Este exemplo é do exemplo do SDK de serviço de controle de encerramento. Para obter mais informações, consulte [exemplo de serviço de controle de encerramento](https://msdn.microsoft.com/library/29b7c0d7-cece-4bb9-96d0-c5b6c6e14439).  
  
 [!code-csharp[Wf_samples#209](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets19.cs#209)]
 [!code-vb[Wf_samples#209](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets19.vb#209)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReloadProfile">
      <MemberSignature Language="C#" Value="protected internal abstract bool TryReloadProfile (Type workflowType, Guid workflowInstanceId, out System.Workflow.Runtime.Tracking.TrackingProfile profile);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool TryReloadProfile(class System.Type workflowType, valuetype System.Guid workflowInstanceId, [out] class System.Workflow.Runtime.Tracking.TrackingProfile&amp; profile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Tracking.TrackingService.TryReloadProfile(System.Type,System.Guid,System.Workflow.Runtime.Tracking.TrackingProfile@)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend MustOverride Function TryReloadProfile (workflowType As Type, workflowInstanceId As Guid, ByRef profile As TrackingProfile) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract bool TryReloadProfile(Type ^ workflowType, Guid workflowInstanceId, [Runtime::InteropServices::Out] System::Workflow::Runtime::Tracking::TrackingProfile ^ % profile);" />
      <MemberSignature Language="F#" Value="abstract member TryReloadProfile : Type * Guid *  -&gt; bool" Usage="trackingService.TryReloadProfile (workflowType, workflowInstanceId, profile)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowType" Type="System.Type" />
        <Parameter Name="workflowInstanceId" Type="System.Guid" />
        <Parameter Name="profile" Type="System.Workflow.Runtime.Tracking.TrackingProfile" RefType="out" />
      </Parameters>
      <Docs>
        <param name="workflowType">O <see cref="T:System.Type" /> da instância de fluxo de trabalho.</param>
        <param name="workflowInstanceId">O <see cref="T:System.Guid" /> da instância de fluxo de trabalho.</param>
        <param name="profile">Quando este método é retornado, ele contém o <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" /> a carregar. Este parâmetro é passado não inicializado.</param>
        <summary>Deve ser substituído na classe derivada e, quando implementado, recupera um novo perfil de acompanhamento para a instância de fluxo de trabalho especificada se o perfil de acompanhamento tiver sido alterado desde a última vez em que foi carregado.</summary>
        <returns>
          <see langword="true" /> caso um <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" /> novo deva ser carregado; caso contrário, <see langword="false" />. Se <see langword="true" />, o <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" /> será retornado no <paramref name="profile" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.Tracking.TrackingService.TryReloadProfile%2A> é chamado pela infraestrutura de acompanhamento de tempo de execução para determinar se um novo <xref:System.Workflow.Runtime.Tracking.TrackingProfile> deve ser carregado para a instância de fluxo de trabalho especificada. Se um novo <xref:System.Workflow.Runtime.Tracking.TrackingProfile> é necessária, é retornado no `profile`. Se você quiser que a infraestrutura de acompanhamento de tempo de execução para parar o controle a uma instância de fluxo de trabalho, seu serviço de controle deve retornar `true` e defina `profile` igual a uma referência nula (`Nothing` no Visual Basic). Seu serviço de controle pode usar `workflowType` ou `workflowInstanceId` forma que você escolher determinar se um perfil de rastreamento deve ser recarregado. Por exemplo, o <xref:System.Workflow.Runtime.Tracking.SqlTrackingService> usa apenas `workflowInstanceId` para decidir se o perfil de rastreamento deve ser recarregado. <xref:System.Workflow.Runtime.Tracking.TrackingService.TryReloadProfile%2A> é chamado pela infraestrutura de acompanhamento de tempo de execução de acordo com seu próprio controle semântica ou em resposta a host ou uma chamada de serviço <xref:System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles%2A?displayProperty=nameWithType> em uma instância de fluxo de trabalho.  
  
   
  
## Examples  
 O exemplo a seguir mostra uma implementação básica do `TryReloadProfile` método. Este exemplo é do exemplo do SDK de serviço de controle de encerramento. Para obter mais informações, consulte [exemplo de serviço de controle de encerramento](https://msdn.microsoft.com/library/29b7c0d7-cece-4bb9-96d0-c5b6c6e14439).  
  
 [!code-csharp[WF_Samples#116](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets1.cs#116)]
 [!code-vb[WF_Samples#116](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets1.vb#116)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>