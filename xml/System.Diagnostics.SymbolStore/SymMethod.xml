<Type Name="SymMethod" FullName="System.Diagnostics.SymbolStore.SymMethod">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ecc25cb45a1ff4279493ed6fd6a934879f5e4569" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30399410" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SymMethod : System.Diagnostics.SymbolStore.SymMethodBase, IDisposable, System.Diagnostics.SymbolStore.ISymbolMethod" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SymMethod extends System.Diagnostics.SymbolStore.SymMethodBase implements class System.Diagnostics.SymbolStore.ISymbolMethod, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.SymbolStore.SymMethod" />
  <TypeSignature Language="VB.NET" Value="Public Class SymMethod&#xA;Inherits SymMethodBase&#xA;Implements IDisposable, ISymbolMethod" />
  <TypeSignature Language="C++ CLI" Value="public ref class SymMethod : System::Diagnostics::SymbolStore::SymMethodBase, IDisposable, System::Diagnostics::SymbolStore::ISymbolMethod" />
  <AssemblyInfo>
    <AssemblyName>ISymWrapper</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.SymbolStore.SymMethodBase</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Diagnostics.SymbolStore.ISymbolMethod</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa um método em um repositório de símbolos.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Diagnostics.SymbolStore.SymMethod> classe fornece acesso somente para os atributos de símbolo de um método, como pontos de sequência, escopos de léxicos e informações de parâmetro. Use o <xref:System.Reflection> classes para ler os atributos de tipo de um método.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SymMethod (System.Diagnostics.SymbolStore.Private.ISymUnmanagedMethod* pMethod);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Diagnostics.SymbolStore.Private.ISymUnmanagedMethod* pMethod) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.SymbolStore.SymMethod.#ctor(System.Diagnostics.SymbolStore.Private.ISymUnmanagedMethod*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SymMethod(System::Diagnostics::SymbolStore::Private::ISymUnmanagedMethod* pMethod);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>ISymWrapper</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pMethod" Type="System.Diagnostics.SymbolStore.Private.ISymUnmanagedMethod*" />
      </Parameters>
      <Docs>
        <param name="pMethod">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>ISymWrapper</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Libera os recursos usados pela instância atual da classe <see cref="T:System.Diagnostics.SymbolStore.SymMethod" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public override sealed void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.SymbolStore.SymMethod.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>ISymWrapper</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libera os recursos usados pela instância atual da classe <see cref="T:System.Diagnostics.SymbolStore.SymMethod" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool A_0);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool A_0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.SymbolStore.SymMethod.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (A_0 As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool A_0);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ISymWrapper</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="A_0" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="A_0">
          <see langword="true" /> para liberar recursos gerenciados e não gerenciados, <see langword="false" /> para liberar apenas recursos não gerenciados.</param>
        <summary>Chamado pelos métodos <see cref="M:System.Diagnostics.SymbolStore.SymMethod.Dispose" /> e <see cref="M:System.Diagnostics.SymbolStore.SymMethod.Finalize" /> para liberar os recursos gerenciados e não gerenciados usados pela instância atual da classe <see cref="T:System.Diagnostics.SymbolStore.SymMethod" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método é chamado somente pelo público <xref:System.Diagnostics.SymbolStore.SymMethod.Dispose%2A> e <xref:System.Diagnostics.SymbolStore.SymMethod.Finalize%2A> métodos; não chame este método diretamente.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~SymMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.SymbolStore.SymMethod.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!SymMethod ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ISymWrapper</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libera recursos não gerenciados e executa outras operações de limpeza antes que <see cref="T:System.Diagnostics.SymbolStore.SymMethod" /> seja recuperado pela coleta de lixo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método substitui  <xref:System.Object.Finalize%2A>. O código do aplicativo não deve chamar este método; o método `Finalize` de um objeto é invocado automaticamente durante a coleta de lixo, a menos que a finalização pelo coletor de lixo tenha sido desabilitada por uma chamada para o método <xref:System.GC.SuppressFinalize%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNamespace">
      <MemberSignature Language="C#" Value="public virtual System.Diagnostics.SymbolStore.ISymbolNamespace GetNamespace ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Diagnostics.SymbolStore.ISymbolNamespace GetNamespace() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.SymbolStore.SymMethod.GetNamespace" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetNamespace () As ISymbolNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Diagnostics::SymbolStore::ISymbolNamespace ^ GetNamespace();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ISymWrapper</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.SymbolStore.ISymbolNamespace</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gera um <see cref="T:System.NotSupportedException" /> em todos os casos.</summary>
        <returns>Gera um <see cref="T:System.NotSupportedException" /> em todos os casos.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">Em todos os casos.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetOffset">
      <MemberSignature Language="C#" Value="public virtual int GetOffset (System.Diagnostics.SymbolStore.ISymbolDocument document, int line, int column);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetOffset(class System.Diagnostics.SymbolStore.ISymbolDocument document, int32 line, int32 column) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.SymbolStore.SymMethod.GetOffset(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetOffset (document As ISymbolDocument, line As Integer, column As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetOffset(System::Diagnostics::SymbolStore::ISymbolDocument ^ document, int line, int column);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ISymWrapper</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="document" Type="System.Diagnostics.SymbolStore.ISymbolDocument" />
        <Parameter Name="line" Type="System.Int32" />
        <Parameter Name="column" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="document">O documento para o qual o deslocamento é solicitado.</param>
        <param name="line">A linha de documento para a qual o deslocamento é solicitado.</param>
        <param name="column">A coluna de documento para a qual o deslocamento é solicitado.</param>
        <summary>Obtém o deslocamento do MSIL (Microsoft Intermediate Language) dentro do método que corresponde à posição especificada.</summary>
        <returns>O deslocamento de IL dentro do método atual do local especificado no documento.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParameters">
      <MemberSignature Language="C#" Value="public virtual System.Diagnostics.SymbolStore.ISymbolVariable[] GetParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Diagnostics.SymbolStore.ISymbolVariable[] GetParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.SymbolStore.SymMethod.GetParameters" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetParameters () As ISymbolVariable()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Diagnostics::SymbolStore::ISymbolVariable ^&gt; ^ GetParameters();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ISymWrapper</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.SymbolStore.ISymbolVariable[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtém os parâmetros para o método atual.</summary>
        <returns>A matriz de parâmetros do método atual.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Os parâmetros são retornados na ordem em que eles estão definidos na assinatura do método. A matriz retornada está vazia se o método não tem parâmetros.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRanges">
      <MemberSignature Language="C#" Value="public virtual int[] GetRanges (System.Diagnostics.SymbolStore.ISymbolDocument document, int line, int column);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32[] GetRanges(class System.Diagnostics.SymbolStore.ISymbolDocument document, int32 line, int32 column) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.SymbolStore.SymMethod.GetRanges(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRanges (document As ISymbolDocument, line As Integer, column As Integer) As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;int&gt; ^ GetRanges(System::Diagnostics::SymbolStore::ISymbolDocument ^ document, int line, int column);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ISymWrapper</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="document" Type="System.Diagnostics.SymbolStore.ISymbolDocument" />
        <Parameter Name="line" Type="System.Int32" />
        <Parameter Name="column" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="document">O documento para o qual os intervalos de deslocamento de IL são solicitados.</param>
        <param name="line">A linha de documento para a qual os intervalos de deslocamento de IL são solicitados.</param>
        <param name="column">A coluna de documento para a qual os intervalos de deslocamento de IL são solicitados.</param>
        <summary>Obtém uma matriz de pares de deslocamentos de início e término que correspondem aos intervalos de deslocamentos MSIL (Microsoft Intermediate Language) que uma determinada posição cobre dentro desse método.</summary>
        <returns>Uma matriz de pares de deslocamento de IL inicial e final.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A matriz é uma matriz de inteiros no formato {{Início1, end1}, {Início2, end2}...}, onde cada par representa um intervalo de deslocamento de IL dentro do método. O número de intervalos de é o comprimento da matriz dividido por 2.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetScope">
      <MemberSignature Language="C#" Value="public virtual System.Diagnostics.SymbolStore.ISymbolScope GetScope (int offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Diagnostics.SymbolStore.ISymbolScope GetScope(int32 offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.SymbolStore.SymMethod.GetScope(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetScope (offset As Integer) As ISymbolScope" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Diagnostics::SymbolStore::ISymbolScope ^ GetScope(int offset);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ISymWrapper</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.SymbolStore.ISymbolScope</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="offset">O deslocamento de IL no método a pesquisar.</param>
        <summary>Retorna o escopo léxico mais delimitador correspondente a um deslocamento dentro de um método.</summary>
        <returns>O escopo léxico mais delimitador para o deslocamento IL fornecido dentro do método.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você pode usar o <xref:System.Diagnostics.SymbolStore.ISymbolMethod.GetScope%2A> método para iniciar a pesquisa de variável local.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSequencePoints">
      <MemberSignature Language="C#" Value="public virtual void GetSequencePoints (int[] offsets, System.Diagnostics.SymbolStore.ISymbolDocument[] documents, int[] lines, int[] columns, int[] endLines, int[] endColumns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetSequencePoints(int32[] offsets, class System.Diagnostics.SymbolStore.ISymbolDocument[] documents, int32[] lines, int32[] columns, int32[] endLines, int32[] endColumns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.SymbolStore.SymMethod.GetSequencePoints(System.Int32[],System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GetSequencePoints (offsets As Integer(), documents As ISymbolDocument(), lines As Integer(), columns As Integer(), endLines As Integer(), endColumns As Integer())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GetSequencePoints(cli::array &lt;int&gt; ^ offsets, cli::array &lt;System::Diagnostics::SymbolStore::ISymbolDocument ^&gt; ^ documents, cli::array &lt;int&gt; ^ lines, cli::array &lt;int&gt; ^ columns, cli::array &lt;int&gt; ^ endLines, cli::array &lt;int&gt; ^ endColumns);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ISymWrapper</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offsets" Type="System.Int32[]" />
        <Parameter Name="documents" Type="System.Diagnostics.SymbolStore.ISymbolDocument[]" />
        <Parameter Name="lines" Type="System.Int32[]" />
        <Parameter Name="columns" Type="System.Int32[]" />
        <Parameter Name="endLines" Type="System.Int32[]" />
        <Parameter Name="endColumns" Type="System.Int32[]" />
      </Parameters>
      <Docs>
        <param name="offsets">Uma matriz na qual armazenar os deslocamentos de IL do início do método para os pontos de sequência.</param>
        <param name="documents">Uma matriz na qual armazenar os documentos em que os pontos de sequência estão localizados.</param>
        <param name="lines">Uma matriz na qual armazenar as linhas nos documentos em que os pontos de sequência estão localizados.</param>
        <param name="columns">Uma matriz na qual armazenar as colunas nos documentos em que os pontos de sequência estão localizados.</param>
        <param name="endLines">A matriz de linhas nos documentos em que a sequência de pontos termina.</param>
        <param name="endColumns">A matriz de colunas nos documentos em que a sequência de pontos termina.</param>
        <summary>Obtém os pontos de sequência para o método atual e armazena as informações nas matrizes especificadas.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pontos de sequência são usados para mapear entre os locais de arquivo de origem e deslocamentos de IL.  Cada ponto de sequência consiste em um deslocamento de IL e região do arquivo de origem especificado pelo início e término de linha/coluna números relativo a um <xref:System.Diagnostics.SymbolStore.ISymbolDocument> objeto.  Cada elemento em um índice específico de cada matriz corresponde a um ponto de sequência específico. O chamador deve fornecer matrizes pré-alocado para armazenar as informações a serem retornadas. Quaisquer valores nas matrizes são substituídos. Use <xref:System.Diagnostics.SymbolStore.ISymbolMethod.SequencePointCount%2A> para recuperar a contagem de todos os pontos de sequência e criar matrizes do tamanho apropriado. Os pontos de sequência são classificados por deslocamento e são para todos os documentos no método. <xref:System.Diagnostics.SymbolStore.ISymbolMethod.GetSequencePoints%2A> verifica o tamanho de cada matriz e coloca as informações de ponto de sequência em cada um. Se qualquer matriz é `null`, os dados de matriz não são retornados.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSourceStartEnd">
      <MemberSignature Language="C#" Value="public virtual bool GetSourceStartEnd (System.Diagnostics.SymbolStore.ISymbolDocument[] docs, int[] lines, int[] columns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetSourceStartEnd(class System.Diagnostics.SymbolStore.ISymbolDocument[] docs, int32[] lines, int32[] columns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.SymbolStore.SymMethod.GetSourceStartEnd(System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSourceStartEnd (docs As ISymbolDocument(), lines As Integer(), columns As Integer()) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool GetSourceStartEnd(cli::array &lt;System::Diagnostics::SymbolStore::ISymbolDocument ^&gt; ^ docs, cli::array &lt;int&gt; ^ lines, cli::array &lt;int&gt; ^ columns);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ISymWrapper</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="docs" Type="System.Diagnostics.SymbolStore.ISymbolDocument[]" />
        <Parameter Name="lines" Type="System.Int32[]" />
        <Parameter Name="columns" Type="System.Int32[]" />
      </Parameters>
      <Docs>
        <param name="docs">Este parâmetro não é usado.</param>
        <param name="lines">Este parâmetro não é usado.</param>
        <param name="columns">Este parâmetro não é usado.</param>
        <summary>Gera um <see cref="T:System.NotSupportedException" /> em todos os casos.</summary>
        <returns>Gera um <see cref="T:System.NotSupportedException" /> em todos os casos.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">Em todos os casos.</exception>
      </Docs>
    </Member>
    <Member MemberName="RootScope">
      <MemberSignature Language="C#" Value="public virtual System.Diagnostics.SymbolStore.ISymbolScope RootScope { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Diagnostics.SymbolStore.ISymbolScope RootScope" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.SymbolStore.SymMethod.RootScope" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property RootScope As ISymbolScope" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Diagnostics::SymbolStore::ISymbolScope ^ RootScope { System::Diagnostics::SymbolStore::ISymbolScope ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>ISymWrapper</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.SymbolStore.ISymbolScope</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o escopo do léxico raiz do método atual. Esse escopo abrange todo o método.</summary>
        <value>O escopo do léxico raiz que abrange todo o método.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RootScopeInternal">
      <MemberSignature Language="C#" Value="public virtual System.Diagnostics.SymbolStore.ISymbolScope RootScopeInternal ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Diagnostics.SymbolStore.ISymbolScope RootScopeInternal() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.SymbolStore.SymMethod.RootScopeInternal" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RootScopeInternal () As ISymbolScope" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Diagnostics::SymbolStore::ISymbolScope ^ RootScopeInternal();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ISymWrapper</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.SymbolStore.ISymbolScope</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtém o escopo do léxico raiz do método atual. Esse escopo abrange todo o método.</summary>
        <returns>O escopo do léxico raiz que abrange todo o método.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SequencePointCount">
      <MemberSignature Language="C#" Value="public virtual int SequencePointCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SequencePointCount" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.SymbolStore.SymMethod.SequencePointCount" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property SequencePointCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int SequencePointCount { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>ISymWrapper</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém uma contagem dos pontos de sequência no método.</summary>
        <value>A contagem dos pontos de sequência no método.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Token">
      <MemberSignature Language="C#" Value="public virtual System.Diagnostics.SymbolStore.SymbolToken Token { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Diagnostics.SymbolStore.SymbolToken Token" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.SymbolStore.SymMethod.Token" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Token As SymbolToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Diagnostics::SymbolStore::SymbolToken Token { System::Diagnostics::SymbolStore::SymbolToken get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>ISymWrapper</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.SymbolStore.SymbolToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> que contém os metadados do método atual.</summary>
        <value>O token de metadados para o método atual.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>