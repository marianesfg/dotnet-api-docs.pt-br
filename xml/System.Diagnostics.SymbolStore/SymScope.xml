<Type Name="SymScope" FullName="System.Diagnostics.SymbolStore.SymScope">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9dc5581d25f3882bd5b349d6861d311e76d1ffb4" /><Meta Name="ms.sourcegitcommit" Value="e3904cb57bb8e1854a7de1615afac7a569a2064b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="01/14/2019" /><Meta Name="ms.locfileid" Value="54252548" /></Metadata><TypeSignature Language="C#" Value="public class SymScope : System.Diagnostics.SymbolStore.SymScopeBase, IDisposable, System.Diagnostics.SymbolStore.ISymbolScope" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SymScope extends System.Diagnostics.SymbolStore.SymScopeBase implements class System.Diagnostics.SymbolStore.ISymbolScope, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.SymbolStore.SymScope" />
  <TypeSignature Language="VB.NET" Value="Public Class SymScope&#xA;Inherits SymScopeBase&#xA;Implements IDisposable, ISymbolScope" />
  <TypeSignature Language="C++ CLI" Value="public ref class SymScope : System::Diagnostics::SymbolStore::SymScopeBase, IDisposable, System::Diagnostics::SymbolStore::ISymbolScope" />
  <TypeSignature Language="F#" Value="type SymScope = class&#xA;    inherit SymScopeBase&#xA;    interface ISymbolScope&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>ISymWrapper</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.SymbolStore.SymScopeBase</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-1.1">System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Diagnostics.SymbolStore.ISymbolScope</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa um escopo léxico em <see cref="T:System.Diagnostics.SymbolStore.SymMethod" />, fornecendo acesso aos deslocamentos inicial e final do escopo, bem como aos escopos pai e filho.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Diagnostics.SymbolStore.SymScope> classe também fornece acesso a todos os locais definidos dentro do escopo atual.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SymScope (ISymUnmanagedScope* pScope);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(ISymUnmanagedScope* pScope) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.SymbolStore.SymScope.#ctor(ISymUnmanagedScope*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SymScope(ISymUnmanagedScope* pScope);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.SymbolStore.SymScope : nativeptr&lt;ISymUnmanagedScope&gt; -&gt; System.Diagnostics.SymbolStore.SymScope" Usage="new System.Diagnostics.SymbolStore.SymScope pScope" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>ISymWrapper</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pScope" Type="ISymUnmanagedScope*" />
      </Parameters>
      <Docs>
        <param name="pScope">Um ponteiro para um objeto ISymUnmanagedScope não gerenciado.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.SymbolStore.SymScope" /> usando o ponteiro especificado para um objeto **ISymUnmanagedScope** não gerenciado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Normalmente, você usa o <xref:System.Diagnostics.SymbolStore.SymMethod.RootScope> propriedade para obter as instâncias dessa classe, em vez de criar uma instância usando este construtor.

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SymScope (System.Diagnostics.SymbolStore.Private.ISymUnmanagedScope* pScope);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Diagnostics.SymbolStore.Private.ISymUnmanagedScope* pScope) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.SymbolStore.SymScope.#ctor(System.Diagnostics.SymbolStore.Private.ISymUnmanagedScope*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SymScope(System::Diagnostics::SymbolStore::Private::ISymUnmanagedScope* pScope);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.SymbolStore.SymScope : nativeptr&lt;System.Diagnostics.SymbolStore.Private.ISymUnmanagedScope&gt; -&gt; System.Diagnostics.SymbolStore.SymScope" Usage="new System.Diagnostics.SymbolStore.SymScope pScope" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>ISymWrapper</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pScope" Type="System.Diagnostics.SymbolStore.Private.ISymUnmanagedScope*" />
      </Parameters>
      <Docs>
        <param name="pScope">Um ponteiro para um objeto ISymUnmanagedScope não gerenciado.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.SymbolStore.SymScope" /> usando o ponteiro especificado para um objeto ISymUnmanagedScope não gerenciado.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="__dtor">
      <MemberSignature Language="C#" Value="public void __dtor ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance void __dtor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.SymbolStore.SymScope.__dtor" />
      <MemberSignature Language="VB.NET" Value="Public Sub __dtor ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void __dtor();" />
      <MemberSignature Language="F#" Value="member this.__dtor : unit -&gt; unit" Usage="symScope.__dtor " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ISymWrapper</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libera os recursos mantidos pela instância atual.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Use o <xref:System.Diagnostics.SymbolStore.SymScope.Finalize> método para liberar recursos.

]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="{dtor}">
      <MemberSignature Language="C#" Value="public void {dtor} ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance void {dtor}() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.SymbolStore.SymScope.{dtor}" />
      <MemberSignature Language="VB.NET" Value="Public Sub {dtor} ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void {dtor}();" />
      <MemberSignature Language="F#" Value="member this.{dtor} : unit -&gt; unit" Usage="symScope.{dtor} " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ISymWrapper</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libera os recursos mantidos pela instância atual.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

Use o <xref:System.Diagnostics.SymbolStore.SymScope.Finalize> método para liberar recursos.
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public override sealed void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.SymbolStore.SymScope.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="symScope.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>ISymWrapper</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libera os recursos usados pela instância atual da classe <see cref="T:System.Diagnostics.SymbolStore.SymScope" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool A_0);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool A_0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.SymbolStore.SymScope.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (A_0 As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool A_0);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="symScope.Dispose A_0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ISymWrapper</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="A_0" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="A_0"><see langword="true" /> para liberar recursos gerenciados e não gerenciados, <see langword="false" /> para liberar apenas recursos não gerenciados.</param>
        <summary>Chamado pelos métodos <see cref="M:System.Diagnostics.SymbolStore.SymScope.Dispose" /> e <see cref="M:System.Diagnostics.SymbolStore.SymScope.Finalize" /> para liberar os recursos gerenciados e não gerenciados usados pela instância atual da classe <see cref="T:System.Diagnostics.SymbolStore.SymScope" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método é chamado somente pelo público <xref:System.Diagnostics.SymbolStore.SymScope.Dispose%2A> e <xref:System.Diagnostics.SymbolStore.SymScope.Finalize%2A> métodos; não chame este método diretamente.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndOffset">
      <MemberSignature Language="C#" Value="public virtual int EndOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 EndOffset" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.SymbolStore.SymScope.EndOffset" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property EndOffset As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int EndOffset { int get(); };" />
      <MemberSignature Language="F#" Value="member this.EndOffset : int" Usage="System.Diagnostics.SymbolStore.SymScope.EndOffset" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Diagnostics.SymbolStore.ISymbolScope.EndOffset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>ISymWrapper</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o deslocamento final do escopo léxico atual.</summary>
        <value>O deslocamento do MSIL (linguagem intermediária) Microsoft final. É o deslocamento do início do método do escopo léxico atual.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~SymScope ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.SymbolStore.SymScope.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!SymScope ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="symScope.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ISymWrapper</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libera recursos não gerenciados e executa outras operações de limpeza antes que <see cref="T:System.Diagnostics.SymbolStore.SymScope" /> seja recuperado pela coleta de lixo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método substitui  <xref:System.Object.Finalize%2A>. O código do aplicativo não deve chamar este método; o método `Finalize` de um objeto é invocado automaticamente durante a coleta de lixo, a menos que a finalização pelo coletor de lixo tenha sido desabilitada por uma chamada para o método <xref:System.GC.SuppressFinalize%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChildren">
      <MemberSignature Language="C#" Value="public virtual System.Diagnostics.SymbolStore.ISymbolScope[] GetChildren ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Diagnostics.SymbolStore.ISymbolScope[] GetChildren() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.SymbolStore.SymScope.GetChildren" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetChildren () As ISymbolScope()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Diagnostics::SymbolStore::ISymbolScope ^&gt; ^ GetChildren();" />
      <MemberSignature Language="F#" Value="abstract member GetChildren : unit -&gt; System.Diagnostics.SymbolStore.ISymbolScope[]&#xA;override this.GetChildren : unit -&gt; System.Diagnostics.SymbolStore.ISymbolScope[]" Usage="symScope.GetChildren " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Diagnostics.SymbolStore.ISymbolScope.GetChildren</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>ISymWrapper</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.SymbolStore.ISymbolScope[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtém os escopos léxicos filho do escopo léxico atual.</summary>
        <returns>Os escopos léxicos estão entre o escopo léxico atual.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.OutOfMemoryException">Não há memória suficiente para atender à solicitação.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetLocals">
      <MemberSignature Language="C#" Value="public virtual System.Diagnostics.SymbolStore.ISymbolVariable[] GetLocals ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Diagnostics.SymbolStore.ISymbolVariable[] GetLocals() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.SymbolStore.SymScope.GetLocals" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLocals () As ISymbolVariable()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Diagnostics::SymbolStore::ISymbolVariable ^&gt; ^ GetLocals();" />
      <MemberSignature Language="F#" Value="abstract member GetLocals : unit -&gt; System.Diagnostics.SymbolStore.ISymbolVariable[]&#xA;override this.GetLocals : unit -&gt; System.Diagnostics.SymbolStore.ISymbolVariable[]" Usage="symScope.GetLocals " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Diagnostics.SymbolStore.ISymbolScope.GetLocals</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>ISymWrapper</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.SymbolStore.ISymbolVariable[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtém as variáveis locais dentro do escopo léxico atual.</summary>
        <returns>As variáveis locais dentro do escopo léxico atual.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 As variáveis locais são retornadas em nenhuma ordem específica. Se uma variável local altera seu endereço dentro do escopo atual, essa variável será retornada várias vezes, cada um com um intervalo de deslocamento diferente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">Não há memória suficiente para atender à solicitação.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetNamespaces">
      <MemberSignature Language="C#" Value="public virtual System.Diagnostics.SymbolStore.ISymbolNamespace[] GetNamespaces ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Diagnostics.SymbolStore.ISymbolNamespace[] GetNamespaces() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.SymbolStore.SymScope.GetNamespaces" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetNamespaces () As ISymbolNamespace()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Diagnostics::SymbolStore::ISymbolNamespace ^&gt; ^ GetNamespaces();" />
      <MemberSignature Language="F#" Value="abstract member GetNamespaces : unit -&gt; System.Diagnostics.SymbolStore.ISymbolNamespace[]&#xA;override this.GetNamespaces : unit -&gt; System.Diagnostics.SymbolStore.ISymbolNamespace[]" Usage="symScope.GetNamespaces " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Diagnostics.SymbolStore.ISymbolScope.GetNamespaces</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>ISymWrapper</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.SymbolStore.ISymbolNamespace[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gera um <see cref="T:System.NotSupportedException" /> em todos os casos.</summary>
        <returns>Gera um <see cref="T:System.NotSupportedException" /> em todos os casos.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Method">
      <MemberSignature Language="C#" Value="public virtual System.Diagnostics.SymbolStore.ISymbolMethod Method { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Diagnostics.SymbolStore.ISymbolMethod Method" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.SymbolStore.SymScope.Method" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Method As ISymbolMethod" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Diagnostics::SymbolStore::ISymbolMethod ^ Method { System::Diagnostics::SymbolStore::ISymbolMethod ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Method : System.Diagnostics.SymbolStore.ISymbolMethod" Usage="System.Diagnostics.SymbolStore.SymScope.Method" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Diagnostics.SymbolStore.ISymbolScope.Method</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>ISymWrapper</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.SymbolStore.ISymbolMethod</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o método que contém o escopo léxico atual.</summary>
        <value>O método que contém o escopo léxico atual.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public virtual System.Diagnostics.SymbolStore.ISymbolScope Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Diagnostics.SymbolStore.ISymbolScope Parent" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.SymbolStore.SymScope.Parent" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Parent As ISymbolScope" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Diagnostics::SymbolStore::ISymbolScope ^ Parent { System::Diagnostics::SymbolStore::ISymbolScope ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Diagnostics.SymbolStore.ISymbolScope" Usage="System.Diagnostics.SymbolStore.SymScope.Parent" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Diagnostics.SymbolStore.ISymbolScope.Parent</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>ISymWrapper</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.SymbolStore.ISymbolScope</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o escopo léxico pai do escopo atual.</summary>
        <value>O escopo léxico delimitador do escopo atual.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartOffset">
      <MemberSignature Language="C#" Value="public virtual int StartOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 StartOffset" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.SymbolStore.SymScope.StartOffset" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property StartOffset As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int StartOffset { int get(); };" />
      <MemberSignature Language="F#" Value="member this.StartOffset : int" Usage="System.Diagnostics.SymbolStore.SymScope.StartOffset" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Diagnostics.SymbolStore.ISymbolScope.StartOffset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>ISymWrapper</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o deslocamento inicial do escopo léxico atual.</summary>
        <value>O deslocamento inicial do MSIL (linguagem intermediária) Microsoft. É o deslocamento do início do método do escopo léxico atual.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>