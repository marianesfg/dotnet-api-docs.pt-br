<Type Name="Utf8JsonWriter" FullName="System.Text.Json.Utf8JsonWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6bf8bd7fdfd80ccc415cee28e69de81768b96942" /><Meta Name="ms.sourcegitcommit" Value="e28b7b371ead27d99e20387b8243f09b0cdb9fb3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="04/12/2019" /><Meta Name="ms.locfileid" Value="59541639" /></Metadata><TypeSignature Language="C#" Value="public struct Utf8JsonWriter" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit Utf8JsonWriter extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.Utf8JsonWriter" />
  <TypeSignature Language="VB.NET" Value="Public Structure Utf8JsonWriter" />
  <TypeSignature Language="C++ CLI" Value="public value class Utf8JsonWriter" />
  <TypeSignature Language="F#" Value="type Utf8JsonWriter = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="59da3-101">Fornece uma API de alto desempenho para gravação somente de encaminhamento e sem cache, de texto JSON codificado em UTF-8.</span><span class="sxs-lookup"><span data-stu-id="59da3-101">Provides a high-performance API for forward-only, non-cached writing of UTF-8 encoded JSON text.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="59da3-102">`Utf8JsonWriter` gravações segue o texto em sequência sem cache e, por padrão o [RFC JSON](https://tools.ietf.org/html/rfc8259), com exceção de escrever comentários.</span><span class="sxs-lookup"><span data-stu-id="59da3-102">`Utf8JsonWriter` writes the text sequentially with no caching and by default adheres to the [JSON RFC](https://tools.ietf.org/html/rfc8259), with the exception of writing comments.</span></span>

<span data-ttu-id="59da3-103">Um método que tenta gravar JSON inválido quando a validação estiver habilitada lança um <xref:System.InvalidOperationException> com uma mensagem de erro específico do contexto.</span><span class="sxs-lookup"><span data-stu-id="59da3-103">A method that attempts to write invalid JSON when validation is enabled throws a <xref:System.InvalidOperationException> with a context-specific error message.</span></span>
<span data-ttu-id="59da3-104">Como esse tipo é uma struct de referência, ele não oferece suporte diretamente assíncrono.</span><span class="sxs-lookup"><span data-stu-id="59da3-104">Since this type is a ref struct, it does not directly support async.</span></span> <span data-ttu-id="59da3-105">No entanto, ela oferece suporte para reentrância para gravar os dados parciais e continuar escrevendo em partes.</span><span class="sxs-lookup"><span data-stu-id="59da3-105">However, it does provide support for reentrancy to write partial data and to continue writing in chunks.</span></span>
<span data-ttu-id="59da3-106">Para ser capaz de formatar a saída com recuo e espaços em branco ou para ignorar a validação, criar uma instância de <xref:System.Text.Json.JsonWriterState> e passá-lo no gravador.</span><span class="sxs-lookup"><span data-stu-id="59da3-106">To be able to format the output with indentation and white space OR to skip validation, create an instance of <xref:System.Text.Json.JsonWriterState> and pass that in to the writer.</span></span>

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonWriter (System.Buffers.IBufferWriter&lt;byte&gt; bufferWriter, System.Text.Json.JsonWriterState state = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Buffers.IBufferWriter`1&lt;unsigned int8&gt; bufferWriter, valuetype System.Text.Json.JsonWriterState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.#ctor(System.Buffers.IBufferWriter{System.Byte},System.Text.Json.JsonWriterState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (bufferWriter As IBufferWriter(Of Byte), Optional state As JsonWriterState = null)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonWriter : System.Buffers.IBufferWriter&lt;byte&gt; * System.Text.Json.JsonWriterState -&gt; System.Text.Json.Utf8JsonWriter" Usage="new System.Text.Json.Utf8JsonWriter (bufferWriter, state)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bufferWriter" Type="System.Buffers.IBufferWriter&lt;System.Byte&gt;" />
        <Parameter Name="state" Type="System.Text.Json.JsonWriterState" />
      </Parameters>
      <Docs>
        <param name="bufferWriter"><span data-ttu-id="59da3-107">Uma instância de <see cref="T:System.Buffers.IBufferWriter`1" /> usada como um destino para gravar o texto JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-107">An instance of <see cref="T:System.Buffers.IBufferWriter`1" /> used as a destination for writing JSON text.</span></span></param>
        <param name="state"><span data-ttu-id="59da3-108">Um struct que contém o estado do leitor.</span><span class="sxs-lookup"><span data-stu-id="59da3-108">A struct that contains the reader state.</span></span> <span data-ttu-id="59da3-109">Na primeira chamada para o construtor, ele deve refletir um estado padrão. Nas próximas chamadas, ele deve capturar o estado da instância anterior do <see cref="T:System.Text.Json.Utf8JsonWriter" /> e retorná-lo.</span><span class="sxs-lookup"><span data-stu-id="59da3-109">On the first call to the constructor, it should reflect a default state; otherwise, it should capture the state from the previous instance instance of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> and pass that back.</span></span></param>
        <summary><span data-ttu-id="59da3-110">Inicializa uma nova instância da classe <see cref="T:System.Text.Json.Utf8JsonWriter" /> com o <paramref name="bufferWriter" /> especificado.</span><span class="sxs-lookup"><span data-stu-id="59da3-110">Initializes a new instance of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> class with the specified <paramref name="bufferWriter" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="59da3-111">Como esse tipo é uma struct de referência, é um tipo de pilha somente, e todas as limitações dos structs de referência se aplicam a ele.</span><span class="sxs-lookup"><span data-stu-id="59da3-111">Since this type is a ref struct, it is a stack-only type, and all the limitations of ref structs apply to it.</span></span>
<span data-ttu-id="59da3-112">Essa é a razão por que o construtor aceita um <xref:System.Text.Json.JsonWriterState>.</span><span class="sxs-lookup"><span data-stu-id="59da3-112">This is the reason why the constructor accepts a <xref:System.Text.Json.JsonWriterState>.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="59da3-113"><paramref name="bufferWriter" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-113"><paramref name="bufferWriter" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BytesCommitted">
      <MemberSignature Language="C#" Value="public long BytesCommitted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 BytesCommitted" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.BytesCommitted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesCommitted As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long BytesCommitted { long get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesCommitted : int64" Usage="System.Text.Json.Utf8JsonWriter.BytesCommitted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="59da3-114">Obtém o número total de bytes confirmados para a saída pelo <see cref="T:System.Text.Json.Utf8JsonWriter" /> até o momento para a instância atual do <see cref="T:System.Text.Json.Utf8JsonWriter" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-114">Gets the total number of bytes committed to the output by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far for the current instance of the <see cref="T:System.Text.Json.Utf8JsonWriter" />.</span></span>
<span data-ttu-id="59da3-115">Isso indica quanto o <see cref="T:System.Buffers.IBufferWriter`1" /> avançou.</span><span class="sxs-lookup"><span data-stu-id="59da3-115">This indicates how much the <see cref="T:System.Buffers.IBufferWriter`1" /> has advanced.</span></span></summary>
        <value><span data-ttu-id="59da3-116">O número total de bytes confirmados para a saída do <see cref="T:System.Text.Json.Utf8JsonWriter" /> até o momento.</span><span class="sxs-lookup"><span data-stu-id="59da3-116">The total number of bytes committed to the output by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BytesWritten">
      <MemberSignature Language="C#" Value="public long BytesWritten { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 BytesWritten" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.BytesWritten" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesWritten As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long BytesWritten { long get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesWritten : int64" Usage="System.Text.Json.Utf8JsonWriter.BytesWritten" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="59da3-117">Obtém o número total de bytes gravados pelo <see cref="T:System.Text.Json.Utf8JsonWriter" /> até o momento para a instância atual do <see cref="T:System.Text.Json.Utf8JsonWriter" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-117">Gets the total number of bytes written by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far for the current instance of the <see cref="T:System.Text.Json.Utf8JsonWriter" />.</span></span>
<span data-ttu-id="59da3-118">Isso inclui os dados que foram gravados além dos que já foram confirmados.</span><span class="sxs-lookup"><span data-stu-id="59da3-118">This includes data that has been written beyond what has already been committed.</span></span></summary>
        <value><span data-ttu-id="59da3-119">O número total de bytes gravados pelo <see cref="T:System.Text.Json.Utf8JsonWriter" /> até o momento.</span><span class="sxs-lookup"><span data-stu-id="59da3-119">The total number of bytes written by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentDepth">
      <MemberSignature Language="C#" Value="public int CurrentDepth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentDepth" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.CurrentDepth" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentDepth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentDepth { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDepth : int" Usage="System.Text.Json.Utf8JsonWriter.CurrentDepth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="59da3-120">Obtém a profundidade do token atual.</span><span class="sxs-lookup"><span data-stu-id="59da3-120">Gets the depth of the current token.</span></span></summary>
        <value><span data-ttu-id="59da3-121">A profundidade do token atual.</span><span class="sxs-lookup"><span data-stu-id="59da3-121">The depth of the current token.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="59da3-122">O `CurrentDepth` propriedade controla a profundidade recursiva dos objetos aninhados / matrizes dentro do texto JSON escrito até o momento.</span><span class="sxs-lookup"><span data-stu-id="59da3-122">The `CurrentDepth` property tracks the recursive depth of the nested objects / arrays within the JSON text written so far.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush (bool isFinalBlock = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush(bool isFinalBlock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Flush(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Flush (Optional isFinalBlock As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.Flush : bool -&gt; unit" Usage="utf8JsonWriter.Flush isFinalBlock" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isFinalBlock" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isFinalBlock"><span data-ttu-id="59da3-123"><see langword="true" /> para indicar que mais nenhum dado será gravado; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-123"><see langword="true" /> to indicate no more data will be written; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="59da3-124">Essa opção é usada para validar se o JSON escrito até o momento é válido estruturalmente, considerando que não haja mais dados seguintes.</span><span class="sxs-lookup"><span data-stu-id="59da3-124">This is used to validate that the JSON written so far is structurally valid if no more data is to follow.</span></span></param>
        <summary><span data-ttu-id="59da3-125">Avança o <see cref="T:System.Buffers.IBufferWriter`1" /> subjacente com base no que foi gravado até o momento.</span><span class="sxs-lookup"><span data-stu-id="59da3-125">Advances the underlying <see cref="T:System.Buffers.IBufferWriter`1" /> based on what has been written so far.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-126">Um JSON incompleto foi gravado e <paramref name="isFinalBlock" /> é <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-126">Incomplete JSON has been written and <paramref name="isFinalBlock" /> is <see langword="true" />.</span></span> <span data-ttu-id="59da3-127">Por exemplo, quando um objeto ou uma matriz aberta precisa ser fechada.</span><span class="sxs-lookup"><span data-stu-id="59da3-127">For example, when an open object or array needs to be closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentState">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonWriterState GetCurrentState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Text.Json.JsonWriterState GetCurrentState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.GetCurrentState" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentState () As JsonWriterState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::Json::JsonWriterState GetCurrentState();" />
      <MemberSignature Language="F#" Value="member this.GetCurrentState : unit -&gt; System.Text.Json.JsonWriterState" Usage="utf8JsonWriter.GetCurrentState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonWriterState</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="59da3-128">Retorna o instantâneo atual do estado <see cref="T:System.Text.Json.Utf8JsonWriter" /> que precisa ser capturado pelo chamador e retornado ao construtor <see cref="T:System.Text.Json.Utf8JsonWriter" /> com mais dados.</span><span class="sxs-lookup"><span data-stu-id="59da3-128">Returns the current snapshot of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> state that must be captured by the caller and passed back in to the <see cref="T:System.Text.Json.Utf8JsonWriter" /> constructor with more data.</span></span></summary>
        <returns><span data-ttu-id="59da3-129">O instantâneo atual do estado do <see cref="T:System.Text.Json.Utf8JsonWriter" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-129">The current snapshot of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> state.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="59da3-130">Ao contrário do <xref:System.Text.Json.Utf8JsonWriter>, que é uma struct de referência, o estado pode sobreviver entre limites de async/await e, portanto, esse tipo é necessário para dar suporte à leitura em mais dados assincronamente antes de continuar com uma nova instância do <xref:System.Text.Json.Utf8JsonWriter>.</span><span class="sxs-lookup"><span data-stu-id="59da3-130">Unlike the <xref:System.Text.Json.Utf8JsonWriter>, which is a ref struct, the state can survive across async/await boundaries, and hence this type is required to provide support for reading in more data asynchronously before continuing with a new instance of the <xref:System.Text.Json.Utf8JsonWriter>.</span></span>

<span data-ttu-id="59da3-131">Obtendo o estado para criar um novo <see cref="T:System.Text.Json.Utf8JsonWriter" /> struct sem primeiro confirmar que os dados que foram gravados resultaria em um estado inconsistente.</span><span class="sxs-lookup"><span data-stu-id="59da3-131">Getting the state for creating a new <see cref="T:System.Text.Json.Utf8JsonWriter" /> struct without first committing the data that has been written would result in an inconsistent state.</span></span> <span data-ttu-id="59da3-132">Chamar <xref:System.Text.Json.Utf8JsonWriter.Flush%2A> antes de obter o estado atual.</span><span class="sxs-lookup"><span data-stu-id="59da3-132">Call <xref:System.Text.Json.Utf8JsonWriter.Flush%2A> before getting the current state.</span></span>  

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-133">Os dados JSON foram gravados e armazenados em buffer, mas ainda não foram liberados para o <see cref="T:System.Buffers.IBufferWriter`1" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-133">The JSON data has been written and buffered but not yet flushed to the <see cref="T:System.Buffers.IBufferWriter`1" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (ReadOnlySpan&lt;byte&gt; utf8PropertyName, bool value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, bool value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Byte},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (utf8PropertyName As ReadOnlySpan(Of Byte), value As Boolean, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : ReadOnlySpan&lt;byte&gt; * bool * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Boolean" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="59da3-134">O nome da propriedade codificado em UTF-8 do objeto JSON a ser gravado.</span><span class="sxs-lookup"><span data-stu-id="59da3-134">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="59da3-135">O valor a ser gravado como um literal JSON "true" ou "false" como parte do par nome/valor.</span><span class="sxs-lookup"><span data-stu-id="59da3-135">The value to be written as a JSON literal "true" or "false" as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-136"><see langword="false" /> para indicar que o gravador deve assumir que o nome da propriedade recebeu o devido escape e ignorar a etapa de escape; caso contrário, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-136"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="59da3-137">Este é um parâmetro opcional. Seu valor padrão é <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-137">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="59da3-138">Grava o nome da propriedade e o valor de <see cref="T:System.Boolean" /> (como um literal JSON "true" ou "false") como parte de um par nome/valor de um objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-138">Writes the property name and <see cref="T:System.Boolean" /> value (as a JSON literal "true" or "false") as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-139"><paramref name="utf8PropertyName" /> é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-139"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-140">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-140">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (ReadOnlySpan&lt;char&gt; propertyName, bool value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, bool value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Char},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (propertyName As ReadOnlySpan(Of Char), value As Boolean, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : ReadOnlySpan&lt;char&gt; * bool * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Boolean" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="59da3-141">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="59da3-141">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="59da3-142">O valor a ser gravado como um literal JSON "true" ou "false" como parte do par nome/valor.</span><span class="sxs-lookup"><span data-stu-id="59da3-142">The value to be written as a JSON literal "true" or "false" as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-143"><see langword="false" /> para indicar que o gravador deve assumir que o nome da propriedade recebeu o devido escape e ignorar a etapa de escape; caso contrário, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-143"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="59da3-144">Este é um parâmetro opcional e seu valor padrão é <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-144">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="59da3-145">Grava o nome da propriedade e o valor de <see cref="T:System.Boolean" /> (como um literal JSON "true" ou "false") como parte de um par nome/valor de um objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-145">Writes the property name and <see cref="T:System.Boolean" /> value (as a JSON literal "true" or "false") as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-146"><paramref name="propertyName" /> é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-146"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-147">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-147">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (string propertyName, bool value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(string propertyName, bool value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (propertyName As String, value As Boolean, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : string * bool * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Boolean" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="59da3-148">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="59da3-148">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="59da3-149">O valor a ser gravado como um literal JSON "true" ou "false" como parte do par nome/valor.</span><span class="sxs-lookup"><span data-stu-id="59da3-149">The value to be written as a JSON literal "true" or "false" as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-150"><see langword="false" /> para indicar que o gravador deve assumir que o nome da propriedade recebeu o devido escape e ignorar a etapa de escape; caso contrário, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-150"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="59da3-151">Este é um parâmetro opcional e seu valor padrão é <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-151">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="59da3-152">Grava o nome da propriedade e o valor de <see cref="T:System.Boolean" /> (como um literal JSON "true" ou "false") como parte de um par nome/valor de um objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-152">Writes the property name and <see cref="T:System.Boolean" /> value (as a JSON literal "true" or "false") as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-153"><paramref name="propertyName" /> é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-153"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-154">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-154">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBooleanValue">
      <MemberSignature Language="C#" Value="public void WriteBooleanValue (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBooleanValue(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBooleanValue(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBooleanValue (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBooleanValue(bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBooleanValue : bool -&gt; unit" Usage="utf8JsonWriter.WriteBooleanValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="59da3-155">O valor a ser gravado como um JSON literal "true" ou "false" como um elemento de uma matriz JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-155">The value to be written as a JSON literal "true" or "false" as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="59da3-156">Grava o valor de <see cref="T:System.Boolean" /> (como um literal JSON "true" ou "false") como um elemento de uma matriz JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-156">Writes the <see cref="T:System.Boolean" /> value (as a JSON literal "true" or "false") as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-157">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-157">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (ReadOnlySpan&lt;byte&gt; utf8Value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (utf8Value As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue (utf8Value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8Value"><span data-ttu-id="59da3-158">O valor codificado em UTF-8 a ser gravado como um comentário JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-158">The UTF-8 encoded value to be written as a JSON comment.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-159"><see langword="false" /> para indicar que o gravador deve assumir que o nome da propriedade recebeu o devido escape e ignorar a etapa de escape; caso contrário, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-159"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="59da3-160">Este é um parâmetro opcional e seu valor padrão é <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-160">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="59da3-161">Grava o valor de texto UTF-8 como um comentário JSON (dentro de <c>/*..*/</c>).</span><span class="sxs-lookup"><span data-stu-id="59da3-161">Writes the UTF-8 text value as a JSON comment (within <c>/*..*/</c>).</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-162"><paramref name="utf8Value" /> é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-162"><paramref name="utf8Value" /> is too large.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (ReadOnlySpan&lt;char&gt; value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(valuetype System.ReadOnlySpan`1&lt;char&gt; value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (value As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue (value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="59da3-163">O valor codificado em UTF-16 a ser gravado como um comentário JSON transcodificado em UTF-8.</span><span class="sxs-lookup"><span data-stu-id="59da3-163">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-164"><see langword="false" /> para indicar que o gravador deve assumir que o nome da propriedade recebeu o devido escape e ignorar a etapa de escape; caso contrário, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-164"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="59da3-165">Este é um parâmetro opcional e seu valor padrão é <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-165">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="59da3-166">Grava o valor de texto UTF-16 como um comentário JSON (dentro de <c>/*..*/</c>).</span><span class="sxs-lookup"><span data-stu-id="59da3-166">Writes the UTF-16 text value as a JSON comment (within <c>/*..*/</c>).</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-167"><paramref name="value" /> é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-167"><paramref name="value" /> is too large.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (string value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(string value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (value As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue (value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="59da3-168">O valor codificado em UTF-16 a ser gravado como um comentário JSON transcodificado em UTF-8.</span><span class="sxs-lookup"><span data-stu-id="59da3-168">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-169"><see langword="false" /> para indicar que o gravador deve assumir que o nome da propriedade recebeu o devido escape e ignorar a etapa de escape; caso contrário, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-169"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="59da3-170">Este é um parâmetro opcional e seu valor padrão é <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-170">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="59da3-171">Grava o valor de texto de cadeia de caracteres como um comentário JSON (dentro de <c>/*..*/</c>).</span><span class="sxs-lookup"><span data-stu-id="59da3-171">Writes the string text value as a JSON comment (within <c>/*..*/</c>).</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-172"><paramref name="value" /> é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-172"><paramref name="value" /> is too large.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndArray">
      <MemberSignature Language="C#" Value="public void WriteEndArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEndArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteEndArray" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEndArray ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEndArray();" />
      <MemberSignature Language="F#" Value="member this.WriteEndArray : unit -&gt; unit" Usage="utf8JsonWriter.WriteEndArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="59da3-173">Grava o fim de uma matriz JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-173">Writes the end of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-174">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-174">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndObject">
      <MemberSignature Language="C#" Value="public void WriteEndObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEndObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteEndObject" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEndObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEndObject();" />
      <MemberSignature Language="F#" Value="member this.WriteEndObject : unit -&gt; unit" Usage="utf8JsonWriter.WriteEndObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="59da3-175">Grava o fim de um objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-175">Writes the end of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-176">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-176">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (ReadOnlySpan&lt;byte&gt; utf8PropertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (utf8PropertyName As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNull : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteNull (utf8PropertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="59da3-177">O nome da propriedade codificado em UTF-8 do objeto JSON a ser gravado.</span><span class="sxs-lookup"><span data-stu-id="59da3-177">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-178"><see langword="false" /> para indicar que o gravador deve assumir que o nome da propriedade recebeu o devido escape e ignorar a etapa de escape; caso contrário, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-178"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="59da3-179">Este é um parâmetro opcional. Seu valor padrão é <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-179">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="59da3-180">Grava o nome da propriedade e o literal JSON "null" como parte de um par nome/valor de um objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-180">Writes the property name and the JSON literal "null" as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-181"><paramref name="utf8PropertyName" /> é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-181"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-182">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-182">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (ReadOnlySpan&lt;char&gt; propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (propertyName As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNull : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteNull (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="59da3-183">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="59da3-183">The UTF-16 encoded property name of the JSON object to transcode and write as UTF-8.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-184"><see langword="false" /> para indicar que o gravador deve assumir que o nome da propriedade recebeu o devido escape e ignorar a etapa de escape; caso contrário, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-184"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="59da3-185">Este é um parâmetro opcional. Seu valor padrão é <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-185">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="59da3-186">Grava o nome da propriedade e o literal JSON "null" como parte de um par nome/valor de um objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-186">Writes the property name and the JSON literal "null" as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-187"><paramref name="propertyName" /> é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-187"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-188">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-188">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (string propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(string propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (propertyName As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNull : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteNull (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="59da3-189">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="59da3-189">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-190"><see langword="false" /> para indicar que o gravador deve assumir que o nome da propriedade recebeu o devido escape e ignorar a etapa de escape; caso contrário, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-190"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="59da3-191">Este é um parâmetro opcional. Seu valor padrão é <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-191">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="59da3-192">Grava o nome da propriedade e o literal JSON "null" como parte de um par nome/valor de um objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-192">Writes the property name and the JSON literal "null" as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-193"><paramref name="propertyName" /> é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-193"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-194">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-194">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNullValue">
      <MemberSignature Language="C#" Value="public void WriteNullValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNullValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNullValue" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNullValue ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNullValue();" />
      <MemberSignature Language="F#" Value="member this.WriteNullValue : unit -&gt; unit" Usage="utf8JsonWriter.WriteNullValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="59da3-195">Grava o literal JSON "null" como um elemento de uma matriz JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-195">Writes the JSON literal "null" as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-196">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-196">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, decimal value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.Decimal value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Decimal,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Decimal, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * decimal * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="59da3-197">O nome da propriedade codificado em UTF-8 do objeto JSON a ser gravado.</span><span class="sxs-lookup"><span data-stu-id="59da3-197">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="59da3-198">O valor a ser gravado como um número JSON como parte do par nome/valor.</span><span class="sxs-lookup"><span data-stu-id="59da3-198">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-199"><see langword="false" /> para indicar que o gravador deve assumir que o nome da propriedade recebeu o devido escape e ignorar a etapa de escape; caso contrário, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-199"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="59da3-200">Este é um parâmetro opcional. Seu valor padrão é <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-200">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="59da3-201">Grava o nome da propriedade e o valor de <see cref="T:System.Decimal" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-201">Writes the property name and <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="59da3-202">Grava o <see cref="T:System.Decimal" /> usando o padrão <see cref="T:System.Buffers.StandardFormat" /> (ou seja, ' G').</span><span class="sxs-lookup"><span data-stu-id="59da3-202">Writes the <see cref="T:System.Decimal" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-203"><paramref name="utf8PropertyName" /> é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-203"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-204">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-204">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, double value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, float64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Double, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * double * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="59da3-205">O nome da propriedade codificado em UTF-8 do objeto JSON a ser gravado.</span><span class="sxs-lookup"><span data-stu-id="59da3-205">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="59da3-206">O valor a ser gravado como um número JSON como parte do par nome/valor.</span><span class="sxs-lookup"><span data-stu-id="59da3-206">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-207"><see langword="false" /> para indicar que o gravador deve assumir que o nome da propriedade recebeu o devido escape e ignorar a etapa de escape; caso contrário, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-207"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="59da3-208">Este é um parâmetro opcional. Seu valor padrão é <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-208">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="59da3-209">Grava o nome da propriedade e o valor de <see cref="T:System.Double" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-209">Writes the property name and <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="59da3-210">Grava o <see cref="T:System.Double" /> usando o padrão <see cref="T:System.Buffers.StandardFormat" /> (ou seja, ' G').</span><span class="sxs-lookup"><span data-stu-id="59da3-210">Writes the <see cref="T:System.Double" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-211"><paramref name="utf8PropertyName" /> é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-211"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-212">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-212">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, int value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Integer, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * int * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="59da3-213">O nome da propriedade codificado em UTF-8 do objeto JSON a ser gravado.</span><span class="sxs-lookup"><span data-stu-id="59da3-213">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="59da3-214">O valor a ser gravado como um número JSON como parte do par nome/valor.</span><span class="sxs-lookup"><span data-stu-id="59da3-214">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-215"><see langword="false" /> para indicar que o gravador deve assumir que o nome da propriedade recebeu o devido escape e ignorar a etapa de escape; caso contrário, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-215"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="59da3-216">Este é um parâmetro opcional. Seu valor padrão é <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-216">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="59da3-217">Grava o nome da propriedade e o valor de <see cref="T:System.Int32" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-217">Writes the property name and <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="59da3-218">Grava o <see cref="T:System.Int32" /> usando o padrão <see cref="T:System.Buffers.StandardFormat" /> (ou seja, ' G').</span><span class="sxs-lookup"><span data-stu-id="59da3-218">Writes the <see cref="T:System.Int32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="59da3-219">Por exemplo, 32767.</span><span class="sxs-lookup"><span data-stu-id="59da3-219">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-220"><paramref name="utf8PropertyName" /> é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-220"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-221">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-221">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, long value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Long, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * int64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="59da3-222">O nome da propriedade codificado em UTF-8 do objeto JSON a ser gravado.</span><span class="sxs-lookup"><span data-stu-id="59da3-222">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="59da3-223">O valor a ser gravado como um número JSON como parte do par nome/valor.</span><span class="sxs-lookup"><span data-stu-id="59da3-223">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-224"><see langword="false" /> para indicar que o gravador deve assumir que o nome da propriedade recebeu o devido escape e ignorar a etapa de escape; caso contrário, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-224"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="59da3-225">Este é um parâmetro opcional. Seu valor padrão é <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-225">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="59da3-226">Grava o nome da propriedade e o valor de <see cref="T:System.Int64" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-226">Writes the property name and <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="59da3-227">Grava o <see cref="T:System.Int64" /> usando o padrão <see cref="T:System.Buffers.StandardFormat" /> (ou seja, ' G').</span><span class="sxs-lookup"><span data-stu-id="59da3-227">Writes the <see cref="T:System.Int64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="59da3-228">Por exemplo, 32767.</span><span class="sxs-lookup"><span data-stu-id="59da3-228">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-229"><paramref name="utf8PropertyName" /> é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-229"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-230">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-230">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, float value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, float32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Single,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Single, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * single * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="59da3-231">O nome da propriedade codificado em UTF-8 do objeto JSON a ser gravado.</span><span class="sxs-lookup"><span data-stu-id="59da3-231">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="59da3-232">O valor a ser gravado como um número JSON como parte do par nome/valor.</span><span class="sxs-lookup"><span data-stu-id="59da3-232">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-233"><see langword="false" /> para indicar que o gravador deve assumir que o nome da propriedade recebeu o devido escape e ignorar a etapa de escape; caso contrário, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-233"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="59da3-234">Este é um parâmetro opcional. Seu valor padrão é <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-234">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="59da3-235">Grava o nome da propriedade e o valor de <see cref="T:System.Single" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-235">Writes the property name and <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="59da3-236">Grava o <see cref="T:System.Single" /> usando o padrão <see cref="T:System.Buffers.StandardFormat" /> (ou seja, ' G').</span><span class="sxs-lookup"><span data-stu-id="59da3-236">Writes the <see cref="T:System.Single" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-237"><paramref name="utf8PropertyName" /> é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-237"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-238">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-238">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, uint value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, unsigned int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As UInteger, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * uint32 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="59da3-239">O nome da propriedade codificado em UTF-8 do objeto JSON a ser gravado.</span><span class="sxs-lookup"><span data-stu-id="59da3-239">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="59da3-240">O valor a ser gravado como um número JSON como parte do par nome/valor.</span><span class="sxs-lookup"><span data-stu-id="59da3-240">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-241"><see langword="false" /> para indicar que o gravador deve assumir que o nome da propriedade recebeu o devido escape e ignorar a etapa de escape; caso contrário, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-241"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="59da3-242">Este é um parâmetro opcional. Seu valor padrão é <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-242">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="59da3-243">Grava o nome da propriedade e o valor de <see cref="T:System.UInt32" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-243">Writes the property name and <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="59da3-244">Grava o <see cref="T:System.UInt32" /> usando o padrão <see cref="T:System.Buffers.StandardFormat" /> (ou seja, ' G').</span><span class="sxs-lookup"><span data-stu-id="59da3-244">Writes the <see cref="T:System.UInt32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="59da3-245">Por exemplo, 32767.</span><span class="sxs-lookup"><span data-stu-id="59da3-245">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-246"><paramref name="utf8PropertyName" /> é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-246"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-247">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-247">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ulong value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, unsigned int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As ULong, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * uint64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="59da3-248">O nome da propriedade codificado em UTF-8 do objeto JSON a ser gravado.</span><span class="sxs-lookup"><span data-stu-id="59da3-248">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="59da3-249">O valor a ser gravado como um número JSON como parte do par nome/valor.</span><span class="sxs-lookup"><span data-stu-id="59da3-249">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-250"><see langword="false" /> para indicar que o gravador deve assumir que o nome da propriedade recebeu o devido escape e ignorar a etapa de escape; caso contrário, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-250"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="59da3-251">Este é um parâmetro opcional. Seu valor padrão é <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-251">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="59da3-252">Grava o nome da propriedade e o valor de <see cref="T:System.UInt64" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-252">Writes the property name and <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="59da3-253">Grava o <see cref="T:System.UInt64" /> usando o padrão <see cref="T:System.Buffers.StandardFormat" /> (ou seja, ' G').</span><span class="sxs-lookup"><span data-stu-id="59da3-253">Writes the <see cref="T:System.UInt64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="59da3-254">Por exemplo, 32767.</span><span class="sxs-lookup"><span data-stu-id="59da3-254">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-255"><paramref name="utf8PropertyName" /> é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-255"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-256">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-256">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, decimal value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.Decimal value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Decimal,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Decimal, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * decimal * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="59da3-257">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="59da3-257">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="59da3-258">O valor a ser gravado como um número JSON como parte do par nome/valor.</span><span class="sxs-lookup"><span data-stu-id="59da3-258">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-259"><see langword="false" /> para indicar que o gravador deve assumir que o nome da propriedade recebeu o devido escape e ignorar a etapa de escape; caso contrário, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-259"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="59da3-260">Este é um parâmetro opcional. Seu valor padrão é <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-260">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="59da3-261">Grava o nome da propriedade e o valor de <see cref="T:System.Decimal" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-261">Writes the property name and <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="59da3-262">Grava o <see cref="T:System.Decimal" /> usando o padrão <see cref="T:System.Buffers.StandardFormat" /> (ou seja, ' G').</span><span class="sxs-lookup"><span data-stu-id="59da3-262">Writes the <see cref="T:System.Decimal" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-263"><paramref name="propertyName" /> é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-263"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-264">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-264">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, double value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, float64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Double, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * double * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="59da3-265">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="59da3-265">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="59da3-266">O valor a ser gravado como um número JSON como parte do par nome/valor.</span><span class="sxs-lookup"><span data-stu-id="59da3-266">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-267"><see langword="false" /> para indicar que o gravador deve assumir que o nome da propriedade recebeu o devido escape e ignorar a etapa de escape; caso contrário, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-267"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="59da3-268">Este é um parâmetro opcional. Seu valor padrão é <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-268">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="59da3-269">Grava o nome da propriedade e o valor de <see cref="T:System.Double" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-269">Writes the property name and <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="59da3-270">Grava o <see cref="T:System.Double" /> usando o padrão <see cref="T:System.Buffers.StandardFormat" /> (ou seja, ' G').</span><span class="sxs-lookup"><span data-stu-id="59da3-270">Writes the <see cref="T:System.Double" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-271"><paramref name="propertyName" /> é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-271"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-272">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-272">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, int value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Integer, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * int * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="59da3-273">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="59da3-273">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="59da3-274">O valor a ser gravado como um número JSON como parte do par nome/valor.</span><span class="sxs-lookup"><span data-stu-id="59da3-274">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-275"><see langword="false" /> para indicar que o gravador deve assumir que o nome da propriedade recebeu o devido escape e ignorar a etapa de escape; caso contrário, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-275"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="59da3-276">Este é um parâmetro opcional. Seu valor padrão é <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-276">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="59da3-277">Grava o nome da propriedade e o valor de <see cref="T:System.Int32" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-277">Writes the property name and <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="59da3-278">Grava o <see cref="T:System.Int32" /> usando o padrão <see cref="T:System.Buffers.StandardFormat" /> (ou seja, ' G').</span><span class="sxs-lookup"><span data-stu-id="59da3-278">Writes the <see cref="T:System.Int32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="59da3-279">Por exemplo, 32767.</span><span class="sxs-lookup"><span data-stu-id="59da3-279">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-280"><paramref name="propertyName" /> é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-280"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-281">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-281">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, long value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Long, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * int64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="59da3-282">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="59da3-282">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="59da3-283">O valor a ser gravado como um número JSON como parte do par nome/valor.</span><span class="sxs-lookup"><span data-stu-id="59da3-283">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-284"><see langword="false" /> para indicar que o gravador deve assumir que o nome da propriedade recebeu o devido escape e ignorar a etapa de escape; caso contrário, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-284"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="59da3-285">Este é um parâmetro opcional. Seu valor padrão é <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-285">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="59da3-286">Grava o nome da propriedade e o valor de <see cref="T:System.Int64" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-286">Writes the property name and <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="59da3-287">Grava o <see cref="T:System.Int64" /> usando o padrão <see cref="T:System.Buffers.StandardFormat" /> (ou seja, ' G').</span><span class="sxs-lookup"><span data-stu-id="59da3-287">Writes the <see cref="T:System.Int64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="59da3-288">Por exemplo, 32767.</span><span class="sxs-lookup"><span data-stu-id="59da3-288">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-289"><paramref name="propertyName" /> é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-289"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-290">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-290">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, float value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, float32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Single,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Single, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * single * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="59da3-291">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="59da3-291">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="59da3-292">O valor a ser gravado como um número JSON como parte do par nome/valor.</span><span class="sxs-lookup"><span data-stu-id="59da3-292">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-293"><see langword="false" /> para indicar que o gravador deve assumir que o nome da propriedade recebeu o devido escape e ignorar a etapa de escape; caso contrário, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-293"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="59da3-294">Este é um parâmetro opcional. Seu valor padrão é <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-294">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="59da3-295">Grava o nome da propriedade e o valor de <see cref="T:System.Single" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-295">Writes the property name and <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="59da3-296">Grava o <see cref="T:System.Single" /> usando o padrão <see cref="T:System.Buffers.StandardFormat" /> (ou seja, ' G').</span><span class="sxs-lookup"><span data-stu-id="59da3-296">Writes the <see cref="T:System.Single" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-297"><paramref name="propertyName" /> é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-297"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-298">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-298">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, uint value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, unsigned int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As UInteger, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * uint32 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="59da3-299">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="59da3-299">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="59da3-300">O valor a ser gravado como um número JSON como parte do par nome/valor.</span><span class="sxs-lookup"><span data-stu-id="59da3-300">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-301"><see langword="false" /> para indicar que o gravador deve assumir que o nome da propriedade recebeu o devido escape e ignorar a etapa de escape; caso contrário, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-301"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="59da3-302">Este é um parâmetro opcional. Seu valor padrão é <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-302">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="59da3-303">Grava o nome da propriedade e o valor de <see cref="T:System.UInt32" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-303">Writes the property name and <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="59da3-304">Grava o <see cref="T:System.UInt32" /> usando o padrão <see cref="T:System.Buffers.StandardFormat" /> (ou seja, ' G').</span><span class="sxs-lookup"><span data-stu-id="59da3-304">Writes the <see cref="T:System.UInt32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="59da3-305">Por exemplo, 32767.</span><span class="sxs-lookup"><span data-stu-id="59da3-305">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-306"><paramref name="propertyName" /> é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-306"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-307">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-307">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, ulong value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, unsigned int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As ULong, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * uint64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="59da3-308">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="59da3-308">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="59da3-309">O valor a ser gravado como um número JSON como parte do par nome/valor.</span><span class="sxs-lookup"><span data-stu-id="59da3-309">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-310"><see langword="false" /> para indicar que o gravador deve assumir que o nome da propriedade recebeu o devido escape e ignorar a etapa de escape; caso contrário, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-310"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="59da3-311">Este é um parâmetro opcional. Seu valor padrão é <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-311">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="59da3-312">Grava o nome da propriedade e o valor de <see cref="T:System.UInt64" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-312">Writes the property name and <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="59da3-313">Grava o <see cref="T:System.UInt64" /> usando o padrão <see cref="T:System.Buffers.StandardFormat" /> (ou seja, ' G').</span><span class="sxs-lookup"><span data-stu-id="59da3-313">Writes the <see cref="T:System.UInt64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="59da3-314">Por exemplo, 32767.</span><span class="sxs-lookup"><span data-stu-id="59da3-314">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-315"><paramref name="propertyName" /> é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-315"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-316">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-316">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, decimal value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, valuetype System.Decimal value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Decimal,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Decimal, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * decimal * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="59da3-317">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="59da3-317">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="59da3-318">O valor a ser gravado como um número JSON como parte do par nome/valor.</span><span class="sxs-lookup"><span data-stu-id="59da3-318">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-319"><see langword="false" /> para indicar que o gravador deve assumir que o nome da propriedade recebeu o devido escape e ignorar a etapa de escape; caso contrário, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-319"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="59da3-320">Este é um parâmetro opcional. Seu valor padrão é <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-320">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="59da3-321">Grava o nome da propriedade e o valor de <see cref="T:System.Decimal" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-321">Writes the property name and <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="59da3-322">Grava o <see cref="T:System.Decimal" /> usando o padrão <see cref="T:System.Buffers.StandardFormat" /> (ou seja, ' G').</span><span class="sxs-lookup"><span data-stu-id="59da3-322">Writes the <see cref="T:System.Decimal" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-323"><paramref name="propertyName" /> é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-323"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-324">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-324">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, double value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, float64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Double, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * double * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="59da3-325">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="59da3-325">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="59da3-326">O valor a ser gravado como um número JSON como parte do par nome/valor.</span><span class="sxs-lookup"><span data-stu-id="59da3-326">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-327"><see langword="false" /> para indicar que o gravador deve assumir que o nome da propriedade recebeu o devido escape e ignorar a etapa de escape; caso contrário, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-327"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="59da3-328">Este é um parâmetro opcional. Seu valor padrão é <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-328">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="59da3-329">Grava o nome da propriedade e o valor de <see cref="T:System.Double" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-329">Writes the property name and <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="59da3-330">Grava o <see cref="T:System.Double" /> usando o padrão <see cref="T:System.Buffers.StandardFormat" /> (ou seja, ' G').</span><span class="sxs-lookup"><span data-stu-id="59da3-330">Writes the <see cref="T:System.Double" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-331"><paramref name="propertyName" /> é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-331"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-332">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-332">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, int value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Integer, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * int * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="59da3-333">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="59da3-333">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="59da3-334">O valor a ser gravado como um número JSON como parte do par nome/valor.</span><span class="sxs-lookup"><span data-stu-id="59da3-334">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-335"><see langword="false" /> para indicar que o gravador deve assumir que o nome da propriedade recebeu o devido escape e ignorar a etapa de escape; caso contrário, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-335"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="59da3-336">Este é um parâmetro opcional. Seu valor padrão é <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-336">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="59da3-337">Grava o nome da propriedade e o valor de <see cref="T:System.Int32" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-337">Writes the property name and <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="59da3-338">Grava o <see cref="T:System.Int32" /> usando o padrão <see cref="T:System.Buffers.StandardFormat" /> (ou seja, ' G').</span><span class="sxs-lookup"><span data-stu-id="59da3-338">Writes the <see cref="T:System.Int32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="59da3-339">Por exemplo, 32767.</span><span class="sxs-lookup"><span data-stu-id="59da3-339">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-340"><paramref name="propertyName" /> é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-340"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-341">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-341">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, long value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Long, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * int64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="59da3-342">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="59da3-342">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="59da3-343">O valor a ser gravado como um número JSON como parte do par nome/valor.</span><span class="sxs-lookup"><span data-stu-id="59da3-343">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-344"><see langword="false" /> para indicar que o gravador deve assumir que o nome da propriedade recebeu o devido escape e ignorar a etapa de escape; caso contrário, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-344"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="59da3-345">Este é um parâmetro opcional. Seu valor padrão é <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-345">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="59da3-346">Grava o nome da propriedade e o valor de <see cref="T:System.Int64" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-346">Writes the property name and <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="59da3-347">Grava o <see cref="T:System.Int64" /> usando o padrão <see cref="T:System.Buffers.StandardFormat" /> (ou seja, ' G').</span><span class="sxs-lookup"><span data-stu-id="59da3-347">Writes the <see cref="T:System.Int64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="59da3-348">Por exemplo, 32767.</span><span class="sxs-lookup"><span data-stu-id="59da3-348">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-349"><paramref name="propertyName" /> é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-349"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-350">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-350">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, float value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, float32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Single,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Single, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * single * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="59da3-351">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="59da3-351">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="59da3-352">O valor a ser gravado como um número JSON como parte do par nome/valor.</span><span class="sxs-lookup"><span data-stu-id="59da3-352">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-353"><see langword="false" /> para indicar que o gravador deve assumir que o nome da propriedade recebeu o devido escape e ignorar a etapa de escape; caso contrário, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-353"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="59da3-354">Este é um parâmetro opcional. Seu valor padrão é <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-354">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="59da3-355">Grava o nome da propriedade e o valor de <see cref="T:System.Single" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-355">Writes the property name and <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="59da3-356">Grava o <see cref="T:System.Single" /> usando o padrão <see cref="T:System.Buffers.StandardFormat" /> (ou seja, ' G').</span><span class="sxs-lookup"><span data-stu-id="59da3-356">Writes the <see cref="T:System.Single" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-357"><paramref name="propertyName" /> é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-357"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-358">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-358">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, uint value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, unsigned int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As UInteger, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * uint32 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="59da3-359">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="59da3-359">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="59da3-360">O valor a ser gravado como um número JSON como parte do par nome/valor.</span><span class="sxs-lookup"><span data-stu-id="59da3-360">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-361"><see langword="false" /> para indicar que o gravador deve assumir que o nome da propriedade recebeu o devido escape e ignorar a etapa de escape; caso contrário, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-361"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="59da3-362">Este é um parâmetro opcional. Seu valor padrão é <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-362">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="59da3-363">Grava o nome da propriedade e o valor de <see cref="T:System.UInt32" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-363">Writes the property name and <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="59da3-364">Grava o <see cref="T:System.UInt32" /> usando o padrão <see cref="T:System.Buffers.StandardFormat" /> (ou seja, ' G').</span><span class="sxs-lookup"><span data-stu-id="59da3-364">Writes the <see cref="T:System.UInt32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="59da3-365">Por exemplo, 32767.</span><span class="sxs-lookup"><span data-stu-id="59da3-365">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-366"><paramref name="propertyName" /> é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-366"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-367">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-367">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, ulong value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, unsigned int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As ULong, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * uint64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="59da3-368">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="59da3-368">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="59da3-369">O valor a ser gravado como um número JSON como parte do par nome/valor.</span><span class="sxs-lookup"><span data-stu-id="59da3-369">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-370"><see langword="false" /> para indicar que o gravador deve assumir que o nome da propriedade recebeu o devido escape e ignorar a etapa de escape; caso contrário, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-370"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="59da3-371">Este é um parâmetro opcional. Seu valor padrão é <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-371">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="59da3-372">Grava o nome da propriedade e o valor de <see cref="T:System.UInt64" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-372">Writes the property name and <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="59da3-373">Grava o <see cref="T:System.UInt64" /> usando o padrão <see cref="T:System.Buffers.StandardFormat" /> (ou seja, ' G').</span><span class="sxs-lookup"><span data-stu-id="59da3-373">Writes the <see cref="T:System.UInt64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="59da3-374">Por exemplo, 32767.</span><span class="sxs-lookup"><span data-stu-id="59da3-374">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-375"><paramref name="propertyName" /> é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-375"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-376">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-376">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="59da3-377">O valor a ser gravado como um número JSON como um elemento de uma matriz JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-377">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="59da3-378">Grava o valor de <see cref="T:System.Decimal" /> (como um número JSON) como um elemento de uma matriz JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-378">Writes the <see cref="T:System.Decimal" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="59da3-379">Grava o <see cref="T:System.Decimal" /> usando o padrão <see cref="T:System.Buffers.StandardFormat" /> (ou seja, ' G').</span><span class="sxs-lookup"><span data-stu-id="59da3-379">Writes the <see cref="T:System.Decimal" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-380">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-380">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : double -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="59da3-381">O valor a ser gravado como um número JSON como um elemento de uma matriz JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-381">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="59da3-382">Grava o valor de <see cref="T:System.Double" /> (como um número JSON) como um elemento de uma matriz JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-382">Writes the <see cref="T:System.Double" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="59da3-383">Grava o <see cref="T:System.Double" /> usando o padrão <see cref="T:System.Buffers.StandardFormat" /> (ou seja, ' G').</span><span class="sxs-lookup"><span data-stu-id="59da3-383">Writes the <see cref="T:System.Double" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-384">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-384">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : int -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="59da3-385">O valor a ser gravado como um número JSON como um elemento de uma matriz JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-385">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="59da3-386">Grava o valor de <see cref="T:System.Int32" /> (como um número JSON) como um elemento de uma matriz JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-386">Writes the <see cref="T:System.Int32" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="59da3-387">Grava o <see cref="T:System.Int32" /> usando o padrão <see cref="T:System.Buffers.StandardFormat" /> (ou seja, ' G').</span><span class="sxs-lookup"><span data-stu-id="59da3-387">Writes the <see cref="T:System.Int32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="59da3-388">Por exemplo, 32767.</span><span class="sxs-lookup"><span data-stu-id="59da3-388">For example, 32767.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-389">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-389">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="59da3-390">O valor a ser gravado como um número JSON como um elemento de uma matriz JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-390">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="59da3-391">Grava o valor de <see cref="T:System.Int64" /> (como um número JSON) como um elemento de uma matriz JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-391">Writes the <see cref="T:System.Int64" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="59da3-392">Grava o <see cref="T:System.Int64" /> usando o padrão <see cref="T:System.Buffers.StandardFormat" /> (ou seja, ' G').</span><span class="sxs-lookup"><span data-stu-id="59da3-392">Writes the <see cref="T:System.Int64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="59da3-393">Por exemplo, 32767.</span><span class="sxs-lookup"><span data-stu-id="59da3-393">For example, 32767.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-394">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-394">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : single -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="59da3-395">O valor a ser gravado como um número JSON como um elemento de uma matriz JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-395">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="59da3-396">Grava o valor de <see cref="T:System.Single" /> (como um número JSON) como um elemento de uma matriz JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-396">Writes the <see cref="T:System.Single" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="59da3-397">Grava o <see cref="T:System.Single" /> usando o padrão <see cref="T:System.Buffers.StandardFormat" /> (ou seja, ' G').</span><span class="sxs-lookup"><span data-stu-id="59da3-397">Writes the <see cref="T:System.Single" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-398">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-398">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="59da3-399">O valor a ser gravado como um número JSON como um elemento de uma matriz JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-399">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="59da3-400">Grava o valor de <see cref="T:System.UInt32" /> (como um número JSON) como um elemento de uma matriz JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-400">Writes the <see cref="T:System.UInt32" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="59da3-401">Grava o <see cref="T:System.UInt32" /> usando o padrão <see cref="T:System.Buffers.StandardFormat" /> (ou seja, ' G').</span><span class="sxs-lookup"><span data-stu-id="59da3-401">Writes the <see cref="T:System.UInt32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="59da3-402">Por exemplo, 32767.</span><span class="sxs-lookup"><span data-stu-id="59da3-402">For example, 32767.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-403">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-403">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="59da3-404">O valor a ser gravado como um número JSON como um elemento de uma matriz JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-404">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="59da3-405">Grava o valor de <see cref="T:System.UInt64" /> (como um número JSON) como um elemento de uma matriz JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-405">Writes the <see cref="T:System.UInt64" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="59da3-406">Grava o <see cref="T:System.UInt64" /> usando o padrão <see cref="T:System.Buffers.StandardFormat" /> (ou seja, ' G').</span><span class="sxs-lookup"><span data-stu-id="59da3-406">Writes the <see cref="T:System.UInt64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="59da3-407">Por exemplo, 32767.</span><span class="sxs-lookup"><span data-stu-id="59da3-407">For example, 32767.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-408">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-408">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray();" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : unit -&gt; unit" Usage="utf8JsonWriter.WriteStartArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="59da3-409">Grava o início de uma matriz JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-409">Writes the beginning of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-410">A profundidade do JSON excedeu a profundidade máxima de 1000.</span><span class="sxs-lookup"><span data-stu-id="59da3-410">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="59da3-411">- ou -</span><span class="sxs-lookup"><span data-stu-id="59da3-411">-or-</span></span>

<span data-ttu-id="59da3-412">se isso resultar em um JSON inválido a ser gravado (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-412">if this would result in an invalid JSON to be written (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (ReadOnlySpan&lt;byte&gt; utf8PropertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (utf8PropertyName As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartArray (utf8PropertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="59da3-413">O nome da propriedade codificado em UTF-8 da matriz JSON a ser gravada.</span><span class="sxs-lookup"><span data-stu-id="59da3-413">The UTF-8 encoded property name of the JSON array to be written.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-414"><see langword="false" /> para indicar que o gravador deve assumir que o nome da propriedade recebeu o devido escape e ignorar a etapa de escape; caso contrário, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-414"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="59da3-415">Este é um parâmetro opcional. Seu valor padrão é <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-415">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="59da3-416">Grava o início de uma matriz JSON com um nome de propriedade como a chave.</span><span class="sxs-lookup"><span data-stu-id="59da3-416">Writes the beginning of a JSON array with a property name as the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-417"><paramref name="utf8PropertyName" /> é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-417"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-418">A profundidade do JSON excedeu a profundidade máxima de 1000.</span><span class="sxs-lookup"><span data-stu-id="59da3-418">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="59da3-419">- ou -</span><span class="sxs-lookup"><span data-stu-id="59da3-419">-or-</span></span>

<span data-ttu-id="59da3-420">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-420">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (ReadOnlySpan&lt;char&gt; propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (propertyName As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartArray (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="59da3-421">O nome da propriedade codificado em UTF-16 da matriz JSON a ser transcodificada e gravada como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="59da3-421">The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-422"><see langword="false" /> para indicar que o gravador deve assumir que o nome da propriedade recebeu o devido escape e ignorar a etapa de escape; caso contrário, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-422"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="59da3-423">Este é um parâmetro opcional. Seu valor padrão é <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-423">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="59da3-424">Grava o início de uma matriz JSON com um nome de propriedade como a chave.</span><span class="sxs-lookup"><span data-stu-id="59da3-424">Writes the beginning of a JSON array with a property name as the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-425"><paramref name="propertyName" /> é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-425"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-426">A profundidade do JSON excedeu a profundidade máxima de 1000.</span><span class="sxs-lookup"><span data-stu-id="59da3-426">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="59da3-427">- ou -</span><span class="sxs-lookup"><span data-stu-id="59da3-427">-or-</span></span>

<span data-ttu-id="59da3-428">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-428">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (string propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(string propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (propertyName As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartArray (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="59da3-429">O nome da propriedade codificado em UTF-16 da matriz JSON a ser transcodificada e gravada como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="59da3-429">The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-430"><see langword="false" /> para indicar que o gravador deve assumir que o nome da propriedade recebeu o devido escape e ignorar a etapa de escape; caso contrário, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-430"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="59da3-431">Este é um parâmetro opcional. Seu valor padrão é <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-431">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="59da3-432">Grava o início de uma matriz JSON com um nome de propriedade como a chave.</span><span class="sxs-lookup"><span data-stu-id="59da3-432">Writes the beginning of a JSON array with a property name as the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-433"><paramref name="propertyName" /> é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-433"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-434">A profundidade do JSON excedeu a profundidade máxima de 1000.</span><span class="sxs-lookup"><span data-stu-id="59da3-434">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="59da3-435">- ou -</span><span class="sxs-lookup"><span data-stu-id="59da3-435">-or-</span></span>

<span data-ttu-id="59da3-436">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-436">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject();" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : unit -&gt; unit" Usage="utf8JsonWriter.WriteStartObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="59da3-437">Grava o início de um objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-437">Writes the beginning of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-438">A profundidade do JSON excedeu a profundidade máxima de 1000.</span><span class="sxs-lookup"><span data-stu-id="59da3-438">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="59da3-439">- ou -</span><span class="sxs-lookup"><span data-stu-id="59da3-439">-or-</span></span>

<span data-ttu-id="59da3-440">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-440">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (ReadOnlySpan&lt;byte&gt; utf8PropertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (utf8PropertyName As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartObject (utf8PropertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="59da3-441">O nome da propriedade codificado em UTF-8 do objeto JSON a ser gravado.</span><span class="sxs-lookup"><span data-stu-id="59da3-441">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-442"><see langword="false" /> para indicar que o gravador deve assumir que o nome da propriedade recebeu o devido escape e ignorar a etapa de escape; caso contrário, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-442"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="59da3-443">Este é um parâmetro opcional. Seu valor padrão é <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-443">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="59da3-444">Grava o início de um objeto JSON com um nome de propriedade como a chave.</span><span class="sxs-lookup"><span data-stu-id="59da3-444">Writes the beginning of a JSON object with a property name as the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-445"><paramref name="utf8PropertyName" /> é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-445"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-446">A profundidade do JSON excedeu a profundidade máxima de 1000.</span><span class="sxs-lookup"><span data-stu-id="59da3-446">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="59da3-447">- ou -</span><span class="sxs-lookup"><span data-stu-id="59da3-447">-or-</span></span>

<span data-ttu-id="59da3-448">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-448">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (ReadOnlySpan&lt;char&gt; propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (propertyName As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartObject (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="59da3-449">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="59da3-449">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-450"><see langword="false" /> para indicar que o gravador deve assumir que o nome da propriedade recebeu o devido escape e ignorar a etapa de escape; caso contrário, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-450"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="59da3-451">Este é um parâmetro opcional. Seu valor padrão é <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-451">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="59da3-452">Grava o início de um objeto JSON com um nome de propriedade como a chave.</span><span class="sxs-lookup"><span data-stu-id="59da3-452">Writes the beginning of a JSON object with a property name as the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-453"><paramref name="propertyName" /> é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-453"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-454">A profundidade do JSON excedeu a profundidade máxima de 1000.</span><span class="sxs-lookup"><span data-stu-id="59da3-454">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="59da3-455">- ou -</span><span class="sxs-lookup"><span data-stu-id="59da3-455">-or-</span></span>

<span data-ttu-id="59da3-456">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-456">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (string propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(string propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (propertyName As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartObject (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="59da3-457">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="59da3-457">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-458"><see langword="false" /> para indicar que o gravador deve assumir que o nome da propriedade recebeu o devido escape e ignorar a etapa de escape; caso contrário, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-458"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="59da3-459">Este é um parâmetro opcional. Seu valor padrão é <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-459">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="59da3-460">Grava o início de um objeto JSON com um nome de propriedade como a chave.</span><span class="sxs-lookup"><span data-stu-id="59da3-460">Writes the beginning of a JSON object with a property name as the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-461"><paramref name="propertyName" /> é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-461"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-462">A profundidade do JSON excedeu a profundidade máxima de 1000.</span><span class="sxs-lookup"><span data-stu-id="59da3-462">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="59da3-463">- ou -</span><span class="sxs-lookup"><span data-stu-id="59da3-463">-or-</span></span>

<span data-ttu-id="59da3-464">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-464">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, DateTime value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.DateTime value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTime,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As DateTime, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * DateTime * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTime" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="59da3-465">O nome da propriedade codificado em UTF-8 do objeto JSON a ser gravado.</span><span class="sxs-lookup"><span data-stu-id="59da3-465">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="59da3-466">O valor a ser gravado como uma cadeia de caracteres JSON como parte do par nome/valor.</span><span class="sxs-lookup"><span data-stu-id="59da3-466">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-467"><see langword="false" /> para indicar que o gravador deve assumir que o nome da propriedade recebeu o devido escape e ignorar a etapa de escape; caso contrário, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-467"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="59da3-468">Este é um parâmetro opcional. Seu valor padrão é <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-468">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="59da3-469">Grava o nome da propriedade e o valor de <see cref="T:System.DateTime" /> (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-469">Writes the property name and <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="59da3-470">Grava o <see cref="T:System.DateTime" /> usando a ida e volta (' L') <see cref="T:System.Buffers.StandardFormat" /> .</span><span class="sxs-lookup"><span data-stu-id="59da3-470">Writes the <see cref="T:System.DateTime" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="59da3-471">Por exemplo, 2017-06-12T05:30:45.7680000.</span><span class="sxs-lookup"><span data-stu-id="59da3-471">For example, 2017-06-12T05:30:45.7680000.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-472"><paramref name="utf8PropertyName" /> é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-472"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-473">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-473">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, DateTimeOffset value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.DateTimeOffset value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTimeOffset,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As DateTimeOffset, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * DateTimeOffset * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="59da3-474">O nome da propriedade codificado em UTF-8 do objeto JSON a ser gravado.</span><span class="sxs-lookup"><span data-stu-id="59da3-474">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="59da3-475">O valor a ser gravado como uma cadeia de caracteres JSON como parte do par nome/valor.</span><span class="sxs-lookup"><span data-stu-id="59da3-475">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-476"><see langword="false" /> para indicar que o gravador deve assumir que o nome da propriedade recebeu o devido escape e ignorar a etapa de escape; caso contrário, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-476"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="59da3-477">Este é um parâmetro opcional. Seu valor padrão é <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-477">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="59da3-478">Grava o nome da propriedade e o valor de <see cref="T:System.DateTimeOffset" /> (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-478">Writes the property name and <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="59da3-479">Grava o <see cref="T:System.DateTimeOffset" /> usando a ida e volta (' L') <see cref="T:System.Buffers.StandardFormat" /> .</span><span class="sxs-lookup"><span data-stu-id="59da3-479">Writes the <see cref="T:System.DateTimeOffset" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="59da3-480">Por exemplo, 2017-06-12T05:30:45.7680000-07:00.</span><span class="sxs-lookup"><span data-stu-id="59da3-480">For example, 2017-06-12T05:30:45.7680000-07:00.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-481"><paramref name="utf8PropertyName" /> é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-481"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-482">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-482">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, Guid value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.Guid value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Guid,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As Guid, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * Guid * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Guid" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="59da3-483">O nome da propriedade codificado em UTF-8 do objeto JSON a ser gravado.</span><span class="sxs-lookup"><span data-stu-id="59da3-483">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="59da3-484">O valor a ser gravado como uma cadeia de caracteres JSON como parte do par nome/valor.</span><span class="sxs-lookup"><span data-stu-id="59da3-484">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-485"><see langword="false" /> para indicar que o gravador deve assumir que o nome da propriedade recebeu o devido escape e ignorar a etapa de escape; caso contrário, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-485"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="59da3-486">Este é um parâmetro opcional. Seu valor padrão é <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-486">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="59da3-487">Grava o nome da propriedade e o valor de <see cref="T:System.Guid" /> (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-487">Writes the property name and <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="59da3-488">Grava o <see cref="T:System.Guid" /> usando o padrão <see cref="T:System.Buffers.StandardFormat" /> (ou seja, tinha '), como o formulário: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span><span class="sxs-lookup"><span data-stu-id="59da3-488">Writes the <see cref="T:System.Guid" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-489"><paramref name="utf8PropertyName" /> é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-489"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-490">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-490">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ReadOnlySpan&lt;byte&gt; utf8Value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), utf8Value As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, utf8Value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="59da3-491">O nome da propriedade codificado em UTF-8 do objeto JSON a ser gravado.</span><span class="sxs-lookup"><span data-stu-id="59da3-491">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="59da3-492">O valor codificado em UTF-8 a ser gravado como uma cadeia de caracteres JSON como parte do par nome/valor.</span><span class="sxs-lookup"><span data-stu-id="59da3-492">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-493">Se estiver definido como false, o gravador assumirá que o nome da propriedade recebeu o devido escape e ignorará a etapa de escape.</span><span class="sxs-lookup"><span data-stu-id="59da3-493">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="59da3-494">O valor sempre recebe um escape</span><span class="sxs-lookup"><span data-stu-id="59da3-494">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="59da3-495">Grava o nome da propriedade UTF-8 e o valor de texto UTF-8 (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-495">Writes the UTF-8 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-496">Gerado quando o nome da propriedade ou o valor especificado é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-496">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-497">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-497">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ReadOnlySpan&lt;char&gt; value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="59da3-498">O nome da propriedade codificado em UTF-8 do objeto JSON a ser gravado.</span><span class="sxs-lookup"><span data-stu-id="59da3-498">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="59da3-499">O valor codificado em UTF-16 a ser gravado como uma cadeia de caracteres JSON transcodificada em codificado em UTF-8 como parte do par nome/valor.</span><span class="sxs-lookup"><span data-stu-id="59da3-499">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-500">Se estiver definido como false, o gravador assumirá que o nome da propriedade recebeu o devido escape e ignorará a etapa de escape.</span><span class="sxs-lookup"><span data-stu-id="59da3-500">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="59da3-501">O valor sempre recebe um escape</span><span class="sxs-lookup"><span data-stu-id="59da3-501">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="59da3-502">Grava o nome da propriedade UTF-8 e o valor de texto UTF-16 (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-502">Writes the UTF-8 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-503">Gerado quando o nome da propriedade ou o valor especificado é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-503">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-504">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-504">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, string value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, string value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * string * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="59da3-505">O nome da propriedade codificado em UTF-8 do objeto JSON a ser gravado.</span><span class="sxs-lookup"><span data-stu-id="59da3-505">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="59da3-506">O valor codificado em UTF-16 a ser gravado como uma cadeia de caracteres JSON transcodificada em codificado em UTF-8 como parte do par nome/valor.</span><span class="sxs-lookup"><span data-stu-id="59da3-506">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-507">Se estiver definido como false, o gravador assumirá que o nome da propriedade recebeu o devido escape e ignorará a etapa de escape.</span><span class="sxs-lookup"><span data-stu-id="59da3-507">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="59da3-508">O valor sempre recebe um escape</span><span class="sxs-lookup"><span data-stu-id="59da3-508">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="59da3-509">Grava o nome da propriedade UTF-8 e o valor de texto de cadeia de caracteres (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-509">Writes the UTF-8 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-510">Gerado quando o nome da propriedade ou o valor especificado é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-510">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-511">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-511">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, DateTime value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.DateTime value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTime,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As DateTime, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * DateTime * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.DateTime" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="59da3-512">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="59da3-512">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="59da3-513">O valor a ser gravado como uma cadeia de caracteres JSON como parte do par nome/valor.</span><span class="sxs-lookup"><span data-stu-id="59da3-513">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-514"><see langword="false" /> para indicar que o gravador deve assumir que o nome da propriedade recebeu o devido escape e ignorar a etapa de escape; caso contrário, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-514"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="59da3-515">Este é um parâmetro opcional. Seu valor padrão é <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-515">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="59da3-516">Grava o nome da propriedade e o valor de <see cref="T:System.DateTime" /> (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-516">Writes the property name and <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="59da3-517">Grava o <see cref="T:System.DateTime" /> usando a ida e volta (' L') <see cref="T:System.Buffers.StandardFormat" /> .</span><span class="sxs-lookup"><span data-stu-id="59da3-517">Writes the <see cref="T:System.DateTime" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="59da3-518">Por exemplo, 2017-06-12T05:30:45.7680000.</span><span class="sxs-lookup"><span data-stu-id="59da3-518">For example, 2017-06-12T05:30:45.7680000.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-519"><paramref name="propertyName" /> é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-519"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-520">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-520">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, DateTimeOffset value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.DateTimeOffset value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTimeOffset,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As DateTimeOffset, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * DateTimeOffset * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="59da3-521">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="59da3-521">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="59da3-522">O valor a ser gravado como uma cadeia de caracteres JSON como parte do par nome/valor.</span><span class="sxs-lookup"><span data-stu-id="59da3-522">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-523"><see langword="false" /> para indicar que o gravador deve assumir que o nome da propriedade recebeu o devido escape e ignorar a etapa de escape; caso contrário, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-523"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="59da3-524">Este é um parâmetro opcional. Seu valor padrão é <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-524">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="59da3-525">Grava o nome da propriedade e o valor de <see cref="T:System.DateTimeOffset" /> (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-525">Writes the property name and <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="59da3-526">Grava o <see cref="T:System.DateTimeOffset" /> usando a ida e volta (' L') <see cref="T:System.Buffers.StandardFormat" /> .</span><span class="sxs-lookup"><span data-stu-id="59da3-526">Writes the <see cref="T:System.DateTimeOffset" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="59da3-527">Por exemplo, 2017-06-12T05:30:45.7680000-07:00.</span><span class="sxs-lookup"><span data-stu-id="59da3-527">For example, 2017-06-12T05:30:45.7680000-07:00.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-528"><paramref name="propertyName" /> é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-528"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-529">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-529">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, Guid value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.Guid value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Guid,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As Guid, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * Guid * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Guid" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="59da3-530">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="59da3-530">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="59da3-531">O valor a ser gravado como uma cadeia de caracteres JSON como parte do par nome/valor.</span><span class="sxs-lookup"><span data-stu-id="59da3-531">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-532"><see langword="false" /> para indicar que o gravador deve assumir que o nome da propriedade recebeu o devido escape e ignorar a etapa de escape; caso contrário, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-532"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="59da3-533">Este é um parâmetro opcional. Seu valor padrão é <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-533">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="59da3-534">Grava o nome da propriedade e o valor de <see cref="T:System.Guid" /> (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-534">Writes the property name and <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="59da3-535">Grava o <see cref="T:System.Guid" /> usando o padrão <see cref="T:System.Buffers.StandardFormat" /> (ou seja, tinha '), como o formulário: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span><span class="sxs-lookup"><span data-stu-id="59da3-535">Writes the <see cref="T:System.Guid" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-536"><paramref name="propertyName" /> é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-536"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-537">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-537">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;byte&gt; utf8Value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), utf8Value As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, utf8Value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="59da3-538">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="59da3-538">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="59da3-539">O valor codificado em UTF-8 a ser gravado como uma cadeia de caracteres JSON como parte do par nome/valor.</span><span class="sxs-lookup"><span data-stu-id="59da3-539">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-540">Se estiver definido como false, o gravador assumirá que o nome da propriedade recebeu o devido escape e ignorará a etapa de escape.</span><span class="sxs-lookup"><span data-stu-id="59da3-540">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="59da3-541">O valor sempre recebe um escape</span><span class="sxs-lookup"><span data-stu-id="59da3-541">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="59da3-542">Grava o nome da propriedade UTF-16 e o valor de texto UTF-8 (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-542">Writes the UTF-16 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-543">Gerado quando o nome da propriedade ou o valor especificado é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-543">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-544">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-544">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;char&gt; value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="59da3-545">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="59da3-545">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="59da3-546">O valor codificado em UTF-16 a ser gravado como uma cadeia de caracteres JSON transcodificada em codificado em UTF-8 como parte do par nome/valor.</span><span class="sxs-lookup"><span data-stu-id="59da3-546">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-547">Se estiver definido como false, o gravador assumirá que o nome da propriedade recebeu o devido escape e ignorará a etapa de escape.</span><span class="sxs-lookup"><span data-stu-id="59da3-547">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="59da3-548">O valor sempre recebe um escape</span><span class="sxs-lookup"><span data-stu-id="59da3-548">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="59da3-549">Grava o nome da propriedade UTF-16 e o valor de texto UTF-16 (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-549">Writes the UTF-16 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-550">Gerado quando o nome da propriedade ou o valor especificado é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-550">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-551">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-551">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, string value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, string value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * string * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="59da3-552">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="59da3-552">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="59da3-553">O valor codificado em UTF-16 a ser gravado como uma cadeia de caracteres JSON transcodificada em codificado em UTF-8 como parte do par nome/valor.</span><span class="sxs-lookup"><span data-stu-id="59da3-553">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-554">Se estiver definido como false, o gravador assumirá que o nome da propriedade recebeu o devido escape e ignorará a etapa de escape.</span><span class="sxs-lookup"><span data-stu-id="59da3-554">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="59da3-555">O valor sempre recebe um escape</span><span class="sxs-lookup"><span data-stu-id="59da3-555">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="59da3-556">Grava o nome da propriedade UTF-16 e o valor de texto de cadeia de caracteres (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-556">Writes the UTF-16 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-557">Gerado quando o nome da propriedade ou o valor especificado é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-557">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-558">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-558">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, DateTime value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.DateTime value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTime,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As DateTime, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * DateTime * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.DateTime" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="59da3-559">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="59da3-559">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="59da3-560">O valor a ser gravado como uma cadeia de caracteres JSON como parte do par nome/valor.</span><span class="sxs-lookup"><span data-stu-id="59da3-560">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-561"><see langword="false" /> para indicar que o gravador deve assumir que o nome da propriedade recebeu o devido escape e ignorar a etapa de escape; caso contrário, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-561"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="59da3-562">Este é um parâmetro opcional. Seu valor padrão é <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-562">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="59da3-563">Grava o nome da propriedade e o valor de <see cref="T:System.DateTime" /> (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-563">Writes the property name and <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="59da3-564">Grava o <see cref="T:System.DateTime" /> usando a ida e volta (' L') <see cref="T:System.Buffers.StandardFormat" /> .</span><span class="sxs-lookup"><span data-stu-id="59da3-564">Writes the <see cref="T:System.DateTime" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="59da3-565">Por exemplo, 2017-06-12T05:30:45.7680000.</span><span class="sxs-lookup"><span data-stu-id="59da3-565">For example, 2017-06-12T05:30:45.7680000.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-566"><paramref name="propertyName" /> é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-566"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-567">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-567">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, DateTimeOffset value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.DateTimeOffset value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTimeOffset,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As DateTimeOffset, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * DateTimeOffset * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="59da3-568">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="59da3-568">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="59da3-569">O valor a ser gravado como uma cadeia de caracteres JSON como parte do par nome/valor.</span><span class="sxs-lookup"><span data-stu-id="59da3-569">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-570"><see langword="false" /> para indicar que o gravador deve assumir que o nome da propriedade recebeu o devido escape e ignorar a etapa de escape; caso contrário, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-570"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="59da3-571">Este é um parâmetro opcional. Seu valor padrão é <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-571">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="59da3-572">Grava o nome da propriedade e o valor de <see cref="T:System.DateTimeOffset" /> (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-572">Writes the property name and <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="59da3-573">Grava o <see cref="T:System.DateTimeOffset" /> usando a ida e volta (' L') <see cref="T:System.Buffers.StandardFormat" /> .</span><span class="sxs-lookup"><span data-stu-id="59da3-573">Writes the <see cref="T:System.DateTimeOffset" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="59da3-574">Por exemplo, 2017-06-12T05:30:45.7680000-07:00.</span><span class="sxs-lookup"><span data-stu-id="59da3-574">For example, 2017-06-12T05:30:45.7680000-07:00.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-575"><paramref name="propertyName" /> é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-575"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-576">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-576">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, Guid value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.Guid value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Guid,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As Guid, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * Guid * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Guid" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="59da3-577">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="59da3-577">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="59da3-578">O valor a ser gravado como uma cadeia de caracteres JSON como parte do par nome/valor.</span><span class="sxs-lookup"><span data-stu-id="59da3-578">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-579"><see langword="false" /> para indicar que o gravador deve assumir que o nome da propriedade recebeu o devido escape e ignorar a etapa de escape; caso contrário, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-579"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="59da3-580">Este é um parâmetro opcional. Seu valor padrão é <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-580">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="59da3-581">Grava o nome da propriedade e o valor de <see cref="T:System.Guid" /> (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-581">Writes the property name and <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="59da3-582">Grava o <see cref="T:System.Guid" /> usando o padrão <see cref="T:System.Buffers.StandardFormat" /> (ou seja, tinha '), como o formulário: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span><span class="sxs-lookup"><span data-stu-id="59da3-582">Writes the <see cref="T:System.Guid" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-583"><paramref name="propertyName" /> é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-583"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-584">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-584">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, ReadOnlySpan&lt;byte&gt; utf8Value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, utf8Value As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, utf8Value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="59da3-585">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="59da3-585">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="59da3-586">O valor codificado em UTF-8 a ser gravado como uma cadeia de caracteres JSON como parte do par nome/valor.</span><span class="sxs-lookup"><span data-stu-id="59da3-586">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-587">Se estiver definido como false, o gravador assumirá que o nome da propriedade recebeu o devido escape e ignorará a etapa de escape.</span><span class="sxs-lookup"><span data-stu-id="59da3-587">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="59da3-588">O valor sempre recebe um escape</span><span class="sxs-lookup"><span data-stu-id="59da3-588">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="59da3-589">Grava o nome da propriedade e o valor de texto UTF-8 (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-589">Writes the property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-590">Gerado quando o nome da propriedade ou o valor especificado é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-590">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-591">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-591">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, ReadOnlySpan&lt;char&gt; value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="59da3-592">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="59da3-592">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="59da3-593">O valor codificado em UTF-16 a ser gravado como uma cadeia de caracteres JSON transcodificada em codificado em UTF-8 como parte do par nome/valor.</span><span class="sxs-lookup"><span data-stu-id="59da3-593">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-594">Se estiver definido como false, o gravador assumirá que o nome da propriedade recebeu o devido escape e ignorará a etapa de escape.</span><span class="sxs-lookup"><span data-stu-id="59da3-594">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="59da3-595">O valor sempre recebe um escape</span><span class="sxs-lookup"><span data-stu-id="59da3-595">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="59da3-596">Grava o nome da propriedade e o valor de texto UTF-16 (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-596">Writes the property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-597">Gerado quando o nome da propriedade ou o valor especificado é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-597">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-598">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-598">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, string value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, string value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * string * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="59da3-599">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="59da3-599">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="59da3-600">O valor codificado em UTF-16 a ser gravado como uma cadeia de caracteres JSON transcodificada em codificado em UTF-8 como parte do par nome/valor.</span><span class="sxs-lookup"><span data-stu-id="59da3-600">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-601">Se estiver definido como false, o gravador assumirá que o nome da propriedade recebeu o devido escape e ignorará a etapa de escape.</span><span class="sxs-lookup"><span data-stu-id="59da3-601">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="59da3-602">O valor sempre recebe um escape</span><span class="sxs-lookup"><span data-stu-id="59da3-602">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="59da3-603">Grava o nome da propriedade e o valor de texto de cadeia de caracteres (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-603">Writes the property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-604">Gerado quando o nome da propriedade ou o valor especificado é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-604">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-605">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-605">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : DateTime -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="59da3-606">O valor a ser gravado como uma cadeia de caracteres JSON como um elemento de uma matriz JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-606">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="59da3-607">Grava o valor de <see cref="T:System.DateTime" /> (como uma cadeia de caracteres JSON) como um elemento de uma matriz JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-607">Writes the <see cref="T:System.DateTime" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="59da3-608">Grava o <see cref="T:System.DateTime" /> usando a ida e volta (' L') <see cref="T:System.Buffers.StandardFormat" /> .</span><span class="sxs-lookup"><span data-stu-id="59da3-608">Writes the <see cref="T:System.DateTime" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="59da3-609">Por exemplo, 2017-06-12T05:30:45.7680000.</span><span class="sxs-lookup"><span data-stu-id="59da3-609">For example, 2017-06-12T05:30:45.7680000.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-610">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-610">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="59da3-611">O valor a ser gravado como uma cadeia de caracteres JSON como um elemento de uma matriz JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-611">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="59da3-612">Grava o valor de <see cref="T:System.DateTimeOffset" /> (como uma cadeia de caracteres JSON) como um elemento de uma matriz JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-612">Writes the <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="59da3-613">Grava o <see cref="T:System.DateTimeOffset" /> usando a ida e volta (' L') <see cref="T:System.Buffers.StandardFormat" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-613">Writes the <see cref="T:System.DateTimeOffset" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" />.</span></span> <span data-ttu-id="59da3-614">Por exemplo, 2017-06-12T05:30:45.7680000-07:00.</span><span class="sxs-lookup"><span data-stu-id="59da3-614">For example, 2017-06-12T05:30:45.7680000-07:00.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-615">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-615">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : Guid -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="59da3-616">O valor a ser gravado como uma cadeia de caracteres JSON como um elemento de uma matriz JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-616">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="59da3-617">Grava o valor de <see cref="T:System.Guid" /> (como uma cadeia de caracteres JSON) como um elemento de uma matriz JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-617">Writes the <see cref="T:System.Guid" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="59da3-618">Grava o <see cref="T:System.Guid" /> usando o padrão <see cref="T:System.Buffers.StandardFormat" /> (ou seja, tinha '), como o formulário: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span><span class="sxs-lookup"><span data-stu-id="59da3-618">Writes the <see cref="T:System.Guid" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-619">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-619">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (ReadOnlySpan&lt;byte&gt; utf8Value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (utf8Value As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStringValue (utf8Value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8Value"><span data-ttu-id="59da3-620">O valor codificado em UTF-8 a ser gravado como um elemento de cadeia de caracteres JSON de uma matriz JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-620">The UTF-8 encoded value to be written as a JSON string element of a JSON array.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-621"><see langword="false" /> para indicar que o gravador deve assumir que o nome da propriedade recebeu o devido escape e ignorar a etapa de escape; caso contrário, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-621"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="59da3-622">Este é um parâmetro opcional e seu valor padrão é <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-622">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="59da3-623">Grava o valor de texto UTF-8 (como uma cadeia de caracteres JSON) como um elemento de uma matriz JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-623">Writes the UTF-8 text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-624"><paramref name="utf8Value" /> é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-624"><paramref name="utf8Value" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-625">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-625">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (ReadOnlySpan&lt;char&gt; value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.ReadOnlySpan`1&lt;char&gt; value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStringValue (value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="59da3-626">O valor codificado em UTF-16 a ser gravado como um elemento de cadeia de caracteres JSON transcodificado em UTF-8 de uma matriz JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-626">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-627"><see langword="false" /> para indicar que o gravador deve assumir que o nome da propriedade recebeu o devido escape e ignorar a etapa de escape; caso contrário, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-627"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="59da3-628">Este é um parâmetro opcional e seu valor padrão é <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-628">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="59da3-629">Grava o valor de texto UTF-16 (como uma cadeia de caracteres JSON) como um elemento de uma matriz JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-629">Writes the UTF-16 text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-630"><paramref name="value" /> é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-630"><paramref name="value" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-631">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-631">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (string value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(string value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteStringValue (value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="59da3-632">O valor codificado em UTF-16 a ser gravado como um elemento de cadeia de caracteres JSON transcodificado em UTF-8 de uma matriz JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-632">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.</span></span></param>
        <param name="escape"><span data-ttu-id="59da3-633"><see langword="false" /> para indicar que o gravador deve assumir que o nome da propriedade recebeu o devido escape e ignorar a etapa de escape; caso contrário, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-633"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="59da3-634">Este é um parâmetro opcional e seu valor padrão é <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="59da3-634">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="59da3-635">Grava o valor de texto de cadeia de caracteres (como uma cadeia de caracteres JSON) como um elemento de uma matriz JSON.</span><span class="sxs-lookup"><span data-stu-id="59da3-635">Writes the string text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59da3-636"><paramref name="value" /> é muito grande.</span><span class="sxs-lookup"><span data-stu-id="59da3-636"><paramref name="value" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59da3-637">Os dados JSON a serem gravados seriam um JSON inválido (embora a validação esteja habilitada).</span><span class="sxs-lookup"><span data-stu-id="59da3-637">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
