<Type Name="JsonWriterOptions" FullName="System.Text.Json.JsonWriterOptions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="604c56611ba309e0717259c0da05485dda26d67c" /><Meta Name="ms.sourcegitcommit" Value="e28b7b371ead27d99e20387b8243f09b0cdb9fb3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="04/12/2019" /><Meta Name="ms.locfileid" Value="59541691" /></Metadata><TypeSignature Language="C#" Value="public struct JsonWriterOptions" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit JsonWriterOptions extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.JsonWriterOptions" />
  <TypeSignature Language="VB.NET" Value="Public Structure JsonWriterOptions" />
  <TypeSignature Language="C++ CLI" Value="public value class JsonWriterOptions" />
  <TypeSignature Language="F#" Value="type JsonWriterOptions = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Permite que o usuário defina o comportamento personalizado ao gravar JSON usando o <see cref="T:System.Text.Json.Utf8JsonWriter" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

Por padrão, o JSON é gravado sem nenhum recuo ou espaço em branco extra. Além disso, <xref:System.Text.Json.Utf8JsonWriter> lança uma exceção se o usuário tenta gravar JSON estruturalmente inválido.

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Indented">
      <MemberSignature Language="C#" Value="public bool Indented { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Indented" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonWriterOptions.Indented" />
      <MemberSignature Language="VB.NET" Value="Public Property Indented As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Indented { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Indented : bool with get, set" Usage="System.Text.Json.JsonWriterOptions.Indented" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define um valor que indica se o <see cref="T:System.Text.Json.Utf8JsonWriter" /> deve formatar a saída JSON, o que inclui o recuo dos tokens JSON aninhados, a adição de novas linhas e a adição de espaço em branco entre os nomes e valores de propriedade.</summary>
        <value><see langword="true" /> Para formatar o JSON de saída; <see langword="false" /> escrever sem qualquer espaço em branco extra. O padrão é <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SkipValidation">
      <MemberSignature Language="C#" Value="public bool SkipValidation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SkipValidation" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonWriterOptions.SkipValidation" />
      <MemberSignature Language="VB.NET" Value="Public Property SkipValidation As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SkipValidation { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SkipValidation : bool with get, set" Usage="System.Text.Json.JsonWriterOptions.SkipValidation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define um valor que indica se o <see cref="T:System.Text.Json.Utf8JsonWriter" /> deve ignorar a validação estrutural e permitir que o usuário grave um JSON inválido.</summary>
        <value><see langword="true" /> para ignorar a validação estrutural e permitir que a JSON inválido; <see langword="false" /> para lançar um <see cref="T:System.InvalidOperationException" /> em qualquer tentativa de gravar JSON inválido.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

Se o JSON que está sendo gravado for conhecido por estar correta, ignorando a validação (definindo essa propriedade como `true`) podem melhorar o desempenho.
Um exemplo de JSON inválido em que o gravador irá acionar (quando `SkipValidation` é definido como `false`) é quando você escreve um valor dentro de um objeto JSON sem um nome de propriedade. 

 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>