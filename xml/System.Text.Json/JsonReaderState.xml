<Type Name="JsonReaderState" FullName="System.Text.Json.JsonReaderState">
  <Metadata><Meta Name="ms.openlocfilehash" Value="134658575824ec7ab34ef310d545b4b8914b9306" /><Meta Name="ms.sourcegitcommit" Value="ef1f0c8985003a14413f66c3de381b8f3b6e4436" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="05/30/2019" /><Meta Name="ms.locfileid" Value="66380639" /></Metadata><TypeSignature Language="C#" Value="public struct JsonReaderState" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit JsonReaderState extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.JsonReaderState" />
  <TypeSignature Language="VB.NET" Value="Public Structure JsonReaderState" />
  <TypeSignature Language="C++ CLI" Value="public value class JsonReaderState" />
  <TypeSignature Language="F#" Value="type JsonReaderState = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Define um tipo opaco que mantém e salva todas as informações de estado relevantes, que precisam ser fornecidas ao <see cref="T:System.Text.Json.Utf8JsonReader" /> para continuar a leitura após o processamento de dados incompletos.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

`JsonReaderState` é necessário para dar suporte a reentrância ao ler dados incompletos e quando há mais dados disponíveis, continue lendo. Ao contrário do <xref:System.Text.Json.Utf8JsonReader> struct, que é uma struct de referência, esse tipo pode sobreviver entre limites de async/await e, portanto, é necessário para fornecer suporte para ler mais dados de forma assíncrona antes de continuar com uma nova instância do <xref:System.Text.Json.Utf8JsonReader>.

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JsonReaderState (System.Text.Json.JsonReaderOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Text.Json.JsonReaderOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonReaderState.#ctor(System.Text.Json.JsonReaderOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (Optional options As JsonReaderOptions = null)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.JsonReaderState : System.Text.Json.JsonReaderOptions -&gt; System.Text.Json.JsonReaderState" Usage="new System.Text.Json.JsonReaderState options" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="options" Type="System.Text.Json.JsonReaderOptions" />
      </Parameters>
      <Docs>
        <param name="options">Define o comportamento personalizado do <see cref="T:System.Text.Json.Utf8JsonReader" /> que é diferente do RFC do JSON (por exemplo, como manipular comentários ou a profundidade máxima permitida durante a leitura). Por padrão, o <see cref="T:System.Text.Json.Utf8JsonReader" /> segue estritamente o RFC do JSON (os comentários no JSON são inválidos) e lê até uma profundidade máxima de 64.</param>
        <summary>Constrói uma nova instância de <see cref="T:System.Text.Json.JsonReaderState" />.</summary>
        <remarks>
          <format><![CDATA[
          
Uma instância deste estado deve ser passada para o <xref:System.Text.Json.Utf8JsonReader> construtor com os dados JSON. Ao contrário do <xref:System.Text.Json.Utf8JsonReader>, que é uma struct de referência, o estado pode sobreviver entre limites de async/await e, portanto, esse tipo é necessário para dar suporte à leitura em mais dados assincronamente antes de continuar com uma nova instância do <xref:System.Text.Json.Utf8JsonReader>.
            
            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">A profundidade máxima é definida como um valor não positivo (&lt; 0).</exception>
      </Docs>
    </Member>
    <Member MemberName="BytesConsumed">
      <MemberSignature Language="C#" Value="public long BytesConsumed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 BytesConsumed" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonReaderState.BytesConsumed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesConsumed As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long BytesConsumed { long get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesConsumed : int64" Usage="System.Text.Json.JsonReaderState.BytesConsumed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o número total de bytes consumidos pelo <see cref="T:System.Text.Json.Utf8JsonReader" /> até o momento para o determinado texto de entrada codificado em UTF-8.</summary>
        <value>O número total de bytes consumidos pelo <see cref="T:System.Text.Json.Utf8JsonReader" /> até o momento.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonReaderOptions Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.Json.JsonReaderOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonReaderState.Options" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Options As JsonReaderOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonReaderOptions Options { System::Text::Json::JsonReaderOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.Text.Json.JsonReaderOptions" Usage="System.Text.Json.JsonReaderState.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonReaderOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o comportamento personalizado a ser usado ao ler dados JSON usando o struct <see cref="T:System.Text.Json.Utf8JsonReader" />, que pode desviar da especificação de JSON estrita, que é o comportamento padrão.</summary>
        <value>O comportamento personalizado a ser usado ao ler dados JSON.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public SequencePosition Position { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.SequencePosition Position" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonReaderState.Position" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Position As SequencePosition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property SequencePosition Position { SequencePosition get(); };" />
      <MemberSignature Language="F#" Value="member this.Position : SequencePosition" Usage="System.Text.Json.JsonReaderState.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.SequencePosition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém a <see cref="T:System.SequencePosition" /> atual dentro do ReadOnlySequence&lt;byte&gt; de entrada codificado em UTF-8 fornecido. Se o struct <see cref="T:System.Text.Json.Utf8JsonReader" /> for construído com um ReadOnlySpan&lt;byte&gt;, essa opção sempre retornará uma <see cref="T:System.SequencePosition" /> padrão.</summary>
        <value>O atual <see cref="T:System.SequencePosition" /> dentro de fornecido codificado UTF-8 de entrada ReadOnlySequence&lt;bytes&gt;.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>