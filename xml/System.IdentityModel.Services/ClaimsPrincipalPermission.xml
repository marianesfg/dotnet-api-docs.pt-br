<Type Name="ClaimsPrincipalPermission" FullName="System.IdentityModel.Services.ClaimsPrincipalPermission">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="dcac3f06155284f05d1a9975094ead1ced45fd01" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39983457" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ClaimsPrincipalPermission : System.Security.IPermission, System.Security.ISecurityEncodable, System.Security.Permissions.IUnrestrictedPermission" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit ClaimsPrincipalPermission extends System.Object implements class System.Security.IPermission, class System.Security.ISecurityEncodable, class System.Security.Permissions.IUnrestrictedPermission" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ClaimsPrincipalPermission&#xA;Implements IPermission, ISecurityEncodable, IUnrestrictedPermission" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClaimsPrincipalPermission sealed : System::Security::IPermission, System::Security::ISecurityEncodable, System::Security::Permissions::IUnrestrictedPermission" />
  <TypeSignature Language="F#" Value="type ClaimsPrincipalPermission = class&#xA;    interface IPermission&#xA;    interface ISecurityEncodable&#xA;    interface IUnrestrictedPermission" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel.Services</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Security.IPermission</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Security.ISecurityEncodable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Security.Permissions.IUnrestrictedPermission</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Representa uma permissão que usa uma implementação <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" /> para determinar se o acesso a um recurso deve ser concedido à entidade de segurança ativa. Essa classe não pode ser herdada.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> classe fornece a capacidade de executar verificações de acesso obrigatório, usando o <xref:System.Security.Claims.ClaimsAuthorizationManager> que está configurado para um aplicativo. Invocando o <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> método ou estático <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A> método, você pode fornecer proteção para os recursos a partir do caminho de execução do seu código de acordo com a política de autorização definida para o Gerenciador de autenticação de declarações. Verificações de acesso declarativo podem ser executadas usando o <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> classe.  
  
> [!IMPORTANT]
>  O <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> classe usa o Gerenciador de autorização de declarações configurado pelo <xref:System.IdentityModel.Configuration.IdentityConfiguration> que é definido no <xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration%2A?displayProperty=nameWithType> propriedade. Isso é verdadeiro em todos os casos, mesmo em cenários em que o WS-Federation não é usado; Por exemplo, aplicativos ativos da Web (WCF) e aplicativos de Console. Você pode especificar o Gerenciador de autorização de declarações na configuração ou programaticamente. Para especificar o Gerenciador de autorização de declarações em um arquivo de configuração, defina as [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md) sob o elemento um [ &lt;identityConfiguration&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/identityconfiguration.md) elemento e certifique-se de que essa configuração de identidade é referenciada pela [ &lt;federationConfiguration&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/federationconfiguration.md) elemento que é carregado pelo tempo de execução (por exemplo, por Definindo o `identityConfigurationName` atributo). Para definir o Gerenciador de autorização de declarações por meio de programação, forneça um manipulador para o <xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfigurationCreated?displayProperty=nameWithType> eventos.  
  
 Em um único nível, a funcionalidade fornecida pelo <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> é semelhante para as verificações de acesso baseado em função (RBAC) fornecidas por meio de <xref:System.Security.Permissions.PrincipalPermission> classe; no entanto, o <xref:System.Security.Claims.ClaimsAuthorizationManager> classe executa verificações com base em reivindicações apresentadas pela entidade de segurança do Active Directory. Isso permite muito mais granularidade do que está disponível por meio de RBAC puro, onde muitas permissões normalmente são coletadas em uma única função. Talvez, o mais importante, a autorização baseada em declarações permite melhor separação de política de autorização e lógica de negócios porque a permissão pode ser solicitada para uma ação específica em um recurso no código e a política de back-end pode ser usada para configurar quais declarações o Apresentando a entidade deve ter para satisfazer a demanda. Como o RBAC, <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> executa uma verificação de acesso baseado em usuário, ou seja, ao contrário de segurança de acesso do código implementada pelas classes que derivam o <xref:System.Security.CodeAccessPermission> de classe e usar uma movimentação de pilha para garantir que todos os chamadores do código receberam uma permissão <xref:System.IdentityModel.Services.ClaimsPrincipalPermission>executa sua verificação apenas na entidade de segurança atual.  
  
 Estático <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A> método verifica o acesso a uma ação especificada em um recurso especificado. O recurso e a ação são ambas as cadeias de caracteres e normalmente são URIs. Você também pode inicializar uma instância do <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> com uma ação e um recurso e chame o <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> método. Embora o construtor aceita apenas um único recurso e uma ação, <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> objetos podem ser combinados por meio de <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A> e <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A> métodos. Uma permissão criada usando esses métodos pode conter vários pares de ação de recurso.  
  
 Ambos os métodos determinam o acesso ao invocar o <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType> método do Gerenciador de autorização de declarações configurado com um <xref:System.Security.Claims.AuthorizationContext> composta da entidade de segurança do Active Directory (<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType>), o recurso e a ação. Elas geram um <xref:System.Security.SecurityException> se a entidade de segurança atual não está autorizada a executar a ação no recurso; caso contrário, execução procede.  
  
 No caso de uma <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> que contém vários pares de ação de recurso, o <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType> método é invocado para cada um dos pares de ação de recurso contidos na permissão.  Para a chamada a <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> para ter êxito, a entidade de segurança do Active Directory deve ser autorizada para todos os pares de ação de recurso contidos na permissão.  
  
   
  
## Examples  
 O exemplo a seguir mostra como proteger um recurso usando o <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> método, o <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A> método, ou um <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> declaração. Em cada caso, configurado <xref:System.Security.Claims.ClaimsAuthorizationManager> é invocado para avaliar a entidade de segurança contra o recurso especificado e a ação atual. Se a entidade de segurança atual não está autorizada para a ação especificada no recurso especificado, um <xref:System.Security.SecurityException> for lançada; caso contrário, a execução continua.  
  
 [!code-csharp[WifCppWithCam#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifcppwithcam/cs/wifcppwithcam/program.cs#1)]  
  
 O XML a seguir mostra a configuração mínima necessária para usar uma autorização de declarações personalizadas manager com o <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> classe. Você deve, no mínimo, declarar ambos as `system.identityModel` e o `system.identityModel.services` seções na `<configSection>` elemento e, em seguida, especifique o Gerenciador de autorização em um [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md)elemento sob a configuração de identidade padrão. Isso garantirá que o Gerenciador de autorização é referenciado da configuração de Federação do padrão. Como alternativa, você pode especificar o nome da configuração de identidade sob a qual o Gerenciador de autorização é especificado na `identityConfigurationName` atributo o [ &lt;federationConfiguration&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/federationconfiguration.md) elemento.  
  
```xml  
<?xml version="1.0" encoding="utf-8" ?>  
<configuration>  
  <configSections>  
    <!-- WIF configuration sections -->  
    <section name="system.identityModel" type="System.IdentityModel.Configuration.SystemIdentityModelSection, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
    <section name="system.identityModel.services" type="System.IdentityModel.Services.Configuration.SystemIdentityModelServicesSection, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
  </configSections>  
  
  <startup>  
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5" />  
  </startup>  
  
  <system.identityModel>  
    <identityConfiguration>  
      <claimsAuthorizationManager type ="MyClaimsAuthorizationManager.MyClaimsAuthorizationManager, MyClaimsAuthorizationManager"/>  
    </identityConfiguration>  
  </system.identityModel>  
  
</configuration>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute" />
    <altmember cref="P:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration" />
    <altmember cref="T:System.Security.Claims.ClaimsAuthorizationManager" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClaimsPrincipalPermission (string resource, string action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string resource, string action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (resource As String, action As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ClaimsPrincipalPermission(System::String ^ resource, System::String ^ action);" />
      <MemberSignature Language="F#" Value="new System.IdentityModel.Services.ClaimsPrincipalPermission : string * string -&gt; System.IdentityModel.Services.ClaimsPrincipalPermission" Usage="new System.IdentityModel.Services.ClaimsPrincipalPermission (resource, action)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="resource" Type="System.String" />
        <Parameter Name="action" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resource">O recurso no qual a entidade de segurança deve ser autorizada.</param>
        <param name="action">A ação para a qual a entidade de segurança deve ser autorizada.</param>
        <summary>Cria uma nova instância da classe <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> objeto é inicializado com o par de ação de recurso especificado. Você pode chamar o <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> método para executar uma verificação de acesso.  
  
 Embora o construtor aceita apenas um único recurso e uma ação, <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> objetos podem ser combinados por meio de <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A> e <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A> métodos. A permissão criada por meio desses métodos pode conter vários pares de ação de recurso.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="resource" /> é <see langword="null" /> ou é uma cadeia de caracteres vazia.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="action" /> é <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public static void CheckAccess (string resource, string action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CheckAccess(string resource, string action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CheckAccess (resource As String, action As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CheckAccess(System::String ^ resource, System::String ^ action);" />
      <MemberSignature Language="F#" Value="static member CheckAccess : string * string -&gt; unit" Usage="System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess (resource, action)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2103:ReviewImperativeSecurity", Justification="It is expected that the runtime’s behavior would rely on changing data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resource" Type="System.String" />
        <Parameter Name="action" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resource">O recurso no qual a entidade de segurança deve ser autorizada.</param>
        <param name="action">A ação para a qual a entidade de segurança deve ser autorizada.</param>
        <summary>Verifica se a entidade de segurança atual está autorizada a executar a ação especificada no recurso especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A entidade de segurança deve ser autorizada para a ação especificada no recurso especificado ou o <xref:System.Security.SecurityException> exceção é lançada.  
  
 O <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType> método do Gerenciador de autorização de declarações configurado é invocado com um <xref:System.Security.Claims.AuthorizationContext> composta da entidade de segurança do Active Directory (<xref:System.Threading.Thread.CurrentPrincipal%2A>), o recurso e a ação.  
  
   
  
## Examples  
 O exemplo a seguir mostra como proteger um recurso usando o <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A> método. O Gerenciador de autorização de declarações configurado é chamado para avaliar a entidade de segurança contra o recurso especificado e a ação atual. Se a entidade de segurança atual não está autorizada para a ação especificada no recurso especificado, um <xref:System.Security.SecurityException> for lançada; caso contrário, a execução continua.  
  
 [!code-csharp[WifCppWithCam#2](~/samples/snippets/csharp/VS_Snippets_Misc/wifcppwithcam/cs/wifcppwithcam/program.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">A entidade de segurança atual não é atribuível de <see cref="T:System.Security.Claims.ClaimsPrincipal" />.  – ou –  Não há nenhum <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" /> configurado.</exception>
        <exception cref="T:System.Security.SecurityException">Falha na verificação de autorização.</exception>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public System.Security.IPermission Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Function Copy () As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::IPermission ^ Copy();" />
      <MemberSignature Language="F#" Value="abstract member Copy : unit -&gt; System.Security.IPermission&#xA;override this.Copy : unit -&gt; System.Security.IPermission" Usage="claimsPrincipalPermission.Copy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2103:ReviewImperativeSecurity", Justification="It is expected that the runtime’s behavior would rely on changing data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retorna uma cópia da instância <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> atual.</summary>
        <returns>Um <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> copiado da instância atual.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Demand">
      <MemberSignature Language="C#" Value="public void Demand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Demand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand" />
      <MemberSignature Language="VB.NET" Value="Public Sub Demand ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Demand();" />
      <MemberSignature Language="F#" Value="abstract member Demand : unit -&gt; unit&#xA;override this.Demand : unit -&gt; unit" Usage="claimsPrincipalPermission.Demand " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Verifica se a entidade atual tem autorização para os pares de ação de recurso associados à instância atual.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A entidade atual deve estar autorizada para todos os pares de ação de recurso associados a essa instância ou o <xref:System.Security.SecurityException> exceção é lançada.  
  
 Embora o construtor aceita apenas um único recurso e uma ação, <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> objetos podem ser combinados por meio de <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A> e <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A> métodos. A permissão criada por meio desses métodos pode conter vários pares de ação de recurso.  
  
 O <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> método invoca o <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType> método do Gerenciador de autorização de declarações configurado com um <xref:System.Security.Claims.AuthorizationContext> composta da entidade de segurança do Active Directory (<xref:System.Threading.Thread.CurrentPrincipal%2A>), o recurso e a ação para cada um dos pares de ação de recurso contidos a permissão. Para o <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> tenha êxito ativo principal deve ser autorizado para todos os pares de ação de recurso que estão contidos na permissão.  
  
   
  
## Examples  
 O exemplo a seguir mostra como proteger um recurso usando o <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> método. O Gerenciador de autorização de declarações configurado é chamado para avaliar a entidade de segurança contra o recurso especificado e a ação atual. Se a entidade de segurança atual não está autorizada para a ação especificada no recurso especificado, um <xref:System.Security.SecurityException> for lançada; caso contrário, a execução continua.  
  
 [!code-csharp[WifCppWithCam#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifcppwithcam/cs/wifcppwithcam/program.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">A entidade de segurança atual não é atribuível de <see cref="T:System.Security.Claims.ClaimsPrincipal" />.  – ou –  Não há nenhum <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" /> configurado.</exception>
        <exception cref="T:System.Security.SecurityException">Falha na verificação de autorização.</exception>
      </Docs>
    </Member>
    <Member MemberName="FromXml">
      <MemberSignature Language="C#" Value="public void FromXml (System.Security.SecurityElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FromXml(class System.Security.SecurityElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.FromXml(System.Security.SecurityElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FromXml (element As SecurityElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void FromXml(System::Security::SecurityElement ^ element);" />
      <MemberSignature Language="F#" Value="abstract member FromXml : System.Security.SecurityElement -&gt; unit&#xA;override this.FromXml : System.Security.SecurityElement -&gt; unit" Usage="claimsPrincipalPermission.FromXml element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Security.SecurityElement" />
      </Parameters>
      <Docs>
        <param name="element">A codificação de XML a usar para reconstruir a permissão.</param>
        <summary>Reconstrói a permissão atual e seu estado com base na codificação de XML especificada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Reconstrói uma permissão de codificação de XML criado por uma chamada para o <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.ToXml%2A> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> é <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">A codificação contém atributos ou elementos não reconhecidos ou XML formado incorretamente.</exception>
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public System.Security.IPermission Intersect (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Intersect(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Function Intersect (target As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::IPermission ^ Intersect(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="abstract member Intersect : System.Security.IPermission -&gt; System.Security.IPermission&#xA;override this.Intersect : System.Security.IPermission -&gt; System.Security.IPermission" Usage="claimsPrincipalPermission.Intersect target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">A permissão a interseccionar com a permissão atual. Ele deve ser uma instância de <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />.</param>
        <summary>Retorna uma permissão que é a interseção da permissão atual e da permissão especificada.</summary>
        <returns>Uma nova <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> que representa a interseção da permissão atual e da permissão especificada ou então <see langword="null" />, se <paramref name="target" /> é <paramref name="null" /> ou não é uma instância de <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A permissão que é retornada tem apenas os pares de ação de recursos que estavam presentes na permissão atual e na permissão especificada. Pares de ação de recursos que existiam em apenas um ou outro as permissões não são incluídos. Para um <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> para ter êxito na nova permissão, a entidade atual só precisa ser autorizados para os pares de ação de recurso que eram comuns para a permissão atual e a permissão especificada.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSubsetOf">
      <MemberSignature Language="C#" Value="public bool IsSubsetOf (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSubsetOf(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.IsSubsetOf(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsSubsetOf (target As IPermission) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSubsetOf(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="abstract member IsSubsetOf : System.Security.IPermission -&gt; bool&#xA;override this.IsSubsetOf : System.Security.IPermission -&gt; bool" Usage="claimsPrincipalPermission.IsSubsetOf target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">A permissão a ser testada para a relação de subconjunto. Ele deve ser uma instância de <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />.</param>
        <summary>Retorna um valor que indica se a permissão atual é um subconjunto da permissão especificada.</summary>
        <returns>
          <see langword="true" /> se a permissão atual for um subconjunto da permissão especificada; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A permissão atual é um subconjunto da permissão especificada se todos os pares de ação de recursos contidos na permissão atual também estão presentes na permissão especificada. Se `target` está `null` ou não é uma instância do <xref:System.IdentityModel.Services.ClaimsPrincipalPermission>, o <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.IsSubsetOf%2A> retorna `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnrestricted">
      <MemberSignature Language="C#" Value="public bool IsUnrestricted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsUnrestricted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.IsUnrestricted" />
      <MemberSignature Language="VB.NET" Value="Public Function IsUnrestricted () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsUnrestricted();" />
      <MemberSignature Language="F#" Value="abstract member IsUnrestricted : unit -&gt; bool&#xA;override this.IsUnrestricted : unit -&gt; bool" Usage="claimsPrincipalPermission.IsUnrestricted " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retorna um valor que indica se a permissão é irrestrita.</summary>
        <returns>
          <see langword="true" /> se a permissão é irrestrita; caso contrário, <see langword="false" />. Sempre retorna <see langword="true" /> indicando que a permissão é irrestrita.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToXml">
      <MemberSignature Language="C#" Value="public System.Security.SecurityElement ToXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.SecurityElement ToXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.ToXml" />
      <MemberSignature Language="VB.NET" Value="Public Function ToXml () As SecurityElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::SecurityElement ^ ToXml();" />
      <MemberSignature Language="F#" Value="abstract member ToXml : unit -&gt; System.Security.SecurityElement&#xA;override this.ToXml : unit -&gt; System.Security.SecurityElement" Usage="claimsPrincipalPermission.ToXml " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.SecurityElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retorna a forma codificada em XML da permissão atual e do respectivo estado.</summary>
        <returns>A forma codificada em XML da permissão atual e do respectivo estado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A entidade de segurança pode ser reconstruída com sua forma XML codificada chamando o <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.FromXml%2A> método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public System.Security.IPermission Union (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Union(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Union(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Function Union (target As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::IPermission ^ Union(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="abstract member Union : System.Security.IPermission -&gt; System.Security.IPermission&#xA;override this.Union : System.Security.IPermission -&gt; System.Security.IPermission" Usage="claimsPrincipalPermission.Union target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">A permissão a ser combinada com a permissão atual. Ela deve ser do tipo <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />.</param>
        <summary>Retorna uma nova permissão que é a união da permissão atual e da permissão especificada. O objeto <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> que tem todos os pares de ação de recurso que estão presentes na instância atual e na instância de destino.</summary>
        <returns>Uma nova <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> que representa a união da permissão atual e da permissão especificada ou então <see langword="null" />, se <paramref name="target" /> é <paramref name="null" /> ou não é uma instância de <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A permissão que é retornada tem todos os pares de ação de recurso que estão presentes na permissão atual e todos os pares de ação de recurso são apresentam a permissão especificada. Para um <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> para ter êxito na nova permissão, a entidade atual deve ter autorização para todos os pares de ação de recursos que existiam na permissão atual e todos os pares de ação de recursos que existiam na permissão especificada.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>