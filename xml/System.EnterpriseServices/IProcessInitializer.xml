<Type Name="IProcessInitializer" FullName="System.EnterpriseServices.IProcessInitializer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="65909f2ec439d52a6e219ae1ac7909475679abd1" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36563519" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IProcessInitializer" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IProcessInitializer" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.IProcessInitializer" />
  <TypeSignature Language="VB.NET" Value="Public Interface IProcessInitializer" />
  <TypeSignature Language="C++ CLI" Value="public interface class IProcessInitializer" />
  <TypeSignature Language="F#" Value="type IProcessInitializer = interface" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("1113f52d-dc7f-4943-aed6-88d04027e32a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Dá suporte a métodos que podem ser chamados quando um componente COM é inicializado ou desligado.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementar o <xref:System.EnterpriseServices.IProcessInitializer> métodos de interface em componentes de serviço se você deseja executar a inicialização ou código de desligamento quando um processo do servidor (Dllhost.exe) é iniciado ou desligado, respectivamente.  
  
 COM+ fornece `Startup` e `Shutdown` eventos quando Dllhost.exe inicia e termina. Esse recurso permite que os componentes COM+ que estão instalados em um aplicativo COM+ para servidor (conhecido como componentes de servidor daqui em diante) para executar a inicialização personalizada e limpar o código. Uma instância de cada componente que implementa o <xref:System.EnterpriseServices.IProcessInitializer> será criada e armazenada para a duração do processo e chamada sobre os métodos de interface durante a inicialização e desligamento interface. Quando implementada em uma <xref:System.EnterpriseServices.ServicedComponent>, durante o registro do componente, o `InitializesServerApplication` parâmetro o `COMAdminCatalogObject` dentro dos componentes coleção é definida como `true`.  
  
 Usando o `Startup` e `Shutdown` eventos, você pode inicializar os recursos, criar conexões, inicializar dados compartilhados e executar o código de limpeza. No entanto, você não deve acessar estados que são específicos para COM+ como instâncias de componentes de servidor ainda não foi criadas. Além disso, o código de `Startup` e `Shutdown` eventos devem retornar assim que possível, porque o sistema aguarda somente 90 segundos para Dllhost.exe para se preparar para aceitar as ativações depois que o sistema é iniciado o processo. Se Dllhost.exe não indica que ele está pronto dentro de 90 segundos, o sistema termina o processo. Assim, todas as inicializações precisa ser concluída dentro deste quadro de tempo de processamento. Cada componente do servidor que participa de inicialização deve oferecer suporte a <xref:System.EnterpriseServices.IProcessInitializer> interface. Na inicialização de DllHost.exe COM+ cria todos os componentes de servidor que solicitou esse serviço, chamadas `QueryInterface` para o <xref:System.EnterpriseServices.IProcessInitializer> interface e chama o <xref:System.EnterpriseServices.IProcessInitializer.Startup%2A> função. Da mesma forma, quando o processo DllHost.exe está desligado, ele chama o <xref:System.EnterpriseServices.IProcessInitializer.Shutdown%2A> função naqueles armazenados anteriormente ponteiros de interface.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Shutdown">
      <MemberSignature Language="C#" Value="public void Shutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Shutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IProcessInitializer.Shutdown" />
      <MemberSignature Language="VB.NET" Value="Public Sub Shutdown ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Shutdown();" />
      <MemberSignature Language="F#" Value="abstract member Shutdown : unit -&gt; unit" Usage="iProcessInitializer.Shutdown " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Executa ações de desligamento. Chamado quando o Dllhost.exe é desligado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.EnterpriseServices.IProcessInitializer.Shutdown%2A> não é chamado durante um failfast ou outros eventos de desligamento catastrófico.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Startup">
      <MemberSignature Language="C#" Value="public void Startup (object punkProcessControl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Startup([in]object punkProcessControl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IProcessInitializer.Startup(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Startup (punkProcessControl As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Startup(System::Object ^ punkProcessControl);" />
      <MemberSignature Language="F#" Value="abstract member Startup : obj -&gt; unit" Usage="iProcessInitializer.Startup punkProcessControl" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="punkProcessControl" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="punkProcessControl">No Microsoft Windows XP, um ponteiro para a interface <see langword="IUnknown" /> do componente COM que está sendo inicializado. No Microsoft Windows 2000, este argumento é sempre <see langword="null" />.</param>
        <summary>Executa a inicialização no startup. Chamado quando Dllhost.exe é iniciado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O objeto referenciado por `punkProcessControl` implementa um <xref:System.EnterpriseServices.IProcessInitControl> interface. <xref:System.EnterpriseServices.IProcessInitControl> suporta o único método <xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A>.  
  
 O código de inicialização em <xref:System.EnterpriseServices.IProcessInitializer.Startup%2A> pode chamar o <xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A>, com o tempo limite definido igual ao número de segundos restantes antes da inicialização do componente expirar.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>