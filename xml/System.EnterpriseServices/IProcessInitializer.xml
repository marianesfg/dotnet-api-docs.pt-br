<Type Name="IProcessInitializer" FullName="System.EnterpriseServices.IProcessInitializer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2fe7f2a4c51aba324e77e12a262dc45f872455c0" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55336705" /></Metadata><TypeSignature Language="C#" Value="public interface IProcessInitializer" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IProcessInitializer" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.IProcessInitializer" />
  <TypeSignature Language="VB.NET" Value="Public Interface IProcessInitializer" />
  <TypeSignature Language="C++ CLI" Value="public interface class IProcessInitializer" />
  <TypeSignature Language="F#" Value="type IProcessInitializer = interface" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("1113f52d-dc7f-4943-aed6-88d04027e32a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Dá suporte a métodos que podem ser chamados quando um componente COM é inicializado ou desligado.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementar o <xref:System.EnterpriseServices.IProcessInitializer> métodos de interface em componentes de serviço se você deseja executar a inicialização ou código de desligamento quando um processo do servidor (Dllhost.exe) é iniciado ou desligado, respectivamente.  
  
 COM+ fornece `Startup` e `Shutdown` eventos quando Dllhost.exe começa e termina. Esse recurso permite que qualquer componentes COM+ que são instalados em um aplicativo COM+ para servidor (conhecido como componentes de servidor daqui em diante) para executar a inicialização personalizada e limpar o código. Uma instância de cada componente que implementa o <xref:System.EnterpriseServices.IProcessInitializer> interface será criado e armazenado para a duração do processo e chamado os métodos de interface durante a inicialização e desligamento. Quando implementada em uma <xref:System.EnterpriseServices.ServicedComponent>, durante o registro do componente, o `InitializesServerApplication` parâmetro na `COMAdminCatalogObject` dentro dos componentes a coleção é definida como `true`.  
  
 Usando o `Startup` e `Shutdown` eventos, você pode inicializar os recursos, criar conexões, inicializar dados compartilhados e executar código de limpeza. No entanto, você não deve acessar estados que são específicos para COM+ porque as instâncias de componentes de servidor ainda não tem sido criadas. Além disso, o código a `Startup` e `Shutdown` eventos devem retornar assim que possível, porque apenas 90 segundos para Dllhost.exe para se preparar para aceitar as ativações depois que o sistema inicia o processo de espera do sistema. Se Dllhost.exe não indica que ele está pronto em até 90 segundos, o sistema termina o processo. Portanto, toda inicialização precisa ser concluída dentro desse período de tempo de processamento. Cada componente de servidor que participa de inicialização deve oferecer suporte a <xref:System.EnterpriseServices.IProcessInitializer> interface. Na inicialização do DllHost.exe COM+ cria todos os componentes de servidor que solicitou a esse serviço, chamadas `QueryInterface` para o <xref:System.EnterpriseServices.IProcessInitializer> interface e chama o <xref:System.EnterpriseServices.IProcessInitializer.Startup%2A> função. Da mesma forma, quando o processo de DllHost.exe é desligado, ele chama o <xref:System.EnterpriseServices.IProcessInitializer.Shutdown%2A> função naqueles armazenados anteriormente ponteiros de interface.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Shutdown">
      <MemberSignature Language="C#" Value="public void Shutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Shutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IProcessInitializer.Shutdown" />
      <MemberSignature Language="VB.NET" Value="Public Sub Shutdown ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Shutdown();" />
      <MemberSignature Language="F#" Value="abstract member Shutdown : unit -&gt; unit" Usage="iProcessInitializer.Shutdown " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Executa ações de desligamento. Chamado quando o Dllhost.exe é desligado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.EnterpriseServices.IProcessInitializer.Shutdown%2A> não é chamado durante um failfast ou outros eventos de desligamento catastrófica.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Startup">
      <MemberSignature Language="C#" Value="public void Startup (object punkProcessControl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Startup([in]object punkProcessControl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IProcessInitializer.Startup(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Startup (punkProcessControl As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Startup(System::Object ^ punkProcessControl);" />
      <MemberSignature Language="F#" Value="abstract member Startup : obj -&gt; unit" Usage="iProcessInitializer.Startup punkProcessControl" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="punkProcessControl" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="punkProcessControl">No Microsoft Windows XP, um ponteiro para a interface <see langword="IUnknown" /> do componente COM que está sendo inicializado. No Microsoft Windows 2000, este argumento é sempre <see langword="null" />.</param>
        <summary>Executa a inicialização no startup. Chamado quando Dllhost.exe é iniciado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O objeto referenciado por `punkProcessControl` implementa uma <xref:System.EnterpriseServices.IProcessInitControl> interface. <xref:System.EnterpriseServices.IProcessInitControl> suporta o método único <xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A>.  
  
 O código de inicialização no <xref:System.EnterpriseServices.IProcessInitializer.Startup%2A> pode chamar o <xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A>, com o tempo limite definido como igual ao número de segundos restantes antes da inicialização de expiração do componente.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>