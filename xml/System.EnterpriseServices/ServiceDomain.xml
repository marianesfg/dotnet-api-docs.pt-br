<Type Name="ServiceDomain" FullName="System.EnterpriseServices.ServiceDomain">
  <Metadata><Meta Name="ms.openlocfilehash" Value="81b5a3e89e9b3612a1c3455764f65be3243d8145" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48600197" /></Metadata><TypeSignature Language="C#" Value="public sealed class ServiceDomain" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ServiceDomain extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.ServiceDomain" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ServiceDomain" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceDomain sealed" />
  <TypeSignature Language="F#" Value="type ServiceDomain = class" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Permite que um segmento de código identificado por <see cref="M:System.EnterpriseServices.ServiceDomain.Enter(System.EnterpriseServices.ServiceConfig)" /> e <see cref="M:System.EnterpriseServices.ServiceDomain.Leave" /> seja executado em seu próprio contexto e se comporte como se fosse um método que é chamado em um objeto criado dentro do contexto. Essa classe não pode ser herdada.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.EnterpriseServices.ServiceDomain.Enter%2A> e <xref:System.EnterpriseServices.ServiceDomain.Leave%2A> métodos são usados em pares para envolver o código que, em seguida, pode usar serviços COM+. Código que é colocado entre as chamadas para <xref:System.EnterpriseServices.ServiceDomain.Enter%2A> e <xref:System.EnterpriseServices.ServiceDomain.Leave%2A> é executado em seu próprio contexto e se comporta como se fosse um método que é chamado em um objeto criado dentro do contexto. O <xref:System.EnterpriseServices.ServiceDomain.Enter%2A> e <xref:System.EnterpriseServices.ServiceDomain.Leave%2A> pares podem ser aninhados. É responsabilidade do usuário para certificar-se de que os pares de chamadas são balanceados para que todas as chamadas para <xref:System.EnterpriseServices.ServiceDomain.Leave%2A> corresponde a uma chamada anterior a <xref:System.EnterpriseServices.ServiceDomain.Enter%2A>.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public static void Enter (System.EnterpriseServices.ServiceConfig cfg);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Enter(class System.EnterpriseServices.ServiceConfig cfg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.ServiceDomain.Enter(System.EnterpriseServices.ServiceConfig)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Enter (cfg As ServiceConfig)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Enter(System::EnterpriseServices::ServiceConfig ^ cfg);" />
      <MemberSignature Language="F#" Value="static member Enter : System.EnterpriseServices.ServiceConfig -&gt; unit" Usage="System.EnterpriseServices.ServiceDomain.Enter cfg" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cfg" Type="System.EnterpriseServices.ServiceConfig" />
      </Parameters>
      <Docs>
        <param name="cfg">Um <see cref="T:System.EnterpriseServices.ServiceConfig" /> que contém as informações de configuração para os serviços a serem usados no código incluído.</param>
        <summary>Cria o contexto especificado pelo objeto <see cref="T:System.EnterpriseServices.ServiceConfig" /> e o envia por push para a pilha de contexto para que se torne o contexto atual.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.EnterpriseServices.ServiceDomain.Enter%2A> primeiro cria um contexto configurado conforme especificado pelo <xref:System.EnterpriseServices.ServiceConfig> objeto que é passado como o `cfg` parâmetro. Políticas nos lados do cliente e no servidor, em seguida, são disparadas como se uma chamada de método tivesse ocorrido. O novo contexto, em seguida, será enviado para uma pilha de contexto e se torna o contexto atual. Devido a seu design eficiente e porque nenhum thread empacotamento estiver envolvido, usando <xref:System.EnterpriseServices.ServiceDomain.Enter%2A> e <xref:System.EnterpriseServices.ServiceDomain.Leave%2A> envolve reduziu significativamente a sobrecarga em comparação com uma chamada de método equivalente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">Não há suporte para <see cref="T:System.EnterpriseServices.ServiceConfig" /> na plataforma atual.</exception>
      </Docs>
    </Member>
    <Member MemberName="Leave">
      <MemberSignature Language="C#" Value="public static System.EnterpriseServices.TransactionStatus Leave ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.EnterpriseServices.TransactionStatus Leave() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.ServiceDomain.Leave" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Leave () As TransactionStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::EnterpriseServices::TransactionStatus Leave();" />
      <MemberSignature Language="F#" Value="static member Leave : unit -&gt; System.EnterpriseServices.TransactionStatus" Usage="System.EnterpriseServices.ServiceDomain.Leave " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EnterpriseServices.TransactionStatus</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Dispara o servidor e, em seguida, as políticas do lado do cliente, como se uma chamada de método estivesse retornando. Então, o contexto atual é removido da pilha de contexto mais recente e o contexto que estava em execução quando <see cref="M:System.EnterpriseServices.ServiceDomain.Enter(System.EnterpriseServices.ServiceConfig)" /> foi chamado torna-se o contexto atual.</summary>
        <returns>Um dos valores de <see cref="T:System.EnterpriseServices.TransactionStatus" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.PlatformNotSupportedException">Não há suporte para <see cref="T:System.EnterpriseServices.ServiceConfig" /> na plataforma atual.</exception>
      </Docs>
    </Member>
  </Members>
</Type>