<Type Name="IServiceCall" FullName="System.EnterpriseServices.IServiceCall">
  <Metadata><Meta Name="ms.openlocfilehash" Value="75a07556256f0bbbe19675d03f2906080979c74c" /><Meta Name="ms.sourcegitcommit" Value="42a3c35677e9d87eeb503607ae50c9d39827d414" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="12/17/2018" /><Meta Name="ms.locfileid" Value="53511052" /></Metadata><TypeSignature Language="C#" Value="public interface IServiceCall" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IServiceCall" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.IServiceCall" />
  <TypeSignature Language="VB.NET" Value="Public Interface IServiceCall" />
  <TypeSignature Language="C++ CLI" Value="public interface class IServiceCall" />
  <TypeSignature Language="F#" Value="type IServiceCall = interface" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.Guid("BD3E2E12-42DD-40f4-A09A-95A50C58304B")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Implementa o trabalho em lotes que é enviado por meio da atividade criada por <see cref="T:System.EnterpriseServices.Activity" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use <xref:System.EnterpriseServices.IServiceCall> para executar o trabalho em lotes que usa serviços COM+ sem a criação de um componente especificamente para usar esses serviços. Ambientes de script, como o Internet Information Services (IIS) e o ASP.NET podem usar essa interface para utilizar serviços COM+ sem a necessidade de criar um componente COM+.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="OnCall">
      <MemberSignature Language="C#" Value="public void OnCall ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnCall() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IServiceCall.OnCall" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnCall ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OnCall();" />
      <MemberSignature Language="F#" Value="abstract member OnCall : unit -&gt; unit" Usage="iServiceCall.OnCall " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Inicia a execução do trabalho em lotes implementado nesse método.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O trabalho em lote que é executado nesse método é executado no apartamento de thread e o contexto da atividade criada pela chamada para <xref:System.EnterpriseServices.Activity>. O trabalho em lote nesse método é executado por uma chamada para a <xref:System.EnterpriseServices.Activity.SynchronousCall%2A?displayProperty=nameWithType> ou <xref:System.EnterpriseServices.Activity.AsynchronousCall%2A?displayProperty=nameWithType>.  
  
> [!CAUTION]
>  Você deve garantir que esse método é thread-safe em situações em que o objeto de atividade criado por <xref:System.EnterpriseServices.Activity> não for criada com um contexto sincronizado, porque em tais situações muitas chamadas para <xref:System.EnterpriseServices.IServiceCall.OnCall%2A> pode executar ao mesmo tempo.  
  
 Para obter o melhor desempenho do sistema, a configuração de contexto da atividade criada pelo <xref:System.EnterpriseServices.Activity> devem ser correspondidos para o trabalho de lote executado pelo <xref:System.EnterpriseServices.IServiceCall.OnCall%2A> método. Por exemplo, se o lote trabalha na <xref:System.EnterpriseServices.IServiceCall.OnCall%2A> usa o método objetos em um pool, a atividade criada pelo <xref:System.EnterpriseServices.Activity> deve ser configurado para usar o MTA (multithreaded apartment).  
  
 Para obter informações sobre objetos em um pool, consulte o tópico "Requisitos para em um pool objetos" no SDK da plataforma no MSDN.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>