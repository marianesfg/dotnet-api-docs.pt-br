<Type Name="Timer" FullName="System.Timers.Timer">
  <TypeSignature Language="C#" Value="public class Timer : System.ComponentModel.Component, System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Timer extends System.ComponentModel.Component implements class System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="DocId" Value="T:System.Timers.Timer" />
  <TypeSignature Language="VB.NET" Value="Public Class Timer&#xA;Inherits Component&#xA;Implements ISupportInitialize" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer : System::ComponentModel::Component, System::ComponentModel::ISupportInitialize" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Elapsed")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Interval")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="37dda-101">Gera um evento após um intervalo definido, a opção de gerar eventos recorrentes.</span><span class="sxs-lookup"><span data-stu-id="37dda-101">Generates an event after a set interval, with an option to generate recurring events.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37dda-102">O <xref:System.Timers.Timer> componente é um temporizador com base em servidor que gera um <xref:System.Timers.Timer.Elapsed> eventos em seu aplicativo após o número de milissegundos no <xref:System.Timers.Timer.Interval%2A> propriedade expirou.</span><span class="sxs-lookup"><span data-stu-id="37dda-102">The <xref:System.Timers.Timer> component is a server-based timer that raises an <xref:System.Timers.Timer.Elapsed> event in your application after the number of milliseconds in the <xref:System.Timers.Timer.Interval%2A> property has elapsed.</span></span> <span data-ttu-id="37dda-103">Você pode configurar o <xref:System.Timers.Timer> objeto para gerar o evento apenas uma vez ou várias vezes usando o <xref:System.Timers.Timer.AutoReset%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="37dda-103">You can configure the <xref:System.Timers.Timer> object to raise the event just once or repeatedly using the <xref:System.Timers.Timer.AutoReset%2A> property.</span></span> <span data-ttu-id="37dda-104">Normalmente, um <xref:System.Timers.Timer> objeto for declarado no nível de classe, de forma que ela permaneça no escopo, desde que ele é necessário.</span><span class="sxs-lookup"><span data-stu-id="37dda-104">Typically, a <xref:System.Timers.Timer> object is declared at the class level so that it stays in scope as long as it is needed.</span></span> <span data-ttu-id="37dda-105">Você pode manipular seu <xref:System.Timers.Timer.Elapsed> eventos para fornecer processamento regular.</span><span class="sxs-lookup"><span data-stu-id="37dda-105">You can then handle its <xref:System.Timers.Timer.Elapsed> event to provide regular processing.</span></span> <span data-ttu-id="37dda-106">Por exemplo, suponha que você tem um servidor crítico que deve ser mantido em execução 24 horas por dia, 7 dias por semana.</span><span class="sxs-lookup"><span data-stu-id="37dda-106">For example, suppose you have a critical server that must be kept running 24 hours a day, 7 days a week.</span></span> <span data-ttu-id="37dda-107">Você pode criar um serviço que usa um <xref:System.Timers.Timer> objeto periodicamente Verifique o servidor e verifique se o sistema está em execução.</span><span class="sxs-lookup"><span data-stu-id="37dda-107">You could create a service that uses a <xref:System.Timers.Timer> object to periodically check the server and ensure that the system is up and running.</span></span> <span data-ttu-id="37dda-108">Se o sistema não está respondendo, o serviço pode tentar reiniciar o servidor ou notificar um administrador.</span><span class="sxs-lookup"><span data-stu-id="37dda-108">If the system is not responding, the service could attempt to restart the server or notify an administrator.</span></span>  
  
> [!IMPORTANT]
> <span data-ttu-id="37dda-109">O <xref:System.Timers.Timer> classe não está disponível para todas as implementações de .NET e as versões, como 1.6 padrão do .NET e versões anteriores.</span><span class="sxs-lookup"><span data-stu-id="37dda-109">The <xref:System.Timers.Timer> class is not available for all .NET implementations and versions, such as .NET Standard 1.6 and lower versions.</span></span>
> <span data-ttu-id="37dda-110">Nesses casos, você pode usar o <xref:System.Threading.Timer?displayProperty=nameWithType> classe em vez disso.</span><span class="sxs-lookup"><span data-stu-id="37dda-110">In these cases, you can use the <xref:System.Threading.Timer?displayProperty=nameWithType> class instead.</span></span>
  
 <span data-ttu-id="37dda-111">Este tipo implementa o <xref:System.IDisposable> interface.</span><span class="sxs-lookup"><span data-stu-id="37dda-111">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="37dda-112">Quando você terminar de usar o tipo, descarte-direta ou indiretamente.</span><span class="sxs-lookup"><span data-stu-id="37dda-112">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="37dda-113">Para descartar o tipo diretamente, chame seu <xref:System.IDisposable.Dispose%2A> método em um `try` / `catch` bloco.</span><span class="sxs-lookup"><span data-stu-id="37dda-113">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="37dda-114">Para descartar indiretamente dele, use uma construção de linguagem, como `using` (em c#) ou `Using` (no Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="37dda-114">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="37dda-115">Para obter mais informações, consulte a seção "Usando um objeto que implementa IDisposable" o <xref:System.IDisposable> tópico de interface.</span><span class="sxs-lookup"><span data-stu-id="37dda-115">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="37dda-116">O servidor com base em <xref:System.Timers.Timer?displayProperty=nameWithType> classe é projetada para uso em threads de trabalho em um ambiente multithreaded.</span><span class="sxs-lookup"><span data-stu-id="37dda-116">The server-based <xref:System.Timers.Timer?displayProperty=nameWithType> class is designed for use with worker threads in a multithreaded environment.</span></span> <span data-ttu-id="37dda-117">Timers de servidor podem mover entre threads para lidar com a elevação <xref:System.Timers.Timer.Elapsed> evento, resultando em mais precisão de temporizadores do Windows em gera o evento no tempo.</span><span class="sxs-lookup"><span data-stu-id="37dda-117">Server timers can move among threads to handle the raised <xref:System.Timers.Timer.Elapsed> event, resulting in more accuracy than Windows timers in raising the event on time.</span></span>  
  
 <span data-ttu-id="37dda-118">O <xref:System.Timers.Timer?displayProperty=nameWithType> componente gera o <xref:System.Timers.Timer.Elapsed> evento, com base no valor (em milissegundos) do <xref:System.Timers.Timer.Interval%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="37dda-118">The <xref:System.Timers.Timer?displayProperty=nameWithType> component raises the <xref:System.Timers.Timer.Elapsed> event, based on the value (in milliseconds) of the <xref:System.Timers.Timer.Interval%2A> property.</span></span> <span data-ttu-id="37dda-119">Você pode manipular esse evento para executar o processamento que é necessário.</span><span class="sxs-lookup"><span data-stu-id="37dda-119">You can handle this event to perform the processing you need.</span></span> <span data-ttu-id="37dda-120">Por exemplo, suponha que você tenha um aplicativo de vendas online que envia ordens de venda para um banco de dados de continuamente.</span><span class="sxs-lookup"><span data-stu-id="37dda-120">For example, suppose that you have an online sales application that continuously posts sales orders to a database.</span></span> <span data-ttu-id="37dda-121">O serviço que compila as instruções para envio opera em um lote de ordens em vez de cada ordem de processamento individualmente.</span><span class="sxs-lookup"><span data-stu-id="37dda-121">The service that compiles the instructions for shipping operates on a batch of orders rather than processing each order individually.</span></span> <span data-ttu-id="37dda-122">Você pode usar um <xref:System.Timers.Timer> para iniciar a cada 30 minutos de processamento em lotes.</span><span class="sxs-lookup"><span data-stu-id="37dda-122">You could use a <xref:System.Timers.Timer> to start the batch processing every 30 minutes.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="37dda-123">A classe System.Timers.Timer tem a mesma resolução que o relógio do sistema.</span><span class="sxs-lookup"><span data-stu-id="37dda-123">The System.Timers.Timer class has the same resolution as the system clock.</span></span> <span data-ttu-id="37dda-124">Isso significa que o <xref:System.Timers.Timer.Elapsed> evento será acionado em um intervalo definido pela resolução do relógio do sistema se o <xref:System.Timers.Timer.Interval%2A> propriedade é menor do que a resolução do relógio do sistema.</span><span class="sxs-lookup"><span data-stu-id="37dda-124">This means that the <xref:System.Timers.Timer.Elapsed> event will fire at an interval defined by the resolution of the system clock if the <xref:System.Timers.Timer.Interval%2A> property is less than the resolution of the system clock.</span></span> <span data-ttu-id="37dda-125">Para obter mais informações, consulte a propriedade <xref:System.Timers.Timer.Interval%2A>.</span><span class="sxs-lookup"><span data-stu-id="37dda-125">For more information, see the <xref:System.Timers.Timer.Interval%2A> property.</span></span>  
  
 <span data-ttu-id="37dda-126">Quando <xref:System.Timers.Timer.AutoReset%2A> é definido como `false`, um <xref:System.Timers.Timer?displayProperty=nameWithType> objeto gera o <xref:System.Timers.Timer.Elapsed> evento apenas uma vez, após a primeira <xref:System.Timers.Timer.Interval%2A> expirou.</span><span class="sxs-lookup"><span data-stu-id="37dda-126">When <xref:System.Timers.Timer.AutoReset%2A> is set to `false`, a <xref:System.Timers.Timer?displayProperty=nameWithType> object raises the <xref:System.Timers.Timer.Elapsed> event only once, after the first <xref:System.Timers.Timer.Interval%2A> has elapsed.</span></span> <span data-ttu-id="37dda-127">Manter aumentar o <xref:System.Timers.Timer.Elapsed> evento regularmente no intervalo definido pelo <xref:System.Timers.Timer.Interval%2A>, defina <xref:System.Timers.Timer.AutoReset%2A> para `true`, que é o valor padrão.</span><span class="sxs-lookup"><span data-stu-id="37dda-127">To keep raising the <xref:System.Timers.Timer.Elapsed> event regularly at the interval defined by the <xref:System.Timers.Timer.Interval%2A>, set <xref:System.Timers.Timer.AutoReset%2A> to `true`, which is the default value.</span></span>  
  
 <span data-ttu-id="37dda-128">O <xref:System.Timers.Timer> componente Captura e suprime todas as exceções lançadas por manipuladores de eventos para o <xref:System.Timers.Timer.Elapsed> evento.</span><span class="sxs-lookup"><span data-stu-id="37dda-128">The <xref:System.Timers.Timer> component catches and suppresses all exceptions thrown by event handlers for the <xref:System.Timers.Timer.Elapsed> event.</span></span> <span data-ttu-id="37dda-129">Esse comportamento está sujeita a alterações em versões futuras do .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="37dda-129">This behavior is subject to change in future releases of the .NET Framework.</span></span> <span data-ttu-id="37dda-130">No entanto, observe que isso não é verdade para manipuladores de eventos que são executadas de forma assíncrona e incluem o `await` operador (em c#) ou o `Await` operador (no Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="37dda-130">Note, however, that this is not true of event handlers that execute asynchronously and include the `await` operator (in C#)  or the `Await` operator (in Visual Basic).</span></span> <span data-ttu-id="37dda-131">Exceções geradas nesses manipuladores de eventos são propagadas de volta para o thread de chamada, como mostra o exemplo a seguir.</span><span class="sxs-lookup"><span data-stu-id="37dda-131">Exceptions thrown in these event handlers are propagated back to the calling thread, as the following example illustrates.</span></span> <span data-ttu-id="37dda-132">Para obter mais informações sobre exceções lançadas em métodos assíncronos, consulte [tratamento de exceção](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="37dda-132">For more information on exceptions thrown in asynchronous methods, see   [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 [!code-csharp[System.Timers.Timer#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/AsyncHandlerEx1.cs#3)]
 [!code-vb[System.Timers.Timer#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/AsyncHandlerEx1.vb#3)]  
  
 <span data-ttu-id="37dda-133">Se o <xref:System.Timers.Timer.SynchronizingObject%2A> é de propriedade `null`, o <xref:System.Timers.Timer.Elapsed> evento é gerado em um <xref:System.Threading.ThreadPool> thread.</span><span class="sxs-lookup"><span data-stu-id="37dda-133">If the <xref:System.Timers.Timer.SynchronizingObject%2A> property is `null`, the <xref:System.Timers.Timer.Elapsed> event is raised on a <xref:System.Threading.ThreadPool> thread.</span></span> <span data-ttu-id="37dda-134">Se o processamento do <xref:System.Timers.Timer.Elapsed> duração de evento mais de <xref:System.Timers.Timer.Interval%2A>, o evento pode ser gerado novamente em outro <xref:System.Threading.ThreadPool> thread.</span><span class="sxs-lookup"><span data-stu-id="37dda-134">If processing of the <xref:System.Timers.Timer.Elapsed> event lasts longer than <xref:System.Timers.Timer.Interval%2A>, the event might be raised again on another <xref:System.Threading.ThreadPool> thread.</span></span> <span data-ttu-id="37dda-135">Nessa situação, o manipulador de eventos deve ser reentrante.</span><span class="sxs-lookup"><span data-stu-id="37dda-135">In this situation, the event handler should be reentrant.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="37dda-136">O método de manipulação de eventos pode ser executado em um thread ao mesmo tempo que outro thread chama o <xref:System.Timers.Timer.Stop%2A> método ou define o <xref:System.Timers.Timer.Enabled%2A> propriedade `false`.</span><span class="sxs-lookup"><span data-stu-id="37dda-136">The event-handling method might run on one thread at the same time that another thread calls the <xref:System.Timers.Timer.Stop%2A> method or sets the <xref:System.Timers.Timer.Enabled%2A> property to `false`.</span></span> <span data-ttu-id="37dda-137">Isso pode resultar no <xref:System.Timers.Timer.Elapsed> evento que está sendo gerado depois que o timer é interrompido.</span><span class="sxs-lookup"><span data-stu-id="37dda-137">This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the timer is stopped.</span></span> <span data-ttu-id="37dda-138">O exemplo de código para o <xref:System.Timers.Timer.Stop%2A> método mostra uma maneira de evitar essa condição de corrida.</span><span class="sxs-lookup"><span data-stu-id="37dda-138">The example code for the <xref:System.Timers.Timer.Stop%2A> method shows one way to avoid this race condition.</span></span>  
  
 <span data-ttu-id="37dda-139">Mesmo se <xref:System.Timers.Timer.SynchronizingObject%2A> não é `null`, <xref:System.Timers.Timer.Elapsed> eventos podem ocorrer após a <xref:System.Timers.Timer.Dispose%2A> ou <xref:System.Timers.Timer.Stop%2A> método foi chamado ou depois o <xref:System.Timers.Timer.Enabled%2A> propriedade foi definida `false`, pois o sinal para gerar o <xref:System.Timers.Timer.Elapsed> evento sempre está na fila para execução em um pool de threads.</span><span class="sxs-lookup"><span data-stu-id="37dda-139">Even if <xref:System.Timers.Timer.SynchronizingObject%2A> is not `null`, <xref:System.Timers.Timer.Elapsed> events can occur after the <xref:System.Timers.Timer.Dispose%2A> or <xref:System.Timers.Timer.Stop%2A> method has been called or after the <xref:System.Timers.Timer.Enabled%2A> property has been set to `false`, because the signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a thread pool thread.</span></span> <span data-ttu-id="37dda-140">Uma maneira de resolver essa condição de corrida é definir um sinalizador que informa o manipulador de eventos para o <xref:System.Timers.Timer.Elapsed> evento para ignorar os eventos subsequentes.</span><span class="sxs-lookup"><span data-stu-id="37dda-140">One way to resolve this race condition is to set a flag that tells the event handler for the <xref:System.Timers.Timer.Elapsed> event to ignore subsequent events.</span></span>  
  
 <span data-ttu-id="37dda-141">Se você usar o <xref:System.Timers.Timer?displayProperty=nameWithType> classe com um elemento de interface do usuário, como um formulário ou controle, sem colocar o timer em desse elemento de interface do usuário, atribuir o formulário ou controle que contém o <xref:System.Timers.Timer> para o <xref:System.Timers.Timer.SynchronizingObject%2A> propriedade, para que o evento é empacotado para o thread de interface do usuário.</span><span class="sxs-lookup"><span data-stu-id="37dda-141">If you use the <xref:System.Timers.Timer?displayProperty=nameWithType> class with a user interface element, such as a form or control, without placing the timer on that user interface element, assign the form or control that contains the <xref:System.Timers.Timer> to the <xref:System.Timers.Timer.SynchronizingObject%2A> property, so that the event is marshaled to the user interface thread.</span></span>  
  
 <span data-ttu-id="37dda-142">Para obter uma lista de valores de propriedade padrão para uma instância do <xref:System.Timers.Timer>, consulte o <xref:System.Timers.Timer.%23ctor%2A> construtor.</span><span class="sxs-lookup"><span data-stu-id="37dda-142">For a list of default property values for an instance of <xref:System.Timers.Timer>, see the <xref:System.Timers.Timer.%23ctor%2A> constructor.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="37dda-143">Lembre-se de que o .NET inclui quatro classes chamadas `Timer`, cada um de que oferece funcionalidades diferentes:</span><span class="sxs-lookup"><span data-stu-id="37dda-143">Be aware that .NET includes four classes named `Timer`, each of which offers different functionality:</span></span>  
>   
> - <span data-ttu-id="37dda-144"><xref:System.Timers.Timer?displayProperty=nameWithType> (Este tópico): dispara um evento em intervalos regulares.</span><span class="sxs-lookup"><span data-stu-id="37dda-144"><xref:System.Timers.Timer?displayProperty=nameWithType> (this topic): fires an event at regular intervals.</span></span> <span data-ttu-id="37dda-145">A classe é destinada para uso como um servidor com base em ou componente de serviço em um ambiente multithreaded; ele não tem nenhuma interface de usuário e não fica visível no tempo de execução.</span><span class="sxs-lookup"><span data-stu-id="37dda-145">The class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.</span></span>  
> - <span data-ttu-id="37dda-146"><xref:System.Threading.Timer?displayProperty=nameWithType>: executa um método de retorno de chamada única em um pool de threads em intervalos regulares.</span><span class="sxs-lookup"><span data-stu-id="37dda-146"><xref:System.Threading.Timer?displayProperty=nameWithType>: executes a single callback method on a thread pool thread at regular intervals.</span></span> <span data-ttu-id="37dda-147">O método de retorno de chamada é definido quando o timer é instanciado e não pode ser alterado.</span><span class="sxs-lookup"><span data-stu-id="37dda-147">The callback method is defined when the timer is instantiated and cannot be changed.</span></span> <span data-ttu-id="37dda-148">Como o <xref:System.Timers.Timer?displayProperty=nameWithType> classe, essa classe é destinada para uso como um componente baseado em servidor ou serviço em um ambiente multithreaded; ele não tem nenhuma interface de usuário e não fica visível no tempo de execução.</span><span class="sxs-lookup"><span data-stu-id="37dda-148">Like the <xref:System.Timers.Timer?displayProperty=nameWithType> class, this class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.</span></span>  
> - <span data-ttu-id="37dda-149"><xref:System.Windows.Forms.Timer?displayProperty=nameWithType> (Somente para o .NET framework): um componente de Windows Forms que dispara um evento em intervalos regulares.</span><span class="sxs-lookup"><span data-stu-id="37dda-149"><xref:System.Windows.Forms.Timer?displayProperty=nameWithType> (.NET Framework only): a Windows Forms component that fires an event at regular intervals.</span></span> <span data-ttu-id="37dda-150">O componente não tem nenhuma interface do usuário e é projetado para uso em um ambiente de thread único.</span><span class="sxs-lookup"><span data-stu-id="37dda-150">The component has no user interface and is designed for use in a single-threaded environment.</span></span>  
> - <span data-ttu-id="37dda-151"><xref:System.Web.UI.Timer?displayProperty=nameWithType> (Somente para o .NET framework): um componente do ASP.NET que executa a página da web assíncrona ou síncrona postbacks em intervalos regulares.</span><span class="sxs-lookup"><span data-stu-id="37dda-151"><xref:System.Web.UI.Timer?displayProperty=nameWithType> (.NET Framework only): an ASP.NET component that performs asynchronous or synchronous web page postbacks at a regular interval.</span></span>  

## Examples  
 <span data-ttu-id="37dda-152">O exemplo a seguir cria um `System.Timers.Timer` objeto que dispara seu <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> evento a cada dois segundos (2.000 milissegundos), define um manipulador de eventos para o evento e inicia o temporizador.</span><span class="sxs-lookup"><span data-stu-id="37dda-152">The following example instantiates a `System.Timers.Timer` object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2,000 milliseconds), sets up an event handler for the  event, and starts the timer.</span></span> <span data-ttu-id="37dda-153">O manipulador de eventos exibe o valor da <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> propriedade cada vez que ele é gerado.</span><span class="sxs-lookup"><span data-stu-id="37dda-153">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span>  
  
 [!code-csharp[System.Timers.Timer#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer2a.cs#2)]
 [!code-vb[System.Timers.Timer#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer2a.vb#2)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="37dda-154">Qualquer público <see langword="static" /> membros desse tipo são thread-safe.</span><span class="sxs-lookup"><span data-stu-id="37dda-154">Any public <see langword="static" /> members of this type are thread safe.</span></span> <span data-ttu-id="37dda-155">Não há garantia de que qualquer membro de instância seja thread-safe.</span><span class="sxs-lookup"><span data-stu-id="37dda-155">Any instance members are not guaranteed to be thread safe.</span></span></threadsafe>
    <altmember cref="P:System.Timers.Timer.AutoReset" />
    <altmember cref="P:System.Timers.Timer.Interval" />
    <altmember cref="E:System.Timers.Timer.Elapsed" />
    <altmember cref="M:System.Timers.Timer.#ctor" />
    <altmember cref="T:System.Threading.Timer" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="37dda-156">Inicializa uma nova instância da classe <see cref="T:System.Timers.Timer" />.</span><span class="sxs-lookup"><span data-stu-id="37dda-156">Initializes a new instance of the <see cref="T:System.Timers.Timer" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="37dda-157">Inicializa uma nova instância da classe <see cref="T:System.Timers.Timer" /> e define todas as propriedades para seus valores iniciais.</span><span class="sxs-lookup"><span data-stu-id="37dda-157">Initializes a new instance of the <see cref="T:System.Timers.Timer" /> class, and sets all the properties to their initial values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37dda-158">A tabela a seguir mostra os valores de propriedade inicial para uma instância do <xref:System.Timers.Timer>.</span><span class="sxs-lookup"><span data-stu-id="37dda-158">The following table shows initial property values for an instance of <xref:System.Timers.Timer>.</span></span>  
  
|<span data-ttu-id="37dda-159">Propriedade</span><span class="sxs-lookup"><span data-stu-id="37dda-159">Property</span></span>|<span data-ttu-id="37dda-160">Valor inicial</span><span class="sxs-lookup"><span data-stu-id="37dda-160">Initial value</span></span>|  
|--------------|-------------------|  
|<xref:System.Timers.Timer.AutoReset%2A>|`true`|  
|<xref:System.Timers.Timer.Enabled%2A>|`false`|  
|<xref:System.Timers.Timer.Interval%2A>|<span data-ttu-id="37dda-161">100 milissegundos</span><span class="sxs-lookup"><span data-stu-id="37dda-161">100 milliseconds</span></span>|  
|<xref:System.Timers.Timer.SynchronizingObject%2A>|<span data-ttu-id="37dda-162">Uma referência nula (`Nothing` no Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="37dda-162">A null reference (`Nothing` in Visual Basic).</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="37dda-163">O exemplo a seguir cria um <xref:System.Timers.Timer> objeto que dispara seu <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> evento a cada dois segundos (2000 milissegundos), define um manipulador de eventos para o evento e inicia o temporizador.</span><span class="sxs-lookup"><span data-stu-id="37dda-163">The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer.</span></span> <span data-ttu-id="37dda-164">O manipulador de eventos exibe o valor da <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> propriedade cada vez que ele é gerado.</span><span class="sxs-lookup"><span data-stu-id="37dda-164">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span>  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.SynchronizingObject" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (double interval);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 interval) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.#ctor(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (interval As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(double interval);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="interval" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="interval"><span data-ttu-id="37dda-165">O tempo, em milissegundos, entre eventos.</span><span class="sxs-lookup"><span data-stu-id="37dda-165">The time, in milliseconds, between events.</span></span> <span data-ttu-id="37dda-166">O valor deve ser maior que zero e menor ou igual a <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="37dda-166">The value must be greater than zero and less than or equal to <see cref="F:System.Int32.MaxValue" />.</span></span></param>
        <summary><span data-ttu-id="37dda-167">Inicializa uma nova instância da classe <see cref="T:System.Timers.Timer" /> e define a propriedade <see cref="P:System.Timers.Timer.Interval" /> como o número especificado de milissegundos.</span><span class="sxs-lookup"><span data-stu-id="37dda-167">Initializes a new instance of the <see cref="T:System.Timers.Timer" /> class, and sets the <see cref="P:System.Timers.Timer.Interval" /> property to the specified number of milliseconds.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37dda-168">Esse construtor define o <xref:System.Timers.Timer.Interval%2A> propriedade da nova instância do timer, mas não habilita o temporizador.</span><span class="sxs-lookup"><span data-stu-id="37dda-168">This constructor sets the <xref:System.Timers.Timer.Interval%2A> property of the new timer instance, but does not enable the timer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37dda-169">O exemplo a seguir cria um <xref:System.Timers.Timer> objeto que dispara seu <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> evento a cada dois segundos (2000 milissegundos), define um manipulador de eventos para o evento e inicia o temporizador.</span><span class="sxs-lookup"><span data-stu-id="37dda-169">The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer.</span></span> <span data-ttu-id="37dda-170">O manipulador de eventos exibe o valor da <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> propriedade cada vez que ele é gerado.</span><span class="sxs-lookup"><span data-stu-id="37dda-170">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span>  
  
 [!code-csharp[System.Timers.Timer#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/AsyncHandlerEx1.cs#3)]
 [!code-vb[System.Timers.Timer#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/AsyncHandlerEx1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="37dda-171">O valor do parâmetro <paramref name="interval" /> é menor ou igual a zero ou maior que <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="37dda-171">The value of the <paramref name="interval" /> parameter is less than or equal to zero, or greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="AutoReset">
      <MemberSignature Language="C#" Value="public bool AutoReset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoReset" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.AutoReset" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoReset As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoReset { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Timers.TimersDescription("Indicates whether the timer will be restarted when it is enabled.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="37dda-172">Obtém ou define um valor booliano que indica se <see cref="T:System.Timers.Timer" /> deve acionar o evento <see cref="E:System.Timers.Timer.Elapsed" /> apenas uma vez (<see langword="false" />) ou repetidamente (<see langword="true" />).</span><span class="sxs-lookup"><span data-stu-id="37dda-172">Gets or sets a Boolean indicating whether the <see cref="T:System.Timers.Timer" /> should raise the <see cref="E:System.Timers.Timer.Elapsed" /> event only once (<see langword="false" />) or repeatedly (<see langword="true" />).</span></span></summary>
        <value>
          <span data-ttu-id="37dda-173"><see langword="true" /> para que o <see cref="T:System.Timers.Timer" /> acione o evento <see cref="E:System.Timers.Timer.Elapsed" /> cada vez que o intervalo expirar; <see langword="false" /> para que acione o evento <see cref="E:System.Timers.Timer.Elapsed" /> somente uma vez, após a primeira vez que o intervalo expirar.</span><span class="sxs-lookup"><span data-stu-id="37dda-173"><see langword="true" /> if the <see cref="T:System.Timers.Timer" /> should raise the <see cref="E:System.Timers.Timer.Elapsed" /> event each time the interval elapses; <see langword="false" /> if it should raise the <see cref="E:System.Timers.Timer.Elapsed" /> event only once, after the first time the interval elapses.</span></span> <span data-ttu-id="37dda-174">O padrão é <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="37dda-174">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37dda-175">Se o <xref:System.Timers.Timer> já está habilitado quando o <xref:System.Timers.Timer.Start%2A> método é chamado, o intervalo é redefinido.</span><span class="sxs-lookup"><span data-stu-id="37dda-175">If the <xref:System.Timers.Timer> is already enabled when the <xref:System.Timers.Timer.Start%2A> method is called, the interval is reset.</span></span> <span data-ttu-id="37dda-176">Se <xref:System.Timers.Timer.AutoReset%2A> é `false`, o <xref:System.Timers.Timer.Start%2A> método deve ser chamado para iniciar a contagem novamente.</span><span class="sxs-lookup"><span data-stu-id="37dda-176">If <xref:System.Timers.Timer.AutoReset%2A> is `false`, the <xref:System.Timers.Timer.Start%2A> method must be called in order to start the count again.</span></span>  
  
 <span data-ttu-id="37dda-177">Redefinir o intervalo afeta quando o <xref:System.Timers.Timer.Elapsed> é gerado.</span><span class="sxs-lookup"><span data-stu-id="37dda-177">Resetting the interval affects when the <xref:System.Timers.Timer.Elapsed> event is raised.</span></span> <span data-ttu-id="37dda-178">Por exemplo, se você definir o intervalo de 5 segundos e, em seguida, defina o <xref:System.Timers.Timer.Enabled%2A> propriedade `true`, inicia a contagem no horário <xref:System.Timers.Timer.Enabled%2A> está definido.</span><span class="sxs-lookup"><span data-stu-id="37dda-178">For example, if you set the interval to 5 seconds and then set the <xref:System.Timers.Timer.Enabled%2A> property to `true`, the count starts at the time <xref:System.Timers.Timer.Enabled%2A> is set.</span></span> <span data-ttu-id="37dda-179">Se você redefinir o intervalo de 10 segundos quando a contagem é de 3 segundos, o <xref:System.Timers.Timer.Elapsed> é gerado pela primeira vez 13 segundos após o <xref:System.Timers.Timer.Enabled%2A> propriedade foi definida como `true`.</span><span class="sxs-lookup"><span data-stu-id="37dda-179">If you reset the interval to 10 seconds when the count is 3 seconds, the <xref:System.Timers.Timer.Elapsed> event is raised for the first time 13 seconds after the <xref:System.Timers.Timer.Enabled%2A> property was set to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37dda-180">O exemplo a seguir cria um <xref:System.Timers.Timer> cujo <xref:System.Timers.Timer.Elapsed> evento ser acionado depois de 1,5 segundos.</span><span class="sxs-lookup"><span data-stu-id="37dda-180">The following example creates a <xref:System.Timers.Timer> whose <xref:System.Timers.Timer.Elapsed> event fires after 1.5 seconds.</span></span> <span data-ttu-id="37dda-181">Seu manipulador de eventos, em seguida, exibe "Hello World!"</span><span class="sxs-lookup"><span data-stu-id="37dda-181">Its event handler then displays "Hello World!"</span></span> <span data-ttu-id="37dda-182">no console.</span><span class="sxs-lookup"><span data-stu-id="37dda-182">on the console.</span></span>  
  
 [!code-cpp[Classic Timer.Timer1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer.Timer1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/CS/source.cs#1)]
 [!code-vb[Classic Timer.Timer1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.BeginInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginInit();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.BeginInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="37dda-183">Começa a inicialização do tempo de execução de um <see cref="T:System.Timers.Timer" /> que é usado em um formulário ou por outro componente.</span><span class="sxs-lookup"><span data-stu-id="37dda-183">Begins the run-time initialization of a <see cref="T:System.Timers.Timer" /> that is used on a form or by another component.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37dda-184">O [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] design ambiente usa esse método para iniciar a inicialização de um componente que é usado em um formulário ou por outro componente.</span><span class="sxs-lookup"><span data-stu-id="37dda-184">The [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] design environment uses this method to start the initialization of a component that is used on a form or by another component.</span></span> <span data-ttu-id="37dda-185">O <xref:System.Timers.Timer.EndInit%2A> método termina a inicialização.</span><span class="sxs-lookup"><span data-stu-id="37dda-185">The <xref:System.Timers.Timer.EndInit%2A> method ends the initialization.</span></span> <span data-ttu-id="37dda-186">Usando o <xref:System.Timers.Timer.BeginInit%2A> e <xref:System.Timers.Timer.EndInit%2A> métodos impede que o controle que está sendo usada antes de ser totalmente inicializado.</span><span class="sxs-lookup"><span data-stu-id="37dda-186">Using the <xref:System.Timers.Timer.BeginInit%2A> and <xref:System.Timers.Timer.EndInit%2A> methods prevents the control from being used before it is fully initialized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.EndInit" />
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="37dda-187">Libera os recursos usados pelo <see cref="T:System.Timers.Timer" />.</span><span class="sxs-lookup"><span data-stu-id="37dda-187">Releases the resources used by the <see cref="T:System.Timers.Timer" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37dda-188">O <xref:System.Timers.Timer.Close%2A> método por sua vez chama o `Dispose` método.</span><span class="sxs-lookup"><span data-stu-id="37dda-188">The <xref:System.Timers.Timer.Close%2A> method in turn calls the `Dispose` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="37dda-189"><see langword="true" /> para liberar recursos gerenciados e não gerenciados; <see langword="false" /> para liberar apenas recursos não gerenciados.</span><span class="sxs-lookup"><span data-stu-id="37dda-189"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="37dda-190">Libera todos os recursos usados pelo <see cref="T:System.Timers.Timer" /> atual.</span><span class="sxs-lookup"><span data-stu-id="37dda-190">Releases all resources used by the current <see cref="T:System.Timers.Timer" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Elapsed">
      <MemberSignature Language="C#" Value="public event System.Timers.ElapsedEventHandler Elapsed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Timers.ElapsedEventHandler Elapsed" />
      <MemberSignature Language="DocId" Value="E:System.Timers.Timer.Elapsed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Elapsed As ElapsedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Timers::ElapsedEventHandler ^ Elapsed;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Timers.TimersDescription("Occurs when the Interval has elapsed.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Timers.ElapsedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="37dda-191">Ocorre quando o intervalo termina.</span><span class="sxs-lookup"><span data-stu-id="37dda-191">Occurs when the interval elapses.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37dda-192">O <xref:System.Timers.Timer.Elapsed> é gerado se o <xref:System.Timers.Timer.Enabled%2A> é de propriedade `true` e o intervalo de tempo (em milissegundos) definido pelo <xref:System.Timers.Timer.Interval%2A> ter decorrido de propriedade.</span><span class="sxs-lookup"><span data-stu-id="37dda-192">The <xref:System.Timers.Timer.Elapsed> event is raised if the <xref:System.Timers.Timer.Enabled%2A> property is `true` and the time interval (in milliseconds) defined by the <xref:System.Timers.Timer.Interval%2A> property elapses.</span></span> <span data-ttu-id="37dda-193">Se o <xref:System.Timers.Timer.AutoReset%2A> é de propriedade `true`, o evento é gerado repetidamente em um intervalo definido pelo <xref:System.Timers.Timer.Interval%2A> propriedade; caso contrário, o evento é gerado apenas uma vez, na primeira vez o <xref:System.Timers.Timer.Interval%2A> valor tiver decorrido.</span><span class="sxs-lookup"><span data-stu-id="37dda-193">If the <xref:System.Timers.Timer.AutoReset%2A> property is `true`, the event is raised repeatedly at an interval defined by the <xref:System.Timers.Timer.Interval%2A> property; otherwise, the event is raised only once, the first time the <xref:System.Timers.Timer.Interval%2A> value elapses.</span></span>  
  
 <span data-ttu-id="37dda-194">Se <xref:System.Timers.Timer.Interval%2A> é definido após o <xref:System.Timers.Timer> tiver iniciado, a contagem é redefinida.</span><span class="sxs-lookup"><span data-stu-id="37dda-194">If <xref:System.Timers.Timer.Interval%2A> is set after the <xref:System.Timers.Timer> has started, the count is reset.</span></span> <span data-ttu-id="37dda-195">Por exemplo, se você definir o intervalo de 5 segundos e, em seguida, definir <xref:System.Timers.Timer.Enabled%2A> para `true`, inicia a contagem no horário <xref:System.Timers.Timer.Enabled%2A> está definido.</span><span class="sxs-lookup"><span data-stu-id="37dda-195">For example, if you set the interval to 5 seconds and then set <xref:System.Timers.Timer.Enabled%2A> to `true`, the count starts at the time <xref:System.Timers.Timer.Enabled%2A> is set.</span></span> <span data-ttu-id="37dda-196">Se você redefinir o intervalo de 10 segundos quando a contagem é de 3 segundos, o <xref:System.Timers.Timer.Elapsed> é gerado pela primeira vez 13 segundos após <xref:System.Timers.Timer.Enabled%2A> foi definido como `true`.</span><span class="sxs-lookup"><span data-stu-id="37dda-196">If you reset the interval to 10 seconds when count is 3 seconds, the <xref:System.Timers.Timer.Elapsed> event is raised for the first time 13 seconds after <xref:System.Timers.Timer.Enabled%2A> was set to `true`.</span></span>  
  
 <span data-ttu-id="37dda-197">Se o <xref:System.Timers.Timer.SynchronizingObject%2A> é de propriedade `null`, o <xref:System.Timers.Timer.Elapsed> evento é gerado em um <xref:System.Threading.ThreadPool> thread.</span><span class="sxs-lookup"><span data-stu-id="37dda-197">If the <xref:System.Timers.Timer.SynchronizingObject%2A> property is `null`,the <xref:System.Timers.Timer.Elapsed> event is raised on a <xref:System.Threading.ThreadPool> thread.</span></span> <span data-ttu-id="37dda-198">Se o processamento do <xref:System.Timers.Timer.Elapsed> duração de evento mais de <xref:System.Timers.Timer.Interval%2A>, o evento pode ser gerado novamente em outro <xref:System.Threading.ThreadPool> thread.</span><span class="sxs-lookup"><span data-stu-id="37dda-198">If the processing of the <xref:System.Timers.Timer.Elapsed> event lasts longer than <xref:System.Timers.Timer.Interval%2A>, the event might be raised again on another <xref:System.Threading.ThreadPool> thread.</span></span> <span data-ttu-id="37dda-199">Nessa situação, o manipulador de eventos deve ser reentrante.</span><span class="sxs-lookup"><span data-stu-id="37dda-199">In this situation, the event handler should be reentrant.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="37dda-200">O método de manipulação de eventos pode ser executado em um thread ao mesmo tempo que outro thread chama o <xref:System.Timers.Timer.Stop%2A> método ou define o <xref:System.Timers.Timer.Enabled%2A> propriedade `false`.</span><span class="sxs-lookup"><span data-stu-id="37dda-200">The event-handling method might run on one thread at the same time that another thread calls the <xref:System.Timers.Timer.Stop%2A> method or sets the <xref:System.Timers.Timer.Enabled%2A> property to `false`.</span></span> <span data-ttu-id="37dda-201">Isso pode resultar no <xref:System.Timers.Timer.Elapsed> evento que está sendo gerado depois que o timer é interrompido.</span><span class="sxs-lookup"><span data-stu-id="37dda-201">This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the timer is stopped.</span></span> <span data-ttu-id="37dda-202">O exemplo de código para o <xref:System.Timers.Timer.Stop%2A> método mostra uma maneira de evitar essa condição de corrida.</span><span class="sxs-lookup"><span data-stu-id="37dda-202">The example code for the <xref:System.Timers.Timer.Stop%2A> method shows one way to avoid this race condition.</span></span>  
  
 <span data-ttu-id="37dda-203">Mesmo se <xref:System.Timers.Timer.SynchronizingObject%2A> não é `null`, <xref:System.Timers.Timer.Elapsed> eventos podem ocorrer após a <xref:System.Timers.Timer.Dispose%2A> ou <xref:System.Timers.Timer.Stop%2A> método foi chamado ou depois o <xref:System.Timers.Timer.Enabled%2A> propriedade foi definida `false`, pois o sinal para gerar o <xref:System.Timers.Timer.Elapsed> evento sempre está na fila para execução em um pool de threads.</span><span class="sxs-lookup"><span data-stu-id="37dda-203">Even if <xref:System.Timers.Timer.SynchronizingObject%2A> is not `null`, <xref:System.Timers.Timer.Elapsed> events can occur after the <xref:System.Timers.Timer.Dispose%2A> or <xref:System.Timers.Timer.Stop%2A> method has been called or after the <xref:System.Timers.Timer.Enabled%2A> property has been set to `false`, because the signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a thread pool thread.</span></span> <span data-ttu-id="37dda-204">Uma maneira de resolver essa condição de corrida é definir um sinalizador que informa o manipulador de eventos para o <xref:System.Timers.Timer.Elapsed> evento para ignorar os eventos subsequentes.</span><span class="sxs-lookup"><span data-stu-id="37dda-204">One way to resolve this race condition is to set a flag that tells the event handler for the <xref:System.Timers.Timer.Elapsed> event to ignore subsequent events.</span></span>  
  
 <span data-ttu-id="37dda-205">O <xref:System.Timers.Timer> componente Captura e suprime todas as exceções lançadas por manipuladores de eventos para o <xref:System.Timers.Timer.Elapsed> evento.</span><span class="sxs-lookup"><span data-stu-id="37dda-205">The <xref:System.Timers.Timer> component catches and suppresses all exceptions thrown by event handlers for the <xref:System.Timers.Timer.Elapsed> event.</span></span> <span data-ttu-id="37dda-206">Esse comportamento está sujeita a alterações em versões futuras do .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="37dda-206">This behavior is subject to change in future releases of the .NET Framework.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37dda-207">O exemplo a seguir cria um <xref:System.Timers.Timer> objeto que dispara seu <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> evento a cada dois segundos (2000 milissegundos), define um manipulador de eventos para o evento e inicia o temporizador.</span><span class="sxs-lookup"><span data-stu-id="37dda-207">The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer.</span></span> <span data-ttu-id="37dda-208">O manipulador de eventos exibe o valor da <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> propriedade cada vez que ele é gerado.</span><span class="sxs-lookup"><span data-stu-id="37dda-208">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span>  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
        <altmember cref="T:System.Timers.ElapsedEventArgs" />
        <altmember cref="T:System.Timers.ElapsedEventHandler" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Timers.TimersDescription("Indicates whether the timer is enabled to fire events at a defined interval.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="37dda-209">Obtém ou define um valor que indica se o <see cref="T:System.Timers.Timer" /> deve acionar o evento <see cref="E:System.Timers.Timer.Elapsed" />.</span><span class="sxs-lookup"><span data-stu-id="37dda-209">Gets or sets a value indicating whether the <see cref="T:System.Timers.Timer" /> should raise the <see cref="E:System.Timers.Timer.Elapsed" /> event.</span></span></summary>
        <value>
          <span data-ttu-id="37dda-210"><see langword="true" /> caso o <see cref="T:System.Timers.Timer" /> deva acionar o evento <see cref="E:System.Timers.Timer.Elapsed" />; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="37dda-210"><see langword="true" /> if the <see cref="T:System.Timers.Timer" /> should raise the <see cref="E:System.Timers.Timer.Elapsed" /> event; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="37dda-211">O padrão é <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="37dda-211">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37dda-212">Configuração <xref:System.Timers.Timer.Enabled%2A> para `true` é o mesmo que chamar <xref:System.Timers.Timer.Start%2A>, enquanto a configuração <xref:System.Timers.Timer.Enabled%2A> para `false` é o mesmo que chamar <xref:System.Timers.Timer.Stop%2A>.</span><span class="sxs-lookup"><span data-stu-id="37dda-212">Setting <xref:System.Timers.Timer.Enabled%2A> to `true` is the same as calling <xref:System.Timers.Timer.Start%2A>, while setting <xref:System.Timers.Timer.Enabled%2A> to `false` is the same as calling <xref:System.Timers.Timer.Stop%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="37dda-213">O sinal para gerar o <xref:System.Timers.Timer.Elapsed> evento sempre na fila para execução em um <xref:System.Threading.ThreadPool> thread.</span><span class="sxs-lookup"><span data-stu-id="37dda-213">The signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a <xref:System.Threading.ThreadPool> thread.</span></span> <span data-ttu-id="37dda-214">Isso pode resultar no <xref:System.Timers.Timer.Elapsed> evento que está sendo gerado após o <xref:System.Timers.Timer.Enabled%2A> está definida como `false`.</span><span class="sxs-lookup"><span data-stu-id="37dda-214">This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the <xref:System.Timers.Timer.Enabled%2A> property is set to `false`.</span></span> <span data-ttu-id="37dda-215">O exemplo de código para o <xref:System.Timers.Timer.Stop%2A> método mostra uma maneira de solucionar essa condição de corrida.</span><span class="sxs-lookup"><span data-stu-id="37dda-215">The code example for the <xref:System.Timers.Timer.Stop%2A> method shows one way to work around this race condition.</span></span>  
  
 <span data-ttu-id="37dda-216">Se <xref:System.Timers.Timer.Enabled%2A> é definido como `true` e <xref:System.Timers.Timer.AutoReset%2A> é definido como `false`, o <xref:System.Timers.Timer> gera o <xref:System.Timers.Timer.Elapsed> eventos somente uma vez, na primeira vez que o intervalo expira.</span><span class="sxs-lookup"><span data-stu-id="37dda-216">If <xref:System.Timers.Timer.Enabled%2A> is set to `true` and <xref:System.Timers.Timer.AutoReset%2A> is set to `false`, the <xref:System.Timers.Timer> raises the <xref:System.Timers.Timer.Elapsed> event only once, the first time the interval elapses.</span></span>  
  
 <span data-ttu-id="37dda-217">Se o intervalo é definido após o <xref:System.Timers.Timer> tiver iniciado, a contagem é redefinida.</span><span class="sxs-lookup"><span data-stu-id="37dda-217">If the interval is set after the <xref:System.Timers.Timer> has started, the count is reset.</span></span> <span data-ttu-id="37dda-218">Por exemplo, se você definir o intervalo de 5 segundos e, em seguida, defina o <xref:System.Timers.Timer.Enabled%2A> propriedade `true`, inicia a contagem no horário <xref:System.Timers.Timer.Enabled%2A> está definido.</span><span class="sxs-lookup"><span data-stu-id="37dda-218">For example, if you set the interval to 5 seconds and then set the <xref:System.Timers.Timer.Enabled%2A> property to `true`, the count starts at the time <xref:System.Timers.Timer.Enabled%2A> is set.</span></span> <span data-ttu-id="37dda-219">Se você redefinir o intervalo de 10 segundos quando a contagem é de 3 segundos, o <xref:System.Timers.Timer.Elapsed> é gerado pela primeira vez 13 segundos após <xref:System.Timers.Timer.Enabled%2A> foi definido como `true`.</span><span class="sxs-lookup"><span data-stu-id="37dda-219">If you reset the interval to 10 seconds when count is 3 seconds, the <xref:System.Timers.Timer.Elapsed> event is raised for the first time 13 seconds after <xref:System.Timers.Timer.Enabled%2A> was set to `true`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="37dda-220">Alguns designers visuais, como aqueles no Microsoft Visual Studio, defina o <xref:System.Timers.Timer.Enabled%2A> propriedade `true` ao inserir um novo <xref:System.Timers.Timer>.</span><span class="sxs-lookup"><span data-stu-id="37dda-220">Some visual designers, such as those in Microsoft Visual Studio, set the <xref:System.Timers.Timer.Enabled%2A> property to `true` when inserting a new <xref:System.Timers.Timer>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37dda-221">O exemplo a seguir cria um <xref:System.Timers.Timer> objeto que dispara seu <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> evento a cada dois segundos (2000 milissegundos), define um manipulador de eventos para o evento e inicia o temporizador.</span><span class="sxs-lookup"><span data-stu-id="37dda-221">The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2000 milliseconds), sets up an event handler for the  event, and starts the timer.</span></span> <span data-ttu-id="37dda-222">O manipulador de eventos exibe o valor da <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> propriedade cada vez que ele é gerado.</span><span class="sxs-lookup"><span data-stu-id="37dda-222">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span>  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="37dda-223">Essa propriedade não pode ser definida porque o temporizador foi descartado.</span><span class="sxs-lookup"><span data-stu-id="37dda-223">This property cannot be set because the timer has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="37dda-224">A propriedade <see cref="P:System.Timers.Timer.Interval" /> foi definida como um valor maior que <see cref="F:System.Int32.MaxValue" /> antes de o temporizador ser habilitado.</span><span class="sxs-lookup"><span data-stu-id="37dda-224">The <see cref="P:System.Timers.Timer.Interval" /> property was set to a value greater than <see cref="F:System.Int32.MaxValue" /> before the timer was enabled.</span></span></exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="M:System.Timers.Timer.Stop" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.EndInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndInit();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.EndInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="37dda-225">Termina a inicialização do tempo de execução de um <see cref="T:System.Timers.Timer" /> que é usado em um formulário ou por outro componente.</span><span class="sxs-lookup"><span data-stu-id="37dda-225">Ends the run-time initialization of a <see cref="T:System.Timers.Timer" /> that is used on a form or by another component.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37dda-226">O [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] design ambiente usa esse método para terminar a inicialização de um componente que é usado em um formulário ou por outro componente.</span><span class="sxs-lookup"><span data-stu-id="37dda-226">The [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] design environment uses this method to end the initialization of a component that is used on a form or by another component.</span></span> <span data-ttu-id="37dda-227">O <xref:System.Timers.Timer.BeginInit%2A> método inicia a inicialização.</span><span class="sxs-lookup"><span data-stu-id="37dda-227">The <xref:System.Timers.Timer.BeginInit%2A> method starts the initialization.</span></span> <span data-ttu-id="37dda-228">Usando o <xref:System.Timers.Timer.BeginInit%2A> e <xref:System.Timers.Timer.EndInit%2A> métodos impede que o controle que está sendo usada antes de ser totalmente inicializado.</span><span class="sxs-lookup"><span data-stu-id="37dda-228">Using the <xref:System.Timers.Timer.BeginInit%2A> and <xref:System.Timers.Timer.EndInit%2A> methods prevents the control from being used before it is fully initialized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Timers.Timer.BeginInit" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="Interval">
      <MemberSignature Language="C#" Value="public double Interval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Interval" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Interval" />
      <MemberSignature Language="VB.NET" Value="Public Property Interval As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Interval { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(100)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.SettingsBindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Timers.TimersDescription("The number of milliseconds between timer events.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="37dda-229">Obtém ou define o intervalo, expressado em milissegundos, no qual gerar o evento <see cref="E:System.Timers.Timer.Elapsed" />.</span><span class="sxs-lookup"><span data-stu-id="37dda-229">Gets or sets the interval, expressed in milliseconds, at which to raise the <see cref="E:System.Timers.Timer.Elapsed" /> event.</span></span></summary>
        <value><span data-ttu-id="37dda-230">O tempo, em milissegundos, entre eventos <see cref="E:System.Timers.Timer.Elapsed" />.</span><span class="sxs-lookup"><span data-stu-id="37dda-230">The time, in milliseconds, between <see cref="E:System.Timers.Timer.Elapsed" /> events.</span></span> <span data-ttu-id="37dda-231">O valor deve ser maior que zero e menor ou igual a <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="37dda-231">The value must be greater than zero, and less than or equal to <see cref="F:System.Int32.MaxValue" />.</span></span> <span data-ttu-id="37dda-232">O padrão é 100 milissegundos.</span><span class="sxs-lookup"><span data-stu-id="37dda-232">The default is 100 milliseconds.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37dda-233">Você usa o <xref:System.Timers.Timer.Interval%2A> propriedade para determinar a frequência em que o <xref:System.Timers.Timer.Elapsed> evento é acionado.</span><span class="sxs-lookup"><span data-stu-id="37dda-233">You use the <xref:System.Timers.Timer.Interval%2A> property to determine the frequency at which the <xref:System.Timers.Timer.Elapsed> event is fired.</span></span> <span data-ttu-id="37dda-234">Porque o <xref:System.Timers.Timer> classe depende do relógio do sistema, ele tem a mesma resolução que o relógio do sistema.</span><span class="sxs-lookup"><span data-stu-id="37dda-234">Because the <xref:System.Timers.Timer> class depends on the system clock, it has the same resolution as the system clock.</span></span> <span data-ttu-id="37dda-235">Isso significa que o <xref:System.Timers.Timer.Elapsed> evento será acionado em um intervalo definido pela resolução do relógio do sistema se o <xref:System.Timers.Timer.Interval%2A> propriedade é menor do que a resolução do relógio do sistema.</span><span class="sxs-lookup"><span data-stu-id="37dda-235">This means that the <xref:System.Timers.Timer.Elapsed> event will fire at an interval defined by the resolution of the system clock if the <xref:System.Timers.Timer.Interval%2A> property is less than the resolution of the system clock.</span></span> <span data-ttu-id="37dda-236">O exemplo a seguir define o <xref:System.Timers.Timer.Interval%2A> propriedade 5 milissegundos.</span><span class="sxs-lookup"><span data-stu-id="37dda-236">The following example sets the <xref:System.Timers.Timer.Interval%2A> property to 5 milliseconds.</span></span> <span data-ttu-id="37dda-237">Quando executado em um [!INCLUDE[win7](~/includes/win7-md.md)] sistema cujo relógio do sistema com uma resolução de aproximadamente 15 milissegundos, o evento é acionado, aproximadamente a cada 15 milissegundos, em vez da cada 5 milissegundos.</span><span class="sxs-lookup"><span data-stu-id="37dda-237">When run on a [!INCLUDE[win7](~/includes/win7-md.md)] system whose system clock has a resolution of approximately 15 milliseconds, the event fires approximately every 15 milliseconds rather than every 5 milliseconds.</span></span>  
  
 [!code-csharp[System.Timers.Timer.Interval#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer.interval/cs/interval2.cs#1)]
 [!code-vb[System.Timers.Timer.Interval#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer.interval/vb/interval2.vb#1)]  
  
 <span data-ttu-id="37dda-238">Você pode usar o código a seguir para determinar a resolução do relógio do sistema no sistema atual:</span><span class="sxs-lookup"><span data-stu-id="37dda-238">You can use the following code to determine the resolution of the system clock on the current system:</span></span>  
  
 [!code-csharp[System.Timers.Timer.Interval#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer.interval/cs/resolution1.cs#2)]
 [!code-vb[System.Timers.Timer.Interval#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer.interval/vb/resolution1.vb#2)]  
  
 <span data-ttu-id="37dda-239">Se seu aplicativo requer uma resolução maior do que o oferecido pelo <xref:System.Timers.Timer> classe ou o relógio do sistema, use os timers de multimídia de alta resolução, consulte [como: usar o Timer High-Resolution](http://msdn.microsoft.com/library/aa964692.aspx).</span><span class="sxs-lookup"><span data-stu-id="37dda-239">If your app requires greater resolution than that offered by the <xref:System.Timers.Timer> class or the system clock, use the high-resolution multimedia timers; see [How to: Use the High-Resolution Timer](http://msdn.microsoft.com/library/aa964692.aspx).</span></span>  
  
 <span data-ttu-id="37dda-240">Se o intervalo é definido após o <xref:System.Timers.Timer> tiver iniciado, a contagem é redefinida.</span><span class="sxs-lookup"><span data-stu-id="37dda-240">If the interval is set after the <xref:System.Timers.Timer> has started, the count is reset.</span></span> <span data-ttu-id="37dda-241">Por exemplo, se você definir o intervalo de 5 segundos e, em seguida, defina o <xref:System.Timers.Timer.Enabled%2A> propriedade `true`, inicia a contagem no horário <xref:System.Timers.Timer.Enabled%2A> está definido.</span><span class="sxs-lookup"><span data-stu-id="37dda-241">For example, if you set the interval to 5 seconds and then set the <xref:System.Timers.Timer.Enabled%2A> property to `true`, the count starts at the time <xref:System.Timers.Timer.Enabled%2A> is set.</span></span> <span data-ttu-id="37dda-242">Se você redefinir o intervalo de 10 segundos quando a contagem é de 3 segundos, o <xref:System.Timers.Timer.Elapsed> é gerado pela primeira vez 13 segundos após <xref:System.Timers.Timer.Enabled%2A> foi definido como `true`.</span><span class="sxs-lookup"><span data-stu-id="37dda-242">If you reset the interval to 10 seconds when count is 3 seconds, the <xref:System.Timers.Timer.Elapsed> event is raised for the first time 13 seconds after <xref:System.Timers.Timer.Enabled%2A> was set to `true`.</span></span>  
  
 <span data-ttu-id="37dda-243">Se <xref:System.Timers.Timer.Enabled%2A> é definido como `true` e <xref:System.Timers.Timer.AutoReset%2A> é definido como `false`, o <xref:System.Timers.Timer> gera o <xref:System.Timers.Timer.Elapsed> eventos somente uma vez, na primeira vez que o intervalo expira.</span><span class="sxs-lookup"><span data-stu-id="37dda-243">If <xref:System.Timers.Timer.Enabled%2A> is set to `true` and <xref:System.Timers.Timer.AutoReset%2A> is set to `false`, the <xref:System.Timers.Timer> raises the <xref:System.Timers.Timer.Elapsed> event only once, the first time the interval elapses.</span></span> <span data-ttu-id="37dda-244"><xref:System.Timers.Timer.Enabled%2A> em seguida, é definido como `false`.</span><span class="sxs-lookup"><span data-stu-id="37dda-244"><xref:System.Timers.Timer.Enabled%2A> is then set to `false`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="37dda-245">Se <xref:System.Timers.Timer.Enabled%2A> e <xref:System.Timers.Timer.AutoReset%2A> são definidos como `false`, e o timer anteriormente tiver sido habilitado, definindo o <xref:System.Timers.Timer.Interval%2A> propriedade faz com que o <xref:System.Timers.Timer.Elapsed> evento ser gerado uma vez, como se o <xref:System.Timers.Timer.Enabled%2A> propriedade tiver sido definida como `true`.</span><span class="sxs-lookup"><span data-stu-id="37dda-245">If <xref:System.Timers.Timer.Enabled%2A> and <xref:System.Timers.Timer.AutoReset%2A> are both set to `false`, and the timer has previously been enabled, setting the <xref:System.Timers.Timer.Interval%2A> property causes the <xref:System.Timers.Timer.Elapsed> event to be raised once, as if the <xref:System.Timers.Timer.Enabled%2A> property had been set to `true`.</span></span> <span data-ttu-id="37dda-246">Para definir o intervalo sem gerar o evento, você pode definir temporariamente o <xref:System.Timers.Timer.Enabled%2A> propriedade `true`, defina o <xref:System.Timers.Timer.Interval%2A> propriedade para o intervalo de tempo desejado e, em seguida, defina imediatamente o <xref:System.Timers.Timer.Enabled%2A> propriedade `false`.</span><span class="sxs-lookup"><span data-stu-id="37dda-246">To set the interval without raising the event, you can temporarily set the <xref:System.Timers.Timer.Enabled%2A> property to `true`, set the <xref:System.Timers.Timer.Interval%2A> property to the desired time interval, and then immediately set the <xref:System.Timers.Timer.Enabled%2A> property back to `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37dda-247">O exemplo a seguir cria um <xref:System.Timers.Timer> objeto que dispara seu <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> evento a cada dois segundos (2000 milissegundos), define um manipulador de eventos para o evento e inicia o temporizador.</span><span class="sxs-lookup"><span data-stu-id="37dda-247">The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer.</span></span> <span data-ttu-id="37dda-248">O manipulador de eventos exibe o valor da <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> propriedade cada vez que ele é gerado.</span><span class="sxs-lookup"><span data-stu-id="37dda-248">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span>  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="37dda-249">O intervalo é menor ou igual a zero.</span><span class="sxs-lookup"><span data-stu-id="37dda-249">The interval is less than or equal to zero.</span></span>  
  
 <span data-ttu-id="37dda-250">- ou -</span><span class="sxs-lookup"><span data-stu-id="37dda-250">-or-</span></span>  
  
 <span data-ttu-id="37dda-251">O intervalo é maior que <see cref="F:System.Int32.MaxValue" /> e o timer está habilitado no momento.</span><span class="sxs-lookup"><span data-stu-id="37dda-251">The interval is greater than <see cref="F:System.Int32.MaxValue" />, and the timer is currently enabled.</span></span> <span data-ttu-id="37dda-252">(Se o timer não estiver habilitado no momento, nenhuma exceção será lançada até que ele seja habilitado.)</span><span class="sxs-lookup"><span data-stu-id="37dda-252">(If the timer is not currently enabled, no exception is thrown until it becomes enabled.)</span></span></exception>
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="Site">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.ISite Site { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISite Site" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Site" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Site As ISite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::ComponentModel::ISite ^ Site { System::ComponentModel::ISite ^ get(); void set(System::ComponentModel::ISite ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="37dda-253">Obtém ou define o site que associa o <see cref="T:System.Timers.Timer" /> ao respectivo contêiner no modo de design.</span><span class="sxs-lookup"><span data-stu-id="37dda-253">Gets or sets the site that binds the <see cref="T:System.Timers.Timer" /> to its container in design mode.</span></span></summary>
        <value><span data-ttu-id="37dda-254">Uma interface <see cref="T:System.ComponentModel.ISite" /> que representa o site que associa o objeto <see cref="T:System.Timers.Timer" /> ao respectivo contêiner.</span><span class="sxs-lookup"><span data-stu-id="37dda-254">An <see cref="T:System.ComponentModel.ISite" /> interface representing the site that binds the <see cref="T:System.Timers.Timer" /> object to its container.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37dda-255">Sites de associar um <xref:System.ComponentModel.Component> para um <xref:System.ComponentModel.Container> e habilitar a comunicação entre eles, bem como fornecer uma maneira para o contêiner gerenciar seus componentes.</span><span class="sxs-lookup"><span data-stu-id="37dda-255">Sites bind a <xref:System.ComponentModel.Component> to a <xref:System.ComponentModel.Container> and enable communication between them, as well as providing a way for the container to manage its components.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="37dda-256">Começa a acionar o evento <see cref="E:System.Timers.Timer.Elapsed" /> definindo <see cref="P:System.Timers.Timer.Enabled" /> como <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="37dda-256">Starts raising the <see cref="E:System.Timers.Timer.Elapsed" /> event by setting <see cref="P:System.Timers.Timer.Enabled" /> to <see langword="true" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37dda-257">Se <xref:System.Timers.Timer.Start%2A> é chamado e <xref:System.Timers.Timer.AutoReset%2A> é definido como `false`, o <xref:System.Timers.Timer> gera o <xref:System.Timers.Timer.Elapsed> eventos somente uma vez, na primeira vez que o intervalo expira.</span><span class="sxs-lookup"><span data-stu-id="37dda-257">If <xref:System.Timers.Timer.Start%2A> is called and <xref:System.Timers.Timer.AutoReset%2A> is set to `false`, the <xref:System.Timers.Timer> raises the <xref:System.Timers.Timer.Elapsed> event only once, the first time the interval elapses.</span></span> <span data-ttu-id="37dda-258">Se <xref:System.Timers.Timer.Start%2A> é chamado e <xref:System.Timers.Timer.AutoReset%2A> é `true`, o <xref:System.Timers.Timer> gera o <xref:System.Timers.Timer.Elapsed> hora do evento primeiro o intervalo expira e continua a gerar o evento no intervalo especificado.</span><span class="sxs-lookup"><span data-stu-id="37dda-258">If <xref:System.Timers.Timer.Start%2A> is called and <xref:System.Timers.Timer.AutoReset%2A> is `true`, the <xref:System.Timers.Timer> raises the <xref:System.Timers.Timer.Elapsed> event the first time the interval elapses and continues to raise the event on the specified interval.</span></span>  
  
 <span data-ttu-id="37dda-259">Você também pode iniciar intervalo definindo <xref:System.Timers.Timer.Enabled%2A> para `true`.</span><span class="sxs-lookup"><span data-stu-id="37dda-259">You can also start timing by setting <xref:System.Timers.Timer.Enabled%2A> to `true`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="37dda-260">Se <xref:System.Timers.Timer.AutoReset%2A> é `false`, o <xref:System.Timers.Timer.Start%2A> método deve ser chamado para iniciar a contagem novamente.</span><span class="sxs-lookup"><span data-stu-id="37dda-260">If <xref:System.Timers.Timer.AutoReset%2A> is `false`, the <xref:System.Timers.Timer.Start%2A> method must be called in order to start the count again.</span></span>  
  
 <span data-ttu-id="37dda-261">Uma chamada para o <xref:System.Timers.Timer.Start%2A> método quando o timer está habilitado não tem nenhum efeito.</span><span class="sxs-lookup"><span data-stu-id="37dda-261">A call to the <xref:System.Timers.Timer.Start%2A> method when the timer is enabled has no effect.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="37dda-262">O <see cref="T:System.Timers.Timer" /> é criado com um intervalo maior ou igual a <see cref="F:System.Int32.MaxValue" /> + 1 ou definido como um intervalo menor que zero.</span><span class="sxs-lookup"><span data-stu-id="37dda-262">The <see cref="T:System.Timers.Timer" /> is created with an interval equal to or greater than <see cref="F:System.Int32.MaxValue" /> + 1, or set to an interval less than zero.</span></span></exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Stop" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="37dda-263">Para de acionar o evento <see cref="E:System.Timers.Timer.Elapsed" /> definindo <see cref="P:System.Timers.Timer.Enabled" /> como <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="37dda-263">Stops raising the <see cref="E:System.Timers.Timer.Elapsed" /> event by setting <see cref="P:System.Timers.Timer.Enabled" /> to <see langword="false" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37dda-264">Você também pode parar o controle de tempo definindo <xref:System.Timers.Timer.Enabled%2A> para `false`.</span><span class="sxs-lookup"><span data-stu-id="37dda-264">You can also stop timing by setting <xref:System.Timers.Timer.Enabled%2A> to `false`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="37dda-265">O sinal para gerar o <xref:System.Timers.Timer.Elapsed> evento sempre na fila para execução em um <xref:System.Threading.ThreadPool> thread, portanto o método de manipulação de eventos pode ser executado em um thread, ao mesmo tempo que uma chamada para o <xref:System.Timers.Timer.Stop%2A> método é executado em outro thread.</span><span class="sxs-lookup"><span data-stu-id="37dda-265">The signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a <xref:System.Threading.ThreadPool> thread, so the event-handling method might run on one thread at the same time that a call to the <xref:System.Timers.Timer.Stop%2A> method runs on another thread.</span></span> <span data-ttu-id="37dda-266">Isso pode resultar no <xref:System.Timers.Timer.Elapsed> evento que está sendo gerado após o <xref:System.Timers.Timer.Stop%2A> método é chamado.</span><span class="sxs-lookup"><span data-stu-id="37dda-266">This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the <xref:System.Timers.Timer.Stop%2A> method is called.</span></span> <span data-ttu-id="37dda-267">O exemplo de código na próxima seção mostra uma maneira de solucionar essa condição de corrida.</span><span class="sxs-lookup"><span data-stu-id="37dda-267">The code example in the next section shows one way to work around this race condition.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37dda-268">O exemplo a seguir cria um `System.Timers.Timer` objeto que dispara seu <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> evento a cada dois segundos (2.000 milissegundos), define um manipulador de eventos para o evento e inicia o temporizador.</span><span class="sxs-lookup"><span data-stu-id="37dda-268">The following example instantiates a `System.Timers.Timer` object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2,000 milliseconds), sets up an event handler for the  event, and starts the timer.</span></span> <span data-ttu-id="37dda-269">O manipulador de eventos exibe o valor da <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> propriedade cada vez que ele é gerado.</span><span class="sxs-lookup"><span data-stu-id="37dda-269">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span> <span data-ttu-id="37dda-270">Quando o usuário pressiona a tecla Enter, o aplicativo chama o <xref:System.Timers.Timer.Stop%2A> método antes de encerrar o aplicativo.</span><span class="sxs-lookup"><span data-stu-id="37dda-270">When the user presses the Enter key, the application calls the  <xref:System.Timers.Timer.Stop%2A> method before terminating the application.</span></span>  
  
 [!code-csharp[System.Timers.Timer#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer2a.cs#2)]
 [!code-vb[System.Timers.Timer#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer2a.vb#2)]  
  
 <span data-ttu-id="37dda-271">O exemplo de código a seguir mostra uma maneira de impedir que o thread que chama o <xref:System.Timers.Timer.Stop%2A> método continue até que uma execução atualmente <xref:System.Timers.Timer.Elapsed> evento termina e também para evitar que dois <xref:System.Timers.Timer.Elapsed> eventos de executar o manipulador de eventos ao mesmo tempo tempo (também conhecido como reentrância).</span><span class="sxs-lookup"><span data-stu-id="37dda-271">The following code example shows one way to prevent the thread that calls the <xref:System.Timers.Timer.Stop%2A> method from continuing until a currently executing <xref:System.Timers.Timer.Elapsed> event ends, and also to prevent two <xref:System.Timers.Timer.Elapsed> events from executing the event handler at the same time (often referred to as reentrancy).</span></span>  
  
 <span data-ttu-id="37dda-272">O exemplo executa 100 execuções de teste.</span><span class="sxs-lookup"><span data-stu-id="37dda-272">The example executes 100 test runs.</span></span> <span data-ttu-id="37dda-273">Cada vez que o teste é executado, o temporizador é iniciado com um intervalo de 150 milissegundos.</span><span class="sxs-lookup"><span data-stu-id="37dda-273">Each time the test is run, the timer is started with an interval of 150 milliseconds.</span></span> <span data-ttu-id="37dda-274">O manipulador de eventos usa o <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> método para simular uma tarefa que aleatoriamente varia em comprimento de 50 a 200 milissegundos.</span><span class="sxs-lookup"><span data-stu-id="37dda-274">The event handler uses the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method to simulate a task that randomly varies in length from 50 to 200 milliseconds.</span></span> <span data-ttu-id="37dda-275">O método de teste também inicia um thread de controle que aguarda um segundo e, em seguida, interrompe o timer.</span><span class="sxs-lookup"><span data-stu-id="37dda-275">The test method also starts a control thread that waits for a second and then stops the timer.</span></span> <span data-ttu-id="37dda-276">Se um evento está sendo tratado quando o thread de controle para o timer, o thread de controle deve esperar até que o evento seja concluído antes de continuar.</span><span class="sxs-lookup"><span data-stu-id="37dda-276">If an event is being handled when the control thread stops the timer, the control thread must wait until the event is finished before proceeding.</span></span>  
  
 <span data-ttu-id="37dda-277">O <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> sobrecarga do método é usada para evitar a reentrância e para impedir que o thread de controle continuando até que um evento em execução termina.</span><span class="sxs-lookup"><span data-stu-id="37dda-277">The <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> method overload is used to avoid reentrancy and to prevent the control thread from continuing until an executing event ends.</span></span> <span data-ttu-id="37dda-278">O manipulador de eventos usa o <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29> método para definir um controle de variável como 1, mas somente se o valor no momento é zero.</span><span class="sxs-lookup"><span data-stu-id="37dda-278">The event handler uses the <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29> method to set a control variable to 1, but only if the value is currently zero.</span></span> <span data-ttu-id="37dda-279">Esta é uma operação atômica.</span><span class="sxs-lookup"><span data-stu-id="37dda-279">This is an atomic operation.</span></span> <span data-ttu-id="37dda-280">Se o valor de retorno for zero, a variável de controle foi definida como 1 e o manipulador de eventos continua.</span><span class="sxs-lookup"><span data-stu-id="37dda-280">If the return value is zero, the control variable has been set to 1 and the event handler proceeds.</span></span> <span data-ttu-id="37dda-281">Se o valor de retorno é diferente de zero, o evento simplesmente é descartado para evitar a reentrada.</span><span class="sxs-lookup"><span data-stu-id="37dda-281">If the return value is non-zero, the event is simply discarded to avoid reentrancy.</span></span> <span data-ttu-id="37dda-282">(Se for necessário executar todos os eventos, o <xref:System.Threading.Monitor> classe deve ser uma maneira melhor de sincronizar os eventos.) Quando termina o manipulador de eventos, definirá a variável de controle de volta como zero.</span><span class="sxs-lookup"><span data-stu-id="37dda-282">(If it were necessary to execute every event, the <xref:System.Threading.Monitor> class would be a better way to synchronize the events.) When the event handler ends, it sets the control variable back to zero.</span></span> <span data-ttu-id="37dda-283">O exemplo registra o número total de eventos que executadas, que foram descartados devido à reentrância e que ocorreu após o <xref:System.Timers.Timer.Stop%2A> método foi chamado.</span><span class="sxs-lookup"><span data-stu-id="37dda-283">The example records the total number of events that executed, that were discarded because of reentrancy, and that occurred after the <xref:System.Timers.Timer.Stop%2A> method was called.</span></span>  
  
 <span data-ttu-id="37dda-284">O thread de controle usa o <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29> método para definir o controle de variável como -1 (menos um), mas somente se o valor no momento é zero.</span><span class="sxs-lookup"><span data-stu-id="37dda-284">The control thread uses the <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29> method to set the control variable to -1 (minus one), but only if the value is currently zero.</span></span> <span data-ttu-id="37dda-285">Se a operação atômica retorna diferente de zero, um evento está em execução.</span><span class="sxs-lookup"><span data-stu-id="37dda-285">If the atomic operation returns non-zero, an event is currently executing.</span></span> <span data-ttu-id="37dda-286">O thread de controle aguardará e tenta novamente.</span><span class="sxs-lookup"><span data-stu-id="37dda-286">The control thread waits and tries again.</span></span> <span data-ttu-id="37dda-287">O exemplo registra o número de vezes que o thread de controle tiveram de esperar por um evento de conclusão.</span><span class="sxs-lookup"><span data-stu-id="37dda-287">The example records the number of times the control thread had to wait for an event to finish.</span></span>  
  
 [!code-csharp[Timer.Stop#1](~/samples/snippets/csharp/VS_Snippets_CLR/Timer.Stop/CS/source.cs#1)]
 [!code-vb[Timer.Stop#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Timer.Stop/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="SynchronizingObject">
      <MemberSignature Language="C#" Value="public System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISynchronizeInvoke SynchronizingObject" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.SynchronizingObject" />
      <MemberSignature Language="VB.NET" Value="Public Property SynchronizingObject As ISynchronizeInvoke" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::ISynchronizeInvoke ^ SynchronizingObject { System::ComponentModel::ISynchronizeInvoke ^ get(); void set(System::ComponentModel::ISynchronizeInvoke ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Timers.TimersDescription("The object used to marshal the event handler calls issued when an interval has elapsed.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISynchronizeInvoke</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="37dda-288">Obtém ou define o objeto usado para realizar marshaling das chamadas do manipulador de eventos emitidas ao término de um intervalo.</span><span class="sxs-lookup"><span data-stu-id="37dda-288">Gets or sets the object used to marshal event-handler calls that are issued when an interval has elapsed.</span></span></summary>
        <value><span data-ttu-id="37dda-289">O <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> que representa o objeto usado para realizar marshaling das chamadas do manipulador de eventos emitidas ao término de um intervalo.</span><span class="sxs-lookup"><span data-stu-id="37dda-289">The <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> representing the object used to marshal the event-handler calls that are issued when an interval has elapsed.</span></span> <span data-ttu-id="37dda-290">O padrão é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="37dda-290">The default is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37dda-291">Quando <xref:System.Timers.Timer.SynchronizingObject%2A> é `null`, o método que manipula o <xref:System.Timers.Timer.Elapsed> evento é chamado em um thread do pool de threads do sistema.</span><span class="sxs-lookup"><span data-stu-id="37dda-291">When <xref:System.Timers.Timer.SynchronizingObject%2A> is `null`, the method that handles the <xref:System.Timers.Timer.Elapsed> event is called on a thread from the system-thread pool.</span></span> <span data-ttu-id="37dda-292">Para obter mais informações sobre pools de threads do sistema, consulte <xref:System.Threading.ThreadPool>.</span><span class="sxs-lookup"><span data-stu-id="37dda-292">For more information on system-thread pools, see <xref:System.Threading.ThreadPool>.</span></span>  
  
 <span data-ttu-id="37dda-293">Quando o <xref:System.Timers.Timer.Elapsed> evento é manipulado por um componente de Windows Forms visual, como um botão, acessando o componente através do pool de thread do sistema podem resultados em uma exceção ou simplesmente pode não funcionar.</span><span class="sxs-lookup"><span data-stu-id="37dda-293">When the <xref:System.Timers.Timer.Elapsed> event is handled by a visual Windows Forms component, such as a button, accessing the component through the system-thread pool might result in an exception or just might not work.</span></span> <span data-ttu-id="37dda-294">Evitar esse efeito definindo <xref:System.Timers.Timer.SynchronizingObject%2A> para um componente de Windows Forms, que faz com que o método que manipula o <xref:System.Timers.Timer.Elapsed> evento seja chamado no mesmo thread em que o componente foi criado.</span><span class="sxs-lookup"><span data-stu-id="37dda-294">Avoid this effect by setting <xref:System.Timers.Timer.SynchronizingObject%2A> to a Windows Forms component, which causes the method that handles the <xref:System.Timers.Timer.Elapsed> event to be called on the same thread that the component was created on.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="37dda-295">Mesmo se o <xref:System.Timers.Timer.SynchronizingObject%2A> propriedade não é `null`, <xref:System.Timers.Timer.Elapsed> eventos podem ocorrer após a <xref:System.Timers.Timer.Dispose%2A> ou <xref:System.Timers.Timer.Stop%2A> método foi chamado ou depois o <xref:System.Timers.Timer.Enabled%2A> propriedade foi definida `false`, pois o sinal para gerar o <xref:System.Timers.Timer.Elapsed> evento sempre está na fila para execução em um pool de threads.</span><span class="sxs-lookup"><span data-stu-id="37dda-295">Even if the <xref:System.Timers.Timer.SynchronizingObject%2A> property is not `null`, <xref:System.Timers.Timer.Elapsed> events can occur after the <xref:System.Timers.Timer.Dispose%2A> or <xref:System.Timers.Timer.Stop%2A> method has been called or after the <xref:System.Timers.Timer.Enabled%2A> property has been set to `false`, because the signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a thread pool thread.</span></span> <span data-ttu-id="37dda-296">Uma maneira de resolver essa condição de corrida é definir um sinalizador que informa o manipulador de eventos para o <xref:System.Timers.Timer.Elapsed> evento para ignorar os eventos subsequentes.</span><span class="sxs-lookup"><span data-stu-id="37dda-296">One way to resolve this race condition is to set a flag that tells the event handler for the <xref:System.Timers.Timer.Elapsed> event to ignore subsequent events.</span></span>  
  
 <span data-ttu-id="37dda-297">Se o <xref:System.Timers.Timer> é usado dentro do Visual Studio em um designer de formulários do Windows, <xref:System.Timers.Timer.SynchronizingObject%2A> é definida automaticamente como o controle que contém o <xref:System.Timers.Timer>.</span><span class="sxs-lookup"><span data-stu-id="37dda-297">If the <xref:System.Timers.Timer> is used inside Visual Studio in a Windows Forms designer, <xref:System.Timers.Timer.SynchronizingObject%2A> is automatically set to the control that contains the <xref:System.Timers.Timer>.</span></span> <span data-ttu-id="37dda-298">Por exemplo, se você colocar um <xref:System.Timers.Timer> em um designer para `Form1` (que herda de <xref:System.Windows.Forms.Form>), o <xref:System.Timers.Timer.SynchronizingObject%2A> propriedade <xref:System.Timers.Timer> é definido como a instância do `Form1`.</span><span class="sxs-lookup"><span data-stu-id="37dda-298">For example, if you place a <xref:System.Timers.Timer> on a designer for `Form1` (which inherits from <xref:System.Windows.Forms.Form>), the <xref:System.Timers.Timer.SynchronizingObject%2A> property of <xref:System.Timers.Timer> is set to the instance of `Form1`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37dda-299">O exemplo a seguir é um aplicativo de Windows Forms que serve como um editor de arquivo de texto muito simples.</span><span class="sxs-lookup"><span data-stu-id="37dda-299">The following example is a Windows Forms app that serves as a very simple text file editor.</span></span> <span data-ttu-id="37dda-300">Quando o texto na caixa de texto não tiver sido salvo, o aplicativo solicita que o usuário em intervalos de um minuto se ele quer salvar o conteúdo da caixa de texto.</span><span class="sxs-lookup"><span data-stu-id="37dda-300">When the text in the text box has not been saved, the app asks the user at one-minute intervals whether he or she wants to save the contents of the text box.</span></span>  <span data-ttu-id="37dda-301">Para fazer isso, o <xref:System.Timers.Timer.Interval%2A> está definida como um minuto (60.000 milissegundos) e o <xref:System.Timers.Timer.SynchronizingObject%2A> está definida como o <xref:System.Windows.Forms.Form> objeto.</span><span class="sxs-lookup"><span data-stu-id="37dda-301">To do this, the <xref:System.Timers.Timer.Interval%2A> property is set to one minute (60,000 milliseconds), and the <xref:System.Timers.Timer.SynchronizingObject%2A> property is set to the <xref:System.Windows.Forms.Form> object.</span></span>  
  
 [!code-csharp[System.Timers.Timer.SynchronizingObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Timers.Timer.SynchronizingObject/cs/Form1.cs#1)]
 [!code-vb[System.Timers.Timer.SynchronizingObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Timers.Timer.SynchronizingObject/vb/Form1.vb#1)]  
  
 <span data-ttu-id="37dda-302">O exemplo requer que você adicione os seguintes controles ao formulário:</span><span class="sxs-lookup"><span data-stu-id="37dda-302">The example requires that you add the following controls to the form:</span></span>  
  
-   <span data-ttu-id="37dda-303">Um <xref:System.Windows.Forms.TextBox> controle chamado `TextBox1` (seu nome padrão).</span><span class="sxs-lookup"><span data-stu-id="37dda-303">A <xref:System.Windows.Forms.TextBox> control named `TextBox1` (its default name).</span></span>  
  
-   <span data-ttu-id="37dda-304">Um <xref:System.Windows.Forms.Button> controle chamado `Button1` (seu nome padrão).</span><span class="sxs-lookup"><span data-stu-id="37dda-304">A <xref:System.Windows.Forms.Button> control named `Button1` (its default name).</span></span>  
  
-   <span data-ttu-id="37dda-305">Um <xref:System.Windows.Forms.SaveFileDialog> controle chamado `SaveSaveFileDialog1` (seu nome padrão).</span><span class="sxs-lookup"><span data-stu-id="37dda-305">A <xref:System.Windows.Forms.SaveFileDialog> control named `SaveSaveFileDialog1` (its default name) .</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Form" />
        <altmember cref="T:System.ComponentModel.ISynchronizeInvoke" />
        <altmember cref="T:System.Threading.ThreadPool" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
  </Members>
</Type>