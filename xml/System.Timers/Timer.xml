<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Timer.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5618b69c9a4d91151391fe5e2c79054e0441f4aec.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">618b69c9a4d91151391fe5e2c79054e0441f4aec</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Timers.Timer">
          <source>Generates an event after a set interval, with an option to generate recurring events.</source>
          <target state="translated">Gera um evento após um intervalo definido, a opção de gerar eventos recorrentes.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>The <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> component is a server-based timer that raises an <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event in your application after the number of milliseconds in the <ph id="ph3">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property has elapsed.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> componente é um temporizador com base em servidor que gera um <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> eventos em seu aplicativo após o número de milissegundos no <ph id="ph3">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> propriedade expirou.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>You can configure the <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> object to raise the event just once or repeatedly using the <ph id="ph2">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> property.</source>
          <target state="translated">Você pode configurar o <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> objeto para gerar o evento apenas uma vez ou várias vezes usando o <ph id="ph2">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>Typically, a <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> object is declared at the class level so that it stays in scope as long as it is needed.</source>
          <target state="translated">Normalmente, um <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> objeto for declarado no nível de classe, de forma que ela permaneça no escopo, desde que ele é necessário.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>You can then handle its <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event to provide regular processing.</source>
          <target state="translated">Você pode manipular seu <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> eventos para fornecer processamento regular.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>For example, suppose you have a critical server that must be kept running 24 hours a day, 7 days a week.</source>
          <target state="translated">Por exemplo, suponha que você tem um servidor crítico que deve ser mantido em execução 24 horas por dia, 7 dias por semana.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>You could create a service that uses a <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> object to periodically check the server and ensure that the system is up and running.</source>
          <target state="translated">Você pode criar um serviço que usa um <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> objeto periodicamente Verifique o servidor e verifique se o sistema está em execução.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>If the system is not responding, the service could attempt to restart the server or notify an administrator.</source>
          <target state="translated">Se o sistema não está respondendo, o serviço pode tentar reiniciar o servidor ou notificar um administrador.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>The <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> class is not available for all .NET implementations and versions, such as .NET Standard 1.6 and lower versions.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> classe não está disponível para todas as implementações de .NET e as versões, como 1.6 padrão do .NET e versões anteriores.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>In these cases, you can use the <ph id="ph1">&lt;xref:System.Threading.Timer?displayProperty=nameWithType&gt;</ph> class instead.</source>
          <target state="translated">Nesses casos, você pode usar o <ph id="ph1">&lt;xref:System.Threading.Timer?displayProperty=nameWithType&gt;</ph> classe em vez disso.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>This type implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
          <target state="translated">Este tipo implementa o <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>When you have finished using the type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">Quando você terminar de usar o tipo, descarte-direta ou indiretamente.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>To dispose of the type directly, call its <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`catch`</ph> block.</source>
          <target state="translated">Para descartar o tipo diretamente, chame seu <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> método em um <ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`catch`</ph> bloco.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">Para descartar indiretamente dele, use uma construção de linguagem, como <ph id="ph1">`using`</ph> (em c#) ou <ph id="ph2">`Using`</ph> (no Visual Basic).</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>For more information, see the "Using an Object that Implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface topic.</source>
          <target state="translated">Para obter mais informações, consulte a seção "Usando um objeto que implementa IDisposable" o <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> tópico de interface.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>The server-based <ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> class is designed for use with worker threads in a multithreaded environment.</source>
          <target state="translated">O servidor com base em <ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> classe é projetada para uso em threads de trabalho em um ambiente multithreaded.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>Server timers can move among threads to handle the raised <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event, resulting in more accuracy than Windows timers in raising the event on time.</source>
          <target state="translated">Timers de servidor podem mover entre threads para lidar com a elevação <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> evento, resultando em mais precisão de temporizadores do Windows em gera o evento no tempo.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>The <ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> component raises the <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event, based on the value (in milliseconds) of the <ph id="ph3">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> componente gera o <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> evento, com base no valor (em milissegundos) do <ph id="ph3">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>You can handle this event to perform the processing you need.</source>
          <target state="translated">Você pode manipular esse evento para executar o processamento que é necessário.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>For example, suppose that you have an online sales application that continuously posts sales orders to a database.</source>
          <target state="translated">Por exemplo, suponha que você tenha um aplicativo de vendas online que envia ordens de venda para um banco de dados de continuamente.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>The service that compiles the instructions for shipping operates on a batch of orders rather than processing each order individually.</source>
          <target state="translated">O serviço que compila as instruções para envio opera em um lote de ordens em vez de cada ordem de processamento individualmente.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>You could use a <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> to start the batch processing every 30 minutes.</source>
          <target state="translated">Você pode usar um <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> para iniciar a cada 30 minutos de processamento em lotes.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>The System.Timers.Timer class has the same resolution as the system clock.</source>
          <target state="translated">A classe System.Timers.Timer tem a mesma resolução que o relógio do sistema.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>This means that the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event will fire at an interval defined by the resolution of the system clock if the <ph id="ph2">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property is less than the resolution of the system clock.</source>
          <target state="translated">Isso significa que o <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> evento será acionado em um intervalo definido pela resolução do relógio do sistema se o <ph id="ph2">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> propriedade é menor do que a resolução do relógio do sistema.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property.</source>
          <target state="translated">Para obter mais informações, consulte a propriedade <ph id="ph1">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>When <ph id="ph1">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> is set to <ph id="ph2">`false`</ph>, a <ph id="ph3">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> object raises the <ph id="ph4">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event only once, after the first <ph id="ph5">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> has elapsed.</source>
          <target state="translated">Quando <ph id="ph1">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> é definido como <ph id="ph2">`false`</ph>, um <ph id="ph3">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> objeto gera o <ph id="ph4">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> evento apenas uma vez, após a primeira <ph id="ph5">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> expirou.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>To keep raising the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event regularly at the interval defined by the <ph id="ph2">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>, set <ph id="ph3">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> to <ph id="ph4">`true`</ph>, which is the default value.</source>
          <target state="translated">Manter aumentar o <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> evento regularmente no intervalo definido pelo <ph id="ph2">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>, defina <ph id="ph3">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> para <ph id="ph4">`true`</ph>, que é o valor padrão.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>The <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> component catches and suppresses all exceptions thrown by event handlers for the <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> componente Captura e suprime todas as exceções lançadas por manipuladores de eventos para o <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> evento.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>This behavior is subject to change in future releases of the .NET Framework.</source>
          <target state="translated">Esse comportamento está sujeita a alterações em versões futuras do .NET Framework.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>Note, however, that this is not true of event handlers that execute asynchronously and include the <ph id="ph1">`await`</ph> operator (in C#)  or the <ph id="ph2">`Await`</ph> operator (in Visual Basic).</source>
          <target state="translated">No entanto, observe que isso não é verdade para manipuladores de eventos que são executadas de forma assíncrona e incluem o <ph id="ph1">`await`</ph> operador (em c#) ou o <ph id="ph2">`Await`</ph> operador (no Visual Basic).</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>Exceptions thrown in these event handlers are propagated back to the calling thread, as the following example illustrates.</source>
          <target state="translated">Exceções geradas nesses manipuladores de eventos são propagadas de volta para o thread de chamada, como mostra o exemplo a seguir.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>For more information on exceptions thrown in asynchronous methods, see   <bpt id="p1">[</bpt>Exception Handling<ept id="p1">](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre exceções lançadas em métodos assíncronos, consulte <bpt id="p1">[</bpt>tratamento de exceção<ept id="p1">](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)</ept>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>If the <ph id="ph1">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> property is <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is raised on a <ph id="ph4">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread.</source>
          <target state="translated">Se o <ph id="ph1">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> é de propriedade <ph id="ph2">`null`</ph>, o <ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> evento é gerado em um <ph id="ph4">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>If processing of the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event lasts longer than <ph id="ph2">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>, the event might be raised again on another <ph id="ph3">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread.</source>
          <target state="translated">Se o processamento do <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> duração de evento mais de <ph id="ph2">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>, o evento pode ser gerado novamente em outro <ph id="ph3">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>In this situation, the event handler should be reentrant.</source>
          <target state="translated">Nessa situação, o manipulador de eventos deve ser reentrante.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>The event-handling method might run on one thread at the same time that another thread calls the <ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method or sets the <ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property to <ph id="ph3">`false`</ph>.</source>
          <target state="translated">O método de manipulação de eventos pode ser executado em um thread ao mesmo tempo que outro thread chama o <ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> método ou define o <ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> propriedade <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>This might result in the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event being raised after the timer is stopped.</source>
          <target state="translated">Isso pode resultar no <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> evento que está sendo gerado depois que o timer é interrompido.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>The example code for the <ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method shows one way to avoid this race condition.</source>
          <target state="translated">O exemplo de código para o <ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> método mostra uma maneira de evitar essa condição de corrida.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>Even if <ph id="ph1">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> is not <ph id="ph2">`null`</ph>, <ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> events can occur after the <ph id="ph4">&lt;xref:System.Timers.Timer.Dispose%2A&gt;</ph> or <ph id="ph5">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method has been called or after the <ph id="ph6">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property has been set to <ph id="ph7">`false`</ph>, because the signal to raise the <ph id="ph8">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is always queued for execution on a thread pool thread.</source>
          <target state="translated">Mesmo se <ph id="ph1">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> não é <ph id="ph2">`null`</ph>, <ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> eventos podem ocorrer após a <ph id="ph4">&lt;xref:System.Timers.Timer.Dispose%2A&gt;</ph> ou <ph id="ph5">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> método foi chamado ou depois o <ph id="ph6">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> propriedade foi definida <ph id="ph7">`false`</ph>, pois o sinal para gerar o <ph id="ph8">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> evento sempre está na fila para execução em um pool de threads.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>One way to resolve this race condition is to set a flag that tells the event handler for the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event to ignore subsequent events.</source>
          <target state="translated">Uma maneira de resolver essa condição de corrida é definir um sinalizador que informa o manipulador de eventos para o <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> evento para ignorar os eventos subsequentes.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>If you use the <ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> class with a user interface element, such as a form or control, without placing the timer on that user interface element, assign the form or control that contains the <ph id="ph2">&lt;xref:System.Timers.Timer&gt;</ph> to the <ph id="ph3">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> property, so that the event is marshaled to the user interface thread.</source>
          <target state="translated">Se você usar o <ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> classe com um elemento de interface do usuário, como um formulário ou controle, sem colocar o timer em desse elemento de interface do usuário, atribuir o formulário ou controle que contém o <ph id="ph2">&lt;xref:System.Timers.Timer&gt;</ph> para o <ph id="ph3">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> propriedade, para que o evento é empacotado para o thread de interface do usuário.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>For a list of default property values for an instance of <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>, see the <ph id="ph2">&lt;xref:System.Timers.Timer.%23ctor%2A&gt;</ph> constructor.</source>
          <target state="translated">Para obter uma lista de valores de propriedade padrão para uma instância do <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>, consulte o <ph id="ph2">&lt;xref:System.Timers.Timer.%23ctor%2A&gt;</ph> construtor.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>Be aware that .NET includes four classes named <ph id="ph1">`Timer`</ph>, each of which offers different functionality:</source>
          <target state="translated">Lembre-se de que o .NET inclui quatro classes chamadas <ph id="ph1">`Timer`</ph>, cada um de que oferece funcionalidades diferentes:</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source><ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> (this topic): fires an event at regular intervals.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> (Este tópico): dispara um evento em intervalos regulares.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>The class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.</source>
          <target state="translated">A classe é destinada para uso como um servidor com base em ou componente de serviço em um ambiente multithreaded; ele não tem nenhuma interface de usuário e não fica visível no tempo de execução.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source><ph id="ph1">&lt;xref:System.Threading.Timer?displayProperty=nameWithType&gt;</ph>: executes a single callback method on a thread pool thread at regular intervals.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Timer?displayProperty=nameWithType&gt;</ph>: executa um método de retorno de chamada única em um pool de threads em intervalos regulares.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>The callback method is defined when the timer is instantiated and cannot be changed.</source>
          <target state="translated">O método de retorno de chamada é definido quando o timer é instanciado e não pode ser alterado.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>Like the <ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> class, this class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.</source>
          <target state="translated">Como o <ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> classe, essa classe é destinada para uso como um componente baseado em servidor ou serviço em um ambiente multithreaded; ele não tem nenhuma interface de usuário e não fica visível no tempo de execução.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Timer?displayProperty=nameWithType&gt;</ph> (.NET Framework only): a Windows Forms component that fires an event at regular intervals.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Timer?displayProperty=nameWithType&gt;</ph> (Somente para o .NET framework): um componente de Windows Forms que dispara um evento em intervalos regulares.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>The component has no user interface and is designed for use in a single-threaded environment.</source>
          <target state="translated">O componente não tem nenhuma interface do usuário e é projetado para uso em um ambiente de thread único.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source><ph id="ph1">&lt;xref:System.Web.UI.Timer?displayProperty=nameWithType&gt;</ph> (.NET Framework only): an ASP.NET component that performs asynchronous or synchronous web page postbacks at a regular interval.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.UI.Timer?displayProperty=nameWithType&gt;</ph> (Somente para o .NET framework): um componente do ASP.NET que executa a página da web assíncrona ou síncrona postbacks em intervalos regulares.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>The following example instantiates a <ph id="ph1">`System.Timers.Timer`</ph> object that fires its <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph> event every two seconds (2,000 milliseconds), sets up an event handler for the  event, and starts the timer.</source>
          <target state="translated">O exemplo a seguir cria um <ph id="ph1">`System.Timers.Timer`</ph> objeto que dispara seu <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph> evento a cada dois segundos (2.000 milissegundos), define um manipulador de eventos para o evento e inicia o temporizador.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>The event handler displays the value of the <ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph> property each time it is raised.</source>
          <target state="translated">O manipulador de eventos exibe o valor da <ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph> propriedade cada vez que ele é gerado.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>Any public <ph id="ph1">&lt;see langword="static" /&gt;</ph> members of this type are thread safe.</source>
          <target state="translated">Qualquer público <ph id="ph1">&lt;see langword="static" /&gt;</ph> membros desse tipo são thread-safe.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>Any instance members are not guaranteed to be thread safe.</source>
          <target state="translated">Não há garantia de que qualquer membro de instância seja thread-safe.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="T:System.Timers.Timer">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> class.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Timers.Timer.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> class, and sets all the properties to their initial values.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> e define todas as propriedades para seus valores iniciais.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.#ctor">
          <source>The following table shows initial property values for an instance of <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>.</source>
          <target state="translated">A tabela a seguir mostra os valores de propriedade inicial para uma instância do <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.#ctor">
          <source>Property</source>
          <target state="translated">Propriedade</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.#ctor">
          <source>Initial value</source>
          <target state="translated">Valor inicial</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.#ctor">
          <source>100 milliseconds</source>
          <target state="translated">100 milissegundos</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.#ctor">
          <source>A null reference (<ph id="ph1">`Nothing`</ph> in Visual Basic).</source>
          <target state="translated">Uma referência nula (<ph id="ph1">`Nothing`</ph> no Visual Basic).</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.#ctor">
          <source>The following example instantiates a <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> object that fires its <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer.</source>
          <target state="translated">O exemplo a seguir cria um <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> objeto que dispara seu <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph> evento a cada dois segundos (2000 milissegundos), define um manipulador de eventos para o evento e inicia o temporizador.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.#ctor">
          <source>The event handler displays the value of the <ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph> property each time it is raised.</source>
          <target state="translated">O manipulador de eventos exibe o valor da <ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph> propriedade cada vez que ele é gerado.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Timers.Timer.#ctor(System.Double)">
          <source>The time, in milliseconds, between events.</source>
          <target state="translated">O tempo, em milissegundos, entre eventos.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Timers.Timer.#ctor(System.Double)">
          <source>The value must be greater than zero and less than or equal to <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">O valor deve ser maior que zero e menor ou igual a <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Timers.Timer.#ctor(System.Double)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> class, and sets the <ph id="ph2">&lt;see cref="P:System.Timers.Timer.Interval" /&gt;</ph> property to the specified number of milliseconds.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> e define a propriedade <ph id="ph2">&lt;see cref="P:System.Timers.Timer.Interval" /&gt;</ph> como o número especificado de milissegundos.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.#ctor(System.Double)">
          <source>This constructor sets the <ph id="ph1">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property of the new timer instance, but does not enable the timer.</source>
          <target state="translated">Esse construtor define o <ph id="ph1">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> propriedade da nova instância do timer, mas não habilita o temporizador.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.#ctor(System.Double)">
          <source>The following example instantiates a <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> object that fires its <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer.</source>
          <target state="translated">O exemplo a seguir cria um <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> objeto que dispara seu <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph> evento a cada dois segundos (2000 milissegundos), define um manipulador de eventos para o evento e inicia o temporizador.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.#ctor(System.Double)">
          <source>The event handler displays the value of the <ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph> property each time it is raised.</source>
          <target state="translated">O manipulador de eventos exibe o valor da <ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph> propriedade cada vez que ele é gerado.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Timers.Timer.#ctor(System.Double)">
          <source>The value of the <ph id="ph1">&lt;paramref name="interval" /&gt;</ph> parameter is less than or equal to zero, or greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">O valor do parâmetro <ph id="ph1">&lt;paramref name="interval" /&gt;</ph> é menor ou igual a zero ou maior que <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="P:System.Timers.Timer.AutoReset">
          <source>Gets or sets a Boolean indicating whether the <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> should raise the <ph id="ph2">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> event only once (<ph id="ph3">&lt;see langword="false" /&gt;</ph>) or repeatedly (<ph id="ph4">&lt;see langword="true" /&gt;</ph>).</source>
          <target state="translated">Obtém ou define um valor booliano que indica se <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> deve acionar o evento <ph id="ph2">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> apenas uma vez (<ph id="ph3">&lt;see langword="false" /&gt;</ph>) ou repetidamente (<ph id="ph4">&lt;see langword="true" /&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.AutoReset">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> should raise the <ph id="ph3">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> event each time the interval elapses; <ph id="ph4">&lt;see langword="false" /&gt;</ph> if it should raise the <ph id="ph5">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> event only once, after the first time the interval elapses.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> para que o <ph id="ph2">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> acione o evento <ph id="ph3">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> cada vez que o intervalo expirar; <ph id="ph4">&lt;see langword="false" /&gt;</ph> para que acione o evento <ph id="ph5">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> somente uma vez, após a primeira vez que o intervalo expirar.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.AutoReset">
          <source>The default is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">O padrão é <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.AutoReset">
          <source>If the <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> is already enabled when the <ph id="ph2">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph> method is called, the interval is reset.</source>
          <target state="translated">Se o <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> já está habilitado quando o <ph id="ph2">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph> método é chamado, o intervalo é redefinido.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.AutoReset">
          <source>If <ph id="ph1">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> is <ph id="ph2">`false`</ph>, the <ph id="ph3">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph> method must be called in order to start the count again.</source>
          <target state="translated">Se <ph id="ph1">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> é <ph id="ph2">`false`</ph>, o <ph id="ph3">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph> método deve ser chamado para iniciar a contagem novamente.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.AutoReset">
          <source>Resetting the interval affects when the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is raised.</source>
          <target state="translated">Redefinir o intervalo afeta quando o <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> é gerado.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.AutoReset">
          <source>For example, if you set the interval to 5 seconds and then set the <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property to <ph id="ph2">`true`</ph>, the count starts at the time <ph id="ph3">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> is set.</source>
          <target state="translated">Por exemplo, se você definir o intervalo de 5 segundos e, em seguida, defina o <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> propriedade <ph id="ph2">`true`</ph>, inicia a contagem no horário <ph id="ph3">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> está definido.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.AutoReset">
          <source>If you reset the interval to 10 seconds when the count is 3 seconds, the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is raised for the first time 13 seconds after the <ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property was set to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Se você redefinir o intervalo de 10 segundos quando a contagem é de 3 segundos, o <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> é gerado pela primeira vez 13 segundos após o <ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> propriedade foi definida como <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.AutoReset">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> whose <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event fires after 1.5 seconds.</source>
          <target state="translated">O exemplo a seguir cria um <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> cujo <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> evento ser acionado depois de 1,5 segundos.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.AutoReset">
          <source>Its event handler then displays "Hello World!"</source>
          <target state="translated">Seu manipulador de eventos, em seguida, exibe "Hello World!"</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.AutoReset">
          <source>on the console.</source>
          <target state="translated">no console.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Timers.Timer.BeginInit">
          <source>Begins the run-time initialization of a <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> that is used on a form or by another component.</source>
          <target state="translated">Começa a inicialização do tempo de execução de um <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> que é usado em um formulário ou por outro componente.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.BeginInit">
          <source>The <ph id="ph1">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]</ph> design environment uses this method to start the initialization of a component that is used on a form or by another component.</source>
          <target state="translated">O <ph id="ph1">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]</ph> design ambiente usa esse método para iniciar a inicialização de um componente que é usado em um formulário ou por outro componente.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.BeginInit">
          <source>The <ph id="ph1">&lt;xref:System.Timers.Timer.EndInit%2A&gt;</ph> method ends the initialization.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Timers.Timer.EndInit%2A&gt;</ph> método termina a inicialização.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.BeginInit">
          <source>Using the <ph id="ph1">&lt;xref:System.Timers.Timer.BeginInit%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Timers.Timer.EndInit%2A&gt;</ph> methods prevents the control from being used before it is fully initialized.</source>
          <target state="translated">Usando o <ph id="ph1">&lt;xref:System.Timers.Timer.BeginInit%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Timers.Timer.EndInit%2A&gt;</ph> métodos impede que o controle que está sendo usada antes de ser totalmente inicializado.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Timers.Timer.Close">
          <source>Releases the resources used by the <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph>.</source>
          <target state="translated">Libera os recursos usados pelo <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Close">
          <source>The <ph id="ph1">&lt;xref:System.Timers.Timer.Close%2A&gt;</ph> method in turn calls the <ph id="ph2">`Dispose`</ph> method.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Timers.Timer.Close%2A&gt;</ph> método por sua vez chama o <ph id="ph2">`Dispose`</ph> método.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Timers.Timer.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> para liberar recursos gerenciados e não gerenciados; <ph id="ph2">&lt;see langword="false" /&gt;</ph> para liberar apenas recursos não gerenciados.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Timers.Timer.Dispose(System.Boolean)">
          <source>Releases all resources used by the current <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph>.</source>
          <target state="translated">Libera todos os recursos usados pelo <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="E:System.Timers.Timer.Elapsed">
          <source>Occurs when the interval elapses.</source>
          <target state="translated">Ocorre quando o intervalo termina.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>The <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is raised if the <ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property is <ph id="ph3">`true`</ph> and the time interval (in milliseconds) defined by the <ph id="ph4">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property elapses.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> é gerado se o <ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> é de propriedade <ph id="ph3">`true`</ph> e o intervalo de tempo (em milissegundos) definido pelo <ph id="ph4">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> ter decorrido de propriedade.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>If the <ph id="ph1">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> property is <ph id="ph2">`true`</ph>, the event is raised repeatedly at an interval defined by the <ph id="ph3">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property; otherwise, the event is raised only once, the first time the <ph id="ph4">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> value elapses.</source>
          <target state="translated">Se o <ph id="ph1">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> é de propriedade <ph id="ph2">`true`</ph>, o evento é gerado repetidamente em um intervalo definido pelo <ph id="ph3">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> propriedade; caso contrário, o evento é gerado apenas uma vez, na primeira vez o <ph id="ph4">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> valor tiver decorrido.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>If <ph id="ph1">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> is set after the <ph id="ph2">&lt;xref:System.Timers.Timer&gt;</ph> has started, the count is reset.</source>
          <target state="translated">Se <ph id="ph1">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> é definido após o <ph id="ph2">&lt;xref:System.Timers.Timer&gt;</ph> tiver iniciado, a contagem é redefinida.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>For example, if you set the interval to 5 seconds and then set <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> to <ph id="ph2">`true`</ph>, the count starts at the time <ph id="ph3">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> is set.</source>
          <target state="translated">Por exemplo, se você definir o intervalo de 5 segundos e, em seguida, definir <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> para <ph id="ph2">`true`</ph>, inicia a contagem no horário <ph id="ph3">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> está definido.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>If you reset the interval to 10 seconds when count is 3 seconds, the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is raised for the first time 13 seconds after <ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> was set to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Se você redefinir o intervalo de 10 segundos quando a contagem é de 3 segundos, o <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> é gerado pela primeira vez 13 segundos após <ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> foi definido como <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>If the <ph id="ph1">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> property is <ph id="ph2">`null`</ph>,the <ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is raised on a <ph id="ph4">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread.</source>
          <target state="translated">Se o <ph id="ph1">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> é de propriedade <ph id="ph2">`null`</ph>, o <ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> evento é gerado em um <ph id="ph4">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>If the processing of the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event lasts longer than <ph id="ph2">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>, the event might be raised again on another <ph id="ph3">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread.</source>
          <target state="translated">Se o processamento do <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> duração de evento mais de <ph id="ph2">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>, o evento pode ser gerado novamente em outro <ph id="ph3">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>In this situation, the event handler should be reentrant.</source>
          <target state="translated">Nessa situação, o manipulador de eventos deve ser reentrante.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>The event-handling method might run on one thread at the same time that another thread calls the <ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method or sets the <ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property to <ph id="ph3">`false`</ph>.</source>
          <target state="translated">O método de manipulação de eventos pode ser executado em um thread ao mesmo tempo que outro thread chama o <ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> método ou define o <ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> propriedade <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>This might result in the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event being raised after the timer is stopped.</source>
          <target state="translated">Isso pode resultar no <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> evento que está sendo gerado depois que o timer é interrompido.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>The example code for the <ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method shows one way to avoid this race condition.</source>
          <target state="translated">O exemplo de código para o <ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> método mostra uma maneira de evitar essa condição de corrida.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>Even if <ph id="ph1">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> is not <ph id="ph2">`null`</ph>, <ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> events can occur after the <ph id="ph4">&lt;xref:System.Timers.Timer.Dispose%2A&gt;</ph> or <ph id="ph5">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method has been called or after the <ph id="ph6">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property has been set to <ph id="ph7">`false`</ph>, because the signal to raise the <ph id="ph8">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is always queued for execution on a thread pool thread.</source>
          <target state="translated">Mesmo se <ph id="ph1">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> não é <ph id="ph2">`null`</ph>, <ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> eventos podem ocorrer após a <ph id="ph4">&lt;xref:System.Timers.Timer.Dispose%2A&gt;</ph> ou <ph id="ph5">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> método foi chamado ou depois o <ph id="ph6">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> propriedade foi definida <ph id="ph7">`false`</ph>, pois o sinal para gerar o <ph id="ph8">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> evento sempre está na fila para execução em um pool de threads.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>One way to resolve this race condition is to set a flag that tells the event handler for the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event to ignore subsequent events.</source>
          <target state="translated">Uma maneira de resolver essa condição de corrida é definir um sinalizador que informa o manipulador de eventos para o <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> evento para ignorar os eventos subsequentes.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>The <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> component catches and suppresses all exceptions thrown by event handlers for the <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> componente Captura e suprime todas as exceções lançadas por manipuladores de eventos para o <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> evento.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>This behavior is subject to change in future releases of the .NET Framework.</source>
          <target state="translated">Esse comportamento está sujeita a alterações em versões futuras do .NET Framework.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>The following example instantiates a <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> object that fires its <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer.</source>
          <target state="translated">O exemplo a seguir cria um <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> objeto que dispara seu <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph> evento a cada dois segundos (2000 milissegundos), define um manipulador de eventos para o evento e inicia o temporizador.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>The event handler displays the value of the <ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph> property each time it is raised.</source>
          <target state="translated">O manipulador de eventos exibe o valor da <ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph> propriedade cada vez que ele é gerado.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="P:System.Timers.Timer.Enabled">
          <source>Gets or sets a value indicating whether the <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> should raise the <ph id="ph2">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> event.</source>
          <target state="translated">Obtém ou define um valor que indica se o <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> deve acionar o evento <ph id="ph2">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Enabled">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> should raise the <ph id="ph3">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> event; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> caso o <ph id="ph2">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> deva acionar o evento <ph id="ph3">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph>; caso contrário, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Enabled">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">O padrão é <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Enabled">
          <source>Setting <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> to <ph id="ph2">`true`</ph> is the same as calling <ph id="ph3">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph>, while setting <ph id="ph4">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> to <ph id="ph5">`false`</ph> is the same as calling <ph id="ph6">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph>.</source>
          <target state="translated">Configuração <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> para <ph id="ph2">`true`</ph> é o mesmo que chamar <ph id="ph3">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph>, enquanto a configuração <ph id="ph4">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> para <ph id="ph5">`false`</ph> é o mesmo que chamar <ph id="ph6">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Enabled">
          <source>The signal to raise the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is always queued for execution on a <ph id="ph2">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread.</source>
          <target state="translated">O sinal para gerar o <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> evento sempre na fila para execução em um <ph id="ph2">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Enabled">
          <source>This might result in the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event being raised after the <ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property is set to <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Isso pode resultar no <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> evento que está sendo gerado após o <ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> está definida como <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Enabled">
          <source>The code example for the <ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method shows one way to work around this race condition.</source>
          <target state="translated">O exemplo de código para o <ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> método mostra uma maneira de solucionar essa condição de corrida.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Enabled">
          <source>If <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> is set to <ph id="ph2">`true`</ph> and <ph id="ph3">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> is set to <ph id="ph4">`false`</ph>, the <ph id="ph5">&lt;xref:System.Timers.Timer&gt;</ph> raises the <ph id="ph6">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event only once, the first time the interval elapses.</source>
          <target state="translated">Se <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> é definido como <ph id="ph2">`true`</ph> e <ph id="ph3">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> é definido como <ph id="ph4">`false`</ph>, o <ph id="ph5">&lt;xref:System.Timers.Timer&gt;</ph> gera o <ph id="ph6">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> eventos somente uma vez, na primeira vez que o intervalo expira.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Enabled">
          <source>If the interval is set after the <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> has started, the count is reset.</source>
          <target state="translated">Se o intervalo é definido após o <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> tiver iniciado, a contagem é redefinida.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Enabled">
          <source>For example, if you set the interval to 5 seconds and then set the <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property to <ph id="ph2">`true`</ph>, the count starts at the time <ph id="ph3">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> is set.</source>
          <target state="translated">Por exemplo, se você definir o intervalo de 5 segundos e, em seguida, defina o <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> propriedade <ph id="ph2">`true`</ph>, inicia a contagem no horário <ph id="ph3">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> está definido.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Enabled">
          <source>If you reset the interval to 10 seconds when count is 3 seconds, the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is raised for the first time 13 seconds after <ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> was set to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Se você redefinir o intervalo de 10 segundos quando a contagem é de 3 segundos, o <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> é gerado pela primeira vez 13 segundos após <ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> foi definido como <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Enabled">
          <source>Some visual designers, such as those in Microsoft Visual Studio, set the <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property to <ph id="ph2">`true`</ph> when inserting a new <ph id="ph3">&lt;xref:System.Timers.Timer&gt;</ph>.</source>
          <target state="translated">Alguns designers visuais, como aqueles no Microsoft Visual Studio, defina o <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> propriedade <ph id="ph2">`true`</ph> ao inserir um novo <ph id="ph3">&lt;xref:System.Timers.Timer&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Enabled">
          <source>The following example instantiates a <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> object that fires its <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph> event every two seconds (2000 milliseconds), sets up an event handler for the  event, and starts the timer.</source>
          <target state="translated">O exemplo a seguir cria um <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> objeto que dispara seu <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph> evento a cada dois segundos (2000 milissegundos), define um manipulador de eventos para o evento e inicia o temporizador.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Enabled">
          <source>The event handler displays the value of the <ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph> property each time it is raised.</source>
          <target state="translated">O manipulador de eventos exibe o valor da <ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph> propriedade cada vez que ele é gerado.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="P:System.Timers.Timer.Enabled">
          <source>This property cannot be set because the timer has been disposed.</source>
          <target state="translated">Essa propriedade não pode ser definida porque o temporizador foi descartado.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="P:System.Timers.Timer.Enabled">
          <source>The <ph id="ph1">&lt;see cref="P:System.Timers.Timer.Interval" /&gt;</ph> property was set to a value greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> before the timer was enabled.</source>
          <target state="translated">A propriedade <ph id="ph1">&lt;see cref="P:System.Timers.Timer.Interval" /&gt;</ph> foi definida como um valor maior que <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> antes de o temporizador ser habilitado.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Timers.Timer.EndInit">
          <source>Ends the run-time initialization of a <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> that is used on a form or by another component.</source>
          <target state="translated">Termina a inicialização do tempo de execução de um <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> que é usado em um formulário ou por outro componente.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.EndInit">
          <source>The <ph id="ph1">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]</ph> design environment uses this method to end the initialization of a component that is used on a form or by another component.</source>
          <target state="translated">O <ph id="ph1">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]</ph> design ambiente usa esse método para terminar a inicialização de um componente que é usado em um formulário ou por outro componente.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.EndInit">
          <source>The <ph id="ph1">&lt;xref:System.Timers.Timer.BeginInit%2A&gt;</ph> method starts the initialization.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Timers.Timer.BeginInit%2A&gt;</ph> método inicia a inicialização.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.EndInit">
          <source>Using the <ph id="ph1">&lt;xref:System.Timers.Timer.BeginInit%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Timers.Timer.EndInit%2A&gt;</ph> methods prevents the control from being used before it is fully initialized.</source>
          <target state="translated">Usando o <ph id="ph1">&lt;xref:System.Timers.Timer.BeginInit%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Timers.Timer.EndInit%2A&gt;</ph> métodos impede que o controle que está sendo usada antes de ser totalmente inicializado.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="P:System.Timers.Timer.Interval">
          <source>Gets or sets the interval, expressed in milliseconds, at which to raise the <ph id="ph1">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> event.</source>
          <target state="translated">Obtém ou define o intervalo, expressado em milissegundos, no qual gerar o evento <ph id="ph1">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>The time, in milliseconds, between <ph id="ph1">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> events.</source>
          <target state="translated">O tempo, em milissegundos, entre eventos <ph id="ph1">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>The value must be greater than zero, and less than or equal to <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">O valor deve ser maior que zero e menor ou igual a <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>The default is 100 milliseconds.</source>
          <target state="translated">O padrão é 100 milissegundos.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>You use the <ph id="ph1">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property to determine the frequency at which the <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is fired.</source>
          <target state="translated">Você usa o <ph id="ph1">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> propriedade para determinar a frequência em que o <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> evento é acionado.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>Because the <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> class depends on the system clock, it has the same resolution as the system clock.</source>
          <target state="translated">Porque o <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> classe depende do relógio do sistema, ele tem a mesma resolução que o relógio do sistema.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>This means that the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event will fire at an interval defined by the resolution of the system clock if the <ph id="ph2">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property is less than the resolution of the system clock.</source>
          <target state="translated">Isso significa que o <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> evento será acionado em um intervalo definido pela resolução do relógio do sistema se o <ph id="ph2">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> propriedade é menor do que a resolução do relógio do sistema.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>The following example sets the <ph id="ph1">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property to 5 milliseconds.</source>
          <target state="translated">O exemplo a seguir define o <ph id="ph1">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> propriedade 5 milissegundos.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>When run on a <ph id="ph1">[!INCLUDE[win7](~/includes/win7-md.md)]</ph> system whose system clock has a resolution of approximately 15 milliseconds, the event fires approximately every 15 milliseconds rather than every 5 milliseconds.</source>
          <target state="translated">Quando executado em um <ph id="ph1">[!INCLUDE[win7](~/includes/win7-md.md)]</ph> sistema cujo relógio do sistema com uma resolução de aproximadamente 15 milissegundos, o evento é acionado, aproximadamente a cada 15 milissegundos, em vez da cada 5 milissegundos.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>You can use the following code to determine the resolution of the system clock on the current system:</source>
          <target state="translated">Você pode usar o código a seguir para determinar a resolução do relógio do sistema no sistema atual:</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>If your app requires greater resolution than that offered by the <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> class or the system clock, use the high-resolution multimedia timers; see <bpt id="p1">[</bpt>How to: Use the High-Resolution Timer<ept id="p1">](http://msdn.microsoft.com/library/aa964692.aspx)</ept>.</source>
          <target state="translated">Se seu aplicativo requer uma resolução maior do que o oferecido pelo <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> classe ou o relógio do sistema, use os timers de multimídia de alta resolução, consulte <bpt id="p1">[</bpt>como: usar o Timer High-Resolution<ept id="p1">](http://msdn.microsoft.com/library/aa964692.aspx)</ept>.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>If the interval is set after the <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> has started, the count is reset.</source>
          <target state="translated">Se o intervalo é definido após o <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> tiver iniciado, a contagem é redefinida.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>For example, if you set the interval to 5 seconds and then set the <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property to <ph id="ph2">`true`</ph>, the count starts at the time <ph id="ph3">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> is set.</source>
          <target state="translated">Por exemplo, se você definir o intervalo de 5 segundos e, em seguida, defina o <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> propriedade <ph id="ph2">`true`</ph>, inicia a contagem no horário <ph id="ph3">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> está definido.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>If you reset the interval to 10 seconds when count is 3 seconds, the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is raised for the first time 13 seconds after <ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> was set to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Se você redefinir o intervalo de 10 segundos quando a contagem é de 3 segundos, o <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> é gerado pela primeira vez 13 segundos após <ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> foi definido como <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>If <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> is set to <ph id="ph2">`true`</ph> and <ph id="ph3">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> is set to <ph id="ph4">`false`</ph>, the <ph id="ph5">&lt;xref:System.Timers.Timer&gt;</ph> raises the <ph id="ph6">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event only once, the first time the interval elapses.</source>
          <target state="translated">Se <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> é definido como <ph id="ph2">`true`</ph> e <ph id="ph3">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> é definido como <ph id="ph4">`false`</ph>, o <ph id="ph5">&lt;xref:System.Timers.Timer&gt;</ph> gera o <ph id="ph6">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> eventos somente uma vez, na primeira vez que o intervalo expira.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source><ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> is then set to <ph id="ph2">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> em seguida, é definido como <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>If <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> are both set to <ph id="ph3">`false`</ph>, and the timer has previously been enabled, setting the <ph id="ph4">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property causes the <ph id="ph5">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event to be raised once, as if the <ph id="ph6">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property had been set to <ph id="ph7">`true`</ph>.</source>
          <target state="translated">Se <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> são definidos como <ph id="ph3">`false`</ph>, e o timer anteriormente tiver sido habilitado, definindo o <ph id="ph4">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> propriedade faz com que o <ph id="ph5">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> evento ser gerado uma vez, como se o <ph id="ph6">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> propriedade tiver sido definida como <ph id="ph7">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>To set the interval without raising the event, you can temporarily set the <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property to <ph id="ph2">`true`</ph>, set the <ph id="ph3">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property to the desired time interval, and then immediately set the <ph id="ph4">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property back to <ph id="ph5">`false`</ph>.</source>
          <target state="translated">Para definir o intervalo sem gerar o evento, você pode definir temporariamente o <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> propriedade <ph id="ph2">`true`</ph>, defina o <ph id="ph3">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> propriedade para o intervalo de tempo desejado e, em seguida, defina imediatamente o <ph id="ph4">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> propriedade <ph id="ph5">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>The following example instantiates a <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> object that fires its <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer.</source>
          <target state="translated">O exemplo a seguir cria um <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> objeto que dispara seu <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph> evento a cada dois segundos (2000 milissegundos), define um manipulador de eventos para o evento e inicia o temporizador.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>The event handler displays the value of the <ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph> property each time it is raised.</source>
          <target state="translated">O manipulador de eventos exibe o valor da <ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph> propriedade cada vez que ele é gerado.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="P:System.Timers.Timer.Interval">
          <source>The interval is less than or equal to zero.</source>
          <target state="translated">O intervalo é menor ou igual a zero.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="P:System.Timers.Timer.Interval">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="P:System.Timers.Timer.Interval">
          <source>The interval is greater than <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>, and the timer is currently enabled.</source>
          <target state="translated">O intervalo é maior que <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> e o timer está habilitado no momento.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="P:System.Timers.Timer.Interval">
          <source>(If the timer is not currently enabled, no exception is thrown until it becomes enabled.)</source>
          <target state="translated">(Se o timer não estiver habilitado no momento, nenhuma exceção será lançada até que ele seja habilitado.)</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="P:System.Timers.Timer.Site">
          <source>Gets or sets the site that binds the <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> to its container in design mode.</source>
          <target state="translated">Obtém ou define o site que associa o <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> ao respectivo contêiner no modo de design.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Site">
          <source>An <ph id="ph1">&lt;see cref="T:System.ComponentModel.ISite" /&gt;</ph> interface representing the site that binds the <ph id="ph2">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> object to its container.</source>
          <target state="translated">Uma interface <ph id="ph1">&lt;see cref="T:System.ComponentModel.ISite" /&gt;</ph> que representa o site que associa o objeto <ph id="ph2">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> ao respectivo contêiner.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Site">
          <source>Sites bind a <ph id="ph1">&lt;xref:System.ComponentModel.Component&gt;</ph> to a <ph id="ph2">&lt;xref:System.ComponentModel.Container&gt;</ph> and enable communication between them, as well as providing a way for the container to manage its components.</source>
          <target state="translated">Sites de associar um <ph id="ph1">&lt;xref:System.ComponentModel.Component&gt;</ph> para um <ph id="ph2">&lt;xref:System.ComponentModel.Container&gt;</ph> e habilitar a comunicação entre eles, bem como fornecer uma maneira para o contêiner gerenciar seus componentes.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Timers.Timer.Start">
          <source>Starts raising the <ph id="ph1">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> event by setting <ph id="ph2">&lt;see cref="P:System.Timers.Timer.Enabled" /&gt;</ph> to <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">Começa a acionar o evento <ph id="ph1">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> definindo <ph id="ph2">&lt;see cref="P:System.Timers.Timer.Enabled" /&gt;</ph> como <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Start">
          <source>If <ph id="ph1">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph> is called and <ph id="ph2">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> is set to <ph id="ph3">`false`</ph>, the <ph id="ph4">&lt;xref:System.Timers.Timer&gt;</ph> raises the <ph id="ph5">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event only once, the first time the interval elapses.</source>
          <target state="translated">Se <ph id="ph1">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph> é chamado e <ph id="ph2">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> é definido como <ph id="ph3">`false`</ph>, o <ph id="ph4">&lt;xref:System.Timers.Timer&gt;</ph> gera o <ph id="ph5">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> eventos somente uma vez, na primeira vez que o intervalo expira.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Start">
          <source>If <ph id="ph1">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph> is called and <ph id="ph2">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> is <ph id="ph3">`true`</ph>, the <ph id="ph4">&lt;xref:System.Timers.Timer&gt;</ph> raises the <ph id="ph5">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event the first time the interval elapses and continues to raise the event on the specified interval.</source>
          <target state="translated">Se <ph id="ph1">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph> é chamado e <ph id="ph2">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> é <ph id="ph3">`true`</ph>, o <ph id="ph4">&lt;xref:System.Timers.Timer&gt;</ph> gera o <ph id="ph5">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> hora do evento primeiro o intervalo expira e continua a gerar o evento no intervalo especificado.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Start">
          <source>You can also start timing by setting <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Você também pode iniciar intervalo definindo <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> para <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Start">
          <source>If <ph id="ph1">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> is <ph id="ph2">`false`</ph>, the <ph id="ph3">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph> method must be called in order to start the count again.</source>
          <target state="translated">Se <ph id="ph1">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> é <ph id="ph2">`false`</ph>, o <ph id="ph3">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph> método deve ser chamado para iniciar a contagem novamente.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Start">
          <source>A call to the <ph id="ph1">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph> method when the timer is enabled has no effect.</source>
          <target state="translated">Uma chamada para o <ph id="ph1">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph> método quando o timer está habilitado não tem nenhum efeito.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Timers.Timer.Start">
          <source>The <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> is created with an interval equal to or greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> + 1, or set to an interval less than zero.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> é criado com um intervalo maior ou igual a <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> + 1 ou definido como um intervalo menor que zero.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Timers.Timer.Stop">
          <source>Stops raising the <ph id="ph1">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> event by setting <ph id="ph2">&lt;see cref="P:System.Timers.Timer.Enabled" /&gt;</ph> to <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Para de acionar o evento <ph id="ph1">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> definindo <ph id="ph2">&lt;see cref="P:System.Timers.Timer.Enabled" /&gt;</ph> como <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>You can also stop timing by setting <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> to <ph id="ph2">`false`</ph>.</source>
          <target state="translated">Você também pode parar o controle de tempo definindo <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> para <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>The signal to raise the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is always queued for execution on a <ph id="ph2">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread, so the event-handling method might run on one thread at the same time that a call to the <ph id="ph3">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method runs on another thread.</source>
          <target state="translated">O sinal para gerar o <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> evento sempre na fila para execução em um <ph id="ph2">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread, portanto o método de manipulação de eventos pode ser executado em um thread, ao mesmo tempo que uma chamada para o <ph id="ph3">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> método é executado em outro thread.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>This might result in the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event being raised after the <ph id="ph2">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method is called.</source>
          <target state="translated">Isso pode resultar no <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> evento que está sendo gerado após o <ph id="ph2">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> método é chamado.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>The code example in the next section shows one way to work around this race condition.</source>
          <target state="translated">O exemplo de código na próxima seção mostra uma maneira de solucionar essa condição de corrida.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>The following example instantiates a <ph id="ph1">`System.Timers.Timer`</ph> object that fires its <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph> event every two seconds (2,000 milliseconds), sets up an event handler for the  event, and starts the timer.</source>
          <target state="translated">O exemplo a seguir cria um <ph id="ph1">`System.Timers.Timer`</ph> objeto que dispara seu <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph> evento a cada dois segundos (2.000 milissegundos), define um manipulador de eventos para o evento e inicia o temporizador.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>The event handler displays the value of the <ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph> property each time it is raised.</source>
          <target state="translated">O manipulador de eventos exibe o valor da <ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph> propriedade cada vez que ele é gerado.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>When the user presses the Enter key, the application calls the  <ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method before terminating the application.</source>
          <target state="translated">Quando o usuário pressiona a tecla Enter, o aplicativo chama o <ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> método antes de encerrar o aplicativo.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>The following code example shows one way to prevent the thread that calls the <ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method from continuing until a currently executing <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event ends, and also to prevent two <ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> events from executing the event handler at the same time (often referred to as reentrancy).</source>
          <target state="translated">O exemplo de código a seguir mostra uma maneira de impedir que o thread que chama o <ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> método continue até que uma execução atualmente <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> evento termina e também para evitar que dois <ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> eventos de executar o manipulador de eventos ao mesmo tempo tempo (também conhecido como reentrância).</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>The example executes 100 test runs.</source>
          <target state="translated">O exemplo executa 100 execuções de teste.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>Each time the test is run, the timer is started with an interval of 150 milliseconds.</source>
          <target state="translated">Cada vez que o teste é executado, o temporizador é iniciado com um intervalo de 150 milissegundos.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>The event handler uses the <ph id="ph1">&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType&gt;</ph> method to simulate a task that randomly varies in length from 50 to 200 milliseconds.</source>
          <target state="translated">O manipulador de eventos usa o <ph id="ph1">&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType&gt;</ph> método para simular uma tarefa que aleatoriamente varia em comprimento de 50 a 200 milissegundos.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>The test method also starts a control thread that waits for a second and then stops the timer.</source>
          <target state="translated">O método de teste também inicia um thread de controle que aguarda um segundo e, em seguida, interrompe o timer.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>If an event is being handled when the control thread stops the timer, the control thread must wait until the event is finished before proceeding.</source>
          <target state="translated">Se um evento está sendo tratado quando o thread de controle para o timer, o thread de controle deve esperar até que o evento seja concluído antes de continuar.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> method overload is used to avoid reentrancy and to prevent the control thread from continuing until an executing event ends.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> sobrecarga do método é usada para evitar a reentrância e para impedir que o thread de controle continuando até que um evento em execução termina.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>The event handler uses the <ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method to set a control variable to 1, but only if the value is currently zero.</source>
          <target state="translated">O manipulador de eventos usa o <ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> método para definir um controle de variável como 1, mas somente se o valor no momento é zero.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>This is an atomic operation.</source>
          <target state="translated">Esta é uma operação atômica.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>If the return value is zero, the control variable has been set to 1 and the event handler proceeds.</source>
          <target state="translated">Se o valor de retorno for zero, a variável de controle foi definida como 1 e o manipulador de eventos continua.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>If the return value is non-zero, the event is simply discarded to avoid reentrancy.</source>
          <target state="translated">Se o valor de retorno é diferente de zero, o evento simplesmente é descartado para evitar a reentrada.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>(If it were necessary to execute every event, the <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> class would be a better way to synchronize the events.) When the event handler ends, it sets the control variable back to zero.</source>
          <target state="translated">(Se for necessário executar todos os eventos, o <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> classe deve ser uma maneira melhor de sincronizar os eventos.) Quando termina o manipulador de eventos, definirá a variável de controle de volta como zero.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>The example records the total number of events that executed, that were discarded because of reentrancy, and that occurred after the <ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method was called.</source>
          <target state="translated">O exemplo registra o número total de eventos que executadas, que foram descartados devido à reentrância e que ocorreu após o <ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> método foi chamado.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>The control thread uses the <ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method to set the control variable to -1 (minus one), but only if the value is currently zero.</source>
          <target state="translated">O thread de controle usa o <ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> método para definir o controle de variável como -1 (menos um), mas somente se o valor no momento é zero.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>If the atomic operation returns non-zero, an event is currently executing.</source>
          <target state="translated">Se a operação atômica retorna diferente de zero, um evento está em execução.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>The control thread waits and tries again.</source>
          <target state="translated">O thread de controle aguardará e tenta novamente.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>The example records the number of times the control thread had to wait for an event to finish.</source>
          <target state="translated">O exemplo registra o número de vezes que o thread de controle tiveram de esperar por um evento de conclusão.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>Gets or sets the object used to marshal event-handler calls that are issued when an interval has elapsed.</source>
          <target state="translated">Obtém ou define o objeto usado para realizar marshaling das chamadas do manipulador de eventos emitidas ao término de um intervalo.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>The <ph id="ph1">&lt;see cref="T:System.ComponentModel.ISynchronizeInvoke" /&gt;</ph> representing the object used to marshal the event-handler calls that are issued when an interval has elapsed.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.ComponentModel.ISynchronizeInvoke" /&gt;</ph> que representa o objeto usado para realizar marshaling das chamadas do manipulador de eventos emitidas ao término de um intervalo.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>The default is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O padrão é <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>When <ph id="ph1">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> is <ph id="ph2">`null`</ph>, the method that handles the <ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is called on a thread from the system-thread pool.</source>
          <target state="translated">Quando <ph id="ph1">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> é <ph id="ph2">`null`</ph>, o método que manipula o <ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> evento é chamado em um thread do pool de threads do sistema.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>For more information on system-thread pools, see <ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph>.</source>
          <target state="translated">Para obter mais informações sobre pools de threads do sistema, consulte <ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>When the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is handled by a visual Windows Forms component, such as a button, accessing the component through the system-thread pool might result in an exception or just might not work.</source>
          <target state="translated">Quando o <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> evento é manipulado por um componente de Windows Forms visual, como um botão, acessando o componente através do pool de thread do sistema podem resultados em uma exceção ou simplesmente pode não funcionar.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>Avoid this effect by setting <ph id="ph1">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> to a Windows Forms component, which causes the method that handles the <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event to be called on the same thread that the component was created on.</source>
          <target state="translated">Evitar esse efeito definindo <ph id="ph1">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> para um componente de Windows Forms, que faz com que o método que manipula o <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> evento seja chamado no mesmo thread em que o componente foi criado.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>Even if the <ph id="ph1">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> property is not <ph id="ph2">`null`</ph>, <ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> events can occur after the <ph id="ph4">&lt;xref:System.Timers.Timer.Dispose%2A&gt;</ph> or <ph id="ph5">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method has been called or after the <ph id="ph6">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property has been set to <ph id="ph7">`false`</ph>, because the signal to raise the <ph id="ph8">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is always queued for execution on a thread pool thread.</source>
          <target state="translated">Mesmo se o <ph id="ph1">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> propriedade não é <ph id="ph2">`null`</ph>, <ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> eventos podem ocorrer após a <ph id="ph4">&lt;xref:System.Timers.Timer.Dispose%2A&gt;</ph> ou <ph id="ph5">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> método foi chamado ou depois o <ph id="ph6">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> propriedade foi definida <ph id="ph7">`false`</ph>, pois o sinal para gerar o <ph id="ph8">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> evento sempre está na fila para execução em um pool de threads.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>One way to resolve this race condition is to set a flag that tells the event handler for the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event to ignore subsequent events.</source>
          <target state="translated">Uma maneira de resolver essa condição de corrida é definir um sinalizador que informa o manipulador de eventos para o <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> evento para ignorar os eventos subsequentes.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>If the <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> is used inside Visual Studio in a Windows Forms designer, <ph id="ph2">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> is automatically set to the control that contains the <ph id="ph3">&lt;xref:System.Timers.Timer&gt;</ph>.</source>
          <target state="translated">Se o <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> é usado dentro do Visual Studio em um designer de formulários do Windows, <ph id="ph2">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> é definida automaticamente como o controle que contém o <ph id="ph3">&lt;xref:System.Timers.Timer&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>For example, if you place a <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> on a designer for <ph id="ph2">`Form1`</ph> (which inherits from <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph>), the <ph id="ph4">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> property of <ph id="ph5">&lt;xref:System.Timers.Timer&gt;</ph> is set to the instance of <ph id="ph6">`Form1`</ph>.</source>
          <target state="translated">Por exemplo, se você colocar um <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> em um designer para <ph id="ph2">`Form1`</ph> (que herda de <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph>), o <ph id="ph4">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> propriedade <ph id="ph5">&lt;xref:System.Timers.Timer&gt;</ph> é definido como a instância do <ph id="ph6">`Form1`</ph>.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>The following example is a Windows Forms app that serves as a very simple text file editor.</source>
          <target state="translated">O exemplo a seguir é um aplicativo de Windows Forms que serve como um editor de arquivo de texto muito simples.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>When the text in the text box has not been saved, the app asks the user at one-minute intervals whether he or she wants to save the contents of the text box.</source>
          <target state="translated">Quando o texto na caixa de texto não tiver sido salvo, o aplicativo solicita que o usuário em intervalos de um minuto se ele quer salvar o conteúdo da caixa de texto.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>To do this, the <ph id="ph1">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property is set to one minute (60,000 milliseconds), and the <ph id="ph2">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> property is set to the <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph> object.</source>
          <target state="translated">Para fazer isso, o <ph id="ph1">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> está definida como um minuto (60.000 milissegundos) e o <ph id="ph2">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> está definida como o <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>The example requires that you add the following controls to the form:</source>
          <target state="translated">O exemplo requer que você adicione os seguintes controles ao formulário:</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> control named <ph id="ph2">`TextBox1`</ph> (its default name).</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> controle chamado <ph id="ph2">`TextBox1`</ph> (seu nome padrão).</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> control named <ph id="ph2">`Button1`</ph> (its default name).</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> controle chamado <ph id="ph2">`Button1`</ph> (seu nome padrão).</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Forms.SaveFileDialog&gt;</ph> control named <ph id="ph2">`SaveSaveFileDialog1`</ph> (its default name) .</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.Windows.Forms.SaveFileDialog&gt;</ph> controle chamado <ph id="ph2">`SaveSaveFileDialog1`</ph> (seu nome padrão).</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>