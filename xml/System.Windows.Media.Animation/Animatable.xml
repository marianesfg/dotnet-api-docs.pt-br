<Type Name="Animatable" FullName="System.Windows.Media.Animation.Animatable">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8ea9713148e10c8f9a95421b6bcd7b78a6cb4d56" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class Animatable : System.Windows.Freezable, System.Windows.Media.Animation.IAnimatable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Animatable extends System.Windows.Freezable implements class System.Windows.Media.Animation.IAnimatable" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.Animation.Animatable" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Animatable&#xA;Inherits Freezable&#xA;Implements IAnimatable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Animatable abstract : System::Windows::Freezable, System::Windows::Media::Animation::IAnimatable" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Freezable</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Media.Animation.IAnimatable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="45e4d-101">Classe abstrata que fornece suporte a animação.</span>
      <span class="sxs-lookup">
        <span data-stu-id="45e4d-101">Abstract class that provides animation support.</span>
      </span>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Animatable ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Animatable.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Animatable();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="45e4d-102">Inicializa uma nova instância da classe <see cref="T:System.Windows.Media.Animation.Animatable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e4d-102">Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.Animatable" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ApplyAnimationClock">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="45e4d-103">Desenha o <see cref="T:System.Windows.DependencyProperty" /> especificado usando o <see cref="T:System.Windows.Media.Animation.AnimationClock" /> especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e4d-103">Animates the specified <see cref="T:System.Windows.DependencyProperty" /> using the specified <see cref="T:System.Windows.Media.Animation.AnimationClock" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ApplyAnimationClock">
      <MemberSignature Language="C#" Value="public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAnimationClock(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationClock clock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyAnimationClock (dp As DependencyProperty, clock As AnimationClock)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ApplyAnimationClock(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationClock ^ clock);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="clock" Type="System.Windows.Media.Animation.AnimationClock" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="45e4d-104">A propriedade a ser animada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e4d-104">The property to animate.</span>
          </span>
        </param>
        <param name="clock">
          <span data-ttu-id="45e4d-105">O relógio com o qual animar a propriedade especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e4d-105">The clock with which to animate the specified property.</span>
          </span>
          <span data-ttu-id="45e4d-106">Se <c>relógio</c> for <see langword="null" />, todas as animações serão removidas da propriedade especificada (mas não interrompidas).</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e4d-106">If <c>clock</c> is <see langword="null" />, all animations will be removed from the specified property (but not stopped).</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45e4d-107">Aplica um <see cref="T:System.Windows.Media.Animation.AnimationClock" /> ao <see cref="T:System.Windows.DependencyProperty" /> especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e4d-107">Applies an <see cref="T:System.Windows.Media.Animation.AnimationClock" /> to the specified <see cref="T:System.Windows.DependencyProperty" />.</span>
          </span>
          <span data-ttu-id="45e4d-108">Se a propriedade já tiver sido animada, o comportamento de entrega de <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /> será usado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e4d-108">If the property is already animated, the <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /> handoff behavior is used.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45e4d-109">Observe que usando esse método para remover os relógios de uma propriedade não interrompe os relógios.</span><span class="sxs-lookup"><span data-stu-id="45e4d-109">Note that using this method to removing clocks from a property does not stop those clocks.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyAnimationClock">
      <MemberSignature Language="C#" Value="public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAnimationClock(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationClock clock, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ApplyAnimationClock(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationClock ^ clock, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="clock" Type="System.Windows.Media.Animation.AnimationClock" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="45e4d-110">A propriedade a ser animada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e4d-110">The property to animate.</span>
          </span>
        </param>
        <param name="clock">
          <span data-ttu-id="45e4d-111">O relógio com o qual animar a propriedade especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e4d-111">The clock with which to animate the specified property.</span>
          </span>
          <span data-ttu-id="45e4d-112">Se <c>handoffBehavior</c> for <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /> e <c>relógio</c> for <see langword="null" />, todas as animações serão removidas da propriedade especificada (mas não interrompidas).</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e4d-112">If <c>handoffBehavior</c> is <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /> and <c>clock</c> is <see langword="null" />, all animations will be removed from the specified property (but not stopped).</span>
          </span>
          <span data-ttu-id="45e4d-113">Se <c>handoffBehavior</c> for <see cref="F:System.Windows.Media.Animation.HandoffBehavior.Compose" /> e o relógio for <see langword="null" />, esse método não terá efeito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e4d-113">If <c>handoffBehavior</c> is <see cref="F:System.Windows.Media.Animation.HandoffBehavior.Compose" /> and clock is <see langword="null" />, this method has no effect.</span>
          </span>
        </param>
        <param name="handoffBehavior">
          <span data-ttu-id="45e4d-114">Um valor que especifica como a nova animação deve interagir com qualquer animação atual que já afete o valor da propriedade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e4d-114">A value that specifies how the new animation should interact with any current animations already affecting the property value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45e4d-115">Aplica um <see cref="T:System.Windows.Media.Animation.AnimationClock" /> ao <see cref="T:System.Windows.DependencyProperty" /> especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e4d-115">Applies an <see cref="T:System.Windows.Media.Animation.AnimationClock" /> to the specified <see cref="T:System.Windows.DependencyProperty" />.</span>
          </span>
          <span data-ttu-id="45e4d-116">Se a propriedade já for animada, o <see cref="T:System.Windows.Media.Animation.HandoffBehavior" /> especificado será usado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e4d-116">If the property is already animated, the specified <see cref="T:System.Windows.Media.Animation.HandoffBehavior" /> is used.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45e4d-117">Observe que usando esse método para remover os relógios de uma propriedade não interrompe os relógios.</span><span class="sxs-lookup"><span data-stu-id="45e4d-117">Note that using this method to remove clocks from a property does not stop those clocks.</span></span>  
  
## <a name="using-the-compose-handoffbehavior"></a><span data-ttu-id="45e4d-118">Usando o HandoffBehavior de composição</span><span class="sxs-lookup"><span data-stu-id="45e4d-118">Using the Compose HandoffBehavior</span></span>  
 <span data-ttu-id="45e4d-119">Quando você aplica um <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, ou <xref:System.Windows.Media.Animation.AnimationClock> para uma propriedade usando o <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>, qualquer <xref:System.Windows.Media.Animation.Clock> objetos anteriormente associados com aquela propriedade continuam a consumir recursos do sistema; o sistema de tempo não removerá esses relógios automaticamente.</span><span class="sxs-lookup"><span data-stu-id="45e4d-119">When you apply a <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, or <xref:System.Windows.Media.Animation.AnimationClock> to a property using the <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>, any <xref:System.Windows.Media.Animation.Clock> objects previously associated with that property continue to consume system resources; the timing system will not remove these clocks automatically.</span></span>  
  
 <span data-ttu-id="45e4d-120">Para evitar problemas de desempenho ao aplicar um grande número de relógios usando <xref:System.Windows.Media.Animation.HandoffBehavior.Compose>, você deve remover relógios de composição da propriedade animada após a conclusão.</span><span class="sxs-lookup"><span data-stu-id="45e4d-120">To avoid performance issues when you apply a large number of clocks using <xref:System.Windows.Media.Animation.HandoffBehavior.Compose>, you should remove composing clocks from the animated property after they complete.</span></span> <span data-ttu-id="45e4d-121">Há várias maneiras para remover um relógio.</span><span class="sxs-lookup"><span data-stu-id="45e4d-121">There are several ways to remove a clock.</span></span>  
  
-   <span data-ttu-id="45e4d-122">Para remover todos os relógios de uma propriedade, use o <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> ou <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> método do objeto animado.</span><span class="sxs-lookup"><span data-stu-id="45e4d-122">To remove all clocks from a property, use the <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> or <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> method of the animated object.</span></span> <span data-ttu-id="45e4d-123">Especifique a propriedade sendo animada como o primeiro parâmetro, e `null` como o segundo.</span><span class="sxs-lookup"><span data-stu-id="45e4d-123">Specify the property being animated as the first parameter, and `null` as the second.</span></span> <span data-ttu-id="45e4d-124">Isso removerá todos os relógios de animação da propriedade.</span><span class="sxs-lookup"><span data-stu-id="45e4d-124">This will remove all animation clocks from the property.</span></span>  
  
-   <span data-ttu-id="45e4d-125">Para remover um determinado <xref:System.Windows.Media.Animation.AnimationClock> de uma lista de relógios, use o <xref:System.Windows.Media.Animation.Clock.Controller%2A> propriedade do <xref:System.Windows.Media.Animation.AnimationClock> para recuperar um <xref:System.Windows.Media.Animation.ClockController>, chame o <xref:System.Windows.Media.Animation.ClockController.Remove%2A> método do <xref:System.Windows.Media.Animation.ClockController>.</span><span class="sxs-lookup"><span data-stu-id="45e4d-125">To remove a specific <xref:System.Windows.Media.Animation.AnimationClock> from a list of clocks, use the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of the <xref:System.Windows.Media.Animation.AnimationClock> to retrieve a <xref:System.Windows.Media.Animation.ClockController>, then call the <xref:System.Windows.Media.Animation.ClockController.Remove%2A> method of the <xref:System.Windows.Media.Animation.ClockController>.</span></span> <span data-ttu-id="45e4d-126">Isso geralmente é feito o <xref:System.Windows.Media.Animation.Clock.Completed> um relógio de manipulador de eventos.</span><span class="sxs-lookup"><span data-stu-id="45e4d-126">This is typically done in the <xref:System.Windows.Media.Animation.Clock.Completed> event handler for a clock.</span></span> <span data-ttu-id="45e4d-127">Observe que somente relógios de raiz podem ser controlados por um <xref:System.Windows.Media.Animation.ClockController>; o <xref:System.Windows.Media.Animation.Clock.Controller%2A> propriedade de um relógio filho retornará `null`.</span><span class="sxs-lookup"><span data-stu-id="45e4d-127">Note that only root clocks can be controlled by a <xref:System.Windows.Media.Animation.ClockController>; the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of a child clock will return `null`.</span></span> <span data-ttu-id="45e4d-128">Observe também que o <xref:System.Windows.Media.Animation.Clock.Completed> evento não será chamado se a duração efetiva do relógio for indefinida.</span><span class="sxs-lookup"><span data-stu-id="45e4d-128">Note also that the <xref:System.Windows.Media.Animation.Clock.Completed> event will not be called if the effective duration of the clock is forever.</span></span>  <span data-ttu-id="45e4d-129">Nesse caso, o usuário precisará determinar quando chamar <xref:System.Windows.Media.Animation.ClockController.Remove%2A>.</span><span class="sxs-lookup"><span data-stu-id="45e4d-129">In that case, the user will need to determine when to call <xref:System.Windows.Media.Animation.ClockController.Remove%2A>.</span></span>  
  
 <span data-ttu-id="45e4d-130">Isso é basicamente um problema para animações em objetos que têm um longo tempo de vida.</span><span class="sxs-lookup"><span data-stu-id="45e4d-130">This is primarily an issue for animations on objects that have a long lifetime.</span></span>  <span data-ttu-id="45e4d-131">Quando um objeto passa pela coleta de lixo, seus relógios também serão desconectados e coletados como lixo.</span><span class="sxs-lookup"><span data-stu-id="45e4d-131">When an object is garbage collected, its clocks will also be disconnected and garbage collected.</span></span>  
  
 <span data-ttu-id="45e4d-132">Para obter mais informações sobre objetos clock, consulte o [visão geral do sistema de controle de tempo e animação](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md).</span><span class="sxs-lookup"><span data-stu-id="45e4d-132">For more information about clock objects, see the [Animation and Timing System Overview](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45e4d-133">O exemplo a seguir mostra como aplicar os relógios de animação usando diferentes <xref:System.Windows.Media.Animation.HandoffBehavior> configurações.</span><span class="sxs-lookup"><span data-stu-id="45e4d-133">The following example shows how to apply animation clocks using different <xref:System.Windows.Media.Animation.HandoffBehavior> settings.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAnimation">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="45e4d-134">Aplica uma animação ao <see cref="T:System.Windows.DependencyProperty" /> especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e4d-134">Applies an animation to the specified <see cref="T:System.Windows.DependencyProperty" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAnimation">
      <MemberSignature Language="C#" Value="public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAnimation(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationTimeline animation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginAnimation (dp As DependencyProperty, animation As AnimationTimeline)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginAnimation(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationTimeline ^ animation);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="animation" Type="System.Windows.Media.Animation.AnimationTimeline" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="45e4d-135">A propriedade a ser animada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e4d-135">The property to animate.</span>
          </span>
        </param>
        <param name="animation">
          <span data-ttu-id="45e4d-136">A animação usada para animar a propriedade especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e4d-136">The animation used to animate the specified property.</span>
          </span>
          <span data-ttu-id="45e4d-137">Se o <see cref="P:System.Windows.Media.Animation.Timeline.BeginTime" /> da animação for <see langword="null" />, todas as animações atuais serão removidas e o valor atual da propriedade será mantido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e4d-137">If the animation's <see cref="P:System.Windows.Media.Animation.Timeline.BeginTime" /> is <see langword="null" />, any current animations will be removed and the current value of the property will be held.</span>
          </span>
          <span data-ttu-id="45e4d-138">Se <c>animação</c> for <see langword="null" />, todas as animações serão removidas da propriedade e o valor da propriedade será revertido para seu valor de base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e4d-138">If <c>animation</c> is <see langword="null" />, all animations will be removed from the property and the property value will revert back to its base value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45e4d-139">Aplica uma animação ao <see cref="T:System.Windows.DependencyProperty" /> especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e4d-139">Applies an animation to the specified <see cref="T:System.Windows.DependencyProperty" />.</span>
          </span>
          <span data-ttu-id="45e4d-140">A animação é iniciada quando o próximo quadro for renderizado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e4d-140">The animation is started when the next frame is rendered.</span>
          </span>
          <span data-ttu-id="45e4d-141">Se a propriedade especificada já tiver sido animada, o comportamento de entrega de <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /> será usado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e4d-141">If the specified property is already animated, the <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /> handoff behavior is used.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45e4d-142">Se a animação tem um <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> que é maior que zero, a animação começa depois que o período de tempo decorrido desde o momento em que o próximo quadro é processado.</span><span class="sxs-lookup"><span data-stu-id="45e4d-142">If the animation has a <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> that is greater than zero, the animation begins after that amount of time has elapsed from the time the next frame is rendered.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginAnimation">
      <MemberSignature Language="C#" Value="public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAnimation(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationTimeline animation, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginAnimation(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationTimeline ^ animation, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="animation" Type="System.Windows.Media.Animation.AnimationTimeline" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="45e4d-143">A propriedade a ser animada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e4d-143">The property to animate.</span>
          </span>
        </param>
        <param name="animation">
          <span data-ttu-id="45e4d-144">A animação usada para animar a propriedade especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e4d-144">The animation used to animate the specified property.</span>
          </span>
          <span data-ttu-id="45e4d-145">Se o <c>handoffBehavior</c> for <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /> e o <see cref="P:System.Windows.Media.Animation.Timeline.BeginTime" /> da animação for <see langword="null" />, todas as animações atuais serão removidas e o valor atual da propriedade será mantido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e4d-145">If <c>handoffBehavior</c> is <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /> and the animation's <see cref="P:System.Windows.Media.Animation.Timeline.BeginTime" /> is <see langword="null" />, any current animations will be removed and the current value of the property will be held.</span>
          </span>
          <span data-ttu-id="45e4d-146">Se o <c>handoffBehavior</c> for <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /> e <c>animação</c> for uma referência de <see langword="null" />, todas as animações serão removidas da propriedade e o valor da propriedade voltará para seu valor de base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e4d-146">If <c>handoffBehavior</c> is <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /> and <c>animation</c> is a <see langword="null" /> reference, all animations will be removed from the property and the property value will revert back to its base value.</span>
          </span>
          <span data-ttu-id="45e4d-147">Se <c>handoffBehavior</c> for <see cref="F:System.Windows.Media.Animation.HandoffBehavior.Compose" />, esse método não terá efeito se a animação ou seus <see cref="P:System.Windows.Media.Animation.Timeline.BeginTime" /> for <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e4d-147">If <c>handoffBehavior</c> is <see cref="F:System.Windows.Media.Animation.HandoffBehavior.Compose" />, this method will have no effect if the animation or its <see cref="P:System.Windows.Media.Animation.Timeline.BeginTime" /> is <see langword="null" />.</span>
          </span>
        </param>
        <param name="handoffBehavior">
          <span data-ttu-id="45e4d-148">Um valor que especifica como a nova animação deve interagir com qualquer animação atual que já afete o valor da propriedade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e4d-148">A value that specifies how the new animation should interact with any current animations already affecting the property value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45e4d-149">Aplica uma animação ao <see cref="T:System.Windows.DependencyProperty" /> especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e4d-149">Applies an animation to the specified <see cref="T:System.Windows.DependencyProperty" />.</span>
          </span>
          <span data-ttu-id="45e4d-150">A animação é iniciada quando o próximo quadro for renderizado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e4d-150">The animation is started when the next frame is rendered.</span>
          </span>
          <span data-ttu-id="45e4d-151">Se a propriedade especifica já for animada, o <see cref="T:System.Windows.Media.Animation.HandoffBehavior" /> especificado será usado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e4d-151">If the specified property is already animated, the specified <see cref="T:System.Windows.Media.Animation.HandoffBehavior" /> is used.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45e4d-152">Se a animação tem um <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> que é maior que zero, a animação começa depois que o período de tempo decorrido desde o momento em que o próximo quadro é processado.</span><span class="sxs-lookup"><span data-stu-id="45e4d-152">If the animation has a <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> that is greater than zero, the animation begins after that amount of time has elapsed from the time the next frame is rendered.</span></span>  
  
## <a name="using-the-compose-handoffbehavior"></a><span data-ttu-id="45e4d-153">Usando o HandoffBehavior de composição</span><span class="sxs-lookup"><span data-stu-id="45e4d-153">Using the Compose HandoffBehavior</span></span>  
 <span data-ttu-id="45e4d-154">Quando você aplica um <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, ou <xref:System.Windows.Media.Animation.AnimationClock> para uma propriedade usando o <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>, qualquer <xref:System.Windows.Media.Animation.Clock> objetos anteriormente associados com aquela propriedade continuam a consumir recursos do sistema; o sistema de tempo não removerá esses relógios automaticamente.</span><span class="sxs-lookup"><span data-stu-id="45e4d-154">When you apply a <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, or <xref:System.Windows.Media.Animation.AnimationClock> to a property using the <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>, any <xref:System.Windows.Media.Animation.Clock> objects previously associated with that property continue to consume system resources; the timing system will not remove these clocks automatically.</span></span>  
  
 <span data-ttu-id="45e4d-155">Para evitar problemas de desempenho ao aplicar um grande número de relógios usando <xref:System.Windows.Media.Animation.HandoffBehavior.Compose>, você deve remover relógios de composição da propriedade animada após a conclusão.</span><span class="sxs-lookup"><span data-stu-id="45e4d-155">To avoid performance issues when you apply a large number of clocks using <xref:System.Windows.Media.Animation.HandoffBehavior.Compose>, you should remove composing clocks from the animated property after they complete.</span></span> <span data-ttu-id="45e4d-156">Há várias maneiras para remover um relógio.</span><span class="sxs-lookup"><span data-stu-id="45e4d-156">There are several ways to remove a clock.</span></span>  
  
-   <span data-ttu-id="45e4d-157">Para remover todos os relógios de uma propriedade, use o <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> ou <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> método do objeto animado.</span><span class="sxs-lookup"><span data-stu-id="45e4d-157">To remove all clocks from a property, use the <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> or <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> method of the animated object.</span></span> <span data-ttu-id="45e4d-158">Especifique a propriedade sendo animada como o primeiro parâmetro, e `null` como o segundo.</span><span class="sxs-lookup"><span data-stu-id="45e4d-158">Specify the property being animated as the first parameter, and `null` as the second.</span></span> <span data-ttu-id="45e4d-159">Isso removerá todos os relógios de animação da propriedade.</span><span class="sxs-lookup"><span data-stu-id="45e4d-159">This will remove all animation clocks from the property.</span></span>  
  
-   <span data-ttu-id="45e4d-160">Para remover um determinado <xref:System.Windows.Media.Animation.AnimationClock> de uma lista de relógios, use o <xref:System.Windows.Media.Animation.Clock.Controller%2A> propriedade do <xref:System.Windows.Media.Animation.AnimationClock> para recuperar um <xref:System.Windows.Media.Animation.ClockController>, chame o <xref:System.Windows.Media.Animation.ClockController.Remove%2A> método do <xref:System.Windows.Media.Animation.ClockController>.</span><span class="sxs-lookup"><span data-stu-id="45e4d-160">To remove a specific <xref:System.Windows.Media.Animation.AnimationClock> from a list of clocks, use the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of the <xref:System.Windows.Media.Animation.AnimationClock> to retrieve a <xref:System.Windows.Media.Animation.ClockController>, then call the <xref:System.Windows.Media.Animation.ClockController.Remove%2A> method of the <xref:System.Windows.Media.Animation.ClockController>.</span></span> <span data-ttu-id="45e4d-161">Isso geralmente é feito o <xref:System.Windows.Media.Animation.Clock.Completed> um relógio de manipulador de eventos.</span><span class="sxs-lookup"><span data-stu-id="45e4d-161">This is typically done in the <xref:System.Windows.Media.Animation.Clock.Completed> event handler for a clock.</span></span> <span data-ttu-id="45e4d-162">Observe que somente relógios de raiz podem ser controlados por um <xref:System.Windows.Media.Animation.ClockController>; o <xref:System.Windows.Media.Animation.Clock.Controller%2A> propriedade de um relógio filho retornará `null`.</span><span class="sxs-lookup"><span data-stu-id="45e4d-162">Note that only root clocks can be controlled by a <xref:System.Windows.Media.Animation.ClockController>; the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of a child clock will return `null`.</span></span> <span data-ttu-id="45e4d-163">Observe também que o <xref:System.Windows.Media.Animation.Clock.Completed> evento não será chamado se a duração efetiva do relógio for indefinida.</span><span class="sxs-lookup"><span data-stu-id="45e4d-163">Note also that the <xref:System.Windows.Media.Animation.Clock.Completed> event will not be called if the effective duration of the clock is forever.</span></span>  <span data-ttu-id="45e4d-164">Nesse caso, o usuário precisará determinar quando chamar <xref:System.Windows.Media.Animation.ClockController.Remove%2A>.</span><span class="sxs-lookup"><span data-stu-id="45e4d-164">In that case, the user will need to determine when to call <xref:System.Windows.Media.Animation.ClockController.Remove%2A>.</span></span>  
  
 <span data-ttu-id="45e4d-165">Isso é basicamente um problema para animações em objetos que têm um longo tempo de vida.</span><span class="sxs-lookup"><span data-stu-id="45e4d-165">This is primarily an issue for animations on objects that have a long lifetime.</span></span>  <span data-ttu-id="45e4d-166">Quando um objeto passa pela coleta de lixo, seus relógios também serão desconectados e coletados como lixo.</span><span class="sxs-lookup"><span data-stu-id="45e4d-166">When an object is garbage collected, its clocks will also be disconnected and garbage collected.</span></span>  
  
 <span data-ttu-id="45e4d-167">Para obter mais informações sobre objetos clock, consulte o [visão geral do sistema de controle de tempo e animação](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md).</span><span class="sxs-lookup"><span data-stu-id="45e4d-167">For more information about clock objects, see the [Animation and Timing System Overview](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45e4d-168">O exemplo a seguir mostra como aplicar animações usando diferentes <xref:System.Windows.Media.Animation.HandoffBehavior> configurações.</span><span class="sxs-lookup"><span data-stu-id="45e4d-168">The following example shows how to apply animations using different <xref:System.Windows.Media.Animation.HandoffBehavior> settings.</span></span>  
  
 [!code-cpp[animateproperty#InteractiveAnimationExampleWholePage](~/samples/snippets/cpp/VS_Snippets_Wpf/animateproperty/CPP/InteractiveExample.cpp#interactiveanimationexamplewholepage)]
 [!code-csharp[animateproperty#InteractiveAnimationExampleWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/animateproperty/CSharp/InteractiveExample.cs#interactiveanimationexamplewholepage)]
 [!code-vb[animateproperty#InteractiveAnimationExampleWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/animateproperty/VisualBasic/InteractiveExample.vb#interactiveanimationexamplewholepage)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Animation.Animatable Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Media.Animation.Animatable Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Animatable.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Animatable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Media::Animation::Animatable ^ Clone();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Animation.Animatable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="45e4d-169">Cria um clone modificável desse <see cref="T:System.Windows.Media.Animation.Animatable" />, fazendo cópias em profundidade dos valores do objeto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e4d-169">Creates a modifiable clone of this <see cref="T:System.Windows.Media.Animation.Animatable" />, making deep copies of this object's values.</span>
          </span>
          <span data-ttu-id="45e4d-170">Ao copiar as propriedades de dependência desse objeto, esse método copia associações de dados e referências de recurso (mas talvez eles não possam mais se resolver), mas não animações ou seus valores atuais.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e4d-170">When copying this object's dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45e4d-171">Um clone modificável dessa instância.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e4d-171">A modifiable clone of this instance.</span>
          </span>
          <span data-ttu-id="45e4d-172">O clone retornado é efetivamente uma cópia profunda do objeto atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e4d-172">The returned clone is effectively a deep copy of the current object.</span>
          </span>
          <span data-ttu-id="45e4d-173">A propriedade <see cref="P:System.Windows.Freezable.IsFrozen" /> do clone é **false**.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e4d-173">The clone's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is **false**.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45e4d-174">O <xref:System.Windows.Media.Animation.Animatable.Clone%2A> método pode ser usado para gerar cópias modificáveis de congelada <xref:System.Windows.Freezable> objetos.</span><span class="sxs-lookup"><span data-stu-id="45e4d-174">The <xref:System.Windows.Media.Animation.Animatable.Clone%2A> method can be used to produce modifiable copies of frozen <xref:System.Windows.Freezable> objects.</span></span> <span data-ttu-id="45e4d-175">Para sua conveniência, este método sombreia a herdadas <xref:System.Windows.Freezable.Clone%2A> método para fornecer uma implementação fortemente tipada.</span><span class="sxs-lookup"><span data-stu-id="45e4d-175">For convenience, this method shadows the inherited <xref:System.Windows.Freezable.Clone%2A> method to provide a strongly typed implementation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Freezable.Clone" />
      </Docs>
    </Member>
    <Member MemberName="FreezeCore">
      <MemberSignature Language="C#" Value="protected override bool FreezeCore (bool isChecking);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool FreezeCore(bool isChecking) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Animatable.FreezeCore(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function FreezeCore (isChecking As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool FreezeCore(bool isChecking);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isChecking" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isChecking">
          <span data-ttu-id="45e4d-176">
            <see langword="true" /> se este método deve simplesmente determinar se esta instância pode ser congelada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e4d-176">
              <see langword="true" /> if this method should simply determine whether this instance can be frozen.</span>
          </span>
          <span data-ttu-id="45e4d-177">
            <see langword="false" /> se esta instância, na verdade, deve congelar a si mesma quando este método é chamado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e4d-177">
              <see langword="false" /> if this instance should actually freeze itself when this method is called.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45e4d-178">Faz com que este objeto <see cref="T:System.Windows.Media.Animation.Animatable" /> não seja modificável ou determina se ele pode se tornar não modificável.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e4d-178">Makes this <see cref="T:System.Windows.Media.Animation.Animatable" /> object unmodifiable or determines whether it can be made unmodifiable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45e4d-179">Se <paramref name="isChecking" /> for <see langword="true" />, esse método retorna <see langword="true" /> se este <see cref="T:System.Windows.Media.Animation.Animatable" /> puder se tornar não modificável ou <see langword="false" />, se ele não puder se tornar não modificável.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e4d-179">If <paramref name="isChecking" /> is <see langword="true" />, this method returns <see langword="true" /> if this <see cref="T:System.Windows.Media.Animation.Animatable" /> can be made unmodifiable, or <see langword="false" /> if it cannot be made unmodifiable.</span>
          </span>
          <span data-ttu-id="45e4d-180">Se <paramref name="isChecking" /> for <see langword="false" />, este método retorna <see langword="true" /> se esse <see cref="T:System.Windows.Media.Animation.Animatable" /> agora for não modificável ou <see langword="false" />, se não puder se tornar não modificável, com o efeito colateral de ter começado a alterar o status de congelamento deste objeto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e4d-180">If <paramref name="isChecking" /> is <see langword="false" />, this method returns <see langword="true" /> if the if this <see cref="T:System.Windows.Media.Animation.Animatable" /> is now unmodifiable, or <see langword="false" /> if it cannot be made unmodifiable, with the side effect of having begun to change the frozen status of this object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45e4d-181">Esse método retornará **false** quando <xref:System.Windows.Media.Animation.Animatable.HasAnimatedProperties%2A> é **true**.</span><span class="sxs-lookup"><span data-stu-id="45e4d-181">This method will return **false** when <xref:System.Windows.Media.Animation.Animatable.HasAnimatedProperties%2A> is **true**.</span></span>  
  
 <span data-ttu-id="45e4d-182">Não chame este método diretamente (exceto quando chamar base em uma implementação).</span><span class="sxs-lookup"><span data-stu-id="45e4d-182">Do not call this method directly (except when calling base in an implementation).</span></span> <span data-ttu-id="45e4d-183">Esse método é chamado internamente por <xref:System.Windows.Freezable.CanFreeze%2A> (com `isChecking` igual a `true`) e <xref:System.Windows.Freezable.Freeze%2A> (com `isChecking` igual a `false`).</span><span class="sxs-lookup"><span data-stu-id="45e4d-183">This method is called internally by <xref:System.Windows.Freezable.CanFreeze%2A> (with `isChecking` equal to `true`) and  <xref:System.Windows.Freezable.Freeze%2A> (with `isChecking` equal to `false`).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="45e4d-184">Classes que derivam de <see cref="T:System.Windows.Media.Animation.Animatable" /> devem substituir este método quando a classe contém dados que não são armazenados usando as propriedades de dependência.</span>
            <span class="sxs-lookup">
              <span data-stu-id="45e4d-184">Classes that derive from <see cref="T:System.Windows.Media.Animation.Animatable" /> must override this method when the class contains data that is not stored using dependency properties.</span>
            </span>
            <span data-ttu-id="45e4d-185">Uma implementação típica seria chamar a implementação base, em seguida, chame estático <see cref="M:System.Windows.Freezable.Freeze" /> método em todos os <see cref="T:System.Windows.Freezable" /> digitado propriedades que contém a classe, retornando <see langword="true" /> somente se todas as propriedades estavam congeladas (ou foi congeladas, no caso de passar por um <see langword="false" /> valor para <paramref name="isChecking" />).</span>
            <span class="sxs-lookup">
              <span data-stu-id="45e4d-185">A typical implementation would call the base implementation, then call the static <see cref="M:System.Windows.Freezable.Freeze" /> method on all <see cref="T:System.Windows.Freezable" /> typed properties that the class contains, returning <see langword="true" /> only if all properties were frozen (or could have been frozen, in the case of passing through a <see langword="false" /> value for <paramref name="isChecking" />).</span>
            </span>
          </para>
        </block>
        <altmember cref="M:System.Windows.Freezable.CloneCore(System.Windows.Freezable)" />
      </Docs>
    </Member>
    <Member MemberName="GetAnimationBaseValue">
      <MemberSignature Language="C#" Value="public object GetAnimationBaseValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetAnimationBaseValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Animatable.GetAnimationBaseValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAnimationBaseValue (dp As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetAnimationBaseValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.GetAnimationBaseValue(System.Windows.DependencyProperty)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="45e4d-186">Identifica a propriedade cujo valor base (não animado) deve ser recuperado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e4d-186">Identifies the property whose base (non-animated) value should be retrieved.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45e4d-187">Retorna o valor não animado do <see cref="T:System.Windows.DependencyProperty" /> especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e4d-187">Returns the non-animated value of the specified <see cref="T:System.Windows.DependencyProperty" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45e4d-188">O valor que será retornado se a propriedade especificada não for animada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e4d-188">The value that would be returned if the specified property were not animated.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45e4d-189">Se a propriedade especificada não é animada, esse método retorna o mesmo resultado como <xref:System.Windows.DependencyObject.GetValue%2A>.</span><span class="sxs-lookup"><span data-stu-id="45e4d-189">If the specified property is not animated, this method returns the same result as <xref:System.Windows.DependencyObject.GetValue%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45e4d-190">No exemplo a seguir, os valores não-animado de propriedades de animação são recuperados e exibidos.</span><span class="sxs-lookup"><span data-stu-id="45e4d-190">In the following example, the non-animated values of animated properties are retrieved and displayed.</span></span>  
  
 [!code-csharp[timingbehaviors_procedural_snip#GetAnimationBaseValueExampleWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_procedural_snip/CSharp/GetAnimationBaseValueExample.cs#getanimationbasevalueexamplewholepage)]
 [!code-vb[timingbehaviors_procedural_snip#GetAnimationBaseValueExampleWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_procedural_snip/visualbasic/getanimationbasevalueexample.vb#getanimationbasevalueexamplewholepage)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasAnimatedProperties">
      <MemberSignature Language="C#" Value="public bool HasAnimatedProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasAnimatedProperties" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.Animatable.HasAnimatedProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasAnimatedProperties As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasAnimatedProperties { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Media.Animation.IAnimatable.HasAnimatedProperties</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="45e4d-191">Obtém um valor que indica se um ou mais objetos <see cref="T:System.Windows.Media.Animation.AnimationClock" /> está associado a qualquer uma das propriedades de dependência do objeto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e4d-191">Gets a value that indicates whether one or more <see cref="T:System.Windows.Media.Animation.AnimationClock" /> objects is associated with any of this object's dependency properties.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="45e4d-192">**True** se um ou mais <see cref="T:System.Windows.Media.Animation.AnimationClock" /> objetos é associado a qualquer uma das propriedades de dependência do objeto; caso contrário, **false**.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e4d-192">**true** if one or more <see cref="T:System.Windows.Media.Animation.AnimationClock" /> objects is associated with any of this object's dependency properties; otherwise, **false**.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45e4d-193">Essa propriedade não indica se este objeto contém subobjetos animados.</span><span class="sxs-lookup"><span data-stu-id="45e4d-193">This property does not indicate whether this object contains animated sub-objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeStoredWeakReference">
      <MemberSignature Language="C#" Value="public static bool ShouldSerializeStoredWeakReference (System.Windows.DependencyObject target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ShouldSerializeStoredWeakReference(class System.Windows.DependencyObject target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ShouldSerializeStoredWeakReference (target As DependencyObject) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ShouldSerializeStoredWeakReference(System::Windows::DependencyObject ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="45e4d-194">Representa um objeto que participa do sistema de propriedade de dependência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e4d-194">Represents an object that participates in the dependency property system.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45e4d-195">Especifica se um objeto de dependência deve ser serializado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e4d-195">Specifies whether a dependency object should be serialized.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45e4d-196">
            <see langword="true" /> para serializar <paramref name="target" />; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e4d-196">
              <see langword="true" /> to serialize <paramref name="target" />; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="45e4d-197">O padrão é <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e4d-197">The default is <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45e4d-198">O <xref:System.ComponentModel.TypeDescriptor> classe usa a <xref:System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference%2A> método para determinar se uma propriedade deve ser serializada.</span><span class="sxs-lookup"><span data-stu-id="45e4d-198">The <xref:System.ComponentModel.TypeDescriptor> class uses the <xref:System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference%2A> method to determine if a property should be serialized.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>