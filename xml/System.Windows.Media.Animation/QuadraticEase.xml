<Type Name="QuadraticEase" FullName="System.Windows.Media.Animation.QuadraticEase">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2be2a4f49cc021a99665e1dfa806b92d4365daaa" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36497392" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class QuadraticEase : System.Windows.Media.Animation.EasingFunctionBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit QuadraticEase extends System.Windows.Media.Animation.EasingFunctionBase" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.Animation.QuadraticEase" />
  <TypeSignature Language="VB.NET" Value="Public Class QuadraticEase&#xA;Inherits EasingFunctionBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class QuadraticEase : System::Windows::Media::Animation::EasingFunctionBase" />
  <TypeSignature Language="F#" Value="type QuadraticEase = class&#xA;    inherit EasingFunctionBase" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Media.Animation.EasingFunctionBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Represents an easing function that creates an animation that accelerates and/or decelerates using the formula *f*(*t*) = *t*<sup>2</sup></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você pode controlar se a animação acelera, será desacelerado, ou ambos, especificando o <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>. O gráfico a seguir abaixo demonstra os diferentes valores de <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>, onde *f*(*t*) representa o progresso de animação e *t* representa a hora.  
  
 ![QuadraticEase com gráficos de diferentes easingmodes](~/add/media/quadraticease-graph.png "QuadraticEase com gráficos de diferentes easingmodes")  
  
 A fórmula usada para esta função é o seguinte.  
  
 *f*(*t*) = *t*<sup>2</sup>  
  
> [!NOTE]
>  Você pode usar <xref:System.Windows.Media.Animation.PowerEase> para criar o mesmo comportamento que <xref:System.Windows.Media.Animation.CubicEase>, <xref:System.Windows.Media.Animation.QuadraticEase>, <xref:System.Windows.Media.Animation.QuarticEase>, e <xref:System.Windows.Media.Animation.QuinticEase> usando o <xref:System.Windows.Media.Animation.PowerEase.Power%2A> propriedade. Por exemplo, se você quiser usar <xref:System.Windows.Media.Animation.PowerEase> para substituir <xref:System.Windows.Media.Animation.CubicEase>, especifique um <xref:System.Windows.Media.Animation.PowerEase.Power%2A> valor 3.  
  
 Há várias outras funções de atenuação além <xref:System.Windows.Media.Animation.QuadraticEase> que você pode explorar usando o exemplo a seguir do Silverlight.  
  
 [Executar esta amostra](http://go.microsoft.com/fwlink/?LinkId=139798&sref=easing_functions_gallery)  
  
 Além de usar as funções de atenuação incluídas no tempo de execução, você pode criar suas próprias funções personalizadas de atenuação herdando de <xref:System.Windows.Media.Animation.EasingFunctionBase>.  
  
<a name="xamlObjectElementUsage_QuadraticEase"></a>   
## <a name="xaml-object-element-usage"></a>Uso de elemento Object do XAML  
  
```  
<QuadraticEase .../>  
```  
  
   
  
## Examples  
 O exemplo a seguir aplica-se um <xref:System.Windows.Media.Animation.QuadraticEase> facilitando a função para um <xref:System.Windows.Media.Animation.DoubleAnimation> para criar uma animação decelerating.  
  
 [!code-xaml[QuadraticEase#QuadraticEase](~/samples/snippets/csharp/VS_Snippets_Wpf/quadraticease/CS/window1.xaml#quadraticease)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public QuadraticEase ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.QuadraticEase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; QuadraticEase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.QuadraticEase" /> class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Freezable CreateInstanceCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Freezable CreateInstanceCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.QuadraticEase.CreateInstanceCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateInstanceCore () As Freezable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Freezable ^ CreateInstanceCore();" />
      <MemberSignature Language="F#" Value="abstract member CreateInstanceCore : unit -&gt; System.Windows.Freezable&#xA;override this.CreateInstanceCore : unit -&gt; System.Windows.Freezable" Usage="quadraticEase.CreateInstanceCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Freezable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new instance of the <see cref="T:System.Windows.Freezable" /> derived class. When creating a derived class, you must override this method.</summary>
        <returns>The new instance.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Classes de animação herdam indiretamente <xref:System.Windows.Freezable>. Por isso, você precisa substituir o <xref:System.Windows.Media.Animation.BackEase.CreateInstanceCore%2A> método para construir um objeto de animação personalizada.  
  
   
  
## Examples  
 O exemplo a seguir mostra uma implementação típica de <xref:System.Windows.Freezable.CreateInstanceCore%2A>.  
  
 [!code-csharp[freezablesample_procedural#CreateInstanceCoreExample](~/samples/snippets/csharp/VS_Snippets_Wpf/freezablesample_procedural/CSharp/freezablesample.cs#createinstancecoreexample)]
 [!code-vb[freezablesample_procedural#CreateInstanceCoreExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/freezablesample_procedural/visualbasic/freezablesample.vb#createinstancecoreexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EaseInCore">
      <MemberSignature Language="C#" Value="protected override double EaseInCore (double normalizedTime);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance float64 EaseInCore(float64 normalizedTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.QuadraticEase.EaseInCore(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function EaseInCore (normalizedTime As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override double EaseInCore(double normalizedTime);" />
      <MemberSignature Language="F#" Value="override this.EaseInCore : double -&gt; double" Usage="quadraticEase.EaseInCore normalizedTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="normalizedTime" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="normalizedTime">Normalized time (progress) of the animation.</param>
        <summary>Provides the logic portion of the easing function that you can override to produce the <see cref="F:System.Windows.Media.Animation.EasingMode.EaseIn" /> mode of the custom easing function.</summary>
        <returns>A double that represents the transformed progress.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método transforma tempo normalizado para controlar o andamento de uma animação para o <xref:System.Windows.Media.Animation.EasingMode.EaseIn> caso de <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>.  
  
 Você só precisa especificar a função de easing para o <xref:System.Windows.Media.Animation.EasingMode.EaseIn> caso porque a implementação do <xref:System.Windows.Media.Animation.EasingFunctionBase.Ease%2A> método transformações `normalizedTime` para o <xref:System.Windows.Media.Animation.EasingMode.EaseOut> e <xref:System.Windows.Media.Animation.EasingMode.EaseInOut> casos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>