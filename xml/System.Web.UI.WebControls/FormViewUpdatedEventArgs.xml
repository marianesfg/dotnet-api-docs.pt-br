<Type Name="FormViewUpdatedEventArgs" FullName="System.Web.UI.WebControls.FormViewUpdatedEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5ac0fe9a7e4cc6fe95d2e4ade492cbe735e26b66" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39889405" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class FormViewUpdatedEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FormViewUpdatedEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.FormViewUpdatedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class FormViewUpdatedEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class FormViewUpdatedEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type FormViewUpdatedEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornece dados para o evento de <see cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" /> .</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.WebControls.FormView> controlar gera a <xref:System.Web.UI.WebControls.FormView.ItemUpdated> evento quando um botão de atualização (um botão com sua `CommandName` propriedade definida como "Update") dentro do controle é clicado, mas após o <xref:System.Web.UI.WebControls.FormView> controle atualiza o registro. Isso permite que você forneça um método de manipulação de eventos que executa uma rotina personalizada, como verificar os resultados de uma operação de atualização, sempre que esse evento ocorre.  
  
 Um <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs> objeto é passado para o método de manipulação de eventos, que permite que você determine o número de registros afetados e todas as exceções que possam ter ocorrido. Para determinar o número de registros afetados pela operação de atualização, use o <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows%2A> propriedade. Use o <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception%2A> propriedade para determinar se todas as exceções ocorreram. Você também pode indicar se a exceção foi tratada no método de manipulação de eventos, definindo o <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled%2A> propriedade. Se você precisar acessar os valores de campo de chave original para o registro atualizado, use o <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A> propriedade. Os valores de campo não chave original podem ser acessados usando o <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues%2A> propriedade. Valores atualizados (que incluem valores de campo de chave atualizado, se você permitir que o usuário edite os campos de chave) são acessados usando o <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A> propriedade.  
  
 Por padrão, o <xref:System.Web.UI.WebControls.FormView> o controle retorna para o modo especificado pelo <xref:System.Web.UI.WebControls.FormView.DefaultMode%2A> propriedade após uma operação de atualização. Ao manipular uma exceção que ocorreu durante a operação de atualização, você pode manter o <xref:System.Web.UI.WebControls.FormView> controle no modo de edição, definindo o <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode%2A> propriedade `true`.  
  
 Para obter mais informações sobre como manipular eventos, consulte [NIB: consumindo eventos](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 Para obter uma lista de valores de propriedade inicial para uma instância das <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs> classe, consulte o <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.%23ctor%2A> construtor.  
  
   
  
## Examples  
 O exemplo a seguir demonstra como usar o <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs> objeto passado para o método de manipulação de eventos para o <xref:System.Web.UI.WebControls.FormView.ItemUpdated> evento para determinar se uma exceção ocorreu durante uma operação de atualização.  
  
 [!code-aspx-csharp[FormViewUpdatedEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewUpdatedEventArgs/CS/formviewupdatedeventargscs.aspx#1)]
 [!code-aspx-vb[FormViewUpdatedEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewUpdatedEventArgs/VB/formviewupdatedeventargsvb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.FormView" />
    <altmember cref="T:System.Web.UI.WebControls.FormViewUpdatedEventHandler" />
    <altmember cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" />
    <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows" />
    <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception" />
    <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled" />
    <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FormViewUpdatedEventArgs (int affectedRows, Exception e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 affectedRows, class System.Exception e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormViewUpdatedEventArgs.#ctor(System.Int32,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (affectedRows As Integer, e As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FormViewUpdatedEventArgs(int affectedRows, Exception ^ e);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.FormViewUpdatedEventArgs : int * Exception -&gt; System.Web.UI.WebControls.FormViewUpdatedEventArgs" Usage="new System.Web.UI.WebControls.FormViewUpdatedEventArgs (affectedRows, e)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="affectedRows" Type="System.Int32" />
        <Parameter Name="e" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="affectedRows">O número de linhas afetadas pela operação de atualização.</param>
        <param name="e">Um <see cref="T:System.Exception" /> que representa a exceção gerada quando a operação de atualização foi executada. Se nenhuma exceção for gerada, use <see langword="null" /> para este parâmetro.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Web.UI.WebControls.FormViewUpdatedEventArgs" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usar esse construtor para inicializar uma nova instância do <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs> classe.  
  
 A tabela a seguir mostra os valores de propriedade inicial para uma instância da <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs> classe.  
  
|Propriedade|Valor inicial|  
|--------------|-------------------|  
|<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows%2A>|O valor da `affectedRows` parâmetro.|  
|<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception%2A>|O <xref:System.Exception?displayProperty=nameWithType> objeto contido no `e` parâmetro.|  
|<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled%2A>|Inicializada como `false`.|  
|<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode%2A>|Inicializada como `false`.|  
  
> [!NOTE]
>  Este construtor é usado principalmente por desenvolvedores de controle ao gerar eventos.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormView" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewUpdatedEventHandler" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode" />
      </Docs>
    </Member>
    <Member MemberName="AffectedRows">
      <MemberSignature Language="C#" Value="public int AffectedRows { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AffectedRows" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AffectedRows As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int AffectedRows { int get(); };" />
      <MemberSignature Language="F#" Value="member this.AffectedRows : int" Usage="System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o número de linhas afetadas pela operação de atualização.</summary>
        <value>O número de linhas afetadas pela operação de atualização.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows%2A> propriedade para determinar o número de registros afetados pela operação de atualização. Essa propriedade normalmente é usada para verificar se o número correto de registros foi atualizado nas seguintes situações:  
  
-   Verifique se apenas um registro foi atualizado. Às vezes, uma instrução update escrito incorretamente pode atualizar vários registros.  
  
-   Verifique se que um registro foi atualizado quando ocorre um erro durante a operação de atualização que não gera uma exceção.  
  
-   Verifique se um registro foi atualizado quando um controle de fonte de dados que oferece suporte a detecção de conflitos (verificação de simultaneidade otimista), como o <xref:System.Web.UI.WebControls.SqlDataSource> e <xref:System.Web.UI.WebControls.ObjectDataSource> controla, tem seu <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> propriedade definida como o `ConflictOptions.CompareAllValues` valor de enumeração . Sob essa configuração, um registro que foi modificado por outro usuário ao mesmo tempo não pode ser atualizado.  
  
   
  
## Examples  
 O exemplo a seguir demonstra como usar o <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows%2A> propriedade para verificar se um registro foi atualizado.  
  
 [!code-aspx-csharp[FormViewUpdatedEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewUpdatedEventArgs/CS/formviewupdatedeventargscs.aspx#1)]
 [!code-aspx-vb[FormViewUpdatedEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewUpdatedEventArgs/VB/formviewupdatedeventargsvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormView" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewUpdatedEventHandler" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled" />
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public Exception Exception { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception Exception" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Exception As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Exception ^ Exception { Exception ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Exception : Exception" Usage="System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém a exceção (se houver) acionada durante a operação de atualização.</summary>
        <value>Um <see cref="T:System.Exception" /> objeto que representa a exceção gerada durante a operação de atualização.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception%2A> propriedade para determinar a exceção (se houver) gerada durante a operação de atualização. Se nenhuma exceção tiver sido acionada, essa propriedade retornará `null`.  
  
> [!NOTE]
>  Se uma exceção foi gerada e você optar por tratar a exceção no manipulador de eventos, certifique-se de definir as <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled%2A> propriedade para `true`; caso contrário, a exceção é lançada novamente o <xref:System.Web.UI.WebControls.FormView> controle.  
  
   
  
## Examples  
 O exemplo a seguir demonstra como usar o <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception%2A> propriedade para determinar se uma exceção ocorreu durante uma operação de atualização.  
  
 [!code-aspx-csharp[FormViewUpdatedEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewUpdatedEventArgs/CS/formviewupdatedeventargscs.aspx#1)]
 [!code-aspx-vb[FormViewUpdatedEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewUpdatedEventArgs/VB/formviewupdatedeventargsvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormView" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewUpdatedEventHandler" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled" />
      </Docs>
    </Member>
    <Member MemberName="ExceptionHandled">
      <MemberSignature Language="C#" Value="public bool ExceptionHandled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExceptionHandled" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled" />
      <MemberSignature Language="VB.NET" Value="Public Property ExceptionHandled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExceptionHandled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ExceptionHandled : bool with get, set" Usage="System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define um valor que indica se uma exceção gerada durante a operação de atualização foi tratada no manipulador de eventos.</summary>
        <value>
          <see langword="true" /> Se a exceção foi tratada no manipulador de eventos; Caso contrário, <see langword="false" />. O padrão é <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando uma exceção é gerada durante a operação de atualização, use o <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled%2A> propriedade para indicar se a exceção foi tratada no manipulador de eventos. Quando essa propriedade é definida como `true`, a exceção será considerada tratada e não é gerada novamente o <xref:System.Web.UI.WebControls.FormView> controle. Se essa propriedade é definida como `false`, a exceção é lançada novamente. Para determinar qual exceção foi gerada, use o <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception%2A> propriedade.  
  
   
  
## Examples  
 O exemplo a seguir demonstra como usar o <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled%2A> propriedade para indicar que a exceção foi tratada no manipulador de eventos.  
  
 [!code-aspx-csharp[FormViewUpdatedEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewUpdatedEventArgs/CS/formviewupdatedeventargscs.aspx#1)]
 [!code-aspx-vb[FormViewUpdatedEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewUpdatedEventArgs/VB/formviewupdatedeventargsvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormView" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewUpdatedEventHandler" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception" />
      </Docs>
    </Member>
    <Member MemberName="KeepInEditMode">
      <MemberSignature Language="C#" Value="public bool KeepInEditMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool KeepInEditMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode" />
      <MemberSignature Language="VB.NET" Value="Public Property KeepInEditMode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool KeepInEditMode { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.KeepInEditMode : bool with get, set" Usage="System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define um valor que indica se o controle <see cref="T:System.Web.UI.WebControls.FormView" /> deve permanecer no modo de edição após uma operação de atualização.</summary>
        <value>
          <see langword="true" /> para permanecer no modo de edição após uma operação de atualização. Caso contrário, <see langword="false" />. O padrão é <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Por padrão, o <xref:System.Web.UI.WebControls.FormView> o controle retorna para o modo especificado pelo <xref:System.Web.UI.WebControls.FormView.DefaultMode%2A> propriedade após uma operação de atualização. Use o <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode%2A> propriedade para especificar se o <xref:System.Web.UI.WebControls.FormView> controle deve permanecer no modo de edição. Para manter o <xref:System.Web.UI.WebControls.FormView> de controle no modo de edição, defina essa propriedade como `true`.  
  
> [!NOTE]
>  Esta propriedade deve ser usada somente quando uma situação ocorre (por exemplo, uma exceção sendo suscitada) que requer que o controle para se comportar de maneira diferente que normalmente o faria. Se o <xref:System.Web.UI.WebControls.FormView> controle precisa permanecer no modo de edição, por padrão, defina o <xref:System.Web.UI.WebControls.FormView.DefaultMode%2A> propriedade em vez disso.  
  
   
  
## Examples  
 O exemplo a seguir demonstra como usar o <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode%2A> propriedade para manter um <xref:System.Web.UI.WebControls.FormView> controle no modo de edição quando ocorre uma exceção.  
  
 [!code-aspx-csharp[FormViewUpdatedEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewUpdatedEventArgs/CS/formviewupdatedeventargscs.aspx#1)]
 [!code-aspx-vb[FormViewUpdatedEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewUpdatedEventArgs/VB/formviewupdatedeventargsvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormView" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewUpdatedEventHandler" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.DefaultMode" />
      </Docs>
    </Member>
    <Member MemberName="Keys">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.IOrderedDictionary Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.IOrderedDictionary Keys" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Keys As IOrderedDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Specialized::IOrderedDictionary ^ Keys { System::Collections::Specialized::IOrderedDictionary ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Keys : System.Collections.Specialized.IOrderedDictionary" Usage="System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.IOrderedDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um dicionário que contém os pares nome-valor de campo de chave original para o registro atualizado.</summary>
        <value>Um <see cref="T:System.Collections.Specialized.IOrderedDictionary" /> que contém um dicionário de pares de nome/valor do campo de chave original para o registro atualizado.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A> propriedade contém os valores originais dos campos-chave listados na <xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A> propriedade de um <xref:System.Web.UI.WebControls.FormView> controle. Use o <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A> propriedade para acessar os valores de campo de chave para um registro atualizado. Por exemplo, você pode usar esses valores para manter um log de registros atualizados.  
  
> [!NOTE]
>  Se você permitir que o usuário atualizar os valores dos campos de chave, o <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A> propriedade contém os valores de campo de chave original. Os valores atualizados são armazenados do <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A> propriedade.  
  
 O <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A> propriedade retorna um <xref:System.Collections.Specialized.OrderedDictionary> objeto que implementa o <xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=nameWithType> interface. O <xref:System.Collections.Specialized.OrderedDictionary> objeto contém <xref:System.Collections.DictionaryEntry?displayProperty=nameWithType> objetos que representam os campos do registro atualizado. Para acessar os nomes de campo, use o <xref:System.Collections.Specialized.OrderedDictionary.Keys%2A> propriedade do <xref:System.Collections.Specialized.OrderedDictionary> objeto. Da mesma forma, você pode acessar os valores de campo usando o <xref:System.Collections.Specialized.OrderedDictionary.Values%2A> propriedade.  
  
> [!NOTE]
>  Como um atalho, você também pode usar o indexador de <xref:System.Collections.Specialized.OrderedDictionary> objeto para acessar o campo valores diretamente. Controles que dependem da ordem dos campos da fonte de dados (como <xref:System.Web.UI.WebControls.AccessDataSource>) pode acessar valores de campo somente por índice.  
  
   
  
## Examples  
 O exemplo a seguir demonstra como usar o <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A> propriedade para acessar os valores de campo de chave para um registro atualizado.  
  
 [!code-aspx-csharp[FormViewUpdatedEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewUpdatedEventArgs/CS/formviewupdatedeventargscs.aspx#1)]
 [!code-aspx-vb[FormViewUpdatedEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewUpdatedEventArgs/VB/formviewupdatedeventargsvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormView" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewUpdatedEventHandler" />
        <altmember cref="T:System.Collections.Specialized.IOrderedDictionary" />
        <altmember cref="T:System.Collections.Specialized.OrderedDictionary" />
        <altmember cref="T:System.Collections.DictionaryEntry" />
        <altmember cref="P:System.Collections.Specialized.OrderedDictionary.Keys" />
        <altmember cref="P:System.Collections.Specialized.OrderedDictionary.Values" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" />
      </Docs>
    </Member>
    <Member MemberName="NewValues">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.IOrderedDictionary NewValues { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.IOrderedDictionary NewValues" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NewValues As IOrderedDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Specialized::IOrderedDictionary ^ NewValues { System::Collections::Specialized::IOrderedDictionary ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NewValues : System.Collections.Specialized.IOrderedDictionary" Usage="System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.IOrderedDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um dicionário que contém os pares nome-valor do novo campo para o registro atualizado.</summary>
        <value>Um <see cref="T:System.Collections.Specialized.IOrderedDictionary" /> que contém um dicionário de pares de nome/valor de campo novo para o registro atualizado.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A> propriedade para acessar os novos valores de campo para o registro atualizado. Por exemplo, você pode usar esses valores para manter um log de registros atualizados.  
  
> [!NOTE]
>  Se você permitir que o usuário atualizar os valores dos campos de chave, o <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A> propriedade contém os valores de campo de chave original. Os valores atualizados são armazenados do <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A> propriedade.  
  
 O <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A> propriedade retorna um <xref:System.Collections.Specialized.OrderedDictionary> objeto que implementa o <xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=nameWithType> interface. O <xref:System.Collections.Specialized.OrderedDictionary> objeto contém <xref:System.Collections.DictionaryEntry?displayProperty=nameWithType> objetos que representam os campos do registro atualizado. Para acessar os nomes de campo, use o <xref:System.Collections.Specialized.OrderedDictionary.Keys%2A> propriedade do <xref:System.Collections.Specialized.OrderedDictionary> objeto. Da mesma forma, você pode acessar os valores de campo usando o <xref:System.Collections.Specialized.OrderedDictionary.Values%2A> propriedade.  
  
> [!NOTE]
>  Como um atalho, você também pode usar o indexador de <xref:System.Collections.Specialized.OrderedDictionary> objeto para acessar o campo valores diretamente. Controles que dependem da ordem dos campos da fonte de dados (como <xref:System.Web.UI.WebControls.AccessDataSource>) pode acessar valores de campo somente por índice.  
  
   
  
## Examples  
 O exemplo a seguir demonstra como usar o <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A> propriedade para acessar os novos valores inseridos pelo usuário para os campos de não-chave do registro atualizado.  
  
 [!code-aspx-csharp[FormViewUpdatedEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewUpdatedEventArgs/CS/formviewupdatedeventargscs.aspx#1)]
 [!code-aspx-vb[FormViewUpdatedEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewUpdatedEventArgs/VB/formviewupdatedeventargsvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormView" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewInsertedEventHandler" />
        <altmember cref="T:System.Collections.Specialized.IOrderedDictionary" />
        <altmember cref="T:System.Collections.Specialized.OrderedDictionary" />
        <altmember cref="T:System.Collections.DictionaryEntry" />
        <altmember cref="P:System.Collections.Specialized.OrderedDictionary.Keys" />
        <altmember cref="P:System.Collections.Specialized.OrderedDictionary.Values" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" />
      </Docs>
    </Member>
    <Member MemberName="OldValues">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.IOrderedDictionary OldValues { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.IOrderedDictionary OldValues" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OldValues As IOrderedDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Specialized::IOrderedDictionary ^ OldValues { System::Collections::Specialized::IOrderedDictionary ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OldValues : System.Collections.Specialized.IOrderedDictionary" Usage="System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.IOrderedDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um dicionário que contém os pares nome-valor do campo não chave original para o registro atualizado.</summary>
        <value>Um <see cref="T:System.Collections.Specialized.IOrderedDictionary" /> que contém um dicionário de pares de nome/valor do campo original para o registro atualizado.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues%2A> propriedade para acessar os valores de campo não chave original para o registro atualizado. Por exemplo, você pode usar esses valores para manter um log de registros atualizados. Um controle de fonte de dados que oferece suporte a detecção de conflitos (verificação de simultaneidade otimista), como o <xref:System.Web.UI.WebControls.SqlDataSource> e <xref:System.Web.UI.WebControls.ObjectDataSource> controles, com seus <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> propriedade definida como o `ConflictOptions.CompareAllValues` também compara esses valores originais em relação a registro no banco de dados antes de uma operação de atualização é executado. Se um registro foi modificado por outro usuário simultaneamente, o registro não será atualizado.  
  
> [!NOTE]
>  O <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.OldValues%2A> propriedade não contém campos de chave. Se você permitir que o usuário atualizar os valores dos campos de chave, os valores originais do campo de chave são armazenados do <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A> propriedade. Os valores atualizados são armazenados do <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A> propriedade.  
  
 O <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A> propriedade retorna um <xref:System.Collections.Specialized.OrderedDictionary> objeto que implementa o <xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=nameWithType> interface. O <xref:System.Collections.Specialized.OrderedDictionary> objeto contém <xref:System.Collections.DictionaryEntry?displayProperty=nameWithType> objetos que representam os campos do registro atualizado. Para acessar os nomes de campo, use o <xref:System.Collections.Specialized.OrderedDictionary.Keys%2A> propriedade do <xref:System.Collections.Specialized.OrderedDictionary> objeto. Da mesma forma, você pode acessar os valores de campo usando o <xref:System.Collections.Specialized.OrderedDictionary.Values%2A> propriedade.  
  
> [!NOTE]
>  Como um atalho, você também pode usar o indexador de <xref:System.Collections.Specialized.OrderedDictionary> objeto para acessar o campo valores diretamente. Controles que dependem da ordem dos campos da fonte de dados (como <xref:System.Web.UI.WebControls.AccessDataSource>) pode acessar valores de campo somente por índice.  
  
   
  
## Examples  
 O exemplo a seguir demonstra como usar o <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues%2A> propriedade para acessar os valores originais dos campos não-chave para o registro atualizado.  
  
 [!code-aspx-csharp[FormViewUpdatedEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewUpdatedEventArgs/CS/formviewupdatedeventargscs.aspx#1)]
 [!code-aspx-vb[FormViewUpdatedEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewUpdatedEventArgs/VB/formviewupdatedeventargsvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormView" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewUpdatedEventHandler" />
        <altmember cref="T:System.Collections.Specialized.IOrderedDictionary" />
        <altmember cref="T:System.Collections.Specialized.OrderedDictionary" />
        <altmember cref="T:System.Collections.DictionaryEntry" />
        <altmember cref="P:System.Collections.Specialized.OrderedDictionary.Keys" />
        <altmember cref="P:System.Collections.Specialized.OrderedDictionary.Values" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" />
      </Docs>
    </Member>
  </Members>
</Type>