<Type Name="FileUpload" FullName="System.Web.UI.WebControls.FileUpload">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3ae1c1893505f0b902e3900dacd54a3b502b32bd" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36382622" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class FileUpload : System.Web.UI.WebControls.WebControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FileUpload extends System.Web.UI.WebControls.WebControl" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.FileUpload" />
  <TypeSignature Language="VB.NET" Value="Public Class FileUpload&#xA;Inherits WebControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileUpload : System::Web::UI::WebControls::WebControl" />
  <TypeSignature Language="F#" Value="type FileUpload = class&#xA;    inherit WebControl" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.PreviewControlDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ControlValueProperty("FileBytes")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ValidationProperty("FileName")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Exibe um controle de caixa de texto e um botão Procurar que permitem que os usuários selecionem um arquivo a ser carregado no servidor.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Neste tópico:  
  
-   [Introdução](#introduction)  
  
-   [Salvando arquivos carregados](#saving_uploaded_files)  
  
-   [Considerações sobre segurança](#security_considerations)  
  
-   [Limitações de memória](#memory_limitations)  
  
-   [Usando o controle de carregamento de arquivos com o controle UpdatePanel](#using_the_FileUpload_Control_with_the_UpdatePanel_control)  
  
-   [Sintaxe declarativa](#DeclarativeSyntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>Introdução  
 O <xref:System.Web.UI.WebControls.FileUpload> classe exibe um controle de caixa de texto e um botão de procura que permitem aos usuários selecionar um arquivo no cliente e carregá-lo no servidor Web. O usuário Especifica o arquivo para carregar digitando o caminho completo do arquivo no computador local (por exemplo, **C:\MyFiles\TestFile.txt**) na caixa de texto do controle. Como alternativa, o usuário pode selecionar o arquivo clicando o **procurar** botão e, em seguida, localizando-na **Escolher arquivo** caixa de diálogo.  
  
 Use o <xref:System.Web.UI.WebControls.FileUpload.FileName%2A> propriedade para obter o nome de um arquivo em um cliente carregar usando o <xref:System.Web.UI.WebControls.FileUpload> controle. O nome do arquivo que essa propriedade retorna não inclui o caminho do arquivo no cliente.  
  
 O <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> propriedade obtém um <xref:System.IO.Stream> objeto que aponta para um arquivo para carregar. Use essa propriedade para acessar o conteúdo do arquivo como bytes. Por exemplo, você pode usar o <xref:System.IO.Stream> objeto que é retornado pelo <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> propriedade para ler o conteúdo do arquivo como bytes e armazená-las em uma matriz de bytes. Como alternativa, você pode usar o <xref:System.Web.UI.WebControls.FileUpload.FileBytes%2A> propriedade para recuperar todos os bytes no arquivo.  
  
 O <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> propriedade obtém subjacente <xref:System.Web.HttpPostedFile> objeto para o arquivo carregar. Você pode usar essa propriedade para acessar propriedades adicionais no arquivo. O <xref:System.Web.HttpPostedFile.ContentLength%2A> propriedade obtém o comprimento do arquivo. O <xref:System.Web.HttpPostedFile.ContentType%2A> propriedade obtém o tipo de conteúdo MIME do arquivo. Além disso, você pode usar o <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> propriedade para acessar o <xref:System.Web.HttpPostedFile.FileName%2A> propriedade, o <xref:System.Web.HttpPostedFile.InputStream%2A> propriedade e o <xref:System.Web.HttpPostedFile.SaveAs%2A> método. No entanto, a mesma funcionalidade é fornecida pelo <xref:System.Web.UI.WebControls.FileUpload.FileName%2A> propriedade, o <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> propriedade e o <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> método.  
  
<a name="saving_uploaded_files"></a>   
## <a name="saving-uploaded-files"></a>Salvando arquivos carregados  
 O <xref:System.Web.UI.WebControls.FileUpload> controle não salvará automaticamente um arquivo para o servidor depois que o usuário seleciona o arquivo para carregar. Você deve fornecer explicitamente um controle ou um mecanismo para permitir que o usuário enviar o arquivo especificado. Por exemplo, você pode fornecer um botão que o usuário clica para carregar o arquivo. O código que você escreve para salvar o arquivo especificado deve chamar o <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> método, que salva o conteúdo de um arquivo em um caminho especificado no servidor. Normalmente, o <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> método é chamado em um método de manipulação de eventos para um evento que gera uma postagem para o servidor. Por exemplo, se você fornecer um botão para enviar um arquivo, você pode incluir o código para salvar o arquivo dentro do método de manipulação de eventos para o evento de clique.  
  
 Antes de chamar o <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> método para salvar o arquivo para o servidor, use o <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> propriedade para verificar se o <xref:System.Web.UI.WebControls.FileUpload> controle contém um arquivo. Se o <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> retorna `true`, chame o <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> método. Se ele retorna `false`, exiba uma mensagem para o usuário indicando que o controle não contém um arquivo. Não verificar a <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> propriedade para determinar se um arquivo para carregar existe porque, por padrão, esta propriedade contém 0 bytes. Como resultado, mesmo quando o <xref:System.Web.UI.WebControls.FileUpload> controle está em branco, o <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> propriedade retorna um valor não nulo.  
  
<a name="security_considerations"></a>   
## <a name="security-considerations"></a>Considerações sobre segurança  
 Quando você chama o <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> método, você deve especificar o caminho completo do diretório no qual salvar o arquivo carregado. Se você não especificar um caminho explicitamente no código do aplicativo, uma exceção é lançada quando um usuário tenta carregar um arquivo. Esse comportamento ajuda a proteger os arquivos no servidor, impedindo que os usuários sejam capazes de gravar arbitrários locais na estrutura de diretório do aplicativo, bem como impedindo o acesso a diretórios raiz confidencial.  
  
 O <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> método grava o arquivo carregado para o diretório especificado. Portanto, o aplicativo ASP.NET deve ter acesso de gravação para o diretório no servidor. Há duas maneiras que o aplicativo pode obter acesso de gravação. Você pode conceder explicitamente acesso de gravação para a conta sob a qual o aplicativo é executado, no diretório no qual os arquivos carregados serão salvas. Como alternativa, você pode aumentar o nível de confiança é concedida para o aplicativo ASP.NET. Para obter acesso de gravação ao diretório de execução para o aplicativo, o aplicativo deve ser concedido a <xref:System.Web.AspNetHostingPermission> objeto com o nível de confiança definido como o <xref:System.Web.AspNetHostingPermissionLevel.Medium?displayProperty=nameWithType> valor. Aumentar o nível de confiança aumenta o acesso do aplicativo a recursos no servidor. Observe que isso não é uma abordagem segura, porque um usuário mal-intencionado obtiver controle de seu aplicativo também será capaz de executar em um nível mais alto de confiança. É uma prática recomendada para executar um aplicativo ASP.NET no contexto de um usuário com os privilégios mínimos necessários para o execução do aplicativo. Para obter mais informações sobre a segurança em aplicativos ASP.NET, consulte [recomendações de segurança para aplicativos Web](http://msdn.microsoft.com/library/3eeeee9e-b09f-4c7f-8ce5-d9ca1f9322ad) e [níveis de confiança do ASP.NET e arquivos de política](http://msdn.microsoft.com/library/f897c794-10d3-414c-86b7-59b66564bbf1).  
  
<a name="memory_limitations"></a>   
## <a name="memory-limitations"></a>Limitações de memória  
 Uma maneira de proteger contra negação de serviço de ataques é limitar o tamanho dos arquivos que podem ser carregados usando o <xref:System.Web.UI.WebControls.FileUpload> controle. Você deve definir um limite de tamanho é apropriado para os tipos de arquivos que devem ser carregados. O limite de tamanho padrão é 4096 quilobytes (KB) ou 4 megabytes (MB). Você pode permitir que arquivos maiores ser carregado, definindo o `maxRequestLength` atributo do elemento. Para aumentar o tamanho máximo de arquivo permitido para o aplicativo inteiro, defina a `maxRequestLength` atributo no arquivo Web. config. Para aumentar o tamanho máximo de arquivo permitido para uma página especificada, defina o `maxRequestLength` atributo dentro de `location` elemento no Web. config. Para obter um exemplo, consulte [local Element (ASP.NET Settings Schema)](http://msdn.microsoft.com/library/922ef7d5-da38-4661-b1c6-5b9e5ceda1d5).  
  
 Ao carregar arquivos grandes, um usuário também pode receber a seguinte mensagem de erro:  
  
 `aspnet_wp.exe (PID: 1520) was recycled because memory consumption exceeded 460 MB (60 percent of available RAM).`  
  
 Se os usuários receberem essa mensagem de erro, aumente o valor da `memoryLimit` atributo no do elemento no Web. config arquivo para o aplicativo. O `memoryLimit` atributo especifica a quantidade máxima de memória que um processo de trabalho pode usar. Se o processo de trabalho excede o `memoryLimit` valor, um novo processo é criado para substituí-lo, e todas as solicitações atuais são reatribuídas para o novo processo.  
  
 Para controlar se o arquivo para carregar está temporariamente armazenados na memória ou no servidor, enquanto a solicitação está sendo processada, defina o `requestLengthDiskThreshold` atributo do elemento. Este atributo permite que você gerencie o tamanho do buffer de fluxo de entrada. O padrão é 256 bytes. O valor especificado não deve exceder o valor especificado para o `maxRequestLength` atributo.  
  
<a name="using_the_FileUpload_Control_with_the_UpdatePanel_control"></a>   
## <a name="using-the-fileupload-control-with-the-updatepanel-control"></a>Usando o controle de carregamento de arquivos com o controle UpdatePanel  
 O <xref:System.Web.UI.WebControls.FileUpload> controle foi projetado para ser usado apenas em cenários de postagem e não em cenários de postback assíncrono durante a renderização parcial da página. Quando você usa um <xref:System.Web.UI.WebControls.FileUpload> controle dentro de um <xref:System.Web.UI.UpdatePanel> controle, o arquivo deve ser carregado usando um controle que é um <xref:System.Web.UI.PostBackTrigger> objeto para o painel. <xref:System.Web.UI.UpdatePanel> controles são usados para atualizar regiões selecionadas de uma página em vez de atualizar a página inteira com um postback. Para obter mais informações, consulte [visão geral do controle UpdatePanel](http://msdn.microsoft.com/library/29a2265d-9674-4c19-b70e-e5560ee9689a) e [visão geral de renderização de página parcial](http://msdn.microsoft.com/library/5c12736d-d9e9-464a-9388-3fe0f9f49e49).  
  
<a name="DeclarativeSyntax"></a>   
## <a name="declarative-syntax"></a>Sintaxe declarativa  
  
```  
<asp:FileUpload  
    AccessKey="string"  
    BackColor="color name|#dddddd"  
    BorderColor="color name|#dddddd"  
    BorderStyle="NotSet|None|Dotted|Dashed|Solid|Double|Groove|Ridge|  
        Inset|Outset"  
    BorderWidth="size"  
    CssClass="string"  
    Enabled="True|False"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    Font-Bold="True|False"  
    Font-Italic="True|False"  
    Font-Names="string"  
    Font-Overline="True|False"  
    Font-Size="string|Smaller|Larger|XX-Small|X-Small|Small|Medium|  
        Large|X-Large|XX-Large"  
    Font-Strikeout="True|False"  
    Font-Underline="True|False"  
    ForeColor="color name|#dddddd"  
    Height="size"  
    ID="string"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnUnload="Unload event handler"  
    runat="server"  
    SkinID="string"  
    Style="string"  
    TabIndex="integer"  
    ToolTip="string"  
    Visible="True|False"  
    Width="size"  
/>  
```  
  
   
  
## Examples  
 Um projeto de site da Web do Visual Studio com o código-fonte está disponível para acompanhar este tópico: [baixar](http://go.microsoft.com/fwlink/?LinkId=191897).  
  
 Esta seção contém quatro exemplos a seguir:  
  
-   O primeiro exemplo demonstra como criar um <xref:System.Web.UI.WebControls.FileUpload> controle que salva os arquivos em um caminho que é especificado no código.  
  
-   O segundo exemplo demonstra como criar um <xref:System.Web.UI.WebControls.FileUpload> controle que salva os arquivos em um diretório especificado no sistema de arquivos para o aplicativo.  
  
-   O terceiro exemplo demonstra como criar um <xref:System.Web.UI.WebControls.FileUpload> controle que salva os arquivos em um caminho especificado e limita o tamanho do arquivo que pode ser carregado.  
  
-   O quarto exemplo demonstra como criar um <xref:System.Web.UI.WebControls.FileUpload> controle que salva os arquivos em um caminho especificado e permite que somente os arquivos que têm as extensões de nome de arquivo. doc ou. xls para ser carregado.  
  
> [!CAUTION]
>  Esses exemplos demonstram a sintaxe básica para o <xref:System.Web.UI.WebControls.FileUpload> controle, mas eles não demonstram todas a necessário verificação de erros que devem ser concluídas antes de salvar o arquivo. Para um exemplo mais completo, consulte <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A>.  
  
 O exemplo a seguir demonstra como criar um <xref:System.Web.UI.WebControls.FileUpload> controle que salva os arquivos em um caminho que é especificado no código. O <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> método é chamado para salvar o arquivo no caminho especificado no servidor.  
  
 [!code-aspx-csharp[FileUploadClass1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUploadClass1/cs/fileuploadclass1cs.aspx#1)]
 [!code-aspx-vb[FileUploadClass1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUploadClass1/VB/fileuploadclass1vb.aspx#1)]  
  
 O exemplo a seguir demonstra como criar um <xref:System.Web.UI.WebControls.FileUpload> controle que salva os arquivos em um diretório especificado no sistema de arquivos para o aplicativo. O <xref:System.Web.HttpRequest.PhysicalApplicationPath%2A?displayProperty=nameWithType> propriedade é usada para obter o caminho do sistema de arquivo físico do diretório raiz para o aplicativo de servidor em execução no momento. O <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> método é chamado para salvar o arquivo no caminho especificado no servidor.  
  
 [!code-aspx-csharp[FileUploadClass2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUploadClass2/cs/fileuploadclass2cs.aspx#1)]
 [!code-aspx-vb[FileUploadClass2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUploadClass2/VB/fileuploadclass2vb.aspx#1)]  
  
 O exemplo a seguir demonstra como criar um <xref:System.Web.UI.WebControls.FileUpload> controle que salva os arquivos em um caminho que é especificado no código. O controle limita o tamanho do arquivo que pode ser carregado como 5 MB. O <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> propriedade é usada para acessar subjacente <xref:System.Web.HttpPostedFile.ContentLength%2A> propriedade e retornar o tamanho do arquivo. Se o tamanho do arquivo para carregar for menor que 2 MB, o <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> método é chamado para salvar o arquivo no caminho especificado no servidor. Além de verificar a configuração de tamanho máximo do arquivo no seu código do aplicativo, você pode definir o `maxRequestLength` atributo do elemento a um tamanho máximo permitido no arquivo de configuração para seu aplicativo.  
  
 [!code-aspx-csharp[FileUploadClass3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUploadClass3/cs/fileuploadclass3cs.aspx#1)]
 [!code-aspx-vb[FileUploadClass3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUploadClass3/VB/fileuploadclass3vb.aspx#1)]  
  
 O exemplo a seguir demonstra como criar um <xref:System.Web.UI.WebControls.FileUpload> controle que salva os arquivos em um caminho que é especificado no código. Este exemplo permite que somente os arquivos que têm as extensões de nome de arquivo. doc ou. xls para ser carregado. O <xref:System.IO.Path.GetExtension%2A?displayProperty=nameWithType> método é chamado para retornar a extensão do arquivo para carregar. Se o arquivo tem a extensão. doc ou. xls arquivo nome, o <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> método é chamado para salvar o arquivo no caminho especificado no servidor.  
  
 [!code-aspx-csharp[FileUploadClass4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUploadClass4/cs/fileuploadclass4cs.aspx#1)]
 [!code-aspx-vb[FileUploadClass4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUploadClass4/VB/fileuploadclass4vb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Web.UI.WebControls.FileUpload.SaveAs(System.String)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileUpload ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FileUpload.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileUpload();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Web.UI.WebControls.FileUpload" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Web.UI.WebControls.FileUpload.%23ctor%2A> construtor para inicializar uma nova instância do <xref:System.Web.UI.WebControls.FileUpload> classe. O <xref:System.Web.UI.WebControls.FileUpload> controle não salvará automaticamente um arquivo para o servidor depois que o usuário seleciona o arquivo para carregar. Você deve fornecer explicitamente um controle ou um mecanismo para permitir que o usuário enviar o arquivo especificado. Por exemplo, você pode fornecer um botão que o usuário clica para carregar o arquivo.  
  
   
  
## Examples  
 O exemplo a seguir demonstra como inicializar uma nova instância do <xref:System.Web.UI.WebControls.FileUpload> classe. Observe que este exemplo demonstra a sintaxe de construtor, mas não adiciona a funcionalidade para o controle depois que ele é criado.  
  
 Este exemplo é parte de um exemplo maior fornecido para a <xref:System.Web.UI.WebControls.FileUpload> classe.  
  
 [!code-aspx-vb[FileUploadCstr#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUploadCstr/VB/fileuploadcstrvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAttributesToRender">
      <MemberSignature Language="C#" Value="protected override void AddAttributesToRender (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void AddAttributesToRender(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FileUpload.AddAttributesToRender(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub AddAttributesToRender (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void AddAttributesToRender(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.AddAttributesToRender : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="fileUpload.AddAttributesToRender writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Um <see cref="T:System.Web.UI.HtmlTextWriter" /> que representa o fluxo de saída para renderizar o conteúdo HTML no cliente.</param>
        <summary>Adiciona os estilos e atributos HTML de um controle <see cref="T:System.Web.UI.WebControls.FileUpload" /> para a ser renderizado ao objeto <see cref="T:System.Web.UI.HtmlTextWriter" /> especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.WebControls.FileUpload.AddAttributesToRender%2A> método é usado principalmente por desenvolvedores de controle para inserir os atributos apropriados e estilos para o <xref:System.Web.UI.HtmlTextWriter?displayProperty=nameWithType> fluxo de saída para um <xref:System.Web.UI.WebControls.FileUpload> controle. O <xref:System.Web.UI.WebControls.FileUpload.AddAttributesToRender%2A> substituições de método de <xref:System.Web.UI.WebControls.WebControl.AddAttributesToRender%2A?displayProperty=nameWithType> método.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.HtmlTextWriter" />
        <altmember cref="M:System.Web.UI.WebControls.WebControl.AddAttributesToRender(System.Web.UI.HtmlTextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="AllowMultiple">
      <MemberSignature Language="C#" Value="public virtual bool AllowMultiple { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowMultiple" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.AllowMultiple" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property AllowMultiple As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool AllowMultiple { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowMultiple : bool with get, set" Usage="System.Web.UI.WebControls.FileUpload.AllowMultiple" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define um valor que especifica se vários arquivos podem ser selecionados para upload.</summary>
        <value>
          <see langword="true" /> se for possível selecionar vários arquivos; caso contrário, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FileBytes">
      <MemberSignature Language="C#" Value="public byte[] FileBytes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] FileBytes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.FileBytes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FileBytes As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ FileBytes { cli::array &lt;System::Byte&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FileBytes : byte[]" Usage="System.Web.UI.WebControls.FileUpload.FileBytes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém uma matriz de bytes em um arquivo especificado com o uso de um controle <see cref="T:System.Web.UI.WebControls.FileUpload" />.</summary>
        <value>Uma matriz <see cref="T:System.Byte" /> que contém o conteúdo do arquivo especificado.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.WebControls.FileUpload> controle automaticamente não ler o arquivo do cliente. Você deve fornecer explicitamente um controle ou um mecanismo para permitir que o usuário enviar o arquivo especificado. Por exemplo, você pode fornecer um botão que o usuário pode clicar para carregar o arquivo. O código que você escreve para salvar o arquivo especificado pode chamar o <xref:System.Web.UI.WebControls.FileUpload.FileBytes%2A> propriedade, que retorna o conteúdo do arquivo.  
  
 Antes de chamar o <xref:System.Web.UI.WebControls.FileUpload.FileBytes%2A> propriedade, você deve usar o <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> propriedade para verificar se o <xref:System.Web.UI.WebControls.FileUpload> controle contém um arquivo para carregar. Se o <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> retorna `true`, chame o <xref:System.Web.UI.WebControls.FileUpload.FileBytes%2A> propriedade. Se ele retorna `false`, exiba uma mensagem para o usuário indicando que o controle não contém um arquivo. Se você não fornecer o código de tratamento de erros para verificar se existe um arquivo, uma tentativa de salvar um arquivo inexistente lança um <xref:System.Web.HttpException> exceção.  
  
   
  
## Examples  
 O exemplo a seguir demonstra como criar um <xref:System.Web.UI.WebControls.FileUpload> controle. Quando o usuário clica o **carregar arquivo** botão, o conteúdo do arquivo são exibidos como bytes em uma caixa de texto na página. Este exemplo usa o <xref:System.Web.UI.WebControls.FileUpload.FileBytes%2A> propriedade ao carregar o arquivo inteiro.  
  
 [!code-aspx-csharp[FileUploadFileBytes#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUploadFileBytes/CS/FileUploadFileBytesCS.aspx#1)]
 [!code-aspx-vb[FileUploadFileBytes#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUploadFileBytes/VB/FileUploadFileBytesVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">O arquivo inteiro não foi lido.</exception>
        <altmember cref="P:System.Web.UI.WebControls.FileUpload.HasFile" />
      </Docs>
    </Member>
    <Member MemberName="FileContent">
      <MemberSignature Language="C#" Value="public System.IO.Stream FileContent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Stream FileContent" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.FileContent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FileContent As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Stream ^ FileContent { System::IO::Stream ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FileContent : System.IO.Stream" Usage="System.Web.UI.WebControls.FileUpload.FileContent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um objeto <see cref="T:System.IO.Stream" /> que aponta para um arquivo a ser carregado usando o controle <see cref="T:System.Web.UI.WebControls.FileUpload" />.</summary>
        <value>Um <see cref="T:System.IO.Stream" /> que aponta para um arquivo a ser carregado usando o <see cref="T:System.Web.UI.WebControls.FileUpload" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> propriedade obtém um <xref:System.IO.Stream> objeto que aponta para um arquivo para carregar usando o <xref:System.Web.UI.WebControls.FileUpload> controle. Use o <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> propriedade para acessar o conteúdo do arquivo. Por exemplo, você pode usar o <xref:System.IO.Stream> objeto retornado por essa propriedade para ler o conteúdo do arquivo como bytes e armazená-las em uma matriz de bytes.  
  
   
  
## Examples  
 O exemplo a seguir demonstra como criar um <xref:System.Web.UI.WebControls.FileUpload> controle. O <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> propriedade é usada para ler o conteúdo do arquivo em uma matriz de bytes. Quando o usuário clica o **carregar arquivo** botão, o conteúdo do arquivo são exibidos como bytes em uma caixa de texto na página.  
  
 [!code-aspx-csharp[FileUpload.FileContent#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUpload.FileContent/cs/fileupload.filecontentcs.aspx#1)]
 [!code-aspx-vb[FileUpload.FileContent#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUpload.FileContent/VB/fileupload.filecontentvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="M:System.Web.UI.WebControls.FileUpload.SaveAs(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="FileName">
      <MemberSignature Language="C#" Value="public string FileName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FileName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.FileName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FileName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FileName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FileName : string" Usage="System.Web.UI.WebControls.FileUpload.FileName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o nome de um arquivo em um cliente a ser carregado usando o controle <see cref="T:System.Web.UI.WebControls.FileUpload" />.</summary>
        <value>Uma cadeia de caracteres que especifica o nome de um arquivo em um cliente a ser carregado usando o <see cref="T:System.Web.UI.WebControls.FileUpload" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obtém o nome de um arquivo em um cliente a ser carregado usando o controle <xref:System.Web.UI.WebControls.FileUpload>. O nome do arquivo que o <xref:System.Web.UI.WebControls.FileUpload.FileName%2A> propriedade retorna não inclui o caminho do arquivo no cliente.  
  
   
  
## Examples  
 O exemplo a seguir demonstra como criar um <xref:System.Web.UI.WebControls.FileUpload> controle que salva os arquivos em um caminho que é especificado no código. O <xref:System.Web.UI.WebControls.FileUpload.FileName%2A> propriedade é usada para obter o nome do arquivo para carregar. O <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> método é chamado para salvar o arquivo no caminho especificado no servidor, usando o mesmo nome que o arquivo tem no cliente. Observe que este exemplo demonstra a sintaxe básica para este controle, mas não demonstra todos os a necessário verificação de erros que deve ser feito antes de salvar o arquivo. Para um exemplo mais completo, consulte <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A>.  
  
 [!code-aspx-csharp[FileUploadClass1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUploadClass1/cs/fileuploadclass1cs.aspx#1)]
 [!code-aspx-vb[FileUploadClass1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUploadClass1/VB/fileuploadclass1vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.FileUpload.SaveAs(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="HasFile">
      <MemberSignature Language="C#" Value="public bool HasFile { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasFile" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.HasFile" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasFile As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasFile { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasFile : bool" Usage="System.Web.UI.WebControls.FileUpload.HasFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que indica se o controle <see cref="T:System.Web.UI.WebControls.FileUpload" /> contém um arquivo.</summary>
        <value>
          <see langword="true" /> se o <see cref="T:System.Web.UI.WebControls.FileUpload" /> contiver um arquivo; caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> propriedade obtém um valor que indica se o <xref:System.Web.UI.WebControls.FileUpload> controle contém um arquivo para carregar. Use esta propriedade para verificar a existência de um arquivo para carregar antes de executar operações no arquivo. Por exemplo, antes de chamar o <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> método para salvar o arquivo no disco, use o <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> propriedade para verificar se o arquivo existe. Se <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> retorna `true`, chame o <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> método. Se ele retorna `false`, exiba uma mensagem para o usuário indicando que o controle não contém um arquivo.  
  
   
  
## Examples  
 O exemplo a seguir demonstra como criar um <xref:System.Web.UI.WebControls.FileUpload> controle que executa a verificação de erros. Antes de salvar o arquivo, o <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> método é chamado para verificar se o controle contém um arquivo para carregar. Além disso, o <xref:System.IO.File.Exists%2A?displayProperty=nameWithType> método é chamado para verificar se um arquivo com o mesmo nome já está no caminho. Em caso afirmativo, o nome do arquivo para carregar é prefixado com um caractere de sublinhado antes do <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> método é chamado. Isso impede que o arquivo existente seja substituído.  
  
 [!code-aspx-csharp[FileUpload.SaveAs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUpload.SaveAs/cs/fileupload.saveascs.aspx#1)]
 [!code-aspx-vb[FileUpload.SaveAs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUpload.SaveAs/VB/fileupload.saveasvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.FileUpload.SaveAs(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="HasFiles">
      <MemberSignature Language="C#" Value="public bool HasFiles { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasFiles" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.HasFiles" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasFiles As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasFiles { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasFiles : bool" Usage="System.Web.UI.WebControls.FileUpload.HasFiles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que indica se todos os arquivos foram carregados.</summary>
        <value>
          <see langword="true" /> se todos os arquivos tiverem sido carregados; caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método também retorna `false` se um arquivo vazio (zero bytes) é carregado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreRender">
      <MemberSignature Language="C#" Value="protected internal override void OnPreRender (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnPreRender(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FileUpload.OnPreRender(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnPreRender (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnPreRender(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnPreRender : EventArgs -&gt; unit" Usage="fileUpload.OnPreRender e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Um objeto <see cref="T:System.EventArgs" /> que contém os dados do evento.</param>
        <summary>Aciona o evento <see cref="E:System.Web.UI.Control.PreRender" /> do controle <see cref="T:System.Web.UI.WebControls.FileUpload" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.WebControls.FileUpload.OnPreRender%2A> método notifica o <xref:System.Web.UI.WebControls.FileUpload> controle para executar as etapas de pré-processamento necessárias antes de salvar o estado de exibição e processar o conteúdo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PostedFile">
      <MemberSignature Language="C#" Value="public System.Web.HttpPostedFile PostedFile { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.HttpPostedFile PostedFile" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.PostedFile" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PostedFile As HttpPostedFile" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::HttpPostedFile ^ PostedFile { System::Web::HttpPostedFile ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PostedFile : System.Web.HttpPostedFile" Usage="System.Web.UI.WebControls.FileUpload.PostedFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.HttpPostedFile</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o objeto <see cref="T:System.Web.HttpPostedFile" /> subjacente de um arquivo carregado com o uso do controle <see cref="T:System.Web.UI.WebControls.FileUpload" />.</summary>
        <value>Um <see cref="T:System.Web.HttpPostedFile" /> de um arquivo carregado com o uso de <see cref="T:System.Web.UI.WebControls.FileUpload" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> propriedade obtém subjacente <xref:System.Web.HttpPostedFile> objeto para um arquivo que é carregado por meio de <xref:System.Web.UI.WebControls.FileUpload> controle. Use essa propriedade para acessar as propriedades adicionais sobre o arquivo carregado.  
  
 Você pode usar o <xref:System.Web.HttpPostedFile.ContentLength%2A> propriedade para obter o tamanho do arquivo. Você pode usar o <xref:System.Web.HttpPostedFile.ContentType%2A> tipo do arquivo de conteúdo de propriedade a ser obtida MIME. Além disso, você pode usar o <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> propriedade para acessar o <xref:System.Web.HttpPostedFile.FileName%2A> propriedade, o <xref:System.Web.HttpPostedFile.InputStream%2A> propriedade e o <xref:System.Web.HttpPostedFile.SaveAs%2A> método. No entanto, a mesma funcionalidade é fornecida pelo <xref:System.Web.UI.WebControls.FileUpload.FileName%2A> propriedade, o <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> propriedade e o <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> método.  
  
   
  
## Examples  
 O exemplo a seguir demonstra como criar um <xref:System.Web.UI.WebControls.FileUpload> controle. Quando o usuário clica o **carregar arquivo** botão, o conteúdo do arquivo são exibidos como bytes em uma caixa de texto na página. Este exemplo usa o <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> propriedade para acessar o <xref:System.Web.HttpPostedFile.ContentLength%2A?displayProperty=nameWithType> propriedade. O <xref:System.Web.HttpPostedFile.ContentLength%2A> propriedade é usada para determinar o tamanho do arquivo antes de copiar o conteúdo do arquivo para uma matriz de bytes.  
  
 [!code-aspx-csharp[FileUpload.FileContent#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUpload.FileContent/cs/fileupload.filecontentcs.aspx#1)]
 [!code-aspx-vb[FileUpload.FileContent#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUpload.FileContent/VB/fileupload.filecontentvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.HttpPostedFile" />
      </Docs>
    </Member>
    <Member MemberName="PostedFiles">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.Web.HttpPostedFile&gt; PostedFiles { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Web.HttpPostedFile&gt; PostedFiles" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.PostedFiles" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PostedFiles As IList(Of HttpPostedFile)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;System::Web::HttpPostedFile ^&gt; ^ PostedFiles { System::Collections::Generic::IList&lt;System::Web::HttpPostedFile ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PostedFiles : System.Collections.Generic.IList&lt;System.Web.HttpPostedFile&gt;" Usage="System.Web.UI.WebControls.FileUpload.PostedFiles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Web.HttpPostedFile&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém a coleção de arquivos carregados.</summary>
        <value>A coleção de arquivos carregados.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected internal override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FileUpload.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub Render (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.Render : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="fileUpload.Render writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">O objeto <see cref="T:System.Web.UI.HtmlTextWriter" /> que recebe o conteúdo do controle <see cref="T:System.Web.UI.WebControls.FileUpload" />.</param>
        <summary>Envia o conteúdo do controle <see cref="T:System.Web.UI.WebControls.FileUpload" /> para o objeto <see cref="T:System.Web.UI.HtmlTextWriter" /> especificado, que grava o conteúdo a ser renderizado no cliente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.WebControls.FileUpload.Render%2A> método envia o <xref:System.Web.UI.WebControls.FileUpload> controlar o conteúdo especificado <xref:System.Web.UI.HtmlTextWriter?displayProperty=nameWithType> objeto, que grava o conteúdo a processar no cliente.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.HtmlTextWriter" />
      </Docs>
    </Member>
    <Member MemberName="SaveAs">
      <MemberSignature Language="C#" Value="public void SaveAs (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SaveAs(string filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FileUpload.SaveAs(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SaveAs (filename As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SaveAs(System::String ^ filename);" />
      <MemberSignature Language="F#" Value="member this.SaveAs : string -&gt; unit" Usage="fileUpload.SaveAs filename" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">Uma cadeia de caracteres que especifica o caminho completo do local do servidor no qual o arquivo carregado será salvo.</param>
        <summary>Salva o conteúdo de um arquivo carregado em um caminho especificado no servidor Web.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> método salva o conteúdo de um arquivo carregado em um caminho especificado no servidor Web.  
  
 O <xref:System.Web.UI.WebControls.FileUpload> controle não salvará automaticamente um arquivo para o servidor depois que o usuário seleciona o arquivo para carregar. Você deve fornecer explicitamente um controle ou um mecanismo para permitir que o usuário enviar o arquivo especificado. Por exemplo, você pode fornecer um botão que o usuário clica para carregar o arquivo. O código que você escreve para salvar o arquivo especificado deve chamar o <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> método, que salva o conteúdo de um arquivo em um caminho especificado no servidor. Normalmente, o <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> método é chamado em um método de manipulação de eventos para um evento que gera uma postagem para o servidor. Por exemplo, se você fornecer um botão para enviar um arquivo, o código para salvar o arquivo para o servidor, em seguida, foi incluído dentro do método de manipulação de eventos para o evento de clique.  
  
 Quando você chama o <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> método, você deve especificar o caminho completo do diretório no servidor no qual salvar o arquivo carregado. Se você não especificar explicitamente um caminho no código do aplicativo, um <xref:System.Web.HttpException> exceção é lançada quando um usuário tenta carregar um arquivo. Esse comportamento ajuda a proteger os arquivos no servidor, não permitindo que os usuários especifiquem um caminho no qual salvar os arquivos de carregar.  
  
 Antes de chamar o <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> método, você deve usar o <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> propriedade para verificar se o <xref:System.Web.UI.WebControls.FileUpload> controle contém um arquivo para carregar. Se o <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> retorna `true`, chame o <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> método. Se ele retorna `false`, exiba uma mensagem para o usuário indicando que o controle não contém um arquivo. Se você não fornecer o código de tratamento de erros para verificar se existe um arquivo, uma tentativa de salvar um arquivo inexistente lança um <xref:System.Web.HttpException> exceção.  
  
 Para chamar o <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> funcione, o aplicativo ASP.NET deve ter acesso de gravação para o diretório no servidor. Há duas maneiras que o aplicativo pode obter acesso de gravação. Você pode conceder explicitamente acesso de gravação para a conta sob a qual o aplicativo é executado, no diretório no qual os arquivos carregados serão salvas. Como alternativa, você pode aumentar o nível de confiança é concedida para o aplicativo ASP.NET. Para obter acesso de gravação ao diretório de execução para o aplicativo, o aplicativo deve ser concedido a <xref:System.Web.AspNetHostingPermission> objeto com o nível de confiança definido como o <xref:System.Web.AspNetHostingPermissionLevel.Medium?displayProperty=nameWithType> valor. Aumentar o nível de confiança aumenta o acesso do aplicativo a recursos no servidor. Observe que isso não é uma abordagem segura, porque um usuário mal-intencionado obtiver controle de seu aplicativo também será capaz de executar em um nível mais alto de confiança. É uma prática recomendada para executar um aplicativo ASP.NET no contexto de um usuário que tem os privilégios mínimos necessários para o execução do aplicativo. Para obter mais informações sobre a segurança em aplicativos ASP.NET, consulte [recomendações de segurança para aplicativos Web](http://msdn.microsoft.com/library/3eeeee9e-b09f-4c7f-8ce5-d9ca1f9322ad) e [níveis de confiança do ASP.NET e arquivos de política](http://msdn.microsoft.com/library/f897c794-10d3-414c-86b7-59b66564bbf1).  
  
   
  
## Examples  
 O exemplo a seguir demonstra como criar um <xref:System.Web.UI.WebControls.FileUpload> controle que executa a verificação de erros. Antes do arquivo é salvo, o <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> método é chamado para verificar a existência de um arquivo para carregar. Além disso, o <xref:System.IO.File.Exists%2A?displayProperty=nameWithType> método é chamado para verificar se um arquivo que tem o mesmo nome já existe no caminho. Se isso acontecer, o nome do arquivo para carregar é prefixado com um número antes do <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> método é chamado. Isso impede que o arquivo existente seja substituído.  
  
 [!code-aspx-csharp[FileUpload.SaveAs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUpload.SaveAs/cs/fileupload.saveascs.aspx#1)]
 [!code-aspx-vb[FileUpload.SaveAs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUpload.SaveAs/VB/fileupload.saveasvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">
          <paramref name="filename" /> não é um caminho completo.</exception>
        <altmember cref="P:System.Web.UI.WebControls.FileUpload.HasFile" />
      </Docs>
    </Member>
  </Members>
</Type>