<Type Name="LinqDataSourceUpdateEventArgs" FullName="System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5a1b8bd0b4efda23c6f0ffd2b416b4ead20d2a15" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51862876" /></Metadata><TypeSignature Language="C#" Value="public class LinqDataSourceUpdateEventArgs : System.ComponentModel.CancelEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LinqDataSourceUpdateEventArgs extends System.ComponentModel.CancelEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class LinqDataSourceUpdateEventArgs&#xA;Inherits CancelEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class LinqDataSourceUpdateEventArgs : System::ComponentModel::CancelEventArgs" />
  <TypeSignature Language="F#" Value="type LinqDataSourceUpdateEventArgs = class&#xA;    inherit CancelEventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.CancelEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornece dados para o evento de <see cref="E:System.Web.UI.WebControls.LinqDataSource.Updating" /> .</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> objeto é passado para qualquer manipulador de eventos para o <xref:System.Web.UI.WebControls.LinqDataSource.Updating> eventos. Você pode usar o <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> objeto para examinar os dados antes da operação de atualização é executada na fonte de dados. Você pode validar os dados, examine as exceções de validação geradas por classe de dados ou alterar um valor antes da atualização. Você também pode cancelar a operação de atualização.  
  
 O <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> objeto contém os dados que foram originalmente recuperados da fonte de dados. O <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> objeto contém os dados que serão salvos na fonte de dados durante a operação de atualização.  
  
 Se o objeto que representa a fonte de dados gera uma exceção de validação antes de atualizar os dados, o <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> propriedade contém uma instância da <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> classe. Você pode recuperar todas as exceções de validação por meio de <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> propriedade. Se nenhuma exceção de validação for lançada, o <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> propriedade contém `null`. Se você tratar as exceções de validação e não quiser que a exceção ser gerada novamente, defina as <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A> propriedade para `true`.  
  
 Por padrão, o <xref:System.Web.UI.WebControls.LinqDataSource> repositórios de controle valores originais da fonte de dados no modo de exibição de estado na página da Web, exceto aqueles cujo <xref:System.Data.Linq.Mapping.ColumnAttribute> atributo está marcado como `UpdateCheck.Never`. O LINQ to SQL verifica automaticamente a integridade dos dados antes de atualizar os dados. Ele faz isso comparando os valores atuais na fonte de dados com os valores originais armazenados no estado de exibição. O LINQ to SQL gera uma exceção se os valores na fonte de dados foram alterados. Você pode executar a validação de dados adicionais, criando um manipulador para o <xref:System.Web.UI.WebControls.LinqDataSource.Updating> eventos.  
  
   
  
## Examples  
 O exemplo a seguir mostra um manipulador de eventos para o <xref:System.Web.UI.WebControls.LinqDataSource.Updating> eventos. O exemplo mostra como comparar as propriedades do <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> propriedade e o <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> propriedade para determinar se o valor no `Category` propriedade foi alterada. Nesse caso, o `CategoryChanged` propriedade do objeto na <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> estiver definida como `true`.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/vb/Default.aspx.vb#1)]  
  
 O exemplo a seguir mostra um manipulador de eventos para o <xref:System.Web.UI.WebControls.LinqDataSource.Updating> eventos. Ele exibe quaisquer mensagens de exceção de validação usando um <xref:System.Web.UI.WebControls.Label> controle.  
  
```vb  
Protected Sub LinqDataSource_Updating(ByVal sender As Object, _  
        ByVal e As LinqDataSourceUpdateEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Updating(object sender,   
        LinqDataSourceUpdateEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655">LINQ to SQL</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceUpdateEventArgs (System.Web.UI.WebControls.LinqDataSourceValidationException exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.UI.WebControls.LinqDataSourceValidationException exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor(System.Web.UI.WebControls.LinqDataSourceValidationException)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (exception As LinqDataSourceValidationException)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceUpdateEventArgs(System::Web::UI::WebControls::LinqDataSourceValidationException ^ exception);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs : System.Web.UI.WebControls.LinqDataSourceValidationException -&gt; System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" Usage="new System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs exception" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="exception" Type="System.Web.UI.WebControls.LinqDataSourceValidationException" />
      </Parameters>
      <Docs>
        <param name="exception">A exceção que ocorreu durante a validação de dados a serem atualizados.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" /> com a exceção especificada.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceUpdateEventArgs (object originalObject, object newObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object originalObject, object newObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (originalObject As Object, newObject As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceUpdateEventArgs(System::Object ^ originalObject, System::Object ^ newObject);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs : obj * obj -&gt; System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" Usage="new System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs (originalObject, newObject)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="originalObject" Type="System.Object" />
        <Parameter Name="newObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="originalObject">Um objeto do tipo especificado na propriedade <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" /> que contém os valores iniciais recuperados da fonte de dados.</param>
        <param name="newObject">Um objeto do tipo especificado na propriedade <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" /> que contém os valores que serão salvos na fonte de dados.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.LinqDataSourceValidationException Exception { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.LinqDataSourceValidationException Exception" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Exception As LinqDataSourceValidationException" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::LinqDataSourceValidationException ^ Exception { System::Web::UI::WebControls::LinqDataSourceValidationException ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Exception : System.Web.UI.WebControls.LinqDataSourceValidationException" Usage="System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.LinqDataSourceValidationException</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém a exceção gerada enquanto os dados estavam sendo validados antes da operação de atualização.</summary>
        <value>A exceção se ocorreu um erro; Caso contrário, <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se uma exceção de validação é gerada antes da operação de atualização é executada, a exceção é armazenada no <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> propriedade. Em um manipulador de eventos para o <xref:System.Web.UI.WebControls.LinqDataSource.Updating> evento, você pode recuperar a exceção por meio de <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> propriedade.  
  
   
  
## Examples  
 O exemplo a seguir mostra um manipulador de eventos para o <xref:System.Web.UI.WebControls.LinqDataSource.Updating> eventos. Ele exibe quaisquer mensagens de exceção de validação usando um <xref:System.Web.UI.WebControls.Label> controle.  
  
```vb  
Protected Sub LinqDataSource_Updating(ByVal sender As Object, _  
        ByVal e As LinqDataSourceUpdateEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Updating(object sender,   
        LinqDataSourceUpdateEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExceptionHandled">
      <MemberSignature Language="C#" Value="public bool ExceptionHandled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExceptionHandled" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled" />
      <MemberSignature Language="VB.NET" Value="Public Property ExceptionHandled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExceptionHandled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ExceptionHandled : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define um valor que indica se a exceção foi tratada e que ela não deve ser gerada novamente.</summary>
        <value><see langword="true" /> Se a exceção foi tratada; Caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você pode criar um manipulador de eventos para o <xref:System.Web.UI.WebControls.LinqDataSource.Updating> eventos para examinar as exceções de validação que ocorreram antes da operação de atualização. Se você trata a exceção e não quiser que ele seja lançada novamente, defina as <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A> propriedade para `true`. Se você não definir a <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A> propriedade para `true`, a exceção será propagada para o próximo manipulador de eventos na pilha de chamadas.  
  
   
  
## Examples  
 O exemplo a seguir mostra um manipulador de eventos para o <xref:System.Web.UI.WebControls.LinqDataSource.Updating> eventos. Ele exibe quaisquer mensagens de exceção de validação usando um <xref:System.Web.UI.WebControls.Label> controle.  
  
```vb  
Protected Sub LinqDataSource_Updating(ByVal sender As Object, _  
        ByVal e As LinqDataSourceUpdateEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Updating(object sender,   
        LinqDataSourceUpdateEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewObject">
      <MemberSignature Language="C#" Value="public object NewObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object NewObject" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NewObject As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ NewObject { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NewObject : obj" Usage="System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o objeto que contém os valores que serão salvos na fonte de dados.</summary>
        <value>Um objeto do tipo especificado no <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" /> propriedade que contém os dados a serem salvos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Crie um manipulador de eventos para o <xref:System.Web.UI.WebControls.LinqDataSource.Updating> eventos e como recuperar o <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> propriedade para validar os dados. Você também pode alterar os dados ou cancelar a operação de atualização.  
  
   
  
## Examples  
 O exemplo a seguir mostra um manipulador de eventos para o <xref:System.Web.UI.WebControls.LinqDataSource.Updating> eventos. O exemplo mostra como comparar as propriedades do <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> propriedade e o <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> propriedade para determinar se o valor no `Category` propriedade foi alterada. Nesse caso, o `CategoryChanged` propriedade do objeto na <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> estiver definida como `true`.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OriginalObject">
      <MemberSignature Language="C#" Value="public object OriginalObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object OriginalObject" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OriginalObject As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ OriginalObject { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OriginalObject : obj" Usage="System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o objeto que contém os valores que foram originalmente recuperados da fonte de dados.</summary>
        <value>Um objeto do tipo especificado no <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" /> propriedade que contém os dados que foram recuperados da fonte de dados.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você pode usar o <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> propriedade para verificar os valores originais com os valores atuais na fonte de dados e para cancelar a operação de atualização ou executar outra ação.  
  
 O <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> propriedade contém valores para apenas as propriedades que são mantidas na exibição de estado na página da Web. Uma propriedade é mantida sob estas circunstâncias:  
  
-   Quando ele é exibido em um controle associado a dados.  
  
-   Quando o <xref:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck%2A?displayProperty=nameWithType> propriedade do <xref:System.Data.Linq.Mapping.ColumnAttribute?displayProperty=nameWithType> atributo é definido como `Always` ou `WhenChanged`.  
  
 Se o <xref:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck%2A> estiver definida como `Never` e o valor não é exibido em um controle associado a dados, o valor não é armazenado na página da Web. Nesse caso, ele não pode ser atribuído a <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> propriedade.  
  
   
  
## Examples  
 O exemplo a seguir mostra um manipulador de eventos para o <xref:System.Web.UI.WebControls.LinqDataSource.Updating> eventos. O exemplo mostra como comparar as propriedades do <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> propriedade e o <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> propriedade para determinar se o valor no `Category` propriedade foi alterada. Nesse caso, o `CategoryChanged` propriedade do objeto na <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> estiver definida como `true`.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>