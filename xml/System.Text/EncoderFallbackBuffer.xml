<Type Name="EncoderFallbackBuffer" FullName="System.Text.EncoderFallbackBuffer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e141f420e0edf6d758c8945e920a86ecdb9ac315" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58721554" /></Metadata><TypeSignature Language="C#" Value="public abstract class EncoderFallbackBuffer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit EncoderFallbackBuffer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.EncoderFallbackBuffer" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class EncoderFallbackBuffer" />
  <TypeSignature Language="C++ CLI" Value="public ref class EncoderFallbackBuffer abstract" />
  <TypeSignature Language="F#" Value="type EncoderFallbackBuffer = class" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornece um buffer que permite que um manipulador de fallback retorne uma cadeia de caracteres alternativa para um codificador quando ele não é capaz de codificar um caractere de entrada.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uma codificação define um mapeamento entre um caractere Unicode e uma sequência codificada de bytes. Uma operação de codificação, que converte um caractere de entrada para uma sequência de bytes de saída, falhará se nenhum mapeamento é definido para um determinado caractere.  
  
 O .NET Framework fornece um mecanismo chamado fallback, se uma conversão não pode ser executada de tratamento de falha. Todos os manipuladores de fallback do codificador devem implementar o seguinte:  
  
-   Um codificador fallback, que é representado por uma classe derivada do <xref:System.Text.EncoderFallback> classe.  
  
-   Um buffer de fallback do codificador, que é representado por um tipo derivado de <xref:System.Text.EncoderFallbackBuffer> classe que pode retornar uma cadeia de caracteres para a operação de conversão.  
  
 Fallbacks podem usar três estratégias para lidar com falhas de conversão:  
  
-   Mapeamento de melhor ajuste. O buffer de fallback do codificador pode retornar uma cadeia de caracteres que representa uma aproximação para o caractere de entrada. O .NET Framework não fornece um melhor ajuste de público <xref:System.Text.EncoderFallbackBuffer> implementação.  
  
-   Substituição. O buffer de fallback do codificador pode retornar uma cadeia de caracteres, como um ponto de interrogação ("?"), que indica que um caractere não pôde ser codificado. No .NET Framework, o <xref:System.Text.EncoderReplacementFallback> e <xref:System.Text.EncoderReplacementFallbackBuffer> classes fornecem uma implementação de buffer de fallback de substituição público. O construtor do <xref:System.Text.EncoderReplacementFallback> classe permite que você defina a cadeia de caracteres de substituição.  
  
-   Exceção. O <xref:System.Text.EncoderFallbackBuffer> implementação lança uma exceção, que indica que um caractere não pode ser codificado e encerra a operação de codificação. Nesse caso, o manipulador de fallback deve fornecer um <xref:System.Text.EncoderFallbackBuffer> implementação, embora ela não retorna uma cadeia de caracteres para o codificador. No .NET Framework, o <xref:System.Text.EncoderExceptionFallback> e <xref:System.Text.EncoderExceptionFallbackBuffer> classes fornecem uma implementação de fallback de exceção pública que lança uma <xref:System.Text.EncoderFallbackException> quando um caractere não puder ser codificado.  
  
 O buffer em um <xref:System.Text.EncoderFallbackBuffer> implementação representa a cadeia de caracteres inteira a ser retornado para o codificador em resposta a um codificador fallback. Em geral, as implementações também incluem informações de estado, como o índice do próximo caractere para retornar para o codificador e o número de caracteres restantes a serem retornados. Porque <xref:System.Text.EncoderFallbackBuffer> é uma classe abstrata, ele requer que as classes derivadas para implementar os seguintes membros no mínimo:  
  
-   Sobrecarregado <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> método, que é chamado pelo codificador quando ele não é possível codificar um caractere. O codificador passa dois tipos de informação para a implementação de buffer de fallback: o caractere ou par alternativo que não pôde ser codificado e o índice do caractere de entrada. Em um manipulador de exceção de fallback do codificador, a exceção é lançada nesse método. Caso contrário, o método retornará `true` se ele fornece um fallback, ou `false` se não existir.  
  
-   O <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> método, que é chamado repetidamente pelo codificador se o <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> retorno do método `true`. Em chamadas sucessivas, o manipulador deve retornar cada caractere em seu buffer. Quando ele tiver retornado todos os caracteres, ele deverá retornar u+0000. Um manipulador de exceção sempre retorna a U + 0000.  
  
-   O <xref:System.Text.EncoderFallbackBuffer.MovePrevious%2A> método, que tenta mover o ponteiro para a posição anterior no buffer e indica se a movimentação foi bem-sucedida. Sempre retorna um manipulador de exceção `false`.  
  
-   O <xref:System.Text.EncoderFallbackBuffer.Remaining%2A> propriedade, que indica o número de caracteres restantes a serem retornados para o codificador. Um manipulador de fallback de exceção sempre retorna zero.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.EncoderFallback" />
    <related type="Article" href="~/docs/standard/base-types/character-encoding.md">Codificação de caracteres no .NET Framework</related>
    <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/Cyrillic-to-Roman-f7e88b29">Amostra: Cirílico ao utilitário de Transliteração romano</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected EncoderFallbackBuffer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncoderFallbackBuffer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; EncoderFallbackBuffer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Text.EncoderFallbackBuffer" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Fallback">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Indica se uma cadeia de caracteres substituta está disponível quando a entrada original não pode ser codificada ou se a entrada original deve ser ignorada.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fallback">
      <MemberSignature Language="C#" Value="public abstract bool Fallback (char charUnknown, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Fallback(char charUnknown, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Fallback (charUnknown As Char, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Fallback(char charUnknown, int index);" />
      <MemberSignature Language="F#" Value="abstract member Fallback : char * int -&gt; bool" Usage="encoderFallbackBuffer.Fallback (charUnknown, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charUnknown" Type="System.Char" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="charUnknown">Um caractere de entrada.</param>
        <param name="index">A posição no índice do caractere no buffer de entrada.</param>
        <summary>Quando substituído em uma classe derivada, prepara o buffer de fallback para manipular o caractere de entrada especificado.</summary>
        <returns><see langword="true" /> se o buffer de fallback pode processar <paramref name="charUnknown" />; <see langword="false" /> se o buffer de fallback ignora <paramref name="charUnknown" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType> e <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType> chamada de métodos <xref:System.Text.DecoderFallbackBuffer.Fallback%28System.Byte%5B%5D%2CSystem.Int32%29> se encontram um caractere de entrada desconhecido que não pode ser codificado. Um valor de retorno `true` indica que o buffer de fallback pode processar o caractere de entrada, que faz com que o método de chamada chamar o <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> método para obter cada caractere do buffer de fallback. Porque ele não processa os caracteres individuais, o <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> método em um manipulador de fallback de exceção gera uma exceção.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Fallback">
      <MemberSignature Language="C#" Value="public abstract bool Fallback (char charUnknownHigh, char charUnknownLow, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Fallback(char charUnknownHigh, char charUnknownLow, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Fallback (charUnknownHigh As Char, charUnknownLow As Char, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Fallback(char charUnknownHigh, char charUnknownLow, int index);" />
      <MemberSignature Language="F#" Value="abstract member Fallback : char * char * int -&gt; bool" Usage="encoderFallbackBuffer.Fallback (charUnknownHigh, charUnknownLow, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charUnknownHigh" Type="System.Char" />
        <Parameter Name="charUnknownLow" Type="System.Char" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="charUnknownHigh">A alternativa superior do par de entradas.</param>
        <param name="charUnknownLow">A alternativa inferior do par de entradas.</param>
        <param name="index">A posição no índice do par alternativo no buffer de entrada.</param>
        <summary>Quando substituído em uma classe derivada, prepara o buffer de fallback para manipular o par alternativo especificado.</summary>
        <returns><see langword="true" /> se o buffer de fallback pode processar <paramref name="charUnknownHigh" /> e <paramref name="charUnknownLow" />; <see langword="false" /> se o buffer de fallback ignora o par alternativo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType> e <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType> chamada de métodos <xref:System.Text.EncoderFallbackBuffer.Fallback%28System.Char%2CSystem.Char%2CSystem.Int32%29> se encontram em um par substituto em sua entrada. Um valor de retorno `true` indica que o buffer de fallback pode processar o par substituto, que faz com que o método de chamada chamar o <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> método para obter cada caractere do buffer de fallback.  Porque ele não processa os caracteres individuais, o <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> método em um manipulador de fallback de exceção gera uma exceção.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNextChar">
      <MemberSignature Language="C#" Value="public abstract char GetNextChar ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance char GetNextChar() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncoderFallbackBuffer.GetNextChar" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetNextChar () As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract char GetNextChar();" />
      <MemberSignature Language="F#" Value="abstract member GetNextChar : unit -&gt; char" Usage="encoderFallbackBuffer.GetNextChar " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quando substituído em uma classe derivada, recupera o próximo caractere no buffer de fallback.</summary>
        <returns>O próximo caractere no buffer de fallback.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uma operação de codificação chama o <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> método se a operação de encontrar um caractere desconhecido ou par substituto na entrada. Por exemplo, no caso de uma substituição fallback, se o <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> método retorna `true`, uma cadeia de caracteres substituta existe que podem ser codificados em vez da entrada desconhecida. As chamadas de operação de codificação de <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> método repetidamente e obtém o caractere de uma cadeia de caracteres substituta por vez. Quando todos os caracteres no buffer de fallback foram retornados para o codificador a <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> método deverá retornar u+0000.  
  
 Para um manipulador de fallback de exceção, o <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> método deverá retornar u+0000.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MovePrevious">
      <MemberSignature Language="C#" Value="public abstract bool MovePrevious ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MovePrevious() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncoderFallbackBuffer.MovePrevious" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function MovePrevious () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool MovePrevious();" />
      <MemberSignature Language="F#" Value="abstract member MovePrevious : unit -&gt; bool" Usage="encoderFallbackBuffer.MovePrevious " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quando substituído em uma classe derivada, faz com que a próxima chamada para o método <see cref="M:System.Text.EncoderFallbackBuffer.GetNextChar" /> acesse a posição do caractere do buffer de dados que é anterior à posição atual do caractere.</summary>
        <returns><see langword="true" /> se a operação <see cref="M:System.Text.EncoderFallbackBuffer.MovePrevious" /> tiver sido bem-sucedida; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um manipulador de fallback de exceção deve retornar `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remaining">
      <MemberSignature Language="C#" Value="public abstract int Remaining { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Remaining" />
      <MemberSignature Language="DocId" Value="P:System.Text.EncoderFallbackBuffer.Remaining" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Remaining As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property int Remaining { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Remaining : int" Usage="System.Text.EncoderFallbackBuffer.Remaining" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Quando substituído em uma classe derivada, obtém o número máximo de caracteres no objeto <see cref="T:System.Text.EncoderFallbackBuffer" /> atual que ainda não foi processado.</summary>
        <value>O número de caracteres no buffer de fallback atual que ainda não foram processados.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> retorn `true` se <xref:System.Text.EncoderFallbackBuffer.Remaining%2A> é um valor diferente de zero.  
  
 Para um manipulador de fallback de exceção, o <xref:System.Text.DecoderFallbackBuffer.Remaining%2A> método deverá retornar zero.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public virtual void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncoderFallbackBuffer.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="encoderFallbackBuffer.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Inicializa todas as informações de dados e de estado pertencentes a esse buffer de fallback.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>Depois de chamar o <see cref="M:System.Text.EncoderFallbackBuffer.Reset" /> método, o <see cref="P:System.Text.EncoderFallbackBuffer.Remaining" /> propriedade deve retornar 0, o <see cref="M:System.Text.EncoderFallbackBuffer.GetNextChar" /> método deverá retornar u+0000 e o <see cref="M:System.Text.EncoderFallbackBuffer.MovePrevious" /> método deverá retornar <see langword="false" />.</para></block>
      </Docs>
    </Member>
  </Members>
</Type>