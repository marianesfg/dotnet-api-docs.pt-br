<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="EncoderFallbackBuffer.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5116c4743750d62c78bf7a85e6e5dff453828390b.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">116c4743750d62c78bf7a85e6e5dff453828390b</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Text.EncoderFallbackBuffer">
          <source>Provides a buffer that allows a fallback handler to return an alternate string to an encoder when it cannot encode an input character.</source>
          <target state="translated">Fornece um buffer que permite que um manipulador de fallback retorne uma cadeia de caracteres alternativa para um codificador quando ele não é capaz de codificar um caractere de entrada.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderFallbackBuffer">
          <source>An encoding defines a mapping between a Unicode character and an encoded sequence of bytes.</source>
          <target state="translated">Uma codificação define um mapeamento entre um caractere Unicode e uma sequência codificada de bytes.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderFallbackBuffer">
          <source>An encoding operation, which converts an input character to an output byte sequence, fails if no mapping is defined for a particular character.</source>
          <target state="translated">Uma operação de codificação, que converte um caractere de entrada em uma sequência de bytes de saída, falha se nenhum mapeamento for definido para um caractere específico.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderFallbackBuffer">
          <source>The .NET Framework provides a failure handling mechanism, called a fallback, if a conversion cannot be performed.</source>
          <target state="translated">O .NET Framework fornece um mecanismo, chamado fallback, se uma conversão não pode ser executada de tratamento de falha.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderFallbackBuffer">
          <source>All encoder fallback handlers must implement the following:</source>
          <target state="translated">Todos os manipuladores de fallback do codificador devem implementar o seguinte:</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderFallbackBuffer">
          <source>An encoder fallback, which is represented by a class derived from the <ph id="ph1">&lt;xref:System.Text.EncoderFallback&gt;</ph> class.</source>
          <target state="translated">Um codificador de fallback, que é representado por uma classe derivada do <ph id="ph1">&lt;xref:System.Text.EncoderFallback&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderFallbackBuffer">
          <source>An encoder fallback buffer, which is represented by a type derived from the <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer&gt;</ph> class that can return a string to the conversion operation.</source>
          <target state="translated">Um buffer de fallback do codificador, que é representado por um tipo derivado de <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer&gt;</ph> classe que pode retornar uma cadeia de caracteres para a operação de conversão.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderFallbackBuffer">
          <source>Fallbacks can use three strategies to handle conversion failures:</source>
          <target state="translated">Sequências podem usar três estratégias para lidar com falhas de conversão:</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderFallbackBuffer">
          <source>Best-fit mapping.</source>
          <target state="translated">Mapeamento de melhor ajuste.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderFallbackBuffer">
          <source>The encoder fallback buffer can return a string that represents a close approximation to the input character.</source>
          <target state="translated">O buffer de fallback do codificador pode retornar uma cadeia de caracteres que representa uma aproximação para o caractere de entrada.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderFallbackBuffer">
          <source>The .NET Framework does not provide a public best-fit <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer&gt;</ph> implementation.</source>
          <target state="translated">O .NET Framework não fornece um melhor ajuste de público <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer&gt;</ph> implementação.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderFallbackBuffer">
          <source>Replacement.</source>
          <target state="translated">Substituição.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderFallbackBuffer">
          <source>The encoder fallback buffer can return a string, such as a question mark ("?"), that indicates that a character could not be encoded.</source>
          <target state="translated">O buffer de fallback do codificador pode retornar uma cadeia de caracteres, como um ponto de interrogação ("?"), que indica que um caractere não pode ser codificado.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderFallbackBuffer">
          <source>In the .NET Framework, the <ph id="ph1">&lt;xref:System.Text.EncoderReplacementFallback&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.EncoderReplacementFallbackBuffer&gt;</ph> classes provide a public replacement fallback buffer implementation.</source>
          <target state="translated">No .NET Framework, o <ph id="ph1">&lt;xref:System.Text.EncoderReplacementFallback&gt;</ph> e <ph id="ph2">&lt;xref:System.Text.EncoderReplacementFallbackBuffer&gt;</ph> classes fornecem uma implementação de buffer de fallback de substituição pública.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderFallbackBuffer">
          <source>The constructor of the <ph id="ph1">&lt;xref:System.Text.EncoderReplacementFallback&gt;</ph> class enables you to define the replacement string.</source>
          <target state="translated">O construtor do <ph id="ph1">&lt;xref:System.Text.EncoderReplacementFallback&gt;</ph> classe permite que você defina a cadeia de caracteres de substituição.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderFallbackBuffer">
          <source>Exception.</source>
          <target state="translated">Exceção.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderFallbackBuffer">
          <source>The <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer&gt;</ph> implementation throws an exception, which indicates that a character cannot be encoded, and terminates the encoding operation.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer&gt;</ph> implementação lança uma exceção, que indica que um caractere não pode ser codificado e encerra a operação de codificação.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderFallbackBuffer">
          <source>In this case, the fallback handler must provide an <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer&gt;</ph> implementation, although it does not return a string to the encoder.</source>
          <target state="translated">Nesse caso, o manipulador de fallback deve fornecer um <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer&gt;</ph> implementação, embora ele não retorna uma cadeia de caracteres para o codificador.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderFallbackBuffer">
          <source>In the .NET Framework, the <ph id="ph1">&lt;xref:System.Text.EncoderExceptionFallback&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.EncoderExceptionFallbackBuffer&gt;</ph> classes provide a public exception fallback implementation that throws an <ph id="ph3">&lt;xref:System.Text.EncoderFallbackException&gt;</ph> when a character cannot be encoded.</source>
          <target state="translated">No .NET Framework, o <ph id="ph1">&lt;xref:System.Text.EncoderExceptionFallback&gt;</ph> e <ph id="ph2">&lt;xref:System.Text.EncoderExceptionFallbackBuffer&gt;</ph> classes fornecem uma implementação de fallback de exceção pública que lança um <ph id="ph3">&lt;xref:System.Text.EncoderFallbackException&gt;</ph> quando um caractere não pode ser codificado.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderFallbackBuffer">
          <source>The buffer in an <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer&gt;</ph> implementation represents the entire string to be returned to the encoder in response to an encoder fallback.</source>
          <target state="translated">O buffer em um <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer&gt;</ph> implementação representa a cadeia de caracteres inteira a ser retornado para o codificador em resposta a um codificador de fallback.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderFallbackBuffer">
          <source>Generally, implementations also include state information, such as the index of the next character to return to the encoder and the number of remaining characters to be returned.</source>
          <target state="translated">Em geral, implementações também incluem informações de estado, como o índice do próximo caractere para retornar para o codificador e o número de caracteres restantes a serem retornadas.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderFallbackBuffer">
          <source>Because <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer&gt;</ph> is an abstract class, it requires derived classes to implement the following members at a minimum:</source>
          <target state="translated">Porque <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer&gt;</ph> é uma classe abstrata, ele requer que as classes derivadas para implementar os seguintes membros no mínimo:</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderFallbackBuffer">
          <source>The overloaded <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer.Fallback%2A&gt;</ph> method, which is called by the encoder when it cannot encode a character.</source>
          <target state="translated">Sobrecarregados <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer.Fallback%2A&gt;</ph> método, que é chamado pelo codificador quando ele não é possível codificar um caractere.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderFallbackBuffer">
          <source>The encoder passes two pieces of information to the fallback buffer implementation: the character or surrogate pair that could not be encoded and the index of the character in the input.</source>
          <target state="translated">O codificador passa dois tipos de informações para a implementação do buffer de fallback: o caractere ou par substituto que não pode ser codificado e o índice do caractere de entrada.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderFallbackBuffer">
          <source>In an encoder fallback exception handler, the exception is thrown in this method.</source>
          <target state="translated">Em um manipulador de exceção de fallback do codificador, a exceção é lançada nesse método.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderFallbackBuffer">
          <source>Otherwise, the method returns <ph id="ph1">`true`</ph> if it provides a fallback, or <ph id="ph2">`false`</ph> if it does not.</source>
          <target state="translated">Caso contrário, o método retornará <ph id="ph1">`true`</ph> se ele fornece um fallback, ou <ph id="ph2">`false`</ph> se não existir.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderFallbackBuffer">
          <source>The <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A&gt;</ph> method, which is called repeatedly by the encoder if the <ph id="ph2">&lt;xref:System.Text.EncoderFallbackBuffer.Fallback%2A&gt;</ph> method returns <ph id="ph3">`true`</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A&gt;</ph> método, que é chamado repetidamente pelo codificador se o <ph id="ph2">&lt;xref:System.Text.EncoderFallbackBuffer.Fallback%2A&gt;</ph> método retornará <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderFallbackBuffer">
          <source>In successive calls, the handler should return each character in its buffer.</source>
          <target state="translated">Em chamadas sucessivas, o manipulador deve retornar cada caractere em seu buffer.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderFallbackBuffer">
          <source>When it has returned all characters, it should return U+0000.</source>
          <target state="translated">Quando ele tiver retornado todos os caracteres, ele deverá retornar U + 0000.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderFallbackBuffer">
          <source>An exception handler always returns U+0000.</source>
          <target state="translated">Um manipulador de exceção sempre retorna a U + 0000.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderFallbackBuffer">
          <source>The <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer.MovePrevious%2A&gt;</ph> method, which tries to move the pointer to the previous position in the buffer and indicates whether the move was successful.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer.MovePrevious%2A&gt;</ph> método, que tenta mover o ponteiro para a posição anterior no buffer e indica se a migração foi bem-sucedida.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderFallbackBuffer">
          <source>An exception handler always returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">Sempre retorna um manipulador de exceção <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderFallbackBuffer">
          <source>The <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer.Remaining%2A&gt;</ph> property, which indicates the number of remaining characters to be returned to the encoder.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer.Remaining%2A&gt;</ph> propriedade, que indica o número de caracteres restantes a serem retornadas para o codificador.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderFallbackBuffer">
          <source>An exception fallback handler always returns zero.</source>
          <target state="translated">Um manipulador de exceção de fallback sempre retorna zero.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Text.EncoderFallbackBuffer.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Text.EncoderFallbackBuffer" /&gt;</ph> class.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Text.EncoderFallbackBuffer" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="T:System.Text.EncoderFallbackBuffer">
          <source>Indicates whether a substitute string is available when the original input cannot be encoded, or whether the original input should be ignored.</source>
          <target state="translated">Indica se uma cadeia de caracteres substituta está disponível quando a entrada original não pode ser codificada ou se a entrada original deve ser ignorada.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Int32)">
          <source>An input character.</source>
          <target state="translated">Um caractere de entrada.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Int32)">
          <source>The index position of the character in the input buffer.</source>
          <target state="translated">A posição no índice do caractere no buffer de entrada.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Int32)">
          <source>When overridden in a derived class, prepares the fallback buffer to handle the specified input character.</source>
          <target state="translated">Quando substituído em uma classe derivada, prepara o buffer de fallback para manipular o caractere de entrada especificado.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Int32)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the fallback buffer can process <ph id="ph2">&lt;paramref name="charUnknown" /&gt;</ph>; <ph id="ph3">&lt;see langword="false" /&gt;</ph> if the fallback buffer ignores <ph id="ph4">&lt;paramref name="charUnknown" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se o buffer de fallback pode processar <ph id="ph2">&lt;paramref name="charUnknown" /&gt;</ph>; <ph id="ph3">&lt;see langword="false" /&gt;</ph> se o buffer de fallback ignora <ph id="ph4">&lt;paramref name="charUnknown" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType&gt;</ph> methods call <ph id="ph3">&lt;xref:System.Text.DecoderFallbackBuffer.Fallback%28System.Byte%5B%5D%2CSystem.Int32%29&gt;</ph> if they encounter an unknown input character that cannot be encoded.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType&gt;</ph> e <ph id="ph2">&lt;xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType&gt;</ph> chamada de métodos <ph id="ph3">&lt;xref:System.Text.DecoderFallbackBuffer.Fallback%28System.Byte%5B%5D%2CSystem.Int32%29&gt;</ph> se encontram um caractere de entrada desconhecido que não pode ser codificado.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Int32)">
          <source>A return value of <ph id="ph1">`true`</ph> indicates that the fallback buffer can process the input character, which causes the calling method to call the <ph id="ph2">&lt;xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A&gt;</ph> method to obtain each character of the fallback buffer.</source>
          <target state="translated">Um valor de retorno <ph id="ph1">`true`</ph> indica que o buffer de fallback pode processar o caractere de entrada, o que faz com que o método de chamada chamar o <ph id="ph2">&lt;xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A&gt;</ph> método para obter cada caractere do buffer de fallback.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Int32)">
          <source>Because it does not process individual characters, the <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer.Fallback%2A&gt;</ph> method in an exception fallback handler throws an exception.</source>
          <target state="translated">Porque ele não processar caracteres individuais, o <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer.Fallback%2A&gt;</ph> método em um manipulador de exceção fallback lança uma exceção.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)">
          <source>The high surrogate of the input pair.</source>
          <target state="translated">A alternativa superior do par de entradas.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)">
          <source>The low surrogate of the input pair.</source>
          <target state="translated">A alternativa inferior do par de entradas.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)">
          <source>The index position of the surrogate pair in the input buffer.</source>
          <target state="translated">A posição no índice do par alternativo no buffer de entrada.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)">
          <source>When overridden in a derived class, prepares the fallback buffer to handle the specified surrogate pair.</source>
          <target state="translated">Quando substituído em uma classe derivada, prepara o buffer de fallback para manipular o par alternativo especificado.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the fallback buffer can process <ph id="ph2">&lt;paramref name="charUnknownHigh" /&gt;</ph> and <ph id="ph3">&lt;paramref name="charUnknownLow" /&gt;</ph>; <ph id="ph4">&lt;see langword="false" /&gt;</ph> if the fallback buffer ignores the surrogate pair.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se o buffer de fallback pode processar <ph id="ph2">&lt;paramref name="charUnknownHigh" /&gt;</ph> e <ph id="ph3">&lt;paramref name="charUnknownLow" /&gt;</ph>; <ph id="ph4">&lt;see langword="false" /&gt;</ph> se o buffer de fallback ignora o par alternativo.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType&gt;</ph> methods call <ph id="ph3">&lt;xref:System.Text.EncoderFallbackBuffer.Fallback%28System.Char%2CSystem.Char%2CSystem.Int32%29&gt;</ph> if they encounter a surrogate pair in their input.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType&gt;</ph> e <ph id="ph2">&lt;xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType&gt;</ph> chamada de métodos <ph id="ph3">&lt;xref:System.Text.EncoderFallbackBuffer.Fallback%28System.Char%2CSystem.Char%2CSystem.Int32%29&gt;</ph> se encontram um par substituto em sua entrada.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)">
          <source>A return value of <ph id="ph1">`true`</ph> indicates that the fallback buffer can process the surrogate pair, which causes the calling method to call the <ph id="ph2">&lt;xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A&gt;</ph> method to obtain each character of the fallback buffer.</source>
          <target state="translated">Um valor de retorno <ph id="ph1">`true`</ph> indica que o buffer de fallback pode processar o par substituto, o que faz com que o método de chamada chamar o <ph id="ph2">&lt;xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A&gt;</ph> método para obter cada caractere do buffer de fallback.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)">
          <source>Because it does not process individual characters, the <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer.Fallback%2A&gt;</ph> method in an exception fallback handler throws an exception.</source>
          <target state="translated">Porque ele não processar caracteres individuais, o <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer.Fallback%2A&gt;</ph> método em um manipulador de exceção fallback lança uma exceção.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Text.EncoderFallbackBuffer.GetNextChar">
          <source>When overridden in a derived class, retrieves the next character in the fallback buffer.</source>
          <target state="translated">Quando substituído em uma classe derivada, recupera o próximo caractere no buffer de fallback.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Text.EncoderFallbackBuffer.GetNextChar">
          <source>The next character in the fallback buffer.</source>
          <target state="translated">O próximo caractere no buffer de fallback.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.EncoderFallbackBuffer.GetNextChar">
          <source>An encoding operation calls the <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer.Fallback%2A&gt;</ph> method if the operation encounters an unknown character or surrogate pair in the input.</source>
          <target state="translated">Uma operação de codificação chama o <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer.Fallback%2A&gt;</ph> método se a operação de encontrar um caractere desconhecido ou o par substituto na entrada.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.EncoderFallbackBuffer.GetNextChar">
          <source>For example, in the case of a replacement fallback, if the <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer.Fallback%2A&gt;</ph> method returns <ph id="ph2">`true`</ph>, a substitute string exists that can be encoded instead of the unknown input.</source>
          <target state="translated">Por exemplo, no caso de um caso de fallback, substituição do <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer.Fallback%2A&gt;</ph> método retorna <ph id="ph2">`true`</ph>, existe uma cadeia de substituição que podem ser codificados em vez da entrada desconhecida.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.EncoderFallbackBuffer.GetNextChar">
          <source>The encoding operation calls the <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A&gt;</ph> method repeatedly and obtains the substitute string one character at a time.</source>
          <target state="translated">As chamadas de operação de codificação de <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A&gt;</ph> método repetidamente e obtém o caractere de uma cadeia de caracteres substitutos por vez.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.EncoderFallbackBuffer.GetNextChar">
          <source>When all characters in the fallback buffer have been returned to the encoder, the <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A&gt;</ph> method should return U+0000.</source>
          <target state="translated">Quando todos os caracteres no buffer de fallback foram retornados para o codificador de <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A&gt;</ph> método deve retornar a U + 0000.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.EncoderFallbackBuffer.GetNextChar">
          <source>For an exception fallback handler, the <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A&gt;</ph> method should return U+0000.</source>
          <target state="translated">Para um manipulador de fallback de exceção, o <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A&gt;</ph> método deve retornar a U + 0000.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Text.EncoderFallbackBuffer.MovePrevious">
          <source>When overridden in a derived class, causes the next call to the <ph id="ph1">&lt;see cref="M:System.Text.EncoderFallbackBuffer.GetNextChar" /&gt;</ph> method to access the data buffer character position that is prior to the current character position.</source>
          <target state="translated">Quando substituído em uma classe derivada, faz com que a próxima chamada para o método <ph id="ph1">&lt;see cref="M:System.Text.EncoderFallbackBuffer.GetNextChar" /&gt;</ph> acesse a posição do caractere do buffer de dados que é anterior à posição atual do caractere.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Text.EncoderFallbackBuffer.MovePrevious">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="M:System.Text.EncoderFallbackBuffer.MovePrevious" /&gt;</ph> operation was successful; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se a operação <ph id="ph2">&lt;see cref="M:System.Text.EncoderFallbackBuffer.MovePrevious" /&gt;</ph> tiver sido bem-sucedida; caso contrário, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.EncoderFallbackBuffer.MovePrevious">
          <source>An exception fallback handler should return <ph id="ph1">`false`</ph>.</source>
          <target state="translated">Um manipulador de exceção fallback deve retornar <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="P:System.Text.EncoderFallbackBuffer.Remaining">
          <source>When overridden in a derived class, gets the number of characters in the current <ph id="ph1">&lt;see cref="T:System.Text.EncoderFallbackBuffer" /&gt;</ph> object that remain to be processed.</source>
          <target state="translated">Quando substituído em uma classe derivada, obtém o número máximo de caracteres no objeto <ph id="ph1">&lt;see cref="T:System.Text.EncoderFallbackBuffer" /&gt;</ph> atual que ainda não foi processado.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.EncoderFallbackBuffer.Remaining">
          <source>The number of characters in the current fallback buffer that have not yet been processed.</source>
          <target state="translated">O número de caracteres no buffer de fallback atual que ainda não foi processada.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.EncoderFallbackBuffer.Remaining">
          <source>The <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer.Fallback%2A&gt;</ph> method returns <ph id="ph2">`true`</ph> if <ph id="ph3">&lt;xref:System.Text.EncoderFallbackBuffer.Remaining%2A&gt;</ph> is a nonzero value.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer.Fallback%2A&gt;</ph> método <ph id="ph2">`true`</ph> se <ph id="ph3">&lt;xref:System.Text.EncoderFallbackBuffer.Remaining%2A&gt;</ph> é um valor diferente de zero.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.EncoderFallbackBuffer.Remaining">
          <source>For an exception fallback handler, the <ph id="ph1">&lt;xref:System.Text.DecoderFallbackBuffer.Remaining%2A&gt;</ph> method should return zero.</source>
          <target state="translated">Para um manipulador de fallback de exceção, o <ph id="ph1">&lt;xref:System.Text.DecoderFallbackBuffer.Remaining%2A&gt;</ph> método deve retornar zero.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Text.EncoderFallbackBuffer.Reset">
          <source>Initializes all data and state information pertaining to this fallback buffer.</source>
          <target state="translated">Inicializa todas as informações de dados e de estado pertencentes a esse buffer de fallback.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.EncoderFallbackBuffer.Reset">
          <source>After calling the <ph id="ph1">&lt;see cref="M:System.Text.EncoderFallbackBuffer.Reset" /&gt;</ph> method, the <ph id="ph2">&lt;see cref="P:System.Text.EncoderFallbackBuffer.Remaining" /&gt;</ph> property should return 0, the <ph id="ph3">&lt;see cref="M:System.Text.EncoderFallbackBuffer.GetNextChar" /&gt;</ph> method should return U+0000, and the <ph id="ph4">&lt;see cref="M:System.Text.EncoderFallbackBuffer.MovePrevious" /&gt;</ph> method should return <ph id="ph5">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Depois de chamar o <ph id="ph1">&lt;see cref="M:System.Text.EncoderFallbackBuffer.Reset" /&gt;</ph> método, o <ph id="ph2">&lt;see cref="P:System.Text.EncoderFallbackBuffer.Remaining" /&gt;</ph> propriedade deve retornar 0, o <ph id="ph3">&lt;see cref="M:System.Text.EncoderFallbackBuffer.GetNextChar" /&gt;</ph> método deve retornar a U + 0000 e o <ph id="ph4">&lt;see cref="M:System.Text.EncoderFallbackBuffer.MovePrevious" /&gt;</ph> método deve retornar <ph id="ph5">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>