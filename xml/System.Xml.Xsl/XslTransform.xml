<Type Name="XslTransform" FullName="System.Xml.Xsl.XslTransform">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4e528edbe87062a2b9dbb17cc8ed4ea0d2f4638a" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="64996478" /></Metadata><TypeSignature Language="C#" Value="public sealed class XslTransform" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XslTransform extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Xsl.XslTransform" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XslTransform" />
  <TypeSignature Language="C++ CLI" Value="public ref class XslTransform sealed" />
  <TypeSignature Language="F#" Value="type XslTransform = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
      <AttributeName>System.Obsolete("This class has been deprecated. Please use System.Xml.Xsl.XslCompiledTransform instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Transforma dados XML usando uma folha de estilos XSLT (linguagem XSL Transformation).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  O <xref:System.Xml.Xsl.XslTransform> classe está obsoleta no Microsoft .NET Framework versão 2.0. O <xref:System.Xml.Xsl.XslCompiledTransform> classe é o novo processador XSLT. Para obter mais informações, consulte [usando a classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) e [migrando da classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> dá suporte à sintaxe XSLT 1,0. A folha de estilos XSLT deve usar o namespace `http://www.w3.org/1999/XSL/Transform`.  
  
 Argumentos adicionais também podem ser adicionados para a folha de estilos usando o <xref:System.Xml.Xsl.XsltArgumentList> classe. Essa classe contém parâmetros de entrada para os objetos de folha e a extensão de estilo que podem ser chamados de folha de estilos.  
  
 Para transformar dados XML:  
  
1.  Criar um <xref:System.Xml.Xsl.XslTransform> objeto.  
  
2.  Use o <xref:System.Xml.Xsl.XslTransform.Load%2A> método para carregar a folha de estilos para a transformação. Esse método tem várias sobrecargas e pode carregar uma folha de estilos usando um <xref:System.Xml.XmlReader>, <xref:System.Xml.XPath.XPathNavigator>, <xref:System.Xml.XPath.IXPathNavigable>, ou uma URL com o local do arquivo.  
  
3.  Use o <xref:System.Xml.Xsl.XslTransform.Transform%2A> método para transformar os dados XML. Esse método tem várias sobrecargas e pode lidar com diferentes tipos de entrada e saída. Você também pode especificar um <xref:System.Xml.Xsl.XsltArgumentList> que contém os argumentos adicionais para usar como entrada durante a transformação.  
  
 **Considerações sobre segurança**  
  
 Ao criar um aplicativo que usa a classe de <xref:System.Xml.Xsl.XslTransform> , você deve estar ciente dos seguintes itens e suas implicações:  
  
-   Os objetos de extensão estão habilitados por padrão. Se um <xref:System.Xml.Xsl.XsltArgumentList> objeto que contém objetos de extensão é passado para o <xref:System.Xml.Xsl.XslTransform.Transform%2A> método, elas são utilizadas.  
  
-   As folhas de estilos XSLT podem incluir referências a outros arquivos e blocos de script inseridos. Um usuário mal-intencionado pode explorar isto fornecendo o com dados ou folhas de estilos que quando executado fará com que seu sistema processa até que o computador executa baixo em recursos.  
  
-   Os aplicativos XSLT que executam em um ambiente de confiança misturado podem levar a falsificação de folha de estilos. Por exemplo, um usuário mal-intencionado pode carregar um objeto com uma folha de estilos prejudicial e entregá-lo fora a outro usuário que subseqüentemente chama o método de <xref:System.Xml.Xsl.XslTransform.Transform%2A> e executa a transformação.  
  
 Esses problemas de segurança podem ser atenuados por não aceitar <xref:System.Xml.Xsl.XslTransform> objetos, folhas de estilos XSLT ou dados de origem XML de fontes não confiáveis.  
  
 **Suporte a scripts**  
  
 Esta classe dá suporte a scripts inserido usando o `msxsl:script` elemento.  
  
 Na versão 1.1 do .NET Framework, a evidência de folha de estilos determina as permissões concedidas para scripts inseridos.  
  
-   Se a folha de estilos foi carregada de um identificador de recurso uniforme (URI), o URI é usado para criar a evidência. Essa evidência inclui o URI, juntamente com seu site e zona.  
  
-   Se a folha de estilos foi carregada usando outra fonte, você pode fornecer a evidência, passando um <xref:System.Security.Policy.Evidence?displayProperty=nameWithType> do objeto para o <xref:System.Xml.Xsl.XslTransform.Load%2A> método. Caso contrário, o assembly de script tem confiança total.  
  
 Chamadores de confiança parcial: `UnmanagedCode` permissão é necessária para compilar o script incorporado. `ControlEvidence` permissão é necessária para fornecer <xref:System.Security.Policy.Evidence> para o <xref:System.Xml.Xsl.XslTransform.Load%2A> método. Um <xref:System.Security.SecurityException> será lançada se o chamador não tem as permissões necessárias. Consulte <xref:System.Security.Permissions.SecurityPermission?displayProperty=nameWithType> e <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=nameWithType> para obter mais informações.  
  
 O `msxsl:script` elemento tem os seguintes requisitos:  
  
-   O `msxsl:script` elemento pertence a `urn:schemas-microsoft-com:xslt` namespace. A folha de estilos deve incluir a declaração de namespace `xmlns:msxsl=urn:schemas-microsoft-com:xslt`.  
  
-   O `msxsl:script` elemento pode incluir um `language` atributo que especifica a linguagem de script para usar. O valor da `language` atributo deve ser um dos seguintes: C#, CSharp, VB, VisualBasic, JScript ou JavaScript. Porque o nome do idioma, não diferencia maiusculas de minúsculas, JavaScript e javascript são válidos. Se um `language` atributo não for especificado, o padrão é JScript.  
  
-   O `msxsl:script` elemento deve incluir um `implements-prefix` atributo que contém o prefixo que representa o namespace associado com o bloco de script. Esse namespace deve ser definido dentro de estilos. Uma folha de estilos pode incluir vários blocos de script que são agrupados por namespace. Você não pode ter os blocos de script com vários idiomas no mesmo namespace. Blocos de script podem chamar uma função definida em outro bloco de script, desde que os blocos de script residem no mesmo namespace. O conteúdo de um bloco de script é analisado de acordo com as regras e a sintaxe da linguagem de script (fornecido pelo `language` atributo). Por exemplo, se você tivesse um bloco de script c#, comentários seriam ter como prefixo o `//` caracteres. Os comentários devem ser conteúdo XML válido.  
  
> [!NOTE]
> É recomendável que você encapsule os blocos de script em uma seção CDATA.
  
 [!INCLUDE [xsltransform-script](~/includes/xsltransform-script.md)] 
   
 As funções podem ser declaradas no elemento `msxsl:script`. A tabela a seguir mostra os namespaces que têm suporte por padrão.  
  
|Namespaces com suporte|Descrição|  
|--------------------------|-----------------|  
|`System`|Classes de sistema.|  
|`System.Collection`|Classes de coleção.|  
|`System.Text`|Classes de manipulação de texto.|  
|`System.Xml`|Classes XML principais.|  
|`System.Xml.Xsl`|Classes XSLT.|  
|`System.Xml.XPath`|Classes da linguagem XPath.|  
  
 Os argumentos fornecidos e os valores de retorno definidos pelas funções de script deve ser um dos tipos de World Wide Web Consortium (W3C) listados abaixo. A tabela a seguir fornece detalhes sobre o mapeamento entre os tipos de W3C XPath ou XSLT e as classes do .NET Framework correspondentes.  
  
|Tipo W3C|Classe equivalente do .NET|  
|--------------|---------------------------|  
|Cadeia de caracteres (XPath)|`System.String`|  
|Valor booliano (XPath)|`System.Boolean`|  
|Número (XPath)|`System.Double`|  
|Fragmento da árvore de resultado (XSLT)|`System.Xml.XPath.XPathNavigator`|  
|Conjunto de nós (XPath)|`System.Xml.XPath.XPathNodeIterator`|  
  
 Se a função de script utilizar um dos seguintes tipos numéricos: Int16, UInt16, Int32, UInt32, Int64, UInt64, Single ou Decimal, esses tipos são forçados para Double, que mapeia para o número do tipo XPath do W3C.  
  
 Uma exceção é lançada quando uma função é chamada que não é possível converter o resultado de argumento em um dos tipos necessários.  
  
> [!NOTE]
>  `msxsl:script` e `msxsl:node-list` são somente funções do `urn:schemas-microsoft-com:xslt` namespace são compatíveis com o <xref:System.Xml.Xsl.XslTransform> classe.  
  
 <xref:System.Xml.Xsl.XslTransform> tem a capacidade de utilizar o código do common language runtime (CLR) como um mecanismo de extensão. Isso é feito, passando uma instância de uma classe para o <xref:System.Xml.Xsl.XslTransform> classe e chamando seus métodos públicos em uma folha de estilos XSLT. Métodos que são definidos com o `params` palavra-chave, que permite que um número especificado de parâmetros a serem passados, não funcionam corretamente nesse cenário. Ver [params](~/docs/csharp/language-reference/keywords/params.md) para obter mais detalhes.  
  
 Para obter mais informações, consulte [transformações XSLT com a classe XslTransform](~/docs/standard/data/xml/xslt-transformations-with-the-xsltransform-class.md).  
  
   
  
## Examples  
 O exemplo a seguir transforma o documento XML especificado e gera o resultado para o console.  
  
 [!code-csharp[Classic WebData XslTransform Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XslTransform Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XslTransform Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XslTransform Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><see cref="T:System.Xml.Xsl.XslTransform" /> os objetos são thread-safe somente para operações de transformação. Outras operações não são garantidas para ser thread-safe. Você deve garantir que não há outros métodos são chamados no objeto durante operações de carregamento.</threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XslTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XslTransform();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Xml.Xsl.XslTransform" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Carrega a folha de estilos XSLT, incluindo folhas de estilo referenciadas nos elementos <see langword="xsl:include" /> e <see langword="xsl:import" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  O <xref:System.Xml.Xsl.XslTransform> classe está obsoleta no .NET Framework versão 2.0. O <xref:System.Xml.Xsl.XslCompiledTransform> classe é o novo processador XSLT. Para obter mais informações, consulte [usando a classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) e [migrando da classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (string url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (url As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::String ^ url);" />
      <MemberSignature Language="F#" Value="member this.Load : string -&gt; unit" Usage="xslTransform.Load url" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="url">A URL que especifica a folha de estilos XSLT a ser carregada.</param>
        <summary>Carrega a folha de estilos XSLT especificada por uma URL.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  O <xref:System.Xml.Xsl.XslTransform> classe está obsoleta no .NET Framework versão 2.0. O <xref:System.Xml.Xsl.XslCompiledTransform> classe é o novo processador XSLT. Para obter mais informações, consulte [usando a classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) e [migrando da classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> dá suporte à sintaxe XSLT 1,0. A folha de estilos XSLT deve incluir a declaração de namespace `xmlns:xsl="http://www.w3.org/1999/XSL/Transform"`.  
  
 Esse método carrega a folha de estilos XSLT, incluindo as folhas de estilo referenciadas nos `xsl:include` e `xsl:import` elementos. Recursos externos são resolvidos usando um <xref:System.Xml.XmlUrlResolver> sem credenciais do usuário. Se a folha de estilos estiverem localizadas em um recurso de rede que requer autenticação, use a sobrecarga que utiliza um <xref:System.Xml.XmlResolver> como um de seus argumentos e especificar um <xref:System.Xml.XmlResolver> com as credenciais necessárias.  
  
 Se a folha de estilos contém scripts inseridos, o script é compilado em um assembly. O URI de folha de estilos é usado para criar a evidência, o que é aplicada ao assembly.
  
> [!NOTE]
>  Se o chamador não tem `UnmanagedCode` permissão, o script inserido não é compilado e um <xref:System.Security.SecurityException> é gerada. Consulte <xref:System.Security.Permissions.SecurityPermission> e <xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType> para obter mais informações.  
  
   
  
## Examples  
 O exemplo a seguir transforma um documento XML em um documento HTML. Ele exibe o ISBN, o título e o preço de cada livro em uma tabela.  
  
 [!code-cpp[Classic WebData XslTransform.Transform7 Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XslTransform.Transform7 Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XslTransform.Transform7 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/VB/source.vb#1)]  
  
 O exemplo usa os dois arquivos de entrada a seguir.  
  
 `books.xml`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/books.xml#2)]  
  
 `output.xsl`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/output.xsl#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">O recurso carregado não é uma folha de estilos válida.</exception>
        <exception cref="T:System.Security.SecurityException">A folha de estilos contém scripts inseridos e o chamador não tem a permissão <see langword="UnmanagedCode" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XmlReader stylesheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XmlReader stylesheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XmlReader ^ stylesheet);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XmlReader -&gt; unit" Usage="xslTransform.Load stylesheet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass evidence to Load() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="stylesheet">Um objeto <see cref="T:System.Xml.XmlReader" /> que contém a folha de estilos XSLT.</param>
        <summary>Carrega a folha de estilos XSLT contida no <see cref="T:System.Xml.XmlReader" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  O <xref:System.Xml.Xsl.XslTransform> classe está obsoleta no .NET Framework versão 2.0. O <xref:System.Xml.Xsl.XslCompiledTransform> classe é o novo processador XSLT. Para obter mais informações, consulte [usando a classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) e [migrando da classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> dá suporte à sintaxe XSLT 1,0. A folha de estilos XSLT deve incluir a declaração de namespace `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 Esse método carrega a folha de estilos XSLT, incluindo as folhas de estilo referenciadas nos `xsl:include` e `xsl:import` elementos. Recursos externos são resolvidos usando um <xref:System.Xml.XmlUrlResolver> sem credenciais do usuário. Se a folha de estilos estiverem localizadas em um recurso de rede que requer autenticação, use a sobrecarga que utiliza um <xref:System.Xml.XmlResolver> como um de seus argumentos e especificar um <xref:System.Xml.XmlResolver> com as credenciais necessárias.  
  
 A folha de estilos carrega a partir do nó atual do <xref:System.Xml.XmlReader> por meio de todos os seus filhos. Isso permite que você use uma parte de um documento como a folha de estilos. Depois que o <xref:System.Xml.Xsl.XslTransform.Load%2A> método retorna, o <xref:System.Xml.XmlReader> é posicionado no nó seguir após o término da folha de estilos. Se o final do documento é alcançada, <xref:System.Xml.XmlReader> está localizado no final do arquivo (EOF).  
  
 Se a folha de estilos contém entidades, você deve especificar um <xref:System.Xml.XmlReader> que pode resolver entidades (<xref:System.Xml.XmlReader.CanResolveEntity%2A?displayProperty=nameWithType> retorna `true`). Nesse caso, um <xref:System.Xml.XmlValidatingReader> pode ser usado.  
  
 Se a folha de estilos contém scripts inseridos, o script é compilado em um assembly. O assembly tem confiança total. A prática recomendada é fornecer a evidência usando o <xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XmlReader%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29> método.
  
> [!NOTE]
>  Se o chamador não tem `UnmanagedCode` permissão, o script inserido não é compilado e um <xref:System.Security.SecurityException> é gerada. Consulte <xref:System.Security.Permissions.SecurityPermission> e <xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType> para obter mais informações.  
  
   
  
## Examples  
 O exemplo a seguir transforma um arquivo XML a classificação de todos os livros por título.  
  
 [!code-cpp[XslTransform.Load3#1](~/samples/snippets/cpp/VS_Snippets_Data/XslTransform.Load3/CPP/trans3.cpp#1)]
 [!code-csharp[XslTransform.Load3#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Load3/CS/trans3.cs#1)]
 [!code-vb[XslTransform.Load3#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Load3/VB/trans3.vb#1)]  
  
 O exemplo usa os seguintes arquivos de dados como entrada.  
  
 `books.xml`  
  
 [!code-xml[XslTransform.Load3#2](~/samples/snippets/xml/VS_Snippets_Data/XslTransform.Load3/XML/books.xml#2)]  
  
 `titles.xsl`  
  
 [!code-xml[XslTransform.Load3#3](~/samples/snippets/xml/VS_Snippets_Data/XslTransform.Load3/XML/titles.xsl#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">O nó atual não está em conformidade com uma folha de estilos válida.</exception>
        <exception cref="T:System.Security.SecurityException">A folha de estilos contém scripts inseridos e o chamador não tem permissão de <see langword="UnmanagedCode" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.IXPathNavigable stylesheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.IXPathNavigable stylesheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As IXPathNavigable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::IXPathNavigable ^ stylesheet);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XPath.IXPathNavigable -&gt; unit" Usage="xslTransform.Load stylesheet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass evidence to Load() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.IXPathNavigable" />
      </Parameters>
      <Docs>
        <param name="stylesheet">Um objeto implementando a interface <see cref="T:System.Xml.XPath.IXPathNavigable" />. No .NET Framework, isso pode ser um <see cref="T:System.Xml.XmlNode" /> (normalmente um <see cref="T:System.Xml.XmlDocument" />) ou um <see cref="T:System.Xml.XPath.XPathDocument" /> que contém a folha de estilos XSLT.</param>
        <summary>Carrega a folha de estilos XSLT contida no <see cref="T:System.Xml.XPath.IXPathNavigable" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  O <xref:System.Xml.Xsl.XslTransform> classe está obsoleta no .NET Framework versão 2.0. O <xref:System.Xml.Xsl.XslCompiledTransform> classe é o novo processador XSLT. Para obter mais informações, consulte [usando a classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) e [migrando da classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> dá suporte à sintaxe XSLT 1,0. A folha de estilos XSLT deve incluir a declaração de namespace `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 Esse método carrega a folha de estilos XSLT, incluindo as folhas de estilo referenciadas nos `xsl:include` e `xsl:import` elementos. Recursos externos são resolvidos usando um <xref:System.Xml.XmlUrlResolver> sem credenciais do usuário. Se a folha de estilos estiverem localizadas em um recurso de rede que requer autenticação, use a sobrecarga que utiliza um <xref:System.Xml.XmlResolver> como um de seus argumentos e especificar um <xref:System.Xml.XmlResolver> com as credenciais necessárias.  
  
 Se a folha de estilos contém scripts inseridos, o script é compilado em um assembly. O assembly tem confiança total. A prática recomendada é fornecer a evidência usando o <xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XPath.IXPathNavigable%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29> método.
  
> [!NOTE]
>  Se o chamador não tem `UnmanagedCode` permissão, o script inserido não é compilado e um <xref:System.Security.SecurityException> é gerada. Consulte <xref:System.Security.Permissions.SecurityPermission> e <xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType> para obter mais informações.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">O recurso carregado não é uma folha de estilos válida.</exception>
        <exception cref="T:System.Security.SecurityException">A folha de estilos contém scripts inseridos e o chamador não tem permissão de <see langword="UnmanagedCode" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.XPathNavigator stylesheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.XPathNavigator stylesheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As XPathNavigator)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::XPathNavigator ^ stylesheet);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XPath.XPathNavigator -&gt; unit" Usage="xslTransform.Load stylesheet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass evidence to Load() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.XPathNavigator" />
      </Parameters>
      <Docs>
        <param name="stylesheet">Um objeto <see cref="T:System.Xml.XPath.XPathNavigator" /> que contém a folha de estilos XSLT.</param>
        <summary>Carrega a folha de estilos XSLT contida no <see cref="T:System.Xml.XPath.XPathNavigator" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  O <xref:System.Xml.Xsl.XslTransform> classe está obsoleta no .NET Framework versão 2.0. O <xref:System.Xml.Xsl.XslCompiledTransform> classe é o novo processador XSLT. Para obter mais informações, consulte [usando a classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) e [migrando da classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> dá suporte à sintaxe XSLT 1,0. A folha de estilos XSLT deve incluir a declaração de namespace `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 Esse método carrega a folha de estilos XSLT, incluindo as folhas de estilo referenciadas nos `xsl:include` e `xsl:import` elementos. Recursos externos são resolvidos usando um <xref:System.Xml.XmlUrlResolver> sem credenciais do usuário. Se a folha de estilos estiverem localizadas em um recurso de rede que requer autenticação, use a sobrecarga que utiliza um <xref:System.Xml.XmlResolver> como um de seus argumentos e especificar um <xref:System.Xml.XmlResolver> com as credenciais necessárias.  
  
 A folha de estilos é carregada a partir a posição atual do <xref:System.Xml.XPath.XPathNavigator>. Para usar apenas uma parte do documento carregado como a folha de estilos, navegue até o nó correspondente ao início da folha de estilos. Após o <xref:System.Xml.Xsl.XslTransform.Load%2A> método retorna, o <xref:System.Xml.XPath.XPathNavigator> está posicionado no início da folha de estilos (no `xsl:style sheet` nó).  
  
 Se a folha de estilos contém scripts inseridos, o script é compilado em um assembly. O assembly tem confiança total. A prática recomendada é fornecer a evidência usando o <xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XPath.XPathNavigator%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29> método.
  
> [!NOTE]
>  Se o chamador não tem `UnmanagedCode` permissão, o script inserido não é compilado e um <xref:System.Security.SecurityException> é gerada. Consulte <xref:System.Security.Permissions.SecurityPermission> e <xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType> para obter mais informações.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">O nó atual não está em conformidade com uma folha de estilos válida.</exception>
        <exception cref="T:System.Security.SecurityException">A folha de estilos contém scripts inseridos e o chamador não tem permissão de <see langword="UnmanagedCode" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (string url, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(string url, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.String,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (url As String, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::String ^ url, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Load : string * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Load (url, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="url">A URL que especifica a folha de estilos XSLT a ser carregada.</param>
        <param name="resolver">O <see cref="T:System.Xml.XmlResolver" /> a ser usado para carregar a folha de estilos e qualquer folha de estilos referenciada nos elementos <c>xsl:import</c> e <c>xsl:include</c>.  
  
Se for <see langword="null" />, um <see cref="T:System.Xml.XmlUrlResolver" /> padrão sem nenhuma credencial de usuário será usado para abrir a folha de estilos. O <see cref="T:System.Xml.XmlUrlResolver" /> padrão não é usado para resolver nenhum recurso externo na folha de estilos, de modo que os elementos <c>xsl:import</c> e <c>xsl:include</c> não são resolvidos.  
  
O <see cref="T:System.Xml.XmlResolver" /> não é armazenado em cache após o método <see cref="M:System.Xml.Xsl.XslTransform.Load(System.String,System.Xml.XmlResolver)" /> ser concluído.</param>
        <summary>Carrega a folha de estilos XSLT especificada por uma URL.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  O <xref:System.Xml.Xsl.XslTransform> classe está obsoleta no .NET Framework versão 2.0. O <xref:System.Xml.Xsl.XslCompiledTransform> classe é o novo processador XSLT. Para obter mais informações, consulte [usando a classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) e [migrando da classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> dá suporte à sintaxe XSLT 1,0. A folha de estilos XSLT deve incluir a declaração de namespace `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 Se a folha de estilos contém scripts inseridos, o script é compilado em um assembly. O URI de folha de estilos é usado para criar a evidência, o que é aplicada ao assembly.
  
> [!NOTE]
>  Se o chamador não tem `UnmanagedCode` permissão, o script inserido não é compilado e um <xref:System.Security.SecurityException> é gerada. Consulte <xref:System.Security.Permissions.SecurityPermission> e <xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType> para obter mais informações.  
  
   
  
## Examples  
 O exemplo a seguir transforma um documento XML em um documento HTML. O exemplo carrega uma folha de estilos XSLT que contém um `xsl:include` referenciando outra folha de estilos do elemento. Uma <xref:System.Xml.XmlUrlResolver> é passado para o <xref:System.Xml.Xsl.XslTransform.Load%2A> método que define as credenciais necessárias para acessar o recurso de rede para a folha de estilo embutidas.  
  
 [!code-csharp[XslTransform.Load2#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Load2/CS/trans2.cs#1)]
 [!code-vb[XslTransform.Load2#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Load2/VB/trans2.vb#1)]  
  
 O exemplo usa os seguintes arquivos de dados como entrada.  
  
 `books.xml`  
  
 [!code-xml[XslTransform.Load2#2](~/samples/snippets/xml/VS_Snippets_Data/XslTransform.Load2/XML/books.xml#2)]  
  
 `sort.xsl`  
  
 [!code-xml[XslTransform.Load2#3](~/samples/snippets/xml/VS_Snippets_Data/XslTransform.Load2/XML/sort.xsl#3)]  
  
 `includefile.xsl`  
  
 [!code-xml[XslTransform.Load2#4](~/samples/snippets/xml/VS_Snippets_Data/XslTransform.Load2/XML/includefile.xsl#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">O recurso carregado não é uma folha de estilos válida.</exception>
        <exception cref="T:System.Security.SecurityException">A folha de estilos contém scripts inseridos e o chamador não tem a permissão <see langword="UnmanagedCode" />.</exception>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XmlReader stylesheet, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XmlReader stylesheet, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As XmlReader, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XmlReader ^ stylesheet, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XmlReader * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Load (stylesheet, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass evidence to Load() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XmlReader" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="stylesheet">Um objeto <see cref="T:System.Xml.XmlReader" /> que contém a folha de estilos XSLT.</param>
        <param name="resolver">O <see cref="T:System.Xml.XmlResolver" /> usado para carregar as folhas de estilos referenciadas nos elementos <c>xsl:import</c> e <c>xsl:include</c>. Se for <see langword="null" />, os recursos externos não serão resolvidos.  
  
O <see cref="T:System.Xml.XmlResolver" /> não é armazenado em cache após o método <see cref="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver)" /> ser concluído.</param>
        <summary>Carrega a folha de estilos XSLT contida no <see cref="T:System.Xml.XmlReader" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  O <xref:System.Xml.Xsl.XslTransform> classe está obsoleta no .NET Framework versão 2.0. O <xref:System.Xml.Xsl.XslCompiledTransform> classe é o novo processador XSLT. Para obter mais informações, consulte [usando a classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) e [migrando da classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> dá suporte à sintaxe XSLT 1,0. A folha de estilos XSLT deve incluir a declaração de namespace `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 Esse método carrega a folha de estilos XSLT, incluindo as folhas de estilo referenciadas nos `xsl:include` e `xsl:import` elementos. A folha de estilos carrega a partir do nó atual do <xref:System.Xml.XmlReader> por meio de todos os seus filhos. Isso permite que você use uma parte de um documento como a folha de estilos.  
  
 Depois que o <xref:System.Xml.Xsl.XslTransform.Load%2A> método retorna, o <xref:System.Xml.XmlReader> é posicionado no nó seguir após o término da folha de estilos. Se o final do documento é alcançada, <xref:System.Xml.XmlReader> está localizado no final do arquivo (EOF).  
  
 Se a folha de estilos contém entidades, você deve especificar um <xref:System.Xml.XmlReader> que pode resolver entidades (<xref:System.Xml.XmlReader.CanResolveEntity%2A?displayProperty=nameWithType> retorna `true`). Nesse caso, um <xref:System.Xml.XmlValidatingReader> pode ser usado.  
  
 Se a folha de estilos contém scripts inseridos, o script é compilado em um assembly. O assembly tem confiança total. A prática recomendada é fornecer a evidência usando o <xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XmlReader%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29> método.
  
> [!NOTE]
>  Se o chamador não tem `UnmanagedCode` permissão, o script inserido não é compilado e um <xref:System.Security.SecurityException> é gerada. Consulte <xref:System.Security.Permissions.SecurityPermission> e <xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType> para obter mais informações.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">O nó atual não está em conformidade com uma folha de estilos válida.</exception>
        <exception cref="T:System.Security.SecurityException">A folha de estilos contém scripts inseridos e o chamador não tem permissão de <see langword="UnmanagedCode" />.</exception>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.IXPathNavigable stylesheet, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.IXPathNavigable stylesheet, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As IXPathNavigable, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::IXPathNavigable ^ stylesheet, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XPath.IXPathNavigable * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Load (stylesheet, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass evidence to Load() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="stylesheet">Um objeto implementando a interface <see cref="T:System.Xml.XPath.IXPathNavigable" />. No .NET Framework, isso pode ser um <see cref="T:System.Xml.XmlNode" /> (normalmente um <see cref="T:System.Xml.XmlDocument" />) ou um <see cref="T:System.Xml.XPath.XPathDocument" /> que contém a folha de estilos XSLT.</param>
        <param name="resolver">O <see cref="T:System.Xml.XmlResolver" /> usado para carregar as folhas de estilos referenciadas nos elementos <c>xsl:import</c> e <c>xsl:include</c>. Se for <see langword="null" />, os recursos externos não serão resolvidos.  
  
O <see cref="T:System.Xml.XmlResolver" /> não é armazenado em cache após o método <see cref="Overload:System.Xml.Xsl.XslTransform.Load" /> ser concluído.</param>
        <summary>Carrega a folha de estilos XSLT contida no <see cref="T:System.Xml.XPath.IXPathNavigable" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  O <xref:System.Xml.Xsl.XslTransform> classe está obsoleta no .NET Framework versão 2.0. O <xref:System.Xml.Xsl.XslCompiledTransform> classe é o novo processador XSLT. Para obter mais informações, consulte [usando a classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) e [migrando da classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> dá suporte à sintaxe XSLT 1,0. A folha de estilos XSLT deve incluir a declaração de namespace `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 Se a folha de estilos contém scripts inseridos, o script é compilado em um assembly. O assembly tem confiança total. A prática recomendada é fornecer a evidência usando o <xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XPath.IXPathNavigable%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29> método.
  
> [!NOTE]
>  Se o chamador não tem `UnmanagedCode` permissão, o script inserido não é compilado e um <xref:System.Security.SecurityException> é gerada. Consulte <xref:System.Security.Permissions.SecurityPermission> e <xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType> para obter mais informações.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">O recurso carregado não é uma folha de estilos válida.</exception>
        <exception cref="T:System.Security.SecurityException">A folha de estilos contém scripts inseridos e o chamador não tem permissão de <see langword="UnmanagedCode" />.</exception>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.XPathNavigator stylesheet, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.XPathNavigator stylesheet, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As XPathNavigator, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::XPathNavigator ^ stylesheet, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XPath.XPathNavigator * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Load (stylesheet, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass evidence to Load() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="stylesheet">Um objeto <see cref="T:System.Xml.XPath.XPathNavigator" /> que contém a folha de estilos XSLT.</param>
        <param name="resolver">O <see cref="T:System.Xml.XmlResolver" /> usado para carregar as folhas de estilos referenciadas nos elementos <c>xsl:import</c> e <c>xsl:include</c>. Se for <see langword="null" />, os recursos externos não serão resolvidos.  
  
O <see cref="T:System.Xml.XmlResolver" /> não é armazenado em cache após o método <see cref="Overload:System.Xml.Xsl.XslTransform.Load" /> ser concluído.</param>
        <summary>Carrega a folha de estilos XSLT contida no <see cref="T:System.Xml.XPath.XPathNavigator" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  O <xref:System.Xml.Xsl.XslTransform> classe está obsoleta no .NET Framework versão 2.0. O <xref:System.Xml.Xsl.XslCompiledTransform> classe é o novo processador XSLT. Para obter mais informações, consulte [usando a classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) e [migrando da classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> dá suporte à sintaxe XSLT 1,0. A folha de estilos XSLT deve incluir a declaração de namespace `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 A folha de estilos é carregada a partir a posição atual do <xref:System.Xml.XPath.XPathNavigator>. Para usar uma parte do documento carregado como a folha de estilos, navegue até o nó correspondente ao início da folha de estilos. Após o <xref:System.Xml.Xsl.XslTransform.Load%2A> método retorna, o <xref:System.Xml.XPath.XPathNavigator> está posicionado no início da folha de estilos (no `xsl:style sheet` nó).  
  
 Se a folha de estilos contém scripts inseridos, o script é compilado em um assembly. O assembly tem confiança total. A prática recomendada é fornecer a evidência usando o <xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XPath.XPathNavigator%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29>.
  
> [!NOTE]
>  Se o chamador não tem `UnmanagedCode` permissão, o script inserido não é compilado e um <xref:System.Security.SecurityException> é gerada. Consulte <xref:System.Security.Permissions.SecurityPermission> e <xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType> para obter mais informações.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">O nó atual não está em conformidade com uma folha de estilos válida.</exception>
        <exception cref="T:System.Security.SecurityException">A folha de estilos contém scripts inseridos e o chamador não tem permissão de <see langword="UnmanagedCode" />.</exception>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XmlReader stylesheet, System.Xml.XmlResolver resolver, System.Security.Policy.Evidence evidence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XmlReader stylesheet, class System.Xml.XmlResolver resolver, class System.Security.Policy.Evidence evidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver,System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XmlReader ^ stylesheet, System::Xml::XmlResolver ^ resolver, System::Security::Policy::Evidence ^ evidence);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XmlReader * System.Xml.XmlResolver * System.Security.Policy.Evidence -&gt; unit" Usage="xslTransform.Load (stylesheet, resolver, evidence)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XmlReader" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="stylesheet">Um objeto <see cref="T:System.Xml.XmlReader" /> que contém a folha de estilos a ser carregada.</param>
        <param name="resolver">O <see cref="T:System.Xml.XmlResolver" /> usado para carregar as folhas de estilos referenciadas nos elementos <c>xsl:import</c> e <c>xsl:include</c>. Se for <see langword="null" />, os recursos externos não serão resolvidos.  
  
O <see cref="T:System.Xml.XmlResolver" /> não é armazenado em cache após o método <see cref="Overload:System.Xml.Xsl.XslTransform.Load" /> ser concluído.</param>
        <param name="evidence">O <see cref="T:System.Security.Policy.Evidence" /> definido no assembly gerado para o bloco de script na folha de estilos XSLT.  
  
Se for <see langword="null" />, os blocos de script não serão processados, a função XSLT <c>document()</c> não terá suporte e objetos de extensão privilegiados não serão permitidos.  
  
O chamador deve ter a permissão <see langword="ControlEvidence" /> para fornecer a evidência do assembly de script. Chamadores de confiança parcial podem definir esse parâmetro como <see langword="null" />.</param>
        <summary>Carrega a folha de estilos XSLT contida no <see cref="T:System.Xml.XmlReader" />. Esse método permite que você limite as permissões da folha de estilos especificando a evidência.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  O <xref:System.Xml.Xsl.XslTransform> classe está obsoleta no .NET Framework versão 2.0. O <xref:System.Xml.Xsl.XslCompiledTransform> classe é o novo processador XSLT. Para obter mais informações, consulte [usando a classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) e [migrando da classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> dá suporte à sintaxe XSLT 1,0. A folha de estilos XSLT deve incluir a declaração de namespace `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 Esse método carrega a folha de estilos XSLT, incluindo as folhas de estilo referenciadas nos `xsl:include` e `xsl:import` elementos. A folha de estilos carrega a partir do nó atual do <xref:System.Xml.XmlReader> por meio de todos os seus filhos. Isso permite que você use uma parte de um documento como a folha de estilos.  
  
 Depois que o <xref:System.Xml.Xsl.XslTransform.Load%2A> método retorna, o <xref:System.Xml.XmlReader> é posicionado no nó seguir após o término da folha de estilos. Se o final do documento é alcançada, <xref:System.Xml.XmlReader> está localizado no final do arquivo (EOF).  
  
 Se a folha de estilos contém entidades, você deve especificar um <xref:System.Xml.XmlReader> que pode resolver entidades (<xref:System.Xml.XmlReader.CanResolveEntity%2A?displayProperty=nameWithType> retorna `true`). Nesse caso, um <xref:System.Xml.XmlValidatingReader> pode ser usado.  
  

  
 Há diferentes maneiras de fornecer a evidência. A tabela a seguir descreve que tipo de evidências de cenários comuns de usuário.  
  
|Cenário|Tipo de evidências|  
|--------------|---------------------------------|  
|A folha de estilos XSLT é independente, ou proveniente de uma base de código que você confia.|Use a evidência do assembly.<br /><br /> <pre><code class="lang-csharp">XsltTransform xslt = new XslTransform(); &#13;&#10;xslt.Load(xslReader, resolver, this.GetType().Assembly.Evidence);</code></pre>|  
|A folha de estilos XSLT vem de uma fonte externa. A origem de origem é conhecida e há uma URL verificável.|Crie a evidência usando a URL.<br /><br /> <pre><code class="lang-csharp">XsltTransform xslt = new XslTransform();&#13;&#10; Evidence evidence = XmlSecureResolver.CreateEvidenceForUrl(stylesheetURL); &#13;&#10;xslt.Load(xslReader,resolver,evidence);</code></pre>|  
|A folha de estilos XSLT vem de uma fonte externa. A origem de origem não é conhecida.|Defina a evidência a `null`. Blocos de script não são processados, a função XSLT `document()` não é suportada, e objetos privilegiados de extensão não é permitida.<br /><br /> Além disso, você também pode definir as `resolver` parâmetro para `null`. Isso garante que `xsl:import` e `xsl:include` elementos não são processados.|  
|A folha de estilos XSLT vem de uma fonte externa. A origem de origem não é conhecido, mas você precisar de suporte de script.|Evidência de solicitação do chamador. A API do chamador deve fornecer uma maneira de fornecer evidências, normalmente o <xref:System.Security.Policy.Evidence> classe.|  
  
     
## Examples  
 O exemplo a seguir executa uma transformação XSLT em que `xsltReader` é um <xref:System.Xml.XmlReader> que contém uma folha de estilos e `secureURL` é uma URL confiável que pode ser usada para criar <xref:System.Security.Policy.Evidence>. O <xref:System.Xml.XmlSecureResolver.CreateEvidenceForUrl%2A?displayProperty=nameWithType> método é usado para criar <xref:System.Security.Policy.Evidence> que é aplicado à folha de estilos.  
  
 [!code-cpp[XslTransform.Load4#1](~/samples/snippets/cpp/VS_Snippets_Data/XslTransform.Load4/CPP/trans_ev.cpp#1)]
 [!code-csharp[XslTransform.Load4#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Load4/CS/trans_ev.cs#1)]
 [!code-vb[XslTransform.Load4#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Load4/VB/trans_ev.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">O nó atual não está em conformidade com uma folha de estilos válida.</exception>
        <exception cref="T:System.Security.SecurityException">A folha de estilos referenciada requer uma funcionalidade que não é permitida pela evidência fornecida.  
  
O chamador tenta fornecer a evidência e não tem a permissão <see langword="ControlEvidence" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">para fornecer a evidência. Enumeração associada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></permission>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Security.SecurityZone" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="M:System.Xml.XmlSecureResolver.CreateEvidenceForUrl(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.IXPathNavigable stylesheet, System.Xml.XmlResolver resolver, System.Security.Policy.Evidence evidence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.IXPathNavigable stylesheet, class System.Xml.XmlResolver resolver, class System.Security.Policy.Evidence evidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.XmlResolver,System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::IXPathNavigable ^ stylesheet, System::Xml::XmlResolver ^ resolver, System::Security::Policy::Evidence ^ evidence);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XPath.IXPathNavigable * System.Xml.XmlResolver * System.Security.Policy.Evidence -&gt; unit" Usage="xslTransform.Load (stylesheet, resolver, evidence)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.IXPathNavigable" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="stylesheet">Um objeto implementando a interface <see cref="T:System.Xml.XPath.IXPathNavigable" />. No .NET Framework, isso pode ser um <see cref="T:System.Xml.XmlNode" /> (normalmente um <see cref="T:System.Xml.XmlDocument" />) ou um <see cref="T:System.Xml.XPath.XPathDocument" /> que contém a folha de estilos XSLT.</param>
        <param name="resolver">O <see cref="T:System.Xml.XmlResolver" /> usado para carregar as folhas de estilos referenciadas nos elementos <c>xsl:import</c> e <c>xsl:include</c>. Se for <see langword="null" />, os recursos externos não serão resolvidos.  
  
O <see cref="T:System.Xml.XmlResolver" /> não é armazenado em cache após o método <see cref="Overload:System.Xml.Xsl.XslTransform.Load" /> ser concluído.</param>
        <param name="evidence">O <see cref="T:System.Security.Policy.Evidence" /> definido no assembly gerado para o bloco de script na folha de estilos XSLT.  
  
Se for <see langword="null" />, os blocos de script não serão processados, a função XSLT <c>document()</c> não terá suporte e objetos de extensão privilegiados não serão permitidos.  
  
O chamador deve ter a permissão <see langword="ControlEvidence" /> para fornecer a evidência do assembly de script. Chamadores de confiança parcial podem definir esse parâmetro como <see langword="null" />.</param>
        <summary>Carrega a folha de estilos XSLT contida no <see cref="T:System.Xml.XPath.IXPathNavigable" />. Esse método permite que você limite as permissões da folha de estilos especificando a evidência.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  O <xref:System.Xml.Xsl.XslTransform> classe está obsoleta no .NET Framework versão 2.0. O <xref:System.Xml.Xsl.XslCompiledTransform> classe é o novo processador XSLT. Para obter mais informações, consulte [usando a classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) e [migrando da classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> dá suporte à sintaxe XSLT 1,0. A folha de estilos XSLT deve incluir a declaração de namespace `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  

  
 Há diferentes maneiras de fornecer a evidência. A tabela a seguir descreve que tipo de evidências de cenários comuns de usuário.  
  
|Cenário|Tipo de evidências|  
|--------------|---------------------------------|  
|A folha de estilos XSLT é independente, ou proveniente de uma base de código que você confia.|Use a evidência do assembly.<br /><br /> <pre><code class="lang-csharp">XsltTransform xslt = new XslTransform(); &#13;&#10;xslt.Load(style sheet, resolver, this.GetType().Assembly.Evidence);</code></pre>|  
|A folha de estilos XSLT vem de uma fonte externa. A origem de origem é conhecida e há uma URL verificável.|Crie a evidência usando a URL.<br /><br /> <pre><code class="lang-csharp">XsltTransform xslt = new XslTransform(); &#13;&#10;Evidence evidence = XmlSecureResolver.CreateEvidenceForUrl(style sheetURL); &#13;&#10;xslt.Load(style sheet,resolver,evidence);</code></pre>|  
|A folha de estilos XSLT vem de uma fonte externa. A origem de origem não é conhecida.|Defina a evidência a `null`. Blocos de script não são processados, a função XSLT `document()` não é suportada, e objetos privilegiados de extensão não é permitida.<br /><br /> Além disso, você também pode definir as `resolver` parâmetro para `null`. Isso garante que `xsl:import` e `xsl:include` elementos não são processados.|  
|A folha de estilos XSLT vem de uma fonte externa. A origem de origem não é conhecido, mas você precisar de suporte de script.|Evidência de solicitação do chamador. A API do chamador deve fornecer uma maneira de fornecer evidências, normalmente o <xref:System.Security.Policy.Evidence> classe.|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">O recurso carregado não é uma folha de estilos válida.</exception>
        <exception cref="T:System.Security.SecurityException">A folha de estilos referenciada requer uma funcionalidade que não é permitida pela evidência fornecida.  
  
O chamador tenta fornecer a evidência e não tem a permissão <see langword="ControlEvidence" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">para fornecer a evidência. Enumeração associada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></permission>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Security.SecurityZone" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="M:System.Xml.XmlSecureResolver.CreateEvidenceForUrl(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.XPathNavigator stylesheet, System.Xml.XmlResolver resolver, System.Security.Policy.Evidence evidence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.XPathNavigator stylesheet, class System.Xml.XmlResolver resolver, class System.Security.Policy.Evidence evidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator,System.Xml.XmlResolver,System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::XPathNavigator ^ stylesheet, System::Xml::XmlResolver ^ resolver, System::Security::Policy::Evidence ^ evidence);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XPath.XPathNavigator * System.Xml.XmlResolver * System.Security.Policy.Evidence -&gt; unit" Usage="xslTransform.Load (stylesheet, resolver, evidence)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.XPathNavigator" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="stylesheet">Um objeto <see cref="T:System.Xml.XPath.XPathNavigator" /> que contém a folha de estilos a ser carregada.</param>
        <param name="resolver">O <see cref="T:System.Xml.XmlResolver" /> usado para carregar as folhas de estilos referenciadas nos elementos <c>xsl:import</c> e <c>xsl:include</c>. Se for <see langword="null" />, os recursos externos não serão resolvidos.  
  
O <see cref="T:System.Xml.XmlResolver" /> não é armazenado em cache após o método <see cref="Overload:System.Xml.Xsl.XslTransform.Load" /> ser concluído.</param>
        <param name="evidence">O <see cref="T:System.Security.Policy.Evidence" /> definido no assembly gerado para o bloco de script na folha de estilos XSLT.  
  
Se for <see langword="null" />, os blocos de script não serão processados, a função XSLT <c>document()</c> não terá suporte e objetos de extensão privilegiados não serão permitidos.  
  
O chamador deve ter a permissão <see langword="ControlEvidence" /> para fornecer a evidência do assembly de script. Chamadores de confiança parcial podem definir esse parâmetro como <see langword="null" />.</param>
        <summary>Carrega a folha de estilos XSLT contida no <see cref="T:System.Xml.XPath.XPathNavigator" />. Esse método permite que você limite as permissões da folha de estilos especificando a evidência.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  O <xref:System.Xml.Xsl.XslTransform> classe está obsoleta no .NET Framework versão 2.0. O <xref:System.Xml.Xsl.XslCompiledTransform> classe é o novo processador XSLT. Para obter mais informações, consulte [usando a classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) e [migrando da classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> dá suporte à sintaxe XSLT 1,0. A folha de estilos XSLT deve incluir a declaração de namespace `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 A folha de estilos é carregada a partir a posição atual do <xref:System.Xml.XPath.XPathNavigator>. Para usar uma parte do documento carregado como a folha de estilos, navegue até o nó correspondente ao início da folha de estilos. Após o <xref:System.Xml.Xsl.XslTransform.Load%2A> método retorna, o <xref:System.Xml.XPath.XPathNavigator> está posicionado no início da folha de estilos (no `xsl:style sheet` nó).  
  

  
 Há diferentes maneiras de fornecer a evidência. A tabela a seguir descreve que tipo de evidências de cenários comuns de usuário.  
  
|Cenário|Tipo de evidências|  
|--------------|---------------------------------|  
|A folha de estilos XSLT é independente, ou proveniente de uma base de código que você confia.|Use a evidência do assembly.<br /><br /> <pre><code class="lang-csharp">XsltTransform xslt = new XslTransform(); &#13;&#10;xslt.Load(xslNav, resolver, this.GetType().Assembly.Evidence);</code></pre>|  
|A folha de estilos XSLT vem de uma fonte externa. A origem de origem é conhecida e há uma URL verificável.|Crie a evidência usando a URL.<br /><br /> <pre><code class="lang-csharp">XsltTransform xslt = new XslTransform(); &#13;&#10;Evidence evidence = XmlSecureResolver.CreateEvidenceForUrl(style sheetURL); &#13;&#10;xslt.Load(xslNav,resolver,evidence);</code></pre>|  
|A folha de estilos XSLT vem de uma fonte externa. A origem de origem não é conhecida.|Defina a evidência a `null`. Blocos de script não são processados, a função XSLT `document()` não é suportada, e objetos privilegiados de extensão não é permitida.<br /><br /> Além disso, você também pode definir as `resolver` parâmetro para `null`. Isso garante que `xsl:import` e `xsl:include` elementos não são processados.|  
|A folha de estilos XSLT vem de uma fonte externa. A origem de origem não é conhecido, mas você precisar de suporte de script.|Evidência de solicitação do chamador. A API do chamador deve fornecer uma maneira de fornecer evidências, normalmente o `Evidence` classe.|  
  
   
  
## Examples  
 O exemplo a seguir executa uma transformação XSLT usando uma folha de estilos de uma fonte externa. Porque a folha de estilos vem de uma fonte não confiável, o `resolver` e `evidence` parâmetros são definidos como `null`.  
 
 [!code-csharp[XslTransform.Load5#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Load5/CS/trans_noev.cs#1)]
 [!code-vb[XslTransform.Load5#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Load5/VB/trans_noev.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">O nó atual não está em conformidade com uma folha de estilos válida.</exception>
        <exception cref="T:System.Security.SecurityException">A folha de estilos referenciada requer uma funcionalidade que não é permitida pela evidência fornecida.  
  
O chamador tenta fornecer a evidência e não tem a permissão <see langword="ControlEvidence" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">para fornecer a evidência. Enumeração associada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></permission>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Security.SecurityZone" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="M:System.Xml.XmlSecureResolver.CreateEvidenceForUrl(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Transform">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Transforma os dados XML usando a folha de estilos XSLT carregada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  O <xref:System.Xml.Xsl.XslTransform> classe está obsoleta no .NET Framework versão 2.0. O <xref:System.Xml.Xsl.XslCompiledTransform> classe é o novo processador XSLT. Para obter mais informações, consulte [usando a classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) e [migrando da classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputfile, string outputfile);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputfile, string outputfile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputfile As String, outputfile As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputfile, System::String ^ outputfile);" />
      <MemberSignature Language="F#" Value="member this.Transform : string * string -&gt; unit" Usage="xslTransform.Transform (inputfile, outputfile)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass XmlResolver to Transform() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputfile" Type="System.String" />
        <Parameter Name="outputfile" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputfile">A URL do documento de origem a ser transformado.</param>
        <param name="outputfile">O URL do arquivo de saída.</param>
        <summary>Transforma os dados XML no arquivo de entrada e gera o resultado para um arquivo de saída.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  O <xref:System.Xml.Xsl.XslTransform> classe está obsoleta no .NET Framework versão 2.0. O <xref:System.Xml.Xsl.XslCompiledTransform> classe é o novo processador XSLT. Para obter mais informações, consulte [usando a classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) e [migrando da classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> dá suporte à sintaxe XSLT 1,0. A folha de estilos XSLT deve incluir a declaração de namespace `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
> [!NOTE]
>  Esse método é obsoleto na versão 1.1 do .NET Framework. A configuração do <xref:System.Xml.Xsl.XslTransform.XmlResolver%2A> propriedade determina como o XSLT `document()` função é resolvida. A prática recomendada é usar o <xref:System.Xml.Xsl.XslTransform.Transform%2A> método que usa um <xref:System.Xml.XmlResolver> do objeto como um dos seus argumentos.  
  
   
  
## Examples  
 Transforma o exemplo a seguir a `books.xml` de arquivos usando o `output.xsl` folha de estilos e gera os resultados para o `books.html` arquivo.  
  
 [!code-cpp[XslTransform.Transform3#1](~/samples/snippets/cpp/VS_Snippets_Data/xsltransform.transform3/CPP/trans_snip2.cpp#1)]
 [!code-csharp[XslTransform.Transform3#1](~/samples/snippets/csharp/VS_Snippets_Data/xsltransform.transform3/CS/trans_snip2.cs#1)]
 [!code-vb[XslTransform.Transform3#1](~/samples/snippets/visualbasic/VS_Snippets_Data/xsltransform.transform3/VB/trans_snip2.vb#1)]  
  
 O exemplo usa os dois arquivos de entrada a seguir:  
  
 `books.xml`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/books.xml#2)]  
  
 `output.xsl`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/output.xsl#3)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">Implementação de comportamentos arbitrários na classe XslTransform</related>
        <related type="Article" href="https://msdn.microsoft.com/library/8e149d32-4b2f-493f-9e4b-d0d93475acde">Saída de um XslTransform</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReader Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList)" />
      <MemberSignature Language="VB.NET" Value="Public Function Transform (input As IXPathNavigable, args As XsltArgumentList) As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlReader ^ Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList -&gt; System.Xml.XmlReader" Usage="xslTransform.Transform (input, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass XmlResolver to Transform() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
      </Parameters>
      <Docs>
        <param name="input">Um objeto implementando a interface <see cref="T:System.Xml.XPath.IXPathNavigable" />. No .NET Framework, isso pode ser um <see cref="T:System.Xml.XmlNode" /> (normalmente um <see cref="T:System.Xml.XmlDocument" />) ou um <see cref="T:System.Xml.XPath.XPathDocument" /> que contém os dados a serem transformados.</param>
        <param name="args">Um <see cref="T:System.Xml.Xsl.XsltArgumentList" /> que contém os argumentos qualificados por namespace usados como a entrada para a transformação.</param>
        <summary>Transforma os dados XML no <see cref="T:System.Xml.XPath.IXPathNavigable" /> usando o <paramref name="args" /> especificado e gera o resultado para um <see cref="T:System.Xml.XmlReader" />.</summary>
        <returns>Um <see cref="T:System.Xml.XmlReader" /> que contém os resultados da transformação.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  O <xref:System.Xml.Xsl.XslTransform> classe está obsoleta no .NET Framework versão 2.0. O <xref:System.Xml.Xsl.XslCompiledTransform> classe é o novo processador XSLT. Para obter mais informações, consulte [usando a classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) e [migrando da classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> dá suporte à sintaxe XSLT 1,0. A folha de estilos XSLT deve incluir a declaração de namespace `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
> [!NOTE]
>  Este método agora é obsoleto. A configuração do <xref:System.Xml.Xsl.XslTransform.XmlResolver%2A> propriedade determina como o XSLT `document()` função é resolvida. A prática recomendada é usar o <xref:System.Xml.Xsl.XslTransform.Transform%2A> método que usa um <xref:System.Xml.XmlResolver> do objeto como um dos seus argumentos.  
  
 O `args` são correspondidas com o `xsl:param` elementos definidos na folha de estilos. O `xsl:output` elemento não é suportado para gerar a uma <xref:System.Xml.XmlReader> (o `xsl:output` elemento será ignorado). Ver [saída de um XslTransform](~/docs/standard/data/xml/outputs-from-an-xsltransform.md) para obter mais informações.  
  
 Esse método permite que você faça uma transformação assíncrona do documento de origem.  
  
 As transformações são aplicadas ao documento no dataset. Ou seja se você passar em um nó que não seja o nó de diretório base, isso não impede que o processo de transformação acessar todos os nós do documento carregado. Para transformar um fragmento de nó, você deve criar uma <xref:System.Xml.XmlDocument> que contém apenas o nó de fragmento e passá-lo <xref:System.Xml.XmlDocument> para o <xref:System.Xml.Xsl.XslTransform.Transform%2A> método.  
  
 O exemplo a seguir executa uma transformação em um fragmento de nó.  
  
```csharp  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out);  
```  
  
 O exemplo usa o `library.xml` e `print_root.xsl` arquivos como entrada e gera o seguinte no console.  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```xml  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```xml  
<stylesheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />   
  <template match="/">  
     Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">Implementação de comportamentos arbitrários na classe XslTransform</related>
        <related type="Article" href="https://msdn.microsoft.com/library/8e149d32-4b2f-493f-9e4b-d0d93475acde">Saída de um XslTransform</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReader Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList)" />
      <MemberSignature Language="VB.NET" Value="Public Function Transform (input As XPathNavigator, args As XsltArgumentList) As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlReader ^ Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.XPathNavigator * System.Xml.Xsl.XsltArgumentList -&gt; System.Xml.XmlReader" Usage="xslTransform.Transform (input, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass XmlResolver to Transform() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
      </Parameters>
      <Docs>
        <param name="input">Um <see cref="T:System.Xml.XPath.XPathNavigator" /> que contém os dados a serem transformados.</param>
        <param name="args">Um <see cref="T:System.Xml.Xsl.XsltArgumentList" /> que contém os argumentos qualificados por namespace usados como a entrada para a transformação.</param>
        <summary>Transforma os dados XML no <see cref="T:System.Xml.XPath.XPathNavigator" /> usando o <paramref name="args" /> especificado e gera o resultado para um <see cref="T:System.Xml.XmlReader" />.</summary>
        <returns>Um <see cref="T:System.Xml.XmlReader" /> que contém os resultados da transformação.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  O <xref:System.Xml.Xsl.XslTransform> classe está obsoleta no .NET Framework versão 2.0. O <xref:System.Xml.Xsl.XslCompiledTransform> classe é o novo processador XSLT. Para obter mais informações, consulte [usando a classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) e [migrando da classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> dá suporte à sintaxe XSLT 1,0. A folha de estilos XSLT deve incluir a declaração de namespace `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 O `args` são correspondidas com o `xsl:param` elementos definidos na folha de estilos. As seleções de transformação se aplicam ao documento como um todo. Em outras palavras, se o nó atual está definido em uma árvore de nós que não seja o nó raiz do documento, isso não impede que o processo de transformação acessar todos os nós no documento carregado. Depois que a transformação tiver sido executada, o <xref:System.Xml.XPath.XPathNavigator> permanece em seu estado original. Isso significa que o nó, que é atual antes do processo de transformação, permanece o nó atual após o <xref:System.Xml.Xsl.XslTransform.Transform%2A> método foi chamado.  
  
 Porque <xref:System.Xml.XmlReader> fornece uma saída de somente leitura, o `xsl:output` elemento será ignorado. Ver [saída de um XslTransform](~/docs/standard/data/xml/outputs-from-an-xsltransform.md) para obter mais informações.  
  
 Esse método permite que você faça uma transformação assíncrona do documento de origem.  
  
> [!NOTE]
>  Esse método é obsoleto. A configuração do <xref:System.Xml.Xsl.XslTransform.XmlResolver%2A> propriedade determina como a função Document () XSLT for resolvida. A prática recomendada é usar o <xref:System.Xml.Xsl.XslTransform.Transform%2A> método que usa um <xref:System.Xml.XmlResolver> do objeto como um dos seus argumentos.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Ocorreu um erro ao processar a transformação XSLT.  
  
Observação: Esta é uma alteração no comportamento de versões anteriores. Um <see cref="T:System.Xml.Xsl.XsltException" /> será gerado se você estiver usando o Microsoft .NET Framework versão 1.1 ou anterior.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">Implementação de comportamentos arbitrários na classe XslTransform</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputfile, string outputfile, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputfile, string outputfile, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.String,System.String,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputfile As String, outputfile As String, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputfile, System::String ^ outputfile, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : string * string * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Transform (inputfile, outputfile, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputfile" Type="System.String" />
        <Parameter Name="outputfile" Type="System.String" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="inputfile">A URL do documento de origem a ser transformado.</param>
        <param name="outputfile">O URL do arquivo de saída.</param>
        <param name="resolver">O <see cref="T:System.Xml.XmlResolver" /> usado para resolver a função XSLT <c>document()</c>. Se isso for <see langword="null" />, a função <c>document()</c> não será resolvida.  
  
O <see cref="T:System.Xml.XmlResolver" /> não é armazenado em cache após o método <see cref="Overload:System.Xml.Xsl.XslTransform.Transform" /> ser concluído.</param>
        <summary>Transforma os dados XML no arquivo de entrada e gera o resultado para um arquivo de saída.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  O <xref:System.Xml.Xsl.XslTransform> classe está obsoleta no .NET Framework versão 2.0. O <xref:System.Xml.Xsl.XslCompiledTransform> classe é o novo processador XSLT. Para obter mais informações, consulte [usando a classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) e [migrando da classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> dá suporte à sintaxe XSLT 1,0. A folha de estilos XSLT deve incluir a declaração de namespace `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
   
  
## Examples  
 O exemplo a seguir executa uma transformação XSLT e gera como saída para um arquivo. Um <xref:System.Xml.XmlUrlResolver> padrão credenciais é usado resolver um recurso externo. Consulte <xref:System.Net.CredentialCache.DefaultCredentials%2A> para obter os detalhes.  
  
 [!code-cpp[XslTransform.Transform7#1](~/samples/snippets/cpp/VS_Snippets_Data/XslTRansform.Transform7/CPP/trans_snip4.cpp#1)]
 [!code-csharp[XslTransform.Transform7#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTRansform.Transform7/CS/trans_snip4.cs#1)]
 [!code-vb[XslTransform.Transform7#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTRansform.Transform7/VB/trans_snip4.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.IO.Stream output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.Stream output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, args As XsltArgumentList, output As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::Stream ^ output);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.IO.Stream -&gt; unit" Usage="xslTransform.Transform (input, args, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass XmlResolver to Transform() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="input">Um objeto implementando a interface <see cref="T:System.Xml.XPath.IXPathNavigable" />. No .NET Framework, isso pode ser um <see cref="T:System.Xml.XmlNode" /> (normalmente um <see cref="T:System.Xml.XmlDocument" />) ou um <see cref="T:System.Xml.XPath.XPathDocument" /> que contém os dados a serem transformados.</param>
        <param name="args">Um <see cref="T:System.Xml.Xsl.XsltArgumentList" /> que contém os argumentos qualificados por namespace usados como a entrada para a transformação.</param>
        <param name="output">O fluxo no qual você deseja gerar saída.</param>
        <summary>Transforma os dados XML no <see cref="T:System.Xml.XPath.IXPathNavigable" /> usando o <paramref name="args" /> especificado e gera o resultado para um <see cref="T:System.IO.Stream" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  O <xref:System.Xml.Xsl.XslTransform> classe está obsoleta no .NET Framework versão 2.0. O <xref:System.Xml.Xsl.XslCompiledTransform> classe é o novo processador XSLT. Para obter mais informações, consulte [usando a classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) e [migrando da classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> dá suporte à sintaxe XSLT 1,0. A folha de estilos XSLT deve incluir a declaração de namespace `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
> [!NOTE]
>  Este método agora é obsoleto. A configuração do <xref:System.Xml.Xsl.XslTransform.XmlResolver%2A> propriedade determina como o XSLT `document()` função é resolvida. A prática recomendada é usar o <xref:System.Xml.Xsl.XslTransform.Transform%2A> método que usa um <xref:System.Xml.XmlResolver> do objeto como um dos seus argumentos.  
  
 O `args` são correspondidas com o `xsl:param` elementos definidos na folha de estilos.  
  
 As transformações são aplicadas ao documento no dataset. Ou seja se você passar em um nó que não seja o nó de diretório base, isso não impede que o processo de transformação acessar todos os nós do documento carregado. Para transformar um fragmento de nó, você deve criar uma <xref:System.Xml.XmlDocument> que contém apenas o nó de fragmento e passá-lo <xref:System.Xml.XmlDocument> para o <xref:System.Xml.Xsl.XslTransform.Transform%2A> método.  
  
 O exemplo a seguir executa uma transformação em um fragmento de nó.  
  
```csharp  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out);  
```  
  
 O exemplo usa o `library.xml` e `print_root.xsl` arquivos como entrada e gera o seguinte no console.  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```xml  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```xml  
<stylesheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />   
  <template match="/">  
     Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Ocorreu um erro ao processar a transformação XSLT.  
  
Observação: Esta é uma alteração no comportamento de versões anteriores. Um <see cref="T:System.Xml.Xsl.XsltException" /> será gerado se você estiver usando o Microsoft .NET Framework versão 1.1 ou anterior.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">Implementação de comportamentos arbitrários na classe XslTransform</related>
        <related type="Article" href="https://msdn.microsoft.com/library/8e149d32-4b2f-493f-9e4b-d0d93475acde">Saída de um XslTransform</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, args As XsltArgumentList, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.IO.TextWriter -&gt; unit" Usage="xslTransform.Transform (input, args, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass XmlResolver to Transform() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="input">Um objeto implementando a interface <see cref="T:System.Xml.XPath.IXPathNavigable" />. No .NET Framework, isso pode ser um <see cref="T:System.Xml.XmlNode" /> (normalmente um <see cref="T:System.Xml.XmlDocument" />) ou um <see cref="T:System.Xml.XPath.XPathDocument" /> que contém os dados a serem transformados.</param>
        <param name="args">Um <see cref="T:System.Xml.Xsl.XsltArgumentList" /> que contém os argumentos qualificados por namespace usados como a entrada para a transformação.</param>
        <param name="output">O <see cref="T:System.IO.TextWriter" /> para o qual deseja gerar.</param>
        <summary>Transforma os dados XML no <see cref="T:System.Xml.XPath.IXPathNavigable" /> usando o <paramref name="args" /> especificado e gera o resultado para um <see cref="T:System.IO.TextWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  O <xref:System.Xml.Xsl.XslTransform> classe está obsoleta no .NET Framework versão 2.0. O <xref:System.Xml.Xsl.XslCompiledTransform> classe é o novo processador XSLT. Para obter mais informações, consulte [usando a classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) e [migrando da classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> dá suporte à sintaxe XSLT 1,0. A folha de estilos XSLT deve incluir a declaração de namespace `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
> [!NOTE]
>  Este método agora é obsoleto. A configuração do <xref:System.Xml.Xsl.XslTransform.XmlResolver%2A> propriedade determina como o XSLT `document()` função é resolvida. A prática recomendada é usar o <xref:System.Xml.Xsl.XslTransform.Transform%2A> método que usa um <xref:System.Xml.XmlResolver> do objeto como um dos seus argumentos.  
  
 O `args` são correspondidas com o `xsl:param` elementos definidos na folha de estilos.  
  
 O atributo de codificação em um `xsl:output` elemento não é suportado para gerar a um <xref:System.IO.TextWriter>. Ver [saída de um XslTransform](~/docs/standard/data/xml/outputs-from-an-xsltransform.md) para obter informações específicas sobre qual `xsl:output` atributos têm suporte.  
  
 As transformações são aplicadas ao documento no dataset. Ou seja se você passar em um nó que não seja o nó de diretório base, isso não impede que o processo de transformação acessar todos os nós do documento carregado. Para transformar um fragmento de nó, você deve criar uma <xref:System.Xml.XmlDocument> que contém apenas o nó de fragmento e passá-lo <xref:System.Xml.XmlDocument> para o <xref:System.Xml.Xsl.XslTransform.Transform%2A> método.  
  
 O exemplo a seguir executa uma transformação em um fragmento de nó.  
  
```csharp  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out);  
```  
  
 O exemplo usa o `library.xml` e `print_root.xsl` arquivos como entrada e gera o seguinte no console.  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```xml  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```xml  
<stylesheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />   
  <template match="/">  
     Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Ocorreu um erro ao processar a transformação XSLT.  
  
Observação: Esta é uma alteração no comportamento de versões anteriores. Um <see cref="T:System.Xml.Xsl.XsltException" /> será gerado se você estiver usando o Microsoft .NET Framework versão 1.1 ou anterior.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">Implementação de comportamentos arbitrários na classe XslTransform</related>
        <related type="Article" href="https://msdn.microsoft.com/library/8e149d32-4b2f-493f-9e4b-d0d93475acde">Saída de um XslTransform</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReader Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Function Transform (input As IXPathNavigable, args As XsltArgumentList, resolver As XmlResolver) As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlReader ^ Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlResolver -&gt; System.Xml.XmlReader" Usage="xslTransform.Transform (input, args, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">Um objeto implementando a interface <see cref="T:System.Xml.XPath.IXPathNavigable" />. No .NET Framework, isso pode ser um <see cref="T:System.Xml.XmlNode" /> (normalmente um <see cref="T:System.Xml.XmlDocument" />) ou um <see cref="T:System.Xml.XPath.XPathDocument" /> que contém os dados a serem transformados.</param>
        <param name="args">Um <see cref="T:System.Xml.Xsl.XsltArgumentList" /> que contém os argumentos qualificados por namespace usados como a entrada para a transformação.</param>
        <param name="resolver">O <see cref="T:System.Xml.XmlResolver" /> usado para resolver a função XSLT <c>document()</c>. Se isso for <see langword="null" />, a função <c>document()</c> não será resolvida.  
  
O <see cref="T:System.Xml.XmlResolver" /> não é armazenado em cache após o método <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)" /> ser concluído.</param>
        <summary>Transforma os dados XML no <see cref="T:System.Xml.XPath.IXPathNavigable" /> usando o <paramref name="args" /> especificado e gera o resultado para um <see cref="T:System.Xml.XmlReader" />.</summary>
        <returns>Um <see cref="T:System.Xml.XmlReader" /> que contém os resultados da transformação.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  O <xref:System.Xml.Xsl.XslTransform> classe está obsoleta no .NET Framework versão 2.0. O <xref:System.Xml.Xsl.XslCompiledTransform> classe é o novo processador XSLT. Para obter mais informações, consulte [usando a classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) e [migrando da classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> dá suporte à sintaxe XSLT 1,0. A folha de estilos XSLT deve incluir a declaração de namespace `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 O `args` são correspondidas com o `xsl:param` elementos definidos na folha de estilos. O `xsl:output` elemento não é suportado para gerar a uma <xref:System.Xml.XmlReader> (o `xsl:output` elemento será ignorado). Ver [saída de um XslTransform](~/docs/standard/data/xml/outputs-from-an-xsltransform.md) para obter mais informações.  
  
 Esse método permite que você faça uma transformação assíncrona do documento de origem.  
  
 As transformações são aplicadas ao documento no dataset. Ou seja se você passar em um nó que não seja o nó de diretório base, isso não impede que o processo de transformação acessar todos os nós do documento carregado. Para transformar um fragmento de nó, você deve criar uma <xref:System.Xml.XmlDocument> que contém apenas o nó de fragmento e passá-lo <xref:System.Xml.XmlDocument> para o <xref:System.Xml.Xsl.XslTransform.Transform%2A> método.  
  
 O exemplo a seguir executa uma transformação em um fragmento de nó.  
  
```csharp  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out, null);  
```  
  
 O exemplo usa o `library.xml` e `print_root.xsl` arquivos como entrada e gera o seguinte no console.  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```xml  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```xml  
<stylesheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />   
  <template match="/">  
     Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</stylesheet>  
```  
  
   
  
## Examples  
 O exemplo a seguir transforma um documento XML e gera os resultados em um `XmlReader`. Uma <xref:System.Xml.XmlUrlResolver> com as credenciais necessárias é usado para processar qualquer XSLT `document()` funções.  
  
 [!code-cpp[XslTransform.Transform4#1](~/samples/snippets/cpp/VS_Snippets_Data/XslTransform.Transform4/CPP/trans_snip3.cpp#1)]
 [!code-csharp[XslTransform.Transform4#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Transform4/CS/trans_snip3.cs#1)]
 [!code-vb[XslTransform.Transform4#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Transform4/VB/trans_snip3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">Implementação de comportamentos arbitrários na classe XslTransform</related>
        <related type="Article" href="https://msdn.microsoft.com/library/8e149d32-4b2f-493f-9e4b-d0d93475acde">Saída de um XslTransform</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.Xml.XmlWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args, class System.Xml.XmlWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, args As XsltArgumentList, output As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::Xml::XmlWriter ^ output);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlWriter -&gt; unit" Usage="xslTransform.Transform (input, args, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass XmlResolver to Transform() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="input">Um objeto implementando a interface <see cref="T:System.Xml.XPath.IXPathNavigable" />. No .NET Framework, isso pode ser um <see cref="T:System.Xml.XmlNode" /> (normalmente um <see cref="T:System.Xml.XmlDocument" />) ou um <see cref="T:System.Xml.XPath.XPathDocument" /> que contém os dados a serem transformados.</param>
        <param name="args">Um <see cref="T:System.Xml.Xsl.XsltArgumentList" /> que contém os argumentos qualificados por namespace usados como a entrada para a transformação.</param>
        <param name="output">O <see cref="T:System.Xml.XmlWriter" /> para o qual deseja gerar.</param>
        <summary>Transforma os dados XML no <see cref="T:System.Xml.XPath.IXPathNavigable" /> usando o <paramref name="args" /> especificado e gera o resultado para um <see cref="T:System.Xml.XmlWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  O <xref:System.Xml.Xsl.XslTransform> classe está obsoleta no .NET Framework versão 2.0. O <xref:System.Xml.Xsl.XslCompiledTransform> classe é o novo processador XSLT. Para obter mais informações, consulte [usando a classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) e [migrando da classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> dá suporte à sintaxe XSLT 1,0. A folha de estilos XSLT deve incluir a declaração de namespace `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
> [!NOTE]
>  Este método agora é obsoleto. A configuração do <xref:System.Xml.Xsl.XslTransform.XmlResolver%2A> propriedade determina como o XSLT `document()` função é resolvida. A prática recomendada é usar o <xref:System.Xml.Xsl.XslTransform.Transform%2A> método que usa um <xref:System.Xml.XmlResolver> do objeto como um dos seus argumentos.  
  
 O `args` são correspondidas com o `xsl:param` elementos definidos na folha de estilos. O `xsl:output` elemento não é suportado para gerar a uma <xref:System.Xml.XmlWriter> (`xsl:output` é ignorado). Ver [saída de um XslTransform](~/docs/standard/data/xml/outputs-from-an-xsltransform.md) para obter mais informações.  
  
 As transformações são aplicadas ao documento no dataset. Ou seja se você passar em um nó que não seja o nó de diretório base, isso não impede que o processo de transformação acessar todos os nós do documento carregado. Para transformar um fragmento de nó, você deve criar uma <xref:System.Xml.XmlDocument> que contém apenas o nó de fragmento e passá-lo <xref:System.Xml.XmlDocument> para o <xref:System.Xml.Xsl.XslTransform.Transform%2A> método.  
  
 O exemplo a seguir executa uma transformação em um fragmento de nó.  
  
```csharp  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out);  
```  
  
 O exemplo usa o `library.xml` e `print_root.xsl` arquivos como entrada e gera o seguinte no console.  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```xml  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```xml  
<stylesheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />  
  <template match="/">  
  Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Ocorreu um erro ao processar a transformação XSLT.  
  
Observação: Esta é uma alteração no comportamento de versões anteriores. Um <see cref="T:System.Xml.Xsl.XsltException" /> será gerado se você estiver usando o Microsoft .NET Framework versão 1.1 ou anterior.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">Implementação de comportamentos arbitrários na classe XslTransform</related>
        <related type="Article" href="https://msdn.microsoft.com/library/8e149d32-4b2f-493f-9e4b-d0d93475acde">Saída de um XslTransform</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.IO.Stream output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.Stream output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XPathNavigator, args As XsltArgumentList, output As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::Stream ^ output);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.XPathNavigator * System.Xml.Xsl.XsltArgumentList * System.IO.Stream -&gt; unit" Usage="xslTransform.Transform (input, args, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass XmlResolver to Transform() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="input">Um <see cref="T:System.Xml.XPath.XPathNavigator" /> que contém os dados a serem transformados.</param>
        <param name="args">Um <see cref="T:System.Xml.Xsl.XsltArgumentList" /> que contém os argumentos qualificados por namespace usados como a entrada para a transformação.</param>
        <param name="output">O fluxo no qual você deseja gerar saída.</param>
        <summary>Transforma os dados XML no <see cref="T:System.Xml.XPath.XPathNavigator" /> usando o <paramref name="args" /> especificado e gera o resultado para um <see cref="T:System.IO.Stream" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  O <xref:System.Xml.Xsl.XslTransform> classe está obsoleta no .NET Framework versão 2.0. O <xref:System.Xml.Xsl.XslCompiledTransform> classe é o novo processador XSLT. Para obter mais informações, consulte [usando a classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) e [migrando da classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> dá suporte à sintaxe XSLT 1,0. A folha de estilos XSLT deve incluir a declaração de namespace `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 O `args` são correspondidas com o `xsl:param` elementos definidos na folha de estilos. As seleções de transformação se aplicam ao documento como um todo. Em outras palavras, se o nó atual está definido em uma árvore de nós que não seja o nó raiz do documento, isso não impede que o processo de transformação acessar todos os nós no documento carregado. Depois que a transformação tiver sido executada, o <xref:System.Xml.XPath.XPathNavigator> permanece em seu estado original. Isso significa que o nó, que é atual antes do processo de transformação, permanece o nó atual após o <xref:System.Xml.Xsl.XslTransform.Transform%2A> método foi chamado.  
  
 Ver [saída de um XslTransform](~/docs/standard/data/xml/outputs-from-an-xsltransform.md) para obter informações específicas sobre qual `xsl:output` atributos têm suporte.  
  
> [!NOTE]
>  Este método agora é obsoleto. A configuração do <xref:System.Xml.Xsl.XslTransform.XmlResolver%2A> propriedade determina como o XSLT `document()` função é resolvida. A prática recomendada é usar o <xref:System.Xml.Xsl.XslTransform.Transform%2A> método que usa um <xref:System.Xml.XmlResolver> do objeto como um dos seus argumentos.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Ocorreu um erro ao processar a transformação XSLT.  
  
Observação: Esta é uma alteração no comportamento de versões anteriores. Um <see cref="T:System.Xml.Xsl.XsltException" /> será gerado se você estiver usando o Microsoft .NET Framework versão 1.1 ou anterior.</exception>
        <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">Implementação de comportamentos arbitrários na classe XslTransform</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XPathNavigator, args As XsltArgumentList, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.XPathNavigator * System.Xml.Xsl.XsltArgumentList * System.IO.TextWriter -&gt; unit" Usage="xslTransform.Transform (input, args, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass XmlResolver to Transform() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="input">Um <see cref="T:System.Xml.XPath.XPathNavigator" /> que contém os dados a serem transformados.</param>
        <param name="args">Um <see cref="T:System.Xml.Xsl.XsltArgumentList" /> que contém os argumentos qualificados por namespace usados como a entrada para a transformação.</param>
        <param name="output">O <see cref="T:System.IO.TextWriter" /> para o qual deseja gerar.</param>
        <summary>Transforma os dados XML no <see cref="T:System.Xml.XPath.XPathNavigator" /> usando o <paramref name="args" /> especificado e gera o resultado para um <see cref="T:System.IO.TextWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  O <xref:System.Xml.Xsl.XslTransform> classe está obsoleta no .NET Framework versão 2.0. O <xref:System.Xml.Xsl.XslCompiledTransform> classe é o novo processador XSLT. Para obter mais informações, consulte [usando a classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) e [migrando da classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> dá suporte à sintaxe XSLT 1,0. A folha de estilos XSLT deve incluir a declaração de namespace `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 O `args` são correspondidas com o `xsl:param` elementos definidos na folha de estilos. As seleções de transformação se aplicam ao documento como um todo. Em outras palavras, se o nó atual está definido em uma árvore de nós que não seja o nó raiz do documento, isso não impede que o processo de transformação acessar todos os nós no documento carregado. Depois que a transformação é executada, o <xref:System.Xml.XPath.XPathNavigator> permanece em seu estado original. Isso significa que o nó, que é atual antes do processo de transformação, permanece o nó atual após o <xref:System.Xml.Xsl.XslTransform.Transform%2A> método foi chamado.  
  
 O atributo de codificação em um `xsl:output` elemento não é suportado para gerar a um <xref:System.IO.TextWriter>. Ver [saída de um XslTransform](~/docs/standard/data/xml/outputs-from-an-xsltransform.md) para obter informações específicas sobre qual `xsl:output` atributos têm suporte.  
  
> [!NOTE]
>  Este método agora é obsoleto. A configuração do <xref:System.Xml.Xsl.XslTransform.XmlResolver%2A> propriedade determina como o XSLT `document()` função é resolvida. A prática recomendada é usar o <xref:System.Xml.Xsl.XslTransform.Transform%2A> método que usa um <xref:System.Xml.XmlResolver> do objeto como um dos seus argumentos.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Ocorreu um erro ao processar a transformação XSLT.  
  
Observação: Esta é uma alteração no comportamento de versões anteriores. Um <see cref="T:System.Xml.Xsl.XsltException" /> será gerado se você estiver usando o Microsoft .NET Framework versão 1.1 ou anterior.</exception>
        <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">Implementação de comportamentos arbitrários na classe XslTransform</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReader Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Function Transform (input As XPathNavigator, args As XsltArgumentList, resolver As XmlResolver) As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlReader ^ Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.XPathNavigator * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlResolver -&gt; System.Xml.XmlReader" Usage="xslTransform.Transform (input, args, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">Um <see cref="T:System.Xml.XPath.XPathNavigator" /> que contém os dados a serem transformados.</param>
        <param name="args">Um <see cref="T:System.Xml.Xsl.XsltArgumentList" /> que contém os argumentos qualificados por namespace usados como a entrada para a transformação.</param>
        <param name="resolver">O <see cref="T:System.Xml.XmlResolver" /> usado para resolver a função XSLT <c>document()</c>. Se isso for <see langword="null" />, a função <c>document()</c> não será resolvida.  
  
O <see cref="T:System.Xml.XmlResolver" /> não é armazenado em cache após o método <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)" /> ser concluído.</param>
        <summary>Transforma os dados XML no <see cref="T:System.Xml.XPath.XPathNavigator" /> usando o <paramref name="args" /> especificado e gera o resultado para um <see cref="T:System.Xml.XmlReader" />.</summary>
        <returns>Um <see cref="T:System.Xml.XmlReader" /> que contém os resultados da transformação.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  O <xref:System.Xml.Xsl.XslTransform> classe está obsoleta no .NET Framework versão 2.0. O <xref:System.Xml.Xsl.XslCompiledTransform> classe é o novo processador XSLT. Para obter mais informações, consulte [usando a classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) e [migrando da classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> dá suporte à sintaxe XSLT 1,0. A folha de estilos XSLT deve incluir a declaração de namespace `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 O `args` são correspondidas com o `xsl:param` elementos definidos na folha de estilos. As seleções de transformação se aplicam ao documento como um todo. Em outras palavras, se o nó atual está definido em uma árvore de nós que não seja o nó raiz do documento, isso não impede que o processo de transformação acessar todos os nós no documento carregado. Depois que a transformação tiver sido executada, o <xref:System.Xml.XPath.XPathNavigator> permanece em seu estado original. Isso significa que o nó, que é atual antes do processo de transformação, permanece o nó atual após o <xref:System.Xml.Xsl.XslTransform.Transform%2A> método foi chamado.  
  
 Porque <xref:System.Xml.XmlReader> fornece uma saída de somente leitura, o `xsl:output` elemento será ignorado. Ver [saída de um XslTransform](~/docs/standard/data/xml/outputs-from-an-xsltransform.md) para obter mais informações.  
  
 Esse método permite que você faça uma transformação assíncrona do documento de origem.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Ocorreu um erro ao processar a transformação XSLT.  
  
Observação: Esta é uma alteração no comportamento de versões anteriores. Um <see cref="T:System.Xml.Xsl.XsltException" /> será gerado se você estiver usando o Microsoft .NET Framework versão 1.1 ou anterior.</exception>
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">Implementação de comportamentos arbitrários na classe XslTransform</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.Xml.XmlWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args, class System.Xml.XmlWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XPathNavigator, args As XsltArgumentList, output As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::Xml::XmlWriter ^ output);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.XPathNavigator * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlWriter -&gt; unit" Usage="xslTransform.Transform (input, args, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass XmlResolver to Transform() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="input">Um <see cref="T:System.Xml.XPath.XPathNavigator" /> que contém os dados a serem transformados.</param>
        <param name="args">Um <see cref="T:System.Xml.Xsl.XsltArgumentList" /> que contém os argumentos qualificados por namespace usados como a entrada para a transformação.</param>
        <param name="output">O <see cref="T:System.Xml.XmlWriter" /> para o qual deseja gerar.</param>
        <summary>Transforma os dados XML no <see cref="T:System.Xml.XPath.XPathNavigator" /> usando o args especificado e gera o resultado para um <see cref="T:System.Xml.XmlWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  O <xref:System.Xml.Xsl.XslTransform> classe está obsoleta no .NET Framework versão 2.0. O <xref:System.Xml.Xsl.XslCompiledTransform> classe é o novo processador XSLT. Para obter mais informações, consulte [usando a classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) e [migrando da classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> dá suporte à sintaxe XSLT 1,0. A folha de estilos XSLT deve incluir a declaração de namespace `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 O `args` são correspondidas com o `xsl:param` elementos definidos na folha de estilos. As seleções de transformação se aplicam ao documento como um todo. Em outras palavras, se o nó atual está definido em uma árvore de nós que não seja o nó raiz do documento, isso não impede que o processo de transformação acessar todos os nós no documento carregado. Depois que a transformação é executada, o <xref:System.Xml.XPath.XPathNavigator> permanece em seu estado original. Isso significa que o nó, o que for atual antes do processo de transformação, permanece o nó atual após o <xref:System.Xml.Xsl.XslTransform.Transform%2A> método foi chamado.  
  
 O `xsl:output` elemento não é suportado para gerar a uma <xref:System.Xml.XmlWriter> (`xsl:output` é ignorado). Ver [saída de um XslTransform](~/docs/standard/data/xml/outputs-from-an-xsltransform.md) para obter mais informações.  
  
> [!NOTE]
>  Este método agora é obsoleto. A configuração do <xref:System.Xml.Xsl.XslTransform.XmlResolver%2A> propriedade determina como o XSLT `document()` função é resolvida. A prática recomendada é usar o <xref:System.Xml.Xsl.XslTransform.Transform%2A> método que usa um <xref:System.Xml.XmlResolver> do objeto como um dos seus argumentos.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Ocorreu um erro ao processar a transformação XSLT.  
  
Observação: Esta é uma alteração no comportamento de versões anteriores. Um <see cref="T:System.Xml.Xsl.XsltException" /> será gerado se você estiver usando o Microsoft .NET Framework versão 1.1 ou anterior.</exception>
        <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">Implementação de comportamentos arbitrários na classe XslTransform</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.IO.Stream output, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.Stream output, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, args As XsltArgumentList, output As Stream, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::Stream ^ output, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.IO.Stream * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Transform (input, args, output, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.Stream" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">Um objeto implementando a interface <see cref="T:System.Xml.XPath.IXPathNavigable" />. No .NET Framework, isso pode ser um <see cref="T:System.Xml.XmlNode" /> (normalmente um <see cref="T:System.Xml.XmlDocument" />) ou um <see cref="T:System.Xml.XPath.XPathDocument" /> que contém os dados a serem transformados.</param>
        <param name="args">Um <see cref="T:System.Xml.Xsl.XsltArgumentList" /> que contém os argumentos qualificados por namespace usados como a entrada para a transformação.</param>
        <param name="output">O fluxo no qual você deseja gerar saída.</param>
        <param name="resolver">O <see cref="T:System.Xml.XmlResolver" /> usado para resolver a função XSLT <c>document()</c>. Se isso for <see langword="null" />, a função <c>document()</c> não será resolvida.  
  
O <see cref="T:System.Xml.XmlResolver" /> não é armazenado em cache após o método <see cref="Overload:System.Xml.Xsl.XslTransform.Transform" /> ser concluído.</param>
        <summary>Transforma os dados XML no <see cref="T:System.Xml.XPath.IXPathNavigable" /> usando o <paramref name="args" /> especificado e gera o resultado para um <see cref="T:System.IO.Stream" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  O <xref:System.Xml.Xsl.XslTransform> classe está obsoleta no .NET Framework versão 2.0. O <xref:System.Xml.Xsl.XslCompiledTransform> classe é o novo processador XSLT. Para obter mais informações, consulte [usando a classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) e [migrando da classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> dá suporte à sintaxe XSLT 1,0. A folha de estilos XSLT deve incluir a declaração de namespace `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 O `args` são correspondidas com o `xsl:param` elementos definidos na folha de estilos.  
  
 As transformações são aplicadas ao documento no dataset. Ou seja se você passar em um nó que não seja o nó de diretório base, isso não impede que o processo de transformação acessar todos os nós do documento carregado. Para transformar um fragmento de nó, você deve criar uma <xref:System.Xml.XmlDocument> que contém apenas o nó de fragmento e passá-lo <xref:System.Xml.XmlDocument> para o <xref:System.Xml.Xsl.XslTransform.Transform%2A> método.  
  
 O exemplo a seguir executa uma transformação em um fragmento de nó.  
  
```csharp  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out, null);  
```  
  
 O exemplo usa o `library.xml` e `print_root.xsl` arquivos como entrada e gera o seguinte no console.  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```xml  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```xml  
<stylesheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />   
  <template match="/">  
     Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</stylesheet>  
```  
  
   
  
## Examples  
 O exemplo a seguir executa uma transformação dentro de uma página ASP.NET.  
  
 [!code-aspx-csharp[XslTransform.Transform5#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Transform5/CS/transcs.aspx#1)]
 [!code-aspx-vb[XslTransform.Transform5#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Transform5/VB/transvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Ocorreu um erro ao processar a transformação XSLT.  
  
Observação: Esta é uma alteração no comportamento de versões anteriores. Um <see cref="T:System.Xml.Xsl.XsltException" /> será gerado se você estiver usando o Microsoft .NET Framework versão 1.1 ou anterior.</exception>
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">Implementação de comportamentos arbitrários na classe XslTransform</related>
        <related type="Article" href="https://msdn.microsoft.com/library/8e149d32-4b2f-493f-9e4b-d0d93475acde">Saída de um XslTransform</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.IO.TextWriter output, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.TextWriter output, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, args As XsltArgumentList, output As TextWriter, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::TextWriter ^ output, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.IO.TextWriter * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Transform (input, args, output, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">Um objeto implementando a interface <see cref="T:System.Xml.XPath.IXPathNavigable" />. No .NET Framework, isso pode ser um <see cref="T:System.Xml.XmlNode" /> (normalmente um <see cref="T:System.Xml.XmlDocument" />) ou um <see cref="T:System.Xml.XPath.XPathDocument" /> que contém os dados a serem transformados.</param>
        <param name="args">Um <see cref="T:System.Xml.Xsl.XsltArgumentList" /> que contém os argumentos qualificados por namespace usados como a entrada para a transformação.</param>
        <param name="output">O <see cref="T:System.IO.TextWriter" /> para o qual deseja gerar.</param>
        <param name="resolver">O <see cref="T:System.Xml.XmlResolver" /> usado para resolver a função XSLT <c>document()</c>. Se isso for <see langword="null" />, a função <c>document()</c> não será resolvida.  
  
O <see cref="T:System.Xml.XmlResolver" /> não é armazenado em cache após o método <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)" /> ser concluído.</param>
        <summary>Transforma os dados XML no <see cref="T:System.Xml.XPath.IXPathNavigable" /> usando o <paramref name="args" /> especificado e gera o resultado para um <see cref="T:System.IO.TextWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  O <xref:System.Xml.Xsl.XslTransform> classe está obsoleta no .NET Framework versão 2.0. O <xref:System.Xml.Xsl.XslCompiledTransform> classe é o novo processador XSLT. Para obter mais informações, consulte [usando a classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) e [migrando da classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> dá suporte à sintaxe XSLT 1,0. A folha de estilos XSLT deve incluir a declaração de namespace `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 O `args` são correspondidas com o `xsl:param` elementos definidos na folha de estilos.  
  
 O atributo de codificação em um `xsl:output` elemento não é suportado para gerar a um <xref:System.IO.TextWriter>. Ver [saída de um XslTransform](~/docs/standard/data/xml/outputs-from-an-xsltransform.md) para obter informações específicas sobre qual `xsl:output` atributos têm suporte.  
  
 As transformações são aplicadas ao documento no dataset. Ou seja se você passar em um nó que não seja o nó de diretório base, isso não impede que o processo de transformação acessar todos os nós do documento carregado. Para transformar um fragmento de nó, você deve criar uma <xref:System.Xml.XmlDocument> que contém apenas o nó de fragmento e passá-lo <xref:System.Xml.XmlDocument> para o <xref:System.Xml.Xsl.XslTransform.Transform%2A> método.  
  
 O exemplo a seguir executa uma transformação em um fragmento de nó.  
  
```csharp  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out, null);  
```  
  
 O exemplo usa o `library.xml` e `print_root.xsl` arquivos como entrada e gera o seguinte no console.  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```xml  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```xml  
<stylesheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />   
  <template match="/">  
     Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</stylesheet>  
```  
  
   
  
## Examples  
 O exemplo a seguir transforma um arquivo XML e gera uma cadeia de caracteres HTML. O <xref:System.IO.StringReader> e <xref:System.IO.StringWriter> classes são usadas para ler e gravar as cadeias de caracteres.  
  
 [!code-csharp[XslTransform.Transform6#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Transform6/CS/transstring.cs#1)]
 [!code-vb[XslTransform.Transform6#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Transform6/VB/transstring.vb#1)]  
  
 O exemplo usa o arquivo `books.xml` como entrada.  
  
 [!code-xml[XslTransform.Transform6#2](~/samples/snippets/xml/VS_Snippets_Data/XslTransform.Transform6/XML/books.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Ocorreu um erro ao processar a transformação XSLT.  
  
Observação: Esta é uma alteração no comportamento de versões anteriores. Um <see cref="T:System.Xml.Xsl.XsltException" /> será gerado se você estiver usando o Microsoft .NET Framework versão 1.1 ou anterior.</exception>
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">Implementação de comportamentos arbitrários na classe XslTransform</related>
        <related type="Article" href="https://msdn.microsoft.com/library/8e149d32-4b2f-493f-9e4b-d0d93475acde">Saída de um XslTransform</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.Xml.XmlWriter output, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args, class System.Xml.XmlWriter output, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, args As XsltArgumentList, output As XmlWriter, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::Xml::XmlWriter ^ output, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlWriter * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Transform (input, args, output, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.Xml.XmlWriter" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">Um objeto implementando a interface <see cref="T:System.Xml.XPath.IXPathNavigable" />. No .NET Framework, isso pode ser um <see cref="T:System.Xml.XmlNode" /> (normalmente um <see cref="T:System.Xml.XmlDocument" />) ou um <see cref="T:System.Xml.XPath.XPathDocument" /> que contém os dados a serem transformados.</param>
        <param name="args">Um <see cref="T:System.Xml.Xsl.XsltArgumentList" /> que contém os argumentos qualificados por namespace usados como a entrada para a transformação.</param>
        <param name="output">O <see cref="T:System.Xml.XmlWriter" /> para o qual deseja gerar.</param>
        <param name="resolver">O <see cref="T:System.Xml.XmlResolver" /> usado para resolver a função XSLT <c>document()</c>. Se isso for <see langword="null" />, a função <c>document()</c> não será resolvida.  
  
O <see cref="T:System.Xml.XmlResolver" /> não é armazenado em cache após o método <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" /> ser concluído.</param>
        <summary>Transforma os dados XML no <see cref="T:System.Xml.XPath.IXPathNavigable" /> usando o <paramref name="args" /> especificado e gera o resultado para um <see cref="T:System.Xml.XmlWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  O <xref:System.Xml.Xsl.XslTransform> classe está obsoleta no .NET Framework versão 2.0. O <xref:System.Xml.Xsl.XslCompiledTransform> classe é o novo processador XSLT. Para obter mais informações, consulte [usando a classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) e [migrando da classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> dá suporte à sintaxe XSLT 1,0. A folha de estilos XSLT deve incluir a declaração de namespace `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 O `args` são correspondidas com o `xsl:param` elementos definidos na folha de estilos. O `xsl:output` elemento não é suportado para gerar a uma <xref:System.Xml.XmlWriter> (`xsl:output` é ignorado). Ver [saída de um XslTransform](~/docs/standard/data/xml/outputs-from-an-xsltransform.md) para obter mais informações.  
  
 As transformações são aplicadas ao documento no dataset. Ou seja se você passar em um nó que não seja o nó de diretório base, isso não impede que o processo de transformação acessar todos os nós do documento carregado. Para transformar um fragmento de nó, você deve criar uma <xref:System.Xml.XmlDocument> que contém apenas o nó de fragmento e passá-lo <xref:System.Xml.XmlDocument> para o <xref:System.Xml.Xsl.XslTransform.Transform%2A> método.  
  
 O exemplo a seguir executa uma transformação em um fragmento de nó.  
  
```csharp  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out, null);  
```  
  
 O exemplo usa o `library.xml` e `print_root.xsl` arquivos como entrada e gera o seguinte no console.  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```xml  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```xml  
<stylesheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />  
  <template match="/">  
  Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</stylesheet>  
```  
  
   
  
## Examples  
 O exemplo a seguir transforma um documento XML em um documento HTML. Ele exibe o ISBN, o título e o preço de cada livro em uma tabela.  
  
 [!code-cpp[Classic WebData XslTransform.Transform7 Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XslTransform.Transform7 Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XslTransform.Transform7 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/VB/source.vb#1)]  
  
 O exemplo usa os dois arquivos de entrada a seguir.  
  
 `books.xml`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/books.xml#2)]  
  
 `output.xsl`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/output.xsl#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Ocorreu um erro ao processar a transformação XSLT.  
  
Observação: Esta é uma alteração no comportamento de versões anteriores. Um <see cref="T:System.Xml.Xsl.XsltException" /> será gerado se você estiver usando o Microsoft .NET Framework versão 1.1 ou anterior.</exception>
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">Implementação de comportamentos arbitrários na classe XslTransform</related>
        <related type="Article" href="https://msdn.microsoft.com/library/8e149d32-4b2f-493f-9e4b-d0d93475acde">Saída de um XslTransform</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.IO.Stream output, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.Stream output, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XPathNavigator, args As XsltArgumentList, output As Stream, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::Stream ^ output, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.XPathNavigator * System.Xml.Xsl.XsltArgumentList * System.IO.Stream * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Transform (input, args, output, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.Stream" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">Um <see cref="T:System.Xml.XPath.XPathNavigator" /> que contém os dados a serem transformados.</param>
        <param name="args">Um <see cref="T:System.Xml.Xsl.XsltArgumentList" /> que contém os argumentos qualificados por namespace usados como a entrada para a transformação.</param>
        <param name="output">O fluxo no qual você deseja gerar saída.</param>
        <param name="resolver">O <see cref="T:System.Xml.XmlResolver" /> usado para resolver a função XSLT <c>document()</c>. Se isso for <see langword="null" />, a função <c>document()</c> não será resolvida.  
  
O <see cref="T:System.Xml.XmlResolver" /> não é armazenado em cache após o método <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)" /> ser concluído.</param>
        <summary>Transforma os dados XML no <see cref="T:System.Xml.XPath.XPathNavigator" /> usando o <paramref name="args" /> especificado e gera o resultado para um <see cref="T:System.IO.Stream" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  O <xref:System.Xml.Xsl.XslTransform> classe está obsoleta no .NET Framework versão 2.0. O <xref:System.Xml.Xsl.XslCompiledTransform> classe é o novo processador XSLT. Para obter mais informações, consulte [usando a classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) e [migrando da classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> dá suporte à sintaxe XSLT 1,0. A folha de estilos XSLT deve incluir a declaração de namespace `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 O `args` são correspondidas com o `xsl:param` elementos definidos na folha de estilos. As seleções de transformação se aplicam ao documento como um todo. Em outras palavras, se o nó atual está definido em uma árvore de nós que não seja o nó raiz do documento, isso não impede que o processo de transformação acessar todos os nós no documento carregado. Depois que a transformação tiver sido executada, o <xref:System.Xml.XPath.XPathNavigator> permanece em seu estado original. Isso significa que o nó, que é atual antes do processo de transformação, permanece o nó atual após o <xref:System.Xml.Xsl.XslTransform.Transform%2A> método foi chamado.  
  
 Ver [saída de um XslTransform](~/docs/standard/data/xml/outputs-from-an-xsltransform.md) para obter informações específicas sobre qual `xsl:output` atributos têm suporte.  
  
   
  
## Examples  
 O exemplo a seguir carrega uma tabela de cliente em um <xref:System.Xml.XmlDataDocument> e executa uma transformação XSLT para extrair os dados do cliente para uma tabela HTML. O exemplo usa o banco de dados Northwind do Microsoft SQL Server 2000.  
  
 [!code-csharp[XmlDataDocument.CreateNavigator#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlDataDocument.CreateNavigator/CS/dataset_trans.cs#1)]
 [!code-vb[XmlDataDocument.CreateNavigator#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlDataDocument.CreateNavigator/VB/dataset_trans.vb#1)]  
  
 O exemplo usa o arquivo `customers.xsl` como entrada.  
  
 [!code-xml[XmlDataDocument.CreateNavigator#2](~/samples/snippets/xml/VS_Snippets_Data/XmlDataDocument.CreateNavigator/XML/customers.xsl#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Ocorreu um erro ao processar a transformação XSLT.  
  
Observação: Esta é uma alteração no comportamento de versões anteriores. Um <see cref="T:System.Xml.Xsl.XsltException" /> será gerado se você estiver usando o Microsoft .NET Framework versão 1.1 ou anterior.</exception>
        <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">Implementação de comportamentos arbitrários na classe XslTransform</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.IO.TextWriter output, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.TextWriter output, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XPathNavigator, args As XsltArgumentList, output As TextWriter, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::TextWriter ^ output, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.XPathNavigator * System.Xml.Xsl.XsltArgumentList * System.IO.TextWriter * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Transform (input, args, output, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">Um <see cref="T:System.Xml.XPath.XPathNavigator" /> que contém os dados a serem transformados.</param>
        <param name="args">Um <see cref="T:System.Xml.Xsl.XsltArgumentList" /> que contém os argumentos qualificados por namespace usados como a entrada para a transformação.</param>
        <param name="output">O <see cref="T:System.IO.TextWriter" /> para o qual deseja gerar.</param>
        <param name="resolver">O <see cref="T:System.Xml.XmlResolver" /> usado para resolver a função XSLT <c>document()</c>. Se isso for <see langword="null" />, a função <c>document()</c> não será resolvida.  
  
O <see cref="T:System.Xml.XmlResolver" /> não é armazenado em cache após o método <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)" /> ser concluído.</param>
        <summary>Transforma os dados XML no <see cref="T:System.Xml.XPath.XPathNavigator" /> usando o <paramref name="args" /> especificado e gera o resultado para um <see cref="T:System.IO.TextWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  O <xref:System.Xml.Xsl.XslTransform> classe está obsoleta no .NET Framework versão 2.0. O <xref:System.Xml.Xsl.XslCompiledTransform> classe é o novo processador XSLT. Para obter mais informações, consulte [usando a classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) e [migrando da classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> dá suporte à sintaxe XSLT 1,0. A folha de estilos XSLT deve incluir a declaração de namespace `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 O `args` são correspondidas com o `xsl:param` elementos definidos na folha de estilos. As seleções de transformação se aplicam ao documento como um todo. Em outras palavras, se o nó atual está definido em uma árvore de nós que não seja o nó raiz do documento, isso não impede que o processo de transformação acessar todos os nós no documento carregado. Depois que a transformação é executada, o <xref:System.Xml.XPath.XPathNavigator> permanece em seu estado original. Isso significa que o nó, que é atual antes do processo de transformação, permanece o nó atual após o <xref:System.Xml.Xsl.XslTransform.Transform%2A> método foi chamado.  
  
 O atributo de codificação em um `xsl:output` elemento não é suportado para gerar a um <xref:System.IO.TextWriter>. Ver [saída de um XslTransform](~/docs/standard/data/xml/outputs-from-an-xsltransform.md) para obter informações específicas sobre qual `xsl:output` atributos têm suporte.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Ocorreu um erro ao processar a transformação XSLT.  
  
Observação: Esta é uma alteração no comportamento de versões anteriores. Um <see cref="T:System.Xml.Xsl.XsltException" /> será gerado se você estiver usando o Microsoft .NET Framework versão 1.1 ou anterior.</exception>
        <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">Implementação de comportamentos arbitrários na classe XslTransform</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.Xml.XmlWriter output, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args, class System.Xml.XmlWriter output, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XPathNavigator, args As XsltArgumentList, output As XmlWriter, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::Xml::XmlWriter ^ output, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.XPathNavigator * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlWriter * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Transform (input, args, output, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.Xml.XmlWriter" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">Um <see cref="T:System.Xml.XPath.XPathNavigator" /> que contém os dados a serem transformados.</param>
        <param name="args">Um <see cref="T:System.Xml.Xsl.XsltArgumentList" /> que contém os argumentos qualificados por namespace usados como a entrada para a transformação.</param>
        <param name="output">O <see cref="T:System.Xml.XmlWriter" /> para o qual deseja gerar.</param>
        <param name="resolver">O <see cref="T:System.Xml.XmlResolver" /> usado para resolver a função XSLT <c>document()</c>. Se isso for <see langword="null" />, a função <c>document()</c> não será resolvida.  
  
O <see cref="T:System.Xml.XmlResolver" /> não é armazenado em cache após o método <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" /> ser concluído.</param>
        <summary>Transforma os dados XML no <see cref="T:System.Xml.XPath.XPathNavigator" /> usando o args especificado e gera o resultado para um <see cref="T:System.Xml.XmlWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  O <xref:System.Xml.Xsl.XslTransform> classe está obsoleta no .NET Framework versão 2.0. O <xref:System.Xml.Xsl.XslCompiledTransform> classe é o novo processador XSLT. Para obter mais informações, consulte [usando a classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) e [migrando da classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> dá suporte à sintaxe XSLT 1,0. A folha de estilos XSLT deve incluir a declaração de namespace `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 O `args` são correspondidas com o `xsl:param` elementos definidos na folha de estilos. As seleções de transformação se aplicam ao documento como um todo. Em outras palavras, se o nó atual está definido em uma árvore de nós que não seja o nó raiz do documento, isso não impede que o processo de transformação acessar todos os nós no documento carregado. Depois que a transformação é executada, o <xref:System.Xml.XPath.XPathNavigator> permanece em seu estado original. Isso significa que o nó, o que for atual antes do processo de transformação, permanece o nó atual após o <xref:System.Xml.Xsl.XslTransform.Transform%2A> método foi chamado.  
  
 O `xsl:output` elemento não é suportado para gerar a uma <xref:System.Xml.XmlWriter> (`xsl:output` é ignorado). Ver [saída de um XslTransform](~/docs/standard/data/xml/outputs-from-an-xsltransform.md) para obter mais informações.  
  
   
  
## Examples  
 O exemplo a seguir carrega e edita um documento XML antes de executar uma transformação XSLT.  
  
 [!code-cpp[XslTransform.Transform2#1](~/samples/snippets/cpp/VS_Snippets_Data/XslTransform.Transform2/CPP/trans_snip.cpp#1)]
 [!code-csharp[XslTransform.Transform2#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Transform2/CS/trans_snip.cs#1)]
 [!code-vb[XslTransform.Transform2#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Transform2/VB/trans_snip.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Ocorreu um erro ao processar a transformação XSLT.  
  
Observação: Esta é uma alteração no comportamento de versões anteriores. Um <see cref="T:System.Xml.Xsl.XsltException" /> será gerado se você estiver usando o Microsoft .NET Framework versão 1.1 ou anterior.</exception>
        <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">Implementação de comportamentos arbitrários na classe XslTransform</related>
      </Docs>
    </Member>
    <Member MemberName="XmlResolver">
      <MemberSignature Language="C#" Value="public System.Xml.XmlResolver XmlResolver { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlResolver XmlResolver" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Xsl.XslTransform.XmlResolver" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlResolver As XmlResolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlResolver ^ XmlResolver {  void set(System::Xml::XmlResolver ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlResolver : System.Xml.XmlResolver" Usage="System.Xml.Xsl.XslTransform.XmlResolver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass XmlResolver to Transform() method")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlResolver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Define o <see cref="T:System.Xml.XmlResolver" /> usado para resolver recursos externos quando o método <see cref="Overload:System.Xml.Xsl.XslTransform.Transform" /> é chamado.</summary>
        <value>O <see cref="T:System.Xml.XmlResolver" /> usar durante a transformação. Se definido como <see langword="null" />, o XSLT <c>Document ()</c> função não for resolvida.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  O <xref:System.Xml.Xsl.XslTransform> classe está obsoleta no .NET Framework versão 2.0. O <xref:System.Xml.Xsl.XslCompiledTransform> classe é o novo processador XSLT. Para obter mais informações, consulte [usando a classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) e [migrando da classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 Na versão 1.1 do .NET Framework, o nível de confiança do aplicativo determina o comportamento padrão:  
  
 `Fully trusted code:` Um padrão <xref:System.Xml.XmlUrlResolver> com nenhum usuário de credenciais é usado para resolver o `document()` função. Se a autenticação é necessária para acessar o recurso externo, use essa propriedade para especificar um <xref:System.Xml.XmlResolver> com as credenciais necessárias.  
  
 `Semi-trusted code:` A propriedade é definida como `null`, que significa que o `document()` função não for resolvida. Porque a confiança total é necessária para especificar um <xref:System.Xml.XmlResolver>, essa propriedade também não pode ser definida.  
  
 Esse resolvedor é usado quando o XSLT `document()` função é invocada. Ele não é usado para resolver `xsl:import` e `xsl:include` elementos referenciados na folha de estilos. Para especificar uma <xref:System.Xml.XmlResolver> ser usado para resolver `xsl:import` e `xsl:include` elementos referenciados na folha de estilos, use o <xref:System.Xml.Xsl.XslTransform.Load%2A> sobrecarga que utiliza um <xref:System.Xml.XmlResolver> como um dos seus argumentos.  
  
> [!NOTE]
>  Esta propriedade está obsoleta na versão 1.1 do .NET Framework. Especificando um <xref:System.Xml.XmlResolver> usando o <xref:System.Xml.Xsl.XslTransform.Transform%2A> método é a prática recomendada. Nesse caso, o <xref:System.Xml.XmlResolver> não é armazenado em cache após o <xref:System.Xml.Xsl.XslTransform.Transform%2A> método é concluído.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
      </Docs>
    </Member>
  </Members>
</Type>