<Type Name="EventWaitHandleAccessRule" FullName="System.Security.AccessControl.EventWaitHandleAccessRule">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="85f0b3a3c6b31b72d8171a0dfd5a4d76a157b098" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39756061" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class EventWaitHandleAccessRule : System.Security.AccessControl.AccessRule" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit EventWaitHandleAccessRule extends System.Security.AccessControl.AccessRule" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.EventWaitHandleAccessRule" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class EventWaitHandleAccessRule&#xA;Inherits AccessRule" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventWaitHandleAccessRule sealed : System::Security::AccessControl::AccessRule" />
  <TypeSignature Language="F#" Value="type EventWaitHandleAccessRule = class&#xA;    inherit AccessRule" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.AccessControl.AccessRule</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa um conjunto de direitos de acesso permitidos ou negados para um usuário ou grupo. Essa classe não pode ser herdada.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Security.AccessControl.EventWaitHandleAccessRule> classe é parte de um conjunto de classes do .NET Framework fornece para gerenciar a segurança de controle de acesso do Windows em eventos de sistema nomeado. Para obter uma visão geral dessas classes, e sua relação com as estruturas de controle de acesso subjacentes do Windows, consulte <xref:System.Security.AccessControl.EventWaitHandleSecurity>.  
  
> [!NOTE]
>  Segurança de controle de acesso do Windows é significativa apenas para eventos de sistema nomeado. Se um <xref:System.Threading.EventWaitHandle> objeto representa um evento local, o controle de acesso é irrelevante.  
  
 Para obter uma lista das regras aplicadas a um evento nomeado, use o <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType> método para obter uma <xref:System.Security.AccessControl.EventWaitHandleSecurity> do objeto e, em seguida, use seu <xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A> método para obter uma coleção de <xref:System.Security.AccessControl.EventWaitHandleAccessRule> objetos.  
  
 <xref:System.Security.AccessControl.EventWaitHandleAccessRule> objetos não mapeiam um para um com entradas de controle de acesso em que a lista de controle de acesso discricionário (DACL) subjacente. Quando você receber o conjunto de todas as regras de acesso para um evento, o conjunto contém o número mínimo de regras necessárias no momento para expressar a todas as entradas de controle de acesso.  
  
> [!NOTE]
>  As entradas de controle de acesso subjacente alteram como aplicar e remover as regras. As informações nas regras serão mescladas se possível, para manter o menor número de entradas de controle de acesso. Assim, ao obter a lista atual de regras, ele pode não ser exatamente igual a lista de todas as regras que você adicionou.  
  
 Use <xref:System.Security.AccessControl.EventWaitHandleAccessRule> objetos para especificar os direitos de acesso para permitir ou negar a um usuário ou grupo. Um <xref:System.Security.AccessControl.EventWaitHandleAccessRule> do objeto sempre representa o acesso permitido ou negado acesso, nunca ambos.  
  
 Para aplicar uma regra a um evento de sistema nomeado, use o <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType> método para obter o <xref:System.Security.AccessControl.EventWaitHandleSecurity> objeto. Modificar a <xref:System.Security.AccessControl.EventWaitHandleSecurity> objeto por meio de seus métodos para adicionar a regra e, em seguida, use o <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType> método anexar novamente o objeto de segurança.  
  
> [!IMPORTANT]
>  Alterações feitas em um <xref:System.Security.AccessControl.EventWaitHandleSecurity> objeto não afetam os níveis de acesso do evento nomeado até que você chame o <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType> método para atribuir o objeto de segurança alterada para o evento nomeado.  
  
 <xref:System.Security.AccessControl.EventWaitHandleAccessRule> os objetos são imutáveis. Segurança para um evento é modificada usando os métodos do <xref:System.Security.AccessControl.EventWaitHandleSecurity> classe para adicionar ou remover regras; conforme você faz isso, as entradas de controle de acesso subjacentes são modificadas.  
  
> [!NOTE]
>  Não há suporte para segurança em objetos de sincronização para o Windows 98 ou Windows Millennium Edition.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra a criação e uso de <xref:System.Security.AccessControl.EventWaitHandleAccessRule> objetos. O exemplo cria um <xref:System.Security.AccessControl.EventWaitHandleSecurity> objeto, adiciona regras que permitirem e negar vários direitos para o usuário atual e exibe o par resultante de regras. O exemplo, em seguida, permite que novos direitos para o usuário atual e exibe o resultado, mostrando que os novos direitos são mesclados com existente <xref:System.Security.AccessControl.AccessControlType.Allow> regra.  
  
> [!NOTE]
>  Este exemplo não anexa o objeto de segurança para um <xref:System.Threading.EventWaitHandle> objeto. Exemplos que anexar objetos de segurança podem ser encontrados em <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType> e <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Security.AccessControl.EventWaitHandleSecurity" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.AccessControl.EventWaitHandleAccessRule" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventWaitHandleAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.EventWaitHandleRights eventRights, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Principal.IdentityReference identity, valuetype System.Security.AccessControl.EventWaitHandleRights eventRights, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (identity As IdentityReference, eventRights As EventWaitHandleRights, type As AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventWaitHandleAccessRule(System::Security::Principal::IdentityReference ^ identity, System::Security::AccessControl::EventWaitHandleRights eventRights, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.EventWaitHandleAccessRule : System.Security.Principal.IdentityReference * System.Security.AccessControl.EventWaitHandleRights * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.EventWaitHandleAccessRule" Usage="new System.Security.AccessControl.EventWaitHandleAccessRule (identity, eventRights, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="eventRights" Type="System.Security.AccessControl.EventWaitHandleRights" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">O usuário ou grupo ao qual a regra se aplica. Deve ser do tipo <see cref="T:System.Security.Principal.SecurityIdentifier" /> ou um tipo como <see cref="T:System.Security.Principal.NTAccount" /> que pode ser convertido para o tipo <see cref="T:System.Security.Principal.SecurityIdentifier" />.</param>
        <param name="eventRights">Uma combinação bit a bit de valores <see cref="T:System.Security.AccessControl.EventWaitHandleRights" /> que especificam os direitos permitidos ou negados.</param>
        <param name="type">Um dos valores <see cref="T:System.Security.AccessControl.AccessControlType" /> que especificam se os direitos são permitidos ou negados.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.AccessControl.EventWaitHandleAccessRule" />, especificando o usuário ou grupo ao qual a regra se aplica, os direitos de acesso e se estes são permitidos ou negados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para aguardar um <xref:System.Threading.EventWaitHandle> (chamando o <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A> ou <xref:System.Threading.WaitHandle.WaitAll%2A> método), um usuário deve ter <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize?displayProperty=nameWithType> acesso. Para sinalizar um evento chamando o <xref:System.Threading.EventWaitHandle.Set%2A> método, ou para redefini-lo para o estado não sinalizado, chamando o <xref:System.Threading.EventWaitHandle.Reset%2A> método, um usuário deve ter <xref:System.Security.AccessControl.EventWaitHandleRights.Modify?displayProperty=nameWithType> acesso. Para sinalizar uma <xref:System.Threading.EventWaitHandle> do objeto e, em seguida, esperar por ele chamando o <xref:System.Threading.WaitHandle.SignalAndWait%2A> método, um usuário deve ter <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize> e <xref:System.Security.AccessControl.EventWaitHandleRights.Modify> acesso.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="eventRights" /> especifica um valor inválido.  
  
- ou - 
 <paramref name="type" /> especifica um valor inválido.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="identity" /> é <see langword="null" />.  
  
- ou - 
 <paramref name="eventRights" /> é zero.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identity" /> não é do tipo <see cref="T:System.Security.Principal.SecurityIdentifier" /> nem de um tipo como <see cref="T:System.Security.Principal.NTAccount" /> que pode ser convertido para o tipo <see cref="T:System.Security.Principal.SecurityIdentifier" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventWaitHandleAccessRule (string identity, System.Security.AccessControl.EventWaitHandleRights eventRights, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string identity, valuetype System.Security.AccessControl.EventWaitHandleRights eventRights, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (identity As String, eventRights As EventWaitHandleRights, type As AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventWaitHandleAccessRule(System::String ^ identity, System::Security::AccessControl::EventWaitHandleRights eventRights, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.EventWaitHandleAccessRule : string * System.Security.AccessControl.EventWaitHandleRights * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.EventWaitHandleAccessRule" Usage="new System.Security.AccessControl.EventWaitHandleAccessRule (identity, eventRights, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.String" />
        <Parameter Name="eventRights" Type="System.Security.AccessControl.EventWaitHandleRights" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">O nome do usuário ou grupo ao qual a regra se aplica.</param>
        <param name="eventRights">Uma combinação bit a bit de valores <see cref="T:System.Security.AccessControl.EventWaitHandleRights" /> que especificam os direitos permitidos ou negados.</param>
        <param name="type">Um dos valores <see cref="T:System.Security.AccessControl.AccessControlType" /> que especificam se os direitos são permitidos ou negados.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.AccessControl.EventWaitHandleAccessRule" />, especificando o nome do usuário ou do grupo ao qual a regra se aplica, os direitos de acesso e se eles são permitidos ou negados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para aguardar um <xref:System.Threading.EventWaitHandle> (chamando o <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A> ou <xref:System.Threading.WaitHandle.WaitAll%2A> método), um usuário deve ter <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize?displayProperty=nameWithType> acesso. Para sinalizar um evento chamando o <xref:System.Threading.EventWaitHandle.Set%2A> método, ou para redefini-lo para o estado não sinalizado, chamando o <xref:System.Threading.EventWaitHandle.Reset%2A> método, um usuário deve ter <xref:System.Security.AccessControl.EventWaitHandleRights.Modify?displayProperty=nameWithType> acesso. Para sinalizar uma <xref:System.Threading.EventWaitHandle> do objeto e, em seguida, esperar por ele chamando o <xref:System.Threading.WaitHandle.SignalAndWait%2A> método, um usuário deve ter <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize> e <xref:System.Security.AccessControl.EventWaitHandleRights.Modify> acesso.  
  
 Este construtor é equivalente a criar uma <xref:System.Security.Principal.NTAccount> objeto, passando `identity` para o <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=nameWithType> construtor e passando o recém-criado <xref:System.Security.Principal.NTAccount> do objeto para o <xref:System.Security.AccessControl.EventWaitHandleAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.EventWaitHandleRights%2CSystem.Security.AccessControl.AccessControlType%29> construtor.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra o uso desse construtor para criar <xref:System.Security.AccessControl.EventWaitHandleAccessRule> objetos. O exemplo cria um <xref:System.Security.AccessControl.EventWaitHandleSecurity> objeto, adiciona regras que permitirem e negar vários direitos para o usuário atual e exibe o par resultante de regras. O exemplo, em seguida, permite que novos direitos para o usuário atual e exibe o resultado, mostrando que os novos direitos são mesclados com existente <xref:System.Security.AccessControl.AccessControlType.Allow> regra.  
  
> [!NOTE]
>  Este exemplo não anexa o objeto de segurança para um <xref:System.Threading.EventWaitHandle> objeto. Exemplos que anexar objetos de segurança podem ser encontrados em <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType> e <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="eventRights" /> especifica um valor inválido.  
  
- ou - 
 <paramref name="type" /> especifica um valor inválido.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="eventRights" /> é zero.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identity" /> é <see langword="null" />.  
  
- ou - 
 <paramref name="identity" /> é uma cadeia de comprimento zero.  
  
- ou - 
 <paramref name="identity" /> tem mais de 512 caracteres.</exception>
      </Docs>
    </Member>
    <Member MemberName="EventWaitHandleRights">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.EventWaitHandleRights EventWaitHandleRights { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.AccessControl.EventWaitHandleRights EventWaitHandleRights" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EventWaitHandleRights As EventWaitHandleRights" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::AccessControl::EventWaitHandleRights EventWaitHandleRights { System::Security::AccessControl::EventWaitHandleRights get(); };" />
      <MemberSignature Language="F#" Value="member this.EventWaitHandleRights : System.Security.AccessControl.EventWaitHandleRights" Usage="System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.EventWaitHandleRights</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém os direitos permitidos ou negados pela regra de acesso.</summary>
        <value>Uma combinação bit a bit de valores <see cref="T:System.Security.AccessControl.EventWaitHandleRights" /> que indicam os direitos permitidos ou negados pela regra de acesso.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.EventWaitHandleAccessRule> os objetos são imutáveis. Você pode criar uma nova regra de acesso que representa um usuário diferente, diferentes direitos ou outro <xref:System.Security.AccessControl.AccessControlType>, mas você não pode modificar uma regra de acesso existente.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra o uso do <xref:System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights%2A> propriedade para exibir os direitos no conjunto de regras contidas em um <xref:System.Security.AccessControl.EventWaitHandleSecurity> objeto. O exemplo cria um <xref:System.Security.AccessControl.EventWaitHandleSecurity> objeto, adiciona regras que permitirem e negar vários direitos para o usuário atual e exibe o par resultante de regras. O exemplo, em seguida, permite que novos direitos para o usuário atual e exibe o resultado, mostrando que os novos direitos são mesclados com existente <xref:System.Security.AccessControl.AccessControlType.Allow> regra.  
  
> [!NOTE]
>  Este exemplo não anexa o objeto de segurança para um <xref:System.Threading.EventWaitHandle> objeto. Exemplos que anexar objetos de segurança podem ser encontrados em <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType> e <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>