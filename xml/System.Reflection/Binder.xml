<Type Name="Binder" FullName="System.Reflection.Binder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d6121e1819d33e0eb60a38a867d1fc55ab687d47" /><Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="11/27/2018" /><Meta Name="ms.locfileid" Value="52342098" /></Metadata><TypeSignature Language="C#" Value="public abstract class Binder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit Binder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Binder" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Binder" />
  <TypeSignature Language="C++ CLI" Value="public ref class Binder abstract" />
  <TypeSignature Language="F#" Value="type Binder = class" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDual)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Seleciona um membro de uma lista de candidatos e executa a conversão de tipo do tipo de argumento real para o tipo de argumento formal.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementações do <xref:System.Reflection.Binder> classe são usadas por métodos como <xref:System.Type.InvokeMember%2A?displayProperty=nameWithType>, que seleciona um conjunto de membros possíveis para executar, com base em um conjunto de tipos de parâmetro e valores de argumento; <xref:System.Type.GetMethod%2A?displayProperty=nameWithType>, que seleciona um método com base em tipos de parâmetro; e assim por diante.  
  
 Uma implementação padrão do <xref:System.Reflection.Binder> classe é fornecida pelo <xref:System.Type.DefaultBinder%2A?displayProperty=nameWithType> propriedade.  
  
   
  
## Examples  
 O exemplo a seguir implementa e demonstra todos os membros de `Binder` classe. O método particular `CanConvertFrom` localiza tipos compatíveis para um determinado tipo.  
  
 [!code-cpp[Binder_1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Binder_1/CPP/binder.cpp#1)]
 [!code-csharp[Binder_1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Binder_1/CS/binder.cs#1)]
 [!code-vb[Binder_1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Binder_1/VB/binder.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Quando você herda <see cref="T:System.Reflection.Binder" />, você deve substituir os seguintes membros: <see cref="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)" />, <see cref="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)" />, <see cref="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)" />, <see cref="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])" />, <see cref="M:System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])" />, e <see cref="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)" />.</para></block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Binder ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Binder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Binder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Reflection.Binder" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse construtor é chamado por construtores de classes derivadas, para inicializar o estado nesse tipo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindToField">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.FieldInfo BindToField (System.Reflection.BindingFlags bindingAttr, System.Reflection.FieldInfo[] match, object value, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo BindToField(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.FieldInfo[] match, object value, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function BindToField (bindingAttr As BindingFlags, match As FieldInfo(), value As Object, culture As CultureInfo) As FieldInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::FieldInfo ^ BindToField(System::Reflection::BindingFlags bindingAttr, cli::array &lt;System::Reflection::FieldInfo ^&gt; ^ match, System::Object ^ value, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member BindToField : System.Reflection.BindingFlags * System.Reflection.FieldInfo[] * obj * System.Globalization.CultureInfo -&gt; System.Reflection.FieldInfo" Usage="binder.BindToField (bindingAttr, match, value, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="match" Type="System.Reflection.FieldInfo[]" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">Uma combinação bit a bit dos valores <see cref="T:System.Reflection.BindingFlags" />.</param>
        <param name="match">O conjunto de campos que são candidatos para correspondência. Por exemplo, quando um objeto <see cref="T:System.Reflection.Binder" /> é usado por <see cref="Overload:System.Type.InvokeMember" />, esse parâmetro especifica o conjunto de campos que a reflexão determinou serem possíveis correspondências, normalmente porque eles têm o nome do membro correto. A implementação padrão fornecida por <see cref="P:System.Type.DefaultBinder" /> altera a ordem dessa matriz.</param>
        <param name="value">O valor do campo usado para localizar um campo correspondente.</param>
        <param name="culture">Uma instância de <see cref="T:System.Globalization.CultureInfo" /> que é usada para controlar a coerção de tipos de dados, em implementações de associador que impõem tipos. Caso <paramref name="culture" /> seja <see langword="null" />, <see cref="T:System.Globalization.CultureInfo" /> para o thread atual é usado.  
  
Observação: por exemplo, se uma implementação de associador permite a coerção de valores de cadeia de caracteres em tipos numéricos, esse parâmetro é necessário para converter um <see langword="String" /> que representa 1000 em um valor <see langword="Double" />, pois 1000 é representado de forma diferente por diferentes culturas. O associador padrão não executa coerções de cadeia de caracteres desse tipo.</param>
        <summary>Seleciona um campo do conjunto determinado de campos, com base nos critérios especificados.</summary>
        <returns>O campo correspondente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `bindingAttr` não inclui <xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>, a implementação de associador padrão fornecida pela <xref:System.Type.DefaultBinder%2A?displayProperty=nameWithType> simplesmente retorna o primeiro elemento da `match`. Nenhuma seleção for feita.  
  
 Esse método controla a associação fornecida pelo <xref:System.Type.InvokeMember%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">Para o associador padrão, <paramref name="bindingAttr" /> inclui <see cref="F:System.Reflection.BindingFlags.SetField" /> e <paramref name="match" /> contém vários campos que são correspondências igualmente boas para <paramref name="value" />. Por exemplo, <paramref name="value" /> contém um objeto <c>MyClass</c> que implementa a interface <c>IMyClass</c> e <paramref name="match" /> contém um campo do tipo <c>MyClass</c> e um campo do tipo <c>IMyClass</c>.</exception>
        <exception cref="T:System.MissingFieldException">Para o associador de padrão <paramref name="bindingAttr" /> inclui <see cref="F:System.Reflection.BindingFlags.SetField" /> e <paramref name="match" /> não contém campos que possam aceitar <paramref name="value" />.</exception>
        <exception cref="T:System.NullReferenceException">Para o associador padrão, <paramref name="bindingAttr" /> inclui <see cref="F:System.Reflection.BindingFlags.SetField" /> e <paramref name="match" /> é <see langword="null" /> ou uma matriz vazia.  
  
- ou - 
 <paramref name="bindingAttr" /> inclui <see cref="F:System.Reflection.BindingFlags.SetField" /> e <paramref name="value" /> é <see langword="null" />.</exception>
        <altmember cref="T:System.Reflection.FieldInfo" />
      </Docs>
    </Member>
    <Member MemberName="BindToMethod">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodBase BindToMethod (System.Reflection.BindingFlags bindingAttr, System.Reflection.MethodBase[] match, ref object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] names, out object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodBase BindToMethod(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.MethodBase[] match, object[]&amp; args, valuetype System.Reflection.ParameterModifier[] modifiers, class System.Globalization.CultureInfo culture, string[] names, [out] object&amp; state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function BindToMethod (bindingAttr As BindingFlags, match As MethodBase(), ByRef args As Object(), modifiers As ParameterModifier(), culture As CultureInfo, names As String(), ByRef state As Object) As MethodBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::MethodBase ^ BindToMethod(System::Reflection::BindingFlags bindingAttr, cli::array &lt;System::Reflection::MethodBase ^&gt; ^ match, cli::array &lt;System::Object ^&gt; ^ % args, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::String ^&gt; ^ names, [Runtime::InteropServices::Out] System::Object ^ % state);" />
      <MemberSignature Language="F#" Value="abstract member BindToMethod : System.Reflection.BindingFlags * System.Reflection.MethodBase[] *  * System.Reflection.ParameterModifier[] * System.Globalization.CultureInfo * string[] *  -&gt; System.Reflection.MethodBase" Usage="binder.BindToMethod (bindingAttr, match, args, modifiers, culture, names, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="match" Type="System.Reflection.MethodBase[]" />
        <Parameter Name="args" Type="System.Object[]" RefType="ref" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="names" Type="System.String[]" />
        <Parameter Name="state" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">Uma combinação bit a bit dos valores <see cref="T:System.Reflection.BindingFlags" />.</param>
        <param name="match">O conjunto de métodos que são candidatos para correspondência. Por exemplo, quando um objeto <see cref="T:System.Reflection.Binder" /> é usado por <see cref="Overload:System.Type.InvokeMember" />, esse parâmetro especifica o conjunto de métodos que a reflexão determinou ser possível fazer a correspondência, normalmente, porque eles têm o nome do membro correto. A implementação padrão fornecida por <see cref="P:System.Type.DefaultBinder" /> altera a ordem dessa matriz.</param>
        <param name="args">Os argumentos passados. O associador pode alterar a ordem dos argumentos nessa matriz; por exemplo, o associador padrão altera a ordem dos argumentos se o parâmetro <paramref name="names" /> é usado para especificar uma ordem diferente da ordem posicional. Se uma implementação de associador impõe tipos de argumento, os tipos e valores dos argumentos também podem ser alterados.</param>
        <param name="modifiers">Uma matriz de modificadores de parâmetro que permite que a associação funcione com assinaturas de parâmetro nas quais os tipos foram modificados. A implementação de associador padrão não usa esse parâmetro.</param>
        <param name="culture">Uma instância de <see cref="T:System.Globalization.CultureInfo" /> que é usada para controlar a coerção de tipos de dados, em implementações de associador que impõem tipos. Caso <paramref name="culture" /> seja <see langword="null" />, <see cref="T:System.Globalization.CultureInfo" /> para o thread atual é usado.  
  
Observação: por exemplo, se uma implementação de associador permite a coerção de valores de cadeia de caracteres em tipos numéricos, esse parâmetro é necessário para converter um <see langword="String" /> que representa 1000 em um valor <see langword="Double" />, pois 1000 é representado de forma diferente por diferentes culturas. O associador padrão não executa coerções de cadeia de caracteres desse tipo.</param>
        <param name="names">Os nomes de parâmetro, se eles deverão ser considerados ao fazer a correspondência ou <see langword="null" />, se os argumentos deverão ser tratados como exclusivamente posicionais. Por exemplo, nomes de parâmetro deverão ser usados se os argumentos não forem fornecidos na ordem posicional.</param>
        <param name="state">Depois que o método for retornado, <paramref name="state" /> conterá um objeto fornecido pelo associador que mantém o controle da reordenação de argumento. O associador cria esse objeto e é o único consumidor dele. Se <paramref name="state" /> não for <see langword="null" /> quando <see langword="BindToMethod" /> for retornado, será necessário passar <paramref name="state" /> para o método <see cref="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)" /> se você desejar restaurar <paramref name="args" /> para a ordem original, por exemplo, para que seja possível recuperar os valores de parâmetros <see langword="ref" /> (parâmetros <see langword="ByRef" /> no Visual Basic).</param>
        <summary>Seleciona um método a ser invocado do conjunto de métodos especificado, de acordo com os argumentos fornecidos.</summary>
        <returns>O método correspondente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O associador padrão leva em consideração os dois parâmetros que têm valores e `params` matrizes (`ParamArray` matrizes no Visual Basic). Assim, é possível localizar uma correspondência em casos em que `args` e `match` não contêm o mesmo número de elementos.  
  
 O associador permite que um cliente mapear a matriz de argumentos para sua forma original se a matriz de argumentos foram manipulada pelo <xref:System.Reflection.Binder.BindToMethod%2A>. Use esse recurso de remapeamento de obter argumentos por referência quando esses argumentos estão presentes. Quando você passa argumentos por nome, o associador reorganiza a matriz de argumentos. O `state` parâmetro mantém o controle da reordenação, permitindo que o associador de argumento <xref:System.Reflection.Binder.ReorderArgumentArray%2A> método para reordenar a matriz de argumentos em sua forma original.  
  
 O <xref:System.Reflection.Binder.BindToMethod%2A> método é usado pelo <xref:System.Type.InvokeMember%2A?displayProperty=nameWithType> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">Para o associador padrão, <paramref name="match" /> contém vários métodos que são correspondências igualmente boas para <paramref name="args" />. Por exemplo, <paramref name="args" /> contém um objeto <c>MyClass</c> que implementa a interface <c>IMyClass</c> e <paramref name="match" /> contém um método que usa <c>MyClass</c> e um método que usa <c>IMyClass</c>.</exception>
        <exception cref="T:System.MissingMethodException">Para o associador padrão, <paramref name="match" /> não contém nenhum método que pode aceitar os argumentos fornecidos em <paramref name="args" />.</exception>
        <exception cref="T:System.ArgumentException">Para o associador padrão, <paramref name="match" /> é <see langword="null" /> ou uma matriz vazia.</exception>
        <altmember cref="T:System.Reflection.MethodBase" />
      </Docs>
    </Member>
    <Member MemberName="CanChangeType">
      <MemberSignature Language="C#" Value="public virtual bool CanChangeType (object value, Type type, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanChangeType(object value, class System.Type type, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Binder.CanChangeType(System.Object,System.Type,System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanChangeType(System::Object ^ value, Type ^ type, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member CanChangeType : obj * Type * System.Globalization.CultureInfo -&gt; bool&#xA;override this.CanChangeType : obj * Type * System.Globalization.CultureInfo -&gt; bool" Usage="binder.CanChangeType (value, type, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="type">To be added.</param>
        <param name="culture">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangeType">
      <MemberSignature Language="C#" Value="public abstract object ChangeType (object value, Type type, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ChangeType(object value, class System.Type type, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ ChangeType(System::Object ^ value, Type ^ type, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member ChangeType : obj * Type * System.Globalization.CultureInfo -&gt; obj" Usage="binder.ChangeType (value, type, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="value">O objeto a ser alterado em um novo <see langword="Type" />.</param>
        <param name="type">O novo <see langword="Type" /> que <paramref name="value" /> se tornará.</param>
        <param name="culture">Uma instância de <see cref="T:System.Globalization.CultureInfo" /> que é usada para controlar a coerção de tipos de dados. Caso <paramref name="culture" /> seja <see langword="null" />, <see cref="T:System.Globalization.CultureInfo" /> para o thread atual é usado.  
  
Observação: por exemplo, esse parâmetro é necessário para converter um <see langword="String" /> que representa 1000 em um valor <see langword="Double" />, porque 1000 é representado de forma diferente por diferentes culturas.</param>
        <summary>Altera o tipo do <see langword="Object" /> determinado para o <see langword="Type" /> determinado.</summary>
        <returns>Um objeto que contém o valor especificado como o novo tipo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Reflexão modela as regras de acessibilidade do common type system. Por exemplo, se o chamador estiver no mesmo assembly, o chamador não precisar permissões especiais para membros internos. Caso contrário, o chamador precisa <xref:System.Security.Permissions.ReflectionPermission>. Isso é consistente com a pesquisa de membros que são protegidas, privadas e assim por diante.  
  
 O princípio geral é que `ChangeType` deve realizar apenas coerções, que nunca perdem dados de expansão. Um exemplo de uma coerção de ampliação é coerção um valor que é um inteiro com sinal de 32 bits para um valor que é um inteiro com sinal de 64 bits. Isso é diferenciado de uma restrição coerção, que poderá perder dados. Um exemplo de uma restrição coerção é coerção um inteiro com sinal de 64 bits em um inteiro com sinal de 32 bits.  
  
 A tabela a seguir lista as coerções executadas pelo padrão `ChangeType`.  
  
|Tipo de origem|Tipo de destino|  
|-----------------|-----------------|  
|Qualquer tipo|Seu tipo base.|  
|Qualquer tipo|A interface que ele implementa.|  
|Char|UInt16, UInt32, Int32, UInt64, Int64, Single e Double|  
|Byte|Char, UInt16, Int16, UInt32, Int32, UInt64, Int64, Single e Double|  
|SByte|Int16, Int32, Int64, Single e Double|  
|UInt16|UInt32, Int32, UInt64, Int64, Single e Double|  
|Int16|Int32, Int64, Single e Double|  
|UInt32|UInt64, Int64, Single e Double|  
|Int32|Int64, Single e Double|  
|UInt64|Single e Double|  
|Int64|Single e Double|  
|Simples|Duplo|  
|Não referência|Por referência.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReorderArgumentArray">
      <MemberSignature Language="C#" Value="public abstract void ReorderArgumentArray (ref object[] args, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReorderArgumentArray(object[]&amp; args, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub ReorderArgumentArray (ByRef args As Object(), state As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void ReorderArgumentArray(cli::array &lt;System::Object ^&gt; ^ % args, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member ReorderArgumentArray :  * obj -&gt; unit" Usage="binder.ReorderArgumentArray (args, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Object[]" RefType="ref" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="args">Os argumentos reais que são passados. Tanto os tipos quanto os valores dos argumentos podem ser alterados.</param>
        <param name="state">Um objeto fornecido pelo associador que mantém o controle da reordenação de argumentos.</param>
        <summary>Após o retorno de <see cref="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)" />, o argumento <paramref name="args" /> é restaurado ao que era quando veio de <see langword="BindToMethod" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O common language runtime chama esse método se `state` não é `null` após um retorno de `BindToMethod`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectMethod">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodBase SelectMethod (System.Reflection.BindingFlags bindingAttr, System.Reflection.MethodBase[] match, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodBase SelectMethod(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.MethodBase[] match, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function SelectMethod (bindingAttr As BindingFlags, match As MethodBase(), types As Type(), modifiers As ParameterModifier()) As MethodBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::MethodBase ^ SelectMethod(System::Reflection::BindingFlags bindingAttr, cli::array &lt;System::Reflection::MethodBase ^&gt; ^ match, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member SelectMethod : System.Reflection.BindingFlags * System.Reflection.MethodBase[] * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodBase" Usage="binder.SelectMethod (bindingAttr, match, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="match" Type="System.Reflection.MethodBase[]" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">Uma combinação bit a bit dos valores <see cref="T:System.Reflection.BindingFlags" />.</param>
        <param name="match">O conjunto de métodos que são candidatos para correspondência. Por exemplo, quando um objeto <see cref="T:System.Reflection.Binder" /> é usado por <see cref="Overload:System.Type.InvokeMember" />, esse parâmetro especifica o conjunto de métodos que a reflexão determinou ser possível fazer a correspondência, normalmente, porque eles têm o nome do membro correto. A implementação padrão fornecida por <see cref="P:System.Type.DefaultBinder" /> altera a ordem dessa matriz.</param>
        <param name="types">Os tipos de parâmetro usados para localizar um método correspondente.</param>
        <param name="modifiers">Uma matriz de modificadores de parâmetro que permite que a associação funcione com assinaturas de parâmetro nas quais os tipos foram modificados.</param>
        <summary>Seleciona um método do conjunto de métodos especificado, de acordo com o tipo de argumento.</summary>
        <returns>O método correspondente, se encontrado; caso contrário, <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método deverá retornar `null` se nenhum método corresponde aos critérios. Esse método controla a seleção fornecida pelos `GetConstructor` e `GetMethod` métodos em `Type`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">Para o associador padrão, <paramref name="match" /> contém vários métodos que são correspondências igualmente boas para os tipos de parâmetro descritos por <paramref name="types" />. Por exemplo, a matriz em <paramref name="types" /> contém um objeto <see cref="T:System.Type" /> para <c>MyClass</c> e a matriz em <paramref name="match" /> contém um método que usa uma classe base de <c>MyClass</c> e um método que usa uma interface que <c>MyClass</c> implementa.</exception>
        <exception cref="T:System.ArgumentException">Para o associador padrão, <paramref name="match" /> é <see langword="null" /> ou uma matriz vazia.  
  
- ou - 
Um elemento de <paramref name="types" /> deriva de <see cref="T:System.Type" />, mas não é do tipo <see langword="RuntimeType" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SelectProperty">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.PropertyInfo SelectProperty (System.Reflection.BindingFlags bindingAttr, System.Reflection.PropertyInfo[] match, Type returnType, Type[] indexes, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo SelectProperty(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.PropertyInfo[] match, class System.Type returnType, class System.Type[] indexes, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function SelectProperty (bindingAttr As BindingFlags, match As PropertyInfo(), returnType As Type, indexes As Type(), modifiers As ParameterModifier()) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::PropertyInfo ^ SelectProperty(System::Reflection::BindingFlags bindingAttr, cli::array &lt;System::Reflection::PropertyInfo ^&gt; ^ match, Type ^ returnType, cli::array &lt;Type ^&gt; ^ indexes, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member SelectProperty : System.Reflection.BindingFlags * System.Reflection.PropertyInfo[] * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo" Usage="binder.SelectProperty (bindingAttr, match, returnType, indexes, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="match" Type="System.Reflection.PropertyInfo[]" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="indexes" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">Uma combinação bit a bit dos valores <see cref="T:System.Reflection.BindingFlags" />.</param>
        <param name="match">O conjunto de propriedades que são candidatas para correspondência. Por exemplo, quando um objeto <see cref="T:System.Reflection.Binder" /> é usado por <see cref="Overload:System.Type.InvokeMember" />, esse parâmetro especifica o conjunto de propriedades que a reflexão determinou serem possíveis correspondências, normalmente porque elas têm o nome do membro correto. A implementação padrão fornecida por <see cref="P:System.Type.DefaultBinder" /> altera a ordem dessa matriz.</param>
        <param name="returnType">O valor retornado que a propriedade correspondente deve ter.</param>
        <param name="indexes">Os tipos de índice da propriedade que está sendo pesquisada. Usados para indexar propriedades como o indexador para uma classe.</param>
        <param name="modifiers">Uma matriz de modificadores de parâmetro que permite que a associação funcione com assinaturas de parâmetro nas quais os tipos foram modificados.</param>
        <summary>Seleciona uma propriedade do conjunto determinado de propriedades, com base nos critérios especificados.</summary>
        <returns>A propriedade correspondente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método controla a seleção fornecida pelos `GetProperty` método no `Type`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">Para o associador padrão, <paramref name="match" /> contém várias propriedades que são correspondências igualmente boas para <paramref name="returnType" /> e <paramref name="indexes" />.</exception>
        <exception cref="T:System.ArgumentException">Para o associador padrão, <paramref name="match" /> é <see langword="null" /> ou uma matriz vazia.</exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
      </Docs>
    </Member>
  </Members>
</Type>