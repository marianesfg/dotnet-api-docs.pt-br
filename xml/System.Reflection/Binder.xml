<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Binder.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5f869abb652c1fe266ac609209e86d2fa7f433b6b.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f869abb652c1fe266ac609209e86d2fa7f433b6b</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.Binder">
          <source>Selects a member from a list of candidates, and performs type conversion from actual argument type to formal argument type.</source>
          <target state="translated">Seleciona um membro de uma lista de candidatos e executa a conversão de tipo do tipo de argumento real para o tipo de argumento formal.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Binder">
          <source>Implementations of the <ph id="ph1">&lt;xref:System.Reflection.Binder&gt;</ph> class are used by methods such as <ph id="ph2">&lt;xref:System.Type.InvokeMember%2A?displayProperty=nameWithType&gt;</ph>, which selects from a set of possible members to execute, based on a set of parameter types and argument values; <ph id="ph3">&lt;xref:System.Type.GetMethod%2A?displayProperty=nameWithType&gt;</ph>, which selects a method based on parameter types; and so on.</source>
          <target state="translated">Implementações do <ph id="ph1">&lt;xref:System.Reflection.Binder&gt;</ph> classe são usados por métodos como <ph id="ph2">&lt;xref:System.Type.InvokeMember%2A?displayProperty=nameWithType&gt;</ph>, que seleciona um conjunto de membros possíveis para ser executada, com base em um conjunto de tipos de parâmetro e valores de argumento. <ph id="ph3">&lt;xref:System.Type.GetMethod%2A?displayProperty=nameWithType&gt;</ph>, que seleciona um método com base em tipos de parâmetro; e assim por diante.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Binder">
          <source>A default implementation of the <ph id="ph1">&lt;xref:System.Reflection.Binder&gt;</ph> class is provided by the <ph id="ph2">&lt;xref:System.Type.DefaultBinder%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">Uma implementação padrão de <ph id="ph1">&lt;xref:System.Reflection.Binder&gt;</ph> classe é fornecida pelo <ph id="ph2">&lt;xref:System.Type.DefaultBinder%2A?displayProperty=nameWithType&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Binder">
          <source>The following example implements and demonstrates all members of the <ph id="ph1">`Binder`</ph> class.</source>
          <target state="translated">O exemplo a seguir implementa e demonstra todos os membros de <ph id="ph1">`Binder`</ph> classe.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Binder">
          <source>The private method <ph id="ph1">`CanConvertFrom`</ph> finds compatible types for a given type.</source>
          <target state="translated">O método particular <ph id="ph1">`CanConvertFrom`</ph> localiza tipos compatíveis para um determinado tipo.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Binder">
          <source>When you inherit from <ph id="ph1">&lt;see cref="T:System.Reflection.Binder" /&gt;</ph>, you must override the following members: <ph id="ph2">&lt;see cref="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)" /&gt;</ph>, <ph id="ph3">&lt;see cref="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)" /&gt;</ph>, <ph id="ph4">&lt;see cref="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)" /&gt;</ph>, <ph id="ph5">&lt;see cref="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])" /&gt;</ph>, <ph id="ph6">&lt;see cref="M:System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])" /&gt;</ph>, and <ph id="ph7">&lt;see cref="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)" /&gt;</ph>.</source>
          <target state="translated">Ao herdar de <ph id="ph1">&lt;see cref="T:System.Reflection.Binder" /&gt;</ph>, você deve substituir os seguintes membros: <ph id="ph2">&lt;see cref="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)" /&gt;</ph>, <ph id="ph3">&lt;see cref="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)" /&gt;</ph>, <ph id="ph4">&lt;see cref="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)" /&gt;</ph>, <ph id="ph5">&lt;see cref="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])" /&gt;</ph>, <ph id="ph6">&lt;see cref="M:System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])" /&gt;</ph>, e <ph id="ph7">&lt;see cref="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Reflection.Binder" /&gt;</ph> class.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Reflection.Binder" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.#ctor">
          <source>This constructor is called by the constructors of derived classes, to initialize state in this type.</source>
          <target state="translated">Este construtor é chamado pelos construtores de classes derivadas, para inicializar o estado nesse tipo.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)">
          <source>A bitwise combination of <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> values.</source>
          <target state="translated">Uma combinação bit a bit dos valores <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)">
          <source>The set of fields that are candidates for matching.</source>
          <target state="translated">O conjunto de campos que são candidatos para correspondência.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)">
          <source>For example, when a <ph id="ph1">&lt;see cref="T:System.Reflection.Binder" /&gt;</ph> object is used by <ph id="ph2">&lt;see cref="Overload:System.Type.InvokeMember" /&gt;</ph>, this parameter specifies the set of fields that reflection has determined to be possible matches, typically because they have the correct member name.</source>
          <target state="translated">Por exemplo, quando um objeto <ph id="ph1">&lt;see cref="T:System.Reflection.Binder" /&gt;</ph> é usado por <ph id="ph2">&lt;see cref="Overload:System.Type.InvokeMember" /&gt;</ph>, esse parâmetro especifica o conjunto de campos que a reflexão determinou serem possíveis correspondências, normalmente porque eles têm o nome do membro correto.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)">
          <source>The default implementation provided by <ph id="ph1">&lt;see cref="P:System.Type.DefaultBinder" /&gt;</ph> changes the order of this array.</source>
          <target state="translated">A implementação padrão fornecida por <ph id="ph1">&lt;see cref="P:System.Type.DefaultBinder" /&gt;</ph> altera a ordem dessa matriz.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)">
          <source>The field value used to locate a matching field.</source>
          <target state="translated">O valor do campo usado para localizar um campo correspondente.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)">
          <source>An instance of <ph id="ph1">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> that is used to control the coercion of data types, in binder implementations that coerce types.</source>
          <target state="translated">Uma instância de <ph id="ph1">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> que é usada para controlar a coerção de tipos de dados, em implementações de associador que impõem tipos.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>culture<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the <ph id="ph2">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> for the current thread is used.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>culture<ept id="p1">&lt;/c&gt;</ept> for <ph id="ph1">&lt;see langword="null" /&gt;</ph>, a <ph id="ph2">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> do thread atual será usada.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)">
          <source>Note   For example, if a binder implementation allows coercion of string values to numeric types, this parameter is necessary to convert a <ph id="ph1">&lt;see langword="String" /&gt;</ph> that represents 1000 to a <ph id="ph2">&lt;see langword="Double" /&gt;</ph> value, because 1000 is represented differently by different cultures.</source>
          <target state="translated">Observação: por exemplo, se uma implementação de associador permite a coerção de valores de cadeia de caracteres em tipos numéricos, esse parâmetro é necessário para converter um <ph id="ph1">&lt;see langword="String" /&gt;</ph> que representa 1000 em um valor <ph id="ph2">&lt;see langword="Double" /&gt;</ph>, pois 1000 é representado de forma diferente por diferentes culturas.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)">
          <source>The default binder does not do such string coercions.</source>
          <target state="translated">O associador padrão não executa coerções de cadeia de caracteres desse tipo.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)">
          <source>Selects a field from the given set of fields, based on the specified criteria.</source>
          <target state="translated">Seleciona um campo do conjunto determinado de campos, com base nos critérios especificados.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)">
          <source>The matching field.</source>
          <target state="translated">O campo correspondente.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)">
          <source>If <ph id="ph1">`bindingAttr`</ph> does not include <ph id="ph2">&lt;xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType&gt;</ph>, the default binder implementation provided by <ph id="ph3">&lt;xref:System.Type.DefaultBinder%2A?displayProperty=nameWithType&gt;</ph> simply returns the first element of <ph id="ph4">`match`</ph>.</source>
          <target state="translated">Se <ph id="ph1">`bindingAttr`</ph> não inclui <ph id="ph2">&lt;xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType&gt;</ph>, a implementação de fichário padrão fornecida pelo <ph id="ph3">&lt;xref:System.Type.DefaultBinder%2A?displayProperty=nameWithType&gt;</ph> simplesmente retorna o primeiro elemento da <ph id="ph4">`match`</ph>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)">
          <source>No selection is done.</source>
          <target state="translated">Nenhuma seleção for feita.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)">
          <source>This method controls the binding provided by <ph id="ph1">&lt;xref:System.Type.InvokeMember%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Esse método controla a associação fornecida pelo <ph id="ph1">&lt;xref:System.Type.InvokeMember%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)">
          <source>For the default binder, <ph id="ph1">&lt;paramref name="bindingAttr" /&gt;</ph> includes <ph id="ph2">&lt;see cref="F:System.Reflection.BindingFlags.SetField" /&gt;</ph>, and <ph id="ph3">&lt;paramref name="match" /&gt;</ph> contains multiple fields that are equally good matches for <ph id="ph4">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Para o associador padrão, <ph id="ph1">&lt;paramref name="bindingAttr" /&gt;</ph> inclui <ph id="ph2">&lt;see cref="F:System.Reflection.BindingFlags.SetField" /&gt;</ph> e <ph id="ph3">&lt;paramref name="match" /&gt;</ph> contém vários campos que são correspondências igualmente boas para <ph id="ph4">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)">
          <source>For example, <ph id="ph1">&lt;paramref name="value" /&gt;</ph> contains a <bpt id="p1">&lt;c&gt;</bpt>MyClass<ept id="p1">&lt;/c&gt;</ept> object that implements the <bpt id="p2">&lt;c&gt;</bpt>IMyClass<ept id="p2">&lt;/c&gt;</ept> interface, and <ph id="ph2">&lt;paramref name="match" /&gt;</ph> contains a field of type <bpt id="p3">&lt;c&gt;</bpt>MyClass<ept id="p3">&lt;/c&gt;</ept> and a field of type <bpt id="p4">&lt;c&gt;</bpt>IMyClass<ept id="p4">&lt;/c&gt;</ept>.</source>
          <target state="translated">Por exemplo, <ph id="ph1">&lt;paramref name="value" /&gt;</ph> contém um objeto <bpt id="p1">&lt;c&gt;</bpt>MyClass<ept id="p1">&lt;/c&gt;</ept> que implementa a interface <bpt id="p2">&lt;c&gt;</bpt>IMyClass<ept id="p2">&lt;/c&gt;</ept> e <ph id="ph2">&lt;paramref name="match" /&gt;</ph> contém um campo do tipo <bpt id="p3">&lt;c&gt;</bpt>MyClass<ept id="p3">&lt;/c&gt;</ept> e um campo do tipo <bpt id="p4">&lt;c&gt;</bpt>IMyClass<ept id="p4">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)">
          <source>For the default binder, <ph id="ph1">&lt;paramref name="bindingAttr" /&gt;</ph> includes <ph id="ph2">&lt;see cref="F:System.Reflection.BindingFlags.SetField" /&gt;</ph>, and <ph id="ph3">&lt;paramref name="match" /&gt;</ph> contains no fields that can accept <ph id="ph4">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Para o associador de padrão <ph id="ph1">&lt;paramref name="bindingAttr" /&gt;</ph> inclui <ph id="ph2">&lt;see cref="F:System.Reflection.BindingFlags.SetField" /&gt;</ph> e <ph id="ph3">&lt;paramref name="match" /&gt;</ph> não contém campos que possam aceitar <ph id="ph4">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)">
          <source>For the default binder, <ph id="ph1">&lt;paramref name="bindingAttr" /&gt;</ph> includes <ph id="ph2">&lt;see cref="F:System.Reflection.BindingFlags.SetField" /&gt;</ph>, and <ph id="ph3">&lt;paramref name="match" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph> or an empty array.</source>
          <target state="translated">Para o associador padrão, <ph id="ph1">&lt;paramref name="bindingAttr" /&gt;</ph> inclui <ph id="ph2">&lt;see cref="F:System.Reflection.BindingFlags.SetField" /&gt;</ph> e <ph id="ph3">&lt;paramref name="match" /&gt;</ph> é <ph id="ph4">&lt;see langword="null" /&gt;</ph> ou uma matriz vazia.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)">
          <source><ph id="ph1">&lt;paramref name="bindingAttr" /&gt;</ph> includes <ph id="ph2">&lt;see cref="F:System.Reflection.BindingFlags.SetField" /&gt;</ph>, and <ph id="ph3">&lt;paramref name="value" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bindingAttr" /&gt;</ph> inclui <ph id="ph2">&lt;see cref="F:System.Reflection.BindingFlags.SetField" /&gt;</ph> e <ph id="ph3">&lt;paramref name="value" /&gt;</ph> é <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>A bitwise combination of <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> values.</source>
          <target state="translated">Uma combinação bit a bit dos valores <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>The set of methods that are candidates for matching.</source>
          <target state="translated">O conjunto de métodos que são candidatos para correspondência.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>For example, when a <ph id="ph1">&lt;see cref="T:System.Reflection.Binder" /&gt;</ph> object is used by <ph id="ph2">&lt;see cref="Overload:System.Type.InvokeMember" /&gt;</ph>, this parameter specifies the set of methods that reflection has determined to be possible matches, typically because they have the correct member name.</source>
          <target state="translated">Por exemplo, quando um objeto <ph id="ph1">&lt;see cref="T:System.Reflection.Binder" /&gt;</ph> é usado por <ph id="ph2">&lt;see cref="Overload:System.Type.InvokeMember" /&gt;</ph>, esse parâmetro especifica o conjunto de métodos que a reflexão determinou ser possível fazer a correspondência, normalmente, porque eles têm o nome do membro correto.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>The default implementation provided by <ph id="ph1">&lt;see cref="P:System.Type.DefaultBinder" /&gt;</ph> changes the order of this array.</source>
          <target state="translated">A implementação padrão fornecida por <ph id="ph1">&lt;see cref="P:System.Type.DefaultBinder" /&gt;</ph> altera a ordem dessa matriz.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>The arguments that are passed in.</source>
          <target state="translated">Os argumentos passados.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>The binder can change the order of the arguments in this array; for example, the default binder changes the order of arguments if the <bpt id="p1">&lt;c&gt;</bpt>names<ept id="p1">&lt;/c&gt;</ept> parameter is used to specify an order other than positional order.</source>
          <target state="translated">O associador pode alterar a ordem dos argumentos nessa matriz. Por exemplo, o associador padrão altera a ordem dos argumentos se o parâmetro <bpt id="p1">&lt;c&gt;</bpt>names<ept id="p1">&lt;/c&gt;</ept> é usado para especificar uma ordem diferente da ordem posicional.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>If a binder implementation coerces argument types, the types and values of the arguments can be changed as well.</source>
          <target state="translated">Se uma implementação de associador impõe tipos de argumento, os tipos e valores dos argumentos também podem ser alterados.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified.</source>
          <target state="translated">Uma matriz de modificadores de parâmetro que permite que a associação funcione com assinaturas de parâmetro nas quais os tipos foram modificados.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>The default binder implementation does not use this parameter.</source>
          <target state="translated">A implementação de associador padrão não usa esse parâmetro.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>An instance of <ph id="ph1">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> that is used to control the coercion of data types, in binder implementations that coerce types.</source>
          <target state="translated">Uma instância de <ph id="ph1">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> que é usada para controlar a coerção de tipos de dados, em implementações de associador que impõem tipos.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>culture<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the <ph id="ph2">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> for the current thread is used.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>culture<ept id="p1">&lt;/c&gt;</ept> for <ph id="ph1">&lt;see langword="null" /&gt;</ph>, a <ph id="ph2">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> do thread atual será usada.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>Note   For example, if a binder implementation allows coercion of string values to numeric types, this parameter is necessary to convert a <ph id="ph1">&lt;see langword="String" /&gt;</ph> that represents 1000 to a <ph id="ph2">&lt;see langword="Double" /&gt;</ph> value, because 1000 is represented differently by different cultures.</source>
          <target state="translated">Observação: por exemplo, se uma implementação de associador permite a coerção de valores de cadeia de caracteres em tipos numéricos, esse parâmetro é necessário para converter um <ph id="ph1">&lt;see langword="String" /&gt;</ph> que representa 1000 em um valor <ph id="ph2">&lt;see langword="Double" /&gt;</ph>, pois 1000 é representado de forma diferente por diferentes culturas.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>The default binder does not do such string coercions.</source>
          <target state="translated">O associador padrão não executa coerções de cadeia de caracteres desse tipo.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>The parameter names, if parameter names are to be considered when matching, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if arguments are to be treated as purely positional.</source>
          <target state="translated">Os nomes de parâmetro, se eles deverão ser considerados ao fazer a correspondência ou <ph id="ph1">&lt;see langword="null" /&gt;</ph>, se os argumentos deverão ser tratados como exclusivamente posicionais.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>For example, parameter names must be used if arguments are not supplied in positional order.</source>
          <target state="translated">Por exemplo, nomes de parâmetro deverão ser usados se os argumentos não forem fornecidos na ordem posicional.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>After the method returns, <bpt id="p1">&lt;c&gt;</bpt>state<ept id="p1">&lt;/c&gt;</ept> contains a binder-provided object that keeps track of argument reordering.</source>
          <target state="translated">Depois que o método for retornado, <bpt id="p1">&lt;c&gt;</bpt>state<ept id="p1">&lt;/c&gt;</ept> conterá um objeto fornecido pelo associador que mantém o controle da reordenação de argumentos.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>The binder creates this object, and the binder is the sole consumer of this object.</source>
          <target state="translated">O associador cria esse objeto e é o único consumidor dele.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>state<ept id="p1">&lt;/c&gt;</ept> is not <ph id="ph1">&lt;see langword="null" /&gt;</ph> when <ph id="ph2">&lt;see langword="BindToMethod" /&gt;</ph> returns, you must pass <bpt id="p2">&lt;c&gt;</bpt>state<ept id="p2">&lt;/c&gt;</ept> to the <ph id="ph3">&lt;see cref="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)" /&gt;</ph> method if you want to restore <bpt id="p3">&lt;c&gt;</bpt>args<ept id="p3">&lt;/c&gt;</ept> to its original order, for example, so that you can retrieve the values of <ph id="ph4">&lt;see langword="ref" /&gt;</ph> parameters (<ph id="ph5">&lt;see langword="ByRef" /&gt;</ph> parameters in Visual Basic).</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>state<ept id="p1">&lt;/c&gt;</ept> não for <ph id="ph1">&lt;see langword="null" /&gt;</ph> quando <ph id="ph2">&lt;see langword="BindToMethod" /&gt;</ph> for retornado, será necessário passar <bpt id="p2">&lt;c&gt;</bpt>state<ept id="p2">&lt;/c&gt;</ept> para o método <ph id="ph3">&lt;see cref="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)" /&gt;</ph> se você desejar restaurar <bpt id="p3">&lt;c&gt;</bpt>args<ept id="p3">&lt;/c&gt;</ept> para a ordem original, por exemplo, para que seja possível recuperar os valores de parâmetros <ph id="ph4">&lt;see langword="ref" /&gt;</ph> (parâmetros <ph id="ph5">&lt;see langword="ByRef" /&gt;</ph> no Visual Basic).</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>Selects a method to invoke from the given set of methods, based on the supplied arguments.</source>
          <target state="translated">Seleciona um método a ser invocado do conjunto de métodos especificado, de acordo com os argumentos fornecidos.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>The matching method.</source>
          <target state="translated">O método correspondente.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>The default binder takes into account both parameters that have values and <ph id="ph1">`params`</ph> arrays (<ph id="ph2">`ParamArray`</ph> arrays in Visual Basic).</source>
          <target state="translated">O associador padrão leva em consideração os dois parâmetros que têm valores e <ph id="ph1">`params`</ph> matrizes (<ph id="ph2">`ParamArray`</ph> matrizes no Visual Basic).</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>Thus, it is possible to find a match in cases where <ph id="ph1">`args`</ph> and <ph id="ph2">`match`</ph> do not contain the same number of elements.</source>
          <target state="translated">Portanto, é possível encontrar uma correspondência em casos onde <ph id="ph1">`args`</ph> e <ph id="ph2">`match`</ph> não contêm o mesmo número de elementos.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>The binder enables a client to map the array of arguments back to its original form if the argument array has been manipulated by <ph id="ph1">&lt;xref:System.Reflection.Binder.BindToMethod%2A&gt;</ph>.</source>
          <target state="translated">O associador permite que um cliente mapear a matriz de argumentos de volta para seu formato original se a matriz de argumentos foram manipulada pelo <ph id="ph1">&lt;xref:System.Reflection.Binder.BindToMethod%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>Use this remap capability to get back by-reference arguments when such arguments are present.</source>
          <target state="translated">Use esse recurso remapear obter argumentos por referência quando esses argumentos estão presentes.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>When you pass arguments by name, the binder reorders the argument array.</source>
          <target state="translated">Quando você passar argumentos por nome, o associador reorganiza a matriz de argumentos.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>The <ph id="ph1">`state`</ph> parameter keeps track of argument reordering, thus enabling the binder's <ph id="ph2">&lt;xref:System.Reflection.Binder.ReorderArgumentArray%2A&gt;</ph> method to reorder the argument array to its original form.</source>
          <target state="translated">O <ph id="ph1">`state`</ph> parâmetro mantém o controle de argumento reordenação, permitindo que o associador <ph id="ph2">&lt;xref:System.Reflection.Binder.ReorderArgumentArray%2A&gt;</ph> método para reordenar a matriz de argumentos para seu formato original.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.Binder.BindToMethod%2A&gt;</ph> method is used by the <ph id="ph2">&lt;xref:System.Type.InvokeMember%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Reflection.Binder.BindToMethod%2A&gt;</ph> método é usado pelo <ph id="ph2">&lt;xref:System.Type.InvokeMember%2A?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>For the default binder, <ph id="ph1">&lt;paramref name="match" /&gt;</ph> contains multiple methods that are equally good matches for <ph id="ph2">&lt;paramref name="args" /&gt;</ph>.</source>
          <target state="translated">Para o associador padrão, <ph id="ph1">&lt;paramref name="match" /&gt;</ph> contém vários métodos que são correspondências igualmente boas para <ph id="ph2">&lt;paramref name="args" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>For example, <ph id="ph1">&lt;paramref name="args" /&gt;</ph> contains a <bpt id="p1">&lt;c&gt;</bpt>MyClass<ept id="p1">&lt;/c&gt;</ept> object that implements the <bpt id="p2">&lt;c&gt;</bpt>IMyClass<ept id="p2">&lt;/c&gt;</ept> interface, and <ph id="ph2">&lt;paramref name="match" /&gt;</ph> contains a method that takes <bpt id="p3">&lt;c&gt;</bpt>MyClass<ept id="p3">&lt;/c&gt;</ept> and a method that takes <bpt id="p4">&lt;c&gt;</bpt>IMyClass<ept id="p4">&lt;/c&gt;</ept>.</source>
          <target state="translated">Por exemplo, <ph id="ph1">&lt;paramref name="args" /&gt;</ph> contém um objeto <bpt id="p1">&lt;c&gt;</bpt>MyClass<ept id="p1">&lt;/c&gt;</ept> que implementa a interface <bpt id="p2">&lt;c&gt;</bpt>IMyClass<ept id="p2">&lt;/c&gt;</ept> e <ph id="ph2">&lt;paramref name="match" /&gt;</ph> contém um método que usa <bpt id="p3">&lt;c&gt;</bpt>MyClass<ept id="p3">&lt;/c&gt;</ept> e um método que usa <bpt id="p4">&lt;c&gt;</bpt>IMyClass<ept id="p4">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>For the default binder, <ph id="ph1">&lt;paramref name="match" /&gt;</ph> contains no methods that can accept the arguments supplied in <ph id="ph2">&lt;paramref name="args" /&gt;</ph>.</source>
          <target state="translated">Para o associador padrão, <ph id="ph1">&lt;paramref name="match" /&gt;</ph> não contém nenhum método que pode aceitar os argumentos fornecidos em <ph id="ph2">&lt;paramref name="args" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>For the default binder, <ph id="ph1">&lt;paramref name="match" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> or an empty array.</source>
          <target state="translated">Para o associador padrão, <ph id="ph1">&lt;paramref name="match" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph> ou uma matriz vazia.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>The object to change into a new <ph id="ph1">&lt;see langword="Type" /&gt;</ph>.</source>
          <target state="translated">O objeto a ser alterado em um novo <ph id="ph1">&lt;see langword="Type" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>The new <ph id="ph1">&lt;see langword="Type" /&gt;</ph> that <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> will become.</source>
          <target state="translated">O novo <ph id="ph1">&lt;see langword="Type" /&gt;</ph> em que <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> se tornará.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>An instance of <ph id="ph1">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> that is used to control the coercion of data types.</source>
          <target state="translated">Uma instância de <ph id="ph1">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> que é usada para controlar a coerção de tipos de dados.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>culture<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the <ph id="ph2">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> for the current thread is used.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>culture<ept id="p1">&lt;/c&gt;</ept> for <ph id="ph1">&lt;see langword="null" /&gt;</ph>, a <ph id="ph2">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> do thread atual será usada.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>Note   For example, this parameter is necessary to convert a <ph id="ph1">&lt;see langword="String" /&gt;</ph> that represents 1000 to a <ph id="ph2">&lt;see langword="Double" /&gt;</ph> value, because 1000 is represented differently by different cultures.</source>
          <target state="translated">Observação: por exemplo, esse parâmetro é necessário para converter um <ph id="ph1">&lt;see langword="String" /&gt;</ph> que representa 1000 em um valor <ph id="ph2">&lt;see langword="Double" /&gt;</ph>, porque 1000 é representado de forma diferente por diferentes culturas.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>Changes the type of the given <ph id="ph1">&lt;see langword="Object" /&gt;</ph> to the given <ph id="ph2">&lt;see langword="Type" /&gt;</ph>.</source>
          <target state="translated">Altera o tipo do <ph id="ph1">&lt;see langword="Object" /&gt;</ph> determinado para o <ph id="ph2">&lt;see langword="Type" /&gt;</ph> determinado.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>An object that contains the given value as the new type.</source>
          <target state="translated">Um objeto que contém o valor especificado como o novo tipo.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>Reflection models the accessibility rules of the common type system.</source>
          <target state="translated">Reflexão de modelos de regras de acessibilidade do sistema de tipo comum.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>For example, if the caller is in the same assembly, the caller does not need special permissions for internal members.</source>
          <target state="translated">Por exemplo, se o chamador estiver no mesmo assembly, o chamador não precisa de permissões especiais para membros internos.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>Otherwise, the caller needs <ph id="ph1">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph>.</source>
          <target state="translated">Caso contrário, o chamador precisa <ph id="ph1">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>This is consistent with lookup of members that are protected, private, and so on.</source>
          <target state="translated">Isso é consistente com a pesquisa de membros que são protegidas, privadas e assim por diante.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>The general principle is that <ph id="ph1">`ChangeType`</ph> should perform only widening coercions, which never lose data.</source>
          <target state="translated">O princípio geral é que <ph id="ph1">`ChangeType`</ph> devem ser executadas somente widening coerções, que nunca perderem dados.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>An example of a widening coercion is coercing a value that is a 32-bit signed integer to a value that is a 64-bit signed integer.</source>
          <target state="translated">Um exemplo de uma coerção de ampliação é forçar o uso de um valor que é um inteiro assinado de 32 bits para um valor que é um inteiro assinado de 64 bits.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>This is distinguished from a narrowing coercion, which may lose data.</source>
          <target state="translated">Isso é diferenciado de uma restrição coerção, que pode perder dados.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>An example of a narrowing coercion is coercing a 64-bit signed integer to a 32-bit signed integer.</source>
          <target state="translated">Um exemplo de uma restrição coerção é forçar o uso de um inteiro assinado de 64 bits em um inteiro assinado de 32 bits.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>The following table lists the coercions performed by the default <ph id="ph1">`ChangeType`</ph>.</source>
          <target state="translated">A tabela a seguir lista as coerções executadas pelo padrão <ph id="ph1">`ChangeType`</ph>.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>Source type</source>
          <target state="translated">Tipo de origem</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>Target type</source>
          <target state="translated">Tipo de destino</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>Any type</source>
          <target state="translated">Qualquer tipo</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>Its base type.</source>
          <target state="translated">Seu tipo base.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>Any type</source>
          <target state="translated">Qualquer tipo</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>The interface it implements.</source>
          <target state="translated">A interface que ele implementa.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>Char</source>
          <target state="translated">Char</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>UInt16, UInt32, Int32, UInt64, Int64, Single, Double</source>
          <target state="translated">UInt16, UInt32, Int32, UInt64, Int64, Single e Double</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>Byte</source>
          <target state="translated">Byte</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>Char, UInt16, Int16, UInt32, Int32, UInt64, Int64, Single, Double</source>
          <target state="translated">Char, UInt16, Int16, UInt32, Int32, UInt64, Int64, Single e Double</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>SByte</source>
          <target state="translated">SByte</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>Int16, Int32, Int64, Single, Double</source>
          <target state="translated">Int16, Int32, Int64, Single e Double</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>UInt16</source>
          <target state="translated">UInt16</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>UInt32, Int32, UInt64, Int64, Single, Double</source>
          <target state="translated">UInt32, Int32, UInt64, Int64, Single e Double</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>Int16</source>
          <target state="translated">Int16</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>Int32, Int64, Single, Double</source>
          <target state="translated">Int32, Int64, Single e Double</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>UInt32</source>
          <target state="translated">UInt32</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>UInt64, Int64, Single, Double</source>
          <target state="translated">UInt64, Int64, Single e Double</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>Int32</source>
          <target state="translated">Int32</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>Int64, Single, Double</source>
          <target state="translated">Int64, Single e Double</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>UInt64</source>
          <target state="translated">UInt64</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>Single, Double</source>
          <target state="translated">Single e Double</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>Int64</source>
          <target state="translated">Int64</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>Single, Double</source>
          <target state="translated">Single e Double</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>Single</source>
          <target state="translated">Simples</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>Double</source>
          <target state="translated">Duplo</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>Non-reference</source>
          <target state="translated">Não referência</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>By-reference.</source>
          <target state="translated">Por referência.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)">
          <source>The actual arguments that are passed in.</source>
          <target state="translated">Os argumentos reais que são passados.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)">
          <source>Both the types and values of the arguments can be changed.</source>
          <target state="translated">Tanto os tipos quanto os valores dos argumentos podem ser alterados.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)">
          <source>A binder-provided object that keeps track of argument reordering.</source>
          <target state="translated">Um objeto fornecido pelo associador que mantém o controle da reordenação de argumentos.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)">
          <source>Upon returning from <ph id="ph1">&lt;see cref="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)" /&gt;</ph>, restores the <ph id="ph2">&lt;paramref name="args" /&gt;</ph> argument to what it was when it came from <ph id="ph3">&lt;see langword="BindToMethod" /&gt;</ph>.</source>
          <target state="translated">Após o retorno de <ph id="ph1">&lt;see cref="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)" /&gt;</ph>, o argumento <ph id="ph2">&lt;paramref name="args" /&gt;</ph> é restaurado ao que era quando veio de <ph id="ph3">&lt;see langword="BindToMethod" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)">
          <source>The common language runtime calls this method if <ph id="ph1">`state`</ph> is not <ph id="ph2">`null`</ph> after a return from <ph id="ph3">`BindToMethod`</ph>.</source>
          <target state="translated">O common language runtime chama esse método se <ph id="ph1">`state`</ph> não é <ph id="ph2">`null`</ph> após um retorno de <ph id="ph3">`BindToMethod`</ph>.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])">
          <source>A bitwise combination of <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> values.</source>
          <target state="translated">Uma combinação bit a bit dos valores <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])">
          <source>The set of methods that are candidates for matching.</source>
          <target state="translated">O conjunto de métodos que são candidatos para correspondência.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])">
          <source>For example, when a <ph id="ph1">&lt;see cref="T:System.Reflection.Binder" /&gt;</ph> object is used by <ph id="ph2">&lt;see cref="Overload:System.Type.InvokeMember" /&gt;</ph>, this parameter specifies the set of methods that reflection has determined to be possible matches, typically because they have the correct member name.</source>
          <target state="translated">Por exemplo, quando um objeto <ph id="ph1">&lt;see cref="T:System.Reflection.Binder" /&gt;</ph> é usado por <ph id="ph2">&lt;see cref="Overload:System.Type.InvokeMember" /&gt;</ph>, esse parâmetro especifica o conjunto de métodos que a reflexão determinou ser possível fazer a correspondência, normalmente, porque eles têm o nome do membro correto.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])">
          <source>The default implementation provided by <ph id="ph1">&lt;see cref="P:System.Type.DefaultBinder" /&gt;</ph> changes the order of this array.</source>
          <target state="translated">A implementação padrão fornecida por <ph id="ph1">&lt;see cref="P:System.Type.DefaultBinder" /&gt;</ph> altera a ordem dessa matriz.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])">
          <source>The parameter types used to locate a matching method.</source>
          <target state="translated">Os tipos de parâmetro usados para localizar um método correspondente.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])">
          <source>An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified.</source>
          <target state="translated">Uma matriz de modificadores de parâmetro que permite que a associação funcione com assinaturas de parâmetro nas quais os tipos foram modificados.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])">
          <source>Selects a method from the given set of methods, based on the argument type.</source>
          <target state="translated">Seleciona um método do conjunto de métodos especificado, de acordo com o tipo de argumento.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])">
          <source>The matching method, if found; otherwise, <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O método correspondente, se encontrado; caso contrário, <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])">
          <source>This method should return <ph id="ph1">`null`</ph> if no method matches the criteria.</source>
          <target state="translated">Esse método deve retornar <ph id="ph1">`null`</ph> se nenhum método corresponde aos critérios.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])">
          <source>This method controls the selection provided by the <ph id="ph1">`GetConstructor`</ph> and <ph id="ph2">`GetMethod`</ph> methods on <ph id="ph3">`Type`</ph>.</source>
          <target state="translated">Esse método controla a seleção fornecida pelo <ph id="ph1">`GetConstructor`</ph> e <ph id="ph2">`GetMethod`</ph> métodos em <ph id="ph3">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])">
          <source>For the default binder, <ph id="ph1">&lt;paramref name="match" /&gt;</ph> contains multiple methods that are equally good matches for the parameter types described by <ph id="ph2">&lt;paramref name="types" /&gt;</ph>.</source>
          <target state="translated">Para o associador padrão, <ph id="ph1">&lt;paramref name="match" /&gt;</ph> contém vários métodos que são correspondências igualmente boas para os tipos de parâmetro descritos por <ph id="ph2">&lt;paramref name="types" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])">
          <source>For example, the array in <ph id="ph1">&lt;paramref name="types" /&gt;</ph> contains a <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> object for <bpt id="p1">&lt;c&gt;</bpt>MyClass<ept id="p1">&lt;/c&gt;</ept> and the array in <ph id="ph3">&lt;paramref name="match" /&gt;</ph> contains a method that takes a base class of <bpt id="p2">&lt;c&gt;</bpt>MyClass<ept id="p2">&lt;/c&gt;</ept> and a method that takes an interface that <bpt id="p3">&lt;c&gt;</bpt>MyClass<ept id="p3">&lt;/c&gt;</ept> implements.</source>
          <target state="translated">Por exemplo, a matriz em <ph id="ph1">&lt;paramref name="types" /&gt;</ph> contém um objeto <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> para <bpt id="p1">&lt;c&gt;</bpt>MyClass<ept id="p1">&lt;/c&gt;</ept> e a matriz em <ph id="ph3">&lt;paramref name="match" /&gt;</ph> contém um método que usa uma classe base de <bpt id="p2">&lt;c&gt;</bpt>MyClass<ept id="p2">&lt;/c&gt;</ept> e um método que usa uma interface que <bpt id="p3">&lt;c&gt;</bpt>MyClass<ept id="p3">&lt;/c&gt;</ept> implementa.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])">
          <source>For the default binder, <ph id="ph1">&lt;paramref name="match" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> or an empty array.</source>
          <target state="translated">Para o associador padrão, <ph id="ph1">&lt;paramref name="match" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph> ou uma matriz vazia.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])">
          <source>An element of <ph id="ph1">&lt;paramref name="types" /&gt;</ph> derives from <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph>, but is not of type <ph id="ph3">&lt;see langword="RuntimeType" /&gt;</ph>.</source>
          <target state="translated">Um elemento de <ph id="ph1">&lt;paramref name="types" /&gt;</ph> deriva de <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph>, mas não é do tipo <ph id="ph3">&lt;see langword="RuntimeType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>A bitwise combination of <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> values.</source>
          <target state="translated">Uma combinação bit a bit dos valores <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>The set of properties that are candidates for matching.</source>
          <target state="translated">O conjunto de propriedades que são candidatas para correspondência.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>For example, when a <ph id="ph1">&lt;see cref="T:System.Reflection.Binder" /&gt;</ph> object is used by <ph id="ph2">&lt;see cref="Overload:System.Type.InvokeMember" /&gt;</ph>, this parameter specifies the set of properties that reflection has determined to be possible matches, typically because they have the correct member name.</source>
          <target state="translated">Por exemplo, quando um objeto <ph id="ph1">&lt;see cref="T:System.Reflection.Binder" /&gt;</ph> é usado por <ph id="ph2">&lt;see cref="Overload:System.Type.InvokeMember" /&gt;</ph>, esse parâmetro especifica o conjunto de propriedades que a reflexão determinou serem possíveis correspondências, normalmente porque elas têm o nome do membro correto.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>The default implementation provided by <ph id="ph1">&lt;see cref="P:System.Type.DefaultBinder" /&gt;</ph> changes the order of this array.</source>
          <target state="translated">A implementação padrão fornecida por <ph id="ph1">&lt;see cref="P:System.Type.DefaultBinder" /&gt;</ph> altera a ordem dessa matriz.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>The return value the matching property must have.</source>
          <target state="translated">O valor retornado que a propriedade correspondente deve ter.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>The index types of the property being searched for.</source>
          <target state="translated">Os tipos de índice da propriedade que está sendo pesquisada.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>Used for index properties such as the indexer for a class.</source>
          <target state="translated">Usados para indexar propriedades como o indexador para uma classe.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified.</source>
          <target state="translated">Uma matriz de modificadores de parâmetro que permite que a associação funcione com assinaturas de parâmetro nas quais os tipos foram modificados.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>Selects a property from the given set of properties, based on the specified criteria.</source>
          <target state="translated">Seleciona uma propriedade do conjunto determinado de propriedades, com base nos critérios especificados.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>The matching property.</source>
          <target state="translated">A propriedade correspondente.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>This method controls the selection provided by the <ph id="ph1">`GetProperty`</ph> method on <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Esse método controla a seleção fornecida pelo <ph id="ph1">`GetProperty`</ph> método <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>For the default binder, <ph id="ph1">&lt;paramref name="match" /&gt;</ph> contains multiple properties that are equally good matches for <ph id="ph2">&lt;paramref name="returnType" /&gt;</ph> and <ph id="ph3">&lt;paramref name="indexes" /&gt;</ph>.</source>
          <target state="translated">Para o associador padrão, <ph id="ph1">&lt;paramref name="match" /&gt;</ph> contém várias propriedades que são correspondências igualmente boas para <ph id="ph2">&lt;paramref name="returnType" /&gt;</ph> e <ph id="ph3">&lt;paramref name="indexes" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>For the default binder, <ph id="ph1">&lt;paramref name="match" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> or an empty array.</source>
          <target state="translated">Para o associador padrão, <ph id="ph1">&lt;paramref name="match" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph> ou uma matriz vazia.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>