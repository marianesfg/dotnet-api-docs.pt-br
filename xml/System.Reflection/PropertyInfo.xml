<Type Name="PropertyInfo" FullName="System.Reflection.PropertyInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3fbf2b00ba6edd1b5bd42ff4d6263de825cf4cff" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36638312" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class PropertyInfo : System.Reflection.MemberInfo, System.Runtime.InteropServices._PropertyInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit PropertyInfo extends System.Reflection.MemberInfo implements class System.Runtime.InteropServices._PropertyInfo" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.PropertyInfo" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class PropertyInfo&#xA;Inherits MemberInfo&#xA;Implements _PropertyInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class PropertyInfo abstract : System::Reflection::MemberInfo, System::Runtime::InteropServices::_PropertyInfo" />
  <TypeSignature Language="F#" Value="type PropertyInfo = class&#xA;    inherit MemberInfo&#xA;    interface _PropertyInfo" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Reflection.MemberInfo</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._PropertyInfo</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._PropertyInfo))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="96c78-101">Discovers the attributes of a property and provides access to property metadata.</span>
      <span class="sxs-lookup">
        <span data-stu-id="96c78-101">Discovers the attributes of a property and provides access to property metadata.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96c78-102">Propriedades logicamente são os mesmos campos.</span><span class="sxs-lookup"><span data-stu-id="96c78-102">Properties are logically the same as fields.</span></span> <span data-ttu-id="96c78-103">Uma propriedade é um aspecto nomeado de estado de um objeto cujo valor é normalmente acessível por meio de `get` e `set` acessadores.</span><span class="sxs-lookup"><span data-stu-id="96c78-103">A property is a named aspect of an object's state whose value is typically accessible through `get` and `set` accessors.</span></span> <span data-ttu-id="96c78-104">Propriedades podem ser somente leitura, caso em que não há suporte para uma rotina de conjunto.</span><span class="sxs-lookup"><span data-stu-id="96c78-104">Properties may be read-only, in which case a set routine is not supported.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96c78-105">Para determinar se uma propriedade é `static`, você deve obter o <xref:System.Reflection.MethodInfo> para o `get` ou `set` acessador, chamando o <xref:System.Reflection.PropertyInfo.GetGetMethod%2A> ou <xref:System.Reflection.PropertyInfo.GetSetMethod%2A> método e examine seu <xref:System.Reflection.MethodBase.IsStatic%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="96c78-105">To determine whether a property is `static`, you must obtain the <xref:System.Reflection.MethodInfo> for the `get` or `set` accessor, by calling the <xref:System.Reflection.PropertyInfo.GetGetMethod%2A> or the <xref:System.Reflection.PropertyInfo.GetSetMethod%2A> method, and examine its <xref:System.Reflection.MethodBase.IsStatic%2A> property.</span></span>  
  
 <span data-ttu-id="96c78-106">Vários métodos dessa classe presumem que o `get` acessador e `set` métodos de acessador de uma propriedade ter certos formatos.</span><span class="sxs-lookup"><span data-stu-id="96c78-106">Several methods in this class assume that the `get` accessor and `set` accessor methods of a property have certain formats.</span></span> <span data-ttu-id="96c78-107">As assinaturas do `get` e `set` métodos devem coincidir com a seguinte convenção:</span><span class="sxs-lookup"><span data-stu-id="96c78-107">The signatures of the `get` and `set` methods must match the following convention:</span></span>  
  
-   <span data-ttu-id="96c78-108">O tipo de retorno de `get` método e o último argumento do `set` método deve ser idêntico.</span><span class="sxs-lookup"><span data-stu-id="96c78-108">The return type of the `get` method and the last argument of the `set` method must be identical.</span></span> <span data-ttu-id="96c78-109">Esse é o tipo da propriedade.</span><span class="sxs-lookup"><span data-stu-id="96c78-109">This is the type of the property.</span></span>  
  
-   <span data-ttu-id="96c78-110">O `get` e `set` métodos devem ter o mesmo número, tipo e ordem de índices.</span><span class="sxs-lookup"><span data-stu-id="96c78-110">The `get` and `set` methods must have the same number, type, and order of indices.</span></span>  
  
 <span data-ttu-id="96c78-111">Se não for efetivado esse formato, o comportamento do `GetValue` e `SetValue` métodos é indefinido.</span><span class="sxs-lookup"><span data-stu-id="96c78-111">If this format is not followed, the behavior of the `GetValue` and `SetValue` methods is undefined.</span></span>  
  
 <span data-ttu-id="96c78-112">Chamando <xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A?displayProperty=nameWithType> na `PropertyInfo` quando o `inherit` parâmetro de `GetCustomAttributes` é `true` não mostram a hierarquia de tipo.</span><span class="sxs-lookup"><span data-stu-id="96c78-112">Calling <xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A?displayProperty=nameWithType> on `PropertyInfo` when the `inherit` parameter of `GetCustomAttributes` is `true` does not walk the type hierarchy.</span></span> <span data-ttu-id="96c78-113">Use <xref:System.Attribute?displayProperty=nameWithType> para herdar atributos personalizados.</span><span class="sxs-lookup"><span data-stu-id="96c78-113">Use <xref:System.Attribute?displayProperty=nameWithType> to inherit custom attributes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96c78-114">Este exemplo mostra como usar várias classes de reflexão para analisar os metadados contidos em um assembly.</span><span class="sxs-lookup"><span data-stu-id="96c78-114">This example shows how to use various reflection classes to analyze the metadata contained in an assembly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96c78-115">Este exemplo gera 55.000 sobre linhas de dados que você pode redirecionar para um arquivo de texto no prompt de comando, da seguinte maneira: **example.exe > propertyinfo.txt**</span><span class="sxs-lookup"><span data-stu-id="96c78-115">This example generates about 55,000 lines of data, which you can redirect to a text file at the command prompt, as follows: **example.exe > propertyinfo.txt**</span></span>  
  
 [!code-cpp[Reflection#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection/CPP/reflection.cpp#1)]
 [!code-csharp[Reflection#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection/CS/Reflection.cs#1)]
 [!code-vb[Reflection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection/VB/Reflection.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">
      <span data-ttu-id="96c78-116">para confiança total de herdeiros.</span>
      <span class="sxs-lookup">
        <span data-stu-id="96c78-116">for full trust for inheritors.</span>
      </span>
      <span data-ttu-id="96c78-117">Esta classe não pode ser herdada pelo código parcialmente confiável.</span>
      <span class="sxs-lookup">
        <span data-stu-id="96c78-117">This class cannot be inherited by partially trusted code.</span>
      </span>
    </permission>
    <threadsafe>
      <span data-ttu-id="96c78-118">Este tipo é thread-safe.</span>
      <span class="sxs-lookup">
        <span data-stu-id="96c78-118">This type is thread safe.</span>
      </span>
    </threadsafe>
    <block subset="none" type="overrides">
      <span data-ttu-id="96c78-119">
        <para>Ao herdar de <see cref="T:System.Reflection.PropertyInfo" />, você deve substituir os seguintes membros: <see cref="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])" />, <see cref="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />, <see cref="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)" />, <see cref="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)" />, <see cref="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)" />, e <see cref="M:System.Reflection.PropertyInfo.GetIndexParameters" />.</para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="96c78-119">
          <para>When you inherit from <see cref="T:System.Reflection.PropertyInfo" />, you must override the following members: <see cref="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])" />, <see cref="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />, <see cref="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)" />, <see cref="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)" />, <see cref="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)" />, and <see cref="M:System.Reflection.PropertyInfo.GetIndexParameters" />.</para>
        </span>
      </span>
    </block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PropertyInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; PropertyInfo();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="96c78-120">Initializes a new instance of the <see cref="T:System.Reflection.PropertyInfo" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-120">Initializes a new instance of the <see cref="T:System.Reflection.PropertyInfo" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="96c78-121">quando invocado com associação tardia por meio de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-121">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="96c78-122">Enumeração associada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-122">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.PropertyAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.PropertyAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PropertyInfo.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Attributes As PropertyAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Reflection::PropertyAttributes Attributes { System::Reflection::PropertyAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.Attributes : System.Reflection.PropertyAttributes" Usage="System.Reflection.PropertyInfo.Attributes" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._PropertyInfo.Attributes</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96c78-123">Gets the attributes for this property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-123">Gets the attributes for this property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96c78-124">Os atributos desta propriedade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-124">The attributes of this property.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96c78-125">O <xref:System.Reflection.PropertyInfo.Attributes%2A> propriedade retorna os atributos associados com a propriedade representada por esta <xref:System.Reflection.PropertyInfo> objeto.</span><span class="sxs-lookup"><span data-stu-id="96c78-125">The <xref:System.Reflection.PropertyInfo.Attributes%2A> property returns the attributes associated with the property represented by this <xref:System.Reflection.PropertyInfo> object.</span></span>  <span data-ttu-id="96c78-126">Os atributos são principalmente os modificadores aplicados por um compilador durante a criação de uma propriedade; elas indicam se uma propriedade é a propriedade padrão, um `SpecialName` propriedade e assim por diante.</span><span class="sxs-lookup"><span data-stu-id="96c78-126">The attributes are primarily modifiers applied by a compiler when creating a property; they indicate whether a property is the default property, a `SpecialName` property, and so on.</span></span> <span data-ttu-id="96c78-127">Observe que, para quase todas as propriedades encontradas tipos na biblioteca de classes do .NET Framework, o valor da <xref:System.Reflection.PropertyInfo.Attributes%2A> é de propriedade <xref:System.Reflection.PropertyAttributes.None?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="96c78-127">Note that, for almost all properties found in types in the .NET Framework class library, the value of the <xref:System.Reflection.PropertyInfo.Attributes%2A> property is <xref:System.Reflection.PropertyAttributes.None?displayProperty=nameWithType>.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="96c78-128">Na maioria dos casos, você provavelmente desejará recuperar os atributos personalizados associados a uma propriedade.</span><span class="sxs-lookup"><span data-stu-id="96c78-128">In most cases, you probably want to retrieve the custom attributes associated with a property.</span></span> <span data-ttu-id="96c78-129">Para fazer isso, recuperar o valor da <xref:System.Reflection.MemberInfo.CustomAttributes%2A> propriedade ou chamada de uma das sobrecargas do <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> método.</span><span class="sxs-lookup"><span data-stu-id="96c78-129">To do this, retrieve the value of the <xref:System.Reflection.MemberInfo.CustomAttributes%2A> property, or call one of the overloads of the <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method.</span></span>  
  
 <span data-ttu-id="96c78-130">Para obter o <xref:System.Reflection.PropertyInfo.Attributes%2A> propriedade:</span><span class="sxs-lookup"><span data-stu-id="96c78-130">To get the <xref:System.Reflection.PropertyInfo.Attributes%2A> property:</span></span>  
  
1.  <span data-ttu-id="96c78-131">Obter um <xref:System.Type> objeto que representa o tipo ao qual a propriedade pertence.</span><span class="sxs-lookup"><span data-stu-id="96c78-131">Get a <xref:System.Type> object that represents the type to which the property belongs.</span></span>  
  
2.  <span data-ttu-id="96c78-132">Obter o <xref:System.Reflection.PropertyInfo> objeto chamando uma sobrecarga de <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="96c78-132">Get the <xref:System.Reflection.PropertyInfo> object by calling an overload of the <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> method.</span></span>  
  
3.  <span data-ttu-id="96c78-133">Recuperar atributos da propriedade do <xref:System.Reflection.PropertyInfo.Attributes%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="96c78-133">Retrieve the property's attributes from the <xref:System.Reflection.PropertyInfo.Attributes%2A> property.</span></span>  
  
 <span data-ttu-id="96c78-134">Você pode definir os atributos de uma propriedade de um tipo criado dinamicamente usando a reflexão emitir chamando uma sobrecarga de <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A> método e fornecer um valor para o `attributes` argumento.</span><span class="sxs-lookup"><span data-stu-id="96c78-134">You can define the attributes of a property for a type created dynamically using reflection emit by calling an overload of the <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A> method and supplying a value for the `attributes` argument.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.MemberInfo.CustomAttributes" />
        <altmember cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public abstract bool CanRead { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRead" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PropertyInfo.CanRead" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property CanRead As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool CanRead { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanRead : bool" Usage="System.Reflection.PropertyInfo.CanRead" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._PropertyInfo.CanRead</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96c78-135">Gets a value indicating whether the property can be read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-135">Gets a value indicating whether the property can be read.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96c78-136">
            <see langword="true" /> se essa propriedade puder ser lida; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-136">
              <see langword="true" /> if this property can be read; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96c78-137">Se a propriedade não tem um `get` acessador, ele não pode ser lido.</span><span class="sxs-lookup"><span data-stu-id="96c78-137">If the property does not have a `get` accessor, it cannot be read.</span></span>  
  
 <span data-ttu-id="96c78-138">Para obter o `CanRead` propriedade, primeiro obtenha a classe `Type`.</span><span class="sxs-lookup"><span data-stu-id="96c78-138">To get the `CanRead` property, first get the class `Type`.</span></span> <span data-ttu-id="96c78-139">Do `Type`, obter o `PropertyInfo`.</span><span class="sxs-lookup"><span data-stu-id="96c78-139">From the `Type`, get the `PropertyInfo`.</span></span> <span data-ttu-id="96c78-140">Do `PropertyInfo`, obter o `CanRead` valor.</span><span class="sxs-lookup"><span data-stu-id="96c78-140">From the `PropertyInfo`, get the `CanRead` value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96c78-141">O exemplo a seguir define duas propriedades.</span><span class="sxs-lookup"><span data-stu-id="96c78-141">The following example defines two properties.</span></span> <span data-ttu-id="96c78-142">A primeira propriedade é legível e `CanRead` é de propriedade `true`.</span><span class="sxs-lookup"><span data-stu-id="96c78-142">The first property is readable and the `CanRead` property is `true`.</span></span> <span data-ttu-id="96c78-143">A segunda propriedade não é legível (não há nenhum acessador get) e o `CanRead` é de propriedade `false`.</span><span class="sxs-lookup"><span data-stu-id="96c78-143">The second property is not readable (there is no get accessor), and the `CanRead` property is `false`.</span></span>  
  
 [!code-cpp[Classic PropertyInfo.CanRead Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic PropertyInfo.CanRead Example/CPP/source.cpp#1)]
 [!code-csharp[Classic PropertyInfo.CanRead Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic PropertyInfo.CanRead Example/CS/source.cs#1)]
 [!code-vb[Classic PropertyInfo.CanRead Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic PropertyInfo.CanRead Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWrite">
      <MemberSignature Language="C#" Value="public abstract bool CanWrite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWrite" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PropertyInfo.CanWrite" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property CanWrite As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool CanWrite { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanWrite : bool" Usage="System.Reflection.PropertyInfo.CanWrite" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._PropertyInfo.CanWrite</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96c78-144">Gets a value indicating whether the property can be written to.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-144">Gets a value indicating whether the property can be written to.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96c78-145">
            <see langword="true" /> se essa propriedade puder ser usada para gravação; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-145">
              <see langword="true" /> if this property can be written to; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96c78-146"><xref:System.Reflection.PropertyInfo.CanWrite%2A> Retorna `true` se a propriedade tem um `set` acessador, mesmo se o acessador é `private`, `internal` (ou `Friend` no Visual Basic), ou `protected`.</span><span class="sxs-lookup"><span data-stu-id="96c78-146"><xref:System.Reflection.PropertyInfo.CanWrite%2A> returns `true` if the property has a `set` accessor, even if the accessor is `private`, `internal` (or `Friend` in Visual Basic), or `protected`.</span></span>   <span data-ttu-id="96c78-147">Se a propriedade não tem um `set` acessador, o método retornará `false`.</span><span class="sxs-lookup"><span data-stu-id="96c78-147">If the property does not have a `set` accessor, the method returns `false`.</span></span>  
  
 <span data-ttu-id="96c78-148">Para obter o valor da <xref:System.Reflection.PropertyInfo.CanWrite%2A> propriedade:</span><span class="sxs-lookup"><span data-stu-id="96c78-148">To get the value of the <xref:System.Reflection.PropertyInfo.CanWrite%2A> property:</span></span>  
  
1.  <span data-ttu-id="96c78-149">Obter o <xref:System.Type> objeto do tipo que inclui a propriedade.</span><span class="sxs-lookup"><span data-stu-id="96c78-149">Get the <xref:System.Type> object of the type that includes the property.</span></span>  
  
2.  <span data-ttu-id="96c78-150">Chamar o <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> para obter o <xref:System.Reflection.PropertyInfo> objeto que representa a propriedade.</span><span class="sxs-lookup"><span data-stu-id="96c78-150">Call the <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> to get the <xref:System.Reflection.PropertyInfo> object that represents the property.</span></span>  
  
3.  <span data-ttu-id="96c78-151">Recuperar o valor da <xref:System.Reflection.PropertyInfo.CanWrite%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="96c78-151">Retrieve the value of the <xref:System.Reflection.PropertyInfo.CanWrite%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96c78-152">O exemplo a seguir define duas propriedades.</span><span class="sxs-lookup"><span data-stu-id="96c78-152">The following example defines two properties.</span></span> <span data-ttu-id="96c78-153">A primeira propriedade é gravável e o `CanWrite` é de propriedade `true`.</span><span class="sxs-lookup"><span data-stu-id="96c78-153">The first property is writable and the `CanWrite` property is `true`.</span></span> <span data-ttu-id="96c78-154">A segunda propriedade não é gravável (não há nenhum `set` acessador) e o `CanWrite` é de propriedade `false`.</span><span class="sxs-lookup"><span data-stu-id="96c78-154">The second property is not writable (there is no `set` accessor), and the `CanWrite` property is `false`.</span></span>  
  
 [!code-cpp[Classic PropertyInfo.CanWrite Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic PropertyInfo.CanWrite Example/CPP/source.cpp#1)]
 [!code-csharp[Classic PropertyInfo.CanWrite Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic PropertyInfo.CanWrite Example/CS/source.cs#1)]
 [!code-vb[Classic PropertyInfo.CanWrite Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic PropertyInfo.CanWrite Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="propertyInfo.Equals obj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.Equals(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="96c78-155">An object to compare with this instance, or <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-155">An object to compare with this instance, or <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96c78-156">Returns a value that indicates whether this instance is equal to a specified object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-156">Returns a value that indicates whether this instance is equal to a specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96c78-157">
            <see langword="true" /> if <paramref name="obj" /> equals the type and value of this instance; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-157">
              <see langword="true" /> if <paramref name="obj" /> equals the type and value of this instance; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAccessors">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="96c78-158">Returns an array of the <see langword="get" /> and <see langword="set" /> accessors on this property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-158">Returns an array of the <see langword="get" /> and <see langword="set" /> accessors on this property.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAccessors">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo[] GetAccessors ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo[] GetAccessors() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetAccessors" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAccessors () As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetAccessors();" />
      <MemberSignature Language="F#" Value="abstract member GetAccessors : unit -&gt; System.Reflection.MethodInfo[]&#xA;override this.GetAccessors : unit -&gt; System.Reflection.MethodInfo[]" Usage="propertyInfo.GetAccessors " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetAccessors</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="96c78-159">Returns an array whose elements reflect the public <see langword="get" /> and <see langword="set" /> accessors of the property reflected by the current instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-159">Returns an array whose elements reflect the public <see langword="get" /> and <see langword="set" /> accessors of the property reflected by the current instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96c78-160">An array of <see cref="T:System.Reflection.MethodInfo" /> objects that reflect the public <see langword="get" /> and <see langword="set" /> accessors of the property reflected by the current instance, if found; otherwise, this method returns an array with zero (0) elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-160">An array of <see cref="T:System.Reflection.MethodInfo" /> objects that reflect the public <see langword="get" /> and <see langword="set" /> accessors of the property reflected by the current instance, if found; otherwise, this method returns an array with zero (0) elements.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96c78-161">Para chamar o <xref:System.Reflection.PropertyInfo.GetAccessors%2A> método:</span><span class="sxs-lookup"><span data-stu-id="96c78-161">To call the <xref:System.Reflection.PropertyInfo.GetAccessors%2A> method:</span></span>  
  
1.  <span data-ttu-id="96c78-162">Obter um <xref:System.Type> objeto que representa a classe.</span><span class="sxs-lookup"><span data-stu-id="96c78-162">Get a <xref:System.Type> object that represents the class.</span></span>  
  
2.  <span data-ttu-id="96c78-163">Do <xref:System.Type> de objeto, obter o <xref:System.Reflection.PropertyInfo> objeto.</span><span class="sxs-lookup"><span data-stu-id="96c78-163">From the <xref:System.Type> object, get the <xref:System.Reflection.PropertyInfo> object.</span></span>  
  
3.  <span data-ttu-id="96c78-164">Do <xref:System.Reflection.PropertyInfo> de objeto, chame o <xref:System.Reflection.PropertyInfo.GetAccessors%2A> método.</span><span class="sxs-lookup"><span data-stu-id="96c78-164">From the <xref:System.Reflection.PropertyInfo> object, call the <xref:System.Reflection.PropertyInfo.GetAccessors%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96c78-165">O exemplo a seguir recupera os acessadores públicos do `ClassWithProperty.Caption` propriedade e exibe informações sobre eles.</span><span class="sxs-lookup"><span data-stu-id="96c78-165">The following example retrieves the public accessors of the `ClassWithProperty.Caption` property and displays information about them.</span></span> <span data-ttu-id="96c78-166">Ele também chama o <xref:System.Reflection.MethodBase.Invoke%2A> método de setter para definir o valor da propriedade e do getter para recuperar o valor da propriedade.</span><span class="sxs-lookup"><span data-stu-id="96c78-166">It also calls the <xref:System.Reflection.MethodBase.Invoke%2A> method of the setter to set the property value and of the getter to retrieve the property value.</span></span>  
  
 [!code-csharp[System.Reflection.PropertyInfo.GetAccessors#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.propertyinfo.getaccessors/cs/source.cs#1)]
 [!code-vb[System.Reflection.PropertyInfo.GetAccessors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.propertyinfo.getaccessors/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="96c78-167">quando invocado com associação tardia por meio de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-167">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="96c78-168">Enumeração associada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-168">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetAccessors">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodInfo[] GetAccessors (bool nonPublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo[] GetAccessors(bool nonPublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetAccessors (nonPublic As Boolean) As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetAccessors(bool nonPublic);" />
      <MemberSignature Language="F#" Value="abstract member GetAccessors : bool -&gt; System.Reflection.MethodInfo[]" Usage="propertyInfo.GetAccessors nonPublic" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetAccessors(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nonPublic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="nonPublic">
          <span data-ttu-id="96c78-169">Indicates whether non-public methods should be returned in the returned array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-169">Indicates whether non-public methods should be returned in the returned array.</span>
          </span>
          <span data-ttu-id="96c78-170">
            <see langword="true" /> if non-public methods are to be included; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-170">
              <see langword="true" /> if non-public methods are to be included; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96c78-171">Returns an array whose elements reflect the public and, if specified, non-public <see langword="get" /> and <see langword="set" /> accessors of the property reflected by the current instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-171">Returns an array whose elements reflect the public and, if specified, non-public <see langword="get" /> and <see langword="set" /> accessors of the property reflected by the current instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96c78-172">An array whose elements reflect the <see langword="get" /> and <see langword="set" /> accessors of the property reflected by the current instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-172">An array whose elements reflect the <see langword="get" /> and <see langword="set" /> accessors of the property reflected by the current instance.</span>
          </span>
          <span data-ttu-id="96c78-173">If <paramref name="nonPublic" /> is <see langword="true" />, this array contains public and non-public <see langword="get" /> and <see langword="set" /> accessors.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-173">If <paramref name="nonPublic" /> is <see langword="true" />, this array contains public and non-public <see langword="get" /> and <see langword="set" /> accessors.</span>
          </span>
          <span data-ttu-id="96c78-174">If <paramref name="nonPublic" /> is <see langword="false" />, this array contains only public <see langword="get" /> and <see langword="set" /> accessors.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-174">If <paramref name="nonPublic" /> is <see langword="false" />, this array contains only public <see langword="get" /> and <see langword="set" /> accessors.</span>
          </span>
          <span data-ttu-id="96c78-175">If no accessors with the specified visibility are found, this method returns an array with zero (0) elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-175">If no accessors with the specified visibility are found, this method returns an array with zero (0) elements.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96c78-176">Para chamar o <xref:System.Reflection.PropertyInfo.GetAccessors%2A> método:</span><span class="sxs-lookup"><span data-stu-id="96c78-176">To call the <xref:System.Reflection.PropertyInfo.GetAccessors%2A> method:</span></span>  
  
1.  <span data-ttu-id="96c78-177">Obter um <xref:System.Type> objeto que representa a classe.</span><span class="sxs-lookup"><span data-stu-id="96c78-177">Get a <xref:System.Type> object that represents the class.</span></span>  
  
2.  <span data-ttu-id="96c78-178">Do <xref:System.Type> de objeto, obter o <xref:System.Reflection.PropertyInfo> objeto.</span><span class="sxs-lookup"><span data-stu-id="96c78-178">From the <xref:System.Type> object, get the <xref:System.Reflection.PropertyInfo> object.</span></span>  
  
3.  <span data-ttu-id="96c78-179">Do <xref:System.Reflection.PropertyInfo> de objeto, chame o <xref:System.Reflection.PropertyInfo.GetAccessors%2A> método.</span><span class="sxs-lookup"><span data-stu-id="96c78-179">From the <xref:System.Reflection.PropertyInfo> object, call the <xref:System.Reflection.PropertyInfo.GetAccessors%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96c78-180">O exemplo a seguir recupera os acessadores do `ClassWithProperty.Caption` propriedade e exibe informações sobre eles.</span><span class="sxs-lookup"><span data-stu-id="96c78-180">The following example retrieves the accessors of the `ClassWithProperty.Caption` property and displays information about them.</span></span> <span data-ttu-id="96c78-181">Ele também chama o <xref:System.Reflection.MethodBase.Invoke%2A> método de setter para definir o valor da propriedade e do getter para recuperar o valor da propriedade.</span><span class="sxs-lookup"><span data-stu-id="96c78-181">It also calls the <xref:System.Reflection.MethodBase.Invoke%2A> method of the setter to set the property value and of the getter to retrieve the property value.</span></span>  
  
 [!code-csharp[Classic PropertyInfo.GetAccessors1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic PropertyInfo.GetAccessors1 Example/CS/source.cs#1)]
 [!code-vb[Classic PropertyInfo.GetAccessors1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic PropertyInfo.GetAccessors1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="96c78-182">quando invocado com associação tardia por meio de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-182">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="96c78-183">Enumeração associada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-183">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetConstantValue">
      <MemberSignature Language="C#" Value="public virtual object GetConstantValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetConstantValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetConstantValue" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetConstantValue () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetConstantValue();" />
      <MemberSignature Language="F#" Value="abstract member GetConstantValue : unit -&gt; obj&#xA;override this.GetConstantValue : unit -&gt; obj" Usage="propertyInfo.GetConstantValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="96c78-184">Returns a literal value associated with the property by a compiler.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-184">Returns a literal value associated with the property by a compiler.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96c78-185">An <see cref="T:System.Object" /> that contains the literal value associated with the property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-185">An <see cref="T:System.Object" /> that contains the literal value associated with the property.</span>
          </span>
          <span data-ttu-id="96c78-186">If the literal value is a class type with an element value of zero, the return value is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-186">If the literal value is a class type with an element value of zero, the return value is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96c78-187">Esse método é fornecido para os designers de compiladores gerenciados e analisadores de código.</span><span class="sxs-lookup"><span data-stu-id="96c78-187">This method is provided for designers of managed compilers and code analyzers.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96c78-188">Não use esse método no contexto exclusivo de reflexão, porque ele pode fazer com que o código a ser executado.</span><span class="sxs-lookup"><span data-stu-id="96c78-188">Do not use this method in the reflection-only context, because it might cause code to execute.</span></span> <span data-ttu-id="96c78-189">Use o método <xref:System.Reflection.PropertyInfo.GetRawConstantValue%2A> em seu lugar.</span><span class="sxs-lookup"><span data-stu-id="96c78-189">Use the <xref:System.Reflection.PropertyInfo.GetRawConstantValue%2A> method instead.</span></span>  
  
 <span data-ttu-id="96c78-190">Em metadados não gerenciado, a tabela de constante é usada para armazenar valores de constantes para campos, parâmetros e propriedades.</span><span class="sxs-lookup"><span data-stu-id="96c78-190">In unmanaged metadata, the Constant table is used to store constant values for fields, parameters, and properties.</span></span> <span data-ttu-id="96c78-191">Constante das informações diretamente não influenciam o comportamento de tempo de execução.</span><span class="sxs-lookup"><span data-stu-id="96c78-191">Constant information does not directly influence runtime behavior.</span></span> <span data-ttu-id="96c78-192">Compiladores inspecionam essas informações, em tempo de compilação durante a importação de metadados.</span><span class="sxs-lookup"><span data-stu-id="96c78-192">Compilers inspect this information, at compile time, when importing metadata.</span></span> <span data-ttu-id="96c78-193">Se usado, o valor de uma constante é inserido no fluxo Microsoft intermediate language (MSIL) o compilador emite.</span><span class="sxs-lookup"><span data-stu-id="96c78-193">If used, the value of a constant is embedded in the Microsoft intermediate language (MSIL) stream the compiler emits.</span></span> <span data-ttu-id="96c78-194">Não há nenhum instruções da MSIL que podem ser usadas para acessar a tabela constante em tempo de execução.</span><span class="sxs-lookup"><span data-stu-id="96c78-194">There are no MSIL instructions that can be used to access the Constant table at run time.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96c78-195">Para obter mais informações sobre valores de constante e a tabela de constante, consulte a documentação do ECMA partição II.</span><span class="sxs-lookup"><span data-stu-id="96c78-195">For more information on constant values and the Constant table, see the ECMA Partition II documentation.</span></span> <span data-ttu-id="96c78-196">A documentação está disponível online; confira [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212), no MSDN, e [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552), no site internacional da Ecma.</span><span class="sxs-lookup"><span data-stu-id="96c78-196">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="96c78-197">The Constant table in unmanaged metadata does not contain a constant value for the current property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-197">The Constant table in unmanaged metadata does not contain a constant value for the current property.</span>
          </span>
        </exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="96c78-198">The type of the value is not one of the types permitted by the Common Language Specification (CLS).</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-198">The type of the value is not one of the types permitted by the Common Language Specification (CLS).</span>
          </span>
          <span data-ttu-id="96c78-199">See the ECMA Partition II specification, Metadata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-199">See the ECMA Partition II specification, Metadata.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetGetMethod">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="96c78-200">Returns a <see langword="MethodInfo" /> representing the <see langword="get" /> accessor for this property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-200">Returns a <see langword="MethodInfo" /> representing the <see langword="get" /> accessor for this property.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetGetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetGetMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetGetMethod() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetGetMethod" />
      <MemberSignature Language="VB.NET" Value="Public Function GetGetMethod () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetGetMethod();" />
      <MemberSignature Language="F#" Value="abstract member GetGetMethod : unit -&gt; System.Reflection.MethodInfo&#xA;override this.GetGetMethod : unit -&gt; System.Reflection.MethodInfo" Usage="propertyInfo.GetGetMethod " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetGetMethod</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="96c78-201">Returns the public <see langword="get" /> accessor for this property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-201">Returns the public <see langword="get" /> accessor for this property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96c78-202">A <see langword="MethodInfo" /> object representing the public <see langword="get" /> accessor for this property, or <see langword="null" /> if the <see langword="get" /> accessor is non-public or does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-202">A <see langword="MethodInfo" /> object representing the public <see langword="get" /> accessor for this property, or <see langword="null" /> if the <see langword="get" /> accessor is non-public or does not exist.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96c78-203">Este é um método prático que fornece uma implementação para o resumo de `GetGetMethod` método com o `nonPublic` parâmetro definido como `false`.</span><span class="sxs-lookup"><span data-stu-id="96c78-203">This is a convenience method that provides an implementation for the abstract `GetGetMethod` method with the `nonPublic` parameter set to `false`.</span></span>  
  
 <span data-ttu-id="96c78-204">Para usar o `GetGetMethod` método, primeiro obtenha a classe `Type`.</span><span class="sxs-lookup"><span data-stu-id="96c78-204">To use the `GetGetMethod` method, first get the class `Type`.</span></span> <span data-ttu-id="96c78-205">Do `Type`, obter o <xref:System.Reflection.PropertyInfo>.</span><span class="sxs-lookup"><span data-stu-id="96c78-205">From the `Type`, get the <xref:System.Reflection.PropertyInfo>.</span></span> <span data-ttu-id="96c78-206">Do <xref:System.Reflection.PropertyInfo>, use o `GetGetMethod` método.</span><span class="sxs-lookup"><span data-stu-id="96c78-206">From the <xref:System.Reflection.PropertyInfo>, use the `GetGetMethod` method.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="96c78-207">quando invocado com associação tardia por meio de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-207">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="96c78-208">Enumeração associada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-208">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetGetMethod">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodInfo GetGetMethod (bool nonPublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetGetMethod(bool nonPublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetGetMethod (nonPublic As Boolean) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::MethodInfo ^ GetGetMethod(bool nonPublic);" />
      <MemberSignature Language="F#" Value="abstract member GetGetMethod : bool -&gt; System.Reflection.MethodInfo" Usage="propertyInfo.GetGetMethod nonPublic" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetGetMethod(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nonPublic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="nonPublic">
          <span data-ttu-id="96c78-209">Indicates whether a non-public <see langword="get" /> accessor should be returned.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-209">Indicates whether a non-public <see langword="get" /> accessor should be returned.</span>
          </span>
          <span data-ttu-id="96c78-210">
            <see langword="true" /> if a non-public accessor is to be returned; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-210">
              <see langword="true" /> if a non-public accessor is to be returned; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96c78-211">When overridden in a derived class, returns the public or non-public <see langword="get" /> accessor for this property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-211">When overridden in a derived class, returns the public or non-public <see langword="get" /> accessor for this property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96c78-212">A <see langword="MethodInfo" /> object representing the <see langword="get" /> accessor for this property, if <paramref name="nonPublic" /> is <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-212">A <see langword="MethodInfo" /> object representing the <see langword="get" /> accessor for this property, if <paramref name="nonPublic" /> is <see langword="true" />.</span>
          </span>
          <span data-ttu-id="96c78-213">Returns <see langword="null" /> if <paramref name="nonPublic" /> is <see langword="false" /> and the <see langword="get" /> accessor is non-public, or if <paramref name="nonPublic" /> is <see langword="true" /> but no <see langword="get" /> accessors exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-213">Returns <see langword="null" /> if <paramref name="nonPublic" /> is <see langword="false" /> and the <see langword="get" /> accessor is non-public, or if <paramref name="nonPublic" /> is <see langword="true" /> but no <see langword="get" /> accessors exist.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96c78-214">Essa propriedade é o <xref:System.Reflection.MethodInfo> representar o acessador get.</span><span class="sxs-lookup"><span data-stu-id="96c78-214">This property is the <xref:System.Reflection.MethodInfo> representing the get accessor.</span></span>  
  
 <span data-ttu-id="96c78-215">Para usar o `GetGetMethod` método, primeiro obtenha a classe `Type`.</span><span class="sxs-lookup"><span data-stu-id="96c78-215">To use the `GetGetMethod` method, first get the class `Type`.</span></span> <span data-ttu-id="96c78-216">Do `Type`, obter o <xref:System.Reflection.PropertyInfo>.</span><span class="sxs-lookup"><span data-stu-id="96c78-216">From the `Type`, get the <xref:System.Reflection.PropertyInfo>.</span></span> <span data-ttu-id="96c78-217">Do <xref:System.Reflection.PropertyInfo>, use o `GetGetMethod` método.</span><span class="sxs-lookup"><span data-stu-id="96c78-217">From the <xref:System.Reflection.PropertyInfo>, use the `GetGetMethod` method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96c78-218">O exemplo a seguir exibe o público ou não público `get` acessador para a propriedade especificada.</span><span class="sxs-lookup"><span data-stu-id="96c78-218">The following example displays the public or non-public `get` accessor for the specified property.</span></span>  
  
 [!code-cpp[Classic PropertyInfo.GetGetMethod1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic PropertyInfo.GetGetMethod1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic PropertyInfo.GetGetMethod1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic PropertyInfo.GetGetMethod1 Example/CS/source.cs#1)]
 [!code-vb[Classic PropertyInfo.GetGetMethod1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic PropertyInfo.GetGetMethod1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="96c78-219">The requested method is non-public and the caller does not have <see cref="T:System.Security.Permissions.ReflectionPermission" /> to reflect on this non-public method.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-219">The requested method is non-public and the caller does not have <see cref="T:System.Security.Permissions.ReflectionPermission" /> to reflect on this non-public method.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="96c78-220">quando invocado com associação tardia por meio de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-220">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="96c78-221">Enumeração associada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-221">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="propertyInfo.GetHashCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetHashCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="96c78-222">Returns the hash code for this instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-222">Returns the hash code for this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96c78-223">A 32-bit signed integer hash code.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-223">A 32-bit signed integer hash code.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIndexParameters">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.ParameterInfo[] GetIndexParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ParameterInfo[] GetIndexParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetIndexParameters" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetIndexParameters () As ParameterInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::ParameterInfo ^&gt; ^ GetIndexParameters();" />
      <MemberSignature Language="F#" Value="abstract member GetIndexParameters : unit -&gt; System.Reflection.ParameterInfo[]" Usage="propertyInfo.GetIndexParameters " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetIndexParameters</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="96c78-224">When overridden in a derived class, returns an array of all the index parameters for the property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-224">When overridden in a derived class, returns an array of all the index parameters for the property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96c78-225">An array of type <see langword="ParameterInfo" /> containing the parameters for the indexes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-225">An array of type <see langword="ParameterInfo" /> containing the parameters for the indexes.</span>
          </span>
          <span data-ttu-id="96c78-226">If the property is not indexed, the array has 0 (zero) elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-226">If the property is not indexed, the array has 0 (zero) elements.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96c78-227">Extrai todas as informações necessárias de parâmetro de matriz retornada.</span><span class="sxs-lookup"><span data-stu-id="96c78-227">Extract any required parameter information from the returned array.</span></span>  
  
 <span data-ttu-id="96c78-228">Para usar o `GetIndexParameters` método, primeiro obtenha a classe `Type`.</span><span class="sxs-lookup"><span data-stu-id="96c78-228">To use the `GetIndexParameters` method, first get the class `Type`.</span></span> <span data-ttu-id="96c78-229">Do `Type`, obter o `PropertyInfo`.</span><span class="sxs-lookup"><span data-stu-id="96c78-229">From the `Type`, get the `PropertyInfo`.</span></span> <span data-ttu-id="96c78-230">Do `PropertyInfo`, use o `GetIndexParameters` método.</span><span class="sxs-lookup"><span data-stu-id="96c78-230">From the `PropertyInfo`, use the `GetIndexParameters` method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96c78-231">O exemplo a seguir exibe os parâmetros de índice da propriedade especificada.</span><span class="sxs-lookup"><span data-stu-id="96c78-231">The following example displays the index parameters of the specified property.</span></span>  
  
 [!code-cpp[Classic PropertyInfo.GetIndexParameters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic PropertyInfo.GetIndexParameters Example/CPP/source.cpp#1)]
 [!code-csharp[Classic PropertyInfo.GetIndexParameters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic PropertyInfo.GetIndexParameters Example/CS/source.cs#1)]
 [!code-vb[Classic PropertyInfo.GetIndexParameters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic PropertyInfo.GetIndexParameters Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="96c78-232">quando invocado com associação tardia por meio de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-232">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="96c78-233">Enumeração associada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-233">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo GetMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo GetMethod" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PropertyInfo.GetMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property GetMethod As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodInfo ^ GetMethod { System::Reflection::MethodInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GetMethod : System.Reflection.MethodInfo" Usage="System.Reflection.PropertyInfo.GetMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96c78-234">Gets the <see langword="get" /> accessor for this property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-234">Gets the <see langword="get" /> accessor for this property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96c78-235">O acessador <see langword="get" /> para essa propriedade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-235">The <see langword="get" /> accessor for this property.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOptionalCustomModifiers">
      <MemberSignature Language="C#" Value="public virtual Type[] GetOptionalCustomModifiers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetOptionalCustomModifiers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetOptionalCustomModifiers" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetOptionalCustomModifiers () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetOptionalCustomModifiers();" />
      <MemberSignature Language="F#" Value="abstract member GetOptionalCustomModifiers : unit -&gt; Type[]&#xA;override this.GetOptionalCustomModifiers : unit -&gt; Type[]" Usage="propertyInfo.GetOptionalCustomModifiers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="96c78-236">Returns an array of types representing the optional custom modifiers of the property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-236">Returns an array of types representing the optional custom modifiers of the property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96c78-237">An array of <see cref="T:System.Type" /> objects that identify the optional custom modifiers of the current property, such as <see cref="T:System.Runtime.CompilerServices.IsConst" /> or <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-237">An array of <see cref="T:System.Type" /> objects that identify the optional custom modifiers of the current property, such as <see cref="T:System.Runtime.CompilerServices.IsConst" /> or <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96c78-238">O <xref:System.Reflection.PropertyInfo.GetOptionalCustomModifiers%2A> e <xref:System.Reflection.PropertyInfo.GetRequiredCustomModifiers%2A> métodos são fornecidos para os designers de compiladores gerenciados.</span><span class="sxs-lookup"><span data-stu-id="96c78-238">The <xref:System.Reflection.PropertyInfo.GetOptionalCustomModifiers%2A> and <xref:System.Reflection.PropertyInfo.GetRequiredCustomModifiers%2A> methods are provided for designers of managed compilers.</span></span> <span data-ttu-id="96c78-239">Para obter mais informações sobre modificadores personalizados, consulte <xref:System.Runtime.CompilerServices.IsBoxed> e classes no relacionadas a <xref:System.Runtime.CompilerServices> namespace e a especificação de metadados na documentação do ECMA partição II.</span><span class="sxs-lookup"><span data-stu-id="96c78-239">For more information on custom modifiers, see <xref:System.Runtime.CompilerServices.IsBoxed> and related classes in the <xref:System.Runtime.CompilerServices> namespace and the metadata specification in the ECMA Partition II documentation.</span></span> <span data-ttu-id="96c78-240">A documentação está disponível online; confira [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212), no MSDN, e [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552), no site internacional da Ecma.</span><span class="sxs-lookup"><span data-stu-id="96c78-240">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRawConstantValue">
      <MemberSignature Language="C#" Value="public virtual object GetRawConstantValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetRawConstantValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetRawConstantValue" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRawConstantValue () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetRawConstantValue();" />
      <MemberSignature Language="F#" Value="abstract member GetRawConstantValue : unit -&gt; obj&#xA;override this.GetRawConstantValue : unit -&gt; obj" Usage="propertyInfo.GetRawConstantValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="96c78-241">Returns a literal value associated with the property by a compiler.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-241">Returns a literal value associated with the property by a compiler.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96c78-242">An <see cref="T:System.Object" /> that contains the literal value associated with the property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-242">An <see cref="T:System.Object" /> that contains the literal value associated with the property.</span>
          </span>
          <span data-ttu-id="96c78-243">If the literal value is a class type with an element value of zero, the return value is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-243">If the literal value is a class type with an element value of zero, the return value is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96c78-244">Esse método é fornecido para os designers de compiladores gerenciados e analisadores de código.</span><span class="sxs-lookup"><span data-stu-id="96c78-244">This method is provided for designers of managed compilers and code analyzers.</span></span>  
  
 <span data-ttu-id="96c78-245">Esse método pode ser usado no contexto de execução e o contexto exclusivo de reflexão.</span><span class="sxs-lookup"><span data-stu-id="96c78-245">This method can be used in both the execution context and the reflection-only context.</span></span>  
  
 <span data-ttu-id="96c78-246">Em metadados não gerenciado, a tabela de constante é usada para armazenar valores de constantes para campos, parâmetros e propriedades.</span><span class="sxs-lookup"><span data-stu-id="96c78-246">In unmanaged metadata, the Constant table is used to store constant values for fields, parameters, and properties.</span></span> <span data-ttu-id="96c78-247">Constante das informações diretamente não influenciam o comportamento de tempo de execução.</span><span class="sxs-lookup"><span data-stu-id="96c78-247">Constant information does not directly influence runtime behavior.</span></span> <span data-ttu-id="96c78-248">Compiladores inspecionam essas informações, em tempo de compilação durante a importação de metadados.</span><span class="sxs-lookup"><span data-stu-id="96c78-248">Compilers inspect this information, at compile time, when importing metadata.</span></span> <span data-ttu-id="96c78-249">Se usado, o valor de uma constante é inserido no fluxo Microsoft intermediate language (MSIL) o compilador emite.</span><span class="sxs-lookup"><span data-stu-id="96c78-249">If used, the value of a constant is embedded in the Microsoft intermediate language (MSIL) stream the compiler emits.</span></span> <span data-ttu-id="96c78-250">Não há nenhum instruções da MSIL que podem ser usadas para acessar a tabela constante em tempo de execução.</span><span class="sxs-lookup"><span data-stu-id="96c78-250">There are no MSIL instructions that can be used to access the Constant table at run time.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96c78-251">Para obter mais informações sobre valores de constante e a tabela de constante, consulte a documentação do ECMA partição II.</span><span class="sxs-lookup"><span data-stu-id="96c78-251">For more information on constant values and the Constant table, see the ECMA Partition II documentation.</span></span> <span data-ttu-id="96c78-252">A documentação está disponível online; confira [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212), no MSDN, e [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552), no site internacional da Ecma.</span><span class="sxs-lookup"><span data-stu-id="96c78-252">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="96c78-253">The Constant table in unmanaged metadata does not contain a constant value for the current property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-253">The Constant table in unmanaged metadata does not contain a constant value for the current property.</span>
          </span>
        </exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="96c78-254">The type of the value is not one of the types permitted by the Common Language Specification (CLS).</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-254">The type of the value is not one of the types permitted by the Common Language Specification (CLS).</span>
          </span>
          <span data-ttu-id="96c78-255">See the ECMA Partition II specification, Metadata Logical Format: Other Structures, Element Types used in Signatures.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-255">See the ECMA Partition II specification, Metadata Logical Format: Other Structures, Element Types used in Signatures.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRequiredCustomModifiers">
      <MemberSignature Language="C#" Value="public virtual Type[] GetRequiredCustomModifiers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetRequiredCustomModifiers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetRequiredCustomModifiers" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRequiredCustomModifiers () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetRequiredCustomModifiers();" />
      <MemberSignature Language="F#" Value="abstract member GetRequiredCustomModifiers : unit -&gt; Type[]&#xA;override this.GetRequiredCustomModifiers : unit -&gt; Type[]" Usage="propertyInfo.GetRequiredCustomModifiers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="96c78-256">Returns an array of types representing the required custom modifiers of the property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-256">Returns an array of types representing the required custom modifiers of the property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96c78-257">An array of <see cref="T:System.Type" /> objects that identify the required custom modifiers of the current property, such as <see cref="T:System.Runtime.CompilerServices.IsConst" /> or <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-257">An array of <see cref="T:System.Type" /> objects that identify the required custom modifiers of the current property, such as <see cref="T:System.Runtime.CompilerServices.IsConst" /> or <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96c78-258">O <xref:System.Reflection.PropertyInfo.GetOptionalCustomModifiers%2A> e <xref:System.Reflection.PropertyInfo.GetRequiredCustomModifiers%2A> métodos são fornecidos para os designers de compiladores gerenciados.</span><span class="sxs-lookup"><span data-stu-id="96c78-258">The <xref:System.Reflection.PropertyInfo.GetOptionalCustomModifiers%2A> and <xref:System.Reflection.PropertyInfo.GetRequiredCustomModifiers%2A> methods are provided for designers of managed compilers.</span></span> <span data-ttu-id="96c78-259">Para obter mais informações sobre modificadores personalizados, consulte <xref:System.Runtime.CompilerServices.IsBoxed> e classes no relacionadas a <xref:System.Runtime.CompilerServices> namespace e a especificação de metadados na documentação do ECMA partição II.</span><span class="sxs-lookup"><span data-stu-id="96c78-259">For more information on custom modifiers, see <xref:System.Runtime.CompilerServices.IsBoxed> and related classes in the <xref:System.Runtime.CompilerServices> namespace and the metadata specification in the ECMA Partition II documentation.</span></span> <span data-ttu-id="96c78-260">A documentação está disponível online; confira [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212), no MSDN, e [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552), no site internacional da Ecma.</span><span class="sxs-lookup"><span data-stu-id="96c78-260">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetSetMethod">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="96c78-261">Returns a <see cref="T:System.Reflection.MethodInfo" /> representing the <see langword="set" /> accessor for this property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-261">Returns a <see cref="T:System.Reflection.MethodInfo" /> representing the <see langword="set" /> accessor for this property.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetSetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetSetMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetSetMethod() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetSetMethod" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSetMethod () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetSetMethod();" />
      <MemberSignature Language="F#" Value="abstract member GetSetMethod : unit -&gt; System.Reflection.MethodInfo&#xA;override this.GetSetMethod : unit -&gt; System.Reflection.MethodInfo" Usage="propertyInfo.GetSetMethod " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetSetMethod</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="96c78-262">Returns the public <see langword="set" /> accessor for this property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-262">Returns the public <see langword="set" /> accessor for this property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96c78-263">The <see langword="MethodInfo" /> object representing the <see langword="Set" /> method for this property if the <see langword="set" /> accessor is public, or <see langword="null" /> if the <see langword="set" /> accessor is not public.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-263">The <see langword="MethodInfo" /> object representing the <see langword="Set" /> method for this property if the <see langword="set" /> accessor is public, or <see langword="null" /> if the <see langword="set" /> accessor is not public.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96c78-264">Este é um método prático que fornece uma implementação para o resumo de `GetSetMethod` método com o `nonPublic` parâmetro definido como `false`.</span><span class="sxs-lookup"><span data-stu-id="96c78-264">This is a convenience method that provides an implementation for the abstract `GetSetMethod` method with the `nonPublic` parameter set to `false`.</span></span>  
  
 <span data-ttu-id="96c78-265">Para usar o `GetSetMethod` método, primeiro obtenha a classe `Type`.</span><span class="sxs-lookup"><span data-stu-id="96c78-265">To use the `GetSetMethod` method, first get the class `Type`.</span></span> <span data-ttu-id="96c78-266">Do `Type`, obter o <xref:System.Reflection.PropertyInfo>.</span><span class="sxs-lookup"><span data-stu-id="96c78-266">From the `Type`, get the <xref:System.Reflection.PropertyInfo>.</span></span> <span data-ttu-id="96c78-267">Do `PropertyInfo`, use o `GetSetMethod` método.</span><span class="sxs-lookup"><span data-stu-id="96c78-267">From the `PropertyInfo`, use the `GetSetMethod` method.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="96c78-268">quando invocado com associação tardia por meio de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-268">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="96c78-269">Enumeração associada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-269">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetSetMethod">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodInfo GetSetMethod (bool nonPublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetSetMethod(bool nonPublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetSetMethod (nonPublic As Boolean) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::MethodInfo ^ GetSetMethod(bool nonPublic);" />
      <MemberSignature Language="F#" Value="abstract member GetSetMethod : bool -&gt; System.Reflection.MethodInfo" Usage="propertyInfo.GetSetMethod nonPublic" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetSetMethod(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nonPublic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="nonPublic">
          <span data-ttu-id="96c78-270">Indicates whether the accessor should be returned if it is non-public.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-270">Indicates whether the accessor should be returned if it is non-public.</span>
          </span>
          <span data-ttu-id="96c78-271">
            <see langword="true" /> if a non-public accessor is to be returned; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-271">
              <see langword="true" /> if a non-public accessor is to be returned; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96c78-272">When overridden in a derived class, returns the <see langword="set" /> accessor for this property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-272">When overridden in a derived class, returns the <see langword="set" /> accessor for this property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96c78-273">This property's <see langword="Set" /> method, or <see langword="null" />, as shown in the following table.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-273">This property's <see langword="Set" /> method, or <see langword="null" />, as shown in the following table.</span>
          </span>
          <span data-ttu-id="96c78-274">
            <list type="table">
              <listheader>
                <term> Value  </term>
                <description> Condition  </description>
              </listheader>
              <item>
                <term> The <see langword="Set" /> method for this property.  </term>
                <description> The <see langword="set" /> accessor is public.  -or-  <paramref name="nonPublic" /> is <see langword="true" /> and the <see langword="set" /> accessor is non-public.  </description>
              </item>
              <item>
                <term>
                  <see langword="null" />
                </term>
                <description>
                  <paramref name="nonPublic" /> is <see langword="true" />, but the property is read-only.  -or-  <paramref name="nonPublic" /> is <see langword="false" /> and the <see langword="set" /> accessor is non-public.  -or-  There is no <see langword="set" /> accessor.  </description>
              </item>
            </list>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-274">
              <list type="table">
                <listheader>
                  <term> Value  </term>
                  <description> Condition  </description>
                </listheader>
                <item>
                  <term> The <see langword="Set" /> method for this property.  </term>
                  <description> The <see langword="set" /> accessor is public.  -or-  <paramref name="nonPublic" /> is <see langword="true" /> and the <see langword="set" /> accessor is non-public.  </description>
                </item>
                <item>
                  <term>
                    <see langword="null" />
                  </term>
                  <description>
                    <paramref name="nonPublic" /> is <see langword="true" />, but the property is read-only.  -or-  <paramref name="nonPublic" /> is <see langword="false" /> and the <see langword="set" /> accessor is non-public.  -or-  There is no <see langword="set" /> accessor.  </description>
                </item>
              </list>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96c78-275">Para usar o `GetSetMethod` método, primeiro obtenha a classe `Type`.</span><span class="sxs-lookup"><span data-stu-id="96c78-275">To use the `GetSetMethod` method, first get the class `Type`.</span></span> <span data-ttu-id="96c78-276">Do `Type`, obter o <xref:System.Reflection.PropertyInfo>.</span><span class="sxs-lookup"><span data-stu-id="96c78-276">From the `Type`, get the <xref:System.Reflection.PropertyInfo>.</span></span> <span data-ttu-id="96c78-277">Do `PropertyInfo`, use o `GetSetMethod` método.</span><span class="sxs-lookup"><span data-stu-id="96c78-277">From the `PropertyInfo`, use the `GetSetMethod` method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96c78-278">O exemplo a seguir exibe o `set` acessador para a propriedade especificada.</span><span class="sxs-lookup"><span data-stu-id="96c78-278">The following example displays the `set` accessor for the specified property.</span></span>  
  
 [!code-cpp[Classic PropertyInfo.GetSetMethod1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic PropertyInfo.GetSetMethod1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic PropertyInfo.GetSetMethod1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic PropertyInfo.GetSetMethod1 Example/CS/source.cs#1)]
 [!code-vb[Classic PropertyInfo.GetSetMethod1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic PropertyInfo.GetSetMethod1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="96c78-279">The requested method is non-public and the caller does not have <see cref="T:System.Security.Permissions.ReflectionPermission" /> to reflect on this non-public method.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-279">The requested method is non-public and the caller does not have <see cref="T:System.Security.Permissions.ReflectionPermission" /> to reflect on this non-public method.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="96c78-280">quando invocado com associação tardia por meio de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-280">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="96c78-281">Enumeração associada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-281">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetValue">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="96c78-282">Returns the property value of a specified object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-282">Returns the property value of a specified object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public object GetValue (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetValue(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValue (obj As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetValue(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="member this.GetValue : obj -&gt; obj" Usage="propertyInfo.GetValue obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="96c78-283">The object whose property value will be returned.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-283">The object whose property value will be returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96c78-284">Returns the property value of a specified object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-284">Returns the property value of a specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96c78-285">The property value of the specified object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-285">The property value of the specified object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96c78-286">Você chama o <xref:System.Reflection.PropertyInfo.GetValue%28System.Object%29> de sobrecarga para recuperar o valor de uma propriedade não indexada; se você tentar recuperar o valor de uma propriedade indexada, o método gera uma <xref:System.Reflection.TargetParameterCountException> exceção.</span><span class="sxs-lookup"><span data-stu-id="96c78-286">You call the <xref:System.Reflection.PropertyInfo.GetValue%28System.Object%29> overload to retrieve the value of a non-indexed property; if you try to retrieve the value of an indexed property, the method throws a <xref:System.Reflection.TargetParameterCountException> exception.</span></span> <span data-ttu-id="96c78-287">Você pode determinar se uma propriedade é indexada ou não ao chamar o <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> método.</span><span class="sxs-lookup"><span data-stu-id="96c78-287">You can determine whether a property is indexed or not by calling the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method.</span></span> <span data-ttu-id="96c78-288">Se o comprimento do retornado <xref:System.Reflection.ParameterInfo> matriz é zero, a propriedade não está indexada.</span><span class="sxs-lookup"><span data-stu-id="96c78-288">If the length of the returned <xref:System.Reflection.ParameterInfo> array is zero, the property is not indexed.</span></span>  
  
 <span data-ttu-id="96c78-289">Este é um método prático que fornece uma implementação para o resumo de <xref:System.Reflection.PropertyInfo.GetValue%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> método com o <xref:System.Reflection.BindingFlags> parâmetro definido como <xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType>, o <xref:System.Reflection.Binder> definida como `null`, a matriz de objetos de valores de índice definido como `null`, e o <xref:System.Globalization.CultureInfo> definido como `null`.</span><span class="sxs-lookup"><span data-stu-id="96c78-289">This is a convenience method that provides an implementation for the abstract <xref:System.Reflection.PropertyInfo.GetValue%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> method with the <xref:System.Reflection.BindingFlags> parameter set to <xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType>, the <xref:System.Reflection.Binder> set to `null`, the object array of index values set to `null`, and the <xref:System.Globalization.CultureInfo> set to `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96c78-290">O exemplo a seguir define uma `Planet` classe que tem duas propriedades: `Name`, o nome do planeta; e `Distance`, distância do planeta da Terra.</span><span class="sxs-lookup"><span data-stu-id="96c78-290">The following example defines a `Planet` class that has two properties: `Name`, the name of the planet; and `Distance`, the planet's distance from Earth.</span></span> <span data-ttu-id="96c78-291">O exemplo cria um `Planet` objeto que representa o planeta Jupiter e passá-lo para um `GetPropertyValues` método que exibe informações sobre as propriedades e usa o <xref:System.Reflection.PropertyInfo.GetValue%2A> método para obter o valor de cada `Planet` propriedade.</span><span class="sxs-lookup"><span data-stu-id="96c78-291">The example instantiates a `Planet` object that represents the planet Jupiter and passes it to a `GetPropertyValues` method that displays information about the properties and uses the <xref:System.Reflection.PropertyInfo.GetValue%2A> method to get the value of each `Planet` property.</span></span>  
  
 [!code-csharp[System.Reflection.PropertyInfo.GetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.propertyinfo.getvalue/cs/getvalue1.cs#1)]
 [!code-vb[System.Reflection.PropertyInfo.GetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.propertyinfo.getvalue/vb/getvalue1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public virtual object GetValue (object obj, object[] index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetValue(object obj, object[] index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetValue (obj As Object, index As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetValue(System::Object ^ obj, cli::array &lt;System::Object ^&gt; ^ index);" />
      <MemberSignature Language="F#" Value="abstract member GetValue : obj * obj[] -&gt; obj&#xA;override this.GetValue : obj * obj[] -&gt; obj" Usage="propertyInfo.GetValue (obj, index)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetValue(System.Object,System.Object[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="index" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="96c78-292">The object whose property value will be returned.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-292">The object whose property value will be returned.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="96c78-293">Optional index values for indexed properties.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-293">Optional index values for indexed properties.</span>
          </span>
          <span data-ttu-id="96c78-294">The indexes of indexed properties are zero-based.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-294">The indexes of indexed properties are zero-based.</span>
          </span>
          <span data-ttu-id="96c78-295">This value should be <see langword="null" /> for non-indexed properties.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-295">This value should be <see langword="null" /> for non-indexed properties.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96c78-296">Returns the property value of a specified object with optional index values for indexed properties.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-296">Returns the property value of a specified object with optional index values for indexed properties.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96c78-297">The property value of the specified object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-297">The property value of the specified object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96c78-298">Para determinar se é indexada de uma propriedade, use o <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> método.</span><span class="sxs-lookup"><span data-stu-id="96c78-298">To determine whether a property is indexed, use the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method.</span></span> <span data-ttu-id="96c78-299">Se a matriz resultante tem 0 (zero) elementos, a propriedade não está indexado.</span><span class="sxs-lookup"><span data-stu-id="96c78-299">If the resulting array has 0 (zero) elements, the property is not indexed.</span></span>  
  
 <span data-ttu-id="96c78-300">Este é um método prático que fornece uma implementação para o resumo de `GetValue` método com um `BindingFlags` parâmetro `Default`, o `Binder` definida como `null`e o `CultureInfo` definido como `null`.</span><span class="sxs-lookup"><span data-stu-id="96c78-300">This is a convenience method that provides an implementation for the abstract `GetValue` method with a `BindingFlags` parameter of `Default`, the `Binder` set to `null`, and the `CultureInfo` set to `null`.</span></span>  
  
 <span data-ttu-id="96c78-301">Como propriedades estáticas pertencem ao tipo, objetos não individuais, obter propriedades estáticas, passando `null` como o argumento de objeto.</span><span class="sxs-lookup"><span data-stu-id="96c78-301">Because static properties belong to the type, not individual objects, get static properties by passing `null` as the object argument.</span></span> <span data-ttu-id="96c78-302">Por exemplo, use o código a seguir para obter estático `CurrentCulture` propriedade `CultureInfo` :</span><span class="sxs-lookup"><span data-stu-id="96c78-302">For example, use the following code to get the static `CurrentCulture` property of `CultureInfo` :</span></span>  
  
```csharp  
PropertyInfo CurCultProp =   
    (typeof(CultureInfo)).GetProperty("CurrentCulture");   
Console.WriteLine("CurrCult: " +  
    CurCultProp.GetValue(null,null));  
```  
  
 <span data-ttu-id="96c78-303">Para usar o `GetValue` método, primeiro obtenha a classe `Type`.</span><span class="sxs-lookup"><span data-stu-id="96c78-303">To use the `GetValue` method, first get the class `Type`.</span></span> <span data-ttu-id="96c78-304">Do `Type`, obter o `PropertyInfo`.</span><span class="sxs-lookup"><span data-stu-id="96c78-304">From the `Type`, get the `PropertyInfo`.</span></span> <span data-ttu-id="96c78-305">Do `PropertyInfo`, use o `GetValue` método.</span><span class="sxs-lookup"><span data-stu-id="96c78-305">From the `PropertyInfo`, use the `GetValue` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96c78-306">Começando por [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], este método pode ser usado para acessar membros não públicos caso o chamador tenha recebido <xref:System.Security.Permissions.ReflectionPermission> com o sinalizador <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> e caso o conjunto de concessões dos membros não públicos esteja restrito ao conjunto de concessões do chamador ou um subconjunto dele.</span><span class="sxs-lookup"><span data-stu-id="96c78-306">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="96c78-307">(Consulte [considerações de segurança para reflexão](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="96c78-307">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="96c78-308">Para usar essa funcionalidade, seu aplicativo deve ser direcionado ao [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] ou posterior.</span><span class="sxs-lookup"><span data-stu-id="96c78-308">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96c78-309">O exemplo a seguir mostra como obter o valor de uma propriedade indexada.</span><span class="sxs-lookup"><span data-stu-id="96c78-309">The following example shows how to get the value of an indexed property.</span></span> <span data-ttu-id="96c78-310">O <xref:System.String.Chars%2A?displayProperty=nameWithType> é a propriedade padrão (o indexador em c#) da <xref:System.String> classe.</span><span class="sxs-lookup"><span data-stu-id="96c78-310">The <xref:System.String.Chars%2A?displayProperty=nameWithType> property is the default property (the indexer in C#) of the <xref:System.String> class.</span></span>  
  
 [!code-csharp[System.Reflection.PropertyInfo.GetValue Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.PropertyInfo.GetValue Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.PropertyInfo.GetValue Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.PropertyInfo.GetValue Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="96c78-311">The <paramref name="index" /> array does not contain the type of arguments needed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-311">The <paramref name="index" /> array does not contain the type of arguments needed.</span>
          </span>
          <span data-ttu-id="96c78-312">-or-  The property's <see langword="get" /> accessor is not found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-312">-or-  The property's <see langword="get" /> accessor is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetException">
          <span data-ttu-id="96c78-313">
            <block subset="none" type="note">
              <para> In the <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET for Windows Store apps</see> or the <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Portable Class Library</see>, catch <see cref="T:System.Exception" /> instead.  </para>
            </block>  The object does not match the target type, or a property is an instance property but <paramref name="obj" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-313">
              <block subset="none" type="note">
                <para> In the <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET for Windows Store apps</see> or the <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Portable Class Library</see>, catch <see cref="T:System.Exception" /> instead.  </para>
              </block>  The object does not match the target type, or a property is an instance property but <paramref name="obj" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetParameterCountException">
          <span data-ttu-id="96c78-314">The number of parameters in <paramref name="index" /> does not match the number of parameters the indexed property takes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-314">The number of parameters in <paramref name="index" /> does not match the number of parameters the indexed property takes.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="96c78-315">
            <block subset="none" type="note">
              <para> In the <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET for Windows Store apps</see> or the <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Portable Class Library</see>, catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.  </para>
            </block>  There was an illegal attempt to access a private or protected method inside a class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-315">
              <block subset="none" type="note">
                <para> In the <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET for Windows Store apps</see> or the <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Portable Class Library</see>, catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.  </para>
              </block>  There was an illegal attempt to access a private or protected method inside a class.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="96c78-316">An error occurred while retrieving the property value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-316">An error occurred while retrieving the property value.</span>
          </span>
          <span data-ttu-id="96c78-317">For example, an index value specified for an indexed property is out of range.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-317">For example, an index value specified for an indexed property is out of range.</span>
          </span>
          <span data-ttu-id="96c78-318">The <see cref="P:System.Exception.InnerException" /> property indicates the reason for the error.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-318">The <see cref="P:System.Exception.InnerException" /> property indicates the reason for the error.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="96c78-319">quando invocado com associação tardia por meio de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-319">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="96c78-320">Enumeração associada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-320">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public abstract object GetValue (object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] index, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetValue(object obj, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object[] index, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ GetValue(System::Object ^ obj, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ index, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member GetValue : obj * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo -&gt; obj" Usage="propertyInfo.GetValue (obj, invokeAttr, binder, index, culture)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="index" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="96c78-321">The object whose property value will be returned.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-321">The object whose property value will be returned.</span>
          </span>
        </param>
        <param name="invokeAttr">
          <span data-ttu-id="96c78-322">A bitwise combination of the following enumeration members that specify the invocation attribute: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="Static" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, and <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-322">A bitwise combination of the following enumeration members that specify the invocation attribute: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="Static" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, and <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="96c78-323">You must specify a suitable invocation attribute.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-323">You must specify a suitable invocation attribute.</span>
          </span>
          <span data-ttu-id="96c78-324">For example, to invoke a static member, set the <see langword="Static" /> flag.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-324">For example, to invoke a static member, set the <see langword="Static" /> flag.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="96c78-325">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects through reflection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-325">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects through reflection.</span>
          </span>
          <span data-ttu-id="96c78-326">If <c>binder</c> is <see langword="null" />, the default binder is used.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-326">If <c>binder</c> is <see langword="null" />, the default binder is used.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="96c78-327">Optional index values for indexed properties.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-327">Optional index values for indexed properties.</span>
          </span>
          <span data-ttu-id="96c78-328">This value should be <see langword="null" /> for non-indexed properties.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-328">This value should be <see langword="null" /> for non-indexed properties.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="96c78-329">The culture for which the resource is to be localized.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-329">The culture for which the resource is to be localized.</span>
          </span>
          <span data-ttu-id="96c78-330">If the resource is not localized for this culture, the <see cref="P:System.Globalization.CultureInfo.Parent" /> property will be called successively in search of a match.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-330">If the resource is not localized for this culture, the <see cref="P:System.Globalization.CultureInfo.Parent" /> property will be called successively in search of a match.</span>
          </span>
          <span data-ttu-id="96c78-331">If this value is <see langword="null" />, the culture-specific information is obtained from the <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-331">If this value is <see langword="null" />, the culture-specific information is obtained from the <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96c78-332">When overridden in a derived class, returns the property value of a specified object that has the specified binding, index, and culture-specific information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-332">When overridden in a derived class, returns the property value of a specified object that has the specified binding, index, and culture-specific information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96c78-333">The property value of the specified object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-333">The property value of the specified object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96c78-334">Para determinar se é indexada de uma propriedade, use o <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> método.</span><span class="sxs-lookup"><span data-stu-id="96c78-334">To determine whether a property is indexed, use the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method.</span></span> <span data-ttu-id="96c78-335">Se a matriz resultante tem 0 (zero) elementos, a propriedade não está indexado.</span><span class="sxs-lookup"><span data-stu-id="96c78-335">If the resulting array has 0 (zero) elements, the property is not indexed.</span></span>  
  
 <span data-ttu-id="96c78-336">Como propriedades estáticas pertencem ao tipo, objetos não individuais, obter propriedades estáticas, passando `null` como o argumento de objeto.</span><span class="sxs-lookup"><span data-stu-id="96c78-336">Because static properties belong to the type, not individual objects, get static properties by passing `null` as the object argument.</span></span> <span data-ttu-id="96c78-337">Por exemplo, use o código a seguir para obter estático `CurrentCulture` propriedade `CultureInfo` :</span><span class="sxs-lookup"><span data-stu-id="96c78-337">For example, use the following code to get the static `CurrentCulture` property of `CultureInfo` :</span></span>  
  
```csharp  
PropertyInfo CurCultProp =   
       (typeof(CultureInfo)).GetProperty("CurrentCulture");   
Console.WriteLine("CurrCult: " +  
       CurCultProp.GetValue(null,null));  
```  
  
 <span data-ttu-id="96c78-338">Para usar o `GetValue` método, primeiro obtenha a classe `Type`.</span><span class="sxs-lookup"><span data-stu-id="96c78-338">To use the `GetValue` method, first get the class `Type`.</span></span> <span data-ttu-id="96c78-339">Do `Type`, obter o `PropertyInfo`.</span><span class="sxs-lookup"><span data-stu-id="96c78-339">From the `Type`, get the `PropertyInfo`.</span></span> <span data-ttu-id="96c78-340">Do `PropertyInfo`, use o `GetValue` método.</span><span class="sxs-lookup"><span data-stu-id="96c78-340">From the `PropertyInfo`, use the `GetValue` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96c78-341">Começando por [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], este método pode ser usado para acessar membros não públicos caso o chamador tenha recebido <xref:System.Security.Permissions.ReflectionPermission> com o sinalizador <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> e caso o conjunto de concessões dos membros não públicos esteja restrito ao conjunto de concessões do chamador ou um subconjunto dele.</span><span class="sxs-lookup"><span data-stu-id="96c78-341">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="96c78-342">(Consulte [considerações de segurança para reflexão](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="96c78-342">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="96c78-343">Para usar essa funcionalidade, seu aplicativo deve ser direcionado ao [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] ou posterior.</span><span class="sxs-lookup"><span data-stu-id="96c78-343">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="96c78-344">The <paramref name="index" /> array does not contain the type of arguments needed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-344">The <paramref name="index" /> array does not contain the type of arguments needed.</span>
          </span>
          <span data-ttu-id="96c78-345">-or-  The property's <see langword="get" /> accessor is not found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-345">-or-  The property's <see langword="get" /> accessor is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetException">
          <span data-ttu-id="96c78-346">The object does not match the target type, or a property is an instance property but <paramref name="obj" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-346">The object does not match the target type, or a property is an instance property but <paramref name="obj" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetParameterCountException">
          <span data-ttu-id="96c78-347">The number of parameters in <paramref name="index" /> does not match the number of parameters the indexed property takes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-347">The number of parameters in <paramref name="index" /> does not match the number of parameters the indexed property takes.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="96c78-348">There was an illegal attempt to access a private or protected method inside a class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-348">There was an illegal attempt to access a private or protected method inside a class.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="96c78-349">An error occurred while retrieving the property value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-349">An error occurred while retrieving the property value.</span>
          </span>
          <span data-ttu-id="96c78-350">For example, an index value specified for an indexed property is out of range.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-350">For example, an index value specified for an indexed property is out of range.</span>
          </span>
          <span data-ttu-id="96c78-351">The <see cref="P:System.Exception.InnerException" /> property indicates the reason for the error.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-351">The <see cref="P:System.Exception.InnerException" /> property indicates the reason for the error.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="96c78-352">quando invocado com associação tardia por meio de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-352">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="96c78-353">Enumeração associada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-353">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="IsSpecialName">
      <MemberSignature Language="C#" Value="public bool IsSpecialName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSpecialName" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PropertyInfo.IsSpecialName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSpecialName As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSpecialName { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSpecialName : bool" Usage="System.Reflection.PropertyInfo.IsSpecialName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._PropertyInfo.IsSpecialName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96c78-354">Gets a value indicating whether the property is the special name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-354">Gets a value indicating whether the property is the special name.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96c78-355">
            <see langword="true" /> se a propriedade for o nome especial; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-355">
              <see langword="true" /> if this property is the special name; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96c78-356">O `SpecialName` bit é definido como sinalizador membros que são tratados de forma especial por alguns compiladores (como acessadores de propriedade e métodos de sobrecarga de operador).</span><span class="sxs-lookup"><span data-stu-id="96c78-356">The `SpecialName` bit is set to flag members that are treated in a special way by some compilers (such as property accessors and operator overloading methods).</span></span>  
  
 <span data-ttu-id="96c78-357">Para obter o `IsSpecialName` propriedade, primeiro obtenha a classe `Type`.</span><span class="sxs-lookup"><span data-stu-id="96c78-357">To get the `IsSpecialName` property, first get the class `Type`.</span></span> <span data-ttu-id="96c78-358">Do `Type`, obter o `PropertyInfo`.</span><span class="sxs-lookup"><span data-stu-id="96c78-358">From the `Type`, get the `PropertyInfo`.</span></span> <span data-ttu-id="96c78-359">Do `PropertyInfo`, obter o `IsSpecialName` valor.</span><span class="sxs-lookup"><span data-stu-id="96c78-359">From the `PropertyInfo`, get the `IsSpecialName` value.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MemberType">
      <MemberSignature Language="C#" Value="public override System.Reflection.MemberTypes MemberType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MemberTypes MemberType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PropertyInfo.MemberType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MemberType As MemberTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MemberTypes MemberType { System::Reflection::MemberTypes get(); };" />
      <MemberSignature Language="F#" Value="member this.MemberType : System.Reflection.MemberTypes" Usage="System.Reflection.PropertyInfo.MemberType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._PropertyInfo.MemberType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96c78-360">Gets a <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-360">Gets a <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96c78-361">Um valor <see cref="T:System.Reflection.MemberTypes" /> que indica que este membro é uma propriedade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-361">A <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a property.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96c78-362">Esta propriedade substitui <xref:System.Reflection.MemberInfo.MemberType%2A>.</span><span class="sxs-lookup"><span data-stu-id="96c78-362">This property overrides <xref:System.Reflection.MemberInfo.MemberType%2A>.</span></span> <span data-ttu-id="96c78-363">Portanto, quando você examinar um conjunto de <xref:System.Reflection.MemberInfo> objetos — por exemplo, a matriz retornada por <xref:System.Type.GetMembers%2A> — o <xref:System.Reflection.MemberInfo.MemberType%2A> propriedade retorna <xref:System.Reflection.MemberTypes.Property> somente quando um determinado membro é uma propriedade.</span><span class="sxs-lookup"><span data-stu-id="96c78-363">Therefore, when you examine a set of <xref:System.Reflection.MemberInfo> objects — for example, the array returned by <xref:System.Type.GetMembers%2A> — the <xref:System.Reflection.MemberInfo.MemberType%2A> property returns <xref:System.Reflection.MemberTypes.Property> only when a given member is a property.</span></span>  
  
 <span data-ttu-id="96c78-364">`MemberType` é uma classe derivada de `MemberInfo` e especifica o tipo de membro é por isso.</span><span class="sxs-lookup"><span data-stu-id="96c78-364">`MemberType` is a derived class of `MemberInfo` and specifies the type of member this is.</span></span> <span data-ttu-id="96c78-365">Tipos de membro são construtores e métodos, campos e propriedades.</span><span class="sxs-lookup"><span data-stu-id="96c78-365">Member types are constructors, properties, fields, and methods.</span></span> <span data-ttu-id="96c78-366">Como esse é um `PropertyInfo` propriedade, o tipo retornado é uma propriedade.</span><span class="sxs-lookup"><span data-stu-id="96c78-366">Since this is a `PropertyInfo` property, the returned type is a property.</span></span>  
  
 <span data-ttu-id="96c78-367">Para obter o `MemberType` propriedade, primeiro obtenha a classe `Type`.</span><span class="sxs-lookup"><span data-stu-id="96c78-367">To get the `MemberType` property, first get the class `Type`.</span></span> <span data-ttu-id="96c78-368">Do `Type`, obter o `PropertyInfo`.</span><span class="sxs-lookup"><span data-stu-id="96c78-368">From the `Type`, get the `PropertyInfo`.</span></span> <span data-ttu-id="96c78-369">Do `PropertyInfo`, obter o `MemberType` valor.</span><span class="sxs-lookup"><span data-stu-id="96c78-369">From the `PropertyInfo`, get the `MemberType` value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96c78-370">O exemplo a seguir exibe o tipo do membro especificado.</span><span class="sxs-lookup"><span data-stu-id="96c78-370">The following example displays the type of the specified member.</span></span>  
  
 [!code-cpp[Classic PropertyInfo.MemberType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic PropertyInfo.MemberType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic PropertyInfo.MemberType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic PropertyInfo.MemberType Example/CS/source.cs#1)]
 [!code-vb[Classic PropertyInfo.MemberType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic PropertyInfo.MemberType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Reflection.PropertyInfo left, System.Reflection.PropertyInfo right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Reflection.PropertyInfo left, class System.Reflection.PropertyInfo right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.op_Equality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As PropertyInfo, right As PropertyInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Reflection::PropertyInfo ^ left, System::Reflection::PropertyInfo ^ right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Reflection.PropertyInfo * System.Reflection.PropertyInfo -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Reflection.PropertyInfo" />
        <Parameter Name="right" Type="System.Reflection.PropertyInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="96c78-371">The first object to compare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-371">The first object to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="96c78-372">The second object to compare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-372">The second object to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96c78-373">Indicates whether two <see cref="T:System.Reflection.PropertyInfo" /> objects are equal.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-373">Indicates whether two <see cref="T:System.Reflection.PropertyInfo" /> objects are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96c78-374">
            <see langword="true" /> if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-374">
              <see langword="true" /> if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Reflection.PropertyInfo left, System.Reflection.PropertyInfo right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Reflection.PropertyInfo left, class System.Reflection.PropertyInfo right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.op_Inequality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As PropertyInfo, right As PropertyInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Reflection::PropertyInfo ^ left, System::Reflection::PropertyInfo ^ right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Reflection.PropertyInfo * System.Reflection.PropertyInfo -&gt; bool" Usage="System.Reflection.PropertyInfo.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Reflection.PropertyInfo" />
        <Parameter Name="right" Type="System.Reflection.PropertyInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="96c78-375">The first object to compare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-375">The first object to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="96c78-376">The second object to compare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-376">The second object to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96c78-377">Indicates whether two <see cref="T:System.Reflection.PropertyInfo" /> objects are not equal.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-377">Indicates whether two <see cref="T:System.Reflection.PropertyInfo" /> objects are not equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96c78-378">
            <see langword="true" /> if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-378">
              <see langword="true" /> if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyType">
      <MemberSignature Language="C#" Value="public abstract Type PropertyType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type PropertyType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PropertyInfo.PropertyType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property PropertyType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Type ^ PropertyType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PropertyType : Type" Usage="System.Reflection.PropertyInfo.PropertyType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._PropertyInfo.PropertyType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96c78-379">Gets the type of this property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-379">Gets the type of this property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96c78-380">O tipo dessa propriedade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-380">The type of this property.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96c78-381">Para determinar o tipo de uma propriedade específica, faça o seguinte:</span><span class="sxs-lookup"><span data-stu-id="96c78-381">To determine the type of a particular property, do the following:</span></span>  
  
1.  <span data-ttu-id="96c78-382">Obter um <xref:System.Type> objeto que representa o tipo (a classe ou estrutura) que contém a propriedade.</span><span class="sxs-lookup"><span data-stu-id="96c78-382">Get a <xref:System.Type> object that represents the type (the class or structure) that contains the property.</span></span> <span data-ttu-id="96c78-383">Se você estiver trabalhando com um objeto (uma instância de um tipo), você pode chamar seu <xref:System.Object.GetType%2A> método.</span><span class="sxs-lookup"><span data-stu-id="96c78-383">If you are working with an object (an instance of a type), you can call its <xref:System.Object.GetType%2A> method.</span></span> <span data-ttu-id="96c78-384">Caso contrário, você pode usar o operador c# ou o operador do Visual Basic, como mostra o exemplo.</span><span class="sxs-lookup"><span data-stu-id="96c78-384">Otherwise, you can use the C#  operator or the Visual Basic  operator, as the example illustrates.</span></span>  
  
2.  <span data-ttu-id="96c78-385">Obter um <xref:System.Reflection.PropertyInfo> objeto que representa a propriedade na qual você está interessado.</span><span class="sxs-lookup"><span data-stu-id="96c78-385">Get a <xref:System.Reflection.PropertyInfo> object that represents the property in which you're interested.</span></span> <span data-ttu-id="96c78-386">Você pode fazer isso obtendo uma matriz de todas as propriedades do <xref:System.Type.GetProperties%2A?displayProperty=nameWithType> método e, em seguida, iterar os elementos na matriz, ou você podem recuperar o <xref:System.Reflection.PropertyInfo> objeto que representa a propriedade diretamente ao chamar o <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> método e especificando o nome da propriedade.</span><span class="sxs-lookup"><span data-stu-id="96c78-386">You can do this by getting an array of all properties from the <xref:System.Type.GetProperties%2A?displayProperty=nameWithType> method and then iterating the elements in the array, or you can retrieve the <xref:System.Reflection.PropertyInfo> object that represents the property directly by calling the <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> method and specifying the property name.</span></span>  
  
3.  <span data-ttu-id="96c78-387">Recuperar o valor da <xref:System.Reflection.PropertyInfo.PropertyType%2A> propriedade o <xref:System.Reflection.PropertyInfo> objeto.</span><span class="sxs-lookup"><span data-stu-id="96c78-387">Retrieve the value of the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property from the <xref:System.Reflection.PropertyInfo> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96c78-388">O exemplo a seguir define um `Employee` classe que tem cinco propriedades.</span><span class="sxs-lookup"><span data-stu-id="96c78-388">The following example defines an `Employee` class that has five properties.</span></span> <span data-ttu-id="96c78-389">Ele então usa recupera uma matriz de <xref:System.Reflection.PropertyInfo> objetos que representam as propriedades e exibe o nome e o tipo de cada um.</span><span class="sxs-lookup"><span data-stu-id="96c78-389">It then uses retrieves an array of <xref:System.Reflection.PropertyInfo> objects that represent those properties and displays the name and type of each.</span></span>  
  
 [!code-csharp[System.Reflection.PropertyInfo.PropertyType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.propertyinfo.propertytype/cs/propertytype1.cs#1)]
 [!code-vb[System.Reflection.PropertyInfo.PropertyType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.propertyinfo.propertytype/vb/propertytype1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo SetMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo SetMethod" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PropertyInfo.SetMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property SetMethod As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodInfo ^ SetMethod { System::Reflection::MethodInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SetMethod : System.Reflection.MethodInfo" Usage="System.Reflection.PropertyInfo.SetMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96c78-390">Gets the <see langword="set" /> accessor for this property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-390">Gets the <see langword="set" /> accessor for this property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96c78-391">O acessador <see langword="set" /> dessa propriedade ou <see langword="null" />, se a propriedade for somente leitura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-391">The <see langword="set" /> accessor for this property, or <see langword="null" /> if the property is read-only.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96c78-392">Recuperar o valor da <xref:System.Reflection.PropertyInfo.SetMethod%2A> propriedade é equivalente a chamar o <xref:System.Reflection.PropertyInfo.GetSetMethod%28System.Boolean%29> método com um valor de `true` para o `nonPublic` argumento.</span><span class="sxs-lookup"><span data-stu-id="96c78-392">Retrieving the value of the <xref:System.Reflection.PropertyInfo.SetMethod%2A> property is equivalent to calling the <xref:System.Reflection.PropertyInfo.GetSetMethod%28System.Boolean%29> method with a value of `true` for the `nonPublic` argument.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.PropertyInfo.GetMethod" />
        <altmember cref="P:System.Reflection.PropertyInfo.CanWrite" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SetValue">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="96c78-393">Sets the property value for a specified object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-393">Sets the property value for a specified object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (object obj, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(object obj, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (obj As Object, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Object ^ obj, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.SetValue : obj * obj -&gt; unit" Usage="propertyInfo.SetValue (obj, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="96c78-394">The object whose property value will be set.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-394">The object whose property value will be set.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="96c78-395">The new property value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-395">The new property value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96c78-396">Sets the property value of a specified object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-396">Sets the property value of a specified object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96c78-397">O <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%29> sobrecarga define o valor de uma propriedade não indexada.</span><span class="sxs-lookup"><span data-stu-id="96c78-397">The <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%29> overload sets the value of a non-indexed property.</span></span> <span data-ttu-id="96c78-398">Para determinar se uma propriedade é indexada, chame o <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> método.</span><span class="sxs-lookup"><span data-stu-id="96c78-398">To determine whether a property is indexed, call the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method.</span></span> <span data-ttu-id="96c78-399">Se a matriz resultante tem 0 (zero) elementos, a propriedade não está indexado.</span><span class="sxs-lookup"><span data-stu-id="96c78-399">If the resulting array has 0 (zero) elements, the property is not indexed.</span></span> <span data-ttu-id="96c78-400">Para definir o valor de uma propriedade indexada, chame o <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Object%5B%5D%29> sobrecarga.</span><span class="sxs-lookup"><span data-stu-id="96c78-400">To set the value of an indexed property, call the <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Object%5B%5D%29> overload.</span></span>  
  
 <span data-ttu-id="96c78-401">Se a propriedade de tipo deste <xref:System.Reflection.PropertyInfo> objeto é um tipo de valor e `value` é `null`, a propriedade será definida como o valor padrão para esse tipo.</span><span class="sxs-lookup"><span data-stu-id="96c78-401">If the property type of this <xref:System.Reflection.PropertyInfo> object is a value type and `value` is `null`, the property will be set to the default value for that type.</span></span>  
  
 <span data-ttu-id="96c78-402">Este é um método prático que chama a implementação de tempo de execução do resumo <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> método, especificando <xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType> para o `BindingFlags` parâmetro `null` para `Binder`, `null` para `Object[]`e `null` para `CultureInfo`.</span><span class="sxs-lookup"><span data-stu-id="96c78-402">This is a convenience method that calls the runtime implementation of the abstract <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> method, specifying <xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType> for the `BindingFlags` parameter, `null` for `Binder`, `null` for `Object[]`, and `null` for `CultureInfo`.</span></span>  
  
 <span data-ttu-id="96c78-403">Para usar o <xref:System.Reflection.PropertyInfo.SetValue%2A> método, primeiro obtenha um <xref:System.Type> objeto que representa a classe.</span><span class="sxs-lookup"><span data-stu-id="96c78-403">To use the <xref:System.Reflection.PropertyInfo.SetValue%2A> method, first get a <xref:System.Type> object that represents the class.</span></span> <span data-ttu-id="96c78-404">Do <xref:System.Type>, obter o <xref:System.Reflection.PropertyInfo> objeto.</span><span class="sxs-lookup"><span data-stu-id="96c78-404">From the <xref:System.Type>, get the <xref:System.Reflection.PropertyInfo> object.</span></span> <span data-ttu-id="96c78-405">Do <xref:System.Reflection.PropertyInfo> de objeto, chame o <xref:System.Reflection.PropertyInfo.SetValue%2A> método.</span><span class="sxs-lookup"><span data-stu-id="96c78-405">From the <xref:System.Reflection.PropertyInfo> object, call the <xref:System.Reflection.PropertyInfo.SetValue%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96c78-406">Começando por [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], este método pode ser usado para acessar membros não públicos caso o chamador tenha recebido <xref:System.Security.Permissions.ReflectionPermission> com o sinalizador <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> e caso o conjunto de concessões dos membros não públicos esteja restrito ao conjunto de concessões do chamador ou um subconjunto dele.</span><span class="sxs-lookup"><span data-stu-id="96c78-406">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="96c78-407">(Consulte [considerações de segurança para reflexão](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="96c78-407">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="96c78-408">Para usar essa funcionalidade, seu aplicativo deve ser direcionado ao [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] ou posterior.</span><span class="sxs-lookup"><span data-stu-id="96c78-408">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96c78-409">O exemplo a seguir declara uma classe denominada `Example` com um `static` (`Shared` no Visual Basic) e a propriedade de uma instância.</span><span class="sxs-lookup"><span data-stu-id="96c78-409">The following example declares a class named `Example` with one `static` (`Shared` in Visual Basic) and one instance property.</span></span> <span data-ttu-id="96c78-410">O exemplo usa o <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%29> valores e exibe os valores iniciais e finais de método para alterar a propriedade original.</span><span class="sxs-lookup"><span data-stu-id="96c78-410">The example uses the <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%29> method to change the original property values and displays the original and final values.</span></span>  
  
 [!code-cpp[PropertyInfo.SetValue#2](~/samples/snippets/cpp/VS_Snippets_CLR/PropertyInfo.SetValue/cpp/example2.cpp#2)]
 [!code-csharp[PropertyInfo.SetValue#2](~/samples/snippets/csharp/VS_Snippets_CLR/PropertyInfo.SetValue/cs/example2.cs#2)]
 [!code-vb[PropertyInfo.SetValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/PropertyInfo.SetValue/vb/example2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="96c78-411">The property's <see langword="set" /> accessor is not found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-411">The property's <see langword="set" /> accessor is not found.</span>
          </span>
          <span data-ttu-id="96c78-412">-or-  <paramref name="value" /> cannot be converted to the type of <see cref="P:System.Reflection.PropertyInfo.PropertyType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-412">-or-  <paramref name="value" /> cannot be converted to the type of <see cref="P:System.Reflection.PropertyInfo.PropertyType" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetException">
          <span data-ttu-id="96c78-413">
            <block subset="none" type="note">
              <para> In the <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET for Windows Store apps</see> or the <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Portable Class Library</see>, catch <see cref="T:System.Exception" /> instead.  </para>
            </block>  The type of <paramref name="obj" /> does not match the target type, or a property is an instance property but <paramref name="obj" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-413">
              <block subset="none" type="note">
                <para> In the <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET for Windows Store apps</see> or the <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Portable Class Library</see>, catch <see cref="T:System.Exception" /> instead.  </para>
              </block>  The type of <paramref name="obj" /> does not match the target type, or a property is an instance property but <paramref name="obj" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="96c78-414">
            <block subset="none" type="note">
              <para> In the <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET for Windows Store apps</see> or the <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Portable Class Library</see>, catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.  </para>
            </block>  There was an illegal attempt to access a private or protected method inside a class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-414">
              <block subset="none" type="note">
                <para> In the <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET for Windows Store apps</see> or the <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Portable Class Library</see>, catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.  </para>
              </block>  There was an illegal attempt to access a private or protected method inside a class.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="96c78-415">An error occurred while setting the property value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-415">An error occurred while setting the property value.</span>
          </span>
          <span data-ttu-id="96c78-416">The <see cref="P:System.Exception.InnerException" /> property indicates the reason for the error.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-416">The <see cref="P:System.Exception.InnerException" /> property indicates the reason for the error.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="96c78-417">quando invocado com associação tardia por meio de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-417">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="96c78-418">Enumeração associada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-418">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public virtual void SetValue (object obj, object value, object[] index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetValue(object obj, object value, object[] index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetValue (obj As Object, value As Object, index As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetValue(System::Object ^ obj, System::Object ^ value, cli::array &lt;System::Object ^&gt; ^ index);" />
      <MemberSignature Language="F#" Value="abstract member SetValue : obj * obj * obj[] -&gt; unit&#xA;override this.SetValue : obj * obj * obj[] -&gt; unit" Usage="propertyInfo.SetValue (obj, value, index)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.SetValue(System.Object,System.Object,System.Object[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="index" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="96c78-419">The object whose property value will be set.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-419">The object whose property value will be set.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="96c78-420">The new property value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-420">The new property value.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="96c78-421">Optional index values for indexed properties.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-421">Optional index values for indexed properties.</span>
          </span>
          <span data-ttu-id="96c78-422">This value should be <see langword="null" /> for non-indexed properties.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-422">This value should be <see langword="null" /> for non-indexed properties.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96c78-423">Sets the property value of a specified object with optional index values for index properties.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-423">Sets the property value of a specified object with optional index values for index properties.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96c78-424">Se este <xref:System.Reflection.PropertyInfo> objeto é um tipo de valor e `value` é `null`, a propriedade será definido como o valor padrão para esse tipo.</span><span class="sxs-lookup"><span data-stu-id="96c78-424">If this <xref:System.Reflection.PropertyInfo> object is a value type and `value` is `null`, then the property will be set to the default value for that type.</span></span>  
  
 <span data-ttu-id="96c78-425">Para determinar se é indexada de uma propriedade, use o <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> método.</span><span class="sxs-lookup"><span data-stu-id="96c78-425">To determine whether a property is indexed, use the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method.</span></span> <span data-ttu-id="96c78-426">Se a matriz resultante tem 0 (zero) elementos, a propriedade não está indexado.</span><span class="sxs-lookup"><span data-stu-id="96c78-426">If the resulting array has 0 (zero) elements, the property is not indexed.</span></span>  
  
 <span data-ttu-id="96c78-427">Este é um método prático que chama a implementação de tempo de execução do resumo <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> método, especificando <xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType> para o `BindingFlags` parâmetro `null` para `Binder`, e `null` para `CultureInfo`.</span><span class="sxs-lookup"><span data-stu-id="96c78-427">This is a convenience method that calls the runtime implementation of the abstract <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> method, specifying <xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType> for the `BindingFlags` parameter, `null` for `Binder`, and `null` for `CultureInfo`.</span></span>  
  
 <span data-ttu-id="96c78-428">Para usar o <xref:System.Reflection.PropertyInfo.SetValue%2A> método, primeiro obtenha um <xref:System.Type> objeto que representa a classe.</span><span class="sxs-lookup"><span data-stu-id="96c78-428">To use the <xref:System.Reflection.PropertyInfo.SetValue%2A> method, first get a <xref:System.Type> object that represents the class.</span></span> <span data-ttu-id="96c78-429">Do <xref:System.Type>, obter o <xref:System.Reflection.PropertyInfo>.</span><span class="sxs-lookup"><span data-stu-id="96c78-429">From the <xref:System.Type>, get the <xref:System.Reflection.PropertyInfo>.</span></span> <span data-ttu-id="96c78-430">Do <xref:System.Reflection.PropertyInfo>, use o <xref:System.Reflection.PropertyInfo.SetValue%2A> método.</span><span class="sxs-lookup"><span data-stu-id="96c78-430">From the <xref:System.Reflection.PropertyInfo>, use the <xref:System.Reflection.PropertyInfo.SetValue%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96c78-431">Começando por [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], este método pode ser usado para acessar membros não públicos caso o chamador tenha recebido <xref:System.Security.Permissions.ReflectionPermission> com o sinalizador <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> e caso o conjunto de concessões dos membros não públicos esteja restrito ao conjunto de concessões do chamador ou um subconjunto dele.</span><span class="sxs-lookup"><span data-stu-id="96c78-431">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="96c78-432">(Consulte [considerações de segurança para reflexão](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="96c78-432">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="96c78-433">Para usar essa funcionalidade, seu aplicativo deve ser direcionado ao [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] ou posterior.</span><span class="sxs-lookup"><span data-stu-id="96c78-433">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96c78-434">O exemplo a seguir define uma classe denominada `TestClass` que tem uma propriedade de leitura-gravação denominada `Caption`.</span><span class="sxs-lookup"><span data-stu-id="96c78-434">The following example defines a class named `TestClass` that has a read-write property named `Caption`.</span></span> <span data-ttu-id="96c78-435">Ele exibe o valor padrão da `Caption` propriedade, chamadas de <xref:System.Reflection.PropertyInfo.SetValue%2A> método para alterar o valor da propriedade e exibe o resultado.</span><span class="sxs-lookup"><span data-stu-id="96c78-435">It  displays the default value of the `Caption` property, calls the <xref:System.Reflection.PropertyInfo.SetValue%2A> method to change the property value, and displays the result.</span></span>  
  
 [!code-cpp[Classic PropertyInfo.SetValue1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic PropertyInfo.SetValue1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic PropertyInfo.SetValue1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic PropertyInfo.SetValue1 Example/CS/source.cs#1)]
 [!code-vb[Classic PropertyInfo.SetValue1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic PropertyInfo.SetValue1 Example/VB/source.vb#1)]  
  
 <span data-ttu-id="96c78-436">Observe que, como o `Caption` propriedade não é uma matriz de parâmetro, o `index` é `null`.</span><span class="sxs-lookup"><span data-stu-id="96c78-436">Note that, because the `Caption` property is not a parameter array, the `index` argument is `null`.</span></span>  
  
 <span data-ttu-id="96c78-437">O exemplo a seguir declara uma classe denominada `Example` com três propriedades: uma `static` propriedade (`Shared` no Visual Basic), uma propriedade de instância e uma propriedade de instância indexada.</span><span class="sxs-lookup"><span data-stu-id="96c78-437">The following example declares a class named `Example` with three properties: a `static` property (`Shared` in Visual Basic), an instance property, and an indexed instance property.</span></span> <span data-ttu-id="96c78-438">O exemplo usa o <xref:System.Reflection.PropertyInfo.SetValue%2A> método para alterar os valores padrão das propriedades e exibe os valores iniciais e finais.</span><span class="sxs-lookup"><span data-stu-id="96c78-438">The example uses the <xref:System.Reflection.PropertyInfo.SetValue%2A> method to change the default values of the properties and displays the original and final values.</span></span>  
  
 <span data-ttu-id="96c78-439">O nome que é usado para pesquisar para uma propriedade de instância indexada com reflexão é diferente dependendo do idioma e em atributos aplicados à propriedade.</span><span class="sxs-lookup"><span data-stu-id="96c78-439">The name that is used to search for an indexed instance property with reflection is different depending on the language and on attributes applied to the property.</span></span>  
  
-   <span data-ttu-id="96c78-440">No Visual Basic, o nome da propriedade é sempre usado para pesquisar a propriedade com reflexão.</span><span class="sxs-lookup"><span data-stu-id="96c78-440">In Visual Basic, the property name is always used to search for the property with reflection.</span></span> <span data-ttu-id="96c78-441">Você pode usar o `Default` propriedade indexada de palavra-chave para tornar a propriedade padrão, caso em que você pode omitir o nome ao acessar a propriedade, como neste exemplo.</span><span class="sxs-lookup"><span data-stu-id="96c78-441">You can use the `Default` keyword to make the property a default indexed property, in which case you can omit the name when accessing the property, as in this example.</span></span> <span data-ttu-id="96c78-442">Você também pode usar o nome da propriedade.</span><span class="sxs-lookup"><span data-stu-id="96c78-442">You can also use the property name.</span></span>  
  
-   <span data-ttu-id="96c78-443">No c#, a propriedade de instância indexada é uma propriedade padrão chamada um indexador e o nome nunca é usado para acessar a propriedade no código.</span><span class="sxs-lookup"><span data-stu-id="96c78-443">In C#, the indexed instance property is a default property called an indexer, and the name is never used when accessing the property in code.</span></span> <span data-ttu-id="96c78-444">Por padrão, o nome da propriedade é `Item`, e você deve usar esse nome ao pesquisar a propriedade com reflexão.</span><span class="sxs-lookup"><span data-stu-id="96c78-444">By default, the name of the property is `Item`, and you must use that name when you search for the property with reflection.</span></span> <span data-ttu-id="96c78-445">Você pode usar o <xref:System.Runtime.CompilerServices.IndexerNameAttribute> atributo para dar um nome diferente de indexador.</span><span class="sxs-lookup"><span data-stu-id="96c78-445">You can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to give the indexer a different name.</span></span> <span data-ttu-id="96c78-446">Neste exemplo, o nome é `IndexedInstanceProperty`.</span><span class="sxs-lookup"><span data-stu-id="96c78-446">In this example, the name is `IndexedInstanceProperty`.</span></span>  
  
-   <span data-ttu-id="96c78-447">Em C++, o `default` especificador pode ser usado para tornar um padrão de uma propriedade indexada (indexador de classe) de propriedade indexada.</span><span class="sxs-lookup"><span data-stu-id="96c78-447">In C++, the `default` specifier can be used to make an indexed property a default indexed property (class indexer).</span></span> <span data-ttu-id="96c78-448">Nesse caso, o nome da propriedade por padrão é `Item`, e você deve usar esse nome ao pesquisar a propriedade com reflexão, como neste exemplo.</span><span class="sxs-lookup"><span data-stu-id="96c78-448">In that case, the name of the property by default is `Item`, and you must use that name when you search for the property with reflection, as in this example.</span></span> <span data-ttu-id="96c78-449">Você pode usar o <xref:System.Runtime.CompilerServices.IndexerNameAttribute> de atributo para dar um nome diferente de indexador de classe em reflexão, mas você não pode usar esse nome para acessar a propriedade no código.</span><span class="sxs-lookup"><span data-stu-id="96c78-449">You can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to give the class indexer a different name in reflection, but you cannot use that name to access the property in code.</span></span> <span data-ttu-id="96c78-450">Uma propriedade indexada não é um indexador de classe é acessada usando seu nome, no código e na reflexão.</span><span class="sxs-lookup"><span data-stu-id="96c78-450">An indexed property that is not a class indexer is accessed using its name, both in code and in reflection.</span></span>  
  
 [!code-cpp[PropertyInfo.SetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR/PropertyInfo.SetValue/cpp/Example.cpp#1)]
 [!code-csharp[PropertyInfo.SetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR/PropertyInfo.SetValue/cs/Example.cs#1)]
 [!code-vb[PropertyInfo.SetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PropertyInfo.SetValue/vb/Example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="96c78-451">The <paramref name="index" /> array does not contain the type of arguments needed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-451">The <paramref name="index" /> array does not contain the type of arguments needed.</span>
          </span>
          <span data-ttu-id="96c78-452">-or-  The property's <see langword="set" /> accessor is not found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-452">-or-  The property's <see langword="set" /> accessor is not found.</span>
          </span>
          <span data-ttu-id="96c78-453">-or-  <paramref name="value" /> cannot be converted to the type of <see cref="P:System.Reflection.PropertyInfo.PropertyType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-453">-or-  <paramref name="value" /> cannot be converted to the type of <see cref="P:System.Reflection.PropertyInfo.PropertyType" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetException">
          <span data-ttu-id="96c78-454">
            <block subset="none" type="note">
              <para> In the <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET for Windows Store apps</see> or the <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Portable Class Library</see>, catch <see cref="T:System.Exception" /> instead.  </para>
            </block>  The object does not match the target type, or a property is an instance property but <paramref name="obj" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-454">
              <block subset="none" type="note">
                <para> In the <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET for Windows Store apps</see> or the <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Portable Class Library</see>, catch <see cref="T:System.Exception" /> instead.  </para>
              </block>  The object does not match the target type, or a property is an instance property but <paramref name="obj" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetParameterCountException">
          <span data-ttu-id="96c78-455">The number of parameters in <paramref name="index" /> does not match the number of parameters the indexed property takes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-455">The number of parameters in <paramref name="index" /> does not match the number of parameters the indexed property takes.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="96c78-456">
            <block subset="none" type="note">
              <para> In the <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET for Windows Store apps</see> or the <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Portable Class Library</see>, catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.  </para>
            </block>  There was an illegal attempt to access a private or protected method inside a class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-456">
              <block subset="none" type="note">
                <para> In the <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET for Windows Store apps</see> or the <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Portable Class Library</see>, catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.  </para>
              </block>  There was an illegal attempt to access a private or protected method inside a class.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="96c78-457">An error occurred while setting the property value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-457">An error occurred while setting the property value.</span>
          </span>
          <span data-ttu-id="96c78-458">For example, an index value specified for an indexed property is out of range.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-458">For example, an index value specified for an indexed property is out of range.</span>
          </span>
          <span data-ttu-id="96c78-459">The <see cref="P:System.Exception.InnerException" /> property indicates the reason for the error.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-459">The <see cref="P:System.Exception.InnerException" /> property indicates the reason for the error.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="96c78-460">quando invocado com associação tardia por meio de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-460">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="96c78-461">Enumeração associada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-461">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public abstract void SetValue (object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] index, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetValue(object obj, object value, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object[] index, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void SetValue(System::Object ^ obj, System::Object ^ value, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ index, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member SetValue : obj * obj * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo -&gt; unit" Usage="propertyInfo.SetValue (obj, value, invokeAttr, binder, index, culture)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="index" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="96c78-462">The object whose property value will be set.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-462">The object whose property value will be set.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="96c78-463">The new property value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-463">The new property value.</span>
          </span>
        </param>
        <param name="invokeAttr">
          <span data-ttu-id="96c78-464">A bitwise combination of the following enumeration members that specify the invocation attribute: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="Static" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-464">A bitwise combination of the following enumeration members that specify the invocation attribute: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="Static" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="96c78-465">You must specify a suitable invocation attribute.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-465">You must specify a suitable invocation attribute.</span>
          </span>
          <span data-ttu-id="96c78-466">For example, to invoke a static member, set the <see langword="Static" /> flag.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-466">For example, to invoke a static member, set the <see langword="Static" /> flag.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="96c78-467">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects through reflection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-467">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects through reflection.</span>
          </span>
          <span data-ttu-id="96c78-468">If <c>binder</c> is <see langword="null" />, the default binder is used.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-468">If <c>binder</c> is <see langword="null" />, the default binder is used.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="96c78-469">Optional index values for indexed properties.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-469">Optional index values for indexed properties.</span>
          </span>
          <span data-ttu-id="96c78-470">This value should be <see langword="null" /> for non-indexed properties.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-470">This value should be <see langword="null" /> for non-indexed properties.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="96c78-471">The culture for which the resource is to be localized.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-471">The culture for which the resource is to be localized.</span>
          </span>
          <span data-ttu-id="96c78-472">If the resource is not localized for this culture, the <see cref="P:System.Globalization.CultureInfo.Parent" /> property will be called successively in search of a match.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-472">If the resource is not localized for this culture, the <see cref="P:System.Globalization.CultureInfo.Parent" /> property will be called successively in search of a match.</span>
          </span>
          <span data-ttu-id="96c78-473">If this value is <see langword="null" />, the culture-specific information is obtained from the <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-473">If this value is <see langword="null" />, the culture-specific information is obtained from the <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96c78-474">When overridden in a derived class, sets the property value for a specified object that has the specified binding, index, and culture-specific information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-474">When overridden in a derived class, sets the property value for a specified object that has the specified binding, index, and culture-specific information.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96c78-475">Se este <xref:System.Reflection.PropertyInfo> objeto é um tipo de valor e `value` é `null`, a propriedade será definido como o valor padrão para esse tipo.</span><span class="sxs-lookup"><span data-stu-id="96c78-475">If this <xref:System.Reflection.PropertyInfo> object is a value type and `value` is `null`, then the property will be set to the default value for that type.</span></span>  
  
 <span data-ttu-id="96c78-476">Para determinar se é indexada de uma propriedade, use o <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> método.</span><span class="sxs-lookup"><span data-stu-id="96c78-476">To determine whether a property is indexed, use the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method.</span></span> <span data-ttu-id="96c78-477">Se a matriz resultante tem 0 (zero) elementos, a propriedade não está indexado.</span><span class="sxs-lookup"><span data-stu-id="96c78-477">If the resulting array has 0 (zero) elements, the property is not indexed.</span></span>  
  
 <span data-ttu-id="96c78-478">Restrições de acesso são ignoradas por código totalmente confiável.</span><span class="sxs-lookup"><span data-stu-id="96c78-478">Access restrictions are ignored for fully trusted code.</span></span> <span data-ttu-id="96c78-479">Ou seja, propriedades, métodos, campos e construtores privados podem ser acessadas e por meio de reflexão são invocadas sempre que o código é totalmente confiável.</span><span class="sxs-lookup"><span data-stu-id="96c78-479">That is, private constructors, methods, fields, and properties can be accessed and invoked via Reflection whenever the code is fully trusted.</span></span>  
  
 <span data-ttu-id="96c78-480">Para usar o `SetValue` método, primeiro obtenha a classe `Type`.</span><span class="sxs-lookup"><span data-stu-id="96c78-480">To use the `SetValue` method, first get the class `Type`.</span></span> <span data-ttu-id="96c78-481">Do `Type`, obter o `PropertyInfo`.</span><span class="sxs-lookup"><span data-stu-id="96c78-481">From the `Type`, get the `PropertyInfo`.</span></span> <span data-ttu-id="96c78-482">Do `PropertyInfo`, use o `SetValue` método.</span><span class="sxs-lookup"><span data-stu-id="96c78-482">From the `PropertyInfo`, use the `SetValue` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96c78-483">Começando por [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], este método pode ser usado para acessar membros não públicos caso o chamador tenha recebido <xref:System.Security.Permissions.ReflectionPermission> com o sinalizador <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> e caso o conjunto de concessões dos membros não públicos esteja restrito ao conjunto de concessões do chamador ou um subconjunto dele.</span><span class="sxs-lookup"><span data-stu-id="96c78-483">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="96c78-484">(Consulte [considerações de segurança para reflexão](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="96c78-484">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="96c78-485">Para usar essa funcionalidade, seu aplicativo deve ser direcionado ao [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] ou posterior.</span><span class="sxs-lookup"><span data-stu-id="96c78-485">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="96c78-486">The <paramref name="index" /> array does not contain the type of arguments needed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-486">The <paramref name="index" /> array does not contain the type of arguments needed.</span>
          </span>
          <span data-ttu-id="96c78-487">-or-  The property's <see langword="set" /> accessor is not found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-487">-or-  The property's <see langword="set" /> accessor is not found.</span>
          </span>
          <span data-ttu-id="96c78-488">-or-  <paramref name="value" /> cannot be converted to the type of <see cref="P:System.Reflection.PropertyInfo.PropertyType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-488">-or-  <paramref name="value" /> cannot be converted to the type of <see cref="P:System.Reflection.PropertyInfo.PropertyType" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetException">
          <span data-ttu-id="96c78-489">The object does not match the target type, or a property is an instance property but <paramref name="obj" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-489">The object does not match the target type, or a property is an instance property but <paramref name="obj" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetParameterCountException">
          <span data-ttu-id="96c78-490">The number of parameters in <paramref name="index" /> does not match the number of parameters the indexed property takes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-490">The number of parameters in <paramref name="index" /> does not match the number of parameters the indexed property takes.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="96c78-491">There was an illegal attempt to access a private or protected method inside a class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-491">There was an illegal attempt to access a private or protected method inside a class.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="96c78-492">An error occurred while setting the property value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-492">An error occurred while setting the property value.</span>
          </span>
          <span data-ttu-id="96c78-493">For example, an index value specified for an indexed property is out of range.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-493">For example, an index value specified for an indexed property is out of range.</span>
          </span>
          <span data-ttu-id="96c78-494">The <see cref="P:System.Exception.InnerException" /> property indicates the reason for the error.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-494">The <see cref="P:System.Exception.InnerException" /> property indicates the reason for the error.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="96c78-495">quando invocado com associação tardia por meio de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-495">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="96c78-496">Enumeração associada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-496">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._PropertyInfo.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _PropertyInfo.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._PropertyInfo.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _PropertyInfo.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._PropertyInfo.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = System::Runtime::InteropServices::_PropertyInfo::GetIDsOfNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid">
          <span data-ttu-id="96c78-497">Reserved for future use.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-497">Reserved for future use.</span>
          </span>
          <span data-ttu-id="96c78-498">Must be IID_NULL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-498">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="rgszNames">
          <span data-ttu-id="96c78-499">Passed-in array of names to be mapped.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-499">Passed-in array of names to be mapped.</span>
          </span>
        </param>
        <param name="cNames">
          <span data-ttu-id="96c78-500">Count of the names to be mapped.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-500">Count of the names to be mapped.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="96c78-501">The locale context in which to interpret the names.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-501">The locale context in which to interpret the names.</span>
          </span>
        </param>
        <param name="rgDispId">
          <span data-ttu-id="96c78-502">Caller-allocated array which receives the IDs corresponding to the names.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-502">Caller-allocated array which receives the IDs corresponding to the names.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96c78-503">Maps a set of names to a corresponding set of dispatch identifiers.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-503">Maps a set of names to a corresponding set of dispatch identifiers.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96c78-504">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="96c78-504">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="96c78-505">Para obter mais informações sobre `IDispatch::GetIDsOfNames`, consulte a Biblioteca MSDN.</span><span class="sxs-lookup"><span data-stu-id="96c78-505">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="96c78-506">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-506">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._PropertyInfo.GetType">
      <MemberSignature Language="C#" Value="Type _PropertyInfo.GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Type System.Runtime.InteropServices._PropertyInfo.GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetType" />
      <MemberSignature Language="VB.NET" Value="Function GetType () As Type Implements _PropertyInfo.GetType" />
      <MemberSignature Language="C++ CLI" Value=" virtual Type ^ System.Runtime.InteropServices._PropertyInfo.GetType() = System::Runtime::InteropServices::_PropertyInfo::GetType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="96c78-507">Gets a <see cref="T:System.Type" /> object representing the <see cref="T:System.Reflection.PropertyInfo" /> type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-507">Gets a <see cref="T:System.Type" /> object representing the <see cref="T:System.Reflection.PropertyInfo" /> type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96c78-508">A <see cref="T:System.Type" /> object representing the <see cref="T:System.Reflection.PropertyInfo" /> type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-508">A <see cref="T:System.Type" /> object representing the <see cref="T:System.Reflection.PropertyInfo" /> type.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._PropertyInfo.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _PropertyInfo.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._PropertyInfo.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _PropertyInfo.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._PropertyInfo.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = System::Runtime::InteropServices::_PropertyInfo::GetTypeInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo">
          <span data-ttu-id="96c78-509">The type information to return.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-509">The type information to return.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="96c78-510">The locale identifier for the type information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-510">The locale identifier for the type information.</span>
          </span>
        </param>
        <param name="ppTInfo">
          <span data-ttu-id="96c78-511">Receives a pointer to the requested type information object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-511">Receives a pointer to the requested type information object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96c78-512">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-512">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96c78-513">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="96c78-513">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="96c78-514">Para obter mais informações sobre `IDispatch::GetTypeInfo`, consulte a Biblioteca MSDN.</span><span class="sxs-lookup"><span data-stu-id="96c78-514">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="96c78-515">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-515">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._PropertyInfo.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _PropertyInfo.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._PropertyInfo.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _PropertyInfo.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._PropertyInfo.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = System::Runtime::InteropServices::_PropertyInfo::GetTypeInfoCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo">
          <span data-ttu-id="96c78-516">Points to a location that receives the number of type information interfaces provided by the object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-516">Points to a location that receives the number of type information interfaces provided by the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96c78-517">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-517">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96c78-518">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="96c78-518">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="96c78-519">Para obter mais informações sobre `IDispatch::GetTypeInfoCount`, consulte a Biblioteca MSDN.</span><span class="sxs-lookup"><span data-stu-id="96c78-519">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="96c78-520">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-520">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._PropertyInfo.Invoke">
      <MemberSignature Language="C#" Value="void _PropertyInfo.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._PropertyInfo.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _PropertyInfo.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._PropertyInfo.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = System::Runtime::InteropServices::_PropertyInfo::Invoke;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember">
          <span data-ttu-id="96c78-521">Identifies the member.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-521">Identifies the member.</span>
          </span>
        </param>
        <param name="riid">
          <span data-ttu-id="96c78-522">Reserved for future use.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-522">Reserved for future use.</span>
          </span>
          <span data-ttu-id="96c78-523">Must be IID_NULL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-523">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="96c78-524">The locale context in which to interpret arguments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-524">The locale context in which to interpret arguments.</span>
          </span>
        </param>
        <param name="wFlags">
          <span data-ttu-id="96c78-525">Flags describing the context of the call.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-525">Flags describing the context of the call.</span>
          </span>
        </param>
        <param name="pDispParams">
          <span data-ttu-id="96c78-526">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-526">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span>
          </span>
        </param>
        <param name="pVarResult">
          <span data-ttu-id="96c78-527">Pointer to the location where the result is to be stored.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-527">Pointer to the location where the result is to be stored.</span>
          </span>
        </param>
        <param name="pExcepInfo">
          <span data-ttu-id="96c78-528">Pointer to a structure that contains exception information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-528">Pointer to a structure that contains exception information.</span>
          </span>
        </param>
        <param name="puArgErr">
          <span data-ttu-id="96c78-529">The index of the first argument that has an error.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-529">The index of the first argument that has an error.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96c78-530">Provides access to properties and methods exposed by an object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-530">Provides access to properties and methods exposed by an object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96c78-531">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="96c78-531">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="96c78-532">Para obter mais informações sobre `IDispatch::Invoke`, consulte a Biblioteca MSDN.</span><span class="sxs-lookup"><span data-stu-id="96c78-532">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="96c78-533">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96c78-533">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>