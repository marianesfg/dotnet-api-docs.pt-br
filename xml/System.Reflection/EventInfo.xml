<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="EventInfo.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5f9bda12daa17b91e3190c3905b39d15462fcb260.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f9bda12daa17b91e3190c3905b39d15462fcb260</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.EventInfo">
          <source>Discovers the attributes of an event and provides access to event metadata.</source>
          <target state="translated">Descobre os atributos de um evento e fornece acesso aos metadados de evento.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.EventInfo&gt;</ph> class to inspect events and to hook up event handlers, as shown in the example code for the <ph id="ph2">&lt;xref:System.Reflection.EventInfo.AddEventHandler%2A&gt;</ph> method.</source>
          <target state="translated">Use o <ph id="ph1">&lt;xref:System.Reflection.EventInfo&gt;</ph> classe para inspecionar os eventos e conectar manipuladores de eventos, conforme mostrado no código de exemplo para o <ph id="ph2">&lt;xref:System.Reflection.EventInfo.AddEventHandler%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source><ph id="ph1">&lt;xref:System.Reflection.EventInfo&gt;</ph> is not intended to be used to raise events.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.EventInfo&gt;</ph> não se destina a ser usado para gerar eventos.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>An object raises events as dictated by its internal state.</source>
          <target state="translated">Um objeto gera eventos conforme determinado pelo estado interno.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>Events are used with delegates.</source>
          <target state="translated">Eventos são usados com delegados.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>An event listener instantiates an event-handler delegate that is invoked whenever the event is raised by an event source.</source>
          <target state="translated">Um ouvinte de evento instancia um representante do manipulador de eventos que é chamado sempre que o evento é gerado por uma fonte de evento.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>In order to connect to the event source, the event listener adds this delegate to the invocation list on the source.</source>
          <target state="translated">Para conectar-se à fonte de evento, o ouvinte de evento adiciona esse delegado à lista de invocação na origem.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>When the event is raised, the invoke method of the event-handler delegate is called.</source>
          <target state="translated">Quando o evento é gerado, o método invoke do delegado do manipulador de eventos é chamado.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>Both multicast and single-cast event notifications are supported.</source>
          <target state="translated">Há suporte para ambas as notificações de eventos multicast e conversão de único.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>The <ph id="ph1">`Add`</ph> and <ph id="ph2">`Remove`</ph> methods, as well as the event-handler delegate class associated with an event, must be marked in the metadata.</source>
          <target state="translated">O <ph id="ph1">`Add`</ph> e <ph id="ph2">`Remove`</ph> métodos, bem como a classe de delegado do manipulador de eventos associados a um evento deve ser marcada nos metadados.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>Delegates are object-oriented function pointers.</source>
          <target state="translated">Delegados são ponteiros de função orientada a objeto.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>In C or C++, a function pointer is a reference to a method.</source>
          <target state="translated">Em C ou C++, um ponteiro de função é uma referência a um método.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>In contrast to the C or C++ function pointer, a delegate contains two references: a reference to a method and a reference to an object that supports the method.</source>
          <target state="translated">Em contraste com o ponteiro de função C ou C++, um delegado contém duas referências: uma referência a um método e uma referência a um objeto que oferece suporte ao método.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>Delegates can invoke a method without knowing the class type that declares or inherits the method.</source>
          <target state="translated">Delegados podem invocar um método sem saber o tipo de classe que declara ou herda o método.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>Delegates need only know the return type and parameter list of the method.</source>
          <target state="translated">Delegados só precisam saber a lista de tipo e o parâmetro de retorno do método.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>The event model works equally well for single-cast and multicast delegates.</source>
          <target state="translated">O modelo de evento funciona igualmente bem para delegados multicast único e de multicast.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>When the delegate's invoke method is called, only a single object will have a method called on it.</source>
          <target state="translated">Quando o delegado de invocação de método é chamado, somente um único objeto terá um método chamado nela.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>A multicast modifier can be applied to a delegate declaration, which allows multiple methods to be called when the invoke method of the delegate is called.</source>
          <target state="translated">Um modificador de multicast pode ser aplicado a uma declaração delegate, que permite que vários métodos a serem chamados quando o método invoke do representante é chamado.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>Calling <ph id="ph1">&lt;xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> on <ph id="ph2">`EventInfo`</ph> when the <ph id="ph3">`inherit`</ph> parameter of <ph id="ph4">`GetCustomAttributes`</ph> is <ph id="ph5">`true`</ph> does not walk the type hierarchy.</source>
          <target state="translated">Chamando <ph id="ph1">&lt;xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> na <ph id="ph2">`EventInfo`</ph> quando o <ph id="ph3">`inherit`</ph> parâmetro de <ph id="ph4">`GetCustomAttributes`</ph> é <ph id="ph5">`true`</ph> não mostram a hierarquia de tipo.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>Use <ph id="ph1">&lt;xref:System.Attribute?displayProperty=nameWithType&gt;</ph> to inherit custom attributes.</source>
          <target state="translated">Use <ph id="ph1">&lt;xref:System.Attribute?displayProperty=nameWithType&gt;</ph> para herdar atributos personalizados.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>The following code gets an <ph id="ph1">&lt;xref:System.Reflection.EventInfo&gt;</ph> object for the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> event of the <ph id="ph3">&lt;xref:System.Windows.Forms.Button&gt;</ph> class.</source>
          <target state="translated">O código a seguir obtém um <ph id="ph1">&lt;xref:System.Reflection.EventInfo&gt;</ph> de objeto para o <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> evento o <ph id="ph3">&lt;xref:System.Windows.Forms.Button&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>for full trust for inheritors.</source>
          <target state="translated">para confiança total de herdeiros.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>This class cannot be inherited by partially trusted code.</source>
          <target state="translated">Esta classe não pode ser herdada pelo código parcialmente confiável.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>This type is thread safe.</source>
          <target state="translated">Este tipo é thread-safe.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>When you inherit from <ph id="ph1">&lt;see langword="EventInfo" /&gt;</ph>, you must override the following members: <ph id="ph2">&lt;see cref="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)" /&gt;</ph>, <ph id="ph3">&lt;see cref="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)" /&gt;</ph>, and <ph id="ph4">&lt;see cref="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)" /&gt;</ph>.</source>
          <target state="translated">Ao herdar de <ph id="ph1">&lt;see langword="EventInfo" /&gt;</ph>, você deve substituir os seguintes membros: <ph id="ph2">&lt;see cref="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)" /&gt;</ph>, <ph id="ph3">&lt;see cref="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)" /&gt;</ph>, e <ph id="ph4">&lt;see cref="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see langword="EventInfo" /&gt;</ph> class.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see langword="EventInfo" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.#ctor">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">quando invocado com associação tardia por meio de mecanismos como <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.#ctor">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>The event source.</source>
          <target state="translated">A fonte do evento.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>Encapsulates a method or methods to be invoked when the event is raised by the target.</source>
          <target state="translated">Encapsula um ou mais métodos a serem invocados quando o evento é gerado pelo destino.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>Adds an event handler to an event source.</source>
          <target state="translated">Adiciona um manipulador de eventos à origem de um evento.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>This method attempts to add a delegate to synchronize the event on the target object.</source>
          <target state="translated">Esse método tenta adicionar um delegado para sincronizar o evento no objeto de destino.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>Each time the event is raised by the target parameter, the method or methods encapsulated by the handler will be invoked.</source>
          <target state="translated">Cada vez que o evento é gerado pelo parâmetro de destino, o método ou métodos encapsulados pelo manipulador serão chamados.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>The following code example shows how to load an assembly, create an instance of a type from the assembly, create an event handler using a dynamic assembly, and hook up the dynamic event handler.</source>
          <target state="translated">O exemplo de código a seguir mostra como carregar um assembly, criar uma instância de um tipo de assembly, criar um manipulador de eventos usando um assembly dinâmico e conectar o manipulador de eventos dinâmicos.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>All actions are performed using late binding.</source>
          <target state="translated">Todas as ações são executadas usando a associação tardia.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>The code example loads System.dll and creates an instance of the <ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">O exemplo de código carrega a dll e cria uma instância de <ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Type.GetEvent%2A?displayProperty=nameWithType&gt;</ph> method to get the <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event, and the <ph id="ph3">&lt;xref:System.Reflection.EventInfo.EventHandlerType%2A&gt;</ph> property to get the delegate type for the event.</source>
          <target state="translated">O exemplo usa o <ph id="ph1">&lt;xref:System.Type.GetEvent%2A?displayProperty=nameWithType&gt;</ph> método para obter o <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> evento e o <ph id="ph3">&lt;xref:System.Reflection.EventInfo.EventHandlerType%2A&gt;</ph> propriedade para obter o tipo delegado do evento.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>The code example gets a <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> for the <ph id="ph2">`Invoke`</ph> method of the delegate type, and from the <ph id="ph3">&lt;xref:System.Reflection.MethodInfo&gt;</ph> obtains the signature of the delegate.</source>
          <target state="translated">O exemplo de código obtém um <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> para o <ph id="ph2">`Invoke`</ph> método de tipo de delegado e o <ph id="ph3">&lt;xref:System.Reflection.MethodInfo&gt;</ph> obtém a assinatura do delegado.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>The code example then creates a dynamic assembly with one module containing a single type named <ph id="ph1">`Handler`</ph>, and gives the type a <ph id="ph2">`static`</ph> method (<ph id="ph3">`Shared`</ph> method in Visual Basic) named <ph id="ph4">`DynamicHandler`</ph> that will be used to handle the event.</source>
          <target state="translated">O exemplo de código cria um assembly dinâmico com um módulo que contém um único tipo denominado <ph id="ph1">`Handler`</ph>e fornece o tipo de um <ph id="ph2">`static`</ph> método (<ph id="ph3">`Shared`</ph> método no Visual Basic) denominada <ph id="ph4">`DynamicHandler`</ph> que será usada para manipular o evento.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>After the dynamic type is created, the code example gets a <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> for the finished method and uses it to create a delegate instance.</source>
          <target state="translated">Depois que o tipo dinâmico é criado, o exemplo de código obtém um <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> para o método concluído e o usa para criar uma instância do delegado.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>This instance is passed to the <ph id="ph1">&lt;xref:System.Reflection.EventInfo.AddEventHandler%2A&gt;</ph> method to hook up the event.</source>
          <target state="translated">Esta instância é passada para o <ph id="ph1">&lt;xref:System.Reflection.EventInfo.AddEventHandler%2A&gt;</ph> método para ligar o evento.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>The program then pauses to allow the event to be raised.</source>
          <target state="translated">O programa faz uma pausa, em seguida, para permitir que o evento a ser gerado.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>The event does not have a public <ph id="ph1">&lt;see langword="add" /&gt;</ph> accessor.</source>
          <target state="translated">O evento não tem um acessador <ph id="ph1">&lt;see langword="add" /&gt;</ph> público.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>The handler that was passed in cannot be used.</source>
          <target state="translated">O manipulador passado não pode ser usado.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id="p2">[</bpt>Portable Class Library<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch the base class exception, <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>, instead.</source>
          <target state="translated">Em vez disso, no <bpt id="p1">[</bpt>.NET para aplicativos da Windows Store<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> ou na <bpt id="p2">[</bpt>Biblioteca de Classes Portátil<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, capture a exceção de classe base, <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>The caller does not have access permission to the member.</source>
          <target state="translated">O chamador não tem permissão de acesso ao membro.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id="p2">[</bpt>Portable Class Library<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> instead.</source>
          <target state="translated">No <bpt id="p1">[</bpt>.NET para aplicativos da Windows Store<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> ou na <bpt id="p2">[</bpt>Biblioteca de Classes Portátil<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, capture <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> em vez disso.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>The <ph id="ph1">&lt;paramref name="target" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the event is not static.</source>
          <target state="translated">O parâmetro <ph id="ph1">&lt;paramref name="target" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph> e o evento não é estático.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> is not declared on the target.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> não está declarado no destino.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">quando invocado com associação tardia por meio de mecanismos como <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="P:System.Reflection.EventInfo.AddMethod">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> object for the <ph id="ph2">&lt;see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /&gt;</ph> method of the event, including non-public methods.</source>
          <target state="translated">Obtém o objeto <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> para o método <ph id="ph2">&lt;see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /&gt;</ph> do evento, incluindo métodos não públicos.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.AddMethod">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> object for the <ph id="ph2">&lt;see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /&gt;</ph> method.</source>
          <target state="translated">Um objeto <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> para o método <ph id="ph2">&lt;see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.AddMethod">
          <source>This property is the equivalent of calling the <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetAddMethod%2A&gt;</ph> with a value of <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Esta propriedade é equivalente a chamar o <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetAddMethod%2A&gt;</ph> com um valor de <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="P:System.Reflection.EventInfo.Attributes">
          <source>Gets the attributes for this event.</source>
          <target state="translated">Obtém os atributos desse evento.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.Attributes">
          <source>The read-only attributes for this event.</source>
          <target state="translated">Os atributos somente leitura para este evento.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.Attributes">
          <source>The attributes are returned in a 4-byte integer representing a bitmap of the attributes set for the event reflected by this instance.</source>
          <target state="translated">Os atributos são retornados em um inteiro de 4 bytes que representa um bitmap dos atributos definidos para o evento refletido por esta instância.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.Equals(System.Object)">
          <source>An object to compare with this instance, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um objeto a ser comparado com essa instância ou <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.Equals(System.Object)">
          <source>Returns a value that indicates whether this instance is equal to a specified object.</source>
          <target state="translated">Retorna um valor que indica se essa instância é igual a um objeto especificado.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> equals the type and value of this instance; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> for igual ao tipo e ao valor dessa instância, caso contrário, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="P:System.Reflection.EventInfo.EventHandlerType">
          <source>Gets the <ph id="ph1">&lt;see langword="Type" /&gt;</ph> object of the underlying event-handler delegate associated with this event.</source>
          <target state="translated">Obtém o objeto <ph id="ph1">&lt;see langword="Type" /&gt;</ph> do delegado do manipulador de eventos subjacente associado a esse evento.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.EventHandlerType">
          <source>A read-only <ph id="ph1">&lt;see langword="Type" /&gt;</ph> object representing the delegate event handler.</source>
          <target state="translated">Um objeto <ph id="ph1">&lt;see langword="Type" /&gt;</ph> somente leitura que representa o manipulador de eventos do delegado.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.EventHandlerType">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Reflection.EventInfo.EventHandlerType%2A&gt;</ph> property to discover the delegate type of an event and to display its parameter types.</source>
          <target state="translated">O exemplo a seguir usa o <ph id="ph1">&lt;xref:System.Reflection.EventInfo.EventHandlerType%2A&gt;</ph> para descobrir o tipo de delegado de um evento e exibir seus tipos de parâmetro de propriedade.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.EventHandlerType">
          <source>The example defines a delegate named <ph id="ph1">`MyDelegate`</ph> and an event named <ph id="ph2">`ev`</ph> of type <ph id="ph3">`MyDelegate`</ph>.</source>
          <target state="translated">O exemplo define um delegado chamado <ph id="ph1">`MyDelegate`</ph> e um evento chamado <ph id="ph2">`ev`</ph> do tipo <ph id="ph3">`MyDelegate`</ph>.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.EventHandlerType">
          <source>The code in the <ph id="ph1">`Main`</ph> method discovers the event signature by getting the delegate type of the event, getting the <ph id="ph2">`Invoke`</ph> method of the delegate type, and then retrieving and displaying the parameters.</source>
          <target state="translated">O código de <ph id="ph1">`Main`</ph> método descobre a assinatura de evento, fazendo com que o tipo delegado do evento, obtendo o <ph id="ph2">`Invoke`</ph> método do tipo delegado e, em seguida, recuperar e exibir os parâmetros.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="P:System.Reflection.EventInfo.EventHandlerType">
          <source>The caller does not have the required permission.</source>
          <target state="translated">O chamador não tem a permissão necessária.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="T:System.Reflection.EventInfo">
          <source>Returns the method used to add an event handler delegate to the event source.</source>
          <target state="translated">Retorna o método usado para adicionar um delegado de manipulador de eventos para a origem do evento.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetAddMethod">
          <source>Returns the method used to add an event handler delegate to the event source.</source>
          <target state="translated">Retorna o método usado para adicionar um delegado de manipulador de eventos para a origem do evento.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetAddMethod">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> object representing the method used to add an event handler delegate to the event source.</source>
          <target state="translated">Um objeto <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> representando o método usado para adicionar um delegado de manipulador de eventos para a origem do evento.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetAddMethod">
          <source><ph id="ph1">`GetAddMethod`</ph> initializes and adds the event subscribe method.</source>
          <target state="translated"><ph id="ph1">`GetAddMethod`</ph> inicializa e adiciona o evento de assinatura de método.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetAddMethod">
          <source>The <ph id="ph1">`AddEventHandler`</ph> method is used to add an event-handler delegate to the invocation list of an event source.</source>
          <target state="translated">O <ph id="ph1">`AddEventHandler`</ph> método é usado para adicionar um delegado de manipulador de eventos à lista de invocação de uma fonte de evento.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetAddMethod">
          <source>Typically, the method has the following signature:</source>
          <target state="translated">Normalmente, o método tem a seguinte assinatura:</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetAddMethod">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">quando invocado com associação tardia por meio de mecanismos como <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetAddMethod">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if non-public methods can be returned; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se métodos não públicos podem ser retornados; caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)">
          <source>When overridden in a derived class, retrieves the <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> object for the <ph id="ph2">&lt;see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /&gt;</ph> method of the event, specifying whether to return non-public methods.</source>
          <target state="translated">Quando substituído em uma classe derivada, recupera o objeto <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> para o método <ph id="ph2">&lt;see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /&gt;</ph> do evento, especificando se métodos não públicos devem ou não ser retornados.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> object representing the method used to add an event handler delegate to the event source.</source>
          <target state="translated">Um objeto <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> representando o método usado para adicionar um delegado de manipulador de eventos para a origem do evento.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)">
          <source>The <ph id="ph1">`GetAddMethod`</ph> initializes and adds the event subscribe method as a Boolean value.</source>
          <target state="translated">O <ph id="ph1">`GetAddMethod`</ph> inicializa e adiciona o evento de assinatura de método como um valor booleano.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)">
          <source>The <ph id="ph1">`AddEventHandler`</ph> method is used to add an event-handler delegate to the invocation list of an event source.</source>
          <target state="translated">O <ph id="ph1">`AddEventHandler`</ph> método é usado para adicionar um delegado de manipulador de eventos à lista de invocação de uma fonte de evento.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)">
          <source>Typically, the method has the following signature:</source>
          <target state="translated">Normalmente, o método tem a seguinte assinatura:</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> é <ph id="ph2">&lt;see langword="true" /&gt;</ph>, o método usado para adicionar um delegado de manipulador de eventos é não público e o chamador não tem permissão para refletir nos métodos não públicos.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">quando invocado com associação tardia por meio de mecanismos como <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetHashCode">
          <source>Returns the hash code for this instance.</source>
          <target state="translated">Retorna o código hash para essa instância.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetHashCode">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">Um código de hash do inteiro assinado de 32 bits.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="T:System.Reflection.EventInfo">
          <source>Returns the methods that were associated with an event in MSIL using the <ph id="ph1">&lt;see langword=".other" /&gt;</ph> directive.</source>
          <target state="translated">Retorna os métodos associados a um evento em MSIL usando a diretiva <ph id="ph1">&lt;see langword=".other" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetOtherMethods">
          <source>Returns the public methods that have been associated with an event in metadata using the <ph id="ph1">&lt;see langword=".other" /&gt;</ph> directive.</source>
          <target state="translated">Retorna os métodos públicos que foram associados um evento em metadados usando a diretiva <ph id="ph1">&lt;see langword=".other" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetOtherMethods">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> objects representing the public methods that have been associated with the event in metadata by using the <ph id="ph2">&lt;see langword=".other" /&gt;</ph> directive.</source>
          <target state="translated">Uma matriz de objetos <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> representando os métodos públicos que foram associados um evento em metadados usando a diretiva <ph id="ph2">&lt;see langword=".other" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetOtherMethods">
          <source>If there are no such public methods, an empty array is returned.</source>
          <target state="translated">Se não há nenhum desses métodos públicos, uma matriz vazia é retornada.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods">
          <source>The metadata for an event can associate four kinds of methods with the event:</source>
          <target state="translated">Os metadados para um evento podem associar quatro tipos de métodos com o evento:</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods">
          <source>The <ph id="ph1">`.addon`</ph> directive specifies the method used to add event handlers.</source>
          <target state="translated">O <ph id="ph1">`.addon`</ph> diretiva especifica o método usado para adicionar manipuladores de eventos.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetAddMethod%2A&gt;</ph> method to retrieve an <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> for that method.</source>
          <target state="translated">Use o <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetAddMethod%2A&gt;</ph> método para recuperar um <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> para esse método.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods">
          <source>The <ph id="ph1">`.removeon`</ph> directive specifies the method used to detach event handlers.</source>
          <target state="translated">O <ph id="ph1">`.removeon`</ph> diretiva especifica o método usado para separar os manipuladores de eventos.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetRemoveMethod%2A&gt;</ph> method to retrieve an <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> for that method.</source>
          <target state="translated">Use o <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetRemoveMethod%2A&gt;</ph> método para recuperar um <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> para esse método.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods">
          <source>The <ph id="ph1">`.fire`</ph> directive specifies the method used to raise the event.</source>
          <target state="translated">O <ph id="ph1">`.fire`</ph> diretiva especifica o método usado para gerar o evento.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetRaiseMethod%2A&gt;</ph> method to retrieve an <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> for that method.</source>
          <target state="translated">Use o <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetRaiseMethod%2A&gt;</ph> método para recuperar um <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> para esse método.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods">
          <source>The <ph id="ph1">`.other`</ph> directive specifies any other methods associated with the event.</source>
          <target state="translated">O <ph id="ph1">`.other`</ph> diretiva especifica quaisquer outros métodos associados ao evento.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetOtherMethods%2A&gt;</ph> method to retrieve an array of <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> objects for those methods.</source>
          <target state="translated">Use o <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetOtherMethods%2A&gt;</ph> método para recuperar uma matriz de <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> objetos para esses métodos.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods">
          <source>The methods associated with an event using the <ph id="ph1">`.other`</ph> directive have no special significance to the runtime.</source>
          <target state="translated">Os métodos associados a um evento usando o <ph id="ph1">`.other`</ph> diretiva não ter nenhum significado especial para o tempo de execução.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods">
          <source>The C# and Visual Basic compilers do not use the <ph id="ph1">`.other`</ph> directive.</source>
          <target state="translated">Os compiladores c# e Visual Basic não usam o <ph id="ph1">`.other`</ph> diretiva.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to include non-public methods; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> para incluir os métodos não públicos; caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>Returns the methods that have been associated with the event in metadata using the <ph id="ph1">&lt;see langword=".other" /&gt;</ph> directive, specifying whether to include non-public methods.</source>
          <target state="translated">Retorna os métodos que foram associados ao evento nos metadados usando a diretiva <ph id="ph1">&lt;see langword=".other" /&gt;</ph>, especificando se métodos não públicos devem ou não ser incluídos.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> objects representing methods that have been associated with an event in metadata by using the <ph id="ph2">&lt;see langword=".other" /&gt;</ph> directive.</source>
          <target state="translated">Uma matriz de objetos <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> representando os métodos que foram associados um evento em metadados usando a diretiva <ph id="ph2">&lt;see langword=".other" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>If there are no methods matching the specification, an empty array is returned.</source>
          <target state="translated">Se não houver nenhum método que corresponda à especificação, uma matriz vazia será retornada.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>The metadata for an event can associate four kinds of methods with the event:</source>
          <target state="translated">Os metadados para um evento podem associar quatro tipos de métodos com o evento:</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>The <ph id="ph1">`.addon`</ph> directive specifies the method used to add event handlers.</source>
          <target state="translated">O <ph id="ph1">`.addon`</ph> diretiva especifica o método usado para adicionar manipuladores de eventos.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetAddMethod%2A&gt;</ph> method to retrieve an <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> for that method.</source>
          <target state="translated">Use o <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetAddMethod%2A&gt;</ph> método para recuperar um <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> para esse método.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>The <ph id="ph1">`.removeon`</ph> directive specifies the method used to detach event handlers.</source>
          <target state="translated">O <ph id="ph1">`.removeon`</ph> diretiva especifica o método usado para separar os manipuladores de eventos.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetRemoveMethod%2A&gt;</ph> method to retrieve an <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> for this method.</source>
          <target state="translated">Use o <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetRemoveMethod%2A&gt;</ph> método para recuperar um <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> para este método.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>The <ph id="ph1">`.fire`</ph> directive specifies the method used to raise the event.</source>
          <target state="translated">O <ph id="ph1">`.fire`</ph> diretiva especifica o método usado para gerar o evento.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetRaiseMethod%2A&gt;</ph> method to retrieve an <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> for this method.</source>
          <target state="translated">Use o <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetRaiseMethod%2A&gt;</ph> método para recuperar um <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> para este método.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>The <ph id="ph1">`.other`</ph> directive specifies any other methods associated with the event.</source>
          <target state="translated">O <ph id="ph1">`.other`</ph> diretiva especifica quaisquer outros métodos associados ao evento.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetOtherMethods%2A&gt;</ph> method to retrieve an array of <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> objects for those methods.</source>
          <target state="translated">Use o <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetOtherMethods%2A&gt;</ph> método para recuperar uma matriz de <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> objetos para esses métodos.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>The methods associated with an event using the <ph id="ph1">`.other`</ph> directive have no special significance to the runtime.</source>
          <target state="translated">Os métodos associados a um evento usando o <ph id="ph1">`.other`</ph> diretiva não ter nenhum significado especial para o tempo de execução.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>The C# and Visual Basic compilers do not use the <ph id="ph1">`.other`</ph> directive.</source>
          <target state="translated">Os compiladores c# e Visual Basic não usam o <ph id="ph1">`.other`</ph> diretiva.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>This method is not implemented.</source>
          <target state="translated">Este método não está implementado.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="T:System.Reflection.EventInfo">
          <source>Returns the method that is called when the event is raised.</source>
          <target state="translated">Retorna o método que é chamado quando o evento é acionado.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetRaiseMethod">
          <source>Returns the method that is called when the event is raised.</source>
          <target state="translated">Retorna o método que é chamado quando o evento é acionado.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetRaiseMethod">
          <source>The method that is called when the event is raised.</source>
          <target state="translated">O método que é chamado quando o evento é acionado.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetRaiseMethod">
          <source>This method usually returns <ph id="ph1">`null`</ph> for events declared with the C# <ph id="ph2">`event`</ph> keyword or the Visual Basic <ph id="ph3">`Event`</ph> keyword.</source>
          <target state="translated">Este método retorna geralmente <ph id="ph1">`null`</ph> para eventos declarados com o c# <ph id="ph2">`event`</ph> palavra-chave ou o Visual Basic <ph id="ph3">`Event`</ph> palavra-chave.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetRaiseMethod">
          <source>This is because the C# and Visual Basic compilers do not generate such a method by default.</source>
          <target state="translated">Isso ocorre porque o c# e Visual Basic compiladores não geram tal método por padrão.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetRaiseMethod">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">quando invocado com associação tardia por meio de mecanismos como <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetRaiseMethod">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if non-public methods can be returned; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se métodos não públicos podem ser retornados; caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)">
          <source>When overridden in a derived class, returns the method that is called when the event is raised, specifying whether to return non-public methods.</source>
          <target state="translated">Quando substituído em uma classe derivada, recupera o método chamado quando o evento é acionado, especificando se métodos não públicos devem ou não ser retornados.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)">
          <source>A <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> object that was called when the event was raised.</source>
          <target state="translated">Um objeto <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> foi chamado quando o evento foi acionado.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)">
          <source>This method usually returns <ph id="ph1">`null`</ph> for events declared with the C# <ph id="ph2">`event`</ph> keyword or the Visual Basic <ph id="ph3">`Event`</ph> keyword.</source>
          <target state="translated">Este método retorna geralmente <ph id="ph1">`null`</ph> para eventos declarados com o c# <ph id="ph2">`event`</ph> palavra-chave ou o Visual Basic <ph id="ph3">`Event`</ph> palavra-chave.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)">
          <source>This is because the C# and Visual Basic compilers do not generate such a method by default.</source>
          <target state="translated">Isso ocorre porque o c# e Visual Basic compiladores não geram tal método por padrão.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> é <ph id="ph2">&lt;see langword="true" /&gt;</ph>, o método usado para adicionar um delegado de manipulador de eventos é não público e o chamador não tem permissão para refletir nos métodos não públicos.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">quando invocado com associação tardia por meio de mecanismos como <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="T:System.Reflection.EventInfo">
          <source>Returns the method used to remove an event handler delegate from the event source.</source>
          <target state="translated">Retorna o método usado para remover um delegado de manipulador de eventos da origem do evento.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetRemoveMethod">
          <source>Returns the method used to remove an event handler delegate from the event source.</source>
          <target state="translated">Retorna o método usado para remover um delegado de manipulador de eventos da origem do evento.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetRemoveMethod">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> object representing the method used to remove an event handler delegate from the event source.</source>
          <target state="translated">Um objeto <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> representando o método usado para remover um delegado de manipulador de eventos da origem do evento.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetRemoveMethod">
          <source>Typically, the method has the following signature:</source>
          <target state="translated">Normalmente, o método tem a seguinte assinatura:</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetRemoveMethod">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">quando invocado com associação tardia por meio de mecanismos como <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetRemoveMethod">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if non-public methods can be returned; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se métodos não públicos podem ser retornados; caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)">
          <source>When overridden in a derived class, retrieves the <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> object for removing a method of the event, specifying whether to return non-public methods.</source>
          <target state="translated">Quando substituído em uma classe derivada, recupera o objeto <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> para remover um método do evento, especificando se métodos não públicos devem ou não ser retornados.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> object representing the method used to remove an event handler delegate from the event source.</source>
          <target state="translated">Um objeto <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> representando o método usado para remover um delegado de manipulador de eventos da origem do evento.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)">
          <source>Typically, the method has the following signature:</source>
          <target state="translated">Normalmente, o método tem a seguinte assinatura:</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> é <ph id="ph2">&lt;see langword="true" /&gt;</ph>, o método usado para adicionar um delegado de manipulador de eventos é não público e o chamador não tem permissão para refletir nos métodos não públicos.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">quando invocado com associação tardia por meio de mecanismos como <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="P:System.Reflection.EventInfo.IsMulticast">
          <source>Gets a value indicating whether the event is multicast.</source>
          <target state="translated">Obtém um valor que indica se o evento é multicast.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.IsMulticast">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the delegate is an instance of a multicast delegate; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Se o delegado é uma instância de um delegado multicast; Caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="P:System.Reflection.EventInfo.IsMulticast">
          <source>The caller does not have the required permission.</source>
          <target state="translated">O chamador não tem a permissão necessária.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="P:System.Reflection.EventInfo.IsSpecialName">
          <source>Gets a value indicating whether the <ph id="ph1">&lt;see langword="EventInfo" /&gt;</ph> has a name with a special meaning.</source>
          <target state="translated">Obtém um valor que indica se o <ph id="ph1">&lt;see langword="EventInfo" /&gt;</ph> tem um nome com um significado especial.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.IsSpecialName">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this event has a special name; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Se esse evento tem um nome especial; Caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.IsSpecialName">
          <source>This property determines whether the event's name has a special meaning.</source>
          <target state="translated">Essa propriedade determina se o nome do evento tem um significado especial.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.IsSpecialName">
          <source>Names that begin with or contain an underscore character (_), property accessors, and operator overloading methods are examples of names that might require special treatment by some compilers.</source>
          <target state="translated">Os nomes que começam com ou contenham um caractere de sublinhado (_), acessadores de propriedade e métodos de sobrecarga de operador são exemplos de nomes que podem exigir tratamento especial por alguns compiladores.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="P:System.Reflection.EventInfo.MemberType">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> value indicating that this member is an event.</source>
          <target state="translated">Obtém um valor <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> que indica que esse membro é um evento.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.MemberType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> value indicating that this member is an event.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> valor que indica que esse membro é um evento.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.MemberType">
          <source>This property overrides <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph>.</source>
          <target state="translated">Esta propriedade substitui <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.MemberType">
          <source>Therefore, when you examine a set of <ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph> objects — for example, the array returned by <ph id="ph2">&lt;xref:System.Type.GetMembers%2A&gt;</ph> — the <ph id="ph3">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph> property returns <ph id="ph4">&lt;xref:System.Reflection.MemberTypes.Event?displayProperty=nameWithType&gt;</ph> only when a given member is an event.</source>
          <target state="translated">Portanto, quando você examinar um conjunto de <ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph> objetos — por exemplo, a matriz retornada por <ph id="ph2">&lt;xref:System.Type.GetMembers%2A&gt;</ph> — o <ph id="ph3">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph> propriedade retorna <ph id="ph4">&lt;xref:System.Reflection.MemberTypes.Event?displayProperty=nameWithType&gt;</ph> somente quando um determinado membro é um evento.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.op_Equality(System.Reflection.EventInfo,System.Reflection.EventInfo)">
          <source>The first object to compare.</source>
          <target state="translated">O primeiro objeto a ser comparado.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.op_Equality(System.Reflection.EventInfo,System.Reflection.EventInfo)">
          <source>The second object to compare.</source>
          <target state="translated">O segundo objeto a ser comparado.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.op_Equality(System.Reflection.EventInfo,System.Reflection.EventInfo)">
          <source>Indicates whether two <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> objects are equal.</source>
          <target state="translated">Indica se dois objetos <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> são iguais.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.op_Equality(System.Reflection.EventInfo,System.Reflection.EventInfo)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="left" /&gt;</ph> is equal to <ph id="ph3">&lt;paramref name="right" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se <ph id="ph2">&lt;paramref name="left" /&gt;</ph> for igual a <ph id="ph3">&lt;paramref name="right" /&gt;</ph>; caso contrário, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.op_Inequality(System.Reflection.EventInfo,System.Reflection.EventInfo)">
          <source>The first object to compare.</source>
          <target state="translated">O primeiro objeto a ser comparado.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.op_Inequality(System.Reflection.EventInfo,System.Reflection.EventInfo)">
          <source>The second object to compare.</source>
          <target state="translated">O segundo objeto a ser comparado.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.op_Inequality(System.Reflection.EventInfo,System.Reflection.EventInfo)">
          <source>Indicates whether two <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> objects are not equal.</source>
          <target state="translated">Indica se dois objetos <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> não são iguais.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.op_Inequality(System.Reflection.EventInfo,System.Reflection.EventInfo)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="left" /&gt;</ph> is not equal to <ph id="ph3">&lt;paramref name="right" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se <ph id="ph2">&lt;paramref name="left" /&gt;</ph> não for igual a <ph id="ph3">&lt;paramref name="right" /&gt;</ph>; caso contrário, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="P:System.Reflection.EventInfo.RaiseMethod">
          <source>Gets the method that is called when the event is raised, including non-public methods.</source>
          <target state="translated">Obtém o método que é chamado quando o evento é acionado, incluindo métodos não públicos.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.RaiseMethod">
          <source>The method that is called when the event is raised.</source>
          <target state="translated">O método que é chamado quando o evento é acionado.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.RaiseMethod">
          <source>This property is the equivalent of calling the <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetRaiseMethod%2A&gt;</ph> with a value of <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Esta propriedade é equivalente a chamar o <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetRaiseMethod%2A&gt;</ph> com um valor de <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>The event source.</source>
          <target state="translated">A fonte do evento.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>The delegate to be disassociated from the events raised by target.</source>
          <target state="translated">O delegado a ser desassociado dos eventos gerados pelo destino.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>Removes an event handler from an event source.</source>
          <target state="translated">Remove um manipulador de eventos de uma origem de evento.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>This method attempts to remove the delegate that may synchronize this event on the target object.</source>
          <target state="translated">Esse método tenta remover o delegado que pode sincronizar esse evento no objeto de destino.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>When an event is raised by target, the method or methods encapsulated by <ph id="ph1">`handler`</ph> will no longer be invoked.</source>
          <target state="translated">Quando um evento é gerado pelo destino, o método ou métodos encapsulados por <ph id="ph1">`handler`</ph> não será chamado.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>The event does not have a public <ph id="ph1">&lt;see langword="remove" /&gt;</ph> accessor.</source>
          <target state="translated">O evento não tem um acessador <ph id="ph1">&lt;see langword="remove" /&gt;</ph> público.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>The handler that was passed in cannot be used.</source>
          <target state="translated">O manipulador passado não pode ser usado.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id="p2">[</bpt>Portable Class Library<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> instead.</source>
          <target state="translated">No <bpt id="p1">[</bpt>.NET para aplicativos da Windows Store<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> ou na <bpt id="p2">[</bpt>Biblioteca de Classes Portátil<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, capture <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> em vez disso.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>The <ph id="ph1">&lt;paramref name="target" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the event is not static.</source>
          <target state="translated">O parâmetro <ph id="ph1">&lt;paramref name="target" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph> e o evento não é estático.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> is not declared on the target.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> não está declarado no destino.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id="p2">[</bpt>Portable Class Library<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch the base class exception, <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>, instead.</source>
          <target state="translated">Em vez disso, no <bpt id="p1">[</bpt>.NET para aplicativos da Windows Store<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> ou na <bpt id="p2">[</bpt>Biblioteca de Classes Portátil<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, capture a exceção de classe base, <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>The caller does not have access permission to the member.</source>
          <target state="translated">O chamador não tem permissão de acesso ao membro.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">quando invocado com associação tardia por meio de mecanismos como <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="P:System.Reflection.EventInfo.RemoveMethod">
          <source>Gets the <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> object for removing a method of the event, including non-public methods.</source>
          <target state="translated">Obtém o objeto <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> para remover um método do evento, incluindo métodos não públicos.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.RemoveMethod">
          <source>The <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> object for removing a method of the event.</source>
          <target state="translated">O <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> objeto para a remoção de um método do evento.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.RemoveMethod">
          <source>This property is the equivalent of calling the <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetRemoveMethod%2A&gt;</ph> with a value of <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Esta propriedade é equivalente a chamar o <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetRemoveMethod%2A&gt;</ph> com um valor de <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">Reservado para uso futuro.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">Deve ser IID_NULL.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Passed-in array of names to be mapped.</source>
          <target state="translated">Matriz passada de nomes a serem mapeados.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Count of the names to be mapped.</source>
          <target state="translated">Contagem dos nomes a serem mapeados.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale context in which to interpret the names.</source>
          <target state="translated">O contexto de localidade no qual interpretar os nomes.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Caller-allocated array which receives the IDs corresponding to the names.</source>
          <target state="translated">Matriz alocada pelo chamador que recebe os IDs correspondentes aos nomes.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Maps a set of names to a corresponding set of dispatch identifiers.</source>
          <target state="translated">Mapeia um conjunto de nomes para um conjunto correspondente de identificadores de expedição.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.</source>
          <target state="translated">Para obter mais informações sobre <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, consulte a Biblioteca MSDN.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">Não há suporte para acesso com associação tardia usando a interface <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> COM.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetType">
          <source>Returns a <bpt id="p1">&lt;c&gt;</bpt>T:System.Type<ept id="p1">&lt;/c&gt;</ept> object representing the <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> type.</source>
          <target state="translated">Retorna um objeto <bpt id="p1">&lt;c&gt;</bpt>T:System.Type<ept id="p1">&lt;/c&gt;</ept> representando o tipo <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetType">
          <source>A <bpt id="p1">&lt;c&gt;</bpt>T:System.Type<ept id="p1">&lt;/c&gt;</ept> object representing the <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> type.</source>
          <target state="translated">Um objeto <bpt id="p1">&lt;c&gt;</bpt>T:System.Type<ept id="p1">&lt;/c&gt;</ept> representando o tipo <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The type information to return.</source>
          <target state="translated">As informações de tipo a serem retornadas.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale identifier for the type information.</source>
          <target state="translated">O identificador de localidade das informações do tipo.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Receives a pointer to the requested type information object.</source>
          <target state="translated">Recebe um ponteiro para o objeto de informações de tipo solicitado.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Retrieves the type information for an object, which can then be used to get the type information for an interface.</source>
          <target state="translated">Recupera as informações do tipo de um objeto, que podem ser usadas para obter informações de tipo para uma interface.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.</source>
          <target state="translated">Para obter mais informações sobre <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, consulte a Biblioteca MSDN.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">Não há suporte para acesso com associação tardia usando a interface <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> COM.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Points to a location that receives the number of type information interfaces provided by the object.</source>
          <target state="translated">Aponta para um local que recebe o número de interfaces de informações de tipo fornecido pelo objeto.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</source>
          <target state="translated">Retorna o número de interfaces de informações do tipo que um objeto fornece (0 ou 1).</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfoCount(System.UInt32@)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfoCount(System.UInt32@)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.</source>
          <target state="translated">Para obter mais informações sobre <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, consulte a Biblioteca MSDN.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">Não há suporte para acesso com associação tardia usando a interface <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> COM.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Identifies the member.</source>
          <target state="translated">Identifica o membro.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">Reservado para uso futuro.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">Deve ser IID_NULL.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The locale context in which to interpret arguments.</source>
          <target state="translated">O contexto de localidade no qual interpretar argumentos.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Flags describing the context of the call.</source>
          <target state="translated">Sinalizadores que descrevem o contexto da chamada.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</source>
          <target state="translated">Ponteiro para uma estrutura contendo uma matriz de argumentos, uma matriz de DISPIDs de argumento para argumentos nomeados e contagens para o número de elementos nas matrizes.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to the location where the result is to be stored.</source>
          <target state="translated">Ponteiro para o local onde o resultado deve ser armazenado.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure that contains exception information.</source>
          <target state="translated">Ponteiro para uma estrutura que contém informações de exceção.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The index of the first argument that has an error.</source>
          <target state="translated">O índice do primeiro argumento que tem um erro.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Provides access to properties and methods exposed by an object.</source>
          <target state="translated">Fornece acesso a propriedades e métodos expostos por um objeto.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::Invoke`</ph>, see the MSDN Library.</source>
          <target state="translated">Para obter mais informações sobre <ph id="ph1">`IDispatch::Invoke`</ph>, consulte a Biblioteca MSDN.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">Não há suporte para acesso com associação tardia usando a interface <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> COM.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>