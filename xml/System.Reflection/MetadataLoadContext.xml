<Type Name="MetadataLoadContext" FullName="System.Reflection.MetadataLoadContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9aaf43973195666dd08ebb47e5dd2fc7f8617f14" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="64996700" /></Metadata><TypeSignature Language="C#" Value="public sealed class MetadataLoadContext : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MetadataLoadContext extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.MetadataLoadContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MetadataLoadContext&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MetadataLoadContext sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type MetadataLoadContext = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="14717-101">Representa um universo fechado de objetos do tipo carregado para fins de inspeção.</span><span class="sxs-lookup"><span data-stu-id="14717-101">Represents a closed universe of Type objects loaded for inspection-only purposes.</span></span> <span data-ttu-id="14717-102">Cada MetadataLoadContext pode ter suas próprias regras de associação e é isolada de todas as outras MetadataLoadContexts.</span><span class="sxs-lookup"><span data-stu-id="14717-102">Each MetadataLoadContext can have its own binding rules and is isolated from all other MetadataLoadContexts.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="14717-103">Um `MetadataLoadContext` serve como um dicionário que associa os nomes de assembly para <xref:System.Reflection.Assembly> instâncias que foram previamente carregadas no contexto ou necessidade de ser carregado.</span><span class="sxs-lookup"><span data-stu-id="14717-103">A `MetadataLoadContext` serves as a dictionary that binds assembly names to <xref:System.Reflection.Assembly> instances that were previously loaded into the context or need to be loaded.</span></span>

<span data-ttu-id="14717-104">Assemblies são tratados estritamente como metadados.</span><span class="sxs-lookup"><span data-stu-id="14717-104">Assemblies are treated strictly as metadata.</span></span> <span data-ttu-id="14717-105">Não há nenhuma restrição sobre como carregar assemblies com base na plataforma de destino, a arquitetura de CPU ou o tamanho do ponteiro.</span><span class="sxs-lookup"><span data-stu-id="14717-105">There are no restrictions on loading assemblies based on target platform, CPU architecture, or pointer size.</span></span> <span data-ttu-id="14717-106">Não há nenhuma restrição sobre o assembly designado como o principal assembly (**mscorlib**).</span><span class="sxs-lookup"><span data-stu-id="14717-106">There are no restrictions on the assembly designated as the core assembly (**mscorlib**).</span></span>

]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MetadataLoadContext (System.Reflection.MetadataAssemblyResolver resolver, string coreAssemblyName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MetadataAssemblyResolver resolver, string coreAssemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.#ctor(System.Reflection.MetadataAssemblyResolver,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (resolver As MetadataAssemblyResolver, Optional coreAssemblyName As String = null)" />
      <MemberSignature Language="F#" Value="new System.Reflection.MetadataLoadContext : System.Reflection.MetadataAssemblyResolver * string -&gt; System.Reflection.MetadataLoadContext" Usage="new System.Reflection.MetadataLoadContext (resolver, coreAssemblyName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="resolver" Type="System.Reflection.MetadataAssemblyResolver" />
        <Parameter Name="coreAssemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resolver"><span data-ttu-id="14717-107">Uma instância de <see cref="T:System.Reflection.MetadataAssemblyResolver" />.</span><span class="sxs-lookup"><span data-stu-id="14717-107">A <see cref="T:System.Reflection.MetadataAssemblyResolver" /> instance.</span></span></param>
        <param name="coreAssemblyName"><span data-ttu-id="14717-108">O nome do assembly que contém os tipos principais, como <see cref="T:System.Object" />.</span><span class="sxs-lookup"><span data-stu-id="14717-108">The name of the assembly that contains the core types such as <see cref="T:System.Object" />.</span></span> <span data-ttu-id="14717-109">Normalmente, isso seria "mscorlib".</span><span class="sxs-lookup"><span data-stu-id="14717-109">Typically, this would be "mscorlib".</span></span></param>
        <summary><span data-ttu-id="14717-110">Cria um novo objeto <see cref="T:System.Reflection.MetadataLoadContext" />.</span><span class="sxs-lookup"><span data-stu-id="14717-110">Creates a new <see cref="T:System.Reflection.MetadataLoadContext" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CoreAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly CoreAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly CoreAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MetadataLoadContext.CoreAssembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CoreAssembly As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Assembly ^ CoreAssembly { System::Reflection::Assembly ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CoreAssembly : System.Reflection.Assembly" Usage="System.Reflection.MetadataLoadContext.CoreAssembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="14717-111">Obtém ou define o assembly que denota o "assembly de sistema" que hospeda os tipos conhecidos, como <see cref="T:System.Int32" />.</span><span class="sxs-lookup"><span data-stu-id="14717-111">Gets or sets the assembly that denotes the "system assembly" that houses the well-known types such as <see cref="T:System.Int32" />.</span></span></summary>
        <value><span data-ttu-id="14717-112">Uma instância <see cref="T:System.Reflection.Assembly" />.</span><span class="sxs-lookup"><span data-stu-id="14717-112">An <see cref="T:System.Reflection.Assembly" /> instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="14717-113">O assembly principal é tratado diferentemente de outros assemblies, porque as referências a esses tipos conhecidos não incluem a referência de assembly, ao contrário de tipos normais.</span><span class="sxs-lookup"><span data-stu-id="14717-113">The core assembly is treated differently than other assemblies because references to these well-known types do not include the assembly reference, unlike normal types.</span></span>
            
<span data-ttu-id="14717-114">Normalmente, esse assembly é chamado "mscorlib" ou "netstandard".</span><span class="sxs-lookup"><span data-stu-id="14717-114">Typically, this assembly is named "mscorlib" or "netstandard".</span></span> <span data-ttu-id="14717-115">Se o assembly principal não for encontrado, o valor será `null`, e muitos outros métodos de reflexão, incluindo aqueles que analisam as assinaturas de método lançará uma exceção.</span><span class="sxs-lookup"><span data-stu-id="14717-115">If the core assembly cannot be found, the value will be `null`, and many other reflection methods, including those that parse method signatures, will throw an exception.</span></span>
            
<span data-ttu-id="14717-116">O `CoreAssembly` é determinado, passando a `coreAssemblyName` parâmetro passado para o <xref:System.Reflection.MetadataAssemblyResolver> construtor para o <xref:System.Reflection.MetadataAssemblyResolver.Resolve%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="14717-116">The `CoreAssembly` is determined by passing the `coreAssemblyName` parameter passed to the <xref:System.Reflection.MetadataAssemblyResolver> constructor to the <xref:System.Reflection.MetadataAssemblyResolver.Resolve%2A?displayProperty=nameWithType> method.</span></span>

<span data-ttu-id="14717-117">Se nenhum `coreAssemblyName` argumento foi especificado no construtor do <xref:System.Reflection.MetadataLoadContext>, em seguida, os valores padrão são usados, incluindo "mscorlib", "System. Runtime" e "netstandard".</span><span class="sxs-lookup"><span data-stu-id="14717-117">If no `coreAssemblyName` argument was specified in the constructor of <xref:System.Reflection.MetadataLoadContext>, then default values are used, including "mscorlib", "System.Runtime" and "netstandard".</span></span>
            
<span data-ttu-id="14717-118">O assembly principal designado não precisa conter os tipos principais diretamente.</span><span class="sxs-lookup"><span data-stu-id="14717-118">The designated core assembly does not need to contain the core types directly.</span></span> <span data-ttu-id="14717-119">Ele pode digitar encaminhá-los para outros assemblies.</span><span class="sxs-lookup"><span data-stu-id="14717-119">It can type forward them to other assemblies.</span></span> <span data-ttu-id="14717-120">Portanto, é perfeitamente possível usar a fachada de mscorlib como o assembly principal designado.</span><span class="sxs-lookup"><span data-stu-id="14717-120">Thus, it is perfectly permissible to use the mscorlib facade as the designated core assembly.</span></span>
            
<span data-ttu-id="14717-121">Observe que <xref:System.Runtime> não é um assembly principal ideal porque ele exclui alguns dos tipos de atributo personalizado pseudo relacionados à interoperabilidade, como <xref:System.Runtime.InteropServices.DllImportAttribute>.</span><span class="sxs-lookup"><span data-stu-id="14717-121">Note that <xref:System.Runtime> is not an ideal core assembly because it excludes some of the interop-related pseudo-custom attribute types such as <xref:System.Runtime.InteropServices.DllImportAttribute>.</span></span> <span data-ttu-id="14717-122">No entanto, ela poderá servir se você não tenha interesse nesses atributos.</span><span class="sxs-lookup"><span data-stu-id="14717-122">However, it can serve if you have no interest in those attributes.</span></span> <span data-ttu-id="14717-123">A API CustomAttributes ignorará esses atributos se o assembly principal não inclui os tipos necessários.</span><span class="sxs-lookup"><span data-stu-id="14717-123">The CustomAttributes API will skip those attributes if the core assembly does not include the necessary types.</span></span>
            
<span data-ttu-id="14717-124">O assembly principal não está carregado até que o necessário.</span><span class="sxs-lookup"><span data-stu-id="14717-124">The core assembly is not loaded until necessary.</span></span> <span data-ttu-id="14717-125">As seguintes APIs não disparam a pesquisa para o assembly principal:</span><span class="sxs-lookup"><span data-stu-id="14717-125">The following APIs do not trigger the search for the core assembly:</span></span>

* <xref:System.Reflection.MetadataLoadContext.LoadFromStream%2A?displayProperty=nameWithType>
* <xref:System.Reflection.MetadataLoadContext.LoadFromAssemblyPath%2A?displayProperty=nameWithType>
* <xref:System.Reflection.MetadataLoadContext.LoadFromByteArray%2A?displayProperty=nameWithType>
* <span data-ttu-id="14717-126"><System.Reflection.Assembly.GetName%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="14717-126"><System.Reflection.Assembly.GetName%2A?displayProperty=nameWithType></span></span>
* <span data-ttu-id="14717-127"><System.Reflection.Assembly.FullName?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="14717-127"><System.Reflection.Assembly.FullName?displayProperty=nameWithType></span></span>
* <span data-ttu-id="14717-128"><System.Reflection.Assembly.GetReferencedAssemblies%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="14717-128"><System.Reflection.Assembly.GetReferencedAssemblies%2A?displayProperty=nameWithType></span></span>
* <span data-ttu-id="14717-129"><System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="14717-129"><System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType></span></span>
* <span data-ttu-id="14717-130"><System.Reflection.Assembly.DefinedTypes?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="14717-130"><System.Reflection.Assembly.DefinedTypes?displayProperty=nameWithType></span></span>
* <span data-ttu-id="14717-131"><System.Reflection.Assembly.GetExportedTypes%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="14717-131"><System.Reflection.Assembly.GetExportedTypes%2A?displayProperty=nameWithType></span></span>
* <span data-ttu-id="14717-132"><System.Reflection.Assembly.GetForwardedTypes%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="14717-132"><System.Reflection.Assembly.GetForwardedTypes%2A?displayProperty=nameWithType></span></span>
* <span data-ttu-id="14717-133"><System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="14717-133"><System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)?displayProperty=nameWithType></span></span>
* <xref:System.Type.Name?displayProperty=nameWithType>
* <xref:System.Type.FullName?displayProperty=nameWithType>
* <xref:System.Type.AssemblyQualifiedName?displayProperty=nameWithType>
            
<span data-ttu-id="14717-134">Se um assembly principal não pode ser encontrado ou se o assembly principal não tem os tipos, isso afetará o comportamento do <xref:System.Reflection.MetadataLoadContext> da seguinte maneira:</span><span class="sxs-lookup"><span data-stu-id="14717-134">If a core assembly cannot be found or if the core assembly is missing types, this will affect the behavior of the <xref:System.Reflection.MetadataLoadContext> as follows:</span></span>
            
* <span data-ttu-id="14717-135">As APIs que precisam analisar assinaturas ou typespecs e retornar os resultados como <xref:System.Type> objetos lançará uma exceção.</span><span class="sxs-lookup"><span data-stu-id="14717-135">APIs that need to parse signatures or typespecs and return the results as <xref:System.Type> objects will throw an exception.</span></span> <span data-ttu-id="14717-136">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="14717-136">For example:</span></span>

 * <xref:System.Reflection.MethodInfo.ReturnType?displayProperty=nameWithType>
 * <span data-ttu-id="14717-137">System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="14717-137">System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType></span></span>
 * <xref:System.Type.BaseType?displayProperty-nameWithType>
 * <xref:System.Type.GetInterfaces%2A?displayProperty=nameWithType>
            
* <span data-ttu-id="14717-138">As APIs que precisa comparar tipos de núcleo bem conhecidos não lançará uma exceção e a comparação será avaliada como `false`.</span><span class="sxs-lookup"><span data-stu-id="14717-138">APIs that need to compare types to well-known core types will not throw an exception, and the comparison will evaluate to `false`.</span></span> <span data-ttu-id="14717-139">Por exemplo, se você não especificar um assembly de núcleo <xref:System.Type.IsPrimitive> retornarão `false` para tudo, até mesmo tipos denominados <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="14717-139">For example, if you do not specify a core assembly, <xref:System.Type.IsPrimitive> will return `false` for everything, even types named <xref:System.Int32>.</span></span> <span data-ttu-id="14717-140">Da mesma forma, <xref:System.Type.GetTypeCode%2A?displayProperty=nameWithType> retornará <xref:System.TypeCode.Object> para tudo.</span><span class="sxs-lookup"><span data-stu-id="14717-140">Similarly, <xref:System.Type.GetTypeCode%2A?displayProperty=nameWithType> will return <xref:System.TypeCode.Object> for everything.</span></span>
            
* <span data-ttu-id="14717-141">Se uma entidade de metadados define os sinalizadores que são exibidos como um atributo pseudo personalizado e o assembly principal não contém o tipo de atributo pseudo personalizado, o construtor necessário ou qualquer um dos tipos de parâmetro do construtor, o <xref:System.Reflection.MetadataLoadContext> não lançam.</span><span class="sxs-lookup"><span data-stu-id="14717-141">If a metadata entity sets flags that surface as a pseudo-custom attribute, and the core assembly does not contain the pseudo-custom attribute type, the necessary constructor or any of the parameter types of the constructor, the <xref:System.Reflection.MetadataLoadContext> will not throw.</span></span> <span data-ttu-id="14717-142">Ele omitirá o atributo pseudo personalizado da lista de atributos retornados.</span><span class="sxs-lookup"><span data-stu-id="14717-142">It will omit the pseudo-custom attribute from the list of returned attributes.</span></span>
          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="metadataLoadContext.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="14717-143">Libera todos os recursos nativos (como bloqueios de arquivo nos arquivos de assembly).</span><span class="sxs-lookup"><span data-stu-id="14717-143">Releases any native resources (such as file locks on assembly files).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="14717-144">Após o descarte, não é seguro usar qualquer <xref:System.Reflection.Assembly> objetos liberados pelo <xref:System.Reflection.MetadataLoadContext> ou qualquer objeto de reflexão liberadas por aqueles <xref:System.Reflection.Assembly> objetos.</span><span class="sxs-lookup"><span data-stu-id="14717-144">After disposal, it is not safe to use any <xref:System.Reflection.Assembly> objects dispensed by the <xref:System.Reflection.MetadataLoadContext> or any reflection objects dispensed by those <xref:System.Reflection.Assembly> objects.</span></span>

<span data-ttu-id="14717-145">Embora os objetos fornecidos pelo <xref:System.Reflection.MetadataLoadContext> se esforçam para lançar um <xref:System.ObjectDisposedException>, isso não é garantido.</span><span class="sxs-lookup"><span data-stu-id="14717-145">Though objects provided by the <xref:System.Reflection.MetadataLoadContext> strive to throw an <xref:System.ObjectDisposedException>, this is not guaranteed.</span></span>

<span data-ttu-id="14717-146">Algumas APIs podem retornar fixa ou dados em cache anteriormente.</span><span class="sxs-lookup"><span data-stu-id="14717-146">Some APIs may return fixed or previously cached data.</span></span> <span data-ttu-id="14717-147">Acessando objetos *durante* um <xref:System.Reflection.MetadataLoadContext.Dispose%2A> chamada de método pode resultar em uma violação de acesso não gerenciado e failfast.</span><span class="sxs-lookup"><span data-stu-id="14717-147">Accessing objects *during* a <xref:System.Reflection.MetadataLoadContext.Dispose%2A> method call may result in an unmanaged access violation and failfast.</span></span>
         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAssemblies">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Reflection.Assembly&gt; GetAssemblies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.Assembly&gt; GetAssemblies() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.GetAssemblies" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAssemblies () As IEnumerable(Of Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Reflection::Assembly ^&gt; ^ GetAssemblies();" />
      <MemberSignature Language="F#" Value="member this.GetAssemblies : unit -&gt; seq&lt;System.Reflection.Assembly&gt;" Usage="metadataLoadContext.GetAssemblies " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Reflection.Assembly&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="14717-148">Retornar um instantâneo atômico dos assemblies que foram carregados no <see cref="T:System.Reflection.MetadataLoadContext" />.</span><span class="sxs-lookup"><span data-stu-id="14717-148">Return an atomic snapshot of the assemblies that have been loaded into the <see cref="T:System.Reflection.MetadataLoadContext" />.</span></span></summary>
        <returns><span data-ttu-id="14717-149">Uma coleção enumerável de <see xref="T:System.Reflection.Assembly" /> objetos.</span><span class="sxs-lookup"><span data-stu-id="14717-149">An enumerable collection of <see xref="T:System.Reflection.Assembly" /> objects.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadFromAssemblyName">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromAssemblyName (System.Reflection.AssemblyName assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromAssemblyName(class System.Reflection.AssemblyName assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromAssemblyName(System.Reflection.AssemblyName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromAssemblyName(System::Reflection::AssemblyName ^ assemblyName);" />
      <MemberSignature Language="F#" Value="member this.LoadFromAssemblyName : System.Reflection.AssemblyName -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromAssemblyName assemblyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.Reflection.AssemblyName" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="14717-150">Uma instância <see cref="T:System.Reflection.AssemblyName" />.</span><span class="sxs-lookup"><span data-stu-id="14717-150">An <see cref="T:System.Reflection.AssemblyName" /> instance.</span></span></param>
        <summary><span data-ttu-id="14717-151">Resolve o nome do assembly fornecido a um assembly.</span><span class="sxs-lookup"><span data-stu-id="14717-151">Resolves the supplied assembly name to an assembly.</span></span> <span data-ttu-id="14717-152">Se um assembly foi associado anteriormente a esse nome, esse assembly será retornado.</span><span class="sxs-lookup"><span data-stu-id="14717-152">If an assembly was previously bound to this name, that assembly is returned.</span></span> <span data-ttu-id="14717-153">Caso contrário, o <see cref="T:System.Reflection.MetadataLoadContext" /> chama especificado <see cref="T:System.Reflection.MetadataAssemblyResolver" />.</span><span class="sxs-lookup"><span data-stu-id="14717-153">Otherwise, the <see cref="T:System.Reflection.MetadataLoadContext" /> calls the specified <see cref="T:System.Reflection.MetadataAssemblyResolver" />.</span></span></summary>
        <returns><span data-ttu-id="14717-154">Uma instância <see cref="T:System.Reflection.Assembly" />.</span><span class="sxs-lookup"><span data-stu-id="14717-154">An <see cref="T:System.Reflection.Assembly" /> instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks
<span data-ttu-id="14717-155">Observe que o comportamento desse método corresponde o comportamento do <xref:System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName%2A?displayProperty=nameWithType> resolver o evento, mas não coincide com o comportamento de <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="14717-155">Note that the behavior of this method matches the behavior of the <xref:System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName%2A?displayProperty=nameWithType> resolve event but does not match the behavior of <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="14717-156">(O último desiste sem gerar o evento de resolução.)</span><span class="sxs-lookup"><span data-stu-id="14717-156">(The latter gives up without raising its resolve event.)</span></span>
          ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="14717-157">O resolvedor retorna <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="14717-157">The resolver returns <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromAssemblyName">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromAssemblyName (string assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromAssemblyName(string assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromAssemblyName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadFromAssemblyName (assemblyName As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromAssemblyName(System::String ^ assemblyName);" />
      <MemberSignature Language="F#" Value="member this.LoadFromAssemblyName : string -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromAssemblyName assemblyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="14717-158">Um <see cref="T:System.String" /> que representa o nome do assembly.</span><span class="sxs-lookup"><span data-stu-id="14717-158">A <see cref="T:System.String" /> representing the assembly name.</span></span></param>
        <summary><span data-ttu-id="14717-159">Resolve o nome do assembly fornecido a um assembly.</span><span class="sxs-lookup"><span data-stu-id="14717-159">Resolves the supplied assembly name to an assembly.</span></span> <span data-ttu-id="14717-160">Se um assembly foi associado anteriormente a esse nome, esse assembly será retornado.</span><span class="sxs-lookup"><span data-stu-id="14717-160">If an assembly was previously bound to this name, that assembly is returned.</span></span> <span data-ttu-id="14717-161">Caso contrário, o <see cref="T:System.Reflection.MetadataLoadContext" /> chama especificado <see cref="T:System.Reflection.MetadataAssemblyResolver" />.</span><span class="sxs-lookup"><span data-stu-id="14717-161">Otherwise, the <see cref="T:System.Reflection.MetadataLoadContext" /> calls the specified <see cref="T:System.Reflection.MetadataAssemblyResolver" />.</span></span></summary>
        <returns><span data-ttu-id="14717-162">Uma instância <see cref="T:System.Reflection.Assembly" />.</span><span class="sxs-lookup"><span data-stu-id="14717-162">An <see cref="T:System.Reflection.Assembly" /> instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks
<span data-ttu-id="14717-163">Observe que o comportamento desse método corresponde o comportamento de <xref:System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName%2A?displayProperty=nameWithType> resolver o evento, mas não coincide com o comportamento de < xxref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType >.</span><span class="sxs-lookup"><span data-stu-id="14717-163">Note that the behavior of this method matches the behavior of <xref:System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName%2A?displayProperty=nameWithType> resolve event but does not match the behavior of <xxref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="14717-164">(O último desiste sem gerar o evento de resolução.)</span><span class="sxs-lookup"><span data-stu-id="14717-164">(The latter gives up without raising its resolve event.)</span></span>
]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="14717-165">O resolvedor retorna <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="14717-165">The resolver returns <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromAssemblyPath">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromAssemblyPath (string assemblyPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromAssemblyPath(string assemblyPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromAssemblyPath(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadFromAssemblyPath (assemblyPath As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromAssemblyPath(System::String ^ assemblyPath);" />
      <MemberSignature Language="F#" Value="member this.LoadFromAssemblyPath : string -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromAssemblyPath assemblyPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyPath"><span data-ttu-id="14717-166">Um <see cref="T:System.String" /> que representa o caminho para o assembly.</span><span class="sxs-lookup"><span data-stu-id="14717-166">A <see cref="T:System.String" /> representing the path to the assembly.</span></span></param>
        <summary><span data-ttu-id="14717-167">Carrega um assembly de um caminho específico no disco e associa o seu nome de assembly a ele no <see cref="T:System.Reflection.MetadataLoadContext" />.</span><span class="sxs-lookup"><span data-stu-id="14717-167">Loads an assembly from a specific path on the disk and binds its assembly name to it in the <see cref="T:System.Reflection.MetadataLoadContext" />.</span></span> <span data-ttu-id="14717-168">Se um assembly anterior com o mesmo nome já foi carregado para o <see cref="T:System.Reflection.MetadataLoadContext" />, o assembly anterior será retornado.</span><span class="sxs-lookup"><span data-stu-id="14717-168">If a prior assembly with the same name was already loaded into the <see cref="T:System.Reflection.MetadataLoadContext" />, the prior assembly will be returned.</span></span></summary>
        <returns><span data-ttu-id="14717-169">Uma instância <see cref="T:System.Reflection.Assembly" />.</span><span class="sxs-lookup"><span data-stu-id="14717-169">An <see cref="T:System.Reflection.Assembly" /> instance.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="14717-170">Os dois assemblies não têm o mesmo Mvid.</span><span class="sxs-lookup"><span data-stu-id="14717-170">The two assemblies do not have the same Mvid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromByteArray">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromByteArray (byte[] assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromByteArray(unsigned int8[] assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromByteArray(System.Byte[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromByteArray(cli::array &lt;System::Byte&gt; ^ assembly);" />
      <MemberSignature Language="F#" Value="member this.LoadFromByteArray : byte[] -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromByteArray assembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="assembly"><span data-ttu-id="14717-171">Um <see cref="T:System.Byte[]" /> contendo um assembly.</span><span class="sxs-lookup"><span data-stu-id="14717-171">A <see cref="T:System.Byte[]" /> holding an assembly.</span></span></param>
        <summary><span data-ttu-id="14717-172">Carrega um assembly de uma matriz de bytes e associa o seu nome de assembly a ele no <see cref="T:System.Reflection.MetadataLoadContext" />.</span><span class="sxs-lookup"><span data-stu-id="14717-172">Loads an assembly from a byte array and binds its assembly name to it in the <see cref="T:System.Reflection.MetadataLoadContext" />.</span></span> <span data-ttu-id="14717-173">Se um assembly anterior com o mesmo nome já foi carregado para o <see cref="T:System.Reflection.MetadataLoadContext" />, o assembly anterior será retornado.</span><span class="sxs-lookup"><span data-stu-id="14717-173">If a prior assembly with the same name was already loaded into the <see cref="T:System.Reflection.MetadataLoadContext" />, the prior assembly will be returned.</span></span></summary>
        <returns><span data-ttu-id="14717-174">Uma instância <see cref="T:System.Reflection.Assembly" />.</span><span class="sxs-lookup"><span data-stu-id="14717-174">An <see cref="T:System.Reflection.Assembly" /> instance.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="14717-175">Os dois assemblies não têm o mesmo Mvid.</span><span class="sxs-lookup"><span data-stu-id="14717-175">The two assemblies do not have the same Mvid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromStream">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromStream (System.IO.Stream assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromStream(class System.IO.Stream assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromStream(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromStream(System::IO::Stream ^ assembly);" />
      <MemberSignature Language="F#" Value="member this.LoadFromStream : System.IO.Stream -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromStream assembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="assembly"><span data-ttu-id="14717-176">Um <see cref="T:System.IO.Stream" /> contendo um assembly.</span><span class="sxs-lookup"><span data-stu-id="14717-176">A <see cref="T:System.IO.Stream" /> holding an assembly.</span></span></param>
        <summary><span data-ttu-id="14717-177">Carrega um assembly de um fluxo e associa o seu nome de assembly a ele no <see cref="T:System.Reflection.MetadataLoadContext" />.</span><span class="sxs-lookup"><span data-stu-id="14717-177">Loads an assembly from a stream and binds its assembly name to it in the <see cref="T:System.Reflection.MetadataLoadContext" />.</span></span> <span data-ttu-id="14717-178">Se um assembly anterior com o mesmo nome já foi carregado para o <see cref="T:System.Reflection.MetadataLoadContext" />, o assembly anterior será retornado.</span><span class="sxs-lookup"><span data-stu-id="14717-178">If a prior assembly with the same name was already loaded into the <see cref="T:System.Reflection.MetadataLoadContext" />, the prior assembly will be returned.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!IMPORTANT]
> <span data-ttu-id="14717-179">O <xref:System.Reflection.MetadataLoadContext> assumirá a propriedade do <xref:System.IO.Stream> passados para esse método.</span><span class="sxs-lookup"><span data-stu-id="14717-179">The <xref:System.Reflection.MetadataLoadContext> takes ownership of the <xref:System.IO.Stream> passed into this method.</span></span> <span data-ttu-id="14717-180">O proprietário original não deve modificar sua posição, descarte o <xref:System.IO.Stream>, ou, suponha que sua posição permanecerá inalterada.</span><span class="sxs-lookup"><span data-stu-id="14717-180">The original owner must not mutate its position, dispose the <xref:System.IO.Stream>, or assume that its position will stay unchanged.</span></span>

]]></format>
        </remarks>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="14717-181">Os dois assemblies não têm o mesmo Mvid.</span><span class="sxs-lookup"><span data-stu-id="14717-181">The two assemblies do not have the same Mvid.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>