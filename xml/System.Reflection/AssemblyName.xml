<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="AssemblyName.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac55e8d575c8f6baf9dd58560db2cd8c587433f5908.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5e8d575c8f6baf9dd58560db2cd8c587433f5908</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.AssemblyName">
          <source>Describes an assembly's unique identity in full.</source>
          <target state="translated">Descreve integralmente a identidade exclusiva de um assembly.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> object contains information about an assembly, which you can use to bind to that assembly.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> objeto contém informações sobre um assembly, que pode ser usada para associar a esse assembly.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>An assembly's identity consists of the following:</source>
          <target state="translated">Identidade de um assembly consiste no seguinte:</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Simple name.</source>
          <target state="translated">Nome simples.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Version number.</source>
          <target state="translated">Número de versão.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Cryptographic key pair.</source>
          <target state="translated">Par de chaves criptográficas.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Supported culture.</source>
          <target state="translated">Cultura com suporte.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>The simple name is typically the file name for the manifest file without its extension.</source>
          <target state="translated">O nome simples normalmente é o nome do arquivo para o arquivo de manifesto sem a extensão.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>The key pair includes a public and private key, used to create strong-name signatures for assemblies.</source>
          <target state="translated">O par de chaves inclui uma chave pública e privada, usada para criar assinaturas de nome forte para assemblies.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>All compilers that support the common language runtime will emit the simple name of a nested class, and reflection constructs a mangled name when queried, in accordance with the following conventions.</source>
          <target state="translated">Todos os compiladores que dão suporte ao Common Language Runtime emitirão o nome simples de uma classe aninhada, e reflexão constrói um nome danificado quando consultado, de acordo com as convenções a seguir.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Delimiter</source>
          <target state="translated">Delimitador</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Meaning</source>
          <target state="translated">Significado</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Backslash (<ph id="ph1">\\</ph>)</source>
          <target state="translated">Barra invertida (<ph id="ph1">\\</ph>)</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Escape character.</source>
          <target state="translated">Caractere de escape.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Comma (,)</source>
          <target state="translated">Vírgula (,)</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Precedes the assembly name.</source>
          <target state="translated">Precede o nome do assembly.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Plus sign (+)</source>
          <target state="translated">Sinal de adição (+)</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Precedes a nested class.</source>
          <target state="translated">Precede uma classe aninhada.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>For example, the fully qualified name for a class might look like this:</source>
          <target state="translated">Por exemplo, o nome totalmente qualificado para uma classe pode ser semelhante a:</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>ContainingClass+NestedClass,MyAssembly</source>
          <target state="translated">ContainingClass+NestedClass,MyAssembly</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>A "++" becomes "<ph id="ph1">\\</ph><ph id="ph2">+</ph><ph id="ph3">\\</ph>+", and a "<ph id="ph4">\\</ph>" becomes "<ph id="ph5">\\</ph><ph id="ph6">\\</ph>".</source>
          <target state="translated">A "++" becomes "<ph id="ph1">\\</ph><ph id="ph2">+</ph><ph id="ph3">\\</ph>+", and a "<ph id="ph4">\\</ph>" becomes "<ph id="ph5">\\</ph><ph id="ph6">\\</ph>".</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>This qualified name can be persisted and later used to load the <ph id="ph1">&lt;xref:System.Type&gt;</ph>.</source>
          <target state="translated">Este nome qualificado pode ser mantido e posteriormente usado para carregar o <ph id="ph1">&lt;xref:System.Type&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>To search for and load a <ph id="ph1">&lt;xref:System.Type&gt;</ph>, use <ph id="ph2">&lt;xref:System.Type.GetType%2A&gt;</ph> either with the type name only or with the assembly qualified type name.</source>
          <target state="translated">Para procurar e carregar <ph id="ph1">&lt;xref:System.Type&gt;</ph>, use <ph id="ph2">&lt;xref:System.Type.GetType%2A&gt;</ph> apenas com o nome do tipo ou com o nome do tipo qualificado do assembly.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source><ph id="ph1">&lt;xref:System.Type.GetType%2A&gt;</ph> with the type name only will look for the <ph id="ph2">&lt;xref:System.Type&gt;</ph> in the caller's assembly and then in the System assembly.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Type.GetType%2A&gt;</ph> com o nome de tipo só irá procurar o <ph id="ph2">&lt;xref:System.Type&gt;</ph> no assembly do chamador e, em seguida, no assembly System.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source><ph id="ph1">&lt;xref:System.Type.GetType%2A&gt;</ph> with the assembly qualified type name will look for the <ph id="ph2">&lt;xref:System.Type&gt;</ph> in any assembly.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Type.GetType%2A&gt;</ph> com o nome de tipo qualificado de assembly irá procurar o <ph id="ph2">&lt;xref:System.Type&gt;</ph> em qualquer assembly.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>A fully specified <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> must have the name, culture, public key or public key token, major version, minor version, build number, and revision number parameters.</source>
          <target state="translated">Totalmente especificado <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> devem ter nome, cultura, chave pública ou token de chave pública, principal versão secundária, versão, número da compilação e parâmetros de número de revisão.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>The last four are packaged in the <ph id="ph1">&lt;xref:System.Version&gt;</ph> type.</source>
          <target state="translated">Os últimos quatro dígitos são empacotados no <ph id="ph1">&lt;xref:System.Version&gt;</ph> tipo.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>To create a simple name, create an <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> object using the default constructor and set the <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.Name%2A&gt;</ph>.</source>
          <target state="translated">Para criar um nome simples, crie um <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> objeto usando o construtor padrão e defina o <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.Name%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>The other properties are optional.</source>
          <target state="translated">As outras propriedades são opcionais.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>To create a full strong name, create an <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> object using the default constructor and set the <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.Name%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph>.</source>
          <target state="translated">Para criar um nome forte completo, crie um <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> objeto usando o construtor padrão e defina o <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.Name%2A&gt;</ph> e <ph id="ph3">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>The other properties are optional.</source>
          <target state="translated">As outras propriedades são opcionais.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Use <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.SetPublicKeyToken%2A&gt;</ph> to set the public key and the strong name.</source>
          <target state="translated">Use <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.SetPublicKeyToken%2A&gt;</ph> para definir a chave pública e o nome forte.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>The strong name signing always uses the <ph id="ph1">&lt;xref:System.Security.Cryptography.SHA1&gt;</ph> hash algorithm.</source>
          <target state="translated">O nome forte assinatura sempre usa o <ph id="ph1">&lt;xref:System.Security.Cryptography.SHA1&gt;</ph> algoritmo de hash.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>To ensure that the names are constructed correctly, use the following properties:</source>
          <target state="translated">Para garantir que os nomes são construídos corretamente, use as seguintes propriedades:</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>You can also get the name by using the <ph id="ph1">`/l`</ph> option with the <bpt id="p1">[</bpt>Gacutil.exe (Global Assembly Cache Tool)<ept id="p1">](~/docs/framework/tools/gacutil-exe-gac-tool.md)</ept></source>
          <target state="translated">Você também pode obter o nome usando o <ph id="ph1">`/l`</ph> opção com o <bpt id="p1">[</bpt>Gacutil.exe (ferramenta de Cache de Assembly Global)<ept id="p1">](~/docs/framework/tools/gacutil-exe-gac-tool.md)</ept></target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>For a partially specified strong name, create an <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> object using the default constructor and set the name and public key.</source>
          <target state="translated">Para um nome forte parcialmente especificado, crie um <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> usando o construtor padrão do objeto e definir o nome e a chave pública.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>An assembly created using such an <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> can be signed later using the Assembly Linker (Al.exe).</source>
          <target state="translated">Um assembly criado usando como um <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> pode ser assinado posteriormente usando o Assembly Linker (Al.exe).</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>It is possible to specify a public key and a <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> with inconsistent values.</source>
          <target state="translated">É possível especificar uma chave pública e uma <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> com valores inconsistentes.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>This can be useful in developer scenarios.</source>
          <target state="translated">Isso pode ser útil em cenários de desenvolvedor.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>In this case, the public key retrieved with <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.GetPublicKey%2A&gt;</ph> specifies the correct public key, while the <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> specifies the public and private keys used during development.</source>
          <target state="translated">Nesse caso, a chave pública recuperados com <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.GetPublicKey%2A&gt;</ph> Especifica while chave pública correta a <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> Especifica as chaves públicas e privadas usadas durante o desenvolvimento.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>When the runtime detects a mismatch between the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> and the public key, it looks up in the registry the correct key that matches the public key.</source>
          <target state="translated">Quando o tempo de execução detecta uma incompatibilidade entre o <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> e a chave pública, ele procura no registro a chave correta que corresponde à chave pública.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>The format of the display name of an <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> is a comma-delimited Unicode string that begins with the name, as follows:</source>
          <target state="translated">O formato do nome para exibição de um <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> é uma cadeia Unicode delimitado por vírgulas que começa com o nome, da seguinte maneira:</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source><ph id="ph1">`Name`</ph> is the textual name of the assembly.</source>
          <target state="translated"><ph id="ph1">`Name`</ph> é o nome textual do assembly.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source><ph id="ph1">`CultureInfo`</ph> is the RFC1766-format-defined culture.</source>
          <target state="translated"><ph id="ph1">`CultureInfo`</ph> é a cultura RFC1766 formato definido.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source><ph id="ph1">`Major`</ph>, <ph id="ph2">`Minor`</ph>, <ph id="ph3">`Build`</ph>, and <ph id="ph4">`Revision`</ph> are the major version, minor version, build number, and revision number of the assembly.</source>
          <target state="translated"><ph id="ph1">`Major`</ph>, <ph id="ph2">`Minor`</ph>, <ph id="ph3">`Build`</ph>, e <ph id="ph4">`Revision`</ph> são a versão principal, versão secundária, número da compilação e número de revisão do assembly.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source><ph id="ph1">`StrongName`</ph> is the hexadecimal-encoded low-order 64 bits of the hash value of the public key generated using the SHA-1 hashing algorithm and the public key specified by <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`StrongName`</ph> é os hexadecimal codificado baixa 64 bits de ordem o valor de hash da chave pública gerado usando o algoritmo de hash SHA-1 e a chave pública especificada pelo <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source><ph id="ph1">`PublicKeyToken`</ph> is the hexadecimal-encoded public key specified by <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`PublicKeyToken`</ph> é a chave pública codificada em hexadecimal especificada por <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Hexadecimal encoding is defined as the conversion of each byte of a binary object to two hexadecimal characters, progressing from least to most significant byte.</source>
          <target state="translated">Codificação hexadecimal é definido como a conversão de cada byte de um objeto binário em dois caracteres hexadecimais, em andamento da menor para o byte mais significativo.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Additional display values will be added as deemed necessary.</source>
          <target state="translated">Valores de exibição adicionais serão adicionados conforme necessário.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>If the full public key is known, then PublicKey may be substituted for StrongName.</source>
          <target state="translated">Se a chave pública completa for conhecida, em seguida, PublicKey pode ser substituído por nome forte.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Also note that except for <ph id="ph1">`Name`</ph>, which must come first, the lexical order of parameters is unimportant.</source>
          <target state="translated">Observe também que, exceto para <ph id="ph1">`Name`</ph>, que deve vir primeiro, a ordem léxica de parâmetros não é importante.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>However, any parameter (<ph id="ph1">`Version`</ph>, <ph id="ph2">`Culture`</ph>, <ph id="ph3">`StrongName`</ph> or <ph id="ph4">`PublicKey`</ph>) not specifically set is considered to be omitted, and the <ph id="ph5">&lt;xref:System.Reflection.AssemblyName&gt;</ph> is then considered partial.</source>
          <target state="translated">No entanto, qualquer parâmetro (<ph id="ph1">`Version`</ph>, <ph id="ph2">`Culture`</ph>, <ph id="ph3">`StrongName`</ph> ou <ph id="ph4">`PublicKey`</ph>) não especificamente conjunto deverá ser omitido e o <ph id="ph5">&lt;xref:System.Reflection.AssemblyName&gt;</ph> é considerado parcial.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>When specifying partial information, Name parameters must be specified in the order described above.</source>
          <target state="translated">Ao especificar informações parciais, parâmetros de nome devem ser especificados na ordem descrita acima.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>When supplying a display name, the convention <ph id="ph1">`StrongName =null`</ph> or <ph id="ph2">`PublicKey= null`</ph> indicates that binding and matching against a simply named assembly is required.</source>
          <target state="translated">Ao fornecer um nome para exibição, a convenção de <ph id="ph1">`StrongName =null`</ph> ou <ph id="ph2">`PublicKey= null`</ph> indica que a associação e a correspondência em relação a um assembly nomeado simplesmente serão necessária.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Additionally, the convention <ph id="ph1">`Culture= ""`</ph> (double quote representing an empty string) indicates matching against the default culture.</source>
          <target state="translated">Além disso, a convenção de <ph id="ph1">`Culture= ""`</ph> (aspas duplas que representa uma cadeia de caracteres vazia) indica correspondentes com a cultura padrão.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>The following example shows an <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> for a simply named assembly with default culture.</source>
          <target state="translated">A exemplo a seguir mostra um <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> para um assembly nomeado simplesmente com a cultura padrão.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>The following example shows a fully specified reference for a strongly named assembly with culture "en".</source>
          <target state="translated">O exemplo a seguir mostra uma referência totalmente especificada para um assembly de nome forte com a cultura “en”.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>This example shows how to use various reflection classes to analyze the metadata contained in an assembly.</source>
          <target state="translated">Este exemplo mostra como usar várias classes de reflexão para analisar os metadados contidos em um assembly.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="T:System.Reflection.AssemblyName">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> class.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> class.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.#ctor">
          <source>The following example creates a dynamic assembly named <ph id="ph1">`MyAssembly.exe`</ph> and saves it to your hard disk.</source>
          <target state="translated">O exemplo a seguir cria um assembly dinâmico chamado <ph id="ph1">`MyAssembly.exe`</ph> e salva-o em seu disco rígido.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.#ctor">
          <source>After running the example, you can use the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept> to examine the assembly metadata.</source>
          <target state="translated">Depois de executar o exemplo, você pode usar o <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept> para examinar os metadados do assembly.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.#ctor(System.String)">
          <source>The display name of the assembly, as returned by the <ph id="ph1">&lt;see cref="P:System.Reflection.AssemblyName.FullName" /&gt;</ph> property.</source>
          <target state="translated">O nome de exibição do assembly, conforme retornado pela propriedade <ph id="ph1">&lt;see cref="P:System.Reflection.AssemblyName.FullName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> class with the specified display name.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> com o nome de exibição especificado.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.#ctor(System.String)">
          <source>The supplied <ph id="ph1">`assemblyName`</ph> is parsed, and the appropriate fields of the new <ph id="ph2">&lt;xref:System.Reflection.AssemblyName&gt;</ph> are initialized with values from the display name.</source>
          <target state="translated">Fornecido <ph id="ph1">`assemblyName`</ph> é analisada e os campos apropriados do novo <ph id="ph2">&lt;xref:System.Reflection.AssemblyName&gt;</ph> são inicializadas com os valores do nome de exibição.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.#ctor(System.String)">
          <source>This is the recommended way of parsing display names.</source>
          <target state="translated">Essa é a maneira recomendada de análise de nomes de exibição.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.#ctor(System.String)">
          <source>Writing your own code to parse display names is not recommended.</source>
          <target state="translated">Escrevendo seu próprio código para analisar os nomes de exibição não é recomendado.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.#ctor(System.String)">
          <source>The following example creates an instance of <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> from a display name.</source>
          <target state="translated">O exemplo a seguir cria uma instância de <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> de um nome para exibição.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.#ctor(System.String)">
          <source>The individual elements of the display name are output to the console as properties of the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> object.</source>
          <target state="translated">Os elementos individuais do nome para exibição são a saída para o console como propriedades do <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.#ctor(System.String)">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.#ctor(System.String)">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> is a zero length string.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> é uma cadeia de caracteres de tamanho zero.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.#ctor(System.String)">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id="p2">[</bpt>Portable Class Library<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch the base class exception, <ph id="ph1">&lt;see cref="T:System.IO.IOException" /&gt;</ph>, instead.</source>
          <target state="translated">Em vez disso, no <bpt id="p1">[</bpt>.NET para aplicativos da Windows Store<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> ou na <bpt id="p2">[</bpt>Biblioteca de Classes Portátil<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, capture a exceção de classe base, <ph id="ph1">&lt;see cref="T:System.IO.IOException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.#ctor(System.String)">
          <source>The referenced assembly could not be found, or could not be loaded.</source>
          <target state="translated">O assembly referenciado não pôde ser encontrado ou não pôde ser carregado.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.Clone">
          <source>Makes a copy of this <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> object.</source>
          <target state="translated">Faz uma cópia deste objeto <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.Clone">
          <source>An object that is a copy of this <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> object.</source>
          <target state="translated">Um objeto que é uma cópia deste objeto <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.Clone">
          <source>A new object is created, identical to the original.</source>
          <target state="translated">Um novo objeto é criado, idêntico ao valor original.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.CodeBase">
          <source>Gets or sets the location of the assembly as a URL.</source>
          <target state="translated">Obtém ou define o local do assembly como uma URL.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CodeBase">
          <source>A string that is the URL location of the assembly.</source>
          <target state="translated">Uma cadeia de caracteres que é o local da URL do assembly.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CodeBase">
          <source>When an assembly is loaded, this value can also be obtained using the <ph id="ph1">&lt;xref:System.Reflection.Assembly.CodeBase%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">Quando um assembly é carregado, esse valor também pode ser obtido usando o <ph id="ph1">&lt;xref:System.Reflection.Assembly.CodeBase%2A?displayProperty=nameWithType&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CodeBase">
          <source>If the assembly was loaded as a byte array, this property returns the location of the caller of the <ph id="ph1">&lt;xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%29&gt;</ph> method overload, not the location of the loaded assembly.</source>
          <target state="translated">Se o assembly foi carregado como uma matriz de bytes, essa propriedade retorna o local do chamador do <ph id="ph1">&lt;xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%29&gt;</ph> sobrecarga de método, não o local do assembly carregado.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CodeBase">
          <source>Do not use an <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> with only the <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.CodeBase%2A&gt;</ph> property set.</source>
          <target state="translated">Não use um <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> somente com o <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.CodeBase%2A&gt;</ph> conjunto de propriedades.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CodeBase">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.CodeBase%2A&gt;</ph> property does not supply any elements of the assembly identity (such as name or version), so loading does not occur according to load-by-identity rules, as you would expect from the <ph id="ph2">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.CodeBase%2A&gt;</ph> propriedade não fornece todos os elementos da identidade do assembly (como nome ou versão), então o carregar não ocorrerem de acordo com regras de carga por identidade, como se esperaria do <ph id="ph2">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CodeBase">
          <source>Instead, the assembly is loaded using load-from rules.</source>
          <target state="translated">Em vez disso, o assembly for carregado usando regras de carga.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CodeBase">
          <source>For information about the disadvantages of using the load-from context, see the <ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType&gt;</ph> method overload or <bpt id="p1">[</bpt>Best Practices for Assembly Loading<ept id="p1">](~/docs/framework/deployment/best-practices-for-assembly-loading.md)</ept>.</source>
          <target state="translated">Para obter informações sobre as desvantagens de usar o contexto de carga, consulte o <ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType&gt;</ph> sobrecarga de método ou <bpt id="p1">[</bpt>práticas recomendadas para o carregamento do Assembly<ept id="p1">](~/docs/framework/deployment/best-practices-for-assembly-loading.md)</ept>.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CodeBase">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">O exemplo a seguir emite um assembly dinâmico e salva-o no diretório atual.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CodeBase">
          <source>When the assembly is created, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.CodeBase%2A&gt;</ph> property is used to specify the directory where the assembly is saved.</source>
          <target state="translated">Quando o assembly é criado, o <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.CodeBase%2A&gt;</ph> propriedade é usada para especificar o diretório em que o assembly foi salvo.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.ContentType">
          <source>Gets or sets a value that indicates what type of content the assembly contains.</source>
          <target state="translated">Obtém ou define um valor que indica qual tipo de conteúdo o assembly contém.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.ContentType">
          <source>A value that indicates what type of content the assembly contains.</source>
          <target state="translated">Um valor que indica qual tipo de conteúdo o assembly contém.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.CultureInfo">
          <source>Gets or sets the culture supported by the assembly.</source>
          <target state="translated">Obtém ou define a cultura com suporte no assembly.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CultureInfo">
          <source>An object that represents the culture supported by the assembly.</source>
          <target state="translated">Um objeto que representa a cultura com suporte no assembly.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CultureInfo">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">O exemplo a seguir emite um assembly dinâmico e salva-o no diretório atual.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CultureInfo">
          <source>When the assembly is created, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.CultureInfo%2A&gt;</ph> property is used to specify the culture, which is part of the assembly's display name.</source>
          <target state="translated">Quando o assembly é criado, o <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.CultureInfo%2A&gt;</ph> propriedade é usada para especificar a cultura, o que faz parte do nome para exibição do assembly.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.CultureName">
          <source>Gets or sets the name of the culture associated with the assembly.</source>
          <target state="translated">Obtém ou define o nome da cultura associada ao assembly.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CultureName">
          <source>The culture name.</source>
          <target state="translated">O nome da cultura.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.EscapedCodeBase">
          <source>Gets the URI, including escape characters, that represents the codebase.</source>
          <target state="translated">Obtém o URI, incluindo caracteres de escape, que representa a base de código.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.EscapedCodeBase">
          <source>A URI with escape characters.</source>
          <target state="translated">Um URI com caracteres de escape.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.Flags">
          <source>Gets or sets the attributes of the assembly.</source>
          <target state="translated">Obtém ou define os atributos do assembly.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Flags">
          <source>A value that represents the attributes of the assembly.</source>
          <target state="translated">Um valor que representa os atributos do assembly.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Flags">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">O exemplo a seguir emite um assembly dinâmico e salva-o no diretório atual.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Flags">
          <source>When the assembly is created, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.Flags%2A&gt;</ph> property is used to specify that the assembly has a public key.</source>
          <target state="translated">Quando o assembly é criado, o <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.Flags%2A&gt;</ph> propriedade é usada para especificar que o assembly tem uma chave pública.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.FullName">
          <source>Gets the full name of the assembly, also known as the display name.</source>
          <target state="translated">Obtém o nome completo do assembly, também conhecido como o nome de exibição.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.FullName">
          <source>A string that is the full name of the assembly, also known as the display name.</source>
          <target state="translated">Uma cadeia de caracteres que é o nome completo do assembly, também conhecido como o nome de exibição.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.FullName">
          <source>The display name typically consists of the simple name, version number, supported culture, and public key.</source>
          <target state="translated">O nome de exibição consiste normalmente o nome simples, o número de versão, a cultura com suporte e a chave pública.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.FullName">
          <source>For example:</source>
          <target state="translated">Por exemplo:</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.FullName">
          <source>Writing your own code to parse display names is not recommended.</source>
          <target state="translated">Escrevendo seu próprio código para analisar os nomes de exibição não é recomendado.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.FullName">
          <source>Instead, pass the display name to the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.%23ctor%2A&gt;</ph> constructor, which parses it and populates the appropriate fields of the new <ph id="ph2">&lt;xref:System.Reflection.AssemblyName&gt;</ph>.</source>
          <target state="translated">Em vez disso, passe o nome de exibição para o <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.%23ctor%2A&gt;</ph> construtor, que analisa e preenche os campos apropriados do novo <ph id="ph2">&lt;xref:System.Reflection.AssemblyName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.FullName">
          <source>When an assembly is loaded, this value can also be obtained using the <ph id="ph1">&lt;xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">Quando um assembly é carregado, esse valor também pode ser obtido usando o <ph id="ph1">&lt;xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.FullName">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">O exemplo a seguir emite um assembly dinâmico e salva-o no diretório atual.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.FullName">
          <source>When the assembly is created, the code example sets the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.Name%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.Version%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.AssemblyName.CultureInfo%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> properties, which together comprise an assembly's full name, or display name.</source>
          <target state="translated">Quando o assembly é criado, o exemplo de código define o <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.Name%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.Version%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.AssemblyName.CultureInfo%2A&gt;</ph>, e <ph id="ph4">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> propriedades, que juntos compõem o nome completo de um assembly ou o nome de exibição.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.FullName">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.FullName%2A&gt;</ph> property is then used to retrieve the display name.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.FullName%2A&gt;</ph> propriedade é usada para recuperar o nome de exibição.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>The path for the assembly whose <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> is to be returned.</source>
          <target state="translated">O caminho para o assembly cujo <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> deve ser retornado.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> for a given file.</source>
          <target state="translated">Obtém o <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> para determinado arquivo.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>An object that represents the given assembly file.</source>
          <target state="translated">Um objeto que representa o arquivo de assembly especificado.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>This will only work if the file contains an assembly manifest.</source>
          <target state="translated">Isso só funcionará se o arquivo contém um manifesto do assembly.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>This method causes the file to be opened and closed, but the assembly is not added to this domain.</source>
          <target state="translated">Este método faz com que o arquivo seja aberto e fechado, mas o assembly não foi adicionado a este domínio.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>The following example gets the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> for an assembly on disk.</source>
          <target state="translated">O exemplo a seguir obtém o <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> para um assembly no disco.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>It will not run unless you replace the string "MyAssembly.exe" with the file name of an assembly (including the path, if necessary) on your hard disk.</source>
          <target state="translated">Ele não será executado, a menos que você substitua a cadeia de caracteres "MyAssembly.exe" com o nome do arquivo de um assembly (incluindo o caminho, se necessário) no disco rígido.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>Alternatively, you can compile this example as "MyAssembly.exe".</source>
          <target state="translated">Como alternativa, você pode compilar este exemplo como "MyAssembly.exe".</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> is invalid, such as an assembly with an invalid culture.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> é inválido, como um assembly com uma cultura inválida.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> is not found.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> não foi encontrado.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>The caller does not have path discovery permission.</source>
          <target state="translated">O chamador não tem permissão de descoberta de caminho.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> não é um assembly válido.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>An assembly or module was loaded twice with two different sets of evidence.</source>
          <target state="translated">Um assembly ou módulo foi carregado duas vezes com dois conjuntos de evidências.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>for access to information in the path.</source>
          <target state="translated">para acessar informações no caminho.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph>.</source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The object to be populated with serialization information.</source>
          <target state="translated">O objeto a ser populado com informações de serialização.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The destination context of the serialization.</source>
          <target state="translated">O contexto de destino da serialização.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Gets serialization information with all the data needed to recreate an instance of this <ph id="ph1">&lt;see langword="AssemblyName" /&gt;</ph>.</source>
          <target state="translated">Obtém informações de serialização com todos os dados necessários para recriar uma instância deste <ph id="ph1">&lt;see langword="AssemblyName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source><ph id="ph1">&lt;paramref name="info" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="info" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">Requer confiança total para o chamador imediato.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este membro não pode ser usado pelo código transparente ou parcialmente confiável.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetPublicKey">
          <source>Gets the public key of the assembly.</source>
          <target state="translated">Obtém a chave pública do assembly.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetPublicKey">
          <source>A byte array that contains the public key of the assembly.</source>
          <target state="translated">Uma matriz de bytes que contém a chave pública do assembly.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetPublicKey">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">O exemplo a seguir emite um assembly dinâmico e salva-o no diretório atual.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetPublicKey">
          <source>When the assembly is created, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph> method is used to give the assembly a public key.</source>
          <target state="translated">Quando o assembly é criado, o <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph> método é usado para fornecer uma chave pública de assembly.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetPublicKey">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.GetPublicKey%2A&gt;</ph> method is then used to retrieve the public key, which is displayed to the console.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.GetPublicKey%2A&gt;</ph> método é usado para recuperar a chave pública, que é exibida no console.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetPublicKey">
          <source>A public key was provided (for example, by using the <ph id="ph1">&lt;see cref="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])" /&gt;</ph> method), but no public key token was provided.</source>
          <target state="translated">Uma chave pública foi fornecida (por exemplo, usando o método <ph id="ph1">&lt;see cref="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])" /&gt;</ph>), mas nenhum token de chave pública foi fornecida.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetPublicKeyToken">
          <source>Gets the public key token, which is the last 8 bytes of the SHA-1 hash of the public key under which the application or assembly is signed.</source>
          <target state="translated">Obtém o token de chave pública, que é composto pelos últimos 8 bytes do hash SHA-1 da chave pública com a qual o aplicativo ou assembly é assinado.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetPublicKeyToken">
          <source>A byte array that contains the public key token.</source>
          <target state="translated">Uma matriz de bytes que contém o token de chave pública.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetPublicKeyToken">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">O exemplo a seguir emite um assembly dinâmico e salva-o no diretório atual.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetPublicKeyToken">
          <source>When the assembly is created, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKeyToken%2A&gt;</ph> method is used to set the assembly's public key token.</source>
          <target state="translated">Quando o assembly é criado, o <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKeyToken%2A&gt;</ph> método é usado para definir o token de chave pública do assembly.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetPublicKeyToken">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.GetPublicKeyToken%2A&gt;</ph> method is then used to retrieve the public key token, which is displayed to the console.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.GetPublicKeyToken%2A&gt;</ph> método é usado para recuperar o token de chave pública, que é exibido no console.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.HashAlgorithm">
          <source>Gets or sets the hash algorithm used by the assembly manifest.</source>
          <target state="translated">Obtém ou define o algoritmo de hash usado pelo manifesto do assembly.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.HashAlgorithm">
          <source>The hash algorithm used by the assembly manifest.</source>
          <target state="translated">O algoritmo de hash usado pelo manifesto do assembly.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.HashAlgorithm">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, the <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.HashAlgorithm%2A&gt;</ph> property of an <ph id="ph3">&lt;xref:System.Reflection.AssemblyName&gt;</ph> object that is returned by the <ph id="ph4">&lt;xref:System.Reflection.Assembly.GetReferencedAssemblies%2A?displayProperty=nameWithType&gt;</ph> method is <ph id="ph5">&lt;xref:System.Configuration.Assemblies.AssemblyHashAlgorithm.None?displayProperty=nameWithType&gt;</ph> if there is no hash algorithm for the referenced assembly, or if the hash algorithm of the referenced assembly is not identified by the <ph id="ph6">&lt;xref:System.Configuration.Assemblies.AssemblyHashAlgorithm?displayProperty=nameWithType&gt;</ph> enumeration.</source>
          <target state="translated">Começando com o <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, o <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.HashAlgorithm%2A&gt;</ph> propriedade de um <ph id="ph3">&lt;xref:System.Reflection.AssemblyName&gt;</ph> objeto que é retornado pelo <ph id="ph4">&lt;xref:System.Reflection.Assembly.GetReferencedAssemblies%2A?displayProperty=nameWithType&gt;</ph> método é <ph id="ph5">&lt;xref:System.Configuration.Assemblies.AssemblyHashAlgorithm.None?displayProperty=nameWithType&gt;</ph> se não houver nenhum algoritmo de hash para o assembly referenciado, ou se o algoritmo de hash do assembly referenciado não é identificado pelo <ph id="ph6">&lt;xref:System.Configuration.Assemblies.AssemblyHashAlgorithm?displayProperty=nameWithType&gt;</ph> enumeração.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.HashAlgorithm">
          <source>In previous versions of the .NET Framework, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.HashAlgorithm%2A&gt;</ph> property returned <ph id="ph2">&lt;xref:System.Configuration.Assemblies.AssemblyHashAlgorithm.SHA1?displayProperty=nameWithType&gt;</ph> in this situation.</source>
          <target state="translated">Em versões anteriores do .NET Framework, o <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.HashAlgorithm%2A&gt;</ph> propriedade retornada <ph id="ph2">&lt;xref:System.Configuration.Assemblies.AssemblyHashAlgorithm.SHA1?displayProperty=nameWithType&gt;</ph> nessa situação.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.HashAlgorithm">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">O exemplo a seguir emite um assembly dinâmico e salva-o no diretório atual.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.HashAlgorithm">
          <source>When the assembly is created, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.HashAlgorithm%2A&gt;</ph> property is used to set the hash algorithm for the assembly manifest.</source>
          <target state="translated">Quando o assembly é criado, o <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.HashAlgorithm%2A&gt;</ph> propriedade é usada para definir o algoritmo de hash para o manifesto do assembly.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.KeyPair">
          <source>Gets or sets the public and private cryptographic key pair that is used to create a strong name signature for the assembly.</source>
          <target state="translated">Obtém ou define o par de chaves de criptografia pública e privada usado para criar uma assinatura de nome forte para o assembly.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.KeyPair">
          <source>The public and private cryptographic key pair to be used to create a strong name for the assembly.</source>
          <target state="translated">O par de chaves de criptografia pública e privada a ser usado para criar um nome forte para o assembly.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.KeyPair">
          <source>When the runtime loads an assembly, it does not set the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> property.</source>
          <target state="translated">Quando um assembly é carregado o tempo de execução, ele não define o <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.KeyPair">
          <source>The getter for the property is only useful if the user set the property before using the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> object to create a dynamic assembly, and subsequently wants to retrieve the key pair.</source>
          <target state="translated">O getter da propriedade só é útil se o usuário definir a propriedade antes de usar o <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> de objeto para criar um assembly dinâmico e, posteriormente, quiser recuperar o par de chaves.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.KeyPair">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">O exemplo a seguir emite um assembly dinâmico e salva-o no diretório atual.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.KeyPair">
          <source>When the assembly is created, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> property is used to set the assembly's public and private cryptographic keys.</source>
          <target state="translated">Quando o assembly é criado, o <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> propriedade é usada para definir as chaves de criptografia públicas e privadas do assembly.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.KeyPair">
          <source>.</source>
          <target state="translated">.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.Name">
          <source>Gets or sets the simple name of the assembly.</source>
          <target state="translated">Obtém ou define o nome do assembly.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.Name">
          <source>This is usually, but not necessarily, the file name of the manifest file of the assembly, minus its extension.</source>
          <target state="translated">Este é geralmente, mas não necessariamente, o nome do arquivo de manifesto do assembly, menos a extensão.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Name">
          <source>The simple name of the assembly.</source>
          <target state="translated">O nome simples do assembly.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Name">
          <source>The manifest file is the file that contains the assembly manifest.</source>
          <target state="translated">O arquivo de manifesto é o arquivo que contém o manifesto do assembly.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Name">
          <source>For example, the simple name of a single-file assembly named "MyAssembly.dll" is "MyAssembly".</source>
          <target state="translated">Por exemplo, o nome simples de um assembly de arquivo único, chamado "MyAssembly" é "MyAssembly".</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Name">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">O exemplo a seguir emite um assembly dinâmico e salva-o no diretório atual.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Name">
          <source>When the assembly is created, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.Name%2A&gt;</ph> property is used to set the simple name of the dynamic assembly.</source>
          <target state="translated">Quando o assembly é criado, o <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.Name%2A&gt;</ph> propriedade é usada para definir o nome simples do assembly dinâmico.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.OnDeserialization(System.Object)">
          <source>The source of the deserialization event.</source>
          <target state="translated">A fonte do evento de desserialização.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.OnDeserialization(System.Object)">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.ISerializable" /&gt;</ph> interface and is called back by the deserialization event when deserialization is complete.</source>
          <target state="translated">Implementa a interface <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.ISerializable" /&gt;</ph> e é chamado novamente pelo evento de desserialização quando a desserialização é concluída.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.ProcessorArchitecture">
          <source>Gets or sets a value that identifies the processor and bits-per-word of the platform targeted by an executable.</source>
          <target state="translated">Obtém ou define um valor que identifica o processador e os bits por palavra da plataforma de destino de um executável.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.ProcessorArchitecture">
          <source>One of the enumeration values that identifies the processor and bits-per-word of the platform targeted by an executable.</source>
          <target state="translated">Um dos valores de enumeração que identifica o processador e os bits por palavra da plataforma de destino de um executável.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.ProcessorArchitecture">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, this property always returns <ph id="ph2">&lt;xref:System.Reflection.ProcessorArchitecture.None?displayProperty=nameWithType&gt;</ph> for reference assemblies.</source>
          <target state="translated">Começando com o <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, essa propriedade sempre retorna <ph id="ph2">&lt;xref:System.Reflection.ProcessorArchitecture.None?displayProperty=nameWithType&gt;</ph> para assemblies de referência.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.ReferenceMatchesDefinition(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
          <source>The reference assembly name.</source>
          <target state="translated">O nome do assembly de referência.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.ReferenceMatchesDefinition(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
          <source>The assembly name that is compared to the reference assembly.</source>
          <target state="translated">O nome do assembly que é comparado com o assembly de referência.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.ReferenceMatchesDefinition(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
          <source>Returns a value indicating whether two assembly names are the same.</source>
          <target state="translated">Retorna um valor que indica se dois nomes de assembly são os mesmos.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.ReferenceMatchesDefinition(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
          <source>The comparison is based on the simple assembly names.</source>
          <target state="translated">A comparação baseia-se nos nomes de assembly simples.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.ReferenceMatchesDefinition(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the simple assembly names are the same; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se os nomes de assembly simples forem os mesmos; caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.ReferenceMatchesDefinition(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
          <source>The comparison depends only on the simple assembly name.</source>
          <target state="translated">A comparação depende apenas o nome do assembly simples.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.ReferenceMatchesDefinition(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
          <source>It ignores version, culture, and public key token.</source>
          <target state="translated">Ele ignora versão, cultura e token de chave pública.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])">
          <source>A byte array containing the public key of the assembly.</source>
          <target state="translated">Uma matriz de bytes que contém a chave pública do assembly.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])">
          <source>Sets the public key identifying the assembly.</source>
          <target state="translated">Define a chave pública que identifica o assembly.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])">
          <source>You must also use the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKeyToken%2A&gt;</ph> method to provide a public key token.</source>
          <target state="translated">Você também deve usar o <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKeyToken%2A&gt;</ph> método para fornecer um token de chave pública.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])">
          <source>Otherwise, a <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> is thrown when the <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.GetPublicKey%2A&gt;</ph> method is called.</source>
          <target state="translated">Caso contrário, um <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> é gerada quando o <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.GetPublicKey%2A&gt;</ph> método é chamado.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">O exemplo a seguir emite um assembly dinâmico e salva-o no diretório atual.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])">
          <source>When the assembly is created, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph> method is used to give the assembly a public key.</source>
          <target state="translated">Quando o assembly é criado, o <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph> método é usado para fornecer uma chave pública de assembly.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.GetPublicKey%2A&gt;</ph> method is then used to retrieve the public key, which is displayed to the console.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.GetPublicKey%2A&gt;</ph> método é usado para recuperar a chave pública, que é exibida no console.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])">
          <source>A byte array containing the public key token of the assembly.</source>
          <target state="translated">Uma matriz de bytes que contém o token de chave pública do assembly.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])">
          <source>Sets the public key token, which is the last 8 bytes of the SHA-1 hash of the public key under which the application or assembly is signed.</source>
          <target state="translated">Define o token de chave pública, que é composto pelos últimos 8 bytes do hash SHA-1 da chave pública sob a qual o aplicativo ou assembly é assinado.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])">
          <source>When you set the public key by calling the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph> method, you must also use the <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.SetPublicKeyToken%2A&gt;</ph> method to provide a public key token.</source>
          <target state="translated">Quando você define a chave pública chamando o <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph> método, você também deve usar o <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.SetPublicKeyToken%2A&gt;</ph> método para fornecer um token de chave pública.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])">
          <source>Otherwise, a <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> is thrown when the <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.GetPublicKey%2A&gt;</ph> method is called.</source>
          <target state="translated">Caso contrário, um <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> é gerada quando o <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.GetPublicKey%2A&gt;</ph> método é chamado.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">O exemplo a seguir emite um assembly dinâmico e salva-o no diretório atual.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])">
          <source>When the assembly is created, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKeyToken%2A&gt;</ph> method is used to set the assembly's public key token.</source>
          <target state="translated">Quando o assembly é criado, o <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKeyToken%2A&gt;</ph> método é usado para definir o token de chave pública do assembly.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.GetPublicKeyToken%2A&gt;</ph> method is then used to retrieve the public key token, which is displayed to the console.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.GetPublicKeyToken%2A&gt;</ph> método é usado para recuperar o token de chave pública, que é exibido no console.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">Reservado para uso futuro.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">Deve ser IID_NULL.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Passed-in array of names to be mapped.</source>
          <target state="translated">Matriz passada de nomes a serem mapeados.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Count of the names to be mapped.</source>
          <target state="translated">Contagem dos nomes a serem mapeados.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale context in which to interpret the names.</source>
          <target state="translated">O contexto de localidade no qual interpretar os nomes.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Caller-allocated array that receives the IDs corresponding to the names.</source>
          <target state="translated">Matriz alocada pelo chamador que recebe os IDs correspondentes aos nomes.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Maps a set of names to a corresponding set of dispatch identifiers.</source>
          <target state="translated">Mapeia um conjunto de nomes para um conjunto correspondente de identificadores de expedição.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.</source>
          <target state="translated">Para obter mais informações sobre <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, consulte a Biblioteca MSDN.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">Não há suporte para acesso com associação tardia usando a interface <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> COM.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The type information to return.</source>
          <target state="translated">As informações de tipo a serem retornadas.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale identifier for the type information.</source>
          <target state="translated">O identificador de localidade das informações do tipo.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Receives a pointer to the requested type information object.</source>
          <target state="translated">Recebe um ponteiro para o objeto de informações de tipo solicitado.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Retrieves the type information for an object, which can then be used to get the type information for an interface.</source>
          <target state="translated">Recupera as informações do tipo de um objeto, que podem ser usadas para obter informações de tipo para uma interface.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.</source>
          <target state="translated">Para obter mais informações sobre <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, consulte a Biblioteca MSDN.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">Não há suporte para acesso com associação tardia usando a interface <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> COM.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfoCount(System.UInt32@)">
          <source>Points to a location that receives the number of type information interfaces provided by the object.</source>
          <target state="translated">Aponta para um local que recebe o número de interfaces de informações de tipo fornecido pelo objeto.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfoCount(System.UInt32@)">
          <source>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</source>
          <target state="translated">Retorna o número de interfaces de informações do tipo que um objeto fornece (0 ou 1).</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfoCount(System.UInt32@)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfoCount(System.UInt32@)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.</source>
          <target state="translated">Para obter mais informações sobre <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, consulte a Biblioteca MSDN.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfoCount(System.UInt32@)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">Não há suporte para acesso com associação tardia usando a interface <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> COM.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Identifies the member.</source>
          <target state="translated">Identifica o membro.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">Reservado para uso futuro.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">Deve ser IID_NULL.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The locale context in which to interpret arguments.</source>
          <target state="translated">O contexto de localidade no qual interpretar argumentos.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Flags describing the context of the call.</source>
          <target state="translated">Sinalizadores que descrevem o contexto da chamada.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure containing an array of arguments, an array of argument DispIDs for named arguments, and counts for the number of elements in the arrays.</source>
          <target state="translated">Ponteiro para uma estrutura que contém uma matriz de argumentos, uma matriz de DispIDs de argumentos para argumentos nomeados e contas para o número de elementos nas matrizes.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to the location where the result is to be stored.</source>
          <target state="translated">Ponteiro para o local onde o resultado deve ser armazenado.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure that contains exception information.</source>
          <target state="translated">Ponteiro para uma estrutura que contém informações de exceção.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The index of the first argument that has an error.</source>
          <target state="translated">O índice do primeiro argumento que tem um erro.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Provides access to properties and methods exposed by an object.</source>
          <target state="translated">Fornece acesso a propriedades e métodos expostos por um objeto.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::Invoke`</ph>, see the MSDN Library.</source>
          <target state="translated">Para obter mais informações sobre <ph id="ph1">`IDispatch::Invoke`</ph>, consulte a Biblioteca MSDN.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">Não há suporte para acesso com associação tardia usando a interface <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> COM.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.ToString">
          <source>Returns the full name of the assembly, also known as the display name.</source>
          <target state="translated">Retorna o nome completo do assembly, também conhecido como o nome de exibição.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.ToString">
          <source>The full name of the assembly, or the class name if the full name cannot be determined.</source>
          <target state="translated">O nome completo do assembly ou o nome de classe, se o nome completo não puder ser determinado.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.ToString">
          <source>See the description of <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> for the format of the returned string.</source>
          <target state="translated">Consulte a descrição do <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> para o formato de cadeia de caracteres retornada.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.ToString">
          <source>The following example gets an <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> object for a hypothetical <ph id="ph2">`MyAssembly.exe`</ph> assembly, and then uses the <ph id="ph3">&lt;xref:System.Reflection.AssemblyName.ToString%2A&gt;</ph> method to retrieve the full assembly name, or display name.</source>
          <target state="translated">O exemplo a seguir obtém um <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> objeto para um hipotético <ph id="ph2">`MyAssembly.exe`</ph> assembly e, em seguida, usa o <ph id="ph3">&lt;xref:System.Reflection.AssemblyName.ToString%2A&gt;</ph> método para recuperar o nome completo do assembly ou o nome para exibição.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.Version">
          <source>Gets or sets the major, minor, build, and revision numbers of the assembly.</source>
          <target state="translated">Obtém ou define os números principal, secundário, do build e da revisão do assembly.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source>An object that represents the major, minor, build, and revision numbers of the assembly.</source>
          <target state="translated">Um objeto que representa os números principal, secundário, do build e da revisão do assembly.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source>All components of the version must be integers greater than or equal to zero.</source>
          <target state="translated">Todos os componentes da versão devem ser números inteiros maiores ou iguais a zero.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source>Metadata restricts the major, minor, build, and revision components for an assembly to a maximum value of <ph id="ph1">&lt;xref:System.UInt16.MaxValue?displayProperty=nameWithType&gt;</ph> - 1.</source>
          <target state="translated">Metadados restringe o major, minor, compilação e componentes de revisão para um assembly como um valor máximo de <ph id="ph1">&lt;xref:System.UInt16.MaxValue?displayProperty=nameWithType&gt;</ph> - 1.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source>If a component exceeds this value, no error is thrown; however, in a dynamic assembly, that component is zero.</source>
          <target state="translated">Se um componente exceder esse valor, nenhum erro será lançado; No entanto, em um assembly dinâmico, esse componente é zero.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source>This section contains two examples.</source>
          <target state="translated">Esta seção contém dois exemplos.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source>The first example shows how to retrieve the version of the currently executing assembly.</source>
          <target state="translated">O primeiro exemplo mostra como recuperar a versão do assembly em execução no momento.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source>The second example shows how to use the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.Version%2A&gt;</ph> property to specify the assembly version when you emit a dynamic assembly.</source>
          <target state="translated">O segundo exemplo mostra como usar o <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.Version%2A&gt;</ph> propriedade para especificar a versão do assembly quando você emite um assembly dinâmico.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source><bpt id="p1">**</bpt>Example 1<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>Exemplo 1<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source>The following example retrieves and displays the version numbers of the currently executing assembly and the assembly that contains the <ph id="ph1">&lt;xref:System.String&gt;</ph> class.</source>
          <target state="translated">O exemplo a seguir recupera e exibe os números de versão do assembly em execução no momento e o assembly que contém o <ph id="ph1">&lt;xref:System.String&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source><bpt id="p1">**</bpt>Example 2<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>Exemplo 2<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">O exemplo a seguir emite um assembly dinâmico e salva-o no diretório atual.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source>When the assembly is created, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.Version%2A&gt;</ph> property is used to specify version information for the assembly.</source>
          <target state="translated">Quando o assembly é criado, o <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.Version%2A&gt;</ph> propriedade é usada para especificar as informações de versão do assembly.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.VersionCompatibility">
          <source>Gets or sets the information related to the assembly's compatibility with other assemblies.</source>
          <target state="translated">Obtém ou define as informações relacionadas à compatibilidade do assembly com outros assemblies.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.VersionCompatibility">
          <source>A value that represents information about the assembly's compatibility with other assemblies.</source>
          <target state="translated">Um valor que representa as informações sobre a compatibilidade do assembly com outros assemblies.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.VersionCompatibility">
          <source><ph id="ph1">&lt;xref:System.Reflection.AssemblyName.VersionCompatibility%2A&gt;</ph> information indicates, for example, that the assembly cannot execute side-by-side with other versions due to conflicts over a device driver.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.AssemblyName.VersionCompatibility%2A&gt;</ph> as informações indicam, por exemplo, que o assembly não é possível executar lado a lado com outras versões devido a conflitos em um driver de dispositivo.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.VersionCompatibility">
          <source>Currently, <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.VersionCompatibility%2A&gt;</ph> always returns <ph id="ph2">&lt;xref:System.Configuration.Assemblies.AssemblyVersionCompatibility.SameMachine?displayProperty=nameWithType&gt;</ph>, and is not used by the loader.</source>
          <target state="translated">Atualmente, <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.VersionCompatibility%2A&gt;</ph> sempre retorna <ph id="ph2">&lt;xref:System.Configuration.Assemblies.AssemblyVersionCompatibility.SameMachine?displayProperty=nameWithType&gt;</ph>e não é usado pelo carregador.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.VersionCompatibility">
          <source>This property is reserved for a future feature.</source>
          <target state="translated">Essa propriedade está reservada para futuro de recursos.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>