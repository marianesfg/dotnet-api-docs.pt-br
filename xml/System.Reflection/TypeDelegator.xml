<Type Name="TypeDelegator" FullName="System.Reflection.TypeDelegator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d0d8bd6a0ea6d364b353d886688bab5a142bbb2f" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36638403" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TypeDelegator : System.Reflection.TypeInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit TypeDelegator extends System.Reflection.TypeInfo" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.TypeDelegator" />
  <TypeSignature Language="VB.NET" Value="Public Class TypeDelegator&#xA;Inherits TypeInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class TypeDelegator : System::Reflection::TypeInfo" />
  <TypeSignature Language="F#" Value="type TypeDelegator = class&#xA;    inherit TypeInfo" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Reflection.TypeInfo</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="4c7cf-101">Encapsula um objeto <see cref="T:System.Type" /> e delega métodos a este <see langword="Type" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="4c7cf-101">Wraps a <see cref="T:System.Type" /> object and delegates methods to that <see langword="Type" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c7cf-102">Derivar desse tipo e substituir somente os membros que você precisa fornecer personalização no, além de todos os membros que são exigidos pelo seu programa e ainda não implementados por <xref:System.Reflection.TypeDelegator>.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-102">Derive from this type and override only those members you have to provide customization in, plus any members that are required by your program and not already implemented by <xref:System.Reflection.TypeDelegator>.</span></span>  
  
 <span data-ttu-id="4c7cf-103"><xref:System.Reflection.TypeDelegator> deriva <xref:System.Type?displayProperty=nameWithType> e implementa a maioria das propriedades e métodos de <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-103"><xref:System.Reflection.TypeDelegator> derives from <xref:System.Type?displayProperty=nameWithType> and implements most of the properties and methods of <xref:System.Type>.</span></span> <span data-ttu-id="4c7cf-104">Para cada membro que ele implementa, <xref:System.Reflection.TypeDelegator> automaticamente delega para o membro correspondente de interno <xref:System.Type> objeto, que é fornecido como um argumento para o construtor.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-104">For each member it implements, <xref:System.Reflection.TypeDelegator> automatically delegates to the corresponding member of an internal <xref:System.Type> object, which is supplied as an argument to the constructor.</span></span> <span data-ttu-id="4c7cf-105">Nesse interno <xref:System.Type> objeto é exposto para derivar classes pelo `protected` <xref:System.Reflection.TypeDelegator.typeImpl> campo.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-105">This internal <xref:System.Type> object is exposed to deriving classes by the `protected`<xref:System.Reflection.TypeDelegator.typeImpl> field.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4c7cf-106">Alguns membros do <xref:System.Reflection.TypeDelegator> têm implementações apesar dos próprios membros simplesmente são herdados de <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-106">Some members of <xref:System.Reflection.TypeDelegator> have implementations even though the members themselves are simply inherited from <xref:System.Type>.</span></span> <span data-ttu-id="4c7cf-107">Nesses casos, a implementação é fornecida por um substituído `protected` método que tem um nome que termina em "Implementação".</span><span class="sxs-lookup"><span data-stu-id="4c7cf-107">In these cases, the implementation is provided by an overridden `protected` method that has a name that ends in "Impl".</span></span> <span data-ttu-id="4c7cf-108">Por exemplo, a implementação para todas as sobrecargas do <xref:System.Reflection.TypeDelegator.GetMethods%2A> método é fornecido pelo substituído <xref:System.Reflection.TypeDelegator.GetMethodImpl%2A> método.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-108">For example, the implementation for all overloads of the <xref:System.Reflection.TypeDelegator.GetMethods%2A> method is supplied by the overridden <xref:System.Reflection.TypeDelegator.GetMethodImpl%2A> method.</span></span> <span data-ttu-id="4c7cf-109">A implementação para herdada propriedades, como <xref:System.Type.IsPublic%2A> e <xref:System.Type.IsNestedAssembly%2A> é fornecido pelo substituído <xref:System.Reflection.TypeDelegator.GetAttributeFlagsImpl%2A> método.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-109">The implementation for inherited properties such as <xref:System.Type.IsPublic%2A> and <xref:System.Type.IsNestedAssembly%2A> is provided by the overridden <xref:System.Reflection.TypeDelegator.GetAttributeFlagsImpl%2A> method.</span></span>  
  
 <span data-ttu-id="4c7cf-110">Derivando de classes pode fornecer um construtor público que leva um <xref:System.Type> objeto como seu parâmetro e simplesmente passa esse objeto para o <xref:System.Reflection.TypeDelegator.%23ctor%28System.Type%29> construtor, ou pode definir interno <xref:System.Type> objeto de outra forma.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-110">Deriving classes can provide a public constructor that takes a <xref:System.Type> object as its parameter and simply passes that object to the <xref:System.Reflection.TypeDelegator.%23ctor%28System.Type%29> constructor, or can set the internal <xref:System.Type> object in some other way.</span></span>  
  
 <span data-ttu-id="4c7cf-111">Se uma classe derivada usa um membro que não é implementado pelo <xref:System.Reflection.TypeDelegator>, ele deve substituir esse membro e fornecer uma implementação.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-111">If a deriving class uses a member that is not implemented by <xref:System.Reflection.TypeDelegator>, it must override that member and provide an implementation.</span></span> <span data-ttu-id="4c7cf-112">A implementação mais simples é chamar o membro correspondente no interno <xref:System.Type> objeto exposto pelo <xref:System.Reflection.TypeDelegator.typeImpl> campo, mas você pode fornecer qualquer implementação de seu aplicativo requer.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-112">The simplest implementation is to call the corresponding member on the internal <xref:System.Type> object exposed by the <xref:System.Reflection.TypeDelegator.typeImpl> field, but you can provide any implementation your application requires.</span></span> <span data-ttu-id="4c7cf-113">Não é necessário substituir esses membros se eles não são usados pelo seu aplicativo ou pela biblioteca de funções chamadas seu aplicativo (por exemplo, o <xref:System.CodeDom.CodeTypeReference.%23ctor%28System.Type%29?displayProperty=nameWithType> construtor).</span><span class="sxs-lookup"><span data-stu-id="4c7cf-113">It is not necessary to override these members if they are not used by your application or by library functions your application calls (for example, by the <xref:System.CodeDom.CodeTypeReference.%23ctor%28System.Type%29?displayProperty=nameWithType> constructor).</span></span>  
  
 <span data-ttu-id="4c7cf-114">Os seguintes métodos virtuais (`Overridable` métodos no Visual Basic) de <xref:System.Type> não são implementados por <xref:System.Reflection.TypeDelegator>: <xref:System.Type.MakeGenericType%2A>, <xref:System.Type.GetGenericTypeDefinition%2A>, <xref:System.Type.GetGenericArguments%2A>, <xref:System.Type.GetGenericParameterConstraints%2A>, <xref:System.Type.MakeArrayType%2A>, <xref:System.Type.MakeByRefType%2A>, <xref:System.Type.MakePointerType%2A> , <xref:System.Type.GetEnumNames%2A>, <xref:System.Type.GetEnumValues%2A>, <xref:System.Type.GetEnumUnderlyingType%2A>, <xref:System.Type.GetTypeCodeImpl%2A>, <xref:System.Type.IsEnumDefined%2A>, <xref:System.Type.IsEquivalentTo%2A>.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-114">The following virtual methods (`Overridable` methods in Visual Basic) of <xref:System.Type> are not implemented by <xref:System.Reflection.TypeDelegator>: <xref:System.Type.MakeGenericType%2A>, <xref:System.Type.GetGenericTypeDefinition%2A>, <xref:System.Type.GetGenericArguments%2A>, <xref:System.Type.GetGenericParameterConstraints%2A>, <xref:System.Type.MakeArrayType%2A>, <xref:System.Type.MakeByRefType%2A>, <xref:System.Type.MakePointerType%2A>, <xref:System.Type.GetEnumNames%2A>, <xref:System.Type.GetEnumValues%2A>, <xref:System.Type.GetEnumUnderlyingType%2A>, <xref:System.Type.GetTypeCodeImpl%2A>, <xref:System.Type.IsEnumDefined%2A>, <xref:System.Type.IsEquivalentTo%2A>.</span></span>  
  
 <span data-ttu-id="4c7cf-115">As seguintes propriedades virtuais (`Overridable` propriedades no Visual Basic) de <xref:System.Type> não são implementados por <xref:System.Reflection.TypeDelegator>: <xref:System.Type.IsGenericType%2A>, <xref:System.Type.IsGenericTypeDefinition%2A>, <xref:System.Type.IsGenericParameter%2A>, <xref:System.Type.ContainsGenericParameters%2A>, <xref:System.Type.DeclaringMethod%2A>, <xref:System.Type.GenericParameterAttributes%2A>, <xref:System.Type.GenericParameterPosition%2A> , <xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, <xref:System.Type.IsSecurityTransparent%2A>.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-115">The following virtual properties (`Overridable` properties in Visual Basic) of <xref:System.Type> are not implemented by <xref:System.Reflection.TypeDelegator>: <xref:System.Type.IsGenericType%2A>, <xref:System.Type.IsGenericTypeDefinition%2A>, <xref:System.Type.IsGenericParameter%2A>, <xref:System.Type.ContainsGenericParameters%2A>, <xref:System.Type.DeclaringMethod%2A>, <xref:System.Type.GenericParameterAttributes%2A>, <xref:System.Type.GenericParameterPosition%2A>, <xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, <xref:System.Type.IsSecurityTransparent%2A>.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4c7cf-116">Inicializa uma nova instância da classe <see cref="T:System.Reflection.TypeDelegator" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-116">Initializes a new instance of the <see cref="T:System.Reflection.TypeDelegator" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TypeDelegator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; TypeDelegator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4c7cf-117">Inicializa uma nova instância da classe <see cref="T:System.Reflection.TypeDelegator" /> com propriedades padrão.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-117">Initializes a new instance of the <see cref="T:System.Reflection.TypeDelegator" /> class with default properties.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TypeDelegator (Type delegatingType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type delegatingType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.#ctor(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (delegatingType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TypeDelegator(Type ^ delegatingType);" />
      <MemberSignature Language="F#" Value="new System.Reflection.TypeDelegator : Type -&gt; System.Reflection.TypeDelegator" Usage="new System.Reflection.TypeDelegator delegatingType" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="delegatingType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="delegatingType">
          <span data-ttu-id="4c7cf-118">A instância da classe <see cref="T:System.Type" /> que encapsula a chamada ao método de um objeto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-118">The instance of the class <see cref="T:System.Type" /> that encapsulates the call to the method of an object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4c7cf-119">Inicializa uma nova instância da classe <see cref="T:System.Reflection.TypeDelegator" />, especificando a instância encapsuladora.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-119">Initializes a new instance of the <see cref="T:System.Reflection.TypeDelegator" /> class specifying the encapsulating instance.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c7cf-120">Este construtor é chamado de uma classe para gerar um delegado com base no `Type` objeto para a classe que define o método.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-120">This constructor is called from a class to generate a delegate based upon the `Type` object for the class defining the method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4c7cf-121">
            <paramref name="delegatingType" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-121">
              <paramref name="delegatingType" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Assembly">
      <MemberSignature Language="C#" Value="public override System.Reflection.Assembly Assembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly Assembly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.TypeDelegator.Assembly" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Assembly As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::Assembly ^ Assembly { System::Reflection::Assembly ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Assembly : System.Reflection.Assembly" Usage="System.Reflection.TypeDelegator.Assembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4c7cf-122">Obtém o assembly do tipo implementado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-122">Gets the assembly of the implemented type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4c7cf-123">Um <see cref="T:System.Reflection.Assembly" /> objeto que representa o assembly do tipo implementado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-123">An <see cref="T:System.Reflection.Assembly" /> object representing the assembly of the implemented type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c7cf-124">Assemblies são as unidades de implantação no common language runtime.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-124">Assemblies are the deployment units in the common language runtime.</span></span> <span data-ttu-id="4c7cf-125">Assemblies de estabelecer o namespace para resolver solicitações e determinam quais recursos são expostos externamente e que são acessível a partir de dentro do assembly.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-125">Assemblies establish the namespace for resolving requests and determine which resources are exposed externally and which are accessible from within the assembly.</span></span> <span data-ttu-id="4c7cf-126">O common language runtime pode determinar e localizar o assembly para qualquer objeto em execução.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-126">The common language runtime can determine and locate the assembly for any running object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AssemblyQualifiedName">
      <MemberSignature Language="C#" Value="public override string AssemblyQualifiedName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AssemblyQualifiedName" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.TypeDelegator.AssemblyQualifiedName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AssemblyQualifiedName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ AssemblyQualifiedName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AssemblyQualifiedName : string" Usage="System.Reflection.TypeDelegator.AssemblyQualifiedName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4c7cf-127">Obtém o nome totalmente qualificado do assembly.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-127">Gets the assembly's fully qualified name.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4c7cf-128">Um <see langword="String" /> que contém o nome totalmente qualificado do assembly.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-128">A <see langword="String" /> containing the assembly's fully qualified name.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseType">
      <MemberSignature Language="C#" Value="public override Type BaseType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type BaseType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.TypeDelegator.BaseType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property BaseType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ BaseType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseType : Type" Usage="System.Reflection.TypeDelegator.BaseType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4c7cf-129">Obtém o tipo base para o tipo atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-129">Gets the base type for the current type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4c7cf-130">O tipo base para um tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-130">The base type for a type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c7cf-131">O tipo base é o tipo do qual esse tipo herda diretamente.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-131">The base type is the type from which this type directly inherits.</span></span> <span data-ttu-id="4c7cf-132">Desde o <xref:System.Object> tipo de classe é a classe base definitiva de todos os outros tipos, é o único tipo que não tem um tipo base.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-132">Since the <xref:System.Object> class type is the ultimate base class of all the other types, it is the only type that does not have a base type.</span></span> <span data-ttu-id="4c7cf-133">Nesse caso, `null` é retornado como o tipo base do `Object` tipo.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-133">In this case, `null` is returned as the base type of the `Object` type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FullName">
      <MemberSignature Language="C#" Value="public override string FullName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullName" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.TypeDelegator.FullName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property FullName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ FullName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FullName : string" Usage="System.Reflection.TypeDelegator.FullName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4c7cf-134">Obtém o nome totalmente qualificado do tipo implementado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-134">Gets the fully qualified name of the implemented type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4c7cf-135">Um <see langword="String" /> que contém o nome totalmente qualificado do tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-135">A <see langword="String" /> containing the type's fully qualified name.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c7cf-136">Uma cadeia de caracteres que contém o nome totalmente qualificado do atual `TypeDelegator`.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-136">A string containing the fully qualified name of the current `TypeDelegator`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttributeFlagsImpl">
      <MemberSignature Language="C#" Value="protected override System.Reflection.TypeAttributes GetAttributeFlagsImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Reflection.TypeAttributes GetAttributeFlagsImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetAttributeFlagsImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetAttributeFlagsImpl () As TypeAttributes" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Reflection::TypeAttributes GetAttributeFlagsImpl();" />
      <MemberSignature Language="F#" Value="override this.GetAttributeFlagsImpl : unit -&gt; System.Reflection.TypeAttributes" Usage="typeDelegator.GetAttributeFlagsImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeAttributes</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4c7cf-137">Obtém os atributos atribuídos ao <see langword="TypeDelegator" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-137">Gets the attributes assigned to the <see langword="TypeDelegator" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c7cf-138">Um objeto <see langword="TypeAttributes" /> que representa os sinalizadores de atributo da implementação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-138">A <see langword="TypeAttributes" /> object representing the implementation attribute flags.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c7cf-139">Esse método pode ser usado para determinar se o `TypeDelegator` é abstrato, público e assim por diante.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-139">This method can be used to determine if the `TypeDelegator` is abstract, public, and so on.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="GetConstructorImpl">
      <MemberSignature Language="C#" Value="protected override System.Reflection.ConstructorInfo GetConstructorImpl (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Reflection.ConstructorInfo GetConstructorImpl(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Reflection::ConstructorInfo ^ GetConstructorImpl(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="override this.GetConstructorImpl : System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.ConstructorInfo" Usage="typeDelegator.GetConstructorImpl (bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="4c7cf-140">Um bitmask que afeta a maneira pela qual a pesquisa é realizada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-140">A bitmask that affects the way in which the search is conducted.</span>
          </span>
          <span data-ttu-id="4c7cf-141">O valor é uma combinação de zero ou mais sinalizadores de bit de <see cref="T:System.Reflection.BindingFlags" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-141">The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="4c7cf-142">Um objeto que permite a associação, a coerção de tipos de argumento, a invocação de membros e a recuperação de objetos <see langword="MemberInfo" /> usando reflexão.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-142">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see langword="MemberInfo" /> objects using reflection.</span>
          </span>
          <span data-ttu-id="4c7cf-143">Se o <c>associador</c> for <see langword="null" />, o associador padrão será usado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-143">If <c>binder</c> is <see langword="null" />, the default binder is used.</span>
          </span>
        </param>
        <param name="callConvention">
          <span data-ttu-id="4c7cf-144">As convenções de chamada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-144">The calling conventions.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="4c7cf-145">Uma matriz do tipo <see langword="Type" /> que contém uma lista de tipos, o número do parâmetro e a ordem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-145">An array of type <see langword="Type" /> containing a list of the parameter number, order, and types.</span>
          </span>
          <span data-ttu-id="4c7cf-146">Os tipos não podem ser <see langword="null" />. Use o método <see langword="GetMethod" /> apropriado ou uma matriz vazia para pesquisar um método sem parâmetros.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-146">Types cannot be <see langword="null" />; use an appropriate <see langword="GetMethod" /> method or an empty array to search for a method without parameters.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="4c7cf-147">Uma matriz do tipo <see langword="ParameterModifier" /> que tem o mesmo comprimento da matriz <c>tipos</c>, cujos elementos representam os atributos associados aos parâmetros do método a ser obtido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-147">An array of type <see langword="ParameterModifier" /> having the same length as the <c>types</c> array, whose elements represent the attributes associated with the parameters of the method to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4c7cf-148">Obtém o construtor que implementou o <see langword="TypeDelegator" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-148">Gets the constructor that implemented the <see langword="TypeDelegator" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c7cf-149">Um objeto <see langword="ConstructorInfo" /> para o método que corresponde aos critérios especificados ou <see langword="null" />, se não for encontrada uma correspondência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-149">A <see langword="ConstructorInfo" /> object for the method that matches the specified criteria, or <see langword="null" /> if a match cannot be found.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c7cf-150">O `callConvention` parâmetro indica a convenção de chamada para o ponto de entrada.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-150">The `callConvention` parameter indicates the calling convention for the entry point.</span></span> <span data-ttu-id="4c7cf-151">Se nenhum convenção de chamada for especificada, um padrão <xref:System.Reflection.CallingConventions> valor `Standard` é usado.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-151">If no calling convention is specified, a default <xref:System.Reflection.CallingConventions> value of `Standard` is used.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.CallingConventions" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
      </Docs>
    </Member>
    <Member MemberName="GetConstructors">
      <MemberSignature Language="C#" Value="public override System.Reflection.ConstructorInfo[] GetConstructors (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.ConstructorInfo[] GetConstructors(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetConstructors(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetConstructors (bindingAttr As BindingFlags) As ConstructorInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::ConstructorInfo ^&gt; ^ GetConstructors(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="override this.GetConstructors : System.Reflection.BindingFlags -&gt; System.Reflection.ConstructorInfo[]" Usage="typeDelegator.GetConstructors bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="4c7cf-152">Um bitmask que afeta a maneira pela qual a pesquisa é realizada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-152">A bitmask that affects the way in which the search is conducted.</span>
          </span>
          <span data-ttu-id="4c7cf-153">O valor é uma combinação de zero ou mais sinalizadores de bit de <see cref="T:System.Reflection.BindingFlags" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-153">The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4c7cf-154">Retorna uma matriz de objetos <see cref="T:System.Reflection.ConstructorInfo" /> que representam os construtores definidos para o tipo encapsulado pelo <see cref="T:System.Reflection.TypeDelegator" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-154">Returns an array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing constructors defined for the type wrapped by the current <see cref="T:System.Reflection.TypeDelegator" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c7cf-155">Uma matriz do tipo <see langword="ConstructorInfo" /> que contém os construtores especificados definidos para esta classe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-155">An array of type <see langword="ConstructorInfo" /> containing the specified constructors defined for this class.</span>
          </span>
          <span data-ttu-id="4c7cf-156">Se nenhum construtor for definido, uma matriz vazia será retornada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-156">If no constructors are defined, an empty array is returned.</span>
          </span>
          <span data-ttu-id="4c7cf-157">Dependendo do valor de um parâmetro especificado, somente os construtores públicos ou públicos e não públicos serão retornados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-157">Depending on the value of a specified parameter, only public constructors or both public and non-public constructors will be returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c7cf-158">Inicializadores de classe estão disponíveis apenas por meio de `GetMember`, `GetMembers`, `FindMembers`, e `GetConstructors`.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-158">Class initializers are available only through `GetMember`, `GetMembers`, `FindMembers`, and `GetConstructors`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCustomAttributes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4c7cf-159">Retorna todos os atributos personalizados definidos para esse tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-159">Returns all the custom attributes defined for this type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override object[] GetCustomAttributes (bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object[] GetCustomAttributes(bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetCustomAttributes(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(bool inherit);" />
      <MemberSignature Language="F#" Value="override this.GetCustomAttributes : bool -&gt; obj[]" Usage="typeDelegator.GetCustomAttributes inherit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="inherit">
          <span data-ttu-id="4c7cf-160">Especifica se é necessário pesquisar a cadeia de herança desse tipo para encontrar os atributos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-160">Specifies whether to search this type's inheritance chain to find the attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4c7cf-161">Retorna todos os atributos personalizados definidos para esse tipo, especificando se é necessário pesquisar a cadeia de herança do tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-161">Returns all the custom attributes defined for this type, specifying whether to search the type's inheritance chain.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c7cf-162">Uma matriz de objetos que contém todos os atributos personalizados definidos para esse tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-162">An array of objects containing all the custom attributes defined for this type.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="4c7cf-163">Um tipo de atributo personalizado não pode ser carregado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-163">A custom attribute type cannot be loaded.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override object[] GetCustomAttributes (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetCustomAttributes(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (attributeType As Type, inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(Type ^ attributeType, bool inherit);" />
      <MemberSignature Language="F#" Value="override this.GetCustomAttributes : Type * bool -&gt; obj[]" Usage="typeDelegator.GetCustomAttributes (attributeType, inherit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">
          <span data-ttu-id="4c7cf-164">Uma matriz de atributos personalizados identificados por tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-164">An array of custom attributes identified by type.</span>
          </span>
        </param>
        <param name="inherit">
          <span data-ttu-id="4c7cf-165">Especifica se é necessário pesquisar a cadeia de herança desse tipo para encontrar os atributos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-165">Specifies whether to search this type's inheritance chain to find the attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4c7cf-166">Retorna uma matriz de atributos personalizados identificados por tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-166">Returns an array of custom attributes identified by type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c7cf-167">Uma matriz de objetos que contém os atributos personalizados definidos neste tipo que correspondem ao parâmetro <paramref name="attributeType" />, especificando se é necessário pesquisar a cadeia de herança do tipo ou <see langword="null" />, se nenhum atributo personalizado tiver sido definido nesse tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-167">An array of objects containing the custom attributes defined in this type that match the <paramref name="attributeType" /> parameter, specifying whether to search the type's inheritance chain, or <see langword="null" /> if no custom attributes are defined on this type.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4c7cf-168">
            <paramref name="attributeType" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-168">
              <paramref name="attributeType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="4c7cf-169">Um tipo de atributo personalizado não pode ser carregado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-169">A custom attribute type cannot be loaded.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetElementType">
      <MemberSignature Language="C#" Value="public override Type GetElementType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type GetElementType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetElementType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetElementType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ GetElementType();" />
      <MemberSignature Language="F#" Value="override this.GetElementType : unit -&gt; Type" Usage="typeDelegator.GetElementType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4c7cf-170">Retorna o <see cref="T:System.Type" /> do objeto contido ou referenciado pela matriz atual, ponteiro ou ByRef.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-170">Returns the <see cref="T:System.Type" /> of the object encompassed or referred to by the current array, pointer or ByRef.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c7cf-171">O <see cref="T:System.Type" /> do objeto contido ou referenciado pela matriz atual, ponteiro ou <see langword="ByRef" />, ou <see langword="null" />, se o <see cref="T:System.Type" /> atual não for uma matriz, um ponteiro ou um <see langword="ByRef" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-171">The <see cref="T:System.Type" /> of the object encompassed or referred to by the current array, pointer or <see langword="ByRef" />, or <see langword="null" /> if the current <see cref="T:System.Type" /> is not an array, a pointer or a <see langword="ByRef" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEvent">
      <MemberSignature Language="C#" Value="public override System.Reflection.EventInfo GetEvent (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.EventInfo GetEvent(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetEvent(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEvent (name As String, bindingAttr As BindingFlags) As EventInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::EventInfo ^ GetEvent(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="override this.GetEvent : string * System.Reflection.BindingFlags -&gt; System.Reflection.EventInfo" Usage="typeDelegator.GetEvent (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="4c7cf-172">O nome do evento a ser obtido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-172">The name of the event to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="4c7cf-173">Um bitmask que afeta a maneira pela qual a pesquisa é realizada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-173">A bitmask that affects the way in which the search is conducted.</span>
          </span>
          <span data-ttu-id="4c7cf-174">O valor é uma combinação de zero ou mais sinalizadores de bit de <see cref="T:System.Reflection.BindingFlags" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-174">The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4c7cf-175">Retorna o evento especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-175">Returns the specified event.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c7cf-176">Um objeto <see cref="T:System.Reflection.EventInfo" /> que representa o evento declarado ou herdado por esse tipo com o nome especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-176">An <see cref="T:System.Reflection.EventInfo" /> object representing the event declared or inherited by this type with the specified name.</span>
          </span>
          <span data-ttu-id="4c7cf-177">Esse método retornará <see langword="null" /> se nenhum evento do tipo for encontrado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-177">This method returns <see langword="null" /> if no such event is found.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c7cf-178">Se `bindingAttr` é <xref:System.Reflection.BindingFlags>.`IgnoreCase`, o caso do `name` parâmetro é ignorado.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-178">If `bindingAttr` is <xref:System.Reflection.BindingFlags>.`IgnoreCase`, the case of the `name` parameter is ignored.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4c7cf-179">O parâmetro <paramref name="name" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-179">The <paramref name="name" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEvents">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4c7cf-180">Retorna uma matriz de objetos <see cref="T:System.Reflection.EventInfo" /> que representam todos os eventos públicos declarado ou herdados pelo <see langword="TypeDelegator" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-180">Returns an array of <see cref="T:System.Reflection.EventInfo" /> objects representing all the public events declared or inherited by the current <see langword="TypeDelegator" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEvents">
      <MemberSignature Language="C#" Value="public override System.Reflection.EventInfo[] GetEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.EventInfo[] GetEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetEvents" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEvents () As EventInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::EventInfo ^&gt; ^ GetEvents();" />
      <MemberSignature Language="F#" Value="override this.GetEvents : unit -&gt; System.Reflection.EventInfo[]" Usage="typeDelegator.GetEvents " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4c7cf-181">Retorna uma matriz de objetos <see cref="T:System.Reflection.EventInfo" /> que representam todos os eventos públicos declarado ou herdados pelo <see langword="TypeDelegator" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-181">Returns an array of <see cref="T:System.Reflection.EventInfo" /> objects representing all the public events declared or inherited by the current <see langword="TypeDelegator" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c7cf-182">Retorna uma matriz do tipo <see langword="EventInfo" /> que contém todos os eventos declarados ou herdados pelo tipo atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-182">Returns an array of type <see langword="EventInfo" /> containing all the events declared or inherited by the current type.</span>
          </span>
          <span data-ttu-id="4c7cf-183">Se não houver eventos, uma matriz vazia será retornada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-183">If there are no events, an empty array is returned.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEvents">
      <MemberSignature Language="C#" Value="public override System.Reflection.EventInfo[] GetEvents (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.EventInfo[] GetEvents(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetEvents(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEvents (bindingAttr As BindingFlags) As EventInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::EventInfo ^&gt; ^ GetEvents(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="override this.GetEvents : System.Reflection.BindingFlags -&gt; System.Reflection.EventInfo[]" Usage="typeDelegator.GetEvents bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="4c7cf-184">Um bitmask que afeta a maneira pela qual a pesquisa é realizada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-184">A bitmask that affects the way in which the search is conducted.</span>
          </span>
          <span data-ttu-id="4c7cf-185">O valor é uma combinação de zero ou mais sinalizadores de bit de <see cref="T:System.Reflection.BindingFlags" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-185">The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4c7cf-186">Retorna os eventos especificados no <paramref name="bindingAttr" /> que são declarados ou herdados pelo <see langword="TypeDelegator" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-186">Returns the events specified in <paramref name="bindingAttr" /> that are declared or inherited by the current <see langword="TypeDelegator" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c7cf-187">Uma matriz do tipo <see langword="EventInfo" /> que contém os eventos especificados em <paramref name="bindingAttr" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-187">An array of type <see langword="EventInfo" /> containing the events specified in <paramref name="bindingAttr" />.</span>
          </span>
          <span data-ttu-id="4c7cf-188">Se não houver eventos, uma matriz vazia será retornada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-188">If there are no events, an empty array is returned.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetField">
      <MemberSignature Language="C#" Value="public override System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.FieldInfo GetField(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetField(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetField (name As String, bindingAttr As BindingFlags) As FieldInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::FieldInfo ^ GetField(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="override this.GetField : string * System.Reflection.BindingFlags -&gt; System.Reflection.FieldInfo" Usage="typeDelegator.GetField (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="4c7cf-189">O nome do campo a ser localizado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-189">The name of the field to find.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="4c7cf-190">Um bitmask que afeta a maneira pela qual a pesquisa é realizada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-190">A bitmask that affects the way in which the search is conducted.</span>
          </span>
          <span data-ttu-id="4c7cf-191">O valor é uma combinação de zero ou mais sinalizadores de bit de <see cref="T:System.Reflection.BindingFlags" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-191">The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4c7cf-192">Retorna um objeto <see cref="T:System.Reflection.FieldInfo" /> que representa o campo com o nome especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-192">Returns a <see cref="T:System.Reflection.FieldInfo" /> object representing the field with the specified name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c7cf-193">Um objeto <see langword="FieldInfo" /> que representa o campo declarado ou herdado por esse <see langword="TypeDelegator" /> com o nome especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-193">A <see langword="FieldInfo" /> object representing the field declared or inherited by this <see langword="TypeDelegator" /> with the specified name.</span>
          </span>
          <span data-ttu-id="4c7cf-194">Retornará <see langword="null" /> se esse campo não for encontrado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-194">Returns <see langword="null" /> if no such field is found.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c7cf-195">Use um `bindingAttr` de <xref:System.Reflection.BindingFlags>. Confidenciais para retornar todos os campos públicos e confidenciais.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-195">Use a `bindingAttr` of <xref:System.Reflection.BindingFlags>.NonPublic to return all public and nonpublic fields.</span></span> <span data-ttu-id="4c7cf-196">Use `BindingFlags.IgnoreCase` para ignorar o caso de campos, como a pesquisa diferencia maiusculas de minúsculas por padrão.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-196">Use `BindingFlags.IgnoreCase` to ignore the case of the fields, as the search is case-sensitive by default.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4c7cf-197">O parâmetro <paramref name="name" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-197">The <paramref name="name" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetFields">
      <MemberSignature Language="C#" Value="public override System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.FieldInfo[] GetFields(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetFields(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetFields (bindingAttr As BindingFlags) As FieldInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::FieldInfo ^&gt; ^ GetFields(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="override this.GetFields : System.Reflection.BindingFlags -&gt; System.Reflection.FieldInfo[]" Usage="typeDelegator.GetFields bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="4c7cf-198">Um bitmask que afeta a maneira pela qual a pesquisa é realizada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-198">A bitmask that affects the way in which the search is conducted.</span>
          </span>
          <span data-ttu-id="4c7cf-199">O valor é uma combinação de zero ou mais sinalizadores de bit de <see cref="T:System.Reflection.BindingFlags" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-199">The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4c7cf-200">Retorna uma matriz de objetos <see cref="T:System.Reflection.FieldInfo" /> que representa os campos de dados definidos para o tipo encapsulado pelo <see cref="T:System.Reflection.TypeDelegator" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-200">Returns an array of <see cref="T:System.Reflection.FieldInfo" /> objects representing the data fields defined for the type wrapped by the current <see cref="T:System.Reflection.TypeDelegator" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c7cf-201">Uma matriz do tipo <see langword="FieldInfo" /> que contém os campos declarados ou herdados pelo <see langword="TypeDelegator" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-201">An array of type <see langword="FieldInfo" /> containing the fields declared or inherited by the current <see langword="TypeDelegator" />.</span>
          </span>
          <span data-ttu-id="4c7cf-202">Uma matriz vazia será retornada se não houver campos correspondentes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-202">An empty array is returned if there are no matched fields.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c7cf-203">O <xref:System.Reflection.TypeDelegator.GetFields%2A> método não retornar campos em uma ordem específica, como em ordem alfabética ou ordem de declaração.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-203">The <xref:System.Reflection.TypeDelegator.GetFields%2A> method does not return fields in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="4c7cf-204">Seu código deve não dependam da ordem na qual os campos são retornados, como ordem pode variar.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-204">Your code must not depend on the order in which fields are returned, because that order can vary.</span></span>  
  
 <span data-ttu-id="4c7cf-205">Use um `bindingAttr` de <xref:System.Reflection.BindingFlags>. Confidenciais para retornar todos os campos públicos e confidenciais.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-205">Use a `bindingAttr` of <xref:System.Reflection.BindingFlags>.NonPublic to return all public and nonpublic fields.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInterface">
      <MemberSignature Language="C#" Value="public override Type GetInterface (string name, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type GetInterface(string name, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetInterface(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetInterface (name As String, ignoreCase As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ GetInterface(System::String ^ name, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="override this.GetInterface : string * bool -&gt; Type" Usage="typeDelegator.GetInterface (name, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="4c7cf-206">O nome totalmente qualificado da interface implementada pela classe atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-206">The fully qualified name of the interface implemented by the current class.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="4c7cf-207">
            <see langword="true" /> se o caso deve ser ignorado; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-207">
              <see langword="true" /> if the case is to be ignored; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4c7cf-208">Retorna a interface especificada implementada pelo tipo encapsulado pelo <see cref="T:System.Reflection.TypeDelegator" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-208">Returns the specified interface implemented by the type wrapped by the current <see cref="T:System.Reflection.TypeDelegator" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c7cf-209">Um objeto <see langword="Type" /> que representa a interface implementada (direta ou indiretamente) pela classe atual com o nome totalmente qualificado correspondente ao nome especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-209">A <see langword="Type" /> object representing the interface implemented (directly or indirectly) by the current class with the fully qualified name matching the specified name.</span>
          </span>
          <span data-ttu-id="4c7cf-210">Se nenhuma interface correspondente ao nome for encontrado, nulo será retornado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-210">If no interface that matches name is found, null is returned.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4c7cf-211">O parâmetro <paramref name="name" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-211">The <paramref name="name" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetInterfaceMap">
      <MemberSignature Language="C#" Value="public override System.Reflection.InterfaceMapping GetInterfaceMap (Type interfaceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Reflection.InterfaceMapping GetInterfaceMap(class System.Type interfaceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetInterfaceMap(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetInterfaceMap (interfaceType As Type) As InterfaceMapping" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::InterfaceMapping GetInterfaceMap(Type ^ interfaceType);" />
      <MemberSignature Language="F#" Value="override this.GetInterfaceMap : Type -&gt; System.Reflection.InterfaceMapping" Usage="typeDelegator.GetInterfaceMap interfaceType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.InterfaceMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interfaceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="interfaceType">
          <span data-ttu-id="4c7cf-212">O <see cref="T:System.Type" /> da interface da qual um mapeamento será recuperado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-212">The <see cref="T:System.Type" /> of the interface to retrieve a mapping of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4c7cf-213">Retorna um mapeamento de interface para o tipo de interface especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-213">Returns an interface mapping for the specified interface type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c7cf-214">Um objeto <see cref="T:System.Reflection.InterfaceMapping" /> que representa o mapeamento de interface para <paramref name="interfaceType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-214">An <see cref="T:System.Reflection.InterfaceMapping" /> object representing the interface mapping for <paramref name="interfaceType" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c7cf-215">O mapa de interface indica como uma interface é mapeada para os reais métodos em uma classe que implementa essa interface.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-215">The interface map denotes how an interface is mapped into the actual methods on a class that implements that interface.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.InterfaceMapping" />
      </Docs>
    </Member>
    <Member MemberName="GetInterfaces">
      <MemberSignature Language="C#" Value="public override Type[] GetInterfaces ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type[] GetInterfaces() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetInterfaces" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetInterfaces () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;Type ^&gt; ^ GetInterfaces();" />
      <MemberSignature Language="F#" Value="override this.GetInterfaces : unit -&gt; Type[]" Usage="typeDelegator.GetInterfaces " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4c7cf-216">Retorna todas as interfaces implementadas na classe atual e suas classes base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-216">Returns all the interfaces implemented on the current class and its base classes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c7cf-217">Uma matriz do tipo <see langword="Type" /> que contém todas as interfaces implementadas na classe atual e suas classes base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-217">An array of type <see langword="Type" /> containing all the interfaces implemented on the current class and its base classes.</span>
          </span>
          <span data-ttu-id="4c7cf-218">Se nenhum deles for definido, uma matriz vazia será retornada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-218">If none are defined, an empty array is returned.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public override System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.MemberInfo[] GetMember(string name, valuetype System.Reflection.MemberTypes type, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMember (name As String, type As MemberTypes, bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMember(System::String ^ name, System::Reflection::MemberTypes type, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="override this.GetMember : string * System.Reflection.MemberTypes * System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]" Usage="typeDelegator.GetMember (name, type, bindingAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="type" Type="System.Reflection.MemberTypes" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="4c7cf-219">O nome do membro a ser obtido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-219">The name of the member to get.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="4c7cf-220">Um bitmask que afeta a maneira pela qual a pesquisa é realizada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-220">A bitmask that affects the way in which the search is conducted.</span>
          </span>
          <span data-ttu-id="4c7cf-221">O valor é uma combinação de zero ou mais sinalizadores de bit de <see cref="T:System.Reflection.BindingFlags" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-221">The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="4c7cf-222">O tipo dos membros a serem obtidos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-222">The type of members to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4c7cf-223">Retorna os membros (propriedades, métodos, construtores, campos, eventos e tipos aninhados) especificados pelos <paramref name="name" />, <paramref name="type" /> e <paramref name="bindingAttr" /> determinados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-223">Returns members (properties, methods, constructors, fields, events, and nested types) specified by the given <paramref name="name" />, <paramref name="type" />, and <paramref name="bindingAttr" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c7cf-224">Uma matriz do tipo <see langword="MemberInfo" /> que contém todos os membros da classe atual e sua classe base que atendem aos critérios especificados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-224">An array of type <see langword="MemberInfo" /> containing all the members of the current class and its base class meeting the specified criteria.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c7cf-225">Se `bindingAttr` é <xref:System.Reflection.BindingFlags>. Confidenciais, todos os membros serão considerados.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-225">If `bindingAttr` is <xref:System.Reflection.BindingFlags>.NonPublic, all the members will be considered.</span></span> <span data-ttu-id="4c7cf-226">Se não houver nenhuma correspondência, uma matriz vazia será retornada.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-226">If there are no matches, an empty array is returned.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4c7cf-227">O parâmetro <paramref name="name" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-227">The <paramref name="name" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetMembers">
      <MemberSignature Language="C#" Value="public override System.Reflection.MemberInfo[] GetMembers (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.MemberInfo[] GetMembers(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetMembers(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMembers (bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMembers(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="override this.GetMembers : System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]" Usage="typeDelegator.GetMembers bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="4c7cf-228">Um bitmask que afeta a maneira pela qual a pesquisa é realizada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-228">A bitmask that affects the way in which the search is conducted.</span>
          </span>
          <span data-ttu-id="4c7cf-229">O valor é uma combinação de zero ou mais sinalizadores de bit de <see cref="T:System.Reflection.BindingFlags" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-229">The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4c7cf-230">Retorna os membros especificados por <paramref name="bindingAttr" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-230">Returns members specified by <paramref name="bindingAttr" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c7cf-231">Uma matriz do tipo <see langword="MemberInfo" /> que contém todos os membros da classe atual e suas classes base que atendem ao filtro <paramref name="bindingAttr" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-231">An array of type <see langword="MemberInfo" /> containing all the members of the current class and its base classes that meet the <paramref name="bindingAttr" /> filter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c7cf-232">Se `bindingAttr` é <xref:System.Reflection.BindingFlags>. Confidenciais, todos os membros serão considerados.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-232">If `bindingAttr` is <xref:System.Reflection.BindingFlags>.NonPublic, all the members will be considered.</span></span> <span data-ttu-id="4c7cf-233">Se não houver nenhuma correspondência, uma matriz vazia será retornada.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-233">If there are no matches, an empty array is returned.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethodImpl">
      <MemberSignature Language="C#" Value="protected override System.Reflection.MethodInfo GetMethodImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Reflection.MethodInfo GetMethodImpl(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Reflection::MethodInfo ^ GetMethodImpl(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="override this.GetMethodImpl : string * System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="typeDelegator.GetMethodImpl (name, bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="4c7cf-234">O nome do método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-234">The method name.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="4c7cf-235">Um bitmask que afeta a maneira pela qual a pesquisa é realizada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-235">A bitmask that affects the way in which the search is conducted.</span>
          </span>
          <span data-ttu-id="4c7cf-236">O valor é uma combinação de zero ou mais sinalizadores de bit de <see cref="T:System.Reflection.BindingFlags" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-236">The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="4c7cf-237">Um objeto que permite a associação, a coerção de tipos de argumento, a invocação de membros e a recuperação de objetos <see langword="MemberInfo" /> usando reflexão.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-237">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see langword="MemberInfo" /> objects using reflection.</span>
          </span>
          <span data-ttu-id="4c7cf-238">Se o <c>associador</c> for <see langword="null" />, o associador padrão será usado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-238">If <c>binder</c> is <see langword="null" />, the default binder is used.</span>
          </span>
        </param>
        <param name="callConvention">
          <span data-ttu-id="4c7cf-239">As convenções de chamada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-239">The calling conventions.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="4c7cf-240">Uma matriz do tipo <see langword="Type" /> que contém uma lista de tipos, o número do parâmetro e a ordem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-240">An array of type <see langword="Type" /> containing a list of the parameter number, order, and types.</span>
          </span>
          <span data-ttu-id="4c7cf-241">Os tipos não podem ser <see langword="null" />. Use o método <see langword="GetMethod" /> apropriado ou uma matriz vazia para pesquisar um método sem parâmetros.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-241">Types cannot be <see langword="null" />; use an appropriate <see langword="GetMethod" /> method or an empty array to search for a method without parameters.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="4c7cf-242">Uma matriz do tipo <see langword="ParameterModifier" /> que tem o mesmo comprimento da matriz <c>tipos</c>, cujos elementos representam os atributos associados aos parâmetros do método a ser obtido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-242">An array of type <see langword="ParameterModifier" /> having the same length as the <c>types</c> array, whose elements represent the attributes associated with the parameters of the method to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4c7cf-243">Pesquisa o método especificado cujos parâmetros correspondem aos tipos de argumento e modificadores especificados, usando as restrições de associação especificadas e a convenção de chamada especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-243">Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c7cf-244">Um objeto <see langword="MethodInfoInfo" /> para o método de implementação que corresponde aos critérios especificados ou <see langword="null" />, se não for encontrada uma correspondência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-244">A <see langword="MethodInfoInfo" /> object for the implementation method that matches the specified criteria, or <see langword="null" /> if a match cannot be found.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c7cf-245">O `callConvention` parâmetro indica a convenção de chamada para o ponto de entrada.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-245">The `callConvention` parameter indicates the calling convention for the entry point.</span></span> <span data-ttu-id="4c7cf-246">Se nenhum <xref:System.Reflection.CallingConventions> for especificado, um padrão `CallingConventions` valor `Standard` é usado.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-246">If no <xref:System.Reflection.CallingConventions> is specified, a default `CallingConventions` value of `Standard` is used.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.CallingConventions" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
      </Docs>
    </Member>
    <Member MemberName="GetMethods">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.MethodInfo[] GetMethods(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetMethods(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMethods (bindingAttr As BindingFlags) As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetMethods(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="override this.GetMethods : System.Reflection.BindingFlags -&gt; System.Reflection.MethodInfo[]" Usage="typeDelegator.GetMethods bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="4c7cf-247">Um bitmask que afeta a maneira pela qual a pesquisa é realizada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-247">A bitmask that affects the way in which the search is conducted.</span>
          </span>
          <span data-ttu-id="4c7cf-248">O valor é uma combinação de zero ou mais sinalizadores de bit de <see cref="T:System.Reflection.BindingFlags" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-248">The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4c7cf-249">Retorna uma matriz de objetos <see cref="T:System.Reflection.MethodInfo" /> que representam métodos especificados do tipo encapsulado pelo <see cref="T:System.Reflection.TypeDelegator" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-249">Returns an array of <see cref="T:System.Reflection.MethodInfo" /> objects representing specified methods of the type wrapped by the current <see cref="T:System.Reflection.TypeDelegator" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c7cf-250">Uma matriz de objetos <see langword="MethodInfo" /> que representam os métodos definidos nesse <see langword="TypeDelegator" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-250">An array of <see langword="MethodInfo" /> objects representing the methods defined on this <see langword="TypeDelegator" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNestedType">
      <MemberSignature Language="C#" Value="public override Type GetNestedType (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type GetNestedType(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetNestedType(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetNestedType (name As String, bindingAttr As BindingFlags) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ GetNestedType(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="override this.GetNestedType : string * System.Reflection.BindingFlags -&gt; Type" Usage="typeDelegator.GetNestedType (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="4c7cf-251">O nome do tipo aninhado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-251">The nested type's name.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="4c7cf-252">Um bitmask que afeta a maneira pela qual a pesquisa é realizada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-252">A bitmask that affects the way in which the search is conducted.</span>
          </span>
          <span data-ttu-id="4c7cf-253">O valor é uma combinação de zero ou mais sinalizadores de bit de <see cref="T:System.Reflection.BindingFlags" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-253">The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4c7cf-254">Retorna um tipo aninhado especificado por <paramref name="name" /> e em <paramref name="bindingAttr" /> que é declarados ou herdado pelo tipo representado pelo <see cref="T:System.Reflection.TypeDelegator" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-254">Returns a nested type specified by <paramref name="name" /> and in <paramref name="bindingAttr" /> that are declared or inherited by the type represented by the current <see cref="T:System.Reflection.TypeDelegator" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c7cf-255">Um objeto <see langword="Type" /> que representa o tipo aninhado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-255">A <see langword="Type" /> object representing the nested type.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4c7cf-256">O parâmetro <paramref name="name" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-256">The <paramref name="name" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetNestedTypes">
      <MemberSignature Language="C#" Value="public override Type[] GetNestedTypes (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type[] GetNestedTypes(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetNestedTypes(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetNestedTypes (bindingAttr As BindingFlags) As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;Type ^&gt; ^ GetNestedTypes(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="override this.GetNestedTypes : System.Reflection.BindingFlags -&gt; Type[]" Usage="typeDelegator.GetNestedTypes bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="4c7cf-257">Um bitmask que afeta a maneira pela qual a pesquisa é realizada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-257">A bitmask that affects the way in which the search is conducted.</span>
          </span>
          <span data-ttu-id="4c7cf-258">O valor é uma combinação de zero ou mais sinalizadores de bit de <see cref="T:System.Reflection.BindingFlags" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-258">The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4c7cf-259">Retorna os tipos aninhados especificados em <paramref name="bindingAttr" /> que são declarados ou herdados pelo tipo encapsulado pelo <see cref="T:System.Reflection.TypeDelegator" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-259">Returns the nested types specified in <paramref name="bindingAttr" /> that are declared or inherited by the type wrapped by the current <see cref="T:System.Reflection.TypeDelegator" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c7cf-260">Uma matriz do tipo <see langword="Type" /> que contém os tipos aninhados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-260">An array of type <see langword="Type" /> containing the nested types.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperties">
      <MemberSignature Language="C#" Value="public override System.Reflection.PropertyInfo[] GetProperties (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.PropertyInfo[] GetProperties(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetProperties(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetProperties (bindingAttr As BindingFlags) As PropertyInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::PropertyInfo ^&gt; ^ GetProperties(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="override this.GetProperties : System.Reflection.BindingFlags -&gt; System.Reflection.PropertyInfo[]" Usage="typeDelegator.GetProperties bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="4c7cf-261">Um bitmask que afeta a maneira pela qual a pesquisa é realizada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-261">A bitmask that affects the way in which the search is conducted.</span>
          </span>
          <span data-ttu-id="4c7cf-262">O valor é uma combinação de zero ou mais sinalizadores de bit de <see cref="T:System.Reflection.BindingFlags" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-262">The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4c7cf-263">Retorna uma matriz de objetos <see cref="T:System.Reflection.PropertyInfo" /> que representam as propriedades do tipo encapsulado pelo <see cref="T:System.Reflection.TypeDelegator" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-263">Returns an array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing properties of the type wrapped by the current <see cref="T:System.Reflection.TypeDelegator" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c7cf-264">Uma matriz de objetos <see langword="PropertyInfo" /> que representam propriedades definidas nesse <see langword="TypeDelegator" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-264">An array of <see langword="PropertyInfo" /> objects representing properties defined on this <see langword="TypeDelegator" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPropertyImpl">
      <MemberSignature Language="C#" Value="protected override System.Reflection.PropertyInfo GetPropertyImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Reflection.PropertyInfo GetPropertyImpl(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Reflection::PropertyInfo ^ GetPropertyImpl(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="override this.GetPropertyImpl : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo" Usage="typeDelegator.GetPropertyImpl (name, bindingAttr, binder, returnType, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="4c7cf-265">A propriedade a ser obtida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-265">The property to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="4c7cf-266">Um bitmask que afeta a maneira pela qual a pesquisa é realizada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-266">A bitmask that affects the way in which the search is conducted.</span>
          </span>
          <span data-ttu-id="4c7cf-267">O valor é uma combinação de zero ou mais sinalizadores de bit de <see cref="T:System.Reflection.BindingFlags" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-267">The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="4c7cf-268">Um objeto que permite a associação, a coerção de tipos de argumentos, invocação de membros e a recuperação de objetos <see langword="MemberInfo" /> por meio de reflexão.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-268">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see langword="MemberInfo" /> objects via reflection.</span>
          </span>
          <span data-ttu-id="4c7cf-269">Se o <c>associador</c> for <see langword="null" />, o associador padrão será usado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-269">If <c>binder</c> is <see langword="null" />, the default binder is used.</span>
          </span>
          <span data-ttu-id="4c7cf-270">Consulte <see cref="T:System.Reflection.Binder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-270">See <see cref="T:System.Reflection.Binder" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="4c7cf-271">O tipo de retorno da propriedade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-271">The return type of the property.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="4c7cf-272">Uma lista dos tipos de parâmetro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-272">A list of parameter types.</span>
          </span>
          <span data-ttu-id="4c7cf-273">A lista representa o número, a ordem e os tipos dos parâmetros.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-273">The list represents the number, order, and types of the parameters.</span>
          </span>
          <span data-ttu-id="4c7cf-274">Os tipos não podem ser nulos. Use o método <see langword="GetMethod" /> apropriado ou uma matriz vazia para pesquisar um método sem parâmetros.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-274">Types cannot be null; use an appropriate <see langword="GetMethod" /> method or an empty array to search for a method without parameters.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="4c7cf-275">Uma matriz que tem o mesmo comprimento dos tipos com elementos que representam os atributos associados aos parâmetros do método a ser obtido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-275">An array of the same length as types with elements that represent the attributes associated with the parameters of the method to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4c7cf-276">Quando substituído em uma classe derivada, pesquisa a propriedade especificada cujos parâmetros correspondem aos modificadores e tipos de argumento especificados, usando as restrições de associação especificadas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-276">When overridden in a derived class, searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c7cf-277">Um objeto <see cref="T:System.Reflection.PropertyInfo" /> para a propriedade que corresponde aos critérios especificados ou nulo, se não for encontrada uma correspondência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-277">A <see cref="T:System.Reflection.PropertyInfo" /> object for the property that matches the specified criteria, or null if a match cannot be found.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GUID">
      <MemberSignature Language="C#" Value="public override Guid GUID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid GUID" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.TypeDelegator.GUID" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property GUID As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Guid GUID { Guid get(); };" />
      <MemberSignature Language="F#" Value="member this.GUID : Guid" Usage="System.Reflection.TypeDelegator.GUID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4c7cf-278">Obtém o GUID (identificador global exclusivo) do tipo implementado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-278">Gets the GUID (globally unique identifier) of the implemented type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4c7cf-279">Uma GUID.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-279">A GUID.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c7cf-280">O GUID (identificador global exclusivo) é uma cadeia de caracteres de identificação exclusivo de 128 bits usada para identificar uma classe ou uma interface.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-280">The GUID (globally unique identifier) is a 128-bit unique identification string used to identify a class or an interface.</span></span> <span data-ttu-id="4c7cf-281">É útil principalmente para fins de interoperabilidade entre o Microsoft .NET Framework e COM.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-281">It is primarily useful for interoperability between the Microsoft .NET Framework and COM.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Guid" />
      </Docs>
    </Member>
    <Member MemberName="HasElementTypeImpl">
      <MemberSignature Language="C#" Value="protected override bool HasElementTypeImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool HasElementTypeImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.HasElementTypeImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function HasElementTypeImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool HasElementTypeImpl();" />
      <MemberSignature Language="F#" Value="override this.HasElementTypeImpl : unit -&gt; bool" Usage="typeDelegator.HasElementTypeImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4c7cf-282">Obtém um valor que indica se o <see cref="T:System.Type" /> atual contém ou se refere a outro tipo; ou seja, se o <see cref="T:System.Type" /> atual é uma matriz, um ponteiro ou um ByRef.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-282">Gets a value indicating whether the current <see cref="T:System.Type" /> encompasses or refers to another type; that is, whether the current <see cref="T:System.Type" /> is an array, a pointer or a ByRef.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c7cf-283">
            <see langword="true" /> se o <see cref="T:System.Type" /> for uma matriz, um ponteiro ou um ByRef; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-283">
              <see langword="true" /> if the <see cref="T:System.Type" /> is an array, a pointer or a ByRef; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public override object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args, valuetype System.Reflection.ParameterModifier[] modifiers, class System.Globalization.CultureInfo culture, string[] namedParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ InvokeMember(System::String ^ name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, System::Object ^ target, cli::array &lt;System::Object ^&gt; ^ args, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::String ^&gt; ^ namedParameters);" />
      <MemberSignature Language="F#" Value="override this.InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] * System.Reflection.ParameterModifier[] * System.Globalization.CultureInfo * string[] -&gt; obj" Usage="typeDelegator.InvokeMember (name, invokeAttr, binder, target, args, modifiers, culture, namedParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="namedParameters" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="4c7cf-284">O nome do membro a ser invocado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-284">The name of the member to invoke.</span>
          </span>
          <span data-ttu-id="4c7cf-285">Pode ser um construtor, um método, uma propriedade ou um campo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-285">This may be a constructor, method, property, or field.</span>
          </span>
          <span data-ttu-id="4c7cf-286">Se uma cadeia de caracteres vazia ("") for passada, o membro padrão será invocado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-286">If an empty string ("") is passed, the default member is invoked.</span>
          </span>
        </param>
        <param name="invokeAttr">
          <span data-ttu-id="4c7cf-287">O atributo de invocação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-287">The invocation attribute.</span>
          </span>
          <span data-ttu-id="4c7cf-288">Deve ser um dos seguintes <see cref="T:System.Reflection.BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="Static" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" /> ou <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-288">This must be one of the following <see cref="T:System.Reflection.BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="Static" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="4c7cf-289">É necessário especificar um atributo de invocação adequado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-289">A suitable invocation attribute must be specified.</span>
          </span>
          <span data-ttu-id="4c7cf-290">Caso um membro estático deva ser invocado, o sinalizador <see langword="Static" /> deverá ser definido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-290">If a static member is to be invoked, the <see langword="Static" /> flag must be set.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="4c7cf-291">Um objeto que permite a associação, a coerção de tipos de argumentos, invocação de membros e a recuperação de objetos <see langword="MemberInfo" /> por meio de reflexão.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-291">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see langword="MemberInfo" /> objects via reflection.</span>
          </span>
          <span data-ttu-id="4c7cf-292">Se o <c>associador</c> for <see langword="null" />, o associador padrão será usado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-292">If <c>binder</c> is <see langword="null" />, the default binder is used.</span>
          </span>
          <span data-ttu-id="4c7cf-293">Consulte <see cref="T:System.Reflection.Binder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-293">See <see cref="T:System.Reflection.Binder" />.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="4c7cf-294">O objeto no qual invocar o membro especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-294">The object on which to invoke the specified member.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="4c7cf-295">Uma matriz do tipo <see langword="Object" /> que contém o número, a ordem e os tipo dos parâmetros do membro a ser invocado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-295">An array of type <see langword="Object" /> that contains the number, order, and type of the parameters of the member to be invoked.</span>
          </span>
          <span data-ttu-id="4c7cf-296">Se <c>args</c> contiver um <see langword="Object" /> não inicializado, ele será considerado vazio, o que, com o associador padrão poderá ser ampliado para 0, 0,0 ou uma cadeia de caracteres.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-296">If <c>args</c> contains an uninitialized <see langword="Object" />, it is treated as empty, which, with the default binder, can be widened to 0, 0.0 or a string.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="4c7cf-297">Uma matriz do tipo <see langword="ParameterModifer" /> que tem o mesmo comprimento de <c>args</c>, com elementos que representam os atributos associados com os argumentos do membro a ser invocado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-297">An array of type <see langword="ParameterModifer" /> that is the same length as <c>args</c>, with elements that represent the attributes associated with the arguments of the member to be invoked.</span>
          </span>
          <span data-ttu-id="4c7cf-298">Um parâmetro com atributos associados a ele na assinatura do membro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-298">A parameter has attributes associated with it in the member's signature.</span>
          </span>
          <span data-ttu-id="4c7cf-299">Para ByRef, use <see langword="ParameterModifer.ByRef" /> e para none, use <see langword="ParameterModifer.None" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-299">For ByRef, use <see langword="ParameterModifer.ByRef" />, and for none, use <see langword="ParameterModifer.None" />.</span>
          </span>
          <span data-ttu-id="4c7cf-300">O associador padrão gera uma correspondência exata neles.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-300">The default binder does exact matching on these.</span>
          </span>
          <span data-ttu-id="4c7cf-301">Atributos como <see langword="In" /> e <see langword="InOut" /> não são usados na associação e podem ser exibidos usando <see langword="ParameterInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-301">Attributes such as <see langword="In" /> and <see langword="InOut" /> are not used in binding, and can be viewed using <see langword="ParameterInfo" />.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="4c7cf-302">Uma instância de <see langword="CultureInfo" /> usada para determinar a coerção de tipos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-302">An instance of <see langword="CultureInfo" /> used to govern the coercion of types.</span>
          </span>
          <span data-ttu-id="4c7cf-303">Por exemplo, isso é necessário para converter uma cadeia de caracteres que representa 1000 para um valor <see langword="Double" />, uma vez que 1000 é representado de forma diferente por diferentes culturas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-303">This is necessary, for example, to convert a string that represents 1000 to a <see langword="Double" /> value, since 1000 is represented differently by different cultures.</span>
          </span>
          <span data-ttu-id="4c7cf-304">Se <c>culture</c> for <see langword="null" />, a <see langword="CultureInfo" /> do <see langword="CultureInfo" /> do thread atual será usada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-304">If <c>culture</c> is <see langword="null" />, the <see langword="CultureInfo" /> for the current thread's <see langword="CultureInfo" /> is used.</span>
          </span>
        </param>
        <param name="namedParameters">
          <span data-ttu-id="4c7cf-305">Uma matriz do tipo <see langword="String" /> que contém os nomes de parâmetros correspondentes, começando no elemento zero, com a matriz <c>args</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-305">An array of type <see langword="String" /> containing parameter names that match up, starting at element zero, with the <c>args</c> array.</span>
          </span>
          <span data-ttu-id="4c7cf-306">Não deve haver espaços na matriz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-306">There must be no holes in the array.</span>
          </span>
          <span data-ttu-id="4c7cf-307">Se <c>args</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-307">If <c>args</c>.</span>
          </span>
          <span data-ttu-id="4c7cf-308">
            <see langword="Length" /> é maior que <c>namedParameters</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-308">
              <see langword="Length" /> is greater than <c>namedParameters</c>.</span>
          </span>
          <span data-ttu-id="4c7cf-309">
            <see langword="Length" />, os parâmetros restantes são preenchidos na ordem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-309">
              <see langword="Length" />, the remaining parameters are filled in order.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4c7cf-310">Invoca o membro especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-310">Invokes the specified member.</span>
          </span>
          <span data-ttu-id="4c7cf-311">O método a ser invocado deve ser acessível e fornecer a correspondência mais específica com a lista de argumentos especificada, sob as restrições dos atributos associadores e de invocação especificados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-311">The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the constraints of the specified binder and invocation attributes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c7cf-312">Um <see langword="Object" /> que representa o valor retornado do membro invocado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-312">An <see langword="Object" /> representing the return value of the invoked member.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c7cf-313">Um método será chamado se as seguintes condições forem verdadeiras:</span><span class="sxs-lookup"><span data-stu-id="4c7cf-313">A method will be invoked if both the following conditions are true:</span></span>  
  
-   <span data-ttu-id="4c7cf-314">O número de parâmetros na declaração de método é igual ao número de argumentos na lista de argumentos especificados (a menos que os argumentos padrão são definidos no membro).</span><span class="sxs-lookup"><span data-stu-id="4c7cf-314">The number of parameters in the method declaration equals the number of arguments in the specified argument list (unless default arguments are defined on the member).</span></span>  
  
-   <span data-ttu-id="4c7cf-315">O tipo de cada argumentos pode ser convertido pelo associador para o tipo do parâmetro.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-315">The type of each arguments can be converted by the binder to the type of the parameter.</span></span>  
  
 <span data-ttu-id="4c7cf-316">O associador encontrará todos os métodos correspondentes.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-316">The binder will find all the matching methods.</span></span> <span data-ttu-id="4c7cf-317">Esses métodos são encontrados com base no tipo de associação solicitada (`BindingFlags.MethodInvoke`, `BindingFlags.GetProperties`e assim por diante).</span><span class="sxs-lookup"><span data-stu-id="4c7cf-317">These methods are found based upon the type of binding requested (`BindingFlags.MethodInvoke`, `BindingFlags.GetProperties`, and so on).</span></span> <span data-ttu-id="4c7cf-318">O conjunto de métodos é filtrado pelo nome, número de argumentos e um conjunto de modificadores de pesquisa definidos associador.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-318">The set of methods is filtered by the name, number of arguments, and a set of search modifiers defined in the binder.</span></span>  
  
 <span data-ttu-id="4c7cf-319">Depois que o método for selecionado, ele será invocado.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-319">After the method is selected, it will be invoked.</span></span> <span data-ttu-id="4c7cf-320">Acessibilidade é verificada nesse ponto.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-320">Accessibility is checked at that point.</span></span> <span data-ttu-id="4c7cf-321">A pesquisa pode controlar qual conjunto de métodos são pesquisadas com base no atributo acessibilidade associado com o método.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-321">The search may control which set of methods are searched based upon the accessibility attribute associated with the method.</span></span> <span data-ttu-id="4c7cf-322">O <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType> método é responsável para selecionar o método a ser invocado.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-322">The <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType> method is responsible for selecting the method to be invoked.</span></span> <span data-ttu-id="4c7cf-323">O associador padrão seleciona a correspondência mais específica.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-323">The default binder selects the most specific match.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4c7cf-324">Restrições de acesso são ignoradas por código totalmente confiável.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-324">Access restrictions are ignored for fully trusted code.</span></span> <span data-ttu-id="4c7cf-325">Ou seja, propriedades, métodos, campos e construtores privados podem ser acessadas e invocados usando reflexão sempre que o código é totalmente confiável.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-325">That is, private constructors, methods, fields, and properties can be accessed and invoked using reflection whenever the code is fully trusted.</span></span>  
  
 <span data-ttu-id="4c7cf-326">Atualmente, `InvokeMember` executa a semântica de reflexão do Microsoft .NET Framework para cada tipo de objeto.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-326">Currently, `InvokeMember` performs the Microsoft .NET Framework reflection semantics for every type of object.</span></span>  
  
 <span data-ttu-id="4c7cf-327">Se o membro especificado por nome é uma matriz e o `BindingFlags.GetField` sinalizador é definido em `invokeAttr`, o `args` matriz Especifica os elementos cujos valores serão retornados.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-327">If the member specified by name is an array and the `BindingFlags.GetField` flag is set on `invokeAttr`, the `args` array specifies the elements whose values are to be returned.</span></span> <span data-ttu-id="4c7cf-328">Por exemplo, a seguinte chamada por meio de `Type` objeto `t` retorna o valor do primeiro elemento da matriz de cadeia de caracteres MyArray, que é um membro do objeto de chamada:</span><span class="sxs-lookup"><span data-stu-id="4c7cf-328">For example, the following call through `Type` object `t` returns the value of the first element of the string array MyArray, which is a member of the calling object:</span></span>  
  
 `String ret = (String) t.InvokeMember ("MyArray", BindingFlags.GetField, null, this, new Variant[]{0});`  
  
 <span data-ttu-id="4c7cf-329">Você pode usar `InvokeMember` para definir um ou mais elementos de uma matriz de membros.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-329">You can use `InvokeMember` to set one or more elements of a member array.</span></span> <span data-ttu-id="4c7cf-330">Todos os elementos são definidos com o mesmo valor.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-330">All elements are set to the same value.</span></span> <span data-ttu-id="4c7cf-331">O `args` matriz deve ser formatada da seguinte maneira:</span><span class="sxs-lookup"><span data-stu-id="4c7cf-331">The `args` array must be formatted as follows:</span></span>  
  
```  
{index1,  
    index2,, value}  
```  
  
 <span data-ttu-id="4c7cf-332">Por exemplo, para definir o primeiro membro do MyArray do exemplo anterior, a sintaxe é a seguinte:</span><span class="sxs-lookup"><span data-stu-id="4c7cf-332">For example, to set the first member of MyArray from the previous example, the syntax is as follows:</span></span>  
  
```csharp  
t.InvokeMember ("MyArray", BindingFlags.SetField, null, this, new  
    Variant[]{0,"Updated"});  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="IsArrayImpl">
      <MemberSignature Language="C#" Value="protected override bool IsArrayImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsArrayImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.IsArrayImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsArrayImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsArrayImpl();" />
      <MemberSignature Language="F#" Value="override this.IsArrayImpl : unit -&gt; bool" Usage="typeDelegator.IsArrayImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4c7cf-333">Retorna um valor que indica se o <see cref="T:System.Type" /> é uma matriz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-333">Returns a value that indicates whether the <see cref="T:System.Type" /> is an array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c7cf-334">
            <see langword="true" /> se <see cref="T:System.Type" /> for uma matriz. Caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-334">
              <see langword="true" /> if the <see cref="T:System.Type" /> is an array; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAssignableFrom">
      <MemberSignature Language="C#" Value="public override bool IsAssignableFrom (System.Reflection.TypeInfo typeInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsAssignableFrom(class System.Reflection.TypeInfo typeInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.IsAssignableFrom(System.Reflection.TypeInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsAssignableFrom(System::Reflection::TypeInfo ^ typeInfo);" />
      <MemberSignature Language="F#" Value="override this.IsAssignableFrom : System.Reflection.TypeInfo -&gt; bool" Usage="typeDelegator.IsAssignableFrom typeInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeInfo" Type="System.Reflection.TypeInfo" />
      </Parameters>
      <Docs>
        <param name="typeInfo">
          <span data-ttu-id="4c7cf-335">O tipo a ser verificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-335">The type to check.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4c7cf-336">Retorna um valor que indica se o tipo especificado pode ser atribuído a esse tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-336">Returns a value that indicates whether the specified type can be assigned to this type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c7cf-337">
            <see langword="true" /> se o tipo especificado puder ser atribuído a esse tipo; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-337">
              <see langword="true" /> if the specified type can be assigned to this type; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsByRefImpl">
      <MemberSignature Language="C#" Value="protected override bool IsByRefImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsByRefImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.IsByRefImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsByRefImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsByRefImpl();" />
      <MemberSignature Language="F#" Value="override this.IsByRefImpl : unit -&gt; bool" Usage="typeDelegator.IsByRefImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4c7cf-338">Retorna um valor que indica se o <see cref="T:System.Type" /> é passado por referência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-338">Returns a value that indicates whether the <see cref="T:System.Type" /> is passed by reference.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c7cf-339">
            <see langword="true" /> se o <see cref="T:System.Type" /> for aprovado por referência; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-339">
              <see langword="true" /> if the <see cref="T:System.Type" /> is passed by reference; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsByRefLike">
      <MemberSignature Language="C#" Value="public override bool IsByRefLike { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsByRefLike" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.TypeDelegator.IsByRefLike" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsByRefLike As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsByRefLike { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsByRefLike : bool" Usage="System.Reflection.TypeDelegator.IsByRefLike" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCOMObjectImpl">
      <MemberSignature Language="C#" Value="protected override bool IsCOMObjectImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsCOMObjectImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.IsCOMObjectImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsCOMObjectImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsCOMObjectImpl();" />
      <MemberSignature Language="F#" Value="override this.IsCOMObjectImpl : unit -&gt; bool" Usage="typeDelegator.IsCOMObjectImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4c7cf-340">Retorna um valor que indica se o <see cref="T:System.Type" /> é um objeto COM.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-340">Returns a value that indicates whether the <see cref="T:System.Type" /> is a COM object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c7cf-341">
            <see langword="true" /> se o <see cref="T:System.Type" /> for um objeto COM; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-341">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a COM object; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsConstructedGenericType">
      <MemberSignature Language="C#" Value="public override bool IsConstructedGenericType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsConstructedGenericType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.TypeDelegator.IsConstructedGenericType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsConstructedGenericType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsConstructedGenericType { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsConstructedGenericType : bool" Usage="System.Reflection.TypeDelegator.IsConstructedGenericType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4c7cf-342">Obtém um valor que indica se este objeto representa um tipo genérico construído.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-342">Gets a value that indicates whether this object represents a constructed generic type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4c7cf-343">
            <see langword="true" /> se este objeto representar um tipo genérico construído; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-343">
              <see langword="true" /> if this object represents a constructed generic type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public override bool IsDefined (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsDefined(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.IsDefined(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsDefined (attributeType As Type, inherit As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsDefined(Type ^ attributeType, bool inherit);" />
      <MemberSignature Language="F#" Value="override this.IsDefined : Type * bool -&gt; bool" Usage="typeDelegator.IsDefined (attributeType, inherit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">
          <span data-ttu-id="4c7cf-344">Especifica se é necessário pesquisar a cadeia de herança desse tipo para encontrar os atributos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-344">Specifies whether to search this type's inheritance chain to find the attributes.</span>
          </span>
        </param>
        <param name="inherit">
          <span data-ttu-id="4c7cf-345">Uma matriz de atributos personalizados identificados por tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-345">An array of custom attributes identified by type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4c7cf-346">Indica se um atributo personalizado identificado por <paramref name="attributeType" /> está definido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-346">Indicates whether a custom attribute identified by <paramref name="attributeType" /> is defined.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c7cf-347">
            <see langword="true" /> se um atributo personalizado identificado pelo <paramref name="attributeType" /> estiver definido; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-347">
              <see langword="true" /> if a custom attribute identified by <paramref name="attributeType" /> is defined; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4c7cf-348">
            <paramref name="attributeType" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-348">
              <paramref name="attributeType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.ReflectionTypeLoadException">
          <span data-ttu-id="4c7cf-349">O tipo de atributo personalizado não pode ser carregado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-349">The custom attribute type cannot be loaded.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsGenericMethodParameter">
      <MemberSignature Language="C#" Value="public override bool IsGenericMethodParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericMethodParameter" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.TypeDelegator.IsGenericMethodParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsGenericMethodParameter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericMethodParameter { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGenericMethodParameter : bool" Usage="System.Reflection.TypeDelegator.IsGenericMethodParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsGenericTypeParameter">
      <MemberSignature Language="C#" Value="public override bool IsGenericTypeParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericTypeParameter" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.TypeDelegator.IsGenericTypeParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsGenericTypeParameter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericTypeParameter { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGenericTypeParameter : bool" Usage="System.Reflection.TypeDelegator.IsGenericTypeParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPointerImpl">
      <MemberSignature Language="C#" Value="protected override bool IsPointerImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsPointerImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.IsPointerImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsPointerImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsPointerImpl();" />
      <MemberSignature Language="F#" Value="override this.IsPointerImpl : unit -&gt; bool" Usage="typeDelegator.IsPointerImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4c7cf-350">Retorna um valor que indica se o <see cref="T:System.Type" /> é um ponteiro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-350">Returns a value that indicates whether the <see cref="T:System.Type" /> is a pointer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c7cf-351">
            <see langword="true" /> se o <see cref="T:System.Type" /> for um ponteiro; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-351">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a pointer; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPrimitiveImpl">
      <MemberSignature Language="C#" Value="protected override bool IsPrimitiveImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsPrimitiveImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.IsPrimitiveImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsPrimitiveImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsPrimitiveImpl();" />
      <MemberSignature Language="F#" Value="override this.IsPrimitiveImpl : unit -&gt; bool" Usage="typeDelegator.IsPrimitiveImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4c7cf-352">Retorna um valor que indica se o <see cref="T:System.Type" /> é um dos tipos primitivos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-352">Returns a value that indicates whether the <see cref="T:System.Type" /> is one of the primitive types.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c7cf-353">
            <see langword="true" /> se o <see cref="T:System.Type" /> for um dos tipos primitivos; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-353">
              <see langword="true" /> if the <see cref="T:System.Type" /> is one of the primitive types; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSZArray">
      <MemberSignature Language="C#" Value="public override bool IsSZArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSZArray" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.TypeDelegator.IsSZArray" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSZArray As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSZArray { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSZArray : bool" Usage="System.Reflection.TypeDelegator.IsSZArray" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTypeDefinition">
      <MemberSignature Language="C#" Value="public override bool IsTypeDefinition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTypeDefinition" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.TypeDelegator.IsTypeDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsTypeDefinition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsTypeDefinition { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsTypeDefinition : bool" Usage="System.Reflection.TypeDelegator.IsTypeDefinition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValueTypeImpl">
      <MemberSignature Language="C#" Value="protected override bool IsValueTypeImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsValueTypeImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.IsValueTypeImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsValueTypeImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsValueTypeImpl();" />
      <MemberSignature Language="F#" Value="override this.IsValueTypeImpl : unit -&gt; bool" Usage="typeDelegator.IsValueTypeImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4c7cf-354">Retorna um valor que indica se o tipo é um tipo de valor, ou seja, não é uma classe ou uma interface.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-354">Returns a value that indicates whether the type is a value type; that is, not a class or an interface.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c7cf-355">
            <see langword="true" /> se o tipo é um tipo de valor; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-355">
              <see langword="true" /> if the type is a value type; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVariableBoundArray">
      <MemberSignature Language="C#" Value="public override bool IsVariableBoundArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVariableBoundArray" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.TypeDelegator.IsVariableBoundArray" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsVariableBoundArray As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsVariableBoundArray { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsVariableBoundArray : bool" Usage="System.Reflection.TypeDelegator.IsVariableBoundArray" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MetadataToken">
      <MemberSignature Language="C#" Value="public override int MetadataToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MetadataToken" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.TypeDelegator.MetadataToken" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MetadataToken As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int MetadataToken { int get(); };" />
      <MemberSignature Language="F#" Value="member this.MetadataToken : int" Usage="System.Reflection.TypeDelegator.MetadataToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4c7cf-356">Obtém um valor que identifica essa entidade em metadados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-356">Gets a value that identifies this entity in metadata.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4c7cf-357">Um valor que, em combinação com o módulo identifica exclusivamente essa entidade em metadados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-357">A value which, in combination with the module, uniquely identifies this entity in metadata.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c7cf-358">Os símbolos obtidos usando essa propriedade podem ser passados para a API de reflexão não gerenciada.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-358">The tokens obtained using this property can be passed to the unmanaged reflection API.</span></span> <span data-ttu-id="4c7cf-359">Para obter mais informações, consulte [API não gerenciada de reflexão](http://msdn.microsoft.com/library/0c5bb9de-0cf6-438d-ba47-134e6c775fb8).</span><span class="sxs-lookup"><span data-stu-id="4c7cf-359">For more information, see [Unmanaged Reflection API](http://msdn.microsoft.com/library/0c5bb9de-0cf6-438d-ba47-134e6c775fb8).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Module">
      <MemberSignature Language="C#" Value="public override System.Reflection.Module Module { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Module Module" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.TypeDelegator.Module" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Module As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::Module ^ Module { System::Reflection::Module ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Module : System.Reflection.Module" Usage="System.Reflection.TypeDelegator.Module" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4c7cf-360">Obtém o módulo que contém o tipo implementado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-360">Gets the module that contains the implemented type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4c7cf-361">Um <see cref="T:System.Reflection.Module" /> objeto que representa o módulo do tipo implementado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-361">A <see cref="T:System.Reflection.Module" /> object representing the module of the implemented type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c7cf-362">Um módulo é uma unidade pode ser carregada que pode conter declarações de tipo e implementações.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-362">A module is a loadable unit that can contain type declarations and implementations.</span></span> <span data-ttu-id="4c7cf-363">Módulos contêm informações suficientes para permitir o common language runtime para localizar todos os bits de implementação, quando o módulo é carregado.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-363">Modules contain enough information to enable the common language runtime to locate all implementation bits when the module is loaded.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public override string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.TypeDelegator.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Reflection.TypeDelegator.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4c7cf-364">Obtém o nome do tipo implementado, com o caminho removido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-364">Gets the name of the implemented type, with the path removed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4c7cf-365">Um <see langword="String" /> que contém o nome do tipo não qualificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-365">A <see langword="String" /> containing the type's non-qualified name.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c7cf-366">Uma cadeia de caracteres que contém o nome do `TypeDelegator` atual.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-366">A string containing the name of the current `TypeDelegator`.</span></span> <span data-ttu-id="4c7cf-367">Somente o nome simple, não o nome totalmente qualificado, é retornado.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-367">Only the simple name, not the fully qualified name, is returned.</span></span> <span data-ttu-id="4c7cf-368">Para obter o nome e o caminho, use <xref:System.Reflection.TypeDelegator.FullName%2A>.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-368">To get the name and the path, use <xref:System.Reflection.TypeDelegator.FullName%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public override string Namespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.TypeDelegator.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Namespace { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string" Usage="System.Reflection.TypeDelegator.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4c7cf-369">Obtém o namespace do tipo implementado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-369">Gets the namespace of the implemented type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4c7cf-370">Um <see langword="String" /> que contém o namespace do tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-370">A <see langword="String" /> containing the type's namespace.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c7cf-371">Essa propriedade obtém uma cadeia de caracteres que contém o namespace do atual `TypeDelegator`.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-371">This property gets a string containing the namespace of the current `TypeDelegator`.</span></span> <span data-ttu-id="4c7cf-372">Por exemplo, se o `TypeDelegator` é <xref:System.Reflection.TypeFilter>, o namespace retornado é <xref:System.Reflection>.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-372">For example, if the `TypeDelegator` is <xref:System.Reflection.TypeFilter>, the returned namespace is <xref:System.Reflection>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeHandle">
      <MemberSignature Language="C#" Value="public override RuntimeTypeHandle TypeHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.RuntimeTypeHandle TypeHandle" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.TypeDelegator.TypeHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property TypeHandle As RuntimeTypeHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property RuntimeTypeHandle TypeHandle { RuntimeTypeHandle get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeHandle : RuntimeTypeHandle" Usage="System.Reflection.TypeDelegator.TypeHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeTypeHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4c7cf-373">Obtém um identificador para a representação interna de metadados de um tipo implementado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-373">Gets a handle to the internal metadata representation of an implemented type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4c7cf-374">Um objeto <see langword="RuntimeTypeHandle" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-374">A <see langword="RuntimeTypeHandle" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c7cf-375">Um identificador de tipo é um valor inteiro exclusivo associado com cada tipo.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-375">A type handle is a unique integer value associated with each type.</span></span> <span data-ttu-id="4c7cf-376">O identificador é exclusivo durante o tempo de execução.</span><span class="sxs-lookup"><span data-stu-id="4c7cf-376">The handle is unique during the runtime.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.RuntimeTypeHandle" />
      </Docs>
    </Member>
    <Member MemberName="typeImpl">
      <MemberSignature Language="C#" Value="protected Type typeImpl;" />
      <MemberSignature Language="ILAsm" Value=".field family class System.Type typeImpl" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.TypeDelegator.typeImpl" />
      <MemberSignature Language="VB.NET" Value="Protected typeImpl As Type " />
      <MemberSignature Language="C++ CLI" Value="protected: Type ^ typeImpl;" />
      <MemberSignature Language="F#" Value="val mutable typeImpl : Type" Usage="System.Reflection.TypeDelegator.typeImpl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4c7cf-377">Um valor que indica informações de tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-377">A value indicating type information.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnderlyingSystemType">
      <MemberSignature Language="C#" Value="public override Type UnderlyingSystemType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type UnderlyingSystemType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.TypeDelegator.UnderlyingSystemType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property UnderlyingSystemType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ UnderlyingSystemType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UnderlyingSystemType : Type" Usage="System.Reflection.TypeDelegator.UnderlyingSystemType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4c7cf-378">Obtém o <see cref="T:System.Type" /> subjacente que representa o tipo implementado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-378">Gets the underlying <see cref="T:System.Type" /> that represents the implemented type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4c7cf-379">O tipo subjacente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c7cf-379">The underlying type.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>