<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IReflect.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5e4e9ce35ae51db5215ec0931c6460ac8367f47a6.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e4e9ce35ae51db5215ec0931c6460ac8367f47a6</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.IReflect">
          <source>Interoperates with the <bpt id="p1">[</bpt>IDispatch interface<ept id="p1">](http://msdn.microsoft.com/library/ebbff4bc-36b2-4861-9efa-ffa45e013eb5)</ept>.</source>
          <target state="translated">Interopera com a <bpt id="p1">[</bpt>interface IDispatch<ept id="p1">](http://msdn.microsoft.com/library/ebbff4bc-36b2-4861-9efa-ffa45e013eb5)</ept>.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.IReflect">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.IReflect&gt;</ph> interface is used to interoperate with the <bpt id="p1">[</bpt>IDispatch interface<ept id="p1">](http://msdn.microsoft.com/library/ebbff4bc-36b2-4861-9efa-ffa45e013eb5)</ept>.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Reflection.IReflect&gt;</ph> interface é usada para interagir com o <bpt id="p1">[</bpt>interface IDispatch<ept id="p1">](http://msdn.microsoft.com/library/ebbff4bc-36b2-4861-9efa-ffa45e013eb5)</ept>.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.IReflect">
          <source><ph id="ph1">&lt;xref:System.Reflection.IReflect&gt;</ph> defines a subset of the <ph id="ph2">&lt;xref:System.Type&gt;</ph> reflection methods.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.IReflect&gt;</ph> define um subconjunto de <ph id="ph2">&lt;xref:System.Type&gt;</ph> métodos de reflexão.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.IReflect">
          <source>Implementing this interface enables a type to customize its behavior when the object is being accessed from COM as an <ph id="ph1">`IDispatch`</ph> object.</source>
          <target state="translated">Implementar essa interface permite que um tipo personalizar seu comportamento quando o objeto está sendo acessado de COM, como um <ph id="ph1">`IDispatch`</ph> objeto.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.IReflect">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.CustomMarshalers.ExpandoToDispatchExMarshaler&gt;</ph> class can be used to marshal an object that implements <ph id="ph2">&lt;xref:System.Reflection.IReflect&gt;</ph> or <ph id="ph3">&lt;xref:System.Runtime.InteropServices.Expando.IExpando&gt;</ph> as a COM <ph id="ph4">`IDispatch`</ph> object, and vice versa.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Runtime.InteropServices.CustomMarshalers.ExpandoToDispatchExMarshaler&gt;</ph> classe pode ser usada para realizar marshaling de um objeto que implementa <ph id="ph2">&lt;xref:System.Reflection.IReflect&gt;</ph> ou <ph id="ph3">&lt;xref:System.Runtime.InteropServices.Expando.IExpando&gt;</ph> como uma COM <ph id="ph4">`IDispatch`</ph> objeto e vice-versa.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.GetField(System.String,System.Reflection.BindingFlags)">
          <source>The name of the field to find.</source>
          <target state="translated">O nome do campo a ser localizado.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.GetField(System.String,System.Reflection.BindingFlags)">
          <source>The binding attributes used to control the search.</source>
          <target state="translated">Os atributos de associação usados para controlar a pesquisa.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.GetField(System.String,System.Reflection.BindingFlags)">
          <source>Returns the <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> object that corresponds to the specified field and binding flag.</source>
          <target state="translated">Retorna o objeto <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> corresponde ao campo e sinalizador de associação especificados.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.GetField(System.String,System.Reflection.BindingFlags)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> object containing the field information for the named object that meets the search constraints specified in <ph id="ph2">&lt;paramref name="bindingAttr" /&gt;</ph>.</source>
          <target state="translated">Um objeto <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> que contém as informações de campo para o objeto nomeado que atende às restrições de pesquisa especificadas em <ph id="ph2">&lt;paramref name="bindingAttr" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.GetField(System.String,System.Reflection.BindingFlags)">
          <source>The object implements multiple fields with the same name.</source>
          <target state="translated">O objeto implementa vários campos com o mesmo nome.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.GetFields(System.Reflection.BindingFlags)">
          <source>The binding attributes used to control the search.</source>
          <target state="translated">Os atributos de associação usados para controlar a pesquisa.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.GetFields(System.Reflection.BindingFlags)">
          <source>Returns an array of <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> objects that correspond to all fields of the current class.</source>
          <target state="translated">Retorna uma matriz de objetos <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> que correspondem a todos os campos da classe atual.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.GetFields(System.Reflection.BindingFlags)">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> objects containing all the field information for this reflection object that meets the search constraints specified in <ph id="ph2">&lt;paramref name="bindingAttr" /&gt;</ph>.</source>
          <target state="translated">Uma matriz de objetos <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> que contêm todas as informações de campo para o objeto de reflexão que atende às restrições de pesquisa especificadas em <ph id="ph2">&lt;paramref name="bindingAttr" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.IReflect.GetFields(System.Reflection.BindingFlags)">
          <source>The match is based upon a name.</source>
          <target state="translated">A correspondência é baseada em um nome.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.IReflect.GetFields(System.Reflection.BindingFlags)">
          <source>Each field must have a unique name.</source>
          <target state="translated">Cada campo deve ter um nome exclusivo.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.IReflect.GetFields(System.Reflection.BindingFlags)">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType&gt;</ph> flag specifies that non-public methods are included in the search.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType&gt;</ph> sinalizador Especifica que os métodos não-públicos são incluídos na pesquisa.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.IReflect.GetFields(System.Reflection.BindingFlags)">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType&gt;</ph> flag specifies that public methods are included in the search.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType&gt;</ph> sinalizador Especifica que os métodos públicos são incluídos na pesquisa.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.GetMember(System.String,System.Reflection.BindingFlags)">
          <source>The name of the member to find.</source>
          <target state="translated">O nome do membro a ser localizado.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.GetMember(System.String,System.Reflection.BindingFlags)">
          <source>The binding attributes used to control the search.</source>
          <target state="translated">Os atributos de associação usados para controlar a pesquisa.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.GetMember(System.String,System.Reflection.BindingFlags)">
          <source>Retrieves an array of <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> objects corresponding to all public members or to all members that match a specified name.</source>
          <target state="translated">Recupera uma matriz de objetos <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> correspondentes a todos os membros públicos ou a todos os membros que correspondem a um nome especificado.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.GetMember(System.String,System.Reflection.BindingFlags)">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> objects matching the <ph id="ph2">&lt;paramref name="name" /&gt;</ph> parameter.</source>
          <target state="translated">Uma matriz de objetos <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> correspondentes ao parâmetro <ph id="ph2">&lt;paramref name="name" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.IReflect.GetMember(System.String,System.Reflection.BindingFlags)">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.IReflect.GetMember%2A&gt;</ph> method retrieves an array of <ph id="ph2">&lt;xref:System.Reflection.MemberInfo&gt;</ph> objects by using the name and binding attribute that correspond to all public members or to all members that match a specified name.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Reflection.IReflect.GetMember%2A&gt;</ph> método recupera uma matriz de <ph id="ph2">&lt;xref:System.Reflection.MemberInfo&gt;</ph> objetos usando o nome e o atributo de associação que correspondem a todos os membros públicos ou todos os membros que correspondem a um nome especificado.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.IReflect.GetMember(System.String,System.Reflection.BindingFlags)">
          <source>The case of the specified name is observed or ignored, as specified by <ph id="ph1">&lt;xref:System.Reflection.BindingFlags.IgnoreCase?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">No caso do nome especificado é observado ou ignorado, conforme especificado por <ph id="ph1">&lt;xref:System.Reflection.BindingFlags.IgnoreCase?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.GetMembers(System.Reflection.BindingFlags)">
          <source>The binding attributes used to control the search.</source>
          <target state="translated">Os atributos de associação usados para controlar a pesquisa.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.GetMembers(System.Reflection.BindingFlags)">
          <source>Retrieves an array of <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> objects that correspond either to all public members or to all members of the current class.</source>
          <target state="translated">Recupera uma matriz de objetos <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> correspondentes a todos os membros públicos ou a todos os membros da classe atual.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.GetMembers(System.Reflection.BindingFlags)">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> objects containing all the member information for this reflection object.</source>
          <target state="translated">Uma matriz de objetos <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> que contêm todas as informações de membro desse objeto de reflexão.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.IReflect.GetMembers(System.Reflection.BindingFlags)">
          <source>This method retrieves an array of <ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph> objects by using the binding attribute that corresponds either to all public members or to all members of the current class.</source>
          <target state="translated">Esse método retorna uma matriz de <ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph> objetos usando o atributo de associação que corresponde a todos os membros públicos ou para todos os membros da classe atual.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.IReflect.GetMembers(System.Reflection.BindingFlags)">
          <source>It returns an array of all of the members defined for this object.</source>
          <target state="translated">Retorna uma matriz de todos os membros definidos para esse objeto.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="T:System.Reflection.IReflect">
          <source>Retrieves a <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> object that corresponds to a specified method.</source>
          <target state="translated">Recupera um objeto <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> correspondente a um método especificado.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags)">
          <source>The name of the member to find.</source>
          <target state="translated">O nome do membro a ser localizado.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags)">
          <source>The binding attributes used to control the search.</source>
          <target state="translated">Os atributos de associação usados para controlar a pesquisa.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags)">
          <source>Retrieves a <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> object that corresponds to a specified method under specified search constraints.</source>
          <target state="translated">Recupera um objeto <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> que corresponde a um método especificado nas restrições de pesquisa especificadas.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> object containing the method information, with the match being based on the method name and search constraints specified in <ph id="ph2">&lt;paramref name="bindingAttr" /&gt;</ph>.</source>
          <target state="translated">Um objeto <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> que contém as informações do método, com a correspondência baseada no nome do método e nas restrições de pesquisa especificadas em <ph id="ph2">&lt;paramref name="bindingAttr" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags)">
          <source>The object implements multiple methods with the same name.</source>
          <target state="translated">O objeto implementa vários métodos com o mesmo nome.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
          <source>The name of the member to find.</source>
          <target state="translated">O nome do membro a ser localizado.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
          <source>The binding attributes used to control the search.</source>
          <target state="translated">Os atributos de associação usados para controlar a pesquisa.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
          <source>An object that implements <ph id="ph1">&lt;see cref="T:System.Reflection.Binder" /&gt;</ph>, containing properties related to this method.</source>
          <target state="translated">Um objeto que implementa <ph id="ph1">&lt;see cref="T:System.Reflection.Binder" /&gt;</ph>, contendo as propriedades relacionadas a este método.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
          <source>An array used to choose among overloaded methods.</source>
          <target state="translated">Uma matriz usada para escolher entre métodos sobrecarregados.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
          <source>An array of parameter modifiers used to make binding work with parameter signatures in which the types have been modified.</source>
          <target state="translated">Uma matriz de modificadores de parâmetro usados para fazer a associação funcionar com assinaturas de parâmetro nos quais os tipos foram modificados.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
          <source>Retrieves a <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> object corresponding to a specified method, using a <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> array to choose from among overloaded methods.</source>
          <target state="translated">Recupera um objeto <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> correspondente a um método especificado, usando uma matriz <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> para escolher entre métodos sobrecarregados.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
          <source>The requested method that matches all the specified parameters.</source>
          <target state="translated">O método solicitado que corresponde a todos os parâmetros especificados.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
          <source>The return value is a match based on the method name, <ph id="ph1">&lt;xref:System.Reflection.BindingFlags&gt;</ph> enum member, the kind of type conversion specified by the <ph id="ph2">`binder`</ph> parameter, the overload, and the <ph id="ph3">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> that describes the signature of the method.</source>
          <target state="translated">O valor de retorno é uma correspondência com base no nome do método, <ph id="ph1">&lt;xref:System.Reflection.BindingFlags&gt;</ph> membro de enumeração, o tipo de conversão de tipo especificado pelo <ph id="ph2">`binder`</ph> parâmetro, a sobrecarga e o <ph id="ph3">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> que descreve a assinatura do método.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
          <source>The object implements multiple methods with the same name.</source>
          <target state="translated">O objeto implementa vários métodos com o mesmo nome.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.GetMethods(System.Reflection.BindingFlags)">
          <source>The binding attributes used to control the search.</source>
          <target state="translated">Os atributos de associação usados para controlar a pesquisa.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.GetMethods(System.Reflection.BindingFlags)">
          <source>Retrieves an array of <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> objects with all public methods or all methods of the current class.</source>
          <target state="translated">Recupera uma matriz de objetos <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> com todos os métodos públicos ou todos os métodos da classe atual.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.GetMethods(System.Reflection.BindingFlags)">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> objects containing all the methods defined for this reflection object that meet the search constraints specified in <ph id="ph2">&lt;paramref name="bindingAttr" /&gt;</ph>.</source>
          <target state="translated">Uma matriz de objetos <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> que contêm todos os métodos definidos para esse objeto de reflexão que atende às restrições de pesquisa especificadas em <ph id="ph2">&lt;paramref name="bindingAttr" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.IReflect.GetMethods(System.Reflection.BindingFlags)">
          <source>The non-public attribute of <ph id="ph1">`bindingAttr`</ph> is indicated only if public methods are returned.</source>
          <target state="translated">O atributo não-públicos de <ph id="ph1">`bindingAttr`</ph> é indicada apenas se os métodos públicos são retornados.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.GetProperties(System.Reflection.BindingFlags)">
          <source>The binding attribute used to control the search.</source>
          <target state="translated">O atributo de associação usado para controlar a pesquisa.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.GetProperties(System.Reflection.BindingFlags)">
          <source>Retrieves an array of <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> objects corresponding to all public properties or to all properties of the current class.</source>
          <target state="translated">Recupera uma matriz de objetos <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> que correspondem a todas as propriedades públicas ou a todas as propriedades da classe atual.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.GetProperties(System.Reflection.BindingFlags)">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> objects for all the properties defined on the reflection object.</source>
          <target state="translated">Uma matriz de objetos <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> para todas as propriedades definidas no objeto de reflexão.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="T:System.Reflection.IReflect">
          <source>Retrieves a <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> object corresponding to a specified property.</source>
          <target state="translated">Recupera um objeto <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> correspondente a uma propriedade especificada.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags)">
          <source>The name of the property to find.</source>
          <target state="translated">O nome da propriedade a ser localizada.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags)">
          <source>The binding attributes used to control the search.</source>
          <target state="translated">Os atributos de associação usados para controlar a pesquisa.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags)">
          <source>Retrieves a <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> object corresponding to a specified property under specified search constraints.</source>
          <target state="translated">Recupera um objeto <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> que corresponde a uma propriedade especificada nas restrições de pesquisa especificadas.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> object for the located property that meets the search constraints specified in <ph id="ph2">&lt;paramref name="bindingAttr" /&gt;</ph>, or <ph id="ph3">&lt;see langword="null" /&gt;</ph> if the property was not located.</source>
          <target state="translated">Um objeto <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> para a propriedade localizada que atende às restrições de pesquisa especificadas em <ph id="ph2">&lt;paramref name="bindingAttr" /&gt;</ph> ou então <ph id="ph3">&lt;see langword="null" /&gt;</ph>, se a propriedade não foi localizada.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags)">
          <source>The object implements multiple fields with the same name.</source>
          <target state="translated">O objeto implementa vários campos com o mesmo nome.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>The name of the member to find.</source>
          <target state="translated">O nome do membro a ser localizado.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>The binding attribute used to control the search.</source>
          <target state="translated">O atributo de associação usado para controlar a pesquisa.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>An object that implements <ph id="ph1">&lt;see cref="T:System.Reflection.Binder" /&gt;</ph>, containing properties related to this method.</source>
          <target state="translated">Um objeto que implementa <ph id="ph1">&lt;see cref="T:System.Reflection.Binder" /&gt;</ph>, contendo as propriedades relacionadas a este método.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>The type of the property.</source>
          <target state="translated">O tipo da propriedade.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>An array used to choose among overloaded methods with the same name.</source>
          <target state="translated">Uma matriz usada para escolher entre métodos sobrecarregados com o mesmo nome.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>An array used to choose the parameter modifiers.</source>
          <target state="translated">Uma matriz usada para escolher os modificadores de parâmetro.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>Retrieves a <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> object that corresponds to a specified property with specified search constraints.</source>
          <target state="translated">Recupera um objeto <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> que corresponde a uma propriedade especificada com as restrições de pesquisa especificadas.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> object for the located property, if a property with the specified name was located in this reflection object, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the property was not located.</source>
          <target state="translated">Um objeto <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> para a propriedade localizada, se uma propriedade com o nome especificado foi localizada no objeto reflexão ou <ph id="ph2">&lt;see langword="null" /&gt;</ph>, se a propriedade não foi localizada.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>This method retrieves a <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object corresponding to a specified property under specified search constraints.</source>
          <target state="translated">Esse método recupera um <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> especificado de objeto correspondente a uma propriedade especificada em restrições de pesquisa.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>A type array is used to choose from among overloaded methods.</source>
          <target state="translated">Uma matriz de tipo é usada para escolher entre os métodos sobrecarregados.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>The name of the member to find.</source>
          <target state="translated">O nome do membro a ser localizado.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> invocation attributes.</source>
          <target state="translated">Um dos atributos de invocação de <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>The <bpt id="p1">&lt;c&gt;</bpt>invokeAttr<ept id="p1">&lt;/c&gt;</ept> parameter may be a constructor, method, property, or field.</source>
          <target state="translated">O parâmetro <bpt id="p1">&lt;c&gt;</bpt>invokeAttr<ept id="p1">&lt;/c&gt;</ept> pode ser um construtor, método, propriedade ou campo.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>A suitable invocation attribute must be specified.</source>
          <target state="translated">É necessário especificar um atributo de invocação adequado.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>Invoke the default member of a class by passing the empty string ("") as the name of the member.</source>
          <target state="translated">Invoque o membro padrão de uma classe, passando a cadeia de caracteres vazia ("") como o nome do membro.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> bit flags.</source>
          <target state="translated">Um dos sinalizadores de bit <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>Implements <ph id="ph1">&lt;see cref="T:System.Reflection.Binder" /&gt;</ph>, containing properties related to this method.</source>
          <target state="translated">Implementa <ph id="ph1">&lt;see cref="T:System.Reflection.Binder" /&gt;</ph>, contendo as propriedades relacionadas a este método.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>The object on which to invoke the specified member.</source>
          <target state="translated">O objeto no qual invocar o membro especificado.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>This parameter is ignored for static members.</source>
          <target state="translated">Esse parâmetro é ignorado para membros estáticos.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>An array of objects that contains the number, order, and type of the parameters of the member to be invoked.</source>
          <target state="translated">Esta é uma matriz de objetos que contém o número, a ordem e o tipo dos parâmetros do membro a ser invocado.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>This is an empty array if there are no parameters.</source>
          <target state="translated">Isso é uma matriz vazia se não há nenhum parâmetro.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Reflection.ParameterModifier" /&gt;</ph> objects.</source>
          <target state="translated">Uma matriz de objetos de <ph id="ph1">&lt;see cref="T:System.Reflection.ParameterModifier" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>This array has the same length as the <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept> parameter, representing the invoked member's argument attributes in the metadata.</source>
          <target state="translated">Essa matriz tem o mesmo tamanho que o parâmetro <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept>, que representa os atributos de argumento do membro invocado nos metadados.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>A parameter can have the following attributes: <ph id="ph1">&lt;see langword="pdIn" /&gt;</ph>, <ph id="ph2">&lt;see langword="pdOut" /&gt;</ph>, <ph id="ph3">&lt;see langword="pdRetval" /&gt;</ph>, <ph id="ph4">&lt;see langword="pdOptional" /&gt;</ph>, and <ph id="ph5">&lt;see langword="pdHasDefault" /&gt;</ph>.</source>
          <target state="translated">Um parâmetro pode ter os seguintes atributos: <ph id="ph1">&lt;see langword="pdIn" /&gt;</ph>, <ph id="ph2">&lt;see langword="pdOut" /&gt;</ph>, <ph id="ph3">&lt;see langword="pdRetval" /&gt;</ph>, <ph id="ph4">&lt;see langword="pdOptional" /&gt;</ph> e <ph id="ph5">&lt;see langword="pdHasDefault" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>These represent [In], [Out], [retval], [optional], and a default parameter, respectively.</source>
          <target state="translated">Eles representam [In], [Out], [retval], [optional] e um parâmetro padrão, respectivamente.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>These attributes are used by various interoperability services.</source>
          <target state="translated">Esses atributos são usados por diversos serviços de interoperabilidade.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>An instance of <ph id="ph1">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> used to govern the coercion of types.</source>
          <target state="translated">Uma instância de <ph id="ph1">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> usada para determinar a coerção de tipos.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>For example, <bpt id="p1">&lt;c&gt;</bpt>culture<ept id="p1">&lt;/c&gt;</ept> converts a <ph id="ph1">&lt;see langword="String" /&gt;</ph> that represents 1000 to a <ph id="ph2">&lt;see langword="Double" /&gt;</ph> value, since 1000 is represented differently by different cultures.</source>
          <target state="translated">Por exemplo, <bpt id="p1">&lt;c&gt;</bpt>culture<ept id="p1">&lt;/c&gt;</ept> converte um <ph id="ph1">&lt;see langword="String" /&gt;</ph> que representa 1000 para um valor <ph id="ph2">&lt;see langword="Double" /&gt;</ph>, uma vez que 1000 é representado de forma diferente por diferentes culturas.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>If this parameter is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the <ph id="ph2">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> for the current thread is used.</source>
          <target state="translated">Se esse parâmetro for <ph id="ph1">&lt;see langword="null" /&gt;</ph>, será usado o <ph id="ph2">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> para o thread atual.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>A <ph id="ph1">&lt;see langword="String" /&gt;</ph> array of parameters.</source>
          <target state="translated">Uma matriz <ph id="ph1">&lt;see langword="String" /&gt;</ph> de parâmetros.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>Invokes a specified member.</source>
          <target state="translated">Invoca um membro especificado.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>The specified member.</source>
          <target state="translated">O membro especificado.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the constraints of the specified binder and invocation attributes.</source>
          <target state="translated">O método a ser invocado deve ser acessível e fornecer a correspondência mais específica com a lista de argumentos especificada, sob as restrições dos atributos associadores e de invocação especificados.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>A method is invoked if the number of parameters in the method declaration equals the number of arguments in the specified argument list, and the type of each argument can be converted by the binder to the type of the parameter.</source>
          <target state="translated">Um método é invocado se o número de parâmetros na declaração de método é igual ao número de argumentos na lista de argumentos especificada e o tipo de cada argumento pode ser convertido pelo associador para o tipo do parâmetro.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>The array of parameter modifiers passed to the <ph id="ph1">&lt;xref:System.Reflection.IReflect.InvokeMember%2A&gt;</ph> method must contain a single parameter modifier.</source>
          <target state="translated">A matriz de modificadores de parâmetro passado para o <ph id="ph1">&lt;xref:System.Reflection.IReflect.InvokeMember%2A&gt;</ph> método deve conter um modificador de parâmetro único.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>Only the first parameter modifier is considered when determining which argument needs to be passed by reference when exposed to COM.</source>
          <target state="translated">Somente o modificador de parâmetro primeiro é considerado ao determinar o argumento deve ser passado por referência quando exposto a COM.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>The binder finds all matching methods, in accordance with the type of binding requested (<ph id="ph1">&lt;xref:System.Reflection.BindingFlags.InvokeMethod?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.IReflect.GetProperties%2A&gt;</ph>, and so on).</source>
          <target state="translated">O associador localiza todos os métodos de correspondência, de acordo com o tipo de associação solicitada (<ph id="ph1">&lt;xref:System.Reflection.BindingFlags.InvokeMethod?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.IReflect.GetProperties%2A&gt;</ph>e assim por diante).</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>The set of methods is filtered by the name, number of arguments, and a set of search modifiers defined in the binder.</source>
          <target state="translated">O conjunto de métodos é filtrado pelo nome, número de argumentos e um conjunto de modificadores de pesquisa definidos associador.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>After the method is selected, it is invoked, and accessibility is checked at that point.</source>
          <target state="translated">Depois que o método for selecionado, ele é chamado e acessibilidade é verificada pelo ponto.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>The search may control which set of methods is searched based upon the accessibility attribute associated with the method.</source>
          <target state="translated">A pesquisa pode controlar qual conjunto de métodos é pesquisado com base no atributo acessibilidade associado com o método.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source><ph id="ph1">&lt;xref:System.Reflection.Binder.BindToMethod%2A&gt;</ph> selects the method to be invoked.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.Binder.BindToMethod%2A&gt;</ph> Seleciona o método a ser invocado.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>The default binder selects the most specific match.</source>
          <target state="translated">O associador padrão seleciona a correspondência mais específica.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>Access restrictions are ignored for fully trusted code.</source>
          <target state="translated">Restrições de acesso são ignoradas por código totalmente confiável.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>That is, private constructors, methods, fields, and properties can be accessed and invoked through reflection whenever the code is fully trusted.</source>
          <target state="translated">Ou seja, propriedades, métodos, campos e construtores privados podem ser acessadas e invocadas pela reflexão sempre que o código é totalmente confiável.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>The following example obtains the value of the <ph id="ph1">&lt;xref:System.DateTime.Now%2A&gt;</ph> property.</source>
          <target state="translated">O exemplo a seguir obtém o valor de <ph id="ph1">&lt;xref:System.DateTime.Now%2A&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>More than one argument is specified for a field <ph id="ph1">&lt;see langword="set" /&gt;</ph>.</source>
          <target state="translated">Mais de um argumento é especificado para um campo <ph id="ph1">&lt;see langword="set" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>The field or property cannot be found.</source>
          <target state="translated">Não é possível encontrar o campo nem a propriedade.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>The method cannot be found.</source>
          <target state="translated">Não é possível localizar o método.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>A private member is invoked without the necessary <ph id="ph1">&lt;see cref="T:System.Security.Permissions.ReflectionPermission" /&gt;</ph>.</source>
          <target state="translated">Um membro privado é chamado sem a <ph id="ph1">&lt;see cref="T:System.Security.Permissions.ReflectionPermission" /&gt;</ph> necessária.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="P:System.Reflection.IReflect.UnderlyingSystemType">
          <source>Gets the underlying type that represents the <ph id="ph1">&lt;see cref="T:System.Reflection.IReflect" /&gt;</ph> object.</source>
          <target state="translated">Obtém o tipo subjacente que representa o objeto <ph id="ph1">&lt;see cref="T:System.Reflection.IReflect" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.IReflect.UnderlyingSystemType">
          <source>The underlying type that represents the <ph id="ph1">&lt;see cref="T:System.Reflection.IReflect" /&gt;</ph> object.</source>
          <target state="translated">O tipo subjacente que representa o <ph id="ph1">&lt;see cref="T:System.Reflection.IReflect" /&gt;</ph> objeto.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>