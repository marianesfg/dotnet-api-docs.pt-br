<Type Name="LicFileLicenseProvider" FullName="System.ComponentModel.LicFileLicenseProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="97635e5142bc67ca14121089014e3e185587f0a8" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39908447" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class LicFileLicenseProvider : System.ComponentModel.LicenseProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LicFileLicenseProvider extends System.ComponentModel.LicenseProvider" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.LicFileLicenseProvider" />
  <TypeSignature Language="VB.NET" Value="Public Class LicFileLicenseProvider&#xA;Inherits LicenseProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class LicFileLicenseProvider : System::ComponentModel::LicenseProvider" />
  <TypeSignature Language="F#" Value="type LicFileLicenseProvider = class&#xA;    inherit LicenseProvider" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.LicenseProvider</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="bb321-101">Fornece uma implementação de um <see cref="T:System.ComponentModel.LicenseProvider" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="bb321-101">Provides an implementation of a <see cref="T:System.ComponentModel.LicenseProvider" />.</span>
      </span>
      <span data-ttu-id="bb321-102">O provedor funciona de maneira semelhante ao modelo de licenciamento padrão do Microsoft .NET Framework.</span>
      <span class="sxs-lookup">
        <span data-stu-id="bb321-102">The provider works in a similar fashion to the Microsoft .NET Framework standard licensing model.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bb321-103">O <xref:System.ComponentModel.LicFileLicenseProvider> oferece <xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A> e <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="bb321-103">The <xref:System.ComponentModel.LicFileLicenseProvider> offers <xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A> and <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> methods.</span></span> <span data-ttu-id="bb321-104">O <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> método determina se o <xref:System.ComponentModel.License.LicenseKey%2A> recuperados pelo <xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A> método é válido.</span><span class="sxs-lookup"><span data-stu-id="bb321-104">The <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> method determines whether the <xref:System.ComponentModel.License.LicenseKey%2A> retrieved by the <xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A> method is valid.</span></span> <span data-ttu-id="bb321-105">Quando você herda desta classe, você pode substituir o <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> método para fornecer sua própria lógica de validação.</span><span class="sxs-lookup"><span data-stu-id="bb321-105">When you inherit from this class, you can override the <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> method to provide your own validation logic.</span></span>  
  
 <span data-ttu-id="bb321-106">Esta classe existe para fornecer funcionalidade semelhante de licenciamento para o licenciamento de COM e usa arquivos de licença do texto.</span><span class="sxs-lookup"><span data-stu-id="bb321-106">This class exists to provide similar licensing functionality to COM licensing and uses text license files.</span></span>  
  
 <span data-ttu-id="bb321-107">Para obter mais informações sobre o licenciamento, consulte [como: licenciar componentes e controles](http://msdn.microsoft.com/library/8e66c1ed-a445-4b26-8185-990b6e2bbd57).</span><span class="sxs-lookup"><span data-stu-id="bb321-107">For more information on licensing, see [How to: License Components and Controls](http://msdn.microsoft.com/library/8e66c1ed-a445-4b26-8185-990b6e2bbd57).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bb321-108">O exemplo a seguir cria um controle licenciado usando o <xref:System.ComponentModel.LicenseManager.Validate%2A> método.</span><span class="sxs-lookup"><span data-stu-id="bb321-108">The following example creates a licensed control using the <xref:System.ComponentModel.LicenseManager.Validate%2A> method.</span></span> <span data-ttu-id="bb321-109">Ele usa <xref:System.ComponentModel.LicFileLicenseProvider> para o Gerenciador de licença.</span><span class="sxs-lookup"><span data-stu-id="bb321-109">It uses <xref:System.ComponentModel.LicFileLicenseProvider> for the license manager.</span></span>  
  
 [!code-cpp[Classic LicenseManager Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic LicenseManager Example/CPP/source.cpp#1)]
 [!code-csharp[Classic LicenseManager Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic LicenseManager Example/CS/source.cs#1)]
 [!code-vb[Classic LicenseManager Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic LicenseManager Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.License" />
    <altmember cref="T:System.ComponentModel.LicenseContext" />
    <altmember cref="T:System.ComponentModel.LicenseException" />
    <altmember cref="T:System.ComponentModel.LicenseManager" />
    <altmember cref="T:System.ComponentModel.LicenseProvider" />
    <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
    <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
    <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LicFileLicenseProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicFileLicenseProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LicFileLicenseProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="bb321-110">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.LicFileLicenseProvider" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb321-110">Initializes a new instance of the <see cref="T:System.ComponentModel.LicFileLicenseProvider" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.ComponentModel.License" />
        <altmember cref="T:System.ComponentModel.LicenseContext" />
        <altmember cref="T:System.ComponentModel.LicenseException" />
        <altmember cref="T:System.ComponentModel.LicenseManager" />
        <altmember cref="T:System.ComponentModel.LicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
        <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
      </Docs>
    </Member>
    <Member MemberName="GetKey">
      <MemberSignature Language="C#" Value="protected virtual string GetKey (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string GetKey(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicFileLicenseProvider.GetKey(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ GetKey(Type ^ type);" />
      <MemberSignature Language="F#" Value="abstract member GetKey : Type -&gt; string&#xA;override this.GetKey : Type -&gt; string" Usage="licFileLicenseProvider.GetKey type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="bb321-111">O tipo de objeto para retornar a chave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb321-111">The object type to return the key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bb321-112">Retorna uma chave para o tipo especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb321-112">Returns a key for the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bb321-113">Uma confirmação de que o parâmetro <paramref name="type" /> é licenciado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb321-113">A confirmation that the <paramref name="type" /> parameter is licensed.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.ComponentModel.License" />
        <altmember cref="T:System.ComponentModel.LicenseContext" />
        <altmember cref="T:System.ComponentModel.LicenseException" />
        <altmember cref="T:System.ComponentModel.LicenseManager" />
        <altmember cref="T:System.ComponentModel.LicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
        <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
      </Docs>
    </Member>
    <Member MemberName="GetLicense">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.License GetLicense (System.ComponentModel.LicenseContext context, Type type, object instance, bool allowExceptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.ComponentModel.License GetLicense(class System.ComponentModel.LicenseContext context, class System.Type type, object instance, bool allowExceptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::ComponentModel::License ^ GetLicense(System::ComponentModel::LicenseContext ^ context, Type ^ type, System::Object ^ instance, bool allowExceptions);" />
      <MemberSignature Language="F#" Value="override this.GetLicense : System.ComponentModel.LicenseContext * Type * obj * bool -&gt; System.ComponentModel.License" Usage="licFileLicenseProvider.GetLicense (context, type, instance, allowExceptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.License</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.LicenseContext" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="allowExceptions" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="context">
          <span data-ttu-id="bb321-114">Um <see cref="T:System.ComponentModel.LicenseContext" /> que especifica em que local você pode usar o objeto licenciado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb321-114">A <see cref="T:System.ComponentModel.LicenseContext" /> that specifies where you can use the licensed object.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="bb321-115">Um <see cref="T:System.Type" /> que representa o componente solicitando o <see cref="T:System.ComponentModel.License" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb321-115">A <see cref="T:System.Type" /> that represents the component requesting the <see cref="T:System.ComponentModel.License" />.</span>
          </span>
        </param>
        <param name="instance">
          <span data-ttu-id="bb321-116">Um objeto que solicita o <see cref="T:System.ComponentModel.License" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb321-116">An object that requests the <see cref="T:System.ComponentModel.License" />.</span>
          </span>
        </param>
        <param name="allowExceptions">
          <span data-ttu-id="bb321-117">
            <see langword="true" /> se um <see cref="T:System.ComponentModel.LicenseException" /> precisar ser gerado quando um componente não puder receber uma licença; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb321-117">
              <see langword="true" /> if a <see cref="T:System.ComponentModel.LicenseException" /> should be thrown when a component cannot be granted a license; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bb321-118">Retornará uma licença para a instância do componente, se houver uma disponível.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb321-118">Returns a license for the instance of the component, if one is available.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bb321-119">Uma <see cref="T:System.ComponentModel.License" /> válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb321-119">A valid <see cref="T:System.ComponentModel.License" />.</span>
          </span>
          <span data-ttu-id="bb321-120">Se esse método não puder localizar um <see cref="T:System.ComponentModel.License" /> válido ou um parâmetro <paramref name="context" /> válido, ele retornará <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb321-120">If this method cannot find a valid <see cref="T:System.ComponentModel.License" /> or a valid <paramref name="context" /> parameter, it returns <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bb321-121">Em tempo de design, o <xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A> método procura um arquivo de licença nomeado `myClassName.LIC`, onde `myClassName` é o <xref:System.Type.FullName%2A> de componente a ser criado.</span><span class="sxs-lookup"><span data-stu-id="bb321-121">At design time, the <xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A> method looks for a license file named `myClassName.LIC`, where `myClassName` is the <xref:System.Type.FullName%2A> of the component to create.</span></span> <span data-ttu-id="bb321-122">Esse arquivo deve estar no mesmo diretório que o arquivo. dll que contém o componente.</span><span class="sxs-lookup"><span data-stu-id="bb321-122">This file must be in the same directory as the .dll file that contains the component.</span></span>  
  
 <span data-ttu-id="bb321-123">Em seguida, esse método verifica a primeira linha do arquivo de licença em relação a uma chave especificada no <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> método.</span><span class="sxs-lookup"><span data-stu-id="bb321-123">Next, this method checks the first line of the license file against a key specified in the <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> method.</span></span> <span data-ttu-id="bb321-124">Se a chave for válida, essa linha será usada como o <xref:System.ComponentModel.License.LicenseKey%2A>.</span><span class="sxs-lookup"><span data-stu-id="bb321-124">If the key is valid, this line is used as the <xref:System.ComponentModel.License.LicenseKey%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.License" />
        <altmember cref="T:System.ComponentModel.LicenseContext" />
        <altmember cref="T:System.ComponentModel.LicenseException" />
        <altmember cref="T:System.ComponentModel.LicenseManager" />
        <altmember cref="T:System.ComponentModel.LicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
        <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyValid">
      <MemberSignature Language="C#" Value="protected virtual bool IsKeyValid (string key, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsKeyValid(string key, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicFileLicenseProvider.IsKeyValid(System.String,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool IsKeyValid(System::String ^ key, Type ^ type);" />
      <MemberSignature Language="F#" Value="abstract member IsKeyValid : string * Type -&gt; bool&#xA;override this.IsKeyValid : string * Type -&gt; bool" Usage="licFileLicenseProvider.IsKeyValid (key, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="bb321-125">O <see cref="P:System.ComponentModel.License.LicenseKey" /> a ser verificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb321-125">The <see cref="P:System.ComponentModel.License.LicenseKey" /> to check.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="bb321-126">Um <see cref="T:System.Type" /> que representa o componente solicitando o <see cref="T:System.ComponentModel.License" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb321-126">A <see cref="T:System.Type" /> that represents the component requesting the <see cref="T:System.ComponentModel.License" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bb321-127">Determina se a chave que o método <see cref="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)" /> recupera é válida para o tipo especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb321-127">Determines whether the key that the <see cref="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)" /> method retrieves is valid for the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bb321-128">
            <see langword="true" /> se a chave for um <see cref="P:System.ComponentModel.License.LicenseKey" /> válido para o tipo especificado; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb321-128">
              <see langword="true" /> if the key is a valid <see cref="P:System.ComponentModel.License.LicenseKey" /> for the specified type; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bb321-129">Esse método verifica a chave em relação a frase: " `myClassName is a licensed component.` ", onde `myClassName` é o <xref:System.Type.FullName%2A> do componente que você deseja criar.</span><span class="sxs-lookup"><span data-stu-id="bb321-129">This method checks the key against the phrase: " `myClassName is a licensed component.` ", where `myClassName` is the <xref:System.Type.FullName%2A> of the component you want to create.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="bb321-130">
            <para>Quando você herda desta classe, você pode substituir esse método para fornecer sua própria lógica de validação.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="bb321-130">
              <para>When you inherit from this class, you can override this method to provide your own validation logic.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.ComponentModel.License" />
        <altmember cref="T:System.ComponentModel.LicenseContext" />
        <altmember cref="T:System.ComponentModel.LicenseException" />
        <altmember cref="T:System.ComponentModel.LicenseManager" />
        <altmember cref="T:System.ComponentModel.LicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
        <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
      </Docs>
    </Member>
  </Members>
</Type>