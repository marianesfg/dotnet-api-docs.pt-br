<Type Name="ISynchronizeInvoke" FullName="System.ComponentModel.ISynchronizeInvoke">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ac5648d586e03aebeb7db72bd148861e02bc6f37" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ISynchronizeInvoke" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ISynchronizeInvoke" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.ISynchronizeInvoke" />
  <TypeSignature Language="VB.NET" Value="Public Interface ISynchronizeInvoke" />
  <TypeSignature Language="C++ CLI" Value="public interface class ISynchronizeInvoke" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="f5acb-101">Fornece uma maneira executar um delegado de forma síncrona ou assíncrona.</span>
      <span class="sxs-lookup">
        <span data-stu-id="f5acb-101">Provides a way to synchronously or asynchronously execute a delegate.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5acb-102">O <xref:System.ComponentModel.ISynchronizeInvoke> interface fornece comunicação síncrona e assíncrona entre objetos sobre a ocorrência de um evento.</span><span class="sxs-lookup"><span data-stu-id="f5acb-102">The <xref:System.ComponentModel.ISynchronizeInvoke> interface provides synchronous and asynchronous communication between objects about the occurrence of an event.</span></span> <span data-ttu-id="f5acb-103">Objetos que implementam esta interface podem receber notificação que um evento ocorreu, e eles podem responder a consultas sobre o evento.</span><span class="sxs-lookup"><span data-stu-id="f5acb-103">Objects that implement this interface can receive notification that an event has occurred, and they can respond to queries about the event.</span></span> <span data-ttu-id="f5acb-104">Dessa forma, os clientes podem garantir que uma solicitação foi processada antes de enviar uma solicitação subsequente depende da conclusão da primeira.</span><span class="sxs-lookup"><span data-stu-id="f5acb-104">In this way, clients can ensure that one request has been processed before they submit a subsequent request that depends on completion of the first.</span></span>  
  
 <span data-ttu-id="f5acb-105">O <xref:System.ComponentModel.ISynchronizeInvoke> classe fornece duas maneiras para chamar um processo:</span><span class="sxs-lookup"><span data-stu-id="f5acb-105">The <xref:System.ComponentModel.ISynchronizeInvoke> class provides two ways to invoke a process:</span></span>  
  
1.  <span data-ttu-id="f5acb-106">De forma assíncrona, usando o <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> método.</span><span class="sxs-lookup"><span data-stu-id="f5acb-106">Asynchronously, by using the <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> method.</span></span> <span data-ttu-id="f5acb-107"><xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> inicia um processo e, em seguida, retorna imediatamente.</span><span class="sxs-lookup"><span data-stu-id="f5acb-107"><xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> starts a process and then returns immediately.</span></span> <span data-ttu-id="f5acb-108">Use <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A> para aguardar até que o processo iniciado pelo <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> é concluída.</span><span class="sxs-lookup"><span data-stu-id="f5acb-108">Use <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A> to wait until the process started by <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> completes.</span></span>  
  
2.  <span data-ttu-id="f5acb-109">De forma síncrona, usando o <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> método.</span><span class="sxs-lookup"><span data-stu-id="f5acb-109">Synchronously, by using the <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> method.</span></span> <span data-ttu-id="f5acb-110"><xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> inicia um processo, aguarda até que ela seja concluída e, em seguida, retorna.</span><span class="sxs-lookup"><span data-stu-id="f5acb-110"><xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> starts a process, waits until it completes, and then returns.</span></span> <span data-ttu-id="f5acb-111">Use <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> quando o controle principal do thread é diferente do thread de chamada para realizar marshaling da chamada para o thread adequado.</span><span class="sxs-lookup"><span data-stu-id="f5acb-111">Use <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> when the control's main thread is different from the calling thread to marshal the call to the proper thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f5acb-112">O <xref:System.Security.Permissions.HostProtectionAttribute> atributo aplicado a essa classe tem as seguintes <xref:System.Security.Permissions.HostProtectionAttribute.Resources%2A> o valor da propriedade: <xref:System.Security.Permissions.HostProtectionResource.Synchronization> &#124; <xref:System.Security.Permissions.HostProtectionResource.ExternalThreading>.</span><span class="sxs-lookup"><span data-stu-id="f5acb-112">The <xref:System.Security.Permissions.HostProtectionAttribute> attribute applied to this class has the following <xref:System.Security.Permissions.HostProtectionAttribute.Resources%2A> property value: <xref:System.Security.Permissions.HostProtectionResource.Synchronization> &#124; <xref:System.Security.Permissions.HostProtectionResource.ExternalThreading>.</span></span> <span data-ttu-id="f5acb-113"><xref:System.Security.Permissions.HostProtectionAttribute> não afeta aplicativos de área de trabalho (que são normalmente iniciados com o clique duplo em um ícone, a digitação de um comando ou a inserção de uma URL em um navegador).</span><span class="sxs-lookup"><span data-stu-id="f5acb-113">The <xref:System.Security.Permissions.HostProtectionAttribute> does not affect desktop applications (which are typically started by double-clicking an icon, typing a command, or entering a URL in a browser).</span></span> <span data-ttu-id="f5acb-114">Para obter mais informações, consulte o <xref:System.Security.Permissions.HostProtectionAttribute> classe ou [programação do SQL Server e atributos de proteção de Host](~/docs/framework/performance/sql-server-programming-and-host-protection-attributes.md).</span><span class="sxs-lookup"><span data-stu-id="f5acb-114">For more information, see the <xref:System.Security.Permissions.HostProtectionAttribute> class or [SQL Server Programming and Host Protection Attributes](~/docs/framework/performance/sql-server-programming-and-host-protection-attributes.md).</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />
    <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)" />
    <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" />
  </Docs>
  <Members>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (Delegate method, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginInvoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate, args As Object()) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(Delegate ^ method, cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="f5acb-115">Um <see cref="T:System.Delegate" /> para um método que usa parâmetros do mesmo número e tipo que aqueles contidos em <c>args</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5acb-115">A <see cref="T:System.Delegate" /> to a method that takes parameters of the same number and type that are contained in <c>args</c>.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="f5acb-116">Uma matriz de tipo <see cref="T:System.Object" /> a passar como argumentos para o método em determinado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5acb-116">An array of type <see cref="T:System.Object" /> to pass as arguments to the given method.</span>
          </span>
          <span data-ttu-id="f5acb-117">Pode ser <see langword="null" />, caso nenhum argumento seja necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5acb-117">This can be <see langword="null" /> if no arguments are needed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f5acb-118">Executa o delegado de modo assíncrono no thread que criou esse objeto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5acb-118">Asynchronously executes the delegate on the thread that created this object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f5acb-119">Uma interface <see cref="T:System.IAsyncResult" /> que representa a operação assíncrona foi iniciada chamando esse método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5acb-119">An <see cref="T:System.IAsyncResult" /> interface that represents the asynchronous operation started by calling this method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5acb-120">O `method` delegado é executado no thread que criou o objeto, em vez do thread no qual <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> foi chamado.</span><span class="sxs-lookup"><span data-stu-id="f5acb-120">The `method` delegate is executed on the thread that created the object, instead of the thread on which <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> was called.</span></span>  
  
 <span data-ttu-id="f5acb-121">O representante é chamado de forma assíncrona, e esse método retorna imediatamente.</span><span class="sxs-lookup"><span data-stu-id="f5acb-121">The delegate is called asynchronously, and this method returns immediately.</span></span> <span data-ttu-id="f5acb-122">Você pode chamar esse método de qualquer thread.</span><span class="sxs-lookup"><span data-stu-id="f5acb-122">You can call this method from any thread.</span></span> <span data-ttu-id="f5acb-123">Se você precisar que o valor de retorno de um processo iniciado com esse método, chame <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A> para obter o valor.</span><span class="sxs-lookup"><span data-stu-id="f5acb-123">If you need the return value from a process started with this method, call <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A> to get the value.</span></span>  
  
 <span data-ttu-id="f5acb-124">Se você precisar chamar o delegado de forma síncrona, use o <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> método em vez disso.</span><span class="sxs-lookup"><span data-stu-id="f5acb-124">If you need to call the delegate synchronously, use the <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> method instead.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)" />
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="public object EndInvoke (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EndInvoke(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndInvoke (result As IAsyncResult) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ EndInvoke(IAsyncResult ^ result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">
          <span data-ttu-id="f5acb-125">Uma interface <see cref="T:System.IAsyncResult" /> que representa a operação assíncrona que foi iniciada ao chamar <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5acb-125">An <see cref="T:System.IAsyncResult" /> interface that represents the asynchronous operation started by calling <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f5acb-126">Aguarda até que o processo iniciado ao chamar <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" /> seja concluído e, em seguida, retorna o valor gerado pelo processo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5acb-126">Waits until the process started by calling <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" /> completes, and then returns the value generated by the process.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f5acb-127">Um <see cref="T:System.Object" /> que representa o valor retornado gerado pela operação assíncrona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5acb-127">An <see cref="T:System.Object" /> that represents the return value generated by the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5acb-128">Esse método obtém o valor de retorno da operação assíncrona representado pelo <xref:System.IAsyncResult> passado por esta interface.</span><span class="sxs-lookup"><span data-stu-id="f5acb-128">This method gets the return value of the asynchronous operation represented by the <xref:System.IAsyncResult> passed by this interface.</span></span> <span data-ttu-id="f5acb-129">Se a operação assíncrona não for concluída, esse método aguardará até que o resultado estiver disponível.</span><span class="sxs-lookup"><span data-stu-id="f5acb-129">If the asynchronous operation has not completed, this method will wait until the result is available.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Invoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="f5acb-130">Um <see cref="T:System.Delegate" /> que contém um método para chamar, no contexto do thread para o controle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5acb-130">A <see cref="T:System.Delegate" /> that contains a method to call, in the context of the thread for the control.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="f5acb-131">Uma matriz do tipo <see cref="T:System.Object" /> que representa os argumentos para passar para o método fornecido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5acb-131">An array of type <see cref="T:System.Object" /> that represents the arguments to pass to the given method.</span>
          </span>
          <span data-ttu-id="f5acb-132">Pode ser <see langword="null" />, caso nenhum argumento seja necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5acb-132">This can be <see langword="null" /> if no arguments are needed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f5acb-133">Executa o delegado de forma síncrona no thread que criou esse objeto e realiza marshaling na chamada para o thread de criação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5acb-133">Synchronously executes the delegate on the thread that created this object and marshals the call to the creating thread.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f5acb-134">Um <see cref="T:System.Object" /> que representa o valor retornado do delegado que está sendo invocado ou <see langword="null" /> se o delegado não tiver um valor retornado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5acb-134">An <see cref="T:System.Object" /> that represents the return value from the delegate being invoked, or <see langword="null" /> if the delegate has no return value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5acb-135">Ao contrário de <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A>, este método opera de forma síncrona, ou seja, ele aguarda até que o processo seja concluído antes de retornar.</span><span class="sxs-lookup"><span data-stu-id="f5acb-135">Unlike <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A>, this method operates synchronously, that is, it waits until the process completes before returning.</span></span> <span data-ttu-id="f5acb-136">Exceções geradas durante a chamada são propagadas de volta para o chamador.</span><span class="sxs-lookup"><span data-stu-id="f5acb-136">Exceptions raised during the call are propagated back to the caller.</span></span>  
  
 <span data-ttu-id="f5acb-137">Use esse método ao chamar um método de um thread diferente para realizar marshaling da chamada para o thread adequado.</span><span class="sxs-lookup"><span data-stu-id="f5acb-137">Use this method when calling a method from a different thread to marshal the call to the proper thread.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeRequired">
      <MemberSignature Language="C#" Value="public bool InvokeRequired { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InvokeRequired" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.ISynchronizeInvoke.InvokeRequired" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InvokeRequired As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool InvokeRequired { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f5acb-138">Obtém um valor que indica se o chamador deve chamar <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" /> ao chamar um objeto que implementa essa interface.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5acb-138">Gets a value indicating whether the caller must call <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" /> when calling an object that implements this interface.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f5acb-139">
            <see langword="true" /> se o chamador deve chamar <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" />; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5acb-139">
              <see langword="true" /> if the caller must call <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5acb-140">Essa propriedade determina se o chamador deve chamar <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> ao fazer chamadas de método para um objeto que implementa essa interface.</span><span class="sxs-lookup"><span data-stu-id="f5acb-140">This property determines whether the caller must call <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> when making method calls to an object that implements this interface.</span></span> <span data-ttu-id="f5acb-141">Esses objetos são associados a um segmento específico e não são thread-safe.</span><span class="sxs-lookup"><span data-stu-id="f5acb-141">Such objects are bound to a specific thread and are not thread-safe.</span></span> <span data-ttu-id="f5acb-142">Se você estiver chamando um método de um thread diferente, você deve usar o <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> método realizar marshaling da chamada para o thread adequado.</span><span class="sxs-lookup"><span data-stu-id="f5acb-142">If you are calling a method from a different thread, you must use the <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> method to marshal the call to the proper thread.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>