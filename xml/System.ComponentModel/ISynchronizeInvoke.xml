<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ISynchronizeInvoke.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5ac5648d586e03aebeb7db72bd148861e02bc6f37.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ac5648d586e03aebeb7db72bd148861e02bc6f37</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>Provides a way to synchronously or asynchronously execute a delegate.</source>
          <target state="translated">Fornece uma maneira executar um delegado de forma síncrona ou assíncrona.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke&gt;</ph> interface provides synchronous and asynchronous communication between objects about the occurrence of an event.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke&gt;</ph> interface fornece comunicação síncrona e assíncrona entre objetos sobre a ocorrência de um evento.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>Objects that implement this interface can receive notification that an event has occurred, and they can respond to queries about the event.</source>
          <target state="translated">Objetos que implementam esta interface podem receber notificação que um evento ocorreu, e eles podem responder a consultas sobre o evento.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>In this way, clients can ensure that one request has been processed before they submit a subsequent request that depends on completion of the first.</source>
          <target state="translated">Dessa forma, os clientes podem garantir que uma solicitação foi processada antes de enviar uma solicitação subsequente depende da conclusão da primeira.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke&gt;</ph> class provides two ways to invoke a process:</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke&gt;</ph> classe fornece duas maneiras para chamar um processo:</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>Asynchronously, by using the <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A&gt;</ph> method.</source>
          <target state="translated">De forma assíncrona, usando o <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A&gt;</ph> starts a process and then returns immediately.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A&gt;</ph> inicia um processo e, em seguida, retorna imediatamente.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>Use <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A&gt;</ph> to wait until the process started by <ph id="ph2">&lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A&gt;</ph> completes.</source>
          <target state="translated">Use <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A&gt;</ph> para aguardar até que o processo iniciado pelo <ph id="ph2">&lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A&gt;</ph> é concluída.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>Synchronously, by using the <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> method.</source>
          <target state="translated">De forma síncrona, usando o <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> starts a process, waits until it completes, and then returns.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> inicia um processo, aguarda até que ela seja concluída e, em seguida, retorna.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>Use <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> when the control's main thread is different from the calling thread to marshal the call to the proper thread.</source>
          <target state="translated">Use <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> quando o controle principal do thread é diferente do thread de chamada para realizar marshaling da chamada para o thread adequado.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>The <ph id="ph1">&lt;xref:System.Security.Permissions.HostProtectionAttribute&gt;</ph> attribute applied to this class has the following <ph id="ph2">&lt;xref:System.Security.Permissions.HostProtectionAttribute.Resources%2A&gt;</ph> property value: <ph id="ph3">&lt;xref:System.Security.Permissions.HostProtectionResource.Synchronization&gt;</ph> &amp;#124; <ph id="ph4">&lt;xref:System.Security.Permissions.HostProtectionResource.ExternalThreading&gt;</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Security.Permissions.HostProtectionAttribute&gt;</ph> atributo aplicado a essa classe tem as seguintes <ph id="ph2">&lt;xref:System.Security.Permissions.HostProtectionAttribute.Resources%2A&gt;</ph> o valor da propriedade: <ph id="ph3">&lt;xref:System.Security.Permissions.HostProtectionResource.Synchronization&gt;</ph> &amp;#124; <ph id="ph4">&lt;xref:System.Security.Permissions.HostProtectionResource.ExternalThreading&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>The <ph id="ph1">&lt;xref:System.Security.Permissions.HostProtectionAttribute&gt;</ph> does not affect desktop applications (which are typically started by double-clicking an icon, typing a command, or entering a URL in a browser).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.Permissions.HostProtectionAttribute&gt;</ph> não afeta aplicativos de área de trabalho (que são normalmente iniciados com o clique duplo em um ícone, a digitação de um comando ou a inserção de uma URL em um navegador).</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Security.Permissions.HostProtectionAttribute&gt;</ph> class or <bpt id="p1">[</bpt>SQL Server Programming and Host Protection Attributes<ept id="p1">](~/docs/framework/performance/sql-server-programming-and-host-protection-attributes.md)</ept>.</source>
          <target state="translated">Para obter mais informações, consulte o <ph id="ph1">&lt;xref:System.Security.Permissions.HostProtectionAttribute&gt;</ph> classe ou <bpt id="p1">[</bpt>programação do SQL Server e atributos de proteção de Host<ept id="p1">](~/docs/framework/performance/sql-server-programming-and-host-protection-attributes.md)</ept>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Delegate" /&gt;</ph> to a method that takes parameters of the same number and type that are contained in <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Delegate" /&gt;</ph> para um método que usa parâmetros do mesmo número e tipo que aqueles contidos em <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to pass as arguments to the given method.</source>
          <target state="translated">Uma matriz de tipo <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> a passar como argumentos para o método em determinado.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
          <source>This can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no arguments are needed.</source>
          <target state="translated">Pode ser <ph id="ph1">&lt;see langword="null" /&gt;</ph>, caso nenhum argumento seja necessário.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
          <source>Asynchronously executes the delegate on the thread that created this object.</source>
          <target state="translated">Executa o delegado de modo assíncrono no thread que criou esse objeto.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> interface that represents the asynchronous operation started by calling this method.</source>
          <target state="translated">Uma interface <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> que representa a operação assíncrona foi iniciada chamando esse método.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
          <source>The <ph id="ph1">`method`</ph> delegate is executed on the thread that created the object, instead of the thread on which <ph id="ph2">&lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A&gt;</ph> was called.</source>
          <target state="translated">O <ph id="ph1">`method`</ph> delegado é executado no thread que criou o objeto, em vez do thread no qual <ph id="ph2">&lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A&gt;</ph> foi chamado.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
          <source>The delegate is called asynchronously, and this method returns immediately.</source>
          <target state="translated">O representante é chamado de forma assíncrona, e esse método retorna imediatamente.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
          <source>You can call this method from any thread.</source>
          <target state="translated">Você pode chamar esse método de qualquer thread.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
          <source>If you need the return value from a process started with this method, call <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A&gt;</ph> to get the value.</source>
          <target state="translated">Se você precisar que o valor de retorno de um processo iniciado com esse método, chame <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A&gt;</ph> para obter o valor.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
          <source>If you need to call the delegate synchronously, use the <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> method instead.</source>
          <target state="translated">Se você precisar chamar o delegado de forma síncrona, use o <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> método em vez disso.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> interface that represents the asynchronous operation started by calling <ph id="ph2">&lt;see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" /&gt;</ph>.</source>
          <target state="translated">Uma interface <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> que representa a operação assíncrona que foi iniciada ao chamar <ph id="ph2">&lt;see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)">
          <source>Waits until the process started by calling <ph id="ph1">&lt;see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" /&gt;</ph> completes, and then returns the value generated by the process.</source>
          <target state="translated">Aguarda até que o processo iniciado ao chamar <ph id="ph1">&lt;see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" /&gt;</ph> seja concluído e, em seguida, retorna o valor gerado pelo processo.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that represents the return value generated by the asynchronous operation.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> que representa o valor retornado gerado pela operação assíncrona.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)">
          <source>This method gets the return value of the asynchronous operation represented by the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> passed by this interface.</source>
          <target state="translated">Esse método obtém o valor de retorno da operação assíncrona representado pelo <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> passado por esta interface.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)">
          <source>If the asynchronous operation has not completed, this method will wait until the result is available.</source>
          <target state="translated">Se a operação assíncrona não for concluída, esse método aguardará até que o resultado estiver disponível.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Delegate" /&gt;</ph> that contains a method to call, in the context of the thread for the control.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Delegate" /&gt;</ph> que contém um método para chamar, no contexto do thread para o controle.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that represents the arguments to pass to the given method.</source>
          <target state="translated">Uma matriz do tipo <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> que representa os argumentos para passar para o método fornecido.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])">
          <source>This can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no arguments are needed.</source>
          <target state="translated">Pode ser <ph id="ph1">&lt;see langword="null" /&gt;</ph>, caso nenhum argumento seja necessário.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])">
          <source>Synchronously executes the delegate on the thread that created this object and marshals the call to the creating thread.</source>
          <target state="translated">Executa o delegado de forma síncrona no thread que criou esse objeto e realiza marshaling na chamada para o thread de criação.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that represents the return value from the delegate being invoked, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the delegate has no return value.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> que representa o valor retornado do delegado que está sendo invocado ou <ph id="ph2">&lt;see langword="null" /&gt;</ph> se o delegado não tiver um valor retornado.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])">
          <source>Unlike <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A&gt;</ph>, this method operates synchronously, that is, it waits until the process completes before returning.</source>
          <target state="translated">Ao contrário de <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A&gt;</ph>, este método opera de forma síncrona, ou seja, ele aguarda até que o processo seja concluído antes de retornar.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])">
          <source>Exceptions raised during the call are propagated back to the caller.</source>
          <target state="translated">Exceções geradas durante a chamada são propagadas de volta para o chamador.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])">
          <source>Use this method when calling a method from a different thread to marshal the call to the proper thread.</source>
          <target state="translated">Use esse método ao chamar um método de um thread diferente para realizar marshaling da chamada para o thread adequado.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.ISynchronizeInvoke.InvokeRequired">
          <source>Gets a value indicating whether the caller must call <ph id="ph1">&lt;see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" /&gt;</ph> when calling an object that implements this interface.</source>
          <target state="translated">Obtém um valor que indica se o chamador deve chamar <ph id="ph1">&lt;see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" /&gt;</ph> ao chamar um objeto que implementa essa interface.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.ISynchronizeInvoke.InvokeRequired">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the caller must call <ph id="ph2">&lt;see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se o chamador deve chamar <ph id="ph2">&lt;see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" /&gt;</ph>; caso contrário, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.ISynchronizeInvoke.InvokeRequired">
          <source>This property determines whether the caller must call <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> when making method calls to an object that implements this interface.</source>
          <target state="translated">Essa propriedade determina se o chamador deve chamar <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> ao fazer chamadas de método para um objeto que implementa essa interface.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.ISynchronizeInvoke.InvokeRequired">
          <source>Such objects are bound to a specific thread and are not thread-safe.</source>
          <target state="translated">Esses objetos são associados a um segmento específico e não são thread-safe.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.ISynchronizeInvoke.InvokeRequired">
          <source>If you are calling a method from a different thread, you must use the <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> method to marshal the call to the proper thread.</source>
          <target state="translated">Se você estiver chamando um método de um thread diferente, você deve usar o <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> método realizar marshaling da chamada para o thread adequado.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>