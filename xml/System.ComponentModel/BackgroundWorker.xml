<Type Name="BackgroundWorker" FullName="System.ComponentModel.BackgroundWorker">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e3100d5df8f298b733355b4ac8b472c23b7f225f" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30370310" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class BackgroundWorker : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BackgroundWorker extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.BackgroundWorker" />
  <TypeSignature Language="VB.NET" Value="Public Class BackgroundWorker&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class BackgroundWorker : System::ComponentModel::Component" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces></Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("DoWork")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="1e400-101">Executa uma operação em outro thread.</span>
      <span class="sxs-lookup">
        <span data-stu-id="1e400-101">Executes an operation on a separate thread.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e400-102">O <xref:System.ComponentModel.BackgroundWorker> classe permite que você execute uma operação em um thread separado e dedicado.</span><span class="sxs-lookup"><span data-stu-id="1e400-102">The <xref:System.ComponentModel.BackgroundWorker> class allows you to run an operation on a separate, dedicated thread.</span></span> <span data-ttu-id="1e400-103">Operações demoradas como downloads e transações de banco de dados podem fazer com que sua interface de usuário (UI) para se parecer que parou de responder enquanto eles estão em execução.</span><span class="sxs-lookup"><span data-stu-id="1e400-103">Time-consuming operations like downloads and database transactions can cause your user interface (UI) to seem as though it has stopped responding while they are running.</span></span> <span data-ttu-id="1e400-104">Quando desejar que uma interface do usuário responsivo e você enfrentar atrasos longos associados a essas operações, o <xref:System.ComponentModel.BackgroundWorker> classe fornece uma solução conveniente.</span><span class="sxs-lookup"><span data-stu-id="1e400-104">When you want a responsive UI and you are faced with long delays associated with such operations, the <xref:System.ComponentModel.BackgroundWorker> class provides a convenient solution.</span></span>  
  
 <span data-ttu-id="1e400-105">Para executar uma operação demorada em segundo plano, criar um <xref:System.ComponentModel.BackgroundWorker> e escutar eventos que informam o andamento da operação e sinalizam quando a operação é concluída.</span><span class="sxs-lookup"><span data-stu-id="1e400-105">To execute a time-consuming operation in the background, create a <xref:System.ComponentModel.BackgroundWorker> and listen for events that report the progress of your operation and signal when your operation is finished.</span></span> <span data-ttu-id="1e400-106">Você pode criar o <xref:System.ComponentModel.BackgroundWorker> programaticamente ou você pode arrastá-la para seu formulário do **componentes** guia do **caixa de ferramentas**.</span><span class="sxs-lookup"><span data-stu-id="1e400-106">You can create the <xref:System.ComponentModel.BackgroundWorker> programmatically or you can drag it onto your form from the **Components** tab of the **Toolbox**.</span></span> <span data-ttu-id="1e400-107">Se você criar o <xref:System.ComponentModel.BackgroundWorker> no Designer de formulários do Windows, ele será exibido na bandeja de componentes e suas propriedades aparecerão na janela Propriedades.</span><span class="sxs-lookup"><span data-stu-id="1e400-107">If you create the <xref:System.ComponentModel.BackgroundWorker> in the Windows Forms Designer, it will appear in the Component Tray, and its properties will be displayed in the Properties window.</span></span>  
  
 <span data-ttu-id="1e400-108">Para configurar para uma operação em segundo plano, adicione um manipulador de eventos para o <xref:System.ComponentModel.BackgroundWorker.DoWork> evento.</span><span class="sxs-lookup"><span data-stu-id="1e400-108">To set up for a background operation, add an event handler for the <xref:System.ComponentModel.BackgroundWorker.DoWork> event.</span></span> <span data-ttu-id="1e400-109">Chame sua operação demorada neste manipulador de eventos.</span><span class="sxs-lookup"><span data-stu-id="1e400-109">Call your time-consuming operation in this event handler.</span></span> <span data-ttu-id="1e400-110">Para iniciar a operação, chame <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>.</span><span class="sxs-lookup"><span data-stu-id="1e400-110">To start the operation, call <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>.</span></span> <span data-ttu-id="1e400-111">Para receber notificações de atualizações de andamento, manipule o <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> evento.</span><span class="sxs-lookup"><span data-stu-id="1e400-111">To receive notifications of progress updates, handle the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event.</span></span> <span data-ttu-id="1e400-112">Para receber uma notificação quando a operação é concluída, tratar o <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> evento.</span><span class="sxs-lookup"><span data-stu-id="1e400-112">To receive a notification when the operation is completed, handle the <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1e400-113">Você deve ter cuidado para não manipular quaisquer objetos de interface do usuário no seu <xref:System.ComponentModel.BackgroundWorker.DoWork> manipulador de eventos.</span><span class="sxs-lookup"><span data-stu-id="1e400-113">You must be careful not to manipulate any user-interface objects in your <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler.</span></span> <span data-ttu-id="1e400-114">Em vez disso, se comunicar com a interface do usuário por meio de <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> e <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> eventos.</span><span class="sxs-lookup"><span data-stu-id="1e400-114">Instead, communicate to the user interface through the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> and <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> events.</span></span>  
>   
>  <span data-ttu-id="1e400-115"><xref:System.ComponentModel.BackgroundWorker> eventos não são empacotados em <xref:System.AppDomain> limites.</span><span class="sxs-lookup"><span data-stu-id="1e400-115"><xref:System.ComponentModel.BackgroundWorker> events are not marshaled across <xref:System.AppDomain> boundaries.</span></span> <span data-ttu-id="1e400-116">Não use um <xref:System.ComponentModel.BackgroundWorker> componente para realizar operações multi-threaded em mais de um <xref:System.AppDomain>.</span><span class="sxs-lookup"><span data-stu-id="1e400-116">Do not use a <xref:System.ComponentModel.BackgroundWorker> component to perform multithreaded operations in more than one <xref:System.AppDomain>.</span></span>  
  
 <span data-ttu-id="1e400-117">Se a operação em segundo plano requer um parâmetro, chame <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> com o parâmetro.</span><span class="sxs-lookup"><span data-stu-id="1e400-117">If your background operation requires a parameter, call <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> with your parameter.</span></span> <span data-ttu-id="1e400-118">Dentro de <xref:System.ComponentModel.BackgroundWorker.DoWork> manipulador de eventos, você pode extrair o parâmetro do <xref:System.ComponentModel.DoWorkEventArgs.Argument%2A?displayProperty=nameWithType> propriedade.</span><span class="sxs-lookup"><span data-stu-id="1e400-118">Inside the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler, you can extract the parameter from the <xref:System.ComponentModel.DoWorkEventArgs.Argument%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="1e400-119">Para saber mais sobre <xref:System.ComponentModel.BackgroundWorker>, consulte [Como executar uma operação em segundo plano](~/docs/framework/winforms/controls/how-to-run-an-operation-in-the-background.md).</span><span class="sxs-lookup"><span data-stu-id="1e400-119">For more information about <xref:System.ComponentModel.BackgroundWorker>, see [How to: Run an Operation in the Background](~/docs/framework/winforms/controls/how-to-run-an-operation-in-the-background.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1e400-120">O exemplo de código a seguir demonstra os conceitos básicos do <xref:System.ComponentModel.BackgroundWorker> classe para executar uma operação demorada de forma assíncrona.</span><span class="sxs-lookup"><span data-stu-id="1e400-120">The following code example demonstrates the basics of the <xref:System.ComponentModel.BackgroundWorker> class for executing a time-consuming operation asynchronously.</span></span> <span data-ttu-id="1e400-121">A ilustração a seguir mostra um exemplo da saída.</span><span class="sxs-lookup"><span data-stu-id="1e400-121">The following illustration shows an example of the output.</span></span>  
  
 <span data-ttu-id="1e400-122">![Exemplo simples de BackgroundWorker](~/add/media/backgroundworker-simple.png "exemplo simples de BackgroundWorker")</span><span class="sxs-lookup"><span data-stu-id="1e400-122">![BackgroundWorker simple example](~/add/media/backgroundworker-simple.png "BackgroundWorker simple example")</span></span>  
  
 <span data-ttu-id="1e400-123">Para testar esse código, crie um aplicativo do Windows Forms.</span><span class="sxs-lookup"><span data-stu-id="1e400-123">To try this code, create a Windows Forms application.</span></span> <span data-ttu-id="1e400-124">Adicionar um <xref:System.Windows.Forms.Label> controle chamado `resultLabel` e adicionar dois <xref:System.Windows.Forms.Button> controles denominados `startAsyncButton` e `cancelAsyncButton`.</span><span class="sxs-lookup"><span data-stu-id="1e400-124">Add a <xref:System.Windows.Forms.Label> control named `resultLabel` and add two <xref:System.Windows.Forms.Button> controls named `startAsyncButton` and `cancelAsyncButton`.</span></span> <span data-ttu-id="1e400-125">Criar <xref:System.Windows.Forms.Control.Click> manipuladores de eventos para os dois botões.</span><span class="sxs-lookup"><span data-stu-id="1e400-125">Create <xref:System.Windows.Forms.Control.Click> event handlers for both buttons.</span></span> <span data-ttu-id="1e400-126">Do **componentes** guia da caixa de ferramentas, adicione um <xref:System.ComponentModel.BackgroundWorker> componente denominado `backgroundWorker1`.</span><span class="sxs-lookup"><span data-stu-id="1e400-126">From the **Components** tab of the Toolbox, add a <xref:System.ComponentModel.BackgroundWorker> component named `backgroundWorker1`.</span></span> <span data-ttu-id="1e400-127">Criar <xref:System.ComponentModel.BackgroundWorker.DoWork>, <xref:System.ComponentModel.BackgroundWorker.ProgressChanged>, e <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> manipuladores de eventos para o <xref:System.ComponentModel.BackgroundWorker>.</span><span class="sxs-lookup"><span data-stu-id="1e400-127">Create <xref:System.ComponentModel.BackgroundWorker.DoWork>, <xref:System.ComponentModel.BackgroundWorker.ProgressChanged>, and <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handlers for the <xref:System.ComponentModel.BackgroundWorker>.</span></span> <span data-ttu-id="1e400-128">No código para o formulário, substitua o código existente com o código a seguir.</span><span class="sxs-lookup"><span data-stu-id="1e400-128">In the code for the form, replace the existing code with the following code.</span></span>  
  
 [!code-csharp[System.ComponentModel.BackgroundWorkerSimple#1](~/samples/snippets/csharp/VS_Snippets_Winforms/system.componentmodel.backgroundworkersimple/cs/form1.cs#1)]
 [!code-vb[System.ComponentModel.BackgroundWorkerSimple#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/system.componentmodel.backgroundworkersimple/vb/form1.vb#1)]  
  
 <span data-ttu-id="1e400-129">O exemplo de código a seguir demonstra o uso da <xref:System.ComponentModel.BackgroundWorker> classe para executar uma operação demorada de forma assíncrona.</span><span class="sxs-lookup"><span data-stu-id="1e400-129">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker> class for executing a time-consuming operation asynchronously.</span></span> <span data-ttu-id="1e400-130">A ilustração a seguir mostra um exemplo da saída.</span><span class="sxs-lookup"><span data-stu-id="1e400-130">The following illustration shows an example of the output.</span></span>  
  
 <span data-ttu-id="1e400-131">![Exemplo de BackgroundWorker Fibonacci](~/add/media/backgroundworker-fibonacci.png "BackgroundWorker Fibonacci exemplo")</span><span class="sxs-lookup"><span data-stu-id="1e400-131">![BackgroundWorker Fibonacci example](~/add/media/backgroundworker-fibonacci.png "BackgroundWorker Fibonacci example")</span></span>  
  
 <span data-ttu-id="1e400-132">A operação calcula o número de Fibonacci selecionado, relatórios de atualizações de andamento, como os resultados de cálculo e permite que um cálculo pendente a ser cancelada.</span><span class="sxs-lookup"><span data-stu-id="1e400-132">The operation computes the selected Fibonacci number, reports progress updates as the calculation proceeds, and permits a pending calculation to be canceled.</span></span>  
  
 [!code-cpp[System.ComponentModel.BackgroundWorker#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#1)]
 [!code-csharp[System.ComponentModel.BackgroundWorker#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#1)]
 [!code-vb[System.ComponentModel.BackgroundWorker#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BackgroundWorker ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BackgroundWorker();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1e400-133">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.BackgroundWorker" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e400-133">Initializes a new instance of the <see cref="T:System.ComponentModel.BackgroundWorker" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e400-134">Este construtor inicializa um <xref:System.ComponentModel.BackgroundWorker>.</span><span class="sxs-lookup"><span data-stu-id="1e400-134">This constructor initializes a <xref:System.ComponentModel.BackgroundWorker>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelAsync">
      <MemberSignature Language="C#" Value="public void CancelAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.CancelAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1e400-135">Solicita o cancelamento de uma operação pendente em segundo plano.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e400-135">Requests cancellation of a pending background operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e400-136"><xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> envia uma solicitação para encerrar a operação pendente do plano de fundo e define o <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> propriedade `true`.</span><span class="sxs-lookup"><span data-stu-id="1e400-136"><xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> submits a request to terminate the pending background operation and sets the <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> property to `true`.</span></span>  
  
 <span data-ttu-id="1e400-137">Quando você chama <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A>, o método de trabalho tiver uma oportunidade de interromper sua execução e sair.</span><span class="sxs-lookup"><span data-stu-id="1e400-137">When you call <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A>, your worker method has an opportunity to stop its execution and exit.</span></span> <span data-ttu-id="1e400-138">O código de trabalho deve verificar periodicamente o <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> propriedade para ver se ele foi definido como `true`.</span><span class="sxs-lookup"><span data-stu-id="1e400-138">The worker code should periodically check the <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> property to see if it has been set to `true`.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="1e400-139">Lembre-se que o código a <xref:System.ComponentModel.BackgroundWorker.DoWork> manipulador de eventos pode concluir seu trabalho como uma solicitação de cancelamento está sendo feita, e o loop de sondagem pode perder <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> sendo definido como `true`.</span><span class="sxs-lookup"><span data-stu-id="1e400-139">Be aware that your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> being set to `true`.</span></span> <span data-ttu-id="1e400-140">Nesse caso, o <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> sinalizador de <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> no seu <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> manipulador de eventos não será definido como `true`, mesmo que foi feita uma solicitação de cancelamento.</span><span class="sxs-lookup"><span data-stu-id="1e400-140">In this case, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> in your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler will not be set to `true`, even though a cancellation request was made.</span></span> <span data-ttu-id="1e400-141">Essa situação é chamada uma *condição de corrida* e é um problema comum em programação multithread.</span><span class="sxs-lookup"><span data-stu-id="1e400-141">This situation is called a *race condition* and is a common concern in multithreaded programming.</span></span> <span data-ttu-id="1e400-142">Para obter mais informações sobre o design de multithreading problemas, consulte [gerenciados Threading práticas recomendadas](~/docs/standard/threading/managed-threading-best-practices.md).</span><span class="sxs-lookup"><span data-stu-id="1e400-142">For more information about multithreading design issues, see [Managed Threading Best Practices](~/docs/standard/threading/managed-threading-best-practices.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1e400-143">O exemplo de código a seguir demonstra o uso do <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> método para cancelar uma operação assíncrona ("em segundo plano").</span><span class="sxs-lookup"><span data-stu-id="1e400-143">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> method to cancel an asynchronous ("background") operation.</span></span> <span data-ttu-id="1e400-144">Este exemplo de código é parte de um exemplo maior fornecido para a <xref:System.ComponentModel.BackgroundWorker> classe.</span><span class="sxs-lookup"><span data-stu-id="1e400-144">This code example is part of a larger example provided for the <xref:System.ComponentModel.BackgroundWorker> class.</span></span>  
  
 [!code-cpp[System.ComponentModel.BackgroundWorker#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#4)]
 [!code-csharp[System.ComponentModel.BackgroundWorker#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#4)]
 [!code-vb[System.ComponentModel.BackgroundWorker#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1e400-145">
            <see cref="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation" /> é <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e400-145">
              <see cref="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation" /> is <see langword="false" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CancellationPending">
      <MemberSignature Language="C#" Value="public bool CancellationPending { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CancellationPending" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.BackgroundWorker.CancellationPending" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CancellationPending As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CancellationPending { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1e400-146">Obtém um valor que indica se o aplicativo solicitou o cancelamento de uma operação em segundo plano.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e400-146">Gets a value indicating whether the application has requested cancellation of a background operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1e400-147">
            <see langword="true" /> se o aplicativo tiver solicitado o cancelamento de uma operação em segundo plano; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e400-147">
              <see langword="true" /> if the application has requested cancellation of a background operation; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="1e400-148">O padrão é <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e400-148">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e400-149">Se <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> é `true`, em seguida, o <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> método foi chamado o <xref:System.ComponentModel.BackgroundWorker>.</span><span class="sxs-lookup"><span data-stu-id="1e400-149">If <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> is `true`, then the <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> method has been called on the <xref:System.ComponentModel.BackgroundWorker>.</span></span>  
  
 <span data-ttu-id="1e400-150">Essa propriedade é destinada para uso pelo thread de trabalho, deve verificar periodicamente <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> e anule a operação em segundo plano quando ele é definido como `true`.</span><span class="sxs-lookup"><span data-stu-id="1e400-150">This property is meant for use by the worker thread, which should periodically check <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> and abort the background operation when it is set to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1e400-151">O exemplo de código a seguir demonstra o uso do <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> propriedade para consultar um <xref:System.ComponentModel.BackgroundWorker> sobre seu estado de cancelamento.</span><span class="sxs-lookup"><span data-stu-id="1e400-151">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> property to query a <xref:System.ComponentModel.BackgroundWorker> about its cancellation state.</span></span> <span data-ttu-id="1e400-152">Este exemplo de código é parte de um exemplo maior fornecido para a <xref:System.ComponentModel.BackgroundWorker> classe.</span><span class="sxs-lookup"><span data-stu-id="1e400-152">This code example is part of a larger example provided for the <xref:System.ComponentModel.BackgroundWorker> class.</span></span>  
  
 [!code-cpp[System.ComponentModel.BackgroundWorker#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#8)]
 [!code-csharp[System.ComponentModel.BackgroundWorker#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#8)]
 [!code-vb[System.ComponentModel.BackgroundWorker#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoWork">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.DoWorkEventHandler DoWork;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.DoWorkEventHandler DoWork" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.BackgroundWorker.DoWork" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DoWork As DoWorkEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::DoWorkEventHandler ^ DoWork;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.DoWorkEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1e400-153">Ocorre quando <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync" /> é chamado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e400-153">Occurs when <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync" /> is called.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e400-154">Esse evento é gerado quando você chamar o <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> método.</span><span class="sxs-lookup"><span data-stu-id="1e400-154">This event is raised when you call the <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method.</span></span> <span data-ttu-id="1e400-155">Isso é onde você pode iniciar a operação que realiza o trabalho potencialmente demorado.</span><span class="sxs-lookup"><span data-stu-id="1e400-155">This is where you start the operation that performs the potentially time-consuming work.</span></span>  
  
 <span data-ttu-id="1e400-156">O código do <xref:System.ComponentModel.BackgroundWorker.DoWork> manipulador de eventos deve verificar periodicamente o <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> o valor da propriedade e anular a operação se ele for `true`.</span><span class="sxs-lookup"><span data-stu-id="1e400-156">Your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler should periodically check the <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> property value and abort the operation if it is `true`.</span></span> <span data-ttu-id="1e400-157">Quando isso ocorrer, você pode definir o <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> sinalizador de <xref:System.ComponentModel.DoWorkEventArgs?displayProperty=nameWithType> para `true`e o <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> sinalizador de <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> no seu <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> manipulador de eventos será definido como `true`.</span><span class="sxs-lookup"><span data-stu-id="1e400-157">When this occurs, you can set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> flag of <xref:System.ComponentModel.DoWorkEventArgs?displayProperty=nameWithType> to `true`, and the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> in your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler will be set to `true`.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="1e400-158">Lembre-se que o código a <xref:System.ComponentModel.BackgroundWorker.DoWork> manipulador de eventos pode concluir seu trabalho como uma solicitação de cancelamento está sendo feita, e o loop de sondagem pode perder <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> sendo definido como `true`.</span><span class="sxs-lookup"><span data-stu-id="1e400-158">Be aware that your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> being set to `true`.</span></span> <span data-ttu-id="1e400-159">Nesse caso, o <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> sinalizador de <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> no seu <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> manipulador de eventos não será definido como `true`, mesmo que foi feita uma solicitação de cancelamento.</span><span class="sxs-lookup"><span data-stu-id="1e400-159">In this case, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> in your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler will not be set to `true`, even though a cancellation request was made.</span></span> <span data-ttu-id="1e400-160">Essa situação é chamada uma *condição de corrida* e é um problema comum em programação multithread.</span><span class="sxs-lookup"><span data-stu-id="1e400-160">This situation is called a *race condition* and is a common concern in multithreaded programming.</span></span> <span data-ttu-id="1e400-161">Para obter mais informações sobre o design de multithreading problemas, consulte [gerenciados Threading práticas recomendadas](~/docs/standard/threading/managed-threading-best-practices.md).</span><span class="sxs-lookup"><span data-stu-id="1e400-161">For more information about multithreading design issues, see [Managed Threading Best Practices](~/docs/standard/threading/managed-threading-best-practices.md).</span></span>  
  
 <span data-ttu-id="1e400-162">Se a operação que produz um resultado, você pode atribuir o resultado para o <xref:System.ComponentModel.DoWorkEventArgs.Result%2A?displayProperty=nameWithType> propriedade.</span><span class="sxs-lookup"><span data-stu-id="1e400-162">If your operation produces a result, you can assign the result to the <xref:System.ComponentModel.DoWorkEventArgs.Result%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="1e400-163">Isso estará disponível para o <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> manipulador de eventos de <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType> propriedade.</span><span class="sxs-lookup"><span data-stu-id="1e400-163">This will be available to the <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler in the <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="1e400-164">Se a operação gerará uma exceção que não lidar com o seu código, o <xref:System.ComponentModel.BackgroundWorker> captura a exceção e o transmite para o <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> manipulador de eventos, onde ele é exposto como o <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> propriedade <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="1e400-164">If the operation raises an exception that your code does not handle, the <xref:System.ComponentModel.BackgroundWorker> catches the exception and passes it into the <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler, where it is exposed as the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType>.</span></span> <span data-ttu-id="1e400-165">Se você estiver executando sob o depurador do Visual Studio, o depurador será interrompido no ponto de <xref:System.ComponentModel.BackgroundWorker.DoWork> manipulador de eventos em que a exceção não tratada foi gerada.</span><span class="sxs-lookup"><span data-stu-id="1e400-165">If you are running under the Visual Studio debugger, the debugger will break at the point in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler where the unhandled exception was raised.</span></span> <span data-ttu-id="1e400-166">Se você tiver mais de um <xref:System.ComponentModel.BackgroundWorker>, você não deve referenciar qualquer um deles diretamente, pois isso seria acoplar o <xref:System.ComponentModel.BackgroundWorker.DoWork> manipulador de eventos para uma instância específica do <xref:System.ComponentModel.BackgroundWorker>.</span><span class="sxs-lookup"><span data-stu-id="1e400-166">If you have more than one <xref:System.ComponentModel.BackgroundWorker>, you should not reference any of them directly, as this would couple your <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler to a specific instance of <xref:System.ComponentModel.BackgroundWorker>.</span></span> <span data-ttu-id="1e400-167">Em vez disso, você deve acessar sua <xref:System.ComponentModel.BackgroundWorker> convertendo o `sender` parâmetro em sua <xref:System.ComponentModel.BackgroundWorker.DoWork> manipulador de eventos.</span><span class="sxs-lookup"><span data-stu-id="1e400-167">Instead, you should access your <xref:System.ComponentModel.BackgroundWorker> by casting the `sender` parameter in your <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler.</span></span>  
  
 <span data-ttu-id="1e400-168">Você deve ter cuidado para não manipular quaisquer objetos de interface do usuário no seu <xref:System.ComponentModel.BackgroundWorker.DoWork> manipulador de eventos.</span><span class="sxs-lookup"><span data-stu-id="1e400-168">You must be careful not to manipulate any user-interface objects in your <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler.</span></span> <span data-ttu-id="1e400-169">Em vez disso, se comunicar com a interface do usuário por meio de <xref:System.ComponentModel.BackgroundWorker> eventos.</span><span class="sxs-lookup"><span data-stu-id="1e400-169">Instead, communicate to the user interface through the <xref:System.ComponentModel.BackgroundWorker> events.</span></span>  
  
 <span data-ttu-id="1e400-170">Para obter mais informações sobre a manipulação de eventos, consulte [NIB: consumindo eventos](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).</span><span class="sxs-lookup"><span data-stu-id="1e400-170">For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1e400-171">O exemplo de código a seguir demonstra o uso do <xref:System.ComponentModel.BackgroundWorker.DoWork> evento para iniciar uma operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="1e400-171">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.DoWork> event to start an asynchronous operation.</span></span> <span data-ttu-id="1e400-172">Este exemplo de código é parte de um exemplo maior fornecido para a <xref:System.ComponentModel.BackgroundWorker> classe.</span><span class="sxs-lookup"><span data-stu-id="1e400-172">This code example is part of a larger example provided for the <xref:System.ComponentModel.BackgroundWorker> class.</span></span>  
  
 [!code-cpp[System.ComponentModel.BackgroundWorker#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#5)]
 [!code-csharp[System.ComponentModel.BackgroundWorker#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#5)]
 [!code-vb[System.ComponentModel.BackgroundWorker#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBusy">
      <MemberSignature Language="C#" Value="public bool IsBusy { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBusy" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.BackgroundWorker.IsBusy" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsBusy As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBusy { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1e400-173">Obtém um valor que indica se o <see cref="T:System.ComponentModel.BackgroundWorker" /> está executando uma operação assíncrona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e400-173">Gets a value indicating whether the <see cref="T:System.ComponentModel.BackgroundWorker" /> is running an asynchronous operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1e400-174">
            <see langword="true" />, se o <see cref="T:System.ComponentModel.BackgroundWorker" /> estiver executando uma operação assíncrona; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e400-174">
              <see langword="true" />, if the <see cref="T:System.ComponentModel.BackgroundWorker" /> is running an asynchronous operation; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e400-175">O <xref:System.ComponentModel.BackgroundWorker> inicia uma operação assíncrona ao chamar <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>.</span><span class="sxs-lookup"><span data-stu-id="1e400-175">The <xref:System.ComponentModel.BackgroundWorker> starts an asynchronous operation when you call <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1e400-176">O exemplo de código a seguir demonstra como usar o <xref:System.ComponentModel.BackgroundWorker.IsBusy%2A> propriedade para aguardar a conclusão de uma <xref:System.ComponentModel.BackgroundWorker> operação.</span><span class="sxs-lookup"><span data-stu-id="1e400-176">The following code example demonstrates how to use the <xref:System.ComponentModel.BackgroundWorker.IsBusy%2A> property to wait for completion of a <xref:System.ComponentModel.BackgroundWorker> operation.</span></span> <span data-ttu-id="1e400-177">Este exemplo de código é parte de um exemplo maior descrito em [como: baixar um arquivo no plano de fundo](~/docs/framework/winforms/controls/how-to-download-a-file-in-the-background.md).</span><span class="sxs-lookup"><span data-stu-id="1e400-177">This code example is part of a larger example described in [How to: Download a File in the Background](~/docs/framework/winforms/controls/how-to-download-a-file-in-the-background.md).</span></span>  
  
 [!code-csharp[System.ComponentModel.BackgroundWorker.IsBusy#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.IsBusy/CS/Form1.cs#2)]
 [!code-vb[System.ComponentModel.BackgroundWorker.IsBusy#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.IsBusy/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" />
        <altmember cref="T:System.EventArgs" />
        <altmember cref="Overload:System.ComponentModel.BackgroundWorker.RunWorkerAsync" />
      </Docs>
    </Member>
    <Member MemberName="OnDoWork">
      <MemberSignature Language="C#" Value="protected virtual void OnDoWork (System.ComponentModel.DoWorkEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDoWork(class System.ComponentModel.DoWorkEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.OnDoWork(System.ComponentModel.DoWorkEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDoWork (e As DoWorkEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDoWork(System::ComponentModel::DoWorkEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.DoWorkEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="1e400-178">Um <see cref="T:System.EventArgs" /> que contém os dados do evento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e400-178">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1e400-179">Aciona o evento <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e400-179">Raises the <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /> event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnProgressChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnProgressChanged (System.ComponentModel.ProgressChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnProgressChanged(class System.ComponentModel.ProgressChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnProgressChanged (e As ProgressChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnProgressChanged(System::ComponentModel::ProgressChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.ProgressChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="1e400-180">Um <see cref="T:System.EventArgs" /> que contém os dados do evento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e400-180">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1e400-181">Aciona o evento <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e400-181">Raises the <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e400-182">A geração de um evento invoca o manipulador de eventos por meio de um delegado.</span><span class="sxs-lookup"><span data-stu-id="1e400-182">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="1e400-183">Para obter mais informações, consulte [tratamento e gerando eventos](~/docs/standard/events/index.md).</span><span class="sxs-lookup"><span data-stu-id="1e400-183">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="1e400-184">O <xref:System.ComponentModel.BackgroundWorker.OnProgressChanged%2A> método também permite que classes derivadas manipular o evento sem anexar um representante.</span><span class="sxs-lookup"><span data-stu-id="1e400-184">The <xref:System.ComponentModel.BackgroundWorker.OnProgressChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="1e400-185">Isso é a técnica preferida para manipular o evento em uma classe derivada.</span><span class="sxs-lookup"><span data-stu-id="1e400-185">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1e400-186">O exemplo de código a seguir demonstra o uso do <xref:System.ComponentModel.BackgroundWorker.OnProgressChanged%2A> método para relatar o progresso de uma operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="1e400-186">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.OnProgressChanged%2A> method to report the progress of an asynchronous operation.</span></span> <span data-ttu-id="1e400-187">Este exemplo de código é parte de um exemplo maior fornecido para a <xref:System.ComponentModel.AsyncOperationManager> classe.</span><span class="sxs-lookup"><span data-stu-id="1e400-187">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager> class.</span></span>  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#24](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#24)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#24](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#24)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="1e400-188">Ao substituir <see cref="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)" /> em uma classe derivada, certifique-se de chamar a classe base <see cref="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)" /> método para que registrado delegados receber o evento.</span>
            <span class="sxs-lookup">
              <span data-stu-id="1e400-188">When overriding <see cref="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)" /> method so that registered delegates receive the event.</span>
            </span>
          </para>
        </block>
        <altmember cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnRunWorkerCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnRunWorkerCompleted (System.ComponentModel.RunWorkerCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRunWorkerCompleted(class System.ComponentModel.RunWorkerCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRunWorkerCompleted (e As RunWorkerCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRunWorkerCompleted(System::ComponentModel::RunWorkerCompletedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.RunWorkerCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="1e400-189">Um <see cref="T:System.EventArgs" /> que contém os dados do evento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e400-189">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1e400-190">Aciona o evento <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e400-190">Raises the <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e400-191">A geração de um evento invoca o manipulador de eventos por meio de um delegado.</span><span class="sxs-lookup"><span data-stu-id="1e400-191">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="1e400-192">Para obter mais informações, consulte [tratamento e gerando eventos](~/docs/standard/events/index.md).</span><span class="sxs-lookup"><span data-stu-id="1e400-192">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="1e400-193">O <xref:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted%2A> método também permite que classes derivadas manipular o evento sem anexar um representante.</span><span class="sxs-lookup"><span data-stu-id="1e400-193">The <xref:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="1e400-194">Isso é a técnica preferida para manipular o evento em uma classe derivada.</span><span class="sxs-lookup"><span data-stu-id="1e400-194">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="1e400-195">Ao substituir <see cref="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)" /> em uma classe derivada, certifique-se de chamar a classe base <see cref="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)" /> método para que registrado delegados receber o evento.</span>
            <span class="sxs-lookup">
              <span data-stu-id="1e400-195">When overriding <see cref="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)" /> method so that registered delegates receive the event.</span>
            </span>
          </para>
        </block>
        <altmember cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" />
      </Docs>
    </Member>
    <Member MemberName="ProgressChanged">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.ProgressChangedEventHandler ProgressChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.ProgressChangedEventHandler ProgressChanged" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.BackgroundWorker.ProgressChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ProgressChanged As ProgressChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::ProgressChangedEventHandler ^ ProgressChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ProgressChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1e400-196">Ocorre quando <see cref="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)" /> é chamado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e400-196">Occurs when <see cref="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)" /> is called.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e400-197">Esse evento é gerado quando você chamar o <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> método.</span><span class="sxs-lookup"><span data-stu-id="1e400-197">This event is raised when you call the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method.</span></span>  
  
 <span data-ttu-id="1e400-198">Para obter mais informações sobre a manipulação de eventos, consulte [NIB: consumindo eventos](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).</span><span class="sxs-lookup"><span data-stu-id="1e400-198">For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1e400-199">O exemplo de código a seguir demonstra o uso do <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> evento para relatar o progresso de uma operação assíncrona para o usuário.</span><span class="sxs-lookup"><span data-stu-id="1e400-199">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event to report the progress of an asynchronous operation to the user.</span></span> <span data-ttu-id="1e400-200">Este exemplo de código é parte de um exemplo maior fornecido para a <xref:System.ComponentModel.BackgroundWorker> classe.</span><span class="sxs-lookup"><span data-stu-id="1e400-200">This code example is part of a larger example provided for the <xref:System.ComponentModel.BackgroundWorker> class.</span></span>  
  
 [!code-cpp[System.ComponentModel.BackgroundWorker#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#7)]
 [!code-csharp[System.ComponentModel.BackgroundWorker#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#7)]
 [!code-vb[System.ComponentModel.BackgroundWorker#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReportProgress">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1e400-201">Aciona o evento <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e400-201">Raises the <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> event.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReportProgress">
      <MemberSignature Language="C#" Value="public void ReportProgress (int percentProgress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReportProgress(int32 percentProgress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReportProgress (percentProgress As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReportProgress(int percentProgress);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="percentProgress" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="percentProgress">
          <span data-ttu-id="1e400-202">O percentual, de 0 a 100, da operação em segundo plano concluída.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e400-202">The percentage, from 0 to 100, of the background operation that is complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1e400-203">Aciona o evento <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e400-203">Raises the <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e400-204">Se você precisar a relatar o andamento da operação em segundo plano, você pode chamar o <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> método para gerar o <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> evento.</span><span class="sxs-lookup"><span data-stu-id="1e400-204">If you need the background operation to report on its progress, you can call the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method to raise the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event.</span></span> <span data-ttu-id="1e400-205">O <xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A> o valor da propriedade deve ser `true`, ou <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> lançará um <xref:System.InvalidOperationException>.</span><span class="sxs-lookup"><span data-stu-id="1e400-205">The <xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A> property value must be `true`, or <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> will throw an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="1e400-206">Cabe a você implementar uma maneira significativa de medir o progresso da operação de seu plano de fundo como uma porcentagem do total da tarefa foi concluída.</span><span class="sxs-lookup"><span data-stu-id="1e400-206">It is up to you to implement a meaningful way of measuring your background operation's progress as a percentage of the total task completed.</span></span>  
  
 <span data-ttu-id="1e400-207">A chamada para o <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> método é assíncrono e retorna imediatamente.</span><span class="sxs-lookup"><span data-stu-id="1e400-207">The call to the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method is asynchronous and returns immediately.</span></span> <span data-ttu-id="1e400-208">O <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> manipulador de eventos é executado no thread que criou o <xref:System.ComponentModel.BackgroundWorker>.</span><span class="sxs-lookup"><span data-stu-id="1e400-208">The <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event handler executes on the thread that created the <xref:System.ComponentModel.BackgroundWorker>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1e400-209">O exemplo de código a seguir demonstra o uso do <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> método para relatar o progresso de uma operação assíncrona para o usuário.</span><span class="sxs-lookup"><span data-stu-id="1e400-209">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method to report the progress of an asynchronous operation to the user.</span></span> <span data-ttu-id="1e400-210">Este exemplo de código é parte de um exemplo maior fornecido para a <xref:System.ComponentModel.BackgroundWorker> classe.</span><span class="sxs-lookup"><span data-stu-id="1e400-210">This code example is part of a larger example provided for the <xref:System.ComponentModel.BackgroundWorker> class.</span></span>  
  
 [!code-cpp[System.ComponentModel.BackgroundWorker#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#8)]
 [!code-csharp[System.ComponentModel.BackgroundWorker#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#8)]
 [!code-vb[System.ComponentModel.BackgroundWorker#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1e400-211">A propriedade <see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /> é definida como <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e400-211">The <see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /> property is set to <see langword="false" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ReportProgress">
      <MemberSignature Language="C#" Value="public void ReportProgress (int percentProgress, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReportProgress(int32 percentProgress, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReportProgress (percentProgress As Integer, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReportProgress(int percentProgress, System::Object ^ userState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="percentProgress" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="percentProgress">
          <span data-ttu-id="1e400-212">O percentual, de 0 a 100, da operação em segundo plano concluída.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e400-212">The percentage, from 0 to 100, of the background operation that is complete.</span>
          </span>
        </param>
        <param name="userState">
          <span data-ttu-id="1e400-213">O objeto de estado passado para <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e400-213">The state object passed to <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1e400-214">Aciona o evento <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e400-214">Raises the <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e400-215">Se você precisar a relatar o andamento da operação em segundo plano, você pode chamar o <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> método para gerar o <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> evento.</span><span class="sxs-lookup"><span data-stu-id="1e400-215">If you need the background operation to report on its progress, you can call the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method to raise the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event.</span></span> <span data-ttu-id="1e400-216">O <xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A> o valor da propriedade deve `true`, ou <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> lançará um <xref:System.InvalidOperationException>.</span><span class="sxs-lookup"><span data-stu-id="1e400-216">The <xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A> property value must `true`, or <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> will throw an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="1e400-217">Cabe a você implementar uma maneira significativa de medir o progresso da operação de seu plano de fundo como uma porcentagem do total da tarefa foi concluída.</span><span class="sxs-lookup"><span data-stu-id="1e400-217">It is up to you to implement a meaningful way of measuring your background operation's progress as a percentage of the total task completed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1e400-218">O exemplo de código a seguir demonstra o uso do <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> método para relatar o progresso de uma operação assíncrona para o usuário.</span><span class="sxs-lookup"><span data-stu-id="1e400-218">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method to report the progress of an asynchronous operation to the user.</span></span> <span data-ttu-id="1e400-219">Este exemplo de código é parte de um exemplo maior fornecido para a <xref:System.Windows.Forms.ToolStripProgressBar> classe.</span><span class="sxs-lookup"><span data-stu-id="1e400-219">This code example is part of a larger example provided for the <xref:System.Windows.Forms.ToolStripProgressBar> class.</span></span>  
  
 [!code-csharp[System.Windows.Forms.ToolStripProgressBar#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ToolStripProgressBar/CS/form1.cs#10)]
 [!code-vb[System.Windows.Forms.ToolStripProgressBar#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ToolStripProgressBar/VB/form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1e400-220">A propriedade <see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /> é definida como <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e400-220">The <see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /> property is set to <see langword="false" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="RunWorkerAsync">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1e400-221">Inicia a execução de uma operação em segundo plano.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e400-221">Starts execution of a background operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RunWorkerAsync">
      <MemberSignature Language="C#" Value="public void RunWorkerAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RunWorkerAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub RunWorkerAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RunWorkerAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1e400-222">Inicia a execução de uma operação em segundo plano.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e400-222">Starts execution of a background operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e400-223">O <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> método envia uma solicitação para iniciar a operação de execução de forma assíncrona.</span><span class="sxs-lookup"><span data-stu-id="1e400-223">The <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method submits a request to start the operation running asynchronously.</span></span> <span data-ttu-id="1e400-224">Quando a solicitação é atendida, o <xref:System.ComponentModel.BackgroundWorker.DoWork> é gerado, que por sua vez inicia a execução de sua operação em segundo plano.</span><span class="sxs-lookup"><span data-stu-id="1e400-224">When the request is serviced, the <xref:System.ComponentModel.BackgroundWorker.DoWork> event is raised, which in turn starts execution of your background operation.</span></span>  
  
 <span data-ttu-id="1e400-225">Se a operação em segundo plano estiver sendo executado, chamando <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> irá gerar novamente uma <xref:System.InvalidOperationException>.</span><span class="sxs-lookup"><span data-stu-id="1e400-225">If the background operation is already running, calling <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> again will raise an <xref:System.InvalidOperationException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1e400-226">O exemplo de código a seguir demonstra o uso do <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> método para iniciar uma operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="1e400-226">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method to start an asynchronous operation.</span></span> <span data-ttu-id="1e400-227">Já faz parte de um exemplo maior descrito em [como: baixar um arquivo no plano de fundo](~/docs/framework/winforms/controls/how-to-download-a-file-in-the-background.md).</span><span class="sxs-lookup"><span data-stu-id="1e400-227">It is part of a larger example described in [How to: Download a File in the Background](~/docs/framework/winforms/controls/how-to-download-a-file-in-the-background.md).</span></span>  
  
 [!code-csharp[System.ComponentModel.BackgroundWorker.IsBusy#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.IsBusy/CS/Form1.cs#2)]
 [!code-vb[System.ComponentModel.BackgroundWorker.IsBusy#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.IsBusy/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1e400-228">
            <see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /> é <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e400-228">
              <see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <altmember cref="E:System.ComponentModel.BackgroundWorker.DoWork" />
      </Docs>
    </Member>
    <Member MemberName="RunWorkerAsync">
      <MemberSignature Language="C#" Value="public void RunWorkerAsync (object argument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RunWorkerAsync(object argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RunWorkerAsync (argument As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RunWorkerAsync(System::Object ^ argument);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argument" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="argument">
          <span data-ttu-id="1e400-229">Um parâmetro para uso pela operação em segundo plano a ser executado no manipulador de eventos <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e400-229">A parameter for use by the background operation to be executed in the <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /> event handler.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1e400-230">Inicia a execução de uma operação em segundo plano.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e400-230">Starts execution of a background operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e400-231">O <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> método envia uma solicitação para iniciar a operação de execução de forma assíncrona.</span><span class="sxs-lookup"><span data-stu-id="1e400-231">The <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method submits a request to start the operation running asynchronously.</span></span> <span data-ttu-id="1e400-232">Quando a solicitação é atendida, o <xref:System.ComponentModel.BackgroundWorker.DoWork> é gerado, que por sua vez inicia a execução de sua operação em segundo plano.</span><span class="sxs-lookup"><span data-stu-id="1e400-232">When the request is serviced, the <xref:System.ComponentModel.BackgroundWorker.DoWork> event is raised, which in turn starts execution of your background operation.</span></span>  
  
 <span data-ttu-id="1e400-233">Se a operação exige um parâmetro, você pode fornecer como o `argument` parâmetro <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>.</span><span class="sxs-lookup"><span data-stu-id="1e400-233">If your operation requires a parameter, you can provide it as the `argument` parameter to <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>.</span></span>  
  
 <span data-ttu-id="1e400-234">Se a operação em segundo plano estiver sendo executado, chamando <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> irá gerar novamente uma <xref:System.InvalidOperationException>.</span><span class="sxs-lookup"><span data-stu-id="1e400-234">If the background operation is already running, calling <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> again will raise an <xref:System.InvalidOperationException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1e400-235">O exemplo de código a seguir demonstra o uso do <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> método para iniciar uma operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="1e400-235">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method to start an asynchronous operation.</span></span> <span data-ttu-id="1e400-236">Este exemplo de código é parte de um exemplo maior fornecido para a <xref:System.ComponentModel.BackgroundWorker> classe.</span><span class="sxs-lookup"><span data-stu-id="1e400-236">This code example is part of a larger example provided for the <xref:System.ComponentModel.BackgroundWorker> class.</span></span>  
  
 [!code-cpp[System.ComponentModel.BackgroundWorker#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#3)]
 [!code-csharp[System.ComponentModel.BackgroundWorker#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#3)]
 [!code-vb[System.ComponentModel.BackgroundWorker#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1e400-237">
            <see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /> é <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e400-237">
              <see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <altmember cref="E:System.ComponentModel.BackgroundWorker.DoWork" />
      </Docs>
    </Member>
    <Member MemberName="RunWorkerCompleted">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.RunWorkerCompletedEventHandler RunWorkerCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.RunWorkerCompletedEventHandler RunWorkerCompleted" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RunWorkerCompleted As RunWorkerCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::RunWorkerCompletedEventHandler ^ RunWorkerCompleted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.RunWorkerCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1e400-238">Ocorre quando a operação em segundo plano foi concluída, cancelada ou gerou uma exceção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e400-238">Occurs when the background operation has completed, has been canceled, or has raised an exception.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e400-239">Esse evento é gerado quando o <xref:System.ComponentModel.BackgroundWorker.DoWork> retorna do manipulador de eventos.</span><span class="sxs-lookup"><span data-stu-id="1e400-239">This event is raised when the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler returns.</span></span>  
  
 <span data-ttu-id="1e400-240">Se a operação for concluída com êxito e o resultado é atribuído a <xref:System.ComponentModel.BackgroundWorker.DoWork> manipulador de eventos, você pode acessar o resultado por meio de <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType> propriedade.</span><span class="sxs-lookup"><span data-stu-id="1e400-240">If the operation completes successfully and its result is assigned in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler, you can access the result through the <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="1e400-241">O <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> propriedade <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> indica que uma exceção foi lançada pela operação.</span><span class="sxs-lookup"><span data-stu-id="1e400-241">The <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> indicates that an exception was thrown by the operation.</span></span>  
  
 <span data-ttu-id="1e400-242">O <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> propriedade <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> indica se uma solicitação de cancelamento foi processada pela operação em segundo plano.</span><span class="sxs-lookup"><span data-stu-id="1e400-242">The <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> indicates whether a cancellation request was processed by the background operation.</span></span> <span data-ttu-id="1e400-243">Se seu código no <xref:System.ComponentModel.BackgroundWorker.DoWork> manipulador de eventos detecta uma solicitação de cancelamento, verificando o <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> sinalizador e configuração de <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> sinalizador de <xref:System.ComponentModel.DoWorkEventArgs?displayProperty=nameWithType> para `true`, o <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> sinalizador de <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> também será definido como `true`.</span><span class="sxs-lookup"><span data-stu-id="1e400-243">If your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler detects a cancellation request by checking the <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> flag and setting the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> flag of <xref:System.ComponentModel.DoWorkEventArgs?displayProperty=nameWithType> to `true`, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> also will be set to `true`.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="1e400-244">Lembre-se que o código a <xref:System.ComponentModel.BackgroundWorker.DoWork> manipulador de eventos pode concluir seu trabalho como uma solicitação de cancelamento está sendo feita, e o loop de sondagem pode perder <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> sendo definido como `true`.</span><span class="sxs-lookup"><span data-stu-id="1e400-244">Be aware that your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> being set to `true`.</span></span> <span data-ttu-id="1e400-245">Nesse caso, o <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> sinalizador de <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> no seu <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> manipulador de eventos não será definido como `true`, mesmo que foi feita uma solicitação de cancelamento.</span><span class="sxs-lookup"><span data-stu-id="1e400-245">In this case, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> in your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler will not be set to `true`, even though a cancellation request was made.</span></span> <span data-ttu-id="1e400-246">Essa situação é chamada uma *condição de corrida* e é um problema comum em programação multithread.</span><span class="sxs-lookup"><span data-stu-id="1e400-246">This situation is called a *race condition* and is a common concern in multithreaded programming.</span></span> <span data-ttu-id="1e400-247">Para obter mais informações sobre o design de multithreading problemas, consulte [gerenciados Threading práticas recomendadas](~/docs/standard/threading/managed-threading-best-practices.md).</span><span class="sxs-lookup"><span data-stu-id="1e400-247">For more information about multithreading design issues, see [Managed Threading Best Practices](~/docs/standard/threading/managed-threading-best-practices.md).</span></span>  
  
 <span data-ttu-id="1e400-248">O <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> manipulador de eventos deve sempre verificar o <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A?displayProperty=nameWithType> e <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A?displayProperty=nameWithType> propriedades antes de acessar o <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType> propriedade.</span><span class="sxs-lookup"><span data-stu-id="1e400-248">Your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler should always check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A?displayProperty=nameWithType> and <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A?displayProperty=nameWithType> properties before accessing the <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="1e400-249">Se uma exceção foi gerada ou se a operação foi cancelada, acessando o <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType> propriedade gera uma exceção.</span><span class="sxs-lookup"><span data-stu-id="1e400-249">If an exception was raised or if the operation was canceled, accessing the <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType> property raises an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1e400-250">O exemplo de código a seguir demonstra o uso do <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> evento para manipular o resultado de uma operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="1e400-250">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event to handle the result of an asynchronous operation.</span></span> <span data-ttu-id="1e400-251">Este exemplo de código é parte de um exemplo maior fornecido para a <xref:System.ComponentModel.BackgroundWorker> classe.</span><span class="sxs-lookup"><span data-stu-id="1e400-251">This code example is part of a larger example provided for the <xref:System.ComponentModel.BackgroundWorker> class.</span></span>  
  
 [!code-cpp[System.ComponentModel.BackgroundWorker#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#6)]
 [!code-csharp[System.ComponentModel.BackgroundWorker#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#6)]
 [!code-vb[System.ComponentModel.BackgroundWorker#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkerReportsProgress">
      <MemberSignature Language="C#" Value="public bool WorkerReportsProgress { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool WorkerReportsProgress" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" />
      <MemberSignature Language="VB.NET" Value="Public Property WorkerReportsProgress As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool WorkerReportsProgress { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1e400-252">Obtém ou define um valor que indica se o <see cref="T:System.ComponentModel.BackgroundWorker" /> pode relatar atualizações de progresso.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e400-252">Gets or sets a value indicating whether the <see cref="T:System.ComponentModel.BackgroundWorker" /> can report progress updates.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1e400-253">
            <see langword="true" /> se <see cref="T:System.ComponentModel.BackgroundWorker" /> der suporte a atualizações de progresso; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e400-253">
              <see langword="true" /> if the <see cref="T:System.ComponentModel.BackgroundWorker" /> supports progress updates; otherwise <see langword="false" />.</span>
          </span>
          <span data-ttu-id="1e400-254">O padrão é <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e400-254">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e400-255">Definir o <xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A> propriedade `true` se você quiser que o <xref:System.ComponentModel.BackgroundWorker> para oferecer suporte a atualizações de andamento.</span><span class="sxs-lookup"><span data-stu-id="1e400-255">Set the <xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A> property to `true` if you want the <xref:System.ComponentModel.BackgroundWorker> to support progress updates.</span></span> <span data-ttu-id="1e400-256">Quando essa propriedade é `true`, código do usuário pode chamar o <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> método para gerar o <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> evento.</span><span class="sxs-lookup"><span data-stu-id="1e400-256">When this property is `true`, user code can call the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method to raise the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="WorkerSupportsCancellation">
      <MemberSignature Language="C#" Value="public bool WorkerSupportsCancellation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool WorkerSupportsCancellation" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation" />
      <MemberSignature Language="VB.NET" Value="Public Property WorkerSupportsCancellation As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool WorkerSupportsCancellation { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1e400-257">Obtém ou define um valor que indica se o <see cref="T:System.ComponentModel.BackgroundWorker" /> dá suporte ao cancelamento assíncrono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e400-257">Gets or sets a value indicating whether the <see cref="T:System.ComponentModel.BackgroundWorker" /> supports asynchronous cancellation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1e400-258">
            <see langword="true" /> se o <see cref="T:System.ComponentModel.BackgroundWorker" /> der suporte ao cancelamento; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e400-258">
              <see langword="true" /> if the <see cref="T:System.ComponentModel.BackgroundWorker" /> supports cancellation; otherwise <see langword="false" />.</span>
          </span>
          <span data-ttu-id="1e400-259">O padrão é <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e400-259">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e400-260">Definir o <xref:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation%2A> propriedade `true` se você quiser que o <xref:System.ComponentModel.BackgroundWorker> para oferecer suporte ao cancelamento.</span><span class="sxs-lookup"><span data-stu-id="1e400-260">Set the <xref:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation%2A> property to `true` if you want the <xref:System.ComponentModel.BackgroundWorker> to support cancellation.</span></span> <span data-ttu-id="1e400-261">Quando essa propriedade é `true`, você pode chamar o <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> método para interromper uma operação em segundo plano.</span><span class="sxs-lookup"><span data-stu-id="1e400-261">When this property is `true`, you can call the <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> method to interrupt a background operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.BackgroundWorker.CancelAsync" />
      </Docs>
    </Member>
  </Members>
</Type>