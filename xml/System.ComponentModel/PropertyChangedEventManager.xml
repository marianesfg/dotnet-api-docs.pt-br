<Type Name="PropertyChangedEventManager" FullName="System.ComponentModel.PropertyChangedEventManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b8a15a4a812146e0c01fceb2d69a7dae5cef4b53" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37690935" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class PropertyChangedEventManager : System.Windows.WeakEventManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PropertyChangedEventManager extends System.Windows.WeakEventManager" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.PropertyChangedEventManager" />
  <TypeSignature Language="VB.NET" Value="Public Class PropertyChangedEventManager&#xA;Inherits WeakEventManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class PropertyChangedEventManager : System::Windows::WeakEventManager" />
  <TypeSignature Language="F#" Value="type PropertyChangedEventManager = class&#xA;    inherit WeakEventManager" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.WeakEventManager</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="af63b-101">Fornece uma implementação <see cref="T:System.Windows.WeakEventManager" /> para que seja possível usar o padrão “ouvinte de eventos fraco” para anexar ouvintes ao evento <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="af63b-101">Provides a <see cref="T:System.Windows.WeakEventManager" /> implementation so that you can use the "weak event listener" pattern to attach listeners for the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af63b-102">Para que seja ouvintes nesse padrão, os objetos de ouvinte devem implementar <xref:System.Windows.IWeakEventListener>.</span><span class="sxs-lookup"><span data-stu-id="af63b-102">In order to be listeners in this pattern, your listener objects must implement <xref:System.Windows.IWeakEventListener>.</span></span> <span data-ttu-id="af63b-103">Você não precisa implementar <xref:System.Windows.IWeakEventListener> na classe que é a origem dos eventos.</span><span class="sxs-lookup"><span data-stu-id="af63b-103">You do not need to implement <xref:System.Windows.IWeakEventListener> on the class that is the source of the events.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.IWeakEventListener" />
  </Docs>
  <Members>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public static void AddHandler (System.ComponentModel.INotifyPropertyChanged source, EventHandler&lt;System.ComponentModel.PropertyChangedEventArgs&gt; handler, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddHandler(class System.ComponentModel.INotifyPropertyChanged source, class System.EventHandler`1&lt;class System.ComponentModel.PropertyChangedEventArgs&gt; handler, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.PropertyChangedEventManager.AddHandler(System.ComponentModel.INotifyPropertyChanged,System.EventHandler{System.ComponentModel.PropertyChangedEventArgs},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddHandler (source As INotifyPropertyChanged, handler As EventHandler(Of PropertyChangedEventArgs), propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddHandler(System::ComponentModel::INotifyPropertyChanged ^ source, EventHandler&lt;System::ComponentModel::PropertyChangedEventArgs ^&gt; ^ handler, System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="static member AddHandler : System.ComponentModel.INotifyPropertyChanged * EventHandler&lt;System.ComponentModel.PropertyChangedEventArgs&gt; * string -&gt; unit" Usage="System.ComponentModel.PropertyChangedEventManager.AddHandler (source, handler, propertyName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ComponentModel.INotifyPropertyChanged" />
        <Parameter Name="handler" Type="System.EventHandler&lt;System.ComponentModel.PropertyChangedEventArgs&gt;" />
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="af63b-104">O objeto de origem que gera o evento <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af63b-104">The source object that the raises the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event.</span>
          </span>
        </param>
        <param name="handler">
          <span data-ttu-id="af63b-105">O delegado que manipula o evento <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af63b-105">The delegate that handles the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event.</span>
          </span>
        </param>
        <param name="propertyName">
          <span data-ttu-id="af63b-106">O nome da propriedade que existe em <c>source</c>, na qual escutar em busca de alterações.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af63b-106">The name of the property that exists on <c>source</c> upon which to listen for changes.</span>
          </span>
          <span data-ttu-id="af63b-107">Defina como <see cref="F:System.String.Empty" /> para indicar "qualquer propriedade".</span>
          <span class="sxs-lookup">
            <span data-stu-id="af63b-107">Set to <see cref="F:System.String.Empty" /> to indicate "any property".</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="af63b-108">Adiciona o manipulador de eventos especificado, que é chamado quando a origem especificada gera o evento <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> para a propriedade especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af63b-108">Adds the specified event handler, which is called when specified source raises the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event for the specified property.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af63b-109">Use esse método para especificar o manipulador de eventos que você deseja usar para assinar o <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> eventos...</span><span class="sxs-lookup"><span data-stu-id="af63b-109">Use this method to specify the event handler you want to use to subscribe to the <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> event..</span></span>  <span data-ttu-id="af63b-110">Quando você usa esse método, seu objeto de ouvinte não precisa implementar o <xref:System.Windows.IWeakEventListener> interface.</span><span class="sxs-lookup"><span data-stu-id="af63b-110">When you use this method, your listener object does not need to implement the <xref:System.Windows.IWeakEventListener> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="af63b-111">
            <paramref name="handler" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af63b-111">
              <paramref name="handler" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="af63b-112">Mais de um método está associado a <paramref name="handler" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af63b-112">More than one method is associated with <paramref name="handler" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AddListener">
      <MemberSignature Language="C#" Value="public static void AddListener (System.ComponentModel.INotifyPropertyChanged source, System.Windows.IWeakEventListener listener, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddListener(class System.ComponentModel.INotifyPropertyChanged source, class System.Windows.IWeakEventListener listener, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.PropertyChangedEventManager.AddListener(System.ComponentModel.INotifyPropertyChanged,System.Windows.IWeakEventListener,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddListener (source As INotifyPropertyChanged, listener As IWeakEventListener, propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddListener(System::ComponentModel::INotifyPropertyChanged ^ source, System::Windows::IWeakEventListener ^ listener, System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="static member AddListener : System.ComponentModel.INotifyPropertyChanged * System.Windows.IWeakEventListener * string -&gt; unit" Usage="System.ComponentModel.PropertyChangedEventManager.AddListener (source, listener, propertyName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ComponentModel.INotifyPropertyChanged" />
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="af63b-113">O objeto com o evento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af63b-113">The object with the event.</span>
          </span>
        </param>
        <param name="listener">
          <span data-ttu-id="af63b-114">O objeto a ser adicionado como um ouvinte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af63b-114">The object to add as a listener.</span>
          </span>
        </param>
        <param name="propertyName">
          <span data-ttu-id="af63b-115">O nome da propriedade que existe em <c>source</c>, na qual escutar em busca de alterações.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af63b-115">The name of the property that exists on <c>source</c> upon which to listen for changes.</span>
          </span>
          <span data-ttu-id="af63b-116">Defina como <see cref="F:System.String.Empty" /> para indicar "qualquer propriedade".</span>
          <span class="sxs-lookup">
            <span data-stu-id="af63b-116">Set to <see cref="F:System.String.Empty" /> to indicate "any property".</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="af63b-117">Adiciona o ouvinte especificado à lista de ouvintes na fonte especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af63b-117">Adds the specified listener to the list of listeners on the specified source.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
      </Docs>
    </Member>
    <Member MemberName="NewListenerList">
      <MemberSignature Language="C#" Value="protected override System.Windows.WeakEventManager.ListenerList NewListenerList ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.WeakEventManager/ListenerList NewListenerList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.PropertyChangedEventManager.NewListenerList" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function NewListenerList () As WeakEventManager.ListenerList" />
      <MemberSignature Language="F#" Value="override this.NewListenerList : unit -&gt; System.Windows.WeakEventManager.ListenerList" Usage="propertyChangedEventManager.NewListenerList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager+ListenerList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="af63b-118">Retorna um novo objeto para conter ouvintes do evento <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af63b-118">Returns a new object to contain listeners to the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="af63b-119">Um novo objeto para conter ouvintes do evento <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af63b-119">A new object to contain listeners to the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Purge">
      <MemberSignature Language="C#" Value="protected override bool Purge (object source, object data, bool purgeAll);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool Purge(object source, object data, bool purgeAll) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.PropertyChangedEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function Purge (source As Object, data As Object, purgeAll As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool Purge(System::Object ^ source, System::Object ^ data, bool purgeAll);" />
      <MemberSignature Language="F#" Value="override this.Purge : obj * obj * bool -&gt; bool" Usage="propertyChangedEventManager.Purge (source, data, purgeAll)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="data" Type="System.Object" />
        <Parameter Name="purgeAll" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="af63b-120">Objeto de origem do qual remover todos os ouvintes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af63b-120">Source object to remove all listeners from.</span>
          </span>
        </param>
        <param name="data">
          <span data-ttu-id="af63b-121">Os dados a serem limpos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af63b-121">The data to purge.</span>
          </span>
          <span data-ttu-id="af63b-122">Espera-se que isso seja um <see cref="T:System.Collections.Specialized.HybridDictionary" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af63b-122">This is expected to be a <see cref="T:System.Collections.Specialized.HybridDictionary" />.</span>
          </span>
        </param>
        <param name="purgeAll">
          <span data-ttu-id="af63b-123">Definido como <see langword="true" /> a fim de parar de escutar e remover completamente todos os dados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af63b-123">Set to <see langword="true" /> to stop listening and to completely remove all data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="af63b-124">Remove os ouvintes que não estão mais ativos dos dados para a origem fornecida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af63b-124">Removes listeners that are no longer active from the data for the provided source.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="af63b-125">
            <see langword="true" /> se algumas entradas foram removidas, caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af63b-125">
              <see langword="true" /> if some entries were removed; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
      </Docs>
    </Member>
    <Member MemberName="RemoveHandler">
      <MemberSignature Language="C#" Value="public static void RemoveHandler (System.ComponentModel.INotifyPropertyChanged source, EventHandler&lt;System.ComponentModel.PropertyChangedEventArgs&gt; handler, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveHandler(class System.ComponentModel.INotifyPropertyChanged source, class System.EventHandler`1&lt;class System.ComponentModel.PropertyChangedEventArgs&gt; handler, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.PropertyChangedEventManager.RemoveHandler(System.ComponentModel.INotifyPropertyChanged,System.EventHandler{System.ComponentModel.PropertyChangedEventArgs},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveHandler (source As INotifyPropertyChanged, handler As EventHandler(Of PropertyChangedEventArgs), propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveHandler(System::ComponentModel::INotifyPropertyChanged ^ source, EventHandler&lt;System::ComponentModel::PropertyChangedEventArgs ^&gt; ^ handler, System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="static member RemoveHandler : System.ComponentModel.INotifyPropertyChanged * EventHandler&lt;System.ComponentModel.PropertyChangedEventArgs&gt; * string -&gt; unit" Usage="System.ComponentModel.PropertyChangedEventManager.RemoveHandler (source, handler, propertyName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ComponentModel.INotifyPropertyChanged" />
        <Parameter Name="handler" Type="System.EventHandler&lt;System.ComponentModel.PropertyChangedEventArgs&gt;" />
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="af63b-126">O objeto de origem que gera o evento <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af63b-126">The source object that the raises the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event.</span>
          </span>
        </param>
        <param name="handler">
          <span data-ttu-id="af63b-127">O delegado que manipula o evento <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af63b-127">The delegate that handles the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event.</span>
          </span>
        </param>
        <param name="propertyName">
          <span data-ttu-id="af63b-128">O nome da propriedade que existe em <c>source</c>, na qual parar de escutar em busca de alterações.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af63b-128">The name of the property that exists on <c>source</c> upon which to stop listening for changes.</span>
          </span>
          <span data-ttu-id="af63b-129">Defina como <see cref="F:System.String.Empty" /> para indicar "qualquer propriedade".</span>
          <span class="sxs-lookup">
            <span data-stu-id="af63b-129">Set to <see cref="F:System.String.Empty" /> to indicate "any property".</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="af63b-130">Remove o manipulador de eventos especificado da fonte especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af63b-130">Removes the specified event handler from the specified source.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="af63b-131">
            <paramref name="handler" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af63b-131">
              <paramref name="handler" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="af63b-132">Mais de um método está associado a <paramref name="handler" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af63b-132">More than one method is associated with <paramref name="handler" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveListener">
      <MemberSignature Language="C#" Value="public static void RemoveListener (System.ComponentModel.INotifyPropertyChanged source, System.Windows.IWeakEventListener listener, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveListener(class System.ComponentModel.INotifyPropertyChanged source, class System.Windows.IWeakEventListener listener, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.PropertyChangedEventManager.RemoveListener(System.ComponentModel.INotifyPropertyChanged,System.Windows.IWeakEventListener,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveListener (source As INotifyPropertyChanged, listener As IWeakEventListener, propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveListener(System::ComponentModel::INotifyPropertyChanged ^ source, System::Windows::IWeakEventListener ^ listener, System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="static member RemoveListener : System.ComponentModel.INotifyPropertyChanged * System.Windows.IWeakEventListener * string -&gt; unit" Usage="System.ComponentModel.PropertyChangedEventManager.RemoveListener (source, listener, propertyName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ComponentModel.INotifyPropertyChanged" />
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="af63b-133">O objeto do qual remover o ouvinte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af63b-133">The object to remove the listener from.</span>
          </span>
        </param>
        <param name="listener">
          <span data-ttu-id="af63b-134">O ouvinte a ser removido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af63b-134">The listener to remove.</span>
          </span>
        </param>
        <param name="propertyName">
          <span data-ttu-id="af63b-135">O nome da propriedade que existe em <c>source</c>, na qual parar de escutar em busca de alterações.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af63b-135">The name of the property that exists on <c>source</c> upon which to stop listening for changes.</span>
          </span>
          <span data-ttu-id="af63b-136">Defina como <see cref="F:System.String.Empty" /> para indicar "qualquer propriedade".</span>
          <span class="sxs-lookup">
            <span data-stu-id="af63b-136">Set to <see cref="F:System.String.Empty" /> to indicate "any property".</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="af63b-137">Remove o ouvinte especificado da lista de ouvintes na origem especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af63b-137">Removes the specified listener from the list of listeners on the provided source.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
      </Docs>
    </Member>
    <Member MemberName="StartListening">
      <MemberSignature Language="C#" Value="protected override void StartListening (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void StartListening(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.PropertyChangedEventManager.StartListening(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub StartListening (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void StartListening(System::Object ^ source);" />
      <MemberSignature Language="F#" Value="override this.StartListening : obj -&gt; unit" Usage="propertyChangedEventManager.StartListening source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="af63b-138">O objeto no qual começar a escutar <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af63b-138">The object on which to start listening for <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="af63b-139">Começa a escutar o evento <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> na origem fornecida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af63b-139">Begins listening for the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event on the provided source.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af63b-140">Isso não especifica uma propriedade; Depois que o Gerenciador de eventos é iniciado, todas as propriedades na fonte de terá <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> notificação habilitada.</span><span class="sxs-lookup"><span data-stu-id="af63b-140">This does not specify a property; once the event manager is started, all properties on the source will have <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> notification enabled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
      </Docs>
    </Member>
    <Member MemberName="StopListening">
      <MemberSignature Language="C#" Value="protected override void StopListening (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void StopListening(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.PropertyChangedEventManager.StopListening(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub StopListening (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void StopListening(System::Object ^ source);" />
      <MemberSignature Language="F#" Value="override this.StopListening : obj -&gt; unit" Usage="propertyChangedEventManager.StopListening source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="af63b-141">O objeto de origem no qual deixar de escutar <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af63b-141">The source object on which to stop listening for <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="af63b-142">Para de escutar o evento <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> na origem fornecida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af63b-142">Stops listening for the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event on the provided source.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
      </Docs>
    </Member>
  </Members>
</Type>