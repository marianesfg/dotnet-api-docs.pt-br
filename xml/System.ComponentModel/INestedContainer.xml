<Type Name="INestedContainer" FullName="System.ComponentModel.INestedContainer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="583e123f6057aeb9827a161adfe0401ae17afc2f" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface INestedContainer : IDisposable, System.ComponentModel.IContainer" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract INestedContainer implements class System.ComponentModel.IContainer, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.INestedContainer" />
  <TypeSignature Language="VB.NET" Value="Public Interface INestedContainer&#xA;Implements IContainer, IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class INestedContainer : IDisposable, System::ComponentModel::IContainer" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.IContainer</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="87d33-101">Fornece funcionalidade para contêineres aninhados, que logicamente contêm zero ou mais outros componentes e pertencem a um componente pai.</span>
      <span class="sxs-lookup">
        <span data-stu-id="87d33-101">Provides functionality for nested containers, which logically contain zero or more other components and are owned by a parent component.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87d33-102">O <xref:System.ComponentModel.INestedContainer> interface adiciona o conceito de um componente de proprietário para o <xref:System.ComponentModel.IContainer> interface.</span><span class="sxs-lookup"><span data-stu-id="87d33-102">The <xref:System.ComponentModel.INestedContainer> interface adds the concept of an owning component to the <xref:System.ComponentModel.IContainer> interface.</span></span> <span data-ttu-id="87d33-103">Um contêiner aninhado é um objeto que logicamente, mas não necessariamente visualmente, contém zero ou mais componentes do filho e pertence a algum componente pai.</span><span class="sxs-lookup"><span data-stu-id="87d33-103">A nested container is an object that logically, but not necessarily visually, contains zero or more child components and is owned by some parent component.</span></span> <span data-ttu-id="87d33-104">Para contenção visual, o componente proprietário costuma ser outro contêiner.</span><span class="sxs-lookup"><span data-stu-id="87d33-104">For visual containment, the owning component is often another container.</span></span>  
  
 <span data-ttu-id="87d33-105">Contêineres aninhados permitem seções de um controle para ser projetáveis, sem a necessidade de uma variável de membro serializado explícito ou um serializador personalizado para cada subcontrole.</span><span class="sxs-lookup"><span data-stu-id="87d33-105">Nested containers allow sections of a control to be designable, without requiring an explicit serialized member variable or a custom serializer for each subcontrol.</span></span> <span data-ttu-id="87d33-106">Em vez disso, o designer de formulário mantém um contêiner mestre dos componentes.</span><span class="sxs-lookup"><span data-stu-id="87d33-106">Instead, the form designer maintains one master container of components.</span></span> <span data-ttu-id="87d33-107">Site de cada componente pode ter um contêiner aninhado que fornece um local para colocar os componentes extras.</span><span class="sxs-lookup"><span data-stu-id="87d33-107">Each component’s site may have a nested container that provides a place to put extra components.</span></span> <span data-ttu-id="87d33-108">Quando um componente está localizado em um contêiner aninhado, o nome que ele recebe é uma combinação de seu nome e o nome do componente de seu proprietário.</span><span class="sxs-lookup"><span data-stu-id="87d33-108">When a component is sited in a nested container, the name it receives is a combination of its given name and its owning component’s name.</span></span> <span data-ttu-id="87d33-109">Além disso, componentes adicionadas a um contêiner aninhado têm acesso completo aos serviços do contêiner pai e o contêiner aninhado fornece o mesmo comportamento do pai em relação à adição de novos componentes.</span><span class="sxs-lookup"><span data-stu-id="87d33-109">Additionally, components added to a nested container have full access to the services of the parent container, and the nested container provides the same behavior of the parent with respect to adding new components.</span></span> <span data-ttu-id="87d33-110">O contêiner aninhado criará o designer para cada componente que ele contém, habilitando suporte de tempo de design.</span><span class="sxs-lookup"><span data-stu-id="87d33-110">The nested container will create the designer for each component it contains, thereby enabling design-time support.</span></span> <span data-ttu-id="87d33-111">Porque os serializadores de código padrão não examinar contêineres aninhados, esses componentes só são serializados se um caminho para eles pode ser obtido percorrendo os componentes no contêiner primário.</span><span class="sxs-lookup"><span data-stu-id="87d33-111">Because standard code serializers do not look at nested containers, these components are only serialized if a path to them can be obtained by walking the components in the primary container.</span></span>  
  
 <span data-ttu-id="87d33-112">Contêineres aninhados podem ser encontrados ao consultar o site do componente para serviços do tipo <xref:System.ComponentModel.INestedContainer>.</span><span class="sxs-lookup"><span data-stu-id="87d33-112">Nested containers can be found by querying a component's site for services of type <xref:System.ComponentModel.INestedContainer>.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.NestedContainer" />
    <altmember cref="T:System.ComponentModel.ContainerFilterService" />
    <altmember cref="M:System.ComponentModel.NestedContainer.GetService(System.Type)" />
  </Docs>
  <Members>
    <Member MemberName="Owner">
      <MemberSignature Language="C#" Value="public System.ComponentModel.IComponent Owner { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.IComponent Owner" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.INestedContainer.Owner" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Owner As IComponent" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::IComponent ^ Owner { System::ComponentModel::IComponent ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.IComponent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="87d33-113">Obtém o componente proprietário do contêiner aninhado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87d33-113">Gets the owning component for the nested container.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="87d33-114">O <see cref="T:System.ComponentModel.IComponent" /> que possui o contêiner aninhado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87d33-114">The <see cref="T:System.ComponentModel.IComponent" /> that owns the nested container.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87d33-115">O componente proprietário é a característica que diferencia contêineres aninhados de contêineres comuns.</span><span class="sxs-lookup"><span data-stu-id="87d33-115">The owning component is the characteristic that differentiates nested containers from ordinary containers.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.IComponent" />
        <altmember cref="T:System.ComponentModel.IContainer" />
        <altmember cref="P:System.ComponentModel.NestedContainer.Owner" />
      </Docs>
    </Member>
  </Members>
</Type>