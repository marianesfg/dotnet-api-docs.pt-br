<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="AsyncOperation.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac527b3f4ff3ed46bf8dc07465aaecd985e0ada7d95.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">27b3f4ff3ed46bf8dc07465aaecd985e0ada7d95</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.AsyncOperation">
          <source>Tracks the lifetime of an asynchronous operation.</source>
          <target state="translated">Controla o tempo de vida de uma operação assíncrona.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperation">
          <source>When you implement a class according to the <bpt id="p1">[</bpt>Event-based Asynchronous Pattern Overview<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)</ept>, you may need to track the lifetime of each asynchronous operation invoked on an instance of your class.</source>
          <target state="translated">Quando você implementa uma classe de acordo com o <bpt id="p1">[</bpt>baseado em evento visão geral do padrão assíncrono<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)</ept>, talvez seja necessário controlar o tempo de vida de cada operação assíncrona invocado em uma instância de sua classe.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperation">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> class provides ways to track and report the progress of an asynchronous task.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> classe fornece maneiras de rastrear e reportar o progresso de uma tarefa assíncrona.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperation">
          <source>The following list identifies ways to use an <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> object:</source>
          <target state="translated">A lista a seguir identifica maneiras de usar um <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> objeto:</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperation">
          <source>To report progress and interim results to the client, call <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.Post%2A&gt;</ph> from your asynchronous worker code.</source>
          <target state="translated">Para relatar o andamento e os resultados intermediários para o cliente, chame <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.Post%2A&gt;</ph> do seu código de trabalho assíncrono.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperation">
          <source>To indicate that an asynchronous task has completed, or to cancel a pending asynchronous task, call <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A&gt;</ph>.</source>
          <target state="translated">Para indicar que uma tarefa assíncrona foi concluída, ou cancelar uma tarefa assíncrona pendente, chame <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperation">
          <source>Your class should get an <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> object for each asynchronous task by calling <ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType&gt;</ph> when each task starts.</source>
          <target state="translated">A classe deve obter um <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> objeto para cada tarefa assíncrona chamando <ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType&gt;</ph> quando cada tarefa é iniciada.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperation">
          <source>To allow the client to distinguish separate asynchronous tasks, <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType&gt;</ph> takes a parameter for a unique client-provided token, which becomes the <ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A&gt;</ph> property.</source>
          <target state="translated">Para permitir que o cliente distinguir tarefas assíncronas separadas, <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType&gt;</ph> usa um parâmetro para um único token fornecidas pelo cliente, que se torna o <ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperation">
          <source>It can then be used by client code to identify the particular asynchronous task that is raising progress or completion events.</source>
          <target state="translated">Ele, em seguida, pode ser usado pelo código do cliente para identificar a tarefa assíncrona específica que está gerando eventos de progresso ou a conclusão.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperation">
          <source>The following code example demonstrates using an <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> object to track the lifetime of asynchronous operations.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar um <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> objeto para controlar o tempo de vida de operações assíncronas.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperation">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">Este exemplo de código é parte de um exemplo maior fornecido para a <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperation">
          <source>For a full code listing, see <bpt id="p1">[</bpt>How to: Implement a Component That Supports the Event-based Asynchronous Pattern<ept id="p1">](http://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf)</ept>.</source>
          <target state="translated">Para obter uma listagem de código completo, consulte <bpt id="p1">[</bpt>como: implementar um componente compatível com o padrão assíncrono baseado em evento<ept id="p1">](http://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf)</ept>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperation">
          <source>For a full code listing of a client form, see <bpt id="p1">[</bpt>How to: Implement a Client of the Event-based Asynchronous Pattern<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md)</ept>.</source>
          <target state="translated">Para uma listagem de código completo de um formulário de cliente, consulte <bpt id="p1">[</bpt>como: implementar um cliente do padrão assíncrono baseado em evento<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md)</ept>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperation">
          <source>Implementers must ensure the <ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /&gt;</ph> invocations are asynchronous, so that class library providers do not need to concern themselves with potential stack overflows if they assume asynchronous behavior in a particular application model that happens to be synchronous.</source>
          <target state="translated">Os implementadores devem garantir o <ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /&gt;</ph> e <ph id="ph2">&lt;see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /&gt;</ph> invocações são assíncronas, para que os provedores de biblioteca de classe não precisam referem-se com pilha potencial estoura se ele assume o comportamento assíncrono em um aplicativo específico modelo que é síncrona.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperation">
          <source>For more information about implementing asynchronous classes, see <bpt id="p1">[</bpt>Implementing the Event-based Asynchronous Pattern<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre como implementar classes assíncronas, consulte <bpt id="p1">[</bpt>Implementando o padrão assíncrono baseado em evento<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)</ept>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperation.Finalize">
          <source>Finalizes the asynchronous operation.</source>
          <target state="translated">Finaliza a operação assíncrona.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperation.OperationCompleted">
          <source>Ends the lifetime of an asynchronous operation.</source>
          <target state="translated">Encerra o tempo de vida de uma operação assíncrona.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.OperationCompleted">
          <source>Call the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.OperationCompleted%2A&gt;</ph> method to end the lifetime of an asynchronous operation.</source>
          <target state="translated">Chamar o <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.OperationCompleted%2A&gt;</ph> método para encerrar o tempo de vida de uma operação assíncrona.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.OperationCompleted">
          <source>After this method is called for a particular task, calls to its corresponding <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> will raise an exception.</source>
          <target state="translated">Depois que este método é chamado para uma tarefa específica, chamadas para correspondente <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> gerará uma exceção.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperation.OperationCompleted">
          <source><ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /&gt;</ph> has been called previously for this task.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /&gt;</ph> foi chamado anteriormente para essa tarefa.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.SendOrPostCallback" /&gt;</ph> object that wraps the delegate to be called when the operation ends.</source>
          <target state="translated">Um objeto <ph id="ph1">&lt;see cref="T:System.Threading.SendOrPostCallback" /&gt;</ph> que encapsula o delegado a ser chamado quando a operação é encerrada.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>An argument for the delegate contained in the <bpt id="p1">&lt;c&gt;</bpt>d<ept id="p1">&lt;/c&gt;</ept> parameter.</source>
          <target state="translated">Um argumento para o delegado contido no parâmetro <bpt id="p1">&lt;c&gt;</bpt>d<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>Invokes a delegate on the thread or context appropriate for the application model.</source>
          <target state="translated">Invoca um delegado no thread ou contexto apropriado para o modelo de aplicativo.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.Post%2A&gt;</ph> method invokes the delegate specified by the <ph id="ph2">`arg`</ph> parameter without ending the lifetime of the asynchronous operation.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.Post%2A&gt;</ph> método invoca o delegado especificado pelo <ph id="ph2">`arg`</ph> parâmetro sem encerrar o tempo de vida da operação assíncrona.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>You can call the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.Post%2A&gt;</ph> method as often as you like while the lifetime of the asynchronous operation has not been ended by a call to <ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A&gt;</ph>.</source>
          <target state="translated">Você pode chamar o <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.Post%2A&gt;</ph> com a frequência desejada durante o tempo de vida da operação assíncrona não foi finalizado por uma chamada ao método <ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>You can use the method to report progress or interim results back to clients.</source>
          <target state="translated">Você pode usar o método para relatar os resultados intermediários ou andamento para os clientes.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>The <ph id="ph1">`d`</ph> parameter wraps the delegate you want called when you want to post an update about the status of the asynchronous task.</source>
          <target state="translated">O <ph id="ph1">`d`</ph> parâmetro encapsula o representante que você deseja chamado quando você desejar lançar uma atualização sobre o status da tarefa assíncrona.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> object will ensure that your delegate is invoked on the thread or context appropriate for the application model.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> objeto garantirá que o delegado é invocado no thread ou contexto apropriado para o modelo de aplicativo.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>Your method can optionally raise an event that notifies clients of a status change, progress update, or newly available incremental results.</source>
          <target state="translated">O método opcionalmente pode gerar um evento que notifica os clientes de uma alteração de status, a atualização em andamento ou resultados incrementais recentemente disponíveis.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>The <ph id="ph1">`arg`</ph> parameter should be used to pass state to the delegate wrapped by the <ph id="ph2">`d`</ph> parameter.</source>
          <target state="translated">O <ph id="ph1">`arg`</ph> parâmetro deve ser usado para passar o estado para o representante encapsulado pelo <ph id="ph2">`d`</ph> parâmetro.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>It might be a reference to an <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph>, or it might be a <ph id="ph2">&lt;xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType&gt;</ph> object.</source>
          <target state="translated">Ele pode ser uma referência a um <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph>, ou pode ser um <ph id="ph2">&lt;xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>It may be desirable to derive your own class from <ph id="ph1">&lt;xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType&gt;</ph> to provide additional state storage.</source>
          <target state="translated">Pode ser desejável para derivar sua própria classe de <ph id="ph1">&lt;xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType&gt;</ph> para fornecer armazenamento de estado adicionais.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>The following code example demonstrates using the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.Post%2A&gt;</ph> method for reporting progress and incremental results of an asynchronous operation.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar o <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.Post%2A&gt;</ph> método para relatar o progresso e os resultados incrementais de uma operação assíncrona.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">Este exemplo de código é parte de um exemplo maior fornecido para a <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /&gt;</ph> method has been called previously for this task.</source>
          <target state="translated">O método <ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /&gt;</ph> foi chamado anteriormente para essa tarefa.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source><ph id="ph1">&lt;paramref name="d" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="d" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>Inheritors must make the <ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /&gt;</ph> invocation asynchronous, so that class library providers do not need to concern themselves with potential stack overflows if they assume asynchrony but a particular application model happens to be synchronous.</source>
          <target state="translated">Herdeiros devem fazer o <ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /&gt;</ph> chamada assíncrona, para que os provedores de biblioteca de classe não precisam se preocupar com pilha potencial estoura se assumem assincronia, mas um modelo de aplicativo específico a ser síncronas.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>Console applications do not synchronize the execution of <ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /&gt;</ph> calls.</source>
          <target state="translated">Os aplicativos de console não sincronizam a execução das chamadas de <ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>This can cause <ph id="ph1">&lt;see langword="ProgressChanged" /&gt;</ph> events to be raised out of order.</source>
          <target state="translated">Isso pode fazer com que os eventos <ph id="ph1">&lt;see langword="ProgressChanged" /&gt;</ph> sejam gerados fora de ordem.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>If you wish to have serialized execution of <ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /&gt;</ph> calls, implement and install a <ph id="ph2">&lt;see cref="T:System.Threading.SynchronizationContext" /&gt;</ph> class.</source>
          <target state="translated">Se quiser que as chamadas <ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /&gt;</ph> sejam executadas em série, implemente e instale uma classe <ph id="ph2">&lt;see cref="T:System.Threading.SynchronizationContext" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>For more information about implementing asynchronous classes, see <bpt id="p1">[</bpt>Implementing the Event-based Asynchronous Pattern<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre como implementar classes assíncronas, consulte <bpt id="p1">[</bpt>Implementando o padrão assíncrono baseado em evento<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)</ept>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.SendOrPostCallback" /&gt;</ph> object that wraps the delegate to be called when the operation ends.</source>
          <target state="translated">Um objeto <ph id="ph1">&lt;see cref="T:System.Threading.SendOrPostCallback" /&gt;</ph> que encapsula o delegado a ser chamado quando a operação é encerrada.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>An argument for the delegate contained in the <bpt id="p1">&lt;c&gt;</bpt>d<ept id="p1">&lt;/c&gt;</ept> parameter.</source>
          <target state="translated">Um argumento para o delegado contido no parâmetro <bpt id="p1">&lt;c&gt;</bpt>d<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>Ends the lifetime of an asynchronous operation.</source>
          <target state="translated">Encerra o tempo de vida de uma operação assíncrona.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>Call the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A&gt;</ph> method to end the lifetime of an asynchronous operation.</source>
          <target state="translated">Chamar o <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A&gt;</ph> método para encerrar o tempo de vida de uma operação assíncrona.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>After this method is called for a particular task, calls to its corresponding <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> object will raise an exception.</source>
          <target state="translated">Depois que este método é chamado para uma tarefa específica, chamadas para correspondente <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> objeto gerará uma exceção.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>The <ph id="ph1">`d`</ph> parameter wraps the delegate you want your class to call when the task's lifetime ends due to completion, cancellation, or failure of the task.</source>
          <target state="translated">O <ph id="ph1">`d`</ph> parâmetro encapsula o representante que você deseja que a classe para chamar quando o tempo de vida da tarefa termina devido a conclusão, o cancelamento ou a falha da tarefa.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> object will ensure that your delegate is invoked on the thread or context appropriate for the application model.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> objeto garantirá que o delegado é invocado no thread ou contexto apropriado para o modelo de aplicativo.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>Your delegate can optionally raise an event that notifies clients that the asynchronous task's lifetime has ended.</source>
          <target state="translated">O delegado opcionalmente pode disparar um evento que notifica os clientes que terminou o tempo de vida da tarefa assíncrona.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>The <ph id="ph1">`arg`</ph> parameter is used to pass state information to the completion delegate <ph id="ph2">`d`</ph>.</source>
          <target state="translated">O <ph id="ph1">`arg`</ph> parâmetro é usado para transmitir informações de estado para o delegado de conclusão <ph id="ph2">`d`</ph>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>You can use an <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> object, or an <ph id="ph2">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType&gt;</ph> object as the parameter value.</source>
          <target state="translated">Você pode usar um <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> objeto, ou uma <ph id="ph2">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType&gt;</ph> objeto como o valor do parâmetro.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>Alternatively, if you want to provide additional state storage, you can use an instance of a class you derive from the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">Como alternativa, se você quiser fornecer armazenamento de estado adicionais, você pode usar uma instância de uma classe que deriva de <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>The following code example demonstrates using the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A&gt;</ph> method to end the lifetime of an asynchronous operation.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar o <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A&gt;</ph> método para encerrar o tempo de vida de uma operação assíncrona.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">Este exemplo de código é parte de um exemplo maior fornecido para a <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source><ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /&gt;</ph> has been called previously for this task.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /&gt;</ph> foi chamado anteriormente para essa tarefa.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source><ph id="ph1">&lt;paramref name="d" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="d" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>Inheritors must make the <ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /&gt;</ph> invocation asynchronous, so that class library providers do not need to concern themselves with potential stack overflows if they assume asynchrony but a particular application model happens to be synchronous.</source>
          <target state="translated">Herdeiros devem fazer o <ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /&gt;</ph> chamada assíncrona, para que os provedores de biblioteca de classe não precisam se preocupar com pilha potencial estoura se assumem assincronia, mas um modelo de aplicativo específico a ser síncronas.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>The method should be interpreted as an "ending the lifetime" call, meaning the implementation needs to do what is appropriate for the application model.</source>
          <target state="translated">O método deve ser interpretado como uma chamada de "terminando o tempo de vida", que significa que a implementação precisa fazer o que for apropriado para o modelo de aplicativo.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>For instance, ASP.NET will decrement its count of outstanding asynchronous operations.</source>
          <target state="translated">Por exemplo, ASP.NET será decrementar a contagem de operações assíncronas pendentes.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>This also should put the operation into a state such that any subsequent calls into it will fail, since it has now completed.</source>
          <target state="translated">Isso também deve colocar a operação em um estado, de modo que todas as chamadas subsequentes para ela falhará, pois ele agora está concluída.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>For more information about implementing asynchronous classes, see <bpt id="p1">[</bpt>Implementing the Event-based Asynchronous Pattern<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre como implementar classes assíncronas, consulte <bpt id="p1">[</bpt>Implementando o padrão assíncrono baseado em evento<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)</ept>.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.AsyncOperation.SynchronizationContext">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Threading.SynchronizationContext" /&gt;</ph> object that was passed to the constructor.</source>
          <target state="translated">Obtém o objeto <ph id="ph1">&lt;see cref="T:System.Threading.SynchronizationContext" /&gt;</ph> que foi transmitido ao construtor.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperation.SynchronizationContext">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.SynchronizationContext" /&gt;</ph> object that was passed to the constructor.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.SynchronizationContext" /&gt;</ph> objeto que foi transmitido ao construtor.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
          <source>Gets or sets an object used to uniquely identify an asynchronous operation.</source>
          <target state="translated">Obtém ou define um objeto usado para identificar uma operação assíncrona de maneira única.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
          <source>The state object passed to the asynchronous method invocation.</source>
          <target state="translated">O objeto de estado passado para a invocação de método assíncrono.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
          <source>If your class supports multiple asynchronous methods or multiple invocations of a single asynchronous method, clients will need a way to determine which asynchronous task is raising events.</source>
          <target state="translated">Se sua classe oferece suporte a vários métodos assíncronos ou várias invocações de um único método assíncrono, os clientes precisarão de uma maneira de determinar qual tarefa assíncrona está gerando eventos.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
          <source>Your <ph id="ph1">`MethodNameAsync`</ph> method should take a parameter of type <ph id="ph2">&lt;xref:System.Object&gt;</ph> that will act as a task ID.</source>
          <target state="translated">O <ph id="ph1">`MethodNameAsync`</ph> método deve receber um parâmetro do tipo <ph id="ph2">&lt;xref:System.Object&gt;</ph> que atuará como uma ID da tarefa.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
          <source>You will use this task ID when you call the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType&gt;</ph>, method and this will associate the client's task ID with a particular invocation of your asynchronous operation.</source>
          <target state="translated">Você usará essa ID da tarefa quando você chama o <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType&gt;</ph>, método e isso associará ID da tarefa do cliente com uma invocação específica de sua operação assíncrona.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
          <source>This task ID is made available to your implementation through the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A&gt;</ph> property.</source>
          <target state="translated">Essa tarefa ID ficam disponível para sua implementação por meio de <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
          <source>Client code must be careful to provide a unique value for the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A&gt;</ph> property.</source>
          <target state="translated">Código do cliente deve ter cuidado para fornecer um valor exclusivo para o <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
          <source>Non-unique task IDs may cause your implementation to report progress and other events incorrectly.</source>
          <target state="translated">IDs de tarefa não exclusivos pode causar sua implementação relatar o andamento e outros eventos incorretamente.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
          <source>Your code should check for a non-unique task ID and raise an <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph> if one is detected.</source>
          <target state="translated">Seu código deve verificar se há uma ID de tarefa não exclusivos e gerar um <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph> se um for detectado.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
          <source>The following code example demonstrates using <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A&gt;</ph> to track the lifetime of asynchronous operations.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A&gt;</ph> para rastrear o tempo de vida de operações assíncronas.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">Este exemplo de código é parte de um exemplo maior fornecido para a <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType&gt;</ph> classe.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>