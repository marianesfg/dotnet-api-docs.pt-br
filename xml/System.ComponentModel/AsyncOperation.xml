<Type Name="AsyncOperation" FullName="System.ComponentModel.AsyncOperation">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1507e3ec3ce746db846a48b30d3ca22ba934549a" /><Meta Name="ms.sourcegitcommit" Value="1654a92bac785a221098172d9cacd405ceaac9b7" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="12/01/2018" /><Meta Name="ms.locfileid" Value="52734222" /></Metadata><TypeSignature Language="C#" Value="public sealed class AsyncOperation" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AsyncOperation extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.AsyncOperation" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AsyncOperation" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsyncOperation sealed" />
  <TypeSignature Language="F#" Value="type AsyncOperation = class" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Controla o tempo de vida de uma operação assíncrona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando você implementa uma classe de acordo com o [Event-based Asynchronous Pattern Overview](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), talvez você precise controlar o tempo de vida de cada operação assíncrona invocada em uma instância de sua classe. O <xref:System.ComponentModel.AsyncOperation> classe fornece maneiras de rastrear e relatar o progresso de uma tarefa assíncrona.  
  
 A seguinte lista identifica maneiras de usar um <xref:System.ComponentModel.AsyncOperation> objeto:  
  
-   Para relatar o progresso e os resultados intermediários ao cliente, chamar <xref:System.ComponentModel.AsyncOperation.Post%2A> do seu código de trabalho assíncrono.  
  
-   Para indicar que uma tarefa assíncrona foi concluída, ou para cancelar uma tarefa assíncrona pendente, chame <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>.  
  
 Sua classe deve obter um <xref:System.ComponentModel.AsyncOperation> objeto para cada tarefa assíncrona chamando <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> quando cada tarefa é iniciado. Para permitir ao cliente distinguir separadas tarefas assíncronas, <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> leva um parâmetro para um exclusivo token fornecido pelo cliente, que se torna o <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> propriedade. Ele pode então ser usado pelo código do cliente para identificar a tarefa assíncrona específica que está gerando eventos de progresso ou a conclusão.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como usar um <xref:System.ComponentModel.AsyncOperation> objeto para controlar o tempo de vida de operações assíncronas. Este exemplo de código é parte de um exemplo maior fornecido para o <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> classe.  
  
 Para obter uma listagem de código completo, consulte [como: implementar um componente compatível com o padrão assíncrono baseado em evento](https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf). Para obter uma listagem de código completo de um formulário cliente, consulte [como: implementar um cliente do padrão assíncrono baseado em evento](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md).  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Os implementadores devem garantir que o <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> e <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> chamadas são assíncronas, para que os provedores de biblioteca de classe não é preciso preocupar-se com o potencial estouro de pilha, se ele assume o comportamento assíncrono em um aplicativo específico modelo que seja síncrona.  
  
Para obter mais informações sobre como implementar classes assíncronas, consulte [Implementando o padrão assíncrono baseado em evento](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</para></block>
    <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
    <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557">Práticas recomendadas de threading gerenciado</related>
    <related type="Article" href="https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf">Como: implementar um componente compatível com o padrão assíncrono baseado em evento</related>
  </Docs>
  <Members>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~AsyncOperation ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!AsyncOperation ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="asyncOperation.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Finaliza a operação assíncrona.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OperationCompleted">
      <MemberSignature Language="C#" Value="public void OperationCompleted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OperationCompleted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.OperationCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Sub OperationCompleted ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OperationCompleted();" />
      <MemberSignature Language="F#" Value="member this.OperationCompleted : unit -&gt; unit" Usage="asyncOperation.OperationCompleted " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Encerra o tempo de vida de uma operação assíncrona.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chamar o <xref:System.ComponentModel.AsyncOperation.OperationCompleted%2A> método para encerrar o tempo de vida de uma operação assíncrona. Depois que esse método é chamado para uma tarefa específica, chamadas para correspondente <xref:System.ComponentModel.AsyncOperation> gerarão uma exceção.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> foi chamado anteriormente para essa tarefa.</exception>
      </Docs>
    </Member>
    <Member MemberName="Post">
      <MemberSignature Language="C#" Value="public void Post (System.Threading.SendOrPostCallback d, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Post(class System.Threading.SendOrPostCallback d, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Post (d As SendOrPostCallback, arg As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Post(System::Threading::SendOrPostCallback ^ d, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.Post : System.Threading.SendOrPostCallback * obj -&gt; unit" Usage="asyncOperation.Post (d, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="d">Um objeto <see cref="T:System.Threading.SendOrPostCallback" /> que encapsula o delegado a ser chamado quando a operação é encerrada.</param>
        <param name="arg">Um argumento para o delegado contido no parâmetro <paramref name="d" />.</param>
        <summary>Invoca um delegado no thread ou contexto apropriado para o modelo de aplicativo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.ComponentModel.AsyncOperation.Post%2A> método invoca o delegado especificado pelo `arg` parâmetro sem encerrar o tempo de vida da operação assíncrona.  
  
 Você pode chamar o <xref:System.ComponentModel.AsyncOperation.Post%2A> com a frequência desejada durante o tempo de vida da operação assíncrona não tiver sido encerrado por uma chamada ao método <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>. Você pode usar o método para relatar andamento ou os resultados intermediários para os clientes.  
  
 O `d` parâmetro encapsula o delegado a ser chamado quando quiser lançar uma atualização sobre o status da tarefa assíncrona. O <xref:System.ComponentModel.AsyncOperation> objeto garantirá que o delegado é invocado no thread ou contexto apropriado para o modelo de aplicativo. Seu método opcionalmente pode acionar um evento que notifica os clientes de uma alteração de status, atualização de progresso ou recém-disponibilizados resultados incrementais.  
  
 O `arg` parâmetro deve ser usado para passar o estado para o delegado encapsulado pelo `d` parâmetro. Ele pode ser uma referência a um <xref:System.ComponentModel.AsyncOperation>, ou pode ser um <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> objeto. Pode ser desejável para derivar sua própria classe de <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> para fornecer armazenamento de estado adicionais.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como usar o <xref:System.ComponentModel.AsyncOperation.Post%2A> método para relatar o progresso e resultados incrementais de uma operação assíncrona. Este exemplo de código é parte de um exemplo maior fornecido para o <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> classe.  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#5)]
[!code-vb[System.ComponentModel.AsyncOperationManager#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">O método <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> foi chamado anteriormente para essa tarefa.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="d" /> é <see langword="null" />.</exception>
        <block subset="none" type="overrides"><para>Os herdeiros devem fazer o <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> invocação assíncrona, para que os provedores de biblioteca de classe não é necessário preocupar-se com pilha possíveis estouros se eles supõem a assincronia, mas um modelo de aplicativo específico, por acaso, é síncrona.  
  
 <block subset="none" type="note"><para>  
 Os aplicativos de console não sincronizam a execução das chamadas de <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" />. Isso pode fazer com que os eventos <see langword="ProgressChanged" /> sejam gerados fora de ordem. Se quiser que as chamadas <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> sejam executadas em série, implemente e instale uma classe <see cref="T:System.Threading.SynchronizationContext" />.  
  
</para></block>  
  
 Para obter mais informações sobre como implementar classes assíncronas, consulte [Implementando o padrão assíncrono baseado em evento](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</para></block>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557">Práticas recomendadas de threading gerenciado</related>
        <related type="Article" href="https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf">Como: implementar um componente compatível com o padrão assíncrono baseado em evento</related>
      </Docs>
    </Member>
    <Member MemberName="PostOperationCompleted">
      <MemberSignature Language="C#" Value="public void PostOperationCompleted (System.Threading.SendOrPostCallback d, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PostOperationCompleted(class System.Threading.SendOrPostCallback d, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PostOperationCompleted (d As SendOrPostCallback, arg As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PostOperationCompleted(System::Threading::SendOrPostCallback ^ d, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.PostOperationCompleted : System.Threading.SendOrPostCallback * obj -&gt; unit" Usage="asyncOperation.PostOperationCompleted (d, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="d">Um objeto <see cref="T:System.Threading.SendOrPostCallback" /> que encapsula o delegado a ser chamado quando a operação é encerrada.</param>
        <param name="arg">Um argumento para o delegado contido no parâmetro <paramref name="d" />.</param>
        <summary>Encerra o tempo de vida de uma operação assíncrona.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chamar o <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> método para encerrar o tempo de vida de uma operação assíncrona. Depois que esse método é chamado para uma tarefa específica, chamadas para correspondente <xref:System.ComponentModel.AsyncOperation> objeto gerarão uma exceção.  
  
 O `d` parâmetro encapsula o delegado que você deseja que a classe a ser chamado quando termina de tempo de vida da tarefa devido a uma conclusão, cancelamento ou falha da tarefa. O <xref:System.ComponentModel.AsyncOperation> objeto garantirá que o delegado é invocado no thread ou contexto apropriado para o modelo de aplicativo. Seu representante, opcionalmente, pode gerar um evento que notifica os clientes que terminou o tempo de vida da tarefa assíncrona.  
  
 O `arg` parâmetro é usado para passar informações de estado para o delegado de conclusão `d`. Você pode usar um <xref:System.ComponentModel.AsyncOperation> objeto, ou um <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> objeto como o valor do parâmetro. Como alternativa, se você quiser fornecer um armazenamento de estado adicionais, você pode usar uma instância de uma classe que você deriva o <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> classe.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como usar o <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> método para encerrar o tempo de vida de uma operação assíncrona. Este exemplo de código é parte de um exemplo maior fornecido para o <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> classe.  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#4)]
[!code-vb[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> foi chamado anteriormente para essa tarefa.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="d" /> é <see langword="null" />.</exception>
        <block subset="none" type="overrides"><para>Os herdeiros devem fazer o <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> invocação assíncrona, para que os provedores de biblioteca de classe não é necessário preocupar-se com pilha possíveis estouros se eles supõem a assincronia, mas um modelo de aplicativo específico, por acaso, é síncrona. O método deve ser interpretado como uma chamada de "terminando o tempo de vida", que significa que a implementação precisa fazer o que é apropriado para o modelo de aplicativo. Por exemplo, ASP.NET diminuirá a contagem de operações assíncronas pendentes. Isso também deve colocar a operação em um estado, de modo que qualquer chamada subsequente para ele falhará, pois agora está concluída.  
  
Para obter mais informações sobre como implementar classes assíncronas, consulte [Implementando o padrão assíncrono baseado em evento](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</para></block>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557">Práticas recomendadas de threading gerenciado</related>
        <related type="Article" href="https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf">Como: implementar um componente compatível com o padrão assíncrono baseado em evento</related>
      </Docs>
    </Member>
    <Member MemberName="SynchronizationContext">
      <MemberSignature Language="C#" Value="public System.Threading.SynchronizationContext SynchronizationContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.SynchronizationContext SynchronizationContext" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperation.SynchronizationContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SynchronizationContext As SynchronizationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::SynchronizationContext ^ SynchronizationContext { System::Threading::SynchronizationContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizationContext : System.Threading.SynchronizationContext" Usage="System.ComponentModel.AsyncOperation.SynchronizationContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.SynchronizationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o objeto <see cref="T:System.Threading.SynchronizationContext" /> que foi transmitido ao construtor.</summary>
        <value>O <see cref="T:System.Threading.SynchronizationContext" /> objeto que foi passado para o construtor.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UserSuppliedState">
      <MemberSignature Language="C#" Value="public object UserSuppliedState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object UserSuppliedState" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperation.UserSuppliedState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserSuppliedState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ UserSuppliedState { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UserSuppliedState : obj" Usage="System.ComponentModel.AsyncOperation.UserSuppliedState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define um objeto usado para identificar uma operação assíncrona de maneira única.</summary>
        <value>O objeto de estado passado para a invocação de método assíncrono.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se sua classe dá suporte a vários métodos assíncronos ou várias invocações de um único método assíncrono, os clientes precisarão de uma maneira de determinar qual tarefa assíncrona está gerando eventos. Sua `MethodNameAsync` método deve adotar um parâmetro de tipo <xref:System.Object> que atuará como uma ID da tarefa. Você usará essa ID da tarefa quando você chama o <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType>, método e isso irá associar a ID do cliente tarefa determinada invocação da operação assíncrona. Essa tarefa ID ficam disponível para sua implementação por meio de <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> propriedade.  
  
> [!CAUTION]
>  Código do cliente deve ter cuidado para fornecer um valor exclusivo para o <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> propriedade. IDs de tarefa não exclusivos pode causar sua implementação relatar o andamento e outros eventos incorretamente. Seu código deve verificar se há uma ID de tarefa não exclusivos e gerar um <xref:System.ArgumentException> caso uma seja detectada.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como usar <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> para controlar o tempo de vida de operações assíncronas. Este exemplo de código é parte de um exemplo maior fornecido para o <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> classe.  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#4)]
[!code-vb[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557">Práticas recomendadas de threading gerenciado</related>
        <related type="Article" href="https://msdn.microsoft.com/library/792aa8da-918b-458e-b154-9836b97735f3">Visão geral do padrão assíncrono baseado em evento</related>
      </Docs>
    </Member>
  </Members>
</Type>