<Type Name="AsyncOperation" FullName="System.ComponentModel.AsyncOperation">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1507e3ec3ce746db846a48b30d3ca22ba934549a" /><Meta Name="ms.sourcegitcommit" Value="1654a92bac785a221098172d9cacd405ceaac9b7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="12/01/2018" /><Meta Name="ms.locfileid" Value="52734222" /></Metadata><TypeSignature Language="C#" Value="public sealed class AsyncOperation" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AsyncOperation extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.AsyncOperation" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AsyncOperation" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsyncOperation sealed" />
  <TypeSignature Language="F#" Value="type AsyncOperation = class" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="b789d-101">Controla o tempo de vida de uma operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="b789d-101">Tracks the lifetime of an asynchronous operation.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b789d-102">Quando você implementa uma classe de acordo com o [Event-based Asynchronous Pattern Overview](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), talvez você precise controlar o tempo de vida de cada operação assíncrona invocada em uma instância de sua classe.</span><span class="sxs-lookup"><span data-stu-id="b789d-102">When you implement a class according to the [Event-based Asynchronous Pattern Overview](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), you may need to track the lifetime of each asynchronous operation invoked on an instance of your class.</span></span> <span data-ttu-id="b789d-103">O <xref:System.ComponentModel.AsyncOperation> classe fornece maneiras de rastrear e relatar o progresso de uma tarefa assíncrona.</span><span class="sxs-lookup"><span data-stu-id="b789d-103">The <xref:System.ComponentModel.AsyncOperation> class provides ways to track and report the progress of an asynchronous task.</span></span>  
  
 <span data-ttu-id="b789d-104">A seguinte lista identifica maneiras de usar um <xref:System.ComponentModel.AsyncOperation> objeto:</span><span class="sxs-lookup"><span data-stu-id="b789d-104">The following list identifies ways to use an <xref:System.ComponentModel.AsyncOperation> object:</span></span>  
  
-   <span data-ttu-id="b789d-105">Para relatar o progresso e os resultados intermediários ao cliente, chamar <xref:System.ComponentModel.AsyncOperation.Post%2A> do seu código de trabalho assíncrono.</span><span class="sxs-lookup"><span data-stu-id="b789d-105">To report progress and interim results to the client, call <xref:System.ComponentModel.AsyncOperation.Post%2A> from your asynchronous worker code.</span></span>  
  
-   <span data-ttu-id="b789d-106">Para indicar que uma tarefa assíncrona foi concluída, ou para cancelar uma tarefa assíncrona pendente, chame <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>.</span><span class="sxs-lookup"><span data-stu-id="b789d-106">To indicate that an asynchronous task has completed, or to cancel a pending asynchronous task, call <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>.</span></span>  
  
 <span data-ttu-id="b789d-107">Sua classe deve obter um <xref:System.ComponentModel.AsyncOperation> objeto para cada tarefa assíncrona chamando <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> quando cada tarefa é iniciado.</span><span class="sxs-lookup"><span data-stu-id="b789d-107">Your class should get an <xref:System.ComponentModel.AsyncOperation> object for each asynchronous task by calling <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> when each task starts.</span></span> <span data-ttu-id="b789d-108">Para permitir ao cliente distinguir separadas tarefas assíncronas, <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> leva um parâmetro para um exclusivo token fornecido pelo cliente, que se torna o <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="b789d-108">To allow the client to distinguish separate asynchronous tasks, <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> takes a parameter for a unique client-provided token, which becomes the <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> property.</span></span> <span data-ttu-id="b789d-109">Ele pode então ser usado pelo código do cliente para identificar a tarefa assíncrona específica que está gerando eventos de progresso ou a conclusão.</span><span class="sxs-lookup"><span data-stu-id="b789d-109">It can then be used by client code to identify the particular asynchronous task that is raising progress or completion events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b789d-110">O exemplo de código a seguir demonstra como usar um <xref:System.ComponentModel.AsyncOperation> objeto para controlar o tempo de vida de operações assíncronas.</span><span class="sxs-lookup"><span data-stu-id="b789d-110">The following code example demonstrates using an <xref:System.ComponentModel.AsyncOperation> object to track the lifetime of asynchronous operations.</span></span> <span data-ttu-id="b789d-111">Este exemplo de código é parte de um exemplo maior fornecido para o <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> classe.</span><span class="sxs-lookup"><span data-stu-id="b789d-111">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
 <span data-ttu-id="b789d-112">Para obter uma listagem de código completo, consulte [como: implementar um componente compatível com o padrão assíncrono baseado em evento](https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf).</span><span class="sxs-lookup"><span data-stu-id="b789d-112">For a full code listing, see [How to: Implement a Component That Supports the Event-based Asynchronous Pattern](https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf).</span></span> <span data-ttu-id="b789d-113">Para obter uma listagem de código completo de um formulário cliente, consulte [como: implementar um cliente do padrão assíncrono baseado em evento](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md).</span><span class="sxs-lookup"><span data-stu-id="b789d-113">For a full code listing of a client form, see [How to: Implement a Client of the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md).</span></span>  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><span data-ttu-id="b789d-114">Os implementadores devem garantir que o <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> e <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> chamadas são assíncronas, para que os provedores de biblioteca de classe não é preciso preocupar-se com o potencial estouro de pilha, se ele assume o comportamento assíncrono em um aplicativo específico modelo que seja síncrona.</span><span class="sxs-lookup"><span data-stu-id="b789d-114">Implementers must ensure the <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> and <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> invocations are asynchronous, so that class library providers do not need to concern themselves with potential stack overflows if they assume asynchronous behavior in a particular application model that happens to be synchronous.</span></span>  
  
<span data-ttu-id="b789d-115">Para obter mais informações sobre como implementar classes assíncronas, consulte [Implementando o padrão assíncrono baseado em evento](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</span><span class="sxs-lookup"><span data-stu-id="b789d-115">For more information about implementing asynchronous classes, see [Implementing the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</span></span></para></block>
    <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
    <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557"><span data-ttu-id="b789d-116">Práticas recomendadas de threading gerenciado</span><span class="sxs-lookup"><span data-stu-id="b789d-116">Managed Threading Best Practices</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf"><span data-ttu-id="b789d-117">Como: implementar um componente compatível com o padrão assíncrono baseado em evento</span><span class="sxs-lookup"><span data-stu-id="b789d-117">How to: Implement a Component that Supports the Event-based Asynchronous Pattern</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~AsyncOperation ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!AsyncOperation ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="asyncOperation.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b789d-118">Finaliza a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="b789d-118">Finalizes the asynchronous operation.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OperationCompleted">
      <MemberSignature Language="C#" Value="public void OperationCompleted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OperationCompleted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.OperationCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Sub OperationCompleted ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OperationCompleted();" />
      <MemberSignature Language="F#" Value="member this.OperationCompleted : unit -&gt; unit" Usage="asyncOperation.OperationCompleted " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b789d-119">Encerra o tempo de vida de uma operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="b789d-119">Ends the lifetime of an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b789d-120">Chamar o <xref:System.ComponentModel.AsyncOperation.OperationCompleted%2A> método para encerrar o tempo de vida de uma operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="b789d-120">Call the <xref:System.ComponentModel.AsyncOperation.OperationCompleted%2A> method to end the lifetime of an asynchronous operation.</span></span> <span data-ttu-id="b789d-121">Depois que esse método é chamado para uma tarefa específica, chamadas para correspondente <xref:System.ComponentModel.AsyncOperation> gerarão uma exceção.</span><span class="sxs-lookup"><span data-stu-id="b789d-121">After this method is called for a particular task, calls to its corresponding <xref:System.ComponentModel.AsyncOperation> will raise an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b789d-122"><see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> foi chamado anteriormente para essa tarefa.</span><span class="sxs-lookup"><span data-stu-id="b789d-122"><see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> has been called previously for this task.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Post">
      <MemberSignature Language="C#" Value="public void Post (System.Threading.SendOrPostCallback d, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Post(class System.Threading.SendOrPostCallback d, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Post (d As SendOrPostCallback, arg As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Post(System::Threading::SendOrPostCallback ^ d, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.Post : System.Threading.SendOrPostCallback * obj -&gt; unit" Usage="asyncOperation.Post (d, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="b789d-123">Um objeto <see cref="T:System.Threading.SendOrPostCallback" /> que encapsula o delegado a ser chamado quando a operação é encerrada.</span><span class="sxs-lookup"><span data-stu-id="b789d-123">A <see cref="T:System.Threading.SendOrPostCallback" /> object that wraps the delegate to be called when the operation ends.</span></span></param>
        <param name="arg"><span data-ttu-id="b789d-124">Um argumento para o delegado contido no parâmetro <paramref name="d" />.</span><span class="sxs-lookup"><span data-stu-id="b789d-124">An argument for the delegate contained in the <paramref name="d" /> parameter.</span></span></param>
        <summary><span data-ttu-id="b789d-125">Invoca um delegado no thread ou contexto apropriado para o modelo de aplicativo.</span><span class="sxs-lookup"><span data-stu-id="b789d-125">Invokes a delegate on the thread or context appropriate for the application model.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b789d-126">O <xref:System.ComponentModel.AsyncOperation.Post%2A> método invoca o delegado especificado pelo `arg` parâmetro sem encerrar o tempo de vida da operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="b789d-126">The <xref:System.ComponentModel.AsyncOperation.Post%2A> method invokes the delegate specified by the `arg` parameter without ending the lifetime of the asynchronous operation.</span></span>  
  
 <span data-ttu-id="b789d-127">Você pode chamar o <xref:System.ComponentModel.AsyncOperation.Post%2A> com a frequência desejada durante o tempo de vida da operação assíncrona não tiver sido encerrado por uma chamada ao método <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>.</span><span class="sxs-lookup"><span data-stu-id="b789d-127">You can call the <xref:System.ComponentModel.AsyncOperation.Post%2A> method as often as you like while the lifetime of the asynchronous operation has not been ended by a call to <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>.</span></span> <span data-ttu-id="b789d-128">Você pode usar o método para relatar andamento ou os resultados intermediários para os clientes.</span><span class="sxs-lookup"><span data-stu-id="b789d-128">You can use the method to report progress or interim results back to clients.</span></span>  
  
 <span data-ttu-id="b789d-129">O `d` parâmetro encapsula o delegado a ser chamado quando quiser lançar uma atualização sobre o status da tarefa assíncrona.</span><span class="sxs-lookup"><span data-stu-id="b789d-129">The `d` parameter wraps the delegate you want called when you want to post an update about the status of the asynchronous task.</span></span> <span data-ttu-id="b789d-130">O <xref:System.ComponentModel.AsyncOperation> objeto garantirá que o delegado é invocado no thread ou contexto apropriado para o modelo de aplicativo.</span><span class="sxs-lookup"><span data-stu-id="b789d-130">The <xref:System.ComponentModel.AsyncOperation> object will ensure that your delegate is invoked on the thread or context appropriate for the application model.</span></span> <span data-ttu-id="b789d-131">Seu método opcionalmente pode acionar um evento que notifica os clientes de uma alteração de status, atualização de progresso ou recém-disponibilizados resultados incrementais.</span><span class="sxs-lookup"><span data-stu-id="b789d-131">Your method can optionally raise an event that notifies clients of a status change, progress update, or newly available incremental results.</span></span>  
  
 <span data-ttu-id="b789d-132">O `arg` parâmetro deve ser usado para passar o estado para o delegado encapsulado pelo `d` parâmetro.</span><span class="sxs-lookup"><span data-stu-id="b789d-132">The `arg` parameter should be used to pass state to the delegate wrapped by the `d` parameter.</span></span> <span data-ttu-id="b789d-133">Ele pode ser uma referência a um <xref:System.ComponentModel.AsyncOperation>, ou pode ser um <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> objeto.</span><span class="sxs-lookup"><span data-stu-id="b789d-133">It might be a reference to an <xref:System.ComponentModel.AsyncOperation>, or it might be a <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> object.</span></span> <span data-ttu-id="b789d-134">Pode ser desejável para derivar sua própria classe de <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> para fornecer armazenamento de estado adicionais.</span><span class="sxs-lookup"><span data-stu-id="b789d-134">It may be desirable to derive your own class from <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> to provide additional state storage.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b789d-135">O exemplo de código a seguir demonstra como usar o <xref:System.ComponentModel.AsyncOperation.Post%2A> método para relatar o progresso e resultados incrementais de uma operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="b789d-135">The following code example demonstrates using the <xref:System.ComponentModel.AsyncOperation.Post%2A> method for reporting progress and incremental results of an asynchronous operation.</span></span> <span data-ttu-id="b789d-136">Este exemplo de código é parte de um exemplo maior fornecido para o <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> classe.</span><span class="sxs-lookup"><span data-stu-id="b789d-136">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#5)]
[!code-vb[System.ComponentModel.AsyncOperationManager#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b789d-137">O método <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> foi chamado anteriormente para essa tarefa.</span><span class="sxs-lookup"><span data-stu-id="b789d-137">The <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> method has been called previously for this task.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b789d-138"><paramref name="d" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b789d-138"><paramref name="d" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="b789d-139">Os herdeiros devem fazer o <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> invocação assíncrona, para que os provedores de biblioteca de classe não é necessário preocupar-se com pilha possíveis estouros se eles supõem a assincronia, mas um modelo de aplicativo específico, por acaso, é síncrona.</span><span class="sxs-lookup"><span data-stu-id="b789d-139">Inheritors must make the <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> invocation asynchronous, so that class library providers do not need to concern themselves with potential stack overflows if they assume asynchrony but a particular application model happens to be synchronous.</span></span>  
  
 <block subset="none" type="note"><para>  
 <span data-ttu-id="b789d-140">Os aplicativos de console não sincronizam a execução das chamadas de <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" />.</span><span class="sxs-lookup"><span data-stu-id="b789d-140">Console applications do not synchronize the execution of <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> calls.</span></span> <span data-ttu-id="b789d-141">Isso pode fazer com que os eventos <see langword="ProgressChanged" /> sejam gerados fora de ordem.</span><span class="sxs-lookup"><span data-stu-id="b789d-141">This can cause <see langword="ProgressChanged" /> events to be raised out of order.</span></span> <span data-ttu-id="b789d-142">Se quiser que as chamadas <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> sejam executadas em série, implemente e instale uma classe <see cref="T:System.Threading.SynchronizationContext" />.</span><span class="sxs-lookup"><span data-stu-id="b789d-142">If you wish to have serialized execution of <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> calls, implement and install a <see cref="T:System.Threading.SynchronizationContext" /> class.</span></span>  
  
</para></block>  
  
 <span data-ttu-id="b789d-143">Para obter mais informações sobre como implementar classes assíncronas, consulte [Implementando o padrão assíncrono baseado em evento](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</span><span class="sxs-lookup"><span data-stu-id="b789d-143">For more information about implementing asynchronous classes, see [Implementing the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</span></span></para></block>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557"><span data-ttu-id="b789d-144">Práticas recomendadas de threading gerenciado</span><span class="sxs-lookup"><span data-stu-id="b789d-144">Managed Threading Best Practices</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf"><span data-ttu-id="b789d-145">Como: implementar um componente compatível com o padrão assíncrono baseado em evento</span><span class="sxs-lookup"><span data-stu-id="b789d-145">How to: Implement a Component that Supports the Event-based Asynchronous Pattern</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="PostOperationCompleted">
      <MemberSignature Language="C#" Value="public void PostOperationCompleted (System.Threading.SendOrPostCallback d, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PostOperationCompleted(class System.Threading.SendOrPostCallback d, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PostOperationCompleted (d As SendOrPostCallback, arg As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PostOperationCompleted(System::Threading::SendOrPostCallback ^ d, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.PostOperationCompleted : System.Threading.SendOrPostCallback * obj -&gt; unit" Usage="asyncOperation.PostOperationCompleted (d, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="b789d-146">Um objeto <see cref="T:System.Threading.SendOrPostCallback" /> que encapsula o delegado a ser chamado quando a operação é encerrada.</span><span class="sxs-lookup"><span data-stu-id="b789d-146">A <see cref="T:System.Threading.SendOrPostCallback" /> object that wraps the delegate to be called when the operation ends.</span></span></param>
        <param name="arg"><span data-ttu-id="b789d-147">Um argumento para o delegado contido no parâmetro <paramref name="d" />.</span><span class="sxs-lookup"><span data-stu-id="b789d-147">An argument for the delegate contained in the <paramref name="d" /> parameter.</span></span></param>
        <summary><span data-ttu-id="b789d-148">Encerra o tempo de vida de uma operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="b789d-148">Ends the lifetime of an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b789d-149">Chamar o <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> método para encerrar o tempo de vida de uma operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="b789d-149">Call the <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> method to end the lifetime of an asynchronous operation.</span></span> <span data-ttu-id="b789d-150">Depois que esse método é chamado para uma tarefa específica, chamadas para correspondente <xref:System.ComponentModel.AsyncOperation> objeto gerarão uma exceção.</span><span class="sxs-lookup"><span data-stu-id="b789d-150">After this method is called for a particular task, calls to its corresponding <xref:System.ComponentModel.AsyncOperation> object will raise an exception.</span></span>  
  
 <span data-ttu-id="b789d-151">O `d` parâmetro encapsula o delegado que você deseja que a classe a ser chamado quando termina de tempo de vida da tarefa devido a uma conclusão, cancelamento ou falha da tarefa.</span><span class="sxs-lookup"><span data-stu-id="b789d-151">The `d` parameter wraps the delegate you want your class to call when the task's lifetime ends due to completion, cancellation, or failure of the task.</span></span> <span data-ttu-id="b789d-152">O <xref:System.ComponentModel.AsyncOperation> objeto garantirá que o delegado é invocado no thread ou contexto apropriado para o modelo de aplicativo.</span><span class="sxs-lookup"><span data-stu-id="b789d-152">The <xref:System.ComponentModel.AsyncOperation> object will ensure that your delegate is invoked on the thread or context appropriate for the application model.</span></span> <span data-ttu-id="b789d-153">Seu representante, opcionalmente, pode gerar um evento que notifica os clientes que terminou o tempo de vida da tarefa assíncrona.</span><span class="sxs-lookup"><span data-stu-id="b789d-153">Your delegate can optionally raise an event that notifies clients that the asynchronous task's lifetime has ended.</span></span>  
  
 <span data-ttu-id="b789d-154">O `arg` parâmetro é usado para passar informações de estado para o delegado de conclusão `d`.</span><span class="sxs-lookup"><span data-stu-id="b789d-154">The `arg` parameter is used to pass state information to the completion delegate `d`.</span></span> <span data-ttu-id="b789d-155">Você pode usar um <xref:System.ComponentModel.AsyncOperation> objeto, ou um <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> objeto como o valor do parâmetro.</span><span class="sxs-lookup"><span data-stu-id="b789d-155">You can use an <xref:System.ComponentModel.AsyncOperation> object, or an <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> object as the parameter value.</span></span> <span data-ttu-id="b789d-156">Como alternativa, se você quiser fornecer um armazenamento de estado adicionais, você pode usar uma instância de uma classe que você deriva o <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> classe.</span><span class="sxs-lookup"><span data-stu-id="b789d-156">Alternatively, if you want to provide additional state storage, you can use an instance of a class you derive from the <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b789d-157">O exemplo de código a seguir demonstra como usar o <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> método para encerrar o tempo de vida de uma operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="b789d-157">The following code example demonstrates using the <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> method to end the lifetime of an asynchronous operation.</span></span> <span data-ttu-id="b789d-158">Este exemplo de código é parte de um exemplo maior fornecido para o <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> classe.</span><span class="sxs-lookup"><span data-stu-id="b789d-158">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#4)]
[!code-vb[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b789d-159"><see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> foi chamado anteriormente para essa tarefa.</span><span class="sxs-lookup"><span data-stu-id="b789d-159"><see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> has been called previously for this task.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b789d-160"><paramref name="d" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b789d-160"><paramref name="d" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="b789d-161">Os herdeiros devem fazer o <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> invocação assíncrona, para que os provedores de biblioteca de classe não é necessário preocupar-se com pilha possíveis estouros se eles supõem a assincronia, mas um modelo de aplicativo específico, por acaso, é síncrona.</span><span class="sxs-lookup"><span data-stu-id="b789d-161">Inheritors must make the <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> invocation asynchronous, so that class library providers do not need to concern themselves with potential stack overflows if they assume asynchrony but a particular application model happens to be synchronous.</span></span> <span data-ttu-id="b789d-162">O método deve ser interpretado como uma chamada de "terminando o tempo de vida", que significa que a implementação precisa fazer o que é apropriado para o modelo de aplicativo.</span><span class="sxs-lookup"><span data-stu-id="b789d-162">The method should be interpreted as an "ending the lifetime" call, meaning the implementation needs to do what is appropriate for the application model.</span></span> <span data-ttu-id="b789d-163">Por exemplo, ASP.NET diminuirá a contagem de operações assíncronas pendentes.</span><span class="sxs-lookup"><span data-stu-id="b789d-163">For instance, ASP.NET will decrement its count of outstanding asynchronous operations.</span></span> <span data-ttu-id="b789d-164">Isso também deve colocar a operação em um estado, de modo que qualquer chamada subsequente para ele falhará, pois agora está concluída.</span><span class="sxs-lookup"><span data-stu-id="b789d-164">This also should put the operation into a state such that any subsequent calls into it will fail, since it has now completed.</span></span>  
  
<span data-ttu-id="b789d-165">Para obter mais informações sobre como implementar classes assíncronas, consulte [Implementando o padrão assíncrono baseado em evento](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</span><span class="sxs-lookup"><span data-stu-id="b789d-165">For more information about implementing asynchronous classes, see [Implementing the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</span></span></para></block>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557"><span data-ttu-id="b789d-166">Práticas recomendadas de threading gerenciado</span><span class="sxs-lookup"><span data-stu-id="b789d-166">Managed Threading Best Practices</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf"><span data-ttu-id="b789d-167">Como: implementar um componente compatível com o padrão assíncrono baseado em evento</span><span class="sxs-lookup"><span data-stu-id="b789d-167">How to: Implement a Component that Supports the Event-based Asynchronous Pattern</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SynchronizationContext">
      <MemberSignature Language="C#" Value="public System.Threading.SynchronizationContext SynchronizationContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.SynchronizationContext SynchronizationContext" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperation.SynchronizationContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SynchronizationContext As SynchronizationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::SynchronizationContext ^ SynchronizationContext { System::Threading::SynchronizationContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizationContext : System.Threading.SynchronizationContext" Usage="System.ComponentModel.AsyncOperation.SynchronizationContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.SynchronizationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b789d-168">Obtém o objeto <see cref="T:System.Threading.SynchronizationContext" /> que foi transmitido ao construtor.</span><span class="sxs-lookup"><span data-stu-id="b789d-168">Gets the <see cref="T:System.Threading.SynchronizationContext" /> object that was passed to the constructor.</span></span></summary>
        <value><span data-ttu-id="b789d-169">O <see cref="T:System.Threading.SynchronizationContext" /> objeto que foi passado para o construtor.</span><span class="sxs-lookup"><span data-stu-id="b789d-169">The <see cref="T:System.Threading.SynchronizationContext" /> object that was passed to the constructor.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UserSuppliedState">
      <MemberSignature Language="C#" Value="public object UserSuppliedState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object UserSuppliedState" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperation.UserSuppliedState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserSuppliedState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ UserSuppliedState { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UserSuppliedState : obj" Usage="System.ComponentModel.AsyncOperation.UserSuppliedState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b789d-170">Obtém ou define um objeto usado para identificar uma operação assíncrona de maneira única.</span><span class="sxs-lookup"><span data-stu-id="b789d-170">Gets or sets an object used to uniquely identify an asynchronous operation.</span></span></summary>
        <value><span data-ttu-id="b789d-171">O objeto de estado passado para a invocação de método assíncrono.</span><span class="sxs-lookup"><span data-stu-id="b789d-171">The state object passed to the asynchronous method invocation.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b789d-172">Se sua classe dá suporte a vários métodos assíncronos ou várias invocações de um único método assíncrono, os clientes precisarão de uma maneira de determinar qual tarefa assíncrona está gerando eventos.</span><span class="sxs-lookup"><span data-stu-id="b789d-172">If your class supports multiple asynchronous methods or multiple invocations of a single asynchronous method, clients will need a way to determine which asynchronous task is raising events.</span></span> <span data-ttu-id="b789d-173">Sua `MethodNameAsync` método deve adotar um parâmetro de tipo <xref:System.Object> que atuará como uma ID da tarefa.</span><span class="sxs-lookup"><span data-stu-id="b789d-173">Your `MethodNameAsync` method should take a parameter of type <xref:System.Object> that will act as a task ID.</span></span> <span data-ttu-id="b789d-174">Você usará essa ID da tarefa quando você chama o <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType>, método e isso irá associar a ID do cliente tarefa determinada invocação da operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="b789d-174">You will use this task ID when you call the <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType>, method and this will associate the client's task ID with a particular invocation of your asynchronous operation.</span></span> <span data-ttu-id="b789d-175">Essa tarefa ID ficam disponível para sua implementação por meio de <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="b789d-175">This task ID is made available to your implementation through the <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> property.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="b789d-176">Código do cliente deve ter cuidado para fornecer um valor exclusivo para o <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="b789d-176">Client code must be careful to provide a unique value for the <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> property.</span></span> <span data-ttu-id="b789d-177">IDs de tarefa não exclusivos pode causar sua implementação relatar o andamento e outros eventos incorretamente.</span><span class="sxs-lookup"><span data-stu-id="b789d-177">Non-unique task IDs may cause your implementation to report progress and other events incorrectly.</span></span> <span data-ttu-id="b789d-178">Seu código deve verificar se há uma ID de tarefa não exclusivos e gerar um <xref:System.ArgumentException> caso uma seja detectada.</span><span class="sxs-lookup"><span data-stu-id="b789d-178">Your code should check for a non-unique task ID and raise an <xref:System.ArgumentException> if one is detected.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b789d-179">O exemplo de código a seguir demonstra como usar <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> para controlar o tempo de vida de operações assíncronas.</span><span class="sxs-lookup"><span data-stu-id="b789d-179">The following code example demonstrates using <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> to track the lifetime of asynchronous operations.</span></span> <span data-ttu-id="b789d-180">Este exemplo de código é parte de um exemplo maior fornecido para o <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> classe.</span><span class="sxs-lookup"><span data-stu-id="b789d-180">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#4)]
[!code-vb[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557"><span data-ttu-id="b789d-181">Práticas recomendadas de threading gerenciado</span><span class="sxs-lookup"><span data-stu-id="b789d-181">Managed Threading Best Practices</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/792aa8da-918b-458e-b154-9836b97735f3"><span data-ttu-id="b789d-182">Visão geral do padrão assíncrono baseado em evento</span><span class="sxs-lookup"><span data-stu-id="b789d-182">Event-based Asynchronous Pattern Overview</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>