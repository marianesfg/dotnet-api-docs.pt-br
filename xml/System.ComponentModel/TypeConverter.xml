<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="TypeConverter.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac529784c7bb8db50596e86f55caea973624c84e3d4.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">29784c7bb8db50596e86f55caea973624c84e3d4</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.TypeConverter">
          <source>Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.</source>
          <target state="translated">Fornece uma maneira unificada de converter tipos de valores em outros tipos, bem como acessar valores padrão e subpropriedades.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>The most common type of converter is one that converts to and from a text representation.</source>
          <target state="translated">O tipo mais comum de conversor é aquele converte uma representação de texto.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>The type converter for a class is bound to the class with a <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph>.</source>
          <target state="translated">O conversor de tipo para uma classe está associado à classe com um <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>Unless this attribute is overridden, all classes that inherit from this class use the same type converter as the base class.</source>
          <target state="translated">A menos que esse atributo for substituído, todas as classes que herdam desta classe usam o mesmo conversor de tipo como a classe base.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>For general type system purposes, do not access a type converter directly.</source>
          <target state="translated">Para fins de sistema do tipo geral, não acesse um conversor de tipo diretamente.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>Instead, access the appropriate converter by using <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph>.</source>
          <target state="translated">Em vez disso, acessar o conversor apropriado usando <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>For more information, see the code examples provided.</source>
          <target state="translated">Para obter mais informações, consulte os exemplos de código fornecidos.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept> For XAML purposes, a XAML processor searches for the <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph> directly, instead of going through <ph id="ph2">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph>.</source>
          <target state="translated"><bpt id="p1">**</bpt>Observação<ept id="p1">**</ept> para fins XAML, um processador XAML procura o <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph> diretamente, em vez de passar pelo <ph id="ph2">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>For cases where you do want a <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph> instance from code, or where you create a shared instance in WPF resources, it is acceptable to construct it directly without referencing <ph id="ph2">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph> or other reflection and type system support.</source>
          <target state="translated">Para casos onde você deseja uma <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph> instância do código, ou onde você pode criar uma instância compartilhada no WPF recursos, é aceitável para construí-lo diretamente sem referenciar <ph id="ph2">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph> ou outro sistema de reflexão e tipo de suporte.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>Classes derived from <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> are often referenced as part of how a XAML processor converts an attribute or initialization text value from markup (which is inherently a string) and generates an object for a run-time representation.</source>
          <target state="translated">Classes derivadas de <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> geralmente são referenciadas como parte de como um processador XAML converte um valor de texto de inicialização ou o atributo da marcação (que é inerentemente uma cadeia de caracteres) e gera um objeto para uma representação de tempo de execução.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>Custom type authors that intend to support a type conversion behavior for XAML typically implement a <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> class that supports their own unique <ph id="ph2">`ConvertFrom`</ph> behavior from a string.</source>
          <target state="translated">Os autores de tipo personalizado que pretendem dar suporte a um comportamento de conversão de tipo para XAML normalmente implementam um <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> classe que dá suporte a seus próprios exclusivo <ph id="ph2">`ConvertFrom`</ph> comportamento a partir de uma cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>This behavior enables type conversion from the string provided as a XAML attribute value and provides a XAML processor with the support needed to create an object from the string, so that the object can be produced in a parsed object graph.</source>
          <target state="translated">Esse comportamento permite a conversão de tipo de cadeia de caracteres fornecida como um valor de atributo XAML e fornece um processador XAML com o suporte necessário para criar um objeto de cadeia de caracteres, para que o objeto pode ser produzido em um gráfico de objeto analisado.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>Custom types or members of custom types are indicated by applying <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph> to the definitions, with the attribute referencing the custom <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> implementation.</source>
          <target state="translated">Tipos personalizados ou membros de tipos personalizados são indicados pela aplicação <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph> para as definições, com o atributo referência personalizado <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> implementação.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>For more information, see <bpt id="p1">[</bpt>Type Converters for XAML Overview<ept id="p1">](~/docs/framework/xaml-services/type-converters-for-xaml-overview.md)</ept>.</source>
          <target state="translated">Para obter mais informações, consulte <bpt id="p1">[</bpt>conversores de tipo para XAML Overview<ept id="p1">](~/docs/framework/xaml-services/type-converters-for-xaml-overview.md)</ept>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>The following code example shows how to create an instance of a type converter and bind it to a class.</source>
          <target state="translated">O exemplo de código a seguir mostra como criar uma instância de um conversor de tipo e associá-lo a uma classe.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>The class implementing the converter, <ph id="ph1">`MyClassConverter`</ph>, must inherit from the <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> class.</source>
          <target state="translated">A classe que implementa o conversor <ph id="ph1">`MyClassConverter`</ph>, herde o <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>When you have a property that has an enumeration, check to see whether an enumeration value is valid before setting the property.</source>
          <target state="translated">Quando você tem uma propriedade que tem uma enumeração, verifique se um valor de enumeração é válido antes de definir a propriedade.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>The next code example requires that an enumeration called <ph id="ph1">`MyPropertyEnum`</ph> has been declared.</source>
          <target state="translated">O exemplo de código a seguir exige que uma enumeração chamado <ph id="ph1">`MyPropertyEnum`</ph> foi declarado.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>Another common type converter usage is to convert an object to a string.</source>
          <target state="translated">Outro uso comum de conversor de tipo é converter um objeto em uma cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>The following code example prints out the name of the <ph id="ph1">&lt;xref:System.Drawing.Color&gt;</ph> stored in the variable <ph id="ph2">`c`</ph>.</source>
          <target state="translated">O exemplo de código a seguir imprime o nome do <ph id="ph1">&lt;xref:System.Drawing.Color&gt;</ph> armazenado na variável <ph id="ph2">`c`</ph>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>You can also use a type converter to convert a value from its name, as shown in the next code example.</source>
          <target state="translated">Você também pode usar um conversor de tipo para converter um valor de seu nome, conforme mostrado no exemplo de código a seguir.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>In the following code example, you can use a type converter to print out the set of standard values that the object supports.</source>
          <target state="translated">No exemplo de código a seguir, você pode usar um conversor de tipo para imprimir o conjunto de valores padrão que o objeto oferece suporte.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>Inherit from <ph id="ph1">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> to implement your own conversion requirements.</source>
          <target state="translated">Herdar de <ph id="ph1">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> para implementar seus próprios requisitos de conversão.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>When you inherit from this class, you can override the following methods:</source>
          <target state="translated">Quando você herda desta classe, você pode substituir os métodos a seguir:</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>To support custom type conversion, override the <ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)" /&gt;</ph>, <ph id="ph2">&lt;see cref="M:System.ComponentModel.TypeConverter.CanConvertTo(System.Type)" /&gt;</ph>, <ph id="ph3">&lt;see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)" /&gt;</ph>, and <ph id="ph4">&lt;see cref="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)" /&gt;</ph> methods.</source>
          <target state="translated">Para dar suporte à conversão de tipo personalizado, substitua o <ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)" /&gt;</ph>, <ph id="ph2">&lt;see cref="M:System.ComponentModel.TypeConverter.CanConvertTo(System.Type)" /&gt;</ph>, <ph id="ph3">&lt;see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)" /&gt;</ph>, e <ph id="ph4">&lt;see cref="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)" /&gt;</ph> métodos.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>To convert types that must re-create the object to change its value, override the <ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported" /&gt;</ph> methods.</source>
          <target state="translated">Para converter tipos que devem recriar o objeto para alterar seu valor, substitua o <ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /&gt;</ph> e <ph id="ph2">&lt;see cref="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported" /&gt;</ph> métodos.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>To convert types that support properties, override the <ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.ComponentModel.TypeConverter.GetPropertiesSupported" /&gt;</ph> methods.</source>
          <target state="translated">Para converter tipos que oferecem suporte a propriedades, substituir o <ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /&gt;</ph> e <ph id="ph2">&lt;see cref="M:System.ComponentModel.TypeConverter.GetPropertiesSupported" /&gt;</ph> métodos.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>If the class you are converting does not have properties, and you need to implement properties, you can use the <ph id="ph1">&lt;see cref="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor" /&gt;</ph> class as a base for implementing the property descriptors.</source>
          <target state="translated">Se a classe que você está convertendo não tiver propriedades e você precisa implementar propriedades, você pode usar o <ph id="ph1">&lt;see cref="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor" /&gt;</ph> classe como uma base para implementar os descritores de propriedade.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>When you inherit from <ph id="ph1">&lt;see cref="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor" /&gt;</ph>, you must override the <ph id="ph2">&lt;see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)" /&gt;</ph> and <ph id="ph3">&lt;see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)" /&gt;</ph> methods.</source>
          <target state="translated">Ao herdar de <ph id="ph1">&lt;see cref="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor" /&gt;</ph>, você deve substituir o <ph id="ph2">&lt;see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)" /&gt;</ph> e <ph id="ph3">&lt;see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)" /&gt;</ph> métodos.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>To convert types that support standard values, override the <ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /&gt;</ph>, <ph id="ph2">&lt;see cref="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive" /&gt;</ph>, <ph id="ph3">&lt;see cref="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported" /&gt;</ph> and <ph id="ph4">&lt;see cref="M:System.ComponentModel.TypeConverter.IsValid(System.Object)" /&gt;</ph> methods.</source>
          <target state="translated">Para converter tipos que oferecem suporte a valores padrão, substituir o <ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /&gt;</ph>, <ph id="ph2">&lt;see cref="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive" /&gt;</ph>, <ph id="ph3">&lt;see cref="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported" /&gt;</ph> e <ph id="ph4">&lt;see cref="M:System.ComponentModel.TypeConverter.IsValid(System.Object)" /&gt;</ph> métodos.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>Your derived type might be marked as <ph id="ph1">&lt;see langword="internal" /&gt;</ph> or <ph id="ph2">&lt;see langword="private" /&gt;</ph>, but an instance of your type can be created with the <ph id="ph3">&lt;see cref="T:System.ComponentModel.TypeDescriptor" /&gt;</ph> class.</source>
          <target state="translated">O tipo derivado pode ser marcado como <ph id="ph1">&lt;see langword="internal" /&gt;</ph> ou <ph id="ph2">&lt;see langword="private" /&gt;</ph>, mas uma instância do seu tipo pode ser criada com o <ph id="ph3">&lt;see cref="T:System.ComponentModel.TypeDescriptor" /&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>Do not write insecure code by assuming the caller is trusted.</source>
          <target state="translated">Não grave o código não seguro, supondo que o chamador é confiável.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>Assume instead that callers might create instances of your type in partial trust.</source>
          <target state="translated">Em vez disso, suponha que os chamadores podem criar instâncias de seu tipo em confiança parcial.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>For more information about type converters for general (non-XAML) purposes, see <bpt id="p1">[</bpt>How to: Implement a Type Converter<ept id="p1">](http://msdn.microsoft.com/library/90373a3f-d8c8-492d-841c-945d62393c56)</ept> or <bpt id="p2">[</bpt>Generalized Type Conversion<ept id="p2">](http://msdn.microsoft.com/library/49253ae6-7657-4810-82ab-1176a6feeada)</ept>.</source>
          <target state="translated">Para obter mais informações sobre conversores de tipo para fins gerais (não XAML), consulte <bpt id="p1">[</bpt>como: implementar um conversor de tipo<ept id="p1">](http://msdn.microsoft.com/library/90373a3f-d8c8-492d-841c-945d62393c56)</ept> ou <bpt id="p2">[</bpt>conversão do tipo generalizada<ept id="p2">](http://msdn.microsoft.com/library/49253ae6-7657-4810-82ab-1176a6feeada)</ept>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> class.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.TypeConverter">
          <source>Returns whether this converter can convert an object of one type to the type of this converter.</source>
          <target state="translated">Retorna se este conversor pode converter um objeto de um tipo no tipo desse conversor.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that represents the type you want to convert from.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> que representa o tipo do qual você deseja converter.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)">
          <source>Returns whether this converter can convert an object of the given type to the type of this converter.</source>
          <target state="translated">Retorna se este conversor pode converter um objeto do tipo indicado para o tipo deste conversor.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this converter can perform the conversion; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se esse conversor puder realizar a conversão; caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)">
          <source>As implemented in this class, this method always returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">Conforme implementado nesta classe, este método sempre retornará <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)">
          <source>It never returns <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Nunca retorna <ph id="ph1">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
          <source>An <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> that provides a format context.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> que fornece um contexto de formato.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that represents the type you want to convert from.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> que representa o tipo do qual você deseja converter.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
          <source>Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.</source>
          <target state="translated">Retorna se esse conversor pode converter um objeto do tipo especificado no tipo desse conversor, usando o contexto especificado.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this converter can perform the conversion; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se esse conversor puder realizar a conversão; caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
          <source>As implemented in this class, this method returns <ph id="ph1">`false`</ph>, unless <ph id="ph2">`sourceType`</ph> is an <ph id="ph3">&lt;xref:System.ComponentModel.Design.Serialization.InstanceDescriptor&gt;</ph>.</source>
          <target state="translated">Conforme implementado nesta classe, este método retorna <ph id="ph1">`false`</ph>, a menos que <ph id="ph2">`sourceType`</ph> é um <ph id="ph3">&lt;xref:System.ComponentModel.Design.Serialization.InstanceDescriptor&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
          <source>Override this method to provide your own conversion requirements.</source>
          <target state="translated">Substitua este método para fornecer seus próprios requisitos de conversão.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
          <source>Use the <ph id="ph1">&lt;paramref name="context" /&gt;</ph> parameter to extract additional information about the environment from which this converter is invoked.</source>
          <target state="translated">Use o <ph id="ph1">&lt;paramref name="context" /&gt;</ph> parâmetro para extrair informações adicionais sobre o ambiente do qual este conversor é invocado.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
          <source>This parameter can be <ph id="ph1">&lt;see langword="null" /&gt;</ph>, so always check it.</source>
          <target state="translated">Esse parâmetro pode ser <ph id="ph1">&lt;see langword="null" /&gt;</ph>, sempre verifique isso.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
          <source>Also, properties on the context object can return <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Além disso, as propriedades no objeto de contexto podem retornar <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.TypeConverter">
          <source>Returns whether this converter can convert the object to the specified type.</source>
          <target state="translated">Retorna se esse conversor pode converter o objeto para o tipo especificado.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.CanConvertTo(System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that represents the type you want to convert to.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> que representa o tipo para o qual você deseja converter.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.CanConvertTo(System.Type)">
          <source>Returns whether this converter can convert the object to the specified type.</source>
          <target state="translated">Retorna se esse conversor pode converter o objeto para o tipo especificado.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.CanConvertTo(System.Type)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this converter can perform the conversion; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se esse conversor puder realizar a conversão; caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.CanConvertTo(System.Type)">
          <source>If <ph id="ph1">`destinationType`</ph> is a string, the default implementation of <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter.CanConvertTo%2A&gt;</ph> always returns <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Se <ph id="ph1">`destinationType`</ph> é uma cadeia de caracteres, a implementação padrão de <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter.CanConvertTo%2A&gt;</ph> sempre retorna <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
          <source>An <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> that provides a format context.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> que fornece um contexto de formato.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that represents the type you want to convert to.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> que representa o tipo para o qual você deseja converter.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
          <source>Returns whether this converter can convert the object to the specified type, using the specified context.</source>
          <target state="translated">Retorna se esse conversor pode converter o objeto para o tipo especificado, usando o contexto especificado.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this converter can perform the conversion; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se esse conversor puder realizar a conversão; caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
          <source>Use the <ph id="ph1">`context`</ph> parameter to extract additional information about the environment from which this converter is invoked.</source>
          <target state="translated">Use o <ph id="ph1">`context`</ph> parâmetro para extrair informações adicionais sobre o ambiente do qual este conversor é invocado.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
          <source>This parameter can be <ph id="ph1">`null`</ph>, so always check it.</source>
          <target state="translated">Esse parâmetro pode ser <ph id="ph1">`null`</ph>, sempre verifique isso.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
          <source>Also, properties on the context object can return <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Além disso, as propriedades no objeto de contexto podem retornar <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
          <source>If <ph id="ph1">`destinationType`</ph> is a string, the default implementation of <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter.CanConvertTo%2A&gt;</ph> always returns <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Se <ph id="ph1">`destinationType`</ph> é uma cadeia de caracteres, a implementação padrão de <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter.CanConvertTo%2A&gt;</ph> sempre retorna <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
          <source>Override this method to provide your own conversion requirements.</source>
          <target state="translated">Substitua este método para fornecer seus próprios requisitos de conversão.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.TypeConverter">
          <source>Converts the given value to the type of this converter.</source>
          <target state="translated">Converte o valor fornecido noo tipo deste conversor.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to convert.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> a ser convertido.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)">
          <source>Converts the given value to the type of this converter.</source>
          <target state="translated">Converte o valor fornecido noo tipo deste conversor.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that represents the converted value.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> que representa o valor convertido.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)">
          <source>The conversion cannot be performed.</source>
          <target state="translated">A conversão não pode ser executada.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> that provides a format context.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> que fornece um contexto de formato.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> to use as the current culture.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> a ser usado como a cultura atual.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to convert.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> a ser convertido.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <source>Converts the given object to the type of this converter, using the specified context and culture information.</source>
          <target state="translated">Converte o objeto determinado para o tipo deste conversor, usando as informações de contexto e de cultura especificadas.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that represents the converted value.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> que representa o valor convertido.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <source>Custom type authors that intend to support a type conversion behavior for XAML typically implement a <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> class that supports <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter.ConvertFrom%2A&gt;</ph> behavior from a string.</source>
          <target state="translated">Os autores de tipo personalizado que pretendem dar suporte a um comportamento de conversão de tipo para XAML normalmente implementam um <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> classe que dá suporte a <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter.ConvertFrom%2A&gt;</ph> comportamento a partir de uma cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <source>This behavior enables type conversion from the string provided as a XAML attribute value and provides a XAML processor with the support needed to create an object from the string, so that the object can be produced in a parsed object graph.</source>
          <target state="translated">Esse comportamento permite a conversão de tipo de cadeia de caracteres fornecida como um valor de atributo XAML e fornece um processador XAML com o suporte necessário para criar um objeto de cadeia de caracteres, para que o objeto pode ser produzido em um gráfico de objeto analisado.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <source>Custom types or members of custom types are indicated by applying <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph> to the definitions, with the attribute referencing the custom <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> implementation.</source>
          <target state="translated">Tipos personalizados ou membros de tipos personalizados são indicados pela aplicação <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph> para as definições, com o atributo referência personalizado <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> implementação.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <source>For XAML purposes, you do not typically provide branching implementations based on <ph id="ph1">`culture`</ph>.</source>
          <target state="translated">Para fins XAML, você geralmente não fornecem as implementações de ramificação baseadas em <ph id="ph1">`culture`</ph>.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <source>This is because XAML is precompiled in a development environment context, and culture-specific information for runtime XAML is not relevant for XAML type conversion.</source>
          <target state="translated">Isso ocorre porque o XAML é pré-compilado em um contexto de ambiente de desenvolvimento e informações específicas de cultura para tempo de execução XAML não é relevante para a conversão de tipo XAML.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <source>For more information, see <bpt id="p1">[</bpt>Type Converters for XAML Overview<ept id="p1">](~/docs/framework/xaml-services/type-converters-for-xaml-overview.md)</ept>.</source>
          <target state="translated">Para obter mais informações, consulte <bpt id="p1">[</bpt>conversores de tipo para XAML Overview<ept id="p1">](~/docs/framework/xaml-services/type-converters-for-xaml-overview.md)</ept>.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <source>The conversion cannot be performed.</source>
          <target state="translated">A conversão não pode ser executada.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <source>Override this method to provide your own conversion requirements.</source>
          <target state="translated">Substitua este método para fornecer seus próprios requisitos de conversão.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <source>Use the <ph id="ph1">&lt;paramref name="context" /&gt;</ph> parameter to extract additional information about the environment from which this converter is invoked.</source>
          <target state="translated">Use o <ph id="ph1">&lt;paramref name="context" /&gt;</ph> parâmetro para extrair informações adicionais sobre o ambiente do qual este conversor é invocado.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <source>This parameter can be <ph id="ph1">&lt;see langword="null" /&gt;</ph>, so always check it.</source>
          <target state="translated">Esse parâmetro pode ser <ph id="ph1">&lt;see langword="null" /&gt;</ph>, sempre verifique isso.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <source>Also, properties on the context object can return <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Além disso, as propriedades no objeto de contexto podem retornar <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <source>For implementation patterns for type converters that are used to support XAML and custom types, see <bpt id="p1">[</bpt>Type Converters for XAML Overview<ept id="p1">](~/docs/framework/xaml-services/type-converters-for-xaml-overview.md)</ept>.</source>
          <target state="translated">Para padrões de implementação para conversores de tipo que são usados para oferecer suporte a XAML e tipos personalizados, consulte <bpt id="p1">[</bpt>conversores de tipo para XAML Overview<ept id="p1">](~/docs/framework/xaml-services/type-converters-for-xaml-overview.md)</ept>.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.TypeConverter">
          <source>Converts the value to a type of this converter, using the invariant culture.</source>
          <target state="translated">Converte o valor em um tipo deste conversor, usando a cultura invariável.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)">
          <source>The <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> to convert.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> a ser convertido.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)">
          <source>Converts the given string to the type of this converter, using the invariant culture.</source>
          <target state="translated">Converte a cadeia de caracteres fornecida para o tipo deste conversor usando a cultura invariável.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that represents the converted text.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> que representa o texto convertido.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)">
          <source>The default implementation always returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">A implementação padrão sempre retorna <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)">
          <source>The conversion cannot be performed.</source>
          <target state="translated">A conversão não pode ser executada.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)">
          <source>An <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> that provides a format context.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> que fornece um contexto de formato.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)">
          <source>The <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> to convert.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> a ser convertido.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)">
          <source>Converts the given string to the type of this converter, using the invariant culture and the specified context.</source>
          <target state="translated">Converte a cadeia de caracteres fornecida para o tipo deste conversor usando a cultura invariável e o contexto especificado.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that represents the converted text.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> que representa o texto convertido.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)">
          <source>An exception is raised if the string cannot be converted into the appropriate object.</source>
          <target state="translated">Uma exceção é gerada se a cadeia de caracteres não pode ser convertida para o objeto apropriado.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)">
          <source>The default implementation always returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">A implementação padrão sempre retorna <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)">
          <source>Use the <ph id="ph1">`context`</ph> parameter to extract additional information about the environment from which this converter is invoked.</source>
          <target state="translated">Use o <ph id="ph1">`context`</ph> parâmetro para extrair informações adicionais sobre o ambiente do qual este conversor é invocado.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)">
          <source>This parameter can be <ph id="ph1">`null`</ph>, so always check it.</source>
          <target state="translated">Esse parâmetro pode ser <ph id="ph1">`null`</ph>, sempre verifique isso.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)">
          <source>Also, properties on the context object can return <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Além disso, as propriedades no objeto de contexto podem retornar <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)">
          <source>The conversion cannot be performed.</source>
          <target state="translated">A conversão não pode ser executada.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.TypeConverter">
          <source>Converts the specified text to an object.</source>
          <target state="translated">Converte o texto especificado em um objeto.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFromString(System.String)">
          <source>The text representation of the object to convert.</source>
          <target state="translated">A representação de texto do objeto a ser convertido.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFromString(System.String)">
          <source>Converts the specified text to an object.</source>
          <target state="translated">Converte o texto especificado em um objeto.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFromString(System.String)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that represents the converted text.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> que representa o texto convertido.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFromString(System.String)">
          <source>The default implementation always returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">A implementação padrão sempre retorna <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFromString(System.String)">
          <source>For an example of this function, see the <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> class.</source>
          <target state="translated">Para obter um exemplo dessa função, consulte o <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFromString(System.String)">
          <source>The string cannot be converted into the appropriate object.</source>
          <target state="translated">A cadeia de caracteres não pode ser convertida em objeto apropriado.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
          <source>An <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> that provides a format context.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> que fornece um contexto de formato.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
          <source>The <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> to convert.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> a ser convertido.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
          <source>Converts the given text to an object, using the specified context.</source>
          <target state="translated">Converte o texto fornecido em um objeto, usando o contexto especificado.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that represents the converted text.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> que representa o texto convertido.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
          <source>An exception is raised if the string cannot be converted into the appropriate object.</source>
          <target state="translated">Uma exceção é gerada se a cadeia de caracteres não pode ser convertida para o objeto apropriado.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
          <source>The default implementation always returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">A implementação padrão sempre retorna <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
          <source>Use the <ph id="ph1">`context`</ph> parameter to extract additional information about the environment from which this converter is invoked.</source>
          <target state="translated">Use o <ph id="ph1">`context`</ph> parâmetro para extrair informações adicionais sobre o ambiente do qual este conversor é invocado.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
          <source>This parameter can be <ph id="ph1">`null`</ph>, so always check it.</source>
          <target state="translated">Esse parâmetro pode ser <ph id="ph1">`null`</ph>, sempre verifique isso.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
          <source>Also, properties on the context object can return <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Além disso, as propriedades no objeto de contexto podem retornar <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
          <source>The conversion cannot be performed.</source>
          <target state="translated">A conversão não pode ser executada.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
          <source>An <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> that provides a format context.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> que fornece um contexto de formato.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph>.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
          <source>If <ph id="ph1">&lt;see langword="null" /&gt;</ph> is passed, the current culture is assumed.</source>
          <target state="translated">Se <ph id="ph1">&lt;see langword="null" /&gt;</ph> for passado, a cultura atual será assumida.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
          <source>The <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> to convert.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> a ser convertido.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
          <source>Converts the given text to an object, using the specified context and culture information.</source>
          <target state="translated">Converte o texto fornecido em um objeto, usando o contexto e a informação de cultura especificados.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that represents the converted text.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> que representa o texto convertido.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
          <source>An exception is raised if the string cannot be converted into the appropriate object.</source>
          <target state="translated">Uma exceção é gerada se a cadeia de caracteres não pode ser convertida para o objeto apropriado.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
          <source>The default implementation always returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">A implementação padrão sempre retorna <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
          <source>Use the <ph id="ph1">`context`</ph> parameter to extract additional information about the environment from which this converter is invoked.</source>
          <target state="translated">Use o <ph id="ph1">`context`</ph> parâmetro para extrair informações adicionais sobre o ambiente do qual este conversor é invocado.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
          <source>This parameter can be <ph id="ph1">`null`</ph>, so always check it.</source>
          <target state="translated">Esse parâmetro pode ser <ph id="ph1">`null`</ph>, sempre verifique isso.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
          <source>Also, properties on the context object can return <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Além disso, as propriedades no objeto de contexto podem retornar <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
          <source>The conversion cannot be performed.</source>
          <target state="translated">A conversão não pode ser executada.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.TypeConverter">
          <source>Converts the given value object to the specified type.</source>
          <target state="translated">Converte o objeto de valor fornecido no tipo especificado.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to convert.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> a ser convertido.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> to convert the <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> parameter to.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> para o qual o parâmetro <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> será convertido.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)">
          <source>Converts the given value object to the specified type, using the arguments.</source>
          <target state="translated">Converte o objeto de valor especificado para o tipo especificado, usando os argumentos.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that represents the converted value.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> que representa o valor convertido.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)">
          <source>The most common type to convert to and from is a string object.</source>
          <target state="translated">O tipo mais comum para converter para e de é um objeto de cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)">
          <source>This implementation calls <ph id="ph1">&lt;xref:System.Object.ToString%2A&gt;</ph> on the object, if the object is valid and if the destination type is a string.</source>
          <target state="translated">Essa implementação chama <ph id="ph1">&lt;xref:System.Object.ToString%2A&gt;</ph> no objeto, se o objeto é válido e se o tipo de destino é uma cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)">
          <source>The <ph id="ph1">&lt;paramref name="destinationType" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O parâmetro <ph id="ph1">&lt;paramref name="destinationType" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)">
          <source>The conversion cannot be performed.</source>
          <target state="translated">A conversão não pode ser executada.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
          <source>An <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> that provides a format context.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> que fornece um contexto de formato.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph>.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
          <source>If <ph id="ph1">&lt;see langword="null" /&gt;</ph> is passed, the current culture is assumed.</source>
          <target state="translated">Se <ph id="ph1">&lt;see langword="null" /&gt;</ph> for passado, a cultura atual será assumida.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to convert.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> a ser convertido.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> to convert the <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> parameter to.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> para o qual o parâmetro <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> será convertido.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
          <source>Converts the given value object to the specified type, using the specified context and culture information.</source>
          <target state="translated">Converte o objeto de valor determinado para o tipo especificado, usando as informações de contexto e de cultura especificadas.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that represents the converted value.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> que representa o valor convertido.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
          <source>The most common types to convert are to and from a string object.</source>
          <target state="translated">Os tipos mais comuns para converter são de e para um objeto de cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
          <source>This implementation calls <ph id="ph1">&lt;xref:System.Object.ToString%2A&gt;</ph> on the object if the object is valid and if the destination type is a string.</source>
          <target state="translated">Essa implementação chama <ph id="ph1">&lt;xref:System.Object.ToString%2A&gt;</ph> no objeto se o objeto é válido e se o tipo de destino é uma cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
          <source>Use the <ph id="ph1">`context`</ph> parameter to extract additional information about the environment from which this converter is invoked.</source>
          <target state="translated">Use o <ph id="ph1">`context`</ph> parâmetro para extrair informações adicionais sobre o ambiente do qual este conversor é invocado.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
          <source>This parameter can be <ph id="ph1">`null`</ph>, so always check it.</source>
          <target state="translated">Esse parâmetro pode ser <ph id="ph1">`null`</ph>, sempre verifique isso.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
          <source>Also, properties on the context object can return <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Além disso, as propriedades no objeto de contexto podem retornar <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
          <source>Custom type authors that intend to support a type conversion behavior for XAML typically implement a <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> class that supports <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter.ConvertFrom%2A&gt;</ph> behavior from a string.</source>
          <target state="translated">Os autores de tipo personalizado que pretendem dar suporte a um comportamento de conversão de tipo para XAML normalmente implementam um <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> classe que dá suporte a <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter.ConvertFrom%2A&gt;</ph> comportamento a partir de uma cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
          <source>These type converters might also implement <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter.ConvertTo%2A&gt;</ph> to support serialization back to XAML.</source>
          <target state="translated">Esses conversores de tipo também podem implementar <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter.ConvertTo%2A&gt;</ph> para oferecer suporte à serialização para o XAML.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
          <source>Some XAML serialization scenarios cannot be adequately addressed with <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> alone.</source>
          <target state="translated">Alguns cenários de serialização de XAML não podem ser atendidos com <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> sozinho.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
          <source>In these cases, it may be necessary to also define a <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> that handles the serialization cases that would otherwise be handled by <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter.ConvertTo%2A&gt;</ph>.</source>
          <target state="translated">Nesses casos, pode ser necessário definir também uma <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> que manipula os casos de serialização que poderiam ser tratados por <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter.ConvertTo%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph>.</source>
          <target state="translated">Para obter mais informações, consulte <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
          <source>The <ph id="ph1">&lt;paramref name="destinationType" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O parâmetro <ph id="ph1">&lt;paramref name="destinationType" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
          <source>The conversion cannot be performed.</source>
          <target state="translated">A conversão não pode ser executada.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
          <source>Override this method to provide your own conversion requirements.</source>
          <target state="translated">Substitua este método para fornecer seus próprios requisitos de conversão.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
          <source>For implementation patterns for type converters that are used to support XAML and custom types, see <bpt id="p1">[</bpt>Type Converters for XAML Overview<ept id="p1">](~/docs/framework/xaml-services/type-converters-for-xaml-overview.md)</ept>.</source>
          <target state="translated">Para padrões de implementação para conversores de tipo que são usados para oferecer suporte a XAML e tipos personalizados, consulte <bpt id="p1">[</bpt>conversores de tipo para XAML Overview<ept id="p1">](~/docs/framework/xaml-services/type-converters-for-xaml-overview.md)</ept>.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.TypeConverter">
          <source>Converts the specified value to a culture-invariant string representation.</source>
          <target state="translated">Converte o valor especificado em uma representação de cadeia de caracteres invariável da cultura.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to convert.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> a ser convertido.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)">
          <source>Converts the specified value to a culture-invariant string representation.</source>
          <target state="translated">Converte o valor especificado em uma representação de cadeia de caracteres invariável da cultura.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that represents the converted value.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> que representa o valor convertido.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)">
          <source>The <ph id="ph1">`context`</ph> parameter can be used to extract additional information about the environment from which this converter is being invoked.</source>
          <target state="translated">O <ph id="ph1">`context`</ph> parâmetro pode ser usado para extrair informações adicionais sobre o ambiente do qual este conversor está sendo invocado.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)">
          <source>This can be <ph id="ph1">`null`</ph>, so always check.</source>
          <target state="translated">Isso pode ser <ph id="ph1">`null`</ph>. Portanto, sempre verifique.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)">
          <source>Also, properties on the context object can return <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Além disso, as propriedades no objeto de contexto podem retornar <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)">
          <source>Depending on the implementation of the value formatter, it might be possible to pass the returned string back into the value formatter to re-create an instance of the object.</source>
          <target state="translated">Dependendo da implementação do formatador de valor, pode ser possível passar a cadeia de caracteres retornada para o formatador de valor para recriar uma instância do objeto.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)">
          <source>The conversion cannot be performed.</source>
          <target state="translated">A conversão não pode ser executada.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> that provides a format context.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> que fornece um contexto de formato.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to convert.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> a ser convertido.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>Converts the specified value to a culture-invariant string representation, using the specified context.</source>
          <target state="translated">Converte o valor especificado em uma representação de cadeia de caracteres que não varia de acordo com a cultura, usando o contexto especificado.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that represents the converted value.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> que representa o valor convertido.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>Use the <ph id="ph1">`context`</ph> parameter to extract additional information about the environment from which this converter is invoked.</source>
          <target state="translated">Use o <ph id="ph1">`context`</ph> parâmetro para extrair informações adicionais sobre o ambiente do qual este conversor é invocado.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>This parameter can be <ph id="ph1">`null`</ph>, so always check it.</source>
          <target state="translated">Esse parâmetro pode ser <ph id="ph1">`null`</ph>, sempre verifique isso.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>Also, properties on the context object can return <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Além disso, as propriedades no objeto de contexto podem retornar <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>Depending on the implementation of the value formatter, it might be possible to pass the returned string back into the value formatter to re-create an instance of the object.</source>
          <target state="translated">Dependendo da implementação do formatador de valor, pode ser possível passar a cadeia de caracteres retornada para o formatador de valor para recriar uma instância do objeto.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>The conversion cannot be performed.</source>
          <target state="translated">A conversão não pode ser executada.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.TypeConverter">
          <source>Converts the specified value to a string representation.</source>
          <target state="translated">Converte o valor especificado em uma representação de cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertToString(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to convert.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> a ser convertido.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertToString(System.Object)">
          <source>Converts the specified value to a string representation.</source>
          <target state="translated">Converte o valor especificado em uma representação de cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertToString(System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that represents the converted value.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> que representa o valor convertido.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertToString(System.Object)">
          <source>Depending on the implementation of the value formatter, it might be possible to pass the returned string back into the value formatter to re-create an instance of the object.</source>
          <target state="translated">Dependendo da implementação do formatador de valor, pode ser possível passar a cadeia de caracteres retornada para o formatador de valor para recriar uma instância do objeto.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertToString(System.Object)">
          <source>For an example on this function, see the <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> class.</source>
          <target state="translated">Para obter um exemplo sobre esta função, consulte o <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertToString(System.Object)">
          <source>The conversion cannot be performed.</source>
          <target state="translated">A conversão não pode ser executada.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> that provides a format context.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> que fornece um contexto de formato.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to convert.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> a ser convertido.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>Converts the given value to a string representation, using the given context.</source>
          <target state="translated">Converte o valor especificado em uma representação de cadeia de caracteres, usando o contexto fornecido.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that represents the converted value.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> que representa o valor convertido.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>Use the <ph id="ph1">`context`</ph> parameter to extract additional information about the environment from which this converter is invoked.</source>
          <target state="translated">Use o <ph id="ph1">`context`</ph> parâmetro para extrair informações adicionais sobre o ambiente do qual este conversor é invocado.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>This parameter can be <ph id="ph1">`null`</ph>, so always check it.</source>
          <target state="translated">Esse parâmetro pode ser <ph id="ph1">`null`</ph>, sempre verifique isso.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>Also, properties on the context object can return <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Além disso, as propriedades no objeto de contexto podem retornar <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>Depending on the implementation of the value formatter, it might be possible to pass the returned string back into the value formatter to re-create an instance of the object.</source>
          <target state="translated">Dependendo da implementação do formatador de valor, pode ser possível passar a cadeia de caracteres retornada para o formatador de valor para recriar uma instância do objeto.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>The conversion cannot be performed.</source>
          <target state="translated">A conversão não pode ser executada.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> that provides a format context.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> que fornece um contexto de formato.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph>.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <source>If <ph id="ph1">&lt;see langword="null" /&gt;</ph> is passed, the current culture is assumed.</source>
          <target state="translated">Se <ph id="ph1">&lt;see langword="null" /&gt;</ph> for passado, a cultura atual será assumida.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to convert.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> a ser convertido.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <source>Converts the given value to a string representation, using the specified context and culture information.</source>
          <target state="translated">Converte o valor especificado em uma representação de cadeia de caracteres, usando as informações de contexto e cultura especificadas.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that represents the converted value.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> que representa o valor convertido.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <source>Use the <ph id="ph1">`context`</ph> parameter to extract additional information about the environment from which this converter is invoked.</source>
          <target state="translated">Use o <ph id="ph1">`context`</ph> parâmetro para extrair informações adicionais sobre o ambiente do qual este conversor é invocado.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <source>This parameter can be <ph id="ph1">`null`</ph>, so always check it.</source>
          <target state="translated">Esse parâmetro pode ser <ph id="ph1">`null`</ph>, sempre verifique isso.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <source>Also, properties on the context object can return <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Além disso, as propriedades no objeto de contexto podem retornar <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <source>Depending on the implementation of the value formatter, it might be possible to pass the returned string back into the value formatter to re-create an instance of the object.</source>
          <target state="translated">Dependendo da implementação do formatador de valor, pode ser possível passar a cadeia de caracteres retornada para o formatador de valor para recriar uma instância do objeto.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <source>The conversion cannot be performed.</source>
          <target state="translated">A conversão não pode ser executada.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.TypeConverter">
          <source>Re-creates an <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> given a set of property values for the object.</source>
          <target state="translated">Recria um <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> dado um conjunto de valores de propriedade do objeto.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> that represents a dictionary of new property values.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> que representa um dicionário de novos valores de propriedade.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)">
          <source>Re-creates an <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> given a set of property values for the object.</source>
          <target state="translated">Recria um <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> dado um conjunto de valores de propriedade do objeto.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> representing the given <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>, or <ph id="ph3">&lt;see langword="null" /&gt;</ph> if the object cannot be created.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> que representa o <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> fornecido ou <ph id="ph3">&lt;see langword="null" /&gt;</ph> se o objeto não puder ser criado.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)">
          <source>This method always returns <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Esse método sempre retorna <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)">
          <source>Use this method for objects that are immutable, but for which you want to provide changeable properties.</source>
          <target state="translated">Use esse método para objetos que são imutáveis, mas para o qual você deseja fornecer propriedades mutáveis.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)">
          <source>The dictionary provided by the <ph id="ph1">`propertyValues`</ph> parameter has a series of name/value pairs, one for each property returned from <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter.GetProperties%2A&gt;</ph>.</source>
          <target state="translated">O dicionário fornecido pelo <ph id="ph1">`propertyValues`</ph> parâmetro tem uma série de pares nome/valor, um para cada propriedade retornado de <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter.GetProperties%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
          <source>An <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> that provides a format context.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> que fornece um contexto de formato.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> of new property values.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> de novos valores de propriedade.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
          <source>Creates an instance of the type that this <ph id="ph1">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> is associated with, using the specified context, given a set of property values for the object.</source>
          <target state="translated">Cria uma instância do tipo ao qual esse <ph id="ph1">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> está associado, usando o contexto especificado, dado um conjunto de valores de propriedade para o objeto.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> representing the given <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>, or <ph id="ph3">&lt;see langword="null" /&gt;</ph> if the object cannot be created.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> que representa o <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> fornecido ou <ph id="ph3">&lt;see langword="null" /&gt;</ph> se o objeto não puder ser criado.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
          <source>This method always returns <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Esse método sempre retorna <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
          <source>Use this method for objects that are immutable, but for which you want to provide changeable properties.</source>
          <target state="translated">Use esse método para objetos que são imutáveis, mas para o qual você deseja fornecer propriedades mutáveis.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
          <source>Override this method if the type you want to convert must re-create the object to change its value.</source>
          <target state="translated">Substitua este método se o tipo que você deseja converter deve recriar o objeto para alterar seu valor.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
          <source>Use the <ph id="ph1">&lt;paramref name="context" /&gt;</ph> parameter to extract additional information about the environment from which this converter is invoked.</source>
          <target state="translated">Use o <ph id="ph1">&lt;paramref name="context" /&gt;</ph> parâmetro para extrair informações adicionais sobre o ambiente do qual este conversor é invocado.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
          <source>This parameter can be <ph id="ph1">&lt;see langword="null" /&gt;</ph>, so always check it.</source>
          <target state="translated">Esse parâmetro pode ser <ph id="ph1">&lt;see langword="null" /&gt;</ph>, sempre verifique isso.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
          <source>Also, properties on the context object can return <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Além disso, as propriedades no objeto de contexto podem retornar <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
          <source>The dictionary provided by the <ph id="ph1">&lt;paramref name="propertyValues" /&gt;</ph> parameter has a series of name/value pairs, one for each property returned from <ph id="ph2">&lt;see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /&gt;</ph>.</source>
          <target state="translated">O dicionário fornecido pelo <ph id="ph1">&lt;paramref name="propertyValues" /&gt;</ph> parâmetro tem uma série de pares nome/valor, um para cada propriedade retornado de <ph id="ph2">&lt;see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to convert, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the object is not available.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> a ser convertido ou <ph id="ph2">&lt;see langword="null" /&gt;</ph> se o objeto não estiver disponível.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)">
          <source>Returns an exception to throw when a conversion cannot be performed.</source>
          <target state="translated">Retorna uma exceção a ser gerada quando uma conversão não puder ser executada.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> that represents the exception to throw when a conversion cannot be performed.</source>
          <target state="translated">Uma <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> que representa a exceção a ser gerada quando uma conversão não puder ser executada.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)">
          <source>Automatically thrown by this method.</source>
          <target state="translated">Gerada automaticamente por este método.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to convert, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the object is not available.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> a ser convertido ou <ph id="ph2">&lt;see langword="null" /&gt;</ph> se o objeto não estiver disponível.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that represents the type the conversion was trying to convert to.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> que representa o tipo no qual a conversão estava tentando converter.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)">
          <source>Returns an exception to throw when a conversion cannot be performed.</source>
          <target state="translated">Retorna uma exceção a ser gerada quando uma conversão não puder ser executada.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> that represents the exception to throw when a conversion cannot be performed.</source>
          <target state="translated">Uma <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> que representa a exceção a ser gerada quando uma conversão não puder ser executada.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)">
          <source>Automatically thrown by this method.</source>
          <target state="translated">Gerada automaticamente por este método.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.TypeConverter">
          <source>Returns whether changing a value on this object requires a call to the <ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /&gt;</ph> method to create a new value.</source>
          <target state="translated">Retorna se a alteração de um valor neste objeto requer uma chamada ao método <ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /&gt;</ph> para criar um novo valor.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported">
          <source>Returns whether changing a value on this object requires a call to the <ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /&gt;</ph> method to create a new value.</source>
          <target state="translated">Retorna se a alteração de um valor neste objeto requer uma chamada ao método <ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /&gt;</ph> para criar um novo valor.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if changing a property on this object requires a call to <ph id="ph2">&lt;see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /&gt;</ph> to create a new value; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se a alteração de uma propriedade neste objeto requer uma chamada para <ph id="ph2">&lt;see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /&gt;</ph> para criar um novo valor, caso contrário, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
          <source>An <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> that provides a format context.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> que fornece um contexto de formato.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
          <source>Returns whether changing a value on this object requires a call to <ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /&gt;</ph> to create a new value, using the specified context.</source>
          <target state="translated">Retorna se a alteração de um valor neste objeto requer uma chamada para <ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /&gt;</ph> para criar um novo valor, usando o contexto especificado.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if changing a property on this object requires a call to <ph id="ph2">&lt;see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /&gt;</ph> to create a new value; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se a alteração de uma propriedade neste objeto requer uma chamada para <ph id="ph2">&lt;see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /&gt;</ph> para criar um novo valor, caso contrário, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
          <source>As implemented in this class, this method always returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">Conforme implementado nesta classe, este método sempre retornará <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
          <source>Override this method if the type you want to convert must re-create the object to change its value.</source>
          <target state="translated">Substitua este método se o tipo que você deseja converter deve recriar o objeto para alterar seu valor.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
          <source>Use the <ph id="ph1">&lt;paramref name="context" /&gt;</ph> parameter to extract additional information about the environment from which this converter is invoked.</source>
          <target state="translated">Use o <ph id="ph1">&lt;paramref name="context" /&gt;</ph> parâmetro para extrair informações adicionais sobre o ambiente do qual este conversor é invocado.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
          <source>This parameter can be <ph id="ph1">&lt;see langword="null" /&gt;</ph>, so always check it.</source>
          <target state="translated">Esse parâmetro pode ser <ph id="ph1">&lt;see langword="null" /&gt;</ph>, sempre verifique isso.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
          <source>Also, properties on the context object can return <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Além disso, as propriedades no objeto de contexto podem retornar <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.TypeConverter">
          <source>Returns a collection of properties for the type of array specified by the value parameter.</source>
          <target state="translated">Retorna uma coleção de propriedades para o tipo de matriz especificado pelo parâmetro de valor.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that specifies the type of array for which to get properties.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> que especifica o tipo de matriz para o qual obter as propriedades.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)">
          <source>Returns a collection of properties for the type of array specified by the value parameter.</source>
          <target state="translated">Retorna uma coleção de propriedades para o tipo de matriz especificado pelo parâmetro de valor.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)">
          <source>A <ph id="ph1">&lt;see cref="T:System.ComponentModel.PropertyDescriptorCollection" /&gt;</ph> with the properties that are exposed for this data type, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if there are no properties.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.ComponentModel.PropertyDescriptorCollection" /&gt;</ph> com as propriedades que são expostas para esse tipo de dados ou <ph id="ph2">&lt;see langword="null" /&gt;</ph>, se não há nenhuma propriedade.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)">
          <source>As implemented in this class, this method always returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Conforme implementado nesta classe, este método sempre retornará <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)">
          <source>By default, a type does not return properties.</source>
          <target state="translated">Por padrão, um tipo de retorno não propriedades.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)">
          <source>An easy implementation of this method can call <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptor.GetProperties%2A&gt;</ph> for the correct data type.</source>
          <target state="translated">Uma simples implementação desse método pode chamar <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptor.GetProperties%2A&gt;</ph> para o tipo de dados correto.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> that provides a format context.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> que fornece um contexto de formato.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that specifies the type of array for which to get properties.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> que especifica o tipo de matriz para o qual obter as propriedades.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>Returns a collection of properties for the type of array specified by the value parameter, using the specified context.</source>
          <target state="translated">Retorna uma coleção de propriedades para o tipo de matriz especificado pelo parâmetro de valor, usando o contexto especificado.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>A <ph id="ph1">&lt;see cref="T:System.ComponentModel.PropertyDescriptorCollection" /&gt;</ph> with the properties that are exposed for this data type, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if there are no properties.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.ComponentModel.PropertyDescriptorCollection" /&gt;</ph> com as propriedades que são expostas para esse tipo de dados ou <ph id="ph2">&lt;see langword="null" /&gt;</ph>, se não há nenhuma propriedade.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>Use the <ph id="ph1">`context`</ph> parameter to extract additional information about the environment from which this converter is invoked.</source>
          <target state="translated">Use o <ph id="ph1">`context`</ph> parâmetro para extrair informações adicionais sobre o ambiente do qual este conversor é invocado.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>This parameter can be <ph id="ph1">`null`</ph>, so always check it.</source>
          <target state="translated">Esse parâmetro pode ser <ph id="ph1">`null`</ph>, sempre verifique isso.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>Also, properties on the context object can return <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Além disso, as propriedades no objeto de contexto podem retornar <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>As implemented in this class, this method always returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Conforme implementado nesta classe, este método sempre retornará <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>By default, a type does not return properties.</source>
          <target state="translated">Por padrão, um tipo de retorno não propriedades.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>An easy implementation of this method can call <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptor.GetProperties%2A&gt;</ph> for the correct data type.</source>
          <target state="translated">Uma simples implementação desse método pode chamar <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptor.GetProperties%2A&gt;</ph> para o tipo de dados correto.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
          <source>An <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> that provides a format context.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> que fornece um contexto de formato.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that specifies the type of array for which to get properties.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> que especifica o tipo de matriz para o qual obter as propriedades.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.Attribute" /&gt;</ph> that is used as a filter.</source>
          <target state="translated">Uma matriz do tipo <ph id="ph1">&lt;see cref="T:System.Attribute" /&gt;</ph> que é usada como um filtro.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
          <source>Returns a collection of properties for the type of array specified by the value parameter, using the specified context and attributes.</source>
          <target state="translated">Retorna uma coleção de propriedades para o tipo de matriz especificado pelo parâmetro de valor, usando o contexto e os atributos especificados.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.ComponentModel.PropertyDescriptorCollection" /&gt;</ph> with the properties that are exposed for this data type, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if there are no properties.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.ComponentModel.PropertyDescriptorCollection" /&gt;</ph> com as propriedades que são expostas para esse tipo de dados ou <ph id="ph2">&lt;see langword="null" /&gt;</ph>, se não há nenhuma propriedade.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
          <source>As implemented in this class, this method always returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Conforme implementado nesta classe, este método sempre retornará <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
          <source>Override this method if the type you want to convert supports properties.</source>
          <target state="translated">Substitua este método se o tipo que você deseja converter oferece suporte às propriedades.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
          <source>Use the <ph id="ph1">&lt;paramref name="context" /&gt;</ph> parameter to extract additional information about the environment from which this converter is invoked.</source>
          <target state="translated">Use o <ph id="ph1">&lt;paramref name="context" /&gt;</ph> parâmetro para extrair informações adicionais sobre o ambiente do qual este conversor é invocado.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
          <source>This parameter can be <ph id="ph1">&lt;see langword="null" /&gt;</ph>, so always check it.</source>
          <target state="translated">Esse parâmetro pode ser <ph id="ph1">&lt;see langword="null" /&gt;</ph>, sempre verifique isso.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
          <source>Also, properties on the context object can return <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Além disso, as propriedades no objeto de contexto podem retornar <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
          <source>The attributes array is used to filter the array.</source>
          <target state="translated">A matriz de atributos é usada para filtrar a matriz.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
          <source>The attributes can have a mix of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> and <ph id="ph2">&lt;see cref="T:System.Attribute" /&gt;</ph> objects.</source>
          <target state="translated">Os atributos podem ter uma mistura de <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> e <ph id="ph2">&lt;see cref="T:System.Attribute" /&gt;</ph> objetos.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
          <source>Filtering is defined by the following rules:</source>
          <target state="translated">A filtragem é definida pelas seguintes regras:</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> is treated as a wildcard; it matches a property that has the <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> in its set of attributes.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> é tratado como um curinga; ele corresponde a uma propriedade que tem o <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> em seu conjunto de atributos.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
          <source>If a property does not have an <ph id="ph1">&lt;see cref="T:System.Attribute" /&gt;</ph> of the same class, the property is not included in the returned array.</source>
          <target state="translated">Se uma propriedade não tem um <ph id="ph1">&lt;see cref="T:System.Attribute" /&gt;</ph> da mesma classe, a propriedade não está incluída na matriz retornada.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
          <source>If the attribute is an instance of <ph id="ph1">&lt;see cref="T:System.Attribute" /&gt;</ph>, the property must be an exact match or it is not included in the returned array.</source>
          <target state="translated">Se o atributo for uma instância de <ph id="ph1">&lt;see cref="T:System.Attribute" /&gt;</ph>, a propriedade deve ser uma correspondência exata ou se ele não está incluído na matriz retornada.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
          <source>If an <ph id="ph1">&lt;see cref="T:System.Attribute" /&gt;</ph> instance is specified and it is the default property, it is included in the returned array even if there is no instance of the <ph id="ph2">&lt;see cref="T:System.Attribute" /&gt;</ph> in the property.</source>
          <target state="translated">Se um <ph id="ph1">&lt;see cref="T:System.Attribute" /&gt;</ph> instância for especificada e é a propriedade padrão, ele está incluído na matriz retornada mesmo se não houver nenhuma instância do <ph id="ph2">&lt;see cref="T:System.Attribute" /&gt;</ph> na propriedade.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.TypeConverter">
          <source>Returns whether this object supports properties.</source>
          <target state="translated">Retorna se este objeto dá suporte a propriedades.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetPropertiesSupported">
          <source>Returns whether this object supports properties.</source>
          <target state="translated">Retorna se este objeto dá suporte a propriedades.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetPropertiesSupported">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /&gt;</ph> should be called to find the properties of this object; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> caso <ph id="ph2">&lt;see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /&gt;</ph> deva ser chamado para localizar as propriedades desse objeto; caso contrário, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetPropertiesSupported">
          <source>As implemented in this class, this method always returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">Conforme implementado nesta classe, este método sempre retornará <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
          <source>An <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> that provides a format context.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> que fornece um contexto de formato.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
          <source>Returns whether this object supports properties, using the specified context.</source>
          <target state="translated">Retorna se este objeto é compatível com as propriedades, usando o contexto especificado.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /&gt;</ph> should be called to find the properties of this object; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> caso <ph id="ph2">&lt;see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /&gt;</ph> deva ser chamado para localizar as propriedades desse objeto; caso contrário, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
          <source>As implemented in this class, this method always returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">Conforme implementado nesta classe, este método sempre retornará <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
          <source>Override this method if the type you want to convert supports properties.</source>
          <target state="translated">Substitua este método se o tipo que você deseja converter oferece suporte às propriedades.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
          <source>Use the <ph id="ph1">&lt;paramref name="context" /&gt;</ph> parameter to extract additional information about the environment from which this converter is invoked.</source>
          <target state="translated">Use o <ph id="ph1">&lt;paramref name="context" /&gt;</ph> parâmetro para extrair informações adicionais sobre o ambiente do qual este conversor é invocado.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
          <source>This parameter can be <ph id="ph1">&lt;see langword="null" /&gt;</ph>, so always check it.</source>
          <target state="translated">Esse parâmetro pode ser <ph id="ph1">&lt;see langword="null" /&gt;</ph>, sempre verifique isso.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
          <source>Also, properties on the context object can return <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Além disso, as propriedades no objeto de contexto podem retornar <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.TypeConverter">
          <source>Returns a collection of standard values for the data type this type converter is designed for.</source>
          <target state="translated">Retorna uma coleção de valores padrão para o tipo de dados ao qual este conversor de tipo foi projetado.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetStandardValues">
          <source>Returns a collection of standard values from the default context for the data type this type converter is designed for.</source>
          <target state="translated">Retorna uma coleção de valores padrão do contexto padrão para o tipo de dados para o qual esse conversor de tipo foi criado.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetStandardValues">
          <source>A <ph id="ph1">&lt;see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /&gt;</ph> containing a standard set of valid values, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the data type does not support a standard set of values.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /&gt;</ph> que contém um conjunto padrão de valores válidos ou <ph id="ph2">&lt;see langword="null" /&gt;</ph> se o tipo de dados não der suporte a um conjunto padrão de valores.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetStandardValues">
          <source>As implemented in this class, this method always returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Conforme implementado nesta classe, este método sempre retornará <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
          <source>An <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> that provides a format context that can be used to extract additional information about the environment from which this converter is invoked.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> que fornece um contexto de formato que pode ser usado para extrair informações adicionais sobre o ambiente do qual este conversor é invocado.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
          <source>This parameter or properties of this parameter can be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Esse parâmetro ou as propriedades desse parâmetro podem ser <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
          <source>Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.</source>
          <target state="translated">Retorna uma coleção de valores padrão para o tipo de dados para o qual esse conversor de tipo foi criado quando fornecido com um contexto de formato.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
          <source>A <ph id="ph1">&lt;see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /&gt;</ph> that holds a standard set of valid values, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the data type does not support a standard set of values.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /&gt;</ph> que contém um conjunto padrão de valores válidos ou <ph id="ph2">&lt;see langword="null" /&gt;</ph>, se o tipo de dados não der suporte a um conjunto padrão de valores.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
          <source>As implemented in <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph>, this method always returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Conforme implementado no <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph>, esse método sempre retornará <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
          <source>For an example on this function, see the <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> class.</source>
          <target state="translated">Para obter um exemplo sobre esta função, consulte o <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
          <source>Override this method if the type you want to convert supports standard values.</source>
          <target state="translated">Substitua este método se o tipo que você deseja converter dá suporte a valores padrão.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.TypeConverter">
          <source>Returns whether the collection of standard values returned from <ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /&gt;</ph> is an exclusive list.</source>
          <target state="translated">Retorna se a coleção de valores padrão retornada de <ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /&gt;</ph> é uma lista exclusiva.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive">
          <source>Returns whether the collection of standard values returned from <ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /&gt;</ph> is an exclusive list.</source>
          <target state="translated">Retorna se a coleção de valores padrão retornada de <ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /&gt;</ph> é uma lista exclusiva.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /&gt;</ph> returned from <ph id="ph3">&lt;see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /&gt;</ph> is an exhaustive list of possible values; <ph id="ph4">&lt;see langword="false" /&gt;</ph> if other values are possible.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se o <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /&gt;</ph> retornado de <ph id="ph3">&lt;see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /&gt;</ph> for uma lista completa de valores possíveis, <ph id="ph4">&lt;see langword="false" /&gt;</ph> se houver outros valores possíveis.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive">
          <source>As implemented in this class, this method always returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">Conforme implementado nesta classe, este método sempre retornará <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive">
          <source>If the list is exclusive, such as in an enumeration data type, then no other values are valid.</source>
          <target state="translated">Se a lista for exclusiva, como em um tipo de dados de enumeração, não há outros valores são válidos.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive">
          <source>If the list is not exclusive, then other valid values might exist in addition to the list of standard values that the <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter.GetStandardValues%2A&gt;</ph> method provides.</source>
          <target state="translated">Se a lista não é exclusiva, então, podem existir outros valores válidos além da lista de padrão de valores que o <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter.GetStandardValues%2A&gt;</ph> método fornece.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive">
          <source>If the values are exclusive, the list returned by <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter.GetStandardValues%2A&gt;</ph> should not allow these values to be edited.</source>
          <target state="translated">Se os valores são exclusivos, a lista retornada por <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter.GetStandardValues%2A&gt;</ph> não deve permitir que esses valores a ser editado.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
          <source>An <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> that provides a format context.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> que fornece um contexto de formato.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
          <source>Returns whether the collection of standard values returned from <ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /&gt;</ph> is an exclusive list of possible values, using the specified context.</source>
          <target state="translated">Retorna se a coleção de valores padrão retornada de <ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /&gt;</ph> é uma lista exclusiva de valores possíveis, usando o contexto especificado.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /&gt;</ph> returned from <ph id="ph3">&lt;see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /&gt;</ph> is an exhaustive list of possible values; <ph id="ph4">&lt;see langword="false" /&gt;</ph> if other values are possible.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se o <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /&gt;</ph> retornado de <ph id="ph3">&lt;see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /&gt;</ph> for uma lista completa de valores possíveis, <ph id="ph4">&lt;see langword="false" /&gt;</ph> se houver outros valores possíveis.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
          <source>As implemented in this class, this method always returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">Conforme implementado nesta classe, este método sempre retornará <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
          <source>If the list is exclusive, such as in an enumeration data type, then no other values are valid.</source>
          <target state="translated">Se a lista for exclusiva, como em um tipo de dados de enumeração, não há outros valores são válidos.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
          <source>If the list is not exclusive, then other valid values might exist in addition to the list of standard values that the <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter.GetStandardValues%2A&gt;</ph> method provides.</source>
          <target state="translated">Se a lista não é exclusiva, então, podem existir outros valores válidos além da lista de padrão de valores que o <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter.GetStandardValues%2A&gt;</ph> método fornece.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
          <source>If the values are exclusive, the list returned by <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter.GetStandardValues%2A&gt;</ph> should not allow these values to be edited.</source>
          <target state="translated">Se os valores são exclusivos, a lista retornada por <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter.GetStandardValues%2A&gt;</ph> não deve permitir que esses valores a ser editado.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
          <source>Override this method if the type you want to convert supports standard values.</source>
          <target state="translated">Substitua este método se o tipo que você deseja converter dá suporte a valores padrão.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
          <source>Use the <ph id="ph1">&lt;paramref name="context" /&gt;</ph> parameter to extract additional information about the environment from which this converter is invoked.</source>
          <target state="translated">Use o <ph id="ph1">&lt;paramref name="context" /&gt;</ph> parâmetro para extrair informações adicionais sobre o ambiente do qual este conversor é invocado.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
          <source>This parameter can be <ph id="ph1">&lt;see langword="null" /&gt;</ph>, so always check it.</source>
          <target state="translated">Esse parâmetro pode ser <ph id="ph1">&lt;see langword="null" /&gt;</ph>, sempre verifique isso.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
          <source>Also, properties on the context object can return <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Além disso, as propriedades no objeto de contexto podem retornar <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.TypeConverter">
          <source>Returns whether this object supports a standard set of values that can be picked from a list.</source>
          <target state="translated">Retorna se este objeto dá suporte a um conjunto padrão de valores que podem ser escolhidos em uma lista.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported">
          <source>Returns whether this object supports a standard set of values that can be picked from a list.</source>
          <target state="translated">Retorna se este objeto dá suporte a um conjunto padrão de valores que podem ser escolhidos em uma lista.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /&gt;</ph> should be called to find a common set of values the object supports; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se <ph id="ph2">&lt;see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /&gt;</ph> deve ser chamado para localizar um conjunto comum de valores aos quais o objeto dá suporte; caso contrário, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
          <source>An <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> that provides a format context.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> que fornece um contexto de formato.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
          <source>Returns whether this object supports a standard set of values that can be picked from a list, using the specified context.</source>
          <target state="translated">Retorna se este objeto é compatível com um conjunto padrão de valores que podem ser escolhidos em uma lista, usando o contexto especificado.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /&gt;</ph> should be called to find a common set of values the object supports; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se <ph id="ph2">&lt;see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /&gt;</ph> deve ser chamado para localizar um conjunto comum de valores aos quais o objeto dá suporte; caso contrário, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
          <source>As implemented in this class, this method always returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">Conforme implementado nesta classe, este método sempre retornará <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
          <source>Use the <ph id="ph1">`context`</ph> parameter to extract additional information about the environment from which this converter is invoked.</source>
          <target state="translated">Use o <ph id="ph1">`context`</ph> parâmetro para extrair informações adicionais sobre o ambiente do qual este conversor é invocado.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
          <source>This parameter can be <ph id="ph1">`null`</ph>, so always check it.</source>
          <target state="translated">Esse parâmetro pode ser <ph id="ph1">`null`</ph>, sempre verifique isso.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
          <source>Also, properties on the context object can return <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Além disso, as propriedades no objeto de contexto podem retornar <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
          <source>Override this method if the type you want to convert supports standard values.</source>
          <target state="translated">Substitua este método se o tipo que você deseja converter dá suporte a valores padrão.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.TypeConverter">
          <source>Returns whether the given value object is valid for this type.</source>
          <target state="translated">Retorna se o objeto de valor especificado é válido para esse tipo.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.IsValid(System.Object)">
          <source>The object to test for validity.</source>
          <target state="translated">O objeto a ser testado quanto à validade.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.IsValid(System.Object)">
          <source>Returns whether the given value object is valid for this type.</source>
          <target state="translated">Retorna se o objeto de valor especificado é válido para esse tipo.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.IsValid(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the specified value is valid for this object; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se o valor especificado for válido para esse objeto; caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.IsValid(System.Object)">
          <source>Starting in <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, the <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter.IsValid%2A&gt;</ph> method catches exceptions from the <ph id="ph3">&lt;xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.ComponentModel.TypeConverter.ConvertFrom%2A&gt;</ph> methods.</source>
          <target state="translated">A partir do <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, o <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter.IsValid%2A&gt;</ph> método captura exceções a <ph id="ph3">&lt;xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A&gt;</ph> e <ph id="ph4">&lt;xref:System.ComponentModel.TypeConverter.ConvertFrom%2A&gt;</ph> métodos.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.IsValid(System.Object)">
          <source>If the input value type causes <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A&gt;</ph> to return <ph id="ph2">`false`</ph>, or if the input value causes <ph id="ph3">&lt;xref:System.ComponentModel.TypeConverter.ConvertFrom%2A&gt;</ph> to raise an exception, the <ph id="ph4">&lt;xref:System.ComponentModel.TypeConverter.IsValid%2A&gt;</ph> method returns <ph id="ph5">`false`</ph>.</source>
          <target state="translated">Se o tipo de valor de entrada faz com que <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A&gt;</ph> para retornar <ph id="ph2">`false`</ph>, ou se o valor de entrada faz com que <ph id="ph3">&lt;xref:System.ComponentModel.TypeConverter.ConvertFrom%2A&gt;</ph> para gerar uma exceção, o <ph id="ph4">&lt;xref:System.ComponentModel.TypeConverter.IsValid%2A&gt;</ph> método retornará <ph id="ph5">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.IsValid(System.Object)">
          <source>To enable the legacy behavior, insert the following lines into the configuration file of the application, for example, application1.exe.config.</source>
          <target state="translated">Para habilitar o comportamento herdado, insira as seguintes linhas no arquivo de configuração do aplicativo, por exemplo, application1.exe.config.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.IsValid(System.Object)">
          <source>Override this method if the type you want to convert supports standard values that can be validated.</source>
          <target state="translated">Substitua este método se o tipo que você deseja converter dá suporte a valores padrão que podem ser validados.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.IsValid(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeConverter.IsValid(System.Object)" /&gt;</ph> method is used to validate a value within the type rather than to determine if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> can be converted to the given type.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeConverter.IsValid(System.Object)" /&gt;</ph> método é usado para validar um valor dentro do tipo em vez de determinar se <ph id="ph2">&lt;paramref name="value" /&gt;</ph> pode ser convertido para o tipo fornecido.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.IsValid(System.Object)">
          <source>For example, <ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeConverter.IsValid(System.Object)" /&gt;</ph> can be used to determine if a given value is valid for an enumeration type.</source>
          <target state="translated">Por exemplo, <ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeConverter.IsValid(System.Object)" /&gt;</ph> pode ser usado para determinar se um valor fornecido é válido para um tipo de enumeração.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.IsValid(System.Object)">
          <source>For an example, see <ph id="ph1">&lt;see cref="T:System.ComponentModel.EnumConverter" /&gt;</ph>.</source>
          <target state="translated">Para ver um exemplo, consulte <ph id="ph1">&lt;see cref="T:System.ComponentModel.EnumConverter" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.IsValid(System.Object)">
          <source>You can write your own <bpt id="p1">&lt;c&gt;</bpt>WillConvertSucceed<ept id="p1">&lt;/c&gt;</ept> method by wrapping the <ph id="ph1">&lt;see cref="Overload:System.ComponentModel.TypeConverter.ConvertTo" /&gt;</ph> and <ph id="ph2">&lt;see cref="Overload:System.ComponentModel.TypeConverter.ConvertFrom" /&gt;</ph> methods in exception blocks.</source>
          <target state="translated">Você pode escrever seus próprios <bpt id="p1">&lt;c&gt;</bpt>WillConvertSucceed<ept id="p1">&lt;/c&gt;</ept> método encapsulando a <ph id="ph1">&lt;see cref="Overload:System.ComponentModel.TypeConverter.ConvertTo" /&gt;</ph> e <ph id="ph2">&lt;see cref="Overload:System.ComponentModel.TypeConverter.ConvertFrom" /&gt;</ph> métodos em blocos de exceção.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> that provides a format context.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> que fornece um contexto de formato.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to test for validity.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> para testar a validade.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>Returns whether the given value object is valid for this type and for the specified context.</source>
          <target state="translated">Retorna se o objeto de valor fornecido é válido para esse tipo e para o contexto especificado.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the specified value is valid for this object; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se o valor especificado for válido para esse objeto; caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>Use the <ph id="ph1">`context`</ph> parameter to extract additional information about the environment from which this converter is invoked.</source>
          <target state="translated">Use o <ph id="ph1">`context`</ph> parâmetro para extrair informações adicionais sobre o ambiente do qual este conversor é invocado.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>This parameter can be <ph id="ph1">`null`</ph>, so always check it.</source>
          <target state="translated">Esse parâmetro pode ser <ph id="ph1">`null`</ph>, sempre verifique isso.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>Also, properties on the context object can return <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Além disso, as propriedades no objeto de contexto podem retornar <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>Starting in <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, the <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter.IsValid%2A&gt;</ph> method catches exceptions from the <ph id="ph3">&lt;xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.ComponentModel.TypeConverter.ConvertFrom%2A&gt;</ph> methods.</source>
          <target state="translated">A partir do <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, o <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter.IsValid%2A&gt;</ph> método captura exceções a <ph id="ph3">&lt;xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A&gt;</ph> e <ph id="ph4">&lt;xref:System.ComponentModel.TypeConverter.ConvertFrom%2A&gt;</ph> métodos.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>If the input value type causes <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A&gt;</ph> to return <ph id="ph2">`false`</ph>, or if the input value causes <ph id="ph3">&lt;xref:System.ComponentModel.TypeConverter.ConvertFrom%2A&gt;</ph> to raise an exception, the <ph id="ph4">&lt;xref:System.ComponentModel.TypeConverter.IsValid%2A&gt;</ph> method returns <ph id="ph5">`false`</ph>.</source>
          <target state="translated">Se o tipo de valor de entrada faz com que <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A&gt;</ph> para retornar <ph id="ph2">`false`</ph>, ou se o valor de entrada faz com que <ph id="ph3">&lt;xref:System.ComponentModel.TypeConverter.ConvertFrom%2A&gt;</ph> para gerar uma exceção, o <ph id="ph4">&lt;xref:System.ComponentModel.TypeConverter.IsValid%2A&gt;</ph> método retornará <ph id="ph5">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>To enable the legacy behavior, insert the following lines into the configuration file of the application, for example, application1.exe.config.</source>
          <target state="translated">Para habilitar o comportamento herdado, insira as seguintes linhas no arquivo de configuração do aplicativo, por exemplo, application1.exe.config.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>For an example of this function, see the <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> class.</source>
          <target state="translated">Para obter um exemplo dessa função, consulte o <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>Override this method if the type you want to convert supports standard values that can be validated.</source>
          <target state="translated">Substitua este método se o tipo que você deseja converter dá suporte a valores padrão que podem ser validados.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)" /&gt;</ph> method is used to validate a value within the type rather than to determine if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> can be converted to the given type.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)" /&gt;</ph> método é usado para validar um valor dentro do tipo em vez de determinar se <ph id="ph2">&lt;paramref name="value" /&gt;</ph> pode ser convertido para o tipo fornecido.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>For example, <ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)" /&gt;</ph> can be used to determine if a given value is valid for an enumeration type.</source>
          <target state="translated">Por exemplo, <ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)" /&gt;</ph> pode ser usado para determinar se um valor fornecido é válido para um tipo de enumeração.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>For an example, see <ph id="ph1">&lt;see cref="T:System.ComponentModel.EnumConverter" /&gt;</ph>.</source>
          <target state="translated">Para ver um exemplo, consulte <ph id="ph1">&lt;see cref="T:System.ComponentModel.EnumConverter" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.ComponentModel.PropertyDescriptorCollection" /&gt;</ph> that has the properties to sort.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.ComponentModel.PropertyDescriptorCollection" /&gt;</ph> que tem as propriedades a serem classificadas.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])">
          <source>An array of names in the order you want the properties to appear in the collection.</source>
          <target state="translated">Uma matriz de nomes na ordem em que você deseja que as propriedades apareçam na coleção.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])">
          <source>Sorts a collection of properties.</source>
          <target state="translated">Classifica uma coleção de propriedades.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.ComponentModel.PropertyDescriptorCollection" /&gt;</ph> that contains the sorted properties.</source>
          <target state="translated">Uma <ph id="ph1">&lt;see cref="T:System.ComponentModel.PropertyDescriptorCollection" /&gt;</ph> que contém as propriedades classificadas.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])">
          <source>All properties in the collection that are not already in the array of names are added alphabetically to the end.</source>
          <target state="translated">Todas as propriedades na coleção que não ainda estão na matriz de nomes são adicionadas em ordem alfabética no final.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])">
          <source>If the <ph id="ph1">`names`</ph> parameter is an empty array or <ph id="ph2">`null`</ph>, all the properties in the collection are sorted alphabetically.</source>
          <target state="translated">Se o <ph id="ph1">`names`</ph> parâmetro é uma matriz vazia ou <ph id="ph2">`null`</ph>, todas as propriedades na coleção são classificadas em ordem alfabética.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>