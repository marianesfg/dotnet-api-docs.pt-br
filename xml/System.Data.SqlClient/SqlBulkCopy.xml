<Type Name="SqlBulkCopy" FullName="System.Data.SqlClient.SqlBulkCopy">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b7cf9458712d4c8e84f410ebd99be6f953ca2ac3" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51872596" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SqlBulkCopy : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlBulkCopy extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Data.SqlClient.SqlBulkCopy" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlBulkCopy&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlBulkCopy sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type SqlBulkCopy = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.SqlClient</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.4.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Permite um carregamento em massa eficiente de uma tabela do SQL Server com os dados de outra fonte.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Microsoft SQL Server inclui um utilitário de prompt de comando popular chamado **bcp** à movimentação de dados de uma tabela para outra, seja em um único servidor ou entre servidores. O <xref:System.Data.SqlClient.SqlBulkCopy> classe permite escrever soluções de código gerenciado que fornecem funcionalidade semelhante. Há outras maneiras de carregar dados em uma tabela do SQL Server (instruções de inserção, por exemplo), mas <xref:System.Data.SqlClient.SqlBulkCopy> oferece uma vantagem de desempenho significativa sobre eles.  
  
 O <xref:System.Data.SqlClient.SqlBulkCopy> classe pode ser usado para gravar dados somente em tabelas do SQL Server. No entanto, a fonte de dados não é limitada ao SQL Server; qualquer fonte de dados pode ser usada, desde que os dados podem ser carregados para um <xref:System.Data.DataTable> da instância ou de leitura com um <xref:System.Data.IDataReader> instância.  
  
 <xref:System.Data.SqlClient.SqlBulkCopy> falhará quando o carregamento em massa uma <xref:System.Data.DataTable> coluna de tipo <xref:System.Data.SqlTypes.SqlDateTime> em um SQL Server cujo tipo é um dos tipos de data/hora a coluna adicionada no SQL Server 2008.  
  
   
  
## Examples  
 O aplicativo de console a seguir demonstra como carregar dados usando o <xref:System.Data.SqlClient.SqlBulkCopy> classe. Neste exemplo, uma <xref:System.Data.SqlClient.SqlDataReader> é usado para copiar dados do **Production. Product** tabela no SQL Server **AdventureWorks** banco de dados em uma tabela semelhante no mesmo banco de dados.  
  
> [!IMPORTANT]
>  Este exemplo não será executado, a menos que você criou as tabelas de trabalho conforme descrito em [configuração de exemplo de cópia em massa](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Esse código é fornecido para demonstrar a sintaxe para usar **SqlBulkCopy** somente. Se as tabelas de origem e destino estiverem na mesma instância do SQL Server, é mais fácil e rápido para usar um Transact-SQL `INSERT … SELECT` instrução para copiar os dados.  
  
 [!code-csharp[DataWorks BulkCopy.Single#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/CS/source.cs#1)]
 [!code-vb[DataWorks BulkCopy.Single#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Executando operações de cópia em massa</related>
    <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Visão geral do ADO.NET</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Visão geral do ADO.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (System.Data.SqlClient.SqlConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.SqlClient.SqlConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connection As SqlConnection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::Data::SqlClient::SqlConnection ^ connection);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlBulkCopy : System.Data.SqlClient.SqlConnection -&gt; System.Data.SqlClient.SqlBulkCopy" Usage="new System.Data.SqlClient.SqlBulkCopy connection" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.SqlClient.SqlConnection" />
      </Parameters>
      <Docs>
        <param name="connection">A instância de <see cref="T:System.Data.SqlClient.SqlConnection" /> já aberta que será usada para executar a operação de cópia em massa. Se a cadeia de conexão não usar <see langword="Integrated Security = true" />, você poderá usar <see cref="T:System.Data.SqlClient.SqlCredential" /> para passar a ID de usuário e a senha com mais segurança do que especificando a ID de usuário e a senha como texto na cadeia de conexão.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> usando a instância de <see cref="T:System.Data.SqlClient.SqlConnection" /> aberta especificada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Porque a conexão já está aberto quando o <xref:System.Data.SqlClient.SqlBulkCopy> instância é inicializada, a conexão permanece aberta após a <xref:System.Data.SqlClient.SqlBulkCopy> instância está fechada.  
  
 Se o `connection` argumento for nulo, um <xref:System.ArgumentNullException> é gerada.  
  
   
  
## Examples  
 O aplicativo de console a seguir demonstra como carregar dados usando uma conexão que já está aberto em massa. Neste exemplo, uma <xref:System.Data.SqlClient.SqlDataReader> é usado para copiar dados do **Production. Product** tabela no SQL Server **AdventureWorks** banco de dados em uma tabela semelhante no mesmo banco de dados. Este exemplo tem fins apenas demonstrativos. Você não usaria `SqlBulkCopy` para mover dados de uma tabela para outra no mesmo banco de dados em um aplicativo de produção. Observe que os dados de origem não precisam estar localizado no SQL Server; Você pode usar qualquer fonte de dados que pode ser lidos para um <xref:System.Data.IDataReader> ou carregados para um <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  Este exemplo não será executado, a menos que você criou as tabelas de trabalho conforme descrito em [configuração de exemplo de cópia em massa](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Esse código é fornecido para demonstrar a sintaxe para usar **SqlBulkCopy** somente. Se as tabelas de origem e destino estiverem na mesma instância do SQL Server, é mais fácil e rápido para usar um Transact-SQL `INSERT … SELECT` instrução para copiar os dados.  
  
 [!code-csharp[DataWorks BulkCopy.Single#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/CS/source.cs#1)]
 [!code-vb[DataWorks BulkCopy.Single#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Executando operações de cópia em massa</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Visão geral do ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (string connectionString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::String ^ connectionString);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlBulkCopy : string -&gt; System.Data.SqlClient.SqlBulkCopy" Usage="new System.Data.SqlClient.SqlBulkCopy connectionString" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">A cadeia de caracteres que define a conexão será aberta para uso pela instância <see cref="T:System.Data.SqlClient.SqlBulkCopy" />. Se a cadeia de conexão não usar <see langword="Integrated Security = true" />, você poderá usar <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" /> ou <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" /> e <see cref="T:System.Data.SqlClient.SqlCredential" /> para passar a ID de usuário e a senha com mais segurança do que especificando a ID de usuário e a senha como texto na cadeia de conexão.</param>
        <summary>Inicializa e abre uma nova instância de <see cref="T:System.Data.SqlClient.SqlConnection" /> com base no <paramref name="connectionString" /> fornecido. O construtor usa o <see cref="T:System.Data.SqlClient.SqlConnection" /> para inicializar uma nova instância da classe <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A conexão será fechada automaticamente no final da operação de cópia em massa.  
  
 Se `connectionString` for nulo, um <xref:System.ArgumentNullException> é gerada. Se `connectionString` é uma cadeia de caracteres vazia, um <xref:System.ArgumentException> é gerada.  
  
   
  
## Examples  
 O aplicativo de console a seguir demonstra como carregar dados em massa por meio de uma conexão especificada como uma cadeia de caracteres. A conexão é fechado automaticamente quando o <xref:System.Data.SqlClient.SqlBulkCopy> instância está fechada.  
  
 Neste exemplo, a fonte de dados é lido primeiro de uma tabela do SQL Server para um <xref:System.Data.SqlClient.SqlDataReader> instância. A fonte de dados não precisa estar localizado no SQL Server; Você pode usar qualquer fonte de dados que pode ser lidos para um <xref:System.Data.IDataReader> ou carregados para um <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  Este exemplo não será executado, a menos que você criou as tabelas de trabalho conforme descrito em [configuração de exemplo de cópia em massa](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Esse código é fornecido para demonstrar a sintaxe para usar **SqlBulkCopy** somente. Se as tabelas de origem e destino estiverem na mesma instância do SQL Server, é mais fácil e rápido para usar um Transact-SQL `INSERT … SELECT` instrução para copiar os dados.  
  
 [!code-csharp[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Operações de cópia em massa no SQL Server</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Visão geral do ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (string connectionString, System.Data.SqlClient.SqlBulkCopyOptions copyOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString, valuetype System.Data.SqlClient.SqlBulkCopyOptions copyOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String, copyOptions As SqlBulkCopyOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::String ^ connectionString, System::Data::SqlClient::SqlBulkCopyOptions copyOptions);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlBulkCopy : string * System.Data.SqlClient.SqlBulkCopyOptions -&gt; System.Data.SqlClient.SqlBulkCopy" Usage="new System.Data.SqlClient.SqlBulkCopy (connectionString, copyOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="copyOptions" Type="System.Data.SqlClient.SqlBulkCopyOptions" />
      </Parameters>
      <Docs>
        <param name="connectionString">A cadeia de caracteres que define a conexão será aberta para uso pela instância <see cref="T:System.Data.SqlClient.SqlBulkCopy" />. Se a cadeia de conexão não usar <see langword="Integrated Security = true" />, você poderá usar <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" /> ou <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" /> e <see cref="T:System.Data.SqlClient.SqlCredential" /> para passar a ID de usuário e a senha com mais segurança do que especificando a ID de usuário e a senha como texto na cadeia de conexão.</param>
        <param name="copyOptions">Uma combinação de valores da enumeração <see cref="T:System.Data.SqlClient.SqlBulkCopyOptions" /> que determina quais linhas de fonte de dados são copiadas para a tabela de destino.</param>
        <summary>Inicializa e abre uma nova instância de <see cref="T:System.Data.SqlClient.SqlConnection" /> com base no <paramref name="connectionString" /> fornecido. O construtor usa <see cref="T:System.Data.SqlClient.SqlConnection" /> para inicializar uma nova instância da classe <see cref="T:System.Data.SqlClient.SqlBulkCopy" />. A instância <see cref="T:System.Data.SqlClient.SqlConnection" /> se comporta de acordo com as opções fornecidas no parâmetro <paramref name="copyOptions" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você pode obter informações detalhadas sobre todas as opções de cópia em massa no <xref:System.Data.SqlClient.SqlBulkCopyOptions> tópico.  
  
   
  
## Examples  
 O aplicativo de console a seguir demonstra como executar um carregamento em massa por meio de uma conexão especificada como uma cadeia de caracteres. Uma opção é definida para usar o valor na coluna de identidade da tabela de origem ao carregar a tabela de destino. Neste exemplo, a fonte de dados é lido primeiro de uma tabela do SQL Server para um <xref:System.Data.SqlClient.SqlDataReader> instância. A tabela de origem e a tabela de destino incluem uma coluna de identidade. Por padrão, um novo valor para o **identidade** coluna é gerada na tabela de destino para cada linha adicionada. Neste exemplo, uma opção é definida quando a conexão é aberta, o que força o processo de carregamento em massa ao usar o **identidade** valores da tabela de origem em vez disso. Para ver como a opção altera a forma funciona o carregamento em massa, executar o exemplo com o **dbo. BulkCopyDemoMatchingColumns** tabela vazia. Carregar todas as linhas da origem. Em seguida, execute o exemplo novamente sem esvaziando a tabela. Uma exceção é lançada e o código grava uma mensagem no console informando que as linhas não foram adicionadas por causa de violações de restrição de chave primária.  
  
> [!IMPORTANT]
>  Este exemplo não será executado, a menos que você criou as tabelas de trabalho conforme descrito em [configuração de exemplo de cópia em massa](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Esse código é fornecido para demonstrar a sintaxe para usar **SqlBulkCopy** somente. Se as tabelas de origem e destino estiverem na mesma instância do SQL Server, é mais fácil e rápido para usar um Transact-SQL `INSERT … SELECT` instrução para copiar os dados.  
  
 [!code-csharp[DataWorks SqlBulkCopy.KeepIdentity#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.KeepIdentity/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.KeepIdentity#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.KeepIdentity/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Executando operações de cópia em massa</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Visão geral do ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (System.Data.SqlClient.SqlConnection connection, System.Data.SqlClient.SqlBulkCopyOptions copyOptions, System.Data.SqlClient.SqlTransaction externalTransaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.SqlClient.SqlConnection connection, valuetype System.Data.SqlClient.SqlBulkCopyOptions copyOptions, class System.Data.SqlClient.SqlTransaction externalTransaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connection As SqlConnection, copyOptions As SqlBulkCopyOptions, externalTransaction As SqlTransaction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::Data::SqlClient::SqlConnection ^ connection, System::Data::SqlClient::SqlBulkCopyOptions copyOptions, System::Data::SqlClient::SqlTransaction ^ externalTransaction);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlBulkCopy : System.Data.SqlClient.SqlConnection * System.Data.SqlClient.SqlBulkCopyOptions * System.Data.SqlClient.SqlTransaction -&gt; System.Data.SqlClient.SqlBulkCopy" Usage="new System.Data.SqlClient.SqlBulkCopy (connection, copyOptions, externalTransaction)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.SqlClient.SqlConnection" />
        <Parameter Name="copyOptions" Type="System.Data.SqlClient.SqlBulkCopyOptions" />
        <Parameter Name="externalTransaction" Type="System.Data.SqlClient.SqlTransaction" />
      </Parameters>
      <Docs>
        <param name="connection">A instância <see cref="T:System.Data.SqlClient.SqlConnection" /> já aberta que será usada para realizar a cópia em massa. Se a cadeia de conexão não usar <see langword="Integrated Security = true" />, você poderá usar <see cref="T:System.Data.SqlClient.SqlCredential" /> para passar a ID de usuário e a senha com mais segurança do que especificando a ID de usuário e a senha como texto na cadeia de conexão.</param>
        <param name="copyOptions">Uma combinação de valores da enumeração <see cref="T:System.Data.SqlClient.SqlBulkCopyOptions" /> que determina quais linhas de fonte de dados são copiadas para a tabela de destino.</param>
        <param name="externalTransaction">Uma instância <see cref="T:System.Data.SqlClient.SqlTransaction" /> existente na qual a cópia em massa ocorrerá.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> usando a instância aberta existente fornecida do <see cref="T:System.Data.SqlClient.SqlConnection" />. A instância <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> se comporta de acordo com as opções fornecidas no parâmetro <paramref name="copyOptions" />. Se um <see cref="T:System.Data.SqlClient.SqlTransaction" /> não nulo for fornecido, as operações de cópia serão executadas nessa transação.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se as opções incluem `UseInternalTransaction` e o `externalTransaction` argumento não for nulo, um **InvalidArgumentException** é gerada.  
  
 Para obter exemplos que demonstram como usar `SqlBulkCopy` em uma transação, consulte [transações e operações de cópia em massa](~/docs/framework/data/adonet/sql/transaction-and-bulk-copy-operations.md).  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Executando operações de cópia em massa</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Visão geral do ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="BatchSize">
      <MemberSignature Language="C#" Value="public int BatchSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BatchSize" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.BatchSize" />
      <MemberSignature Language="VB.NET" Value="Public Property BatchSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BatchSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.BatchSize : int with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.BatchSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Número de linhas em cada lote. No final de cada lote, as linhas no lote são enviadas ao servidor.</summary>
        <value>O valor inteiro da propriedade <see cref="P:System.Data.SqlClient.SqlBulkCopy.BatchSize" />, ou zero, se nenhum valor foi definido.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um lote é concluída quando <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> linhas foram processadas ou não existem mais linhas para enviar para a fonte de dados de destino.  
  
 Zero (o padrão) indica que cada <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> operação é um único lote.  
  
 Se o <xref:System.Data.SqlClient.SqlBulkCopy> instância foi declarada sem a <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> opção em vigor, as linhas serão enviadas para o servidor <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> linhas de cada vez, mas nenhuma ação relacionadas à transação é executada. Se <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> está em vigor, cada lote de linhas é inserido como uma transação separada.  
  
 O <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> propriedade pode ser definida em qualquer momento. Se uma cópia em massa já está em andamento, o lote atual é dimensionado de acordo com o tamanho do lote anterior. Lotes subsequentes usam o novo tamanho. Se o <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> inicialmente é zero e as alterações feitas enquanto um <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> operação já está em andamento, que a operação carrega os dados como um único lote. Qualquer subsequentes <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> operações na mesma <xref:System.Data.SqlClient.SqlBulkCopy> instância usar o novo <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>.  
  
   
  
## Examples  
 O aplicativo de console a seguir demonstra como carregar dados em lotes de 50 linhas em massa. Para um exemplo que ilustra como <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> funciona com uma transação, consulte [transações e operações de cópia em massa](~/docs/framework/data/adonet/sql/transaction-and-bulk-copy-operations.md).  
  
 Neste exemplo, a fonte de dados é lido primeiro de uma tabela do SQL Server para um <xref:System.Data.SqlClient.SqlDataReader> instância. A fonte de dados não precisa estar localizado no SQL Server; Você pode usar qualquer fonte de dados que pode ser lidos para um <xref:System.Data.IDataReader> ou carregados para um <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  Este exemplo não será executado, a menos que você criou as tabelas de trabalho conforme descrito em [configuração de exemplo de cópia em massa](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Esse código é fornecido para demonstrar a sintaxe para usar **SqlBulkCopy** somente. Se as tabelas de origem e destino estiverem na mesma instância do SQL Server, é mais fácil e rápido para usar um Transact-SQL `INSERT … SELECT` instrução para copiar os dados.  
  
 [!code-csharp[DataWorks SqlBulkCopy.BatchSize#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.BatchSize/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.BatchSize#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.BatchSize/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Operações de cópia em massa no SQL Server</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Visão geral do ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="BulkCopyTimeout">
      <MemberSignature Language="C#" Value="public int BulkCopyTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BulkCopyTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property BulkCopyTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BulkCopyTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.BulkCopyTimeout : int with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Número de segundos para que a operação seja concluída antes de atingir o tempo limite.</summary>
        <value>O valor inteiro da propriedade <see cref="P:System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout" />. O padrão é 30 segundos. O valor 0 indica que não há limite; a cópia em massa aguardará indefinidamente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se a operação atinge o tempo limite, a transação não é confirmada e todas as linhas copiadas são removidas da tabela de destino.  
  
   
  
## Examples  
 O aplicativo de console a seguir demonstra como modificar o tempo limite de 60 segundos quando os dados de carregamento em massa.  
  
 Neste exemplo, a fonte de dados é lido primeiro de uma tabela do SQL Server para um <xref:System.Data.SqlClient.SqlDataReader> instância. A fonte de dados não precisa estar localizado no SQL Server; Você pode usar qualquer fonte de dados que pode ser lidos para um <xref:System.Data.IDataReader> ou carregados para um <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  Este exemplo não será executado, a menos que você criou as tabelas de trabalho conforme descrito em [configuração de exemplo de cópia em massa](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Esse código é fornecido para demonstrar a sintaxe para usar **SqlBulkCopy** somente. Se as tabelas de origem e destino estiverem na mesma instância do SQL Server, ele é mais fácil e mais rápido usar um [!INCLUDE[tsql](~/includes/tsql-md.md)] `INSERT … SELECT` instrução para copiar os dados.  
  
 [!code-csharp[DataWorks SqlBulkCopy.Timeout#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Timeout/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.Timeout#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Timeout/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Executando operações de cópia em massa</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Visão geral do ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="sqlBulkCopy.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Fecha a instância <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Depois de chamar um <xref:System.Data.SqlClient.SqlBulkCopy.Close%2A> sobre o <xref:System.Data.SqlClient.SqlBulkCopy> do objeto, nenhuma outra operação será bem-sucedida. Chamadas para o <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> método lançará um <xref:System.InvalidOperationException>.  
  
 Chamar o <xref:System.Data.SqlClient.SqlBulkCopy.Close%2A> método da <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> evento faz com que um <xref:System.InvalidOperationException> seja lançada.  
  
 Observe que são abertos <xref:System.Data.SqlClient.SqlBulkCopy> instâncias são fechadas implicitamente no final de um `using` bloco.  
  
   
  
## Examples  
 O exemplo a seguir usa o mesmo <xref:System.Data.SqlClient.SqlBulkCopy> instância para adicionar os pedidos de vendas e os detalhes associados a duas tabelas de destino. Porque o **AdventureWorks** tabelas de ordem de venda forem grandes, o exemplo lê apenas os pedidos feitos por um determinado número de conta e em massa copia esses pedidos e detalhes para as tabelas de destino. O <xref:System.Data.SqlClient.SqlBulkCopy.Close%2A> método é usado somente depois que ambas as operações de cópia em massa forem concluídas.  
  
> [!IMPORTANT]
>  Este exemplo não será executado, a menos que você criou as tabelas de trabalho conforme descrito em [configuração de exemplo de cópia em massa](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Esse código é fornecido para demonstrar a sintaxe para usar **SqlBulkCopy** somente. Se as tabelas de origem e destino estiverem na mesma instância do SQL Server, é mais fácil e rápido para usar um Transact-SQL `INSERT … SELECT` instrução para copiar os dados.  
  
 [!code-csharp[DataWorks SqlBulkCopy.OrdersDetails#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.OrdersDetails/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.OrdersDetails#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.OrdersDetails/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Executando operações de cópia em massa</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Visão geral do ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ColumnMappings">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlBulkCopyColumnMappingCollection ColumnMappings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.SqlClient.SqlBulkCopyColumnMappingCollection ColumnMappings" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.ColumnMappings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ColumnMappings As SqlBulkCopyColumnMappingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SqlClient::SqlBulkCopyColumnMappingCollection ^ ColumnMappings { System::Data::SqlClient::SqlBulkCopyColumnMappingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ColumnMappings : System.Data.SqlClient.SqlBulkCopyColumnMappingCollection" Usage="System.Data.SqlClient.SqlBulkCopy.ColumnMappings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlBulkCopyColumnMappingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retorna uma coleção de itens <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" />. Mapeamentos de coluna definem as relações entre colunas na fonte de dados e colunas no destino.</summary>
        <value>Uma coleção de mapeamentos de coluna. Por padrão, trata-se de uma coleção vazia.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se a fonte de dados e a tabela de destino têm o mesmo número de colunas e a posição ordinal de cada coluna na fonte de dados de origem corresponde a posição ordinal da coluna de destino correspondente, o <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> coleção é desnecessária. No entanto, se as contagens de coluna são diferentes, ou as posições ordinais não são consistentes, você deve usar <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> para certificar-se de que os dados são copiados para as colunas corretas.  
  
 Durante a execução de uma operação de cópia em massa, essa coleção pode ser acessada, mas ele não pode ser alterado. Qualquer tentativa de alterá-lo lançará um <xref:System.InvalidOperationException>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" />
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Executando operações de cópia em massa</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Visão geral do ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="DestinationTableName">
      <MemberSignature Language="C#" Value="public string DestinationTableName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DestinationTableName" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />
      <MemberSignature Language="VB.NET" Value="Public Property DestinationTableName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DestinationTableName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DestinationTableName : string with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Nome da tabela de destino no servidor.</summary>
        <value>O valor da cadeia de caracteres da propriedade <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> ou null se nenhum tiver sido aplicado.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> não foi definido quando <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> é chamado, um <xref:System.ArgumentNullException> é gerada.  
  
 Se <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> for modificada enquanto um <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> operação está em execução, a alteração não afeta a operação atual. O novo <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> valor é usado na próxima vez que um <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> método é chamado.  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> é um nome de três partes (`<database>.<owningschema>.<name>`). Se você escolher, você pode qualificar o nome da tabela com seu banco de dados e o esquema de propriedade. No entanto, se o nome da tabela usa um caractere de sublinhado ("_") ou outros caracteres especiais, você deve ignorar o nome usando colchetes como em (`[<database>.<owningschema>.<name_01>]`). Para obter mais informações, consulte [identificadores de banco de dados](/sql/relational-databases/databases/database-identifiers).  
  
 Você pode os dados de cópia em massa em uma tabela temporária usando um valor, como `tempdb..#table` ou `tempdb.<owner>.#table` para o <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> propriedade.  
  
   
  
## Examples  
 O aplicativo de console a seguir demonstra como carregar dados usando uma conexão que já está aberto em massa. A tabela de destino é uma tabela na **AdventureWorks** banco de dados.  
  
 Neste exemplo, a conexão pela primeira vez é usado para ler dados de uma tabela do SQL Server para um <xref:System.Data.SqlClient.SqlDataReader> instância. A fonte de dados não precisa estar localizado no SQL Server; Você pode usar qualquer fonte de dados que pode ser lidos para um <xref:System.Data.IDataReader> ou carregados para um <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  Este exemplo não será executado, a menos que você criou as tabelas de trabalho conforme descrito em [configuração de exemplo de cópia em massa](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Esse código é fornecido para demonstrar a sintaxe para usar **SqlBulkCopy** somente. Se as tabelas de origem e destino estiverem na mesma instância do SQL Server, é mais fácil e rápido para usar um Transact-SQL `INSERT … SELECT` instrução para copiar os dados.  
  
 [!code-csharp[DataWorks SqlBulkCopy.Single#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Single/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.Single#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Single/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Executando operações de cópia em massa</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Visão geral do ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="EnableStreaming">
      <MemberSignature Language="C#" Value="public bool EnableStreaming { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableStreaming" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.EnableStreaming" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableStreaming As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableStreaming { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableStreaming : bool with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.EnableStreaming" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Habilita ou desabilita um objeto <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> a transmitir dados de um objeto <see cref="T:System.Data.IDataReader" /></summary>
        <value>
          <see langword="true" /> se um objeto <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> puder transmitir dados de um objeto <see cref="T:System.Data.IDataReader" />; caso contrário, falso. O padrão é <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando <xref:System.Data.SqlClient.SqlBulkCopy.EnableStreaming%2A> está `true`, <xref:System.Data.SqlClient.SqlBulkCopy> lê de um <xref:System.Data.IDataReader> objeto usando <xref:System.Data.CommandBehavior.SequentialAccess>, otimizando o uso de memória usando o <xref:System.Data.IDataReader> recursos de streaming. Quando ela é definida como false, o <xref:System.Data.SqlClient.SqlBulkCopy> classe carrega todos os dados retornados pelo <xref:System.Data.IDataReader> objeto na memória antes de enviá-la para o SQL Server ou SQL Azure.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyAfter">
      <MemberSignature Language="C#" Value="public int NotifyAfter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NotifyAfter" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" />
      <MemberSignature Language="VB.NET" Value="Public Property NotifyAfter As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int NotifyAfter { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.NotifyAfter : int with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.NotifyAfter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Define o número de linhas a serem processadas antes de gerar um evento de notificação.</summary>
        <value>O valor inteiro da propriedade <see cref="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" />, ou zero, se a propriedade não tiver sido definida.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propriedade destina-se a componentes de interface do usuário que ilustram o progresso de uma operação de cópia em massa. Ele indica o número de linhas a serem processadas antes de gerar um evento de notificação. O <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> propriedade pode ser definida em qualquer momento, mesmo durante uma operação de cópia em massa está em andamento. As alterações feitas durante uma operação de cópia em massa entrarão em vigor depois da próxima notificação. A nova configuração se aplica a todas as operações subsequentes na mesma instância.  
  
 Se <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> é definido como um número menor que zero, um <xref:System.ArgumentOutOfRangeException> é gerada.  
  
   
  
## Examples  
 O aplicativo de console a seguir demonstra como carregar dados usando uma conexão que já está aberto em massa. O <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> propriedade é definida para que o manipulador de eventos é chamado depois que cada 50 linhas copiadas para a tabela.  
  
 Neste exemplo, a conexão pela primeira vez é usado para ler dados de uma tabela do SQL Server para um <xref:System.Data.SqlClient.SqlDataReader> instância. Em seguida, uma segunda conexão é aberta para copiar os dados em massa. Observe que os dados de origem não precisam estar localizado no SQL Server; Você pode usar qualquer fonte de dados que pode ser lidos para um <xref:System.Data.IDataReader> ou carregados para um <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  Este exemplo não será executado, a menos que você criou as tabelas de trabalho conforme descrito em [configuração de exemplo de cópia em massa](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Esse código é fornecido para demonstrar a sintaxe para usar **SqlBulkCopy** somente. Se as tabelas de origem e destino estiverem na mesma instância do SQL Server, é mais fácil e rápido para usar um Transact-SQL `INSERT … SELECT` instrução para copiar os dados.  
  
 [!code-csharp[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Executando operações de cópia em massa</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Visão geral do ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="SqlRowsCopied">
      <MemberSignature Language="C#" Value="public event System.Data.SqlClient.SqlRowsCopiedEventHandler SqlRowsCopied;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.SqlClient.SqlRowsCopiedEventHandler SqlRowsCopied" />
      <MemberSignature Language="DocId" Value="E:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SqlRowsCopied As SqlRowsCopiedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::SqlClient::SqlRowsCopiedEventHandler ^ SqlRowsCopied;" />
      <MemberSignature Language="F#" Value="member this.SqlRowsCopied : System.Data.SqlClient.SqlRowsCopiedEventHandler " Usage="member this.SqlRowsCopied : System.Data.SqlClient.SqlRowsCopiedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlRowsCopiedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre sempre que o número de linhas especificado pela propriedade <see cref="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" /> foram processadas.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Observe que as configurações de <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> e <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> são independentes. Recebimento de uma <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> eventos não significa que todas as linhas foram enviadas para o servidor ou confirmadas.  
  
 Você não pode chamar SqlBulkCopy.Close (<xref:System.Data.SqlClient.SqlBulkCopy.Close%2A>) ou SqlConnection.Close (<xref:System.Data.SqlClient.SqlConnection.Close%2A>) desse evento. Essa ação fará uma <xref:System.InvalidOperationException> que está sendo gerada e o <xref:System.Data.SqlClient.SqlBulkCopy> estado do objeto não será alterado. Se o usuário deseja cancelar a operação do evento, o <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A> propriedade do <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs> pode ser usado. (Consulte [transações e operações de cópia em massa](~/docs/framework/data/adonet/sql/transaction-and-bulk-copy-operations.md) para obter exemplos que usam o <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A> propriedade.)  
  
 Nenhuma ação, como atividade de transação, é suportada na conexão durante a execução da operação de cópia em massa, e é recomendável que você não use a mesma conexão usada durante o <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> eventos. No entanto, você pode abrir uma conexão diferente.  
  
   
  
## Examples  
 O aplicativo de console a seguir demonstra como carregar dados usando uma conexão que já está aberto em massa. O <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> propriedade é definida para que o manipulador de eventos é chamado depois que cada 50 linhas copiadas para a tabela.  
  
 Neste exemplo, a conexão pela primeira vez é usado para ler dados de uma tabela do SQL Server para um <xref:System.Data.SqlClient.SqlDataReader> instância. Observe que os dados de origem não precisam estar localizado no SQL Server; Você pode usar qualquer fonte de dados que pode ser lidos para um <xref:System.Data.IDataReader> ou carregados para um <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  Este exemplo não será executado, a menos que você criou as tabelas de trabalho conforme descrito em [configuração de exemplo de cópia em massa](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Esse código é fornecido para demonstrar a sintaxe para usar **SqlBulkCopy** somente. Se as tabelas de origem e destino estiverem na mesma instância do SQL Server, é mais fácil e rápido para usar um Transact-SQL `INSERT … SELECT` instrução para copiar os dados.  
  
 [!code-csharp[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Executando operações de cópia em massa</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Visão geral do ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libera todos os recursos usados pela instância atual da classe <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chame `Dispose` quando tiver terminado de usar o <xref:System.Data.SqlClient.SqlBulkCopy>. O `Dispose` método deixa o <xref:System.Data.SqlClient.SqlBulkCopy> em um estado inutilizável. Depois de chamar `Dispose`, você deve liberar todas as referências para o <xref:System.Data.SqlClient.SqlBulkCopy> para que o coletor de lixo possa recuperar a memória que o <xref:System.Data.SqlClient.SqlBulkCopy> estava ocupando.  
  
 Para obter mais informações, consulte [limpeza de recursos não gerenciados](~/docs/standard/garbage-collection/unmanaged.md) e [implementando um método Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
> [!NOTE]
>  Sempre chamar `Dispose` antes de liberar sua última referência para o <xref:System.Data.SqlClient.SqlBulkCopy>. Caso contrário, os recursos que ele está usando não serão liberados até que o coletor de lixo chame o <xref:System.Data.SqlClient.SqlBulkCopy> do objeto `Finalize` método.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Visão geral do ADO.NET</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteToServer">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Copia todas as linhas da matriz de uma fonte de dados para uma tabela de destino especificada pela propriedade <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> do objeto <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se conjuntos de resultados ativos múltiplos (MARS) é desabilitado, <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> torna a conexão ocupada. Se o MARS é habilitado, você pode intercalar chamadas para <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> com outros comandos na mesma conexão.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Executando operações de cópia em massa</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Visão geral do ADO.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.Common.DbDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.Common.DbDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (reader As DbDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::Common::DbDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.Common.DbDataReader -&gt; unit" Usage="sqlBulkCopy.WriteToServer reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" />
      </Parameters>
      <Docs>
        <param name="reader">Um <see cref="T:System.Data.Common.DbDataReader" /> cujas linhas serão copiadas para a tabela de destino.</param>
        <summary>Copia todas as linhas da matriz <see cref="T:System.Data.Common.DbDataReader" /> fornecida para uma tabela de destino especificada pela propriedade <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> do objeto <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.DataRow[] rows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.DataRow[] rows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (rows As DataRow())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(cli::array &lt;System::Data::DataRow ^&gt; ^ rows);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.DataRow[] -&gt; unit" Usage="sqlBulkCopy.WriteToServer rows" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" />
      </Parameters>
      <Docs>
        <param name="rows">Uma matriz de objetos <see cref="T:System.Data.DataRow" /> que será copiada para a tabela de destino.</param>
        <summary>Copia todas as linhas da matriz <see cref="T:System.Data.DataRow" /> fornecida para uma tabela de destino especificada pela propriedade <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> do objeto <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Enquanto a operação de cópia em massa está em andamento, o destino associado <xref:System.Data.SqlClient.SqlConnection> está ocupada atendendo a ele, e nenhuma outra operação pode ser executada sobre a conexão.  
  
 O <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> mapas de coleção do <xref:System.Data.DataRow> colunas à tabela de banco de dados de destino.  
  
   
  
## Examples  
 O aplicativo de console a seguir demonstra como copiar em massa carregar dados de um <xref:System.Data.DataRow> matriz. A tabela de destino é uma tabela na **AdventureWorks** banco de dados.  
  
 Neste exemplo, um <xref:System.Data.DataTable> é criado em tempo de execução. Uma única linha é selecionada do <xref:System.Data.DataTable> para copiar para a tabela de destino.  
  
> [!IMPORTANT]
>  Este exemplo não será executado, a menos que você criou as tabelas de trabalho conforme descrito em [configuração de exemplo de cópia em massa](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Esse código é fornecido para demonstrar a sintaxe para usar **SqlBulkCopy** somente. Se as tabelas de origem e destino estiverem na mesma instância do SQL Server, é mais fácil e rápido para usar um Transact-SQL `INSERT … SELECT` instrução para copiar os dados.  
  
 [!code-csharp[DataWorks SqlBulkCopy.RowArray#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.RowArray/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.RowArray#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.RowArray/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Executando operações de cópia em massa</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Visão geral do ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (table As DataTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::DataTable ^ table);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.DataTable -&gt; unit" Usage="sqlBulkCopy.WriteToServer table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="table">Um <see cref="T:System.Data.DataTable" /> cujas linhas serão copiadas para a tabela de destino.</param>
        <summary>Copia todas as linhas no <see cref="T:System.Data.DataTable" /> fornecido para uma tabela de destino especificada pela propriedade <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> do objeto <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Todas as linhas as <xref:System.Data.DataTable> são copiados para a tabela de destino, exceto aqueles que foram excluídos.  
  
 Enquanto a operação de cópia em massa está em andamento, o destino associado <xref:System.Data.SqlClient.SqlConnection> está ocupada atendendo a ele, e nenhuma outra operação pode ser executada sobre a conexão.  
  
 O <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> mapas de coleção do <xref:System.Data.DataTable> colunas à tabela de banco de dados de destino.  
  
   
  
## Examples  
 O aplicativo de Console a seguir demonstra como copiar em massa carregar dados de um <xref:System.Data.DataTable>. A tabela de destino é uma tabela na **AdventureWorks** banco de dados.  
  
 Neste exemplo, uma <xref:System.Data.DataTable> é criado em tempo de execução e é a origem do `SqlBulkCopy` operação.  
  
> [!IMPORTANT]
>  Este exemplo não será executado, a menos que você criou as tabelas de trabalho conforme descrito em [configuração de exemplo de cópia em massa](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Esse código é fornecido para demonstrar a sintaxe para usar **SqlBulkCopy** somente. Se as tabelas de origem e destino estiverem na mesma instância do SQL Server, é mais fácil e rápido para usar um Transact-SQL `INSERT … SELECT` instrução para copiar os dados.  
  
 [!code-csharp[DataWorks SqlBulkCopy.DataTable#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataTable/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.DataTable#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataTable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Executando operações de cópia em massa</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Visão geral do ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.IDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.IDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (reader As IDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::IDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.IDataReader -&gt; unit" Usage="sqlBulkCopy.WriteToServer reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" />
      </Parameters>
      <Docs>
        <param name="reader">Um <see cref="T:System.Data.IDataReader" /> cujas linhas serão copiadas para a tabela de destino.</param>
        <summary>Copia todas as linhas no <see cref="T:System.Data.IDataReader" /> fornecido para uma tabela de destino especificada pela propriedade <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> do objeto <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Inicia a operação de cópia na próxima linha disponível no leitor. Na maioria das vezes, o leitor apenas foi retornado por <xref:System.Data.IDbCommand.ExecuteReader%2A> ou uma chamada semelhante, portanto, a próxima linha disponível é a primeira linha. Para processar vários resultados, chame <xref:System.Data.IDataReader.NextResult%2A> sobre o leitor de dados e chamar <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> novamente.  
  
 Observe que o uso <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> modifica o estado do leitor. Chamará o método <xref:System.Data.IDataReader.Read%2A> até que ela retorna false, a operação é anulada ou ocorre um erro. Isso significa que o leitor de dados estará em um estado diferente, provavelmente no final do conjunto de resultados, quando o <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> operação é concluída.  
  
 Enquanto a operação de cópia em massa está em andamento, o destino associado <xref:System.Data.SqlClient.SqlConnection> está ocupada atendendo a ele, e nenhuma outra operação pode ser executada sobre a conexão.  
  
 O <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> mapas de coleção dos dados de colunas de leitor para a tabela de banco de dados de destino.  
  
   
  
## Examples  
 O aplicativo de console a seguir demonstra como copiar em massa carregar dados de um <xref:System.Data.SqlClient.SqlDataReader>. A tabela de destino é uma tabela na **AdventureWorks** banco de dados.  
  
> [!IMPORTANT]
>  Este exemplo não será executado, a menos que você criou as tabelas de trabalho conforme descrito em [configuração de exemplo de cópia em massa](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Esse código é fornecido para demonstrar a sintaxe para usar **SqlBulkCopy** somente. Se as tabelas de origem e destino estiverem na mesma instância do SQL Server, é mais fácil e rápido para usar um Transact-SQL `INSERT … SELECT` instrução para copiar os dados.  
  
 [!code-csharp[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Executando operações de cópia em massa</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Visão geral do ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.DataTable table, System.Data.DataRowState rowState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.DataTable table, valuetype System.Data.DataRowState rowState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (table As DataTable, rowState As DataRowState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::DataTable ^ table, System::Data::DataRowState rowState);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.DataTable * System.Data.DataRowState -&gt; unit" Usage="sqlBulkCopy.WriteToServer (table, rowState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="rowState" Type="System.Data.DataRowState" />
      </Parameters>
      <Docs>
        <param name="table">Um <see cref="T:System.Data.DataTable" /> cujas linhas serão copiadas para a tabela de destino.</param>
        <param name="rowState">Um valor da enumeração <see cref="T:System.Data.DataRowState" />. Somente as linhas que correspondem ao estado de linha são copiadas para o destino.</param>
        <summary>Copia apenas linhas que correspondem ao estado de linha fornecido no <see cref="T:System.Data.DataTable" /> fornecido para uma tabela de destino especificada pela propriedade <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> do objeto <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Apenas as linhas as <xref:System.Data.DataTable> que estão nos Estados indicados no `rowState` argumento e não ter sido excluído são copiados para a tabela de destino.  
  
> [!NOTE]
>  Se <xref:System.Data.DataRowState.Deleted> for especificado, qualquer <xref:System.Data.DataRowState.Unchanged>, <xref:System.Data.DataRowState.Added>, e <xref:System.Data.DataRowState.Modified> linhas também serão copiadas para o servidor. Nenhuma exceção será gerada.  
  
 Enquanto a operação de cópia em massa está em andamento, o destino associado <xref:System.Data.SqlClient.SqlConnection> está ocupada atendendo a ele, e nenhuma outra operação pode ser executada sobre a conexão.  
  
 O <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> mapas de coleção do <xref:System.Data.DataTable> colunas à tabela de banco de dados de destino.  
  
   
  
## Examples  
 O Console do seguinte aplicativo demonstra como copiar em massa carrega apenas as linhas em um <xref:System.Data.DataTable> que correspondam a um estado especificado. Nesse caso, somente as linhas inalteradas são adicionadas. A tabela de destino é uma tabela na **AdventureWorks** banco de dados.  
  
 Neste exemplo, um <xref:System.Data.DataTable> é criado em tempo de execução e três linhas são adicionadas a ele. Antes do <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> método é executado, uma das linhas é editada. O <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> método é chamado com um `DataRowState.Unchanged` `rowState` argumento, portanto, somente as duas linhas inalteradas são copiados em massa para o destino.  
  
> [!IMPORTANT]
>  Este exemplo não será executado, a menos que você criou as tabelas de trabalho conforme descrito em [configuração de exemplo de cópia em massa](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Esse código é fornecido para demonstrar a sintaxe para usar **SqlBulkCopy** somente. Se as tabelas de origem e destino estiverem na mesma instância do SQL Server, é mais fácil e rápido para usar um Transact-SQL `INSERT … SELECT` instrução para copiar os dados.  
  
 [!code-csharp[DataWorks SqlBulkCopy.DataRowState#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataRowState/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.DataRowState#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataRowState/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.DataRowState" />
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Executando operações de cópia em massa</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Visão geral do ADO.NET</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteToServerAsync">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Uma versão assíncrona do <see cref="Overload:System.Data.SqlClient.SqlBulkCopy.WriteToServer" />, que copia todas as linhas de uma fonte de dados para uma tabela de destino especificada pela propriedade <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> do objeto <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se conjuntos de resultados ativos múltiplos (MARS) é desabilitado, <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> torna a conexão ocupada. Se o MARS é habilitado, você pode intercalar chamadas para <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> com outros comandos na mesma conexão.  
  
 O número de linhas que serão revertidas quando uma falha depende de várias coisas:  
  
-   Se <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> for especificado.  
  
-   Se você tiver sua própria transação.  
  
-   O valor de <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>.  
  
 Quando ocorre um erro ao enviar dados para o servidor, o lote atual (conforme especificado por <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>) será revertida. Se <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> não for especificado e você tem sua própria transação, a transação inteira será revertida (que inclui todos os lotes anteriores).  
  
 Use <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> saber quantas linhas foram copiadas para o servidor.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.Common.DbDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.Common.DbDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (reader As DbDataReader) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::Common::DbDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.Common.DbDataReader -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" />
      </Parameters>
      <Docs>
        <param name="reader">Um <see cref="T:System.Data.Common.DbDataReader" /> cujas linhas serão copiadas para a tabela de destino.</param>
        <summary>A versão assíncrona do <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" />, que copia todas as linhas da matriz <see cref="T:System.Data.Common.DbDataReader" /> fornecida para uma tabela de destino especificada pela propriedade <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> do objeto <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <returns>Uma tarefa que representa a operação assíncrona.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataRow[] rows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataRow[] rows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (rows As DataRow()) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(cli::array &lt;System::Data::DataRow ^&gt; ^ rows);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataRow[] -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync rows" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" />
      </Parameters>
      <Docs>
        <param name="rows">Uma matriz de objetos <see cref="T:System.Data.DataRow" /> que será copiada para a tabela de destino.</param>
        <summary>A versão assíncrona do <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />, que copia todas as linhas da matriz <see cref="T:System.Data.DataRow" /> fornecida para uma tabela de destino especificada pela propriedade <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> do objeto <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <returns>Uma tarefa que representa a operação assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter mais informações sobre a programação assíncrona no .NET Framework Data Provider para SQL Server, consulte [programação assíncrona](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Chamando <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> várias vezes para a mesma instância antes da conclusão da tarefa.  
  
Chamando <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> e <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" /> para a mesma instância antes da conclusão da tarefa.  
  
A conexão cai ou é fechada durante a execução do <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" />.  
  
Retornado no objeto de tarefa, o objeto <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> foi fechado durante a execução do método.  
  
Retornado no objeto de tarefa, houve um tempo limite do pool de conexão.  
  
Retornado no objeto de tarefa, o objeto <see cref="T:System.Data.SqlClient.SqlConnection" /> foi fechado antes da execução do método.  
  
 <see langword="Context Connection=true" /> é especificado na cadeia de conexão.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Retornado no objeto de tarefa, qualquer erro retornado pelo SQL Server que ocorreu ao abrir a conexão.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (table As DataTable) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataTable -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="table">Um <see cref="T:System.Data.DataTable" /> cujas linhas serão copiadas para a tabela de destino.</param>
        <summary>A versão assíncrona de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />, que copia todas as linhas no <see cref="T:System.Data.DataTable" /> fornecido para uma tabela de destino especificada pela propriedade <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> do objeto <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <returns>Uma tarefa que representa a operação assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter mais informações sobre a programação assíncrona no .NET Framework Data Provider para SQL Server, consulte [programação assíncrona](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Chamando <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> várias vezes para a mesma instância antes da conclusão da tarefa.  
  
Chamando <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> e <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" /> para a mesma instância antes da conclusão da tarefa.  
  
A conexão cai ou é fechada durante a execução do <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />.  
  
Retornado no objeto de tarefa, o objeto <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> foi fechado durante a execução do método.  
  
Retornado no objeto de tarefa, houve um tempo limite do pool de conexão.  
  
Retornado no objeto de tarefa, o objeto <see cref="T:System.Data.SqlClient.SqlConnection" /> foi fechado antes da execução do método.  
  
 <see langword="Context Connection=true" /> é especificado na cadeia de conexão.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Retornado no objeto de tarefa, qualquer erro retornado pelo SQL Server que ocorreu ao abrir a conexão.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.IDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.IDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (reader As IDataReader) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::IDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.IDataReader -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" />
      </Parameters>
      <Docs>
        <param name="reader">Um <see cref="T:System.Data.IDataReader" /> cujas linhas serão copiadas para a tabela de destino.</param>
        <summary>A versão assíncrona de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />, que copia todas as linhas no <see cref="T:System.Data.IDataReader" /> fornecido para uma tabela de destino especificada pela propriedade <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> do objeto <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <returns>Uma tarefa que representa a operação assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter mais informações sobre a programação assíncrona no .NET Framework Data Provider para SQL Server, consulte [programação assíncrona](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Chamando <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> várias vezes para a mesma instância antes da conclusão da tarefa.  
  
Chamando <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> e <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" /> para a mesma instância antes da conclusão da tarefa.  
  
A conexão cai ou é fechada durante a execução do <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" />.  
  
Retornado no objeto de tarefa, o objeto <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> foi fechado durante a execução do método.  
  
Retornado no objeto de tarefa, houve um tempo limite do pool de conexão.  
  
Retornado no objeto de tarefa, o objeto <see cref="T:System.Data.SqlClient.SqlConnection" /> foi fechado antes da execução do método.  
  
O <see cref="T:System.Data.IDataReader" /> foi fechado antes de o <see cref="T:System.Threading.Tasks.Task" /> preenchido ser retornado.  
  
A conexão associada do <see cref="T:System.Data.IDataReader" /> foi fechada antes de o <see cref="T:System.Threading.Tasks.Task" /> preenchido ser retornado.  
  
 <see langword="Context Connection=true" /> é especificado na cadeia de conexão.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Retornado no objeto de tarefa, qualquer erro retornado pelo SQL Server que ocorreu ao abrir a conexão.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.Common.DbDataReader reader, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.Common.DbDataReader reader, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::Common::DbDataReader ^ reader, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.Common.DbDataReader * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (reader, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="reader">Um <see cref="T:System.Data.Common.DbDataReader" /> cujas linhas serão copiadas para a tabela de destino.</param>
        <param name="cancellationToken">A instrução de cancelamento. Um valor <see cref="P:System.Threading.CancellationToken.None" /> nesse parâmetro torna esse método equivalente a <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)" />.</param>
        <summary>A versão assíncrona do <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" />, que copia todas as linhas da matriz <see cref="T:System.Data.Common.DbDataReader" /> fornecida para uma tabela de destino especificada pela propriedade <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> do objeto <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <returns>Retorna <see cref="T:System.Threading.Tasks.Task" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataRow[] rows, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataRow[] rows, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[],System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(cli::array &lt;System::Data::DataRow ^&gt; ^ rows, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataRow[] * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (rows, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="rows">Uma matriz de objetos <see cref="T:System.Data.DataRow" /> que será copiada para a tabela de destino.</param>
        <param name="cancellationToken">A instrução de cancelamento. Um valor <see cref="P:System.Threading.CancellationToken.None" /> nesse parâmetro torna esse método equivalente a <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />.</param>
        <summary>A versão assíncrona do <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />, que copia todas as linhas da matriz <see cref="T:System.Data.DataRow" /> fornecida para uma tabela de destino especificada pela propriedade <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> do objeto <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.  
  
O token de cancelamento pode ser usado para solicitar que a operação seja abandonada antes de expirar o tempo limite do comando.  As exceções serão relatadas por meio do objeto de tarefa.</summary>
        <returns>Uma tarefa que representa a operação assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter mais informações sobre a programação assíncrona no .NET Framework Data Provider para SQL Server, consulte [programação assíncrona](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Chamando <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> várias vezes para a mesma instância antes da conclusão da tarefa.  
  
Chamando <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> e <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" /> para a mesma instância antes da conclusão da tarefa.  
  
A conexão cai ou é fechada durante a execução do <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" />.  
  
Retornado no objeto de tarefa, o objeto <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> foi fechado durante a execução do método.  
  
Retornado no objeto de tarefa, houve um tempo limite do pool de conexão.  
  
Retornado no objeto de tarefa, o objeto <see cref="T:System.Data.SqlClient.SqlConnection" /> foi fechado antes da execução do método.  
  
 <see langword="Context Connection=true" /> é especificado na cadeia de conexão.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Retornado no objeto de tarefa, qualquer erro retornado pelo SQL Server que ocorreu ao abrir a conexão.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Data.DataRowState rowState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table, valuetype System.Data.DataRowState rowState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (table As DataTable, rowState As DataRowState) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table, System::Data::DataRowState rowState);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataTable * System.Data.DataRowState -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (table, rowState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="rowState" Type="System.Data.DataRowState" />
      </Parameters>
      <Docs>
        <param name="table">Um <see cref="T:System.Data.DataTable" /> cujas linhas serão copiadas para a tabela de destino.</param>
        <param name="rowState">Um valor da enumeração <see cref="T:System.Data.DataRowState" />. Somente as linhas que correspondem ao estado de linha são copiadas para o destino.</param>
        <summary>A versão assíncrona de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />, que copia apenas linhas que correspondem ao estado de linha fornecido no <see cref="T:System.Data.DataTable" /> fornecido para uma tabela de destino especificada pela propriedade <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> do objeto <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <returns>Uma tarefa que representa a operação assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter mais informações sobre a programação assíncrona no .NET Framework Data Provider para SQL Server, consulte [programação assíncrona](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Chamando <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> várias vezes para a mesma instância antes da conclusão da tarefa.  
  
Chamando <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> e <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" /> para a mesma instância antes da conclusão da tarefa.  
  
A conexão cai ou é fechada durante a execução do <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" />.  
  
Retornado no objeto de tarefa, o objeto <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> foi fechado durante a execução do método.  
  
Retornado no objeto de tarefa, houve um tempo limite do pool de conexão.  
  
Retornado no objeto de tarefa, o objeto <see cref="T:System.Data.SqlClient.SqlConnection" /> foi fechado antes da execução do método.  
  
 <see langword="Context Connection=true" /> é especificado na cadeia de conexão.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Retornado no objeto de tarefa, qualquer erro retornado pelo SQL Server que ocorreu ao abrir a conexão.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataTable * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (table, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="table">Um <see cref="T:System.Data.DataTable" /> cujas linhas serão copiadas para a tabela de destino.</param>
        <param name="cancellationToken">A instrução de cancelamento. Um valor <see cref="P:System.Threading.CancellationToken.None" /> nesse parâmetro torna esse método equivalente a <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />.</param>
        <summary>A versão assíncrona de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />, que copia todas as linhas no <see cref="T:System.Data.DataTable" /> fornecido para uma tabela de destino especificada pela propriedade <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> do objeto <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.  
  
O token de cancelamento pode ser usado para solicitar que a operação seja abandonada antes de expirar o tempo limite do comando.  As exceções serão relatadas por meio do objeto de tarefa.</summary>
        <returns>Uma tarefa que representa a operação assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter mais informações sobre a programação assíncrona no .NET Framework Data Provider para SQL Server, consulte [programação assíncrona](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Chamando <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> várias vezes para a mesma instância antes da conclusão da tarefa.  
  
Chamando <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> e <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" /> para a mesma instância antes da conclusão da tarefa.  
  
A conexão cai ou é fechada durante a execução do <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />.  
  
Retornado no objeto de tarefa, o objeto <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> foi fechado durante a execução do método.  
  
Retornado no objeto de tarefa, houve um tempo limite do pool de conexão.  
  
Retornado no objeto de tarefa, o objeto <see cref="T:System.Data.SqlClient.SqlConnection" /> foi fechado antes da execução do método.  
  
 <see langword="Context Connection=true" /> é especificado na cadeia de conexão.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Retornado no objeto de tarefa, qualquer erro retornado pelo SQL Server que ocorreu ao abrir a conexão.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.IDataReader reader, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.IDataReader reader, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::IDataReader ^ reader, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.IDataReader * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (reader, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="reader">Um <see cref="T:System.Data.IDataReader" /> cujas linhas serão copiadas para a tabela de destino.</param>
        <param name="cancellationToken">A instrução de cancelamento. Um valor <see cref="P:System.Threading.CancellationToken.None" /> nesse parâmetro torna esse método equivalente a <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />.</param>
        <summary>A versão assíncrona de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />, que copia todas as linhas no <see cref="T:System.Data.IDataReader" /> fornecido para uma tabela de destino especificada pela propriedade <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> do objeto <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.  
  
O token de cancelamento pode ser usado para solicitar que a operação seja abandonada antes de expirar o tempo limite do comando.  As exceções serão relatadas por meio do objeto de tarefa.</summary>
        <returns>Uma tarefa que representa a operação assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter mais informações sobre a programação assíncrona no .NET Framework Data Provider para SQL Server, consulte [programação assíncrona](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Chamando <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> várias vezes para a mesma instância antes da conclusão da tarefa.  
  
Chamando <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> e <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" /> para a mesma instância antes da conclusão da tarefa.  
  
A conexão cai ou é fechada durante a execução do <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" />.  
  
Retornado no objeto de tarefa, o objeto <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> foi fechado durante a execução do método.  
  
Retornado no objeto de tarefa, houve um tempo limite do pool de conexão.  
  
Retornado no objeto de tarefa, o objeto <see cref="T:System.Data.SqlClient.SqlConnection" /> foi fechado antes da execução do método.  
  
O <see cref="T:System.Data.IDataReader" /> foi fechado antes de o <see cref="T:System.Threading.Tasks.Task" /> preenchido ser retornado.  
  
A conexão associada do <see cref="T:System.Data.IDataReader" /> foi fechada antes de o <see cref="T:System.Threading.Tasks.Task" /> preenchido ser retornado.  
  
 <see langword="Context Connection=true" /> é especificado na cadeia de conexão.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Retornado no objeto de tarefa, qualquer erro retornado pelo SQL Server que ocorreu ao abrir a conexão.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Data.DataRowState rowState, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table, valuetype System.Data.DataRowState rowState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table, System::Data::DataRowState rowState, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataTable * System.Data.DataRowState * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (table, rowState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="rowState" Type="System.Data.DataRowState" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="table">Um <see cref="T:System.Data.DataTable" /> cujas linhas serão copiadas para a tabela de destino.</param>
        <param name="rowState">Um valor da enumeração <see cref="T:System.Data.DataRowState" />. Somente as linhas que correspondem ao estado de linha são copiadas para o destino.</param>
        <param name="cancellationToken">A instrução de cancelamento. Um valor <see cref="P:System.Threading.CancellationToken.None" /> nesse parâmetro torna esse método equivalente a <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />.</param>
        <summary>A versão assíncrona de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />, que copia apenas linhas que correspondem ao estado de linha fornecido no <see cref="T:System.Data.DataTable" /> fornecido para uma tabela de destino especificada pela propriedade <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> do objeto <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.  
  
O token de cancelamento pode ser usado para solicitar que a operação seja abandonada antes de expirar o tempo limite do comando.  As exceções serão relatadas por meio do objeto de tarefa.</summary>
        <returns>Uma tarefa que representa a operação assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter mais informações sobre a programação assíncrona no .NET Framework Data Provider para SQL Server, consulte [programação assíncrona](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Chamando <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> várias vezes para a mesma instância antes da conclusão da tarefa.  
  
Chamando <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> e <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" /> para a mesma instância antes da conclusão da tarefa.  
  
A conexão cai ou é fechada durante a execução do <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" />.  
  
Retornado no objeto de tarefa, o objeto <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> foi fechado durante a execução do método.  
  
Retornado no objeto de tarefa, houve um tempo limite do pool de conexão.  
  
Retornado no objeto de tarefa, o objeto <see cref="T:System.Data.SqlClient.SqlConnection" /> foi fechado antes da execução do método.  
  
 <see langword="Context Connection=true" /> é especificado na cadeia de conexão.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Retornado no objeto de tarefa, qualquer erro retornado pelo SQL Server que ocorreu ao abrir a conexão.</exception>
      </Docs>
    </Member>
  </Members>
</Type>