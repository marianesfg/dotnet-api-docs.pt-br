<Type Name="DynamicObject" FullName="System.Dynamic.DynamicObject">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ae5e3a18963a736fecad7f4d2af02a45c0c1090c" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39957577" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DynamicObject : System.Dynamic.IDynamicMetaObjectProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit DynamicObject extends System.Object implements class System.Dynamic.IDynamicMetaObjectProvider" />
  <TypeSignature Language="DocId" Value="T:System.Dynamic.DynamicObject" />
  <TypeSignature Language="VB.NET" Value="Public Class DynamicObject&#xA;Implements IDynamicMetaObjectProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicObject : System::Dynamic::IDynamicMetaObjectProvider" />
  <TypeSignature Language="F#" Value="type DynamicObject = class&#xA;    interface IDynamicMetaObjectProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Dynamic.Runtime</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Dynamic.IDynamicMetaObjectProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="c1932-101">Fornece uma classe base para especificar o comportamento dinâmico no tempo de execução.</span>
      <span class="sxs-lookup">
        <span data-stu-id="c1932-101">Provides a base class for specifying dynamic behavior at run time.</span>
      </span>
      <span data-ttu-id="c1932-102">Essa classe deve ser herdada. Não é possível instanciá-la diretamente.</span>
      <span class="sxs-lookup">
        <span data-stu-id="c1932-102">This class must be inherited from; you cannot instantiate it directly.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1932-103">O `DynamicObject` classe permite que você defina quais operações podem ser executadas em objetos dinâmicos e como executar essas operações.</span><span class="sxs-lookup"><span data-stu-id="c1932-103">The `DynamicObject` class enables you to define which operations can be performed on dynamic objects and how to perform those operations.</span></span> <span data-ttu-id="c1932-104">Por exemplo, você pode definir o que acontece quando você tentar obter ou definir uma propriedade de objeto, chamar um método ou executar operações matemáticas padrão, como adição e multiplicação.</span><span class="sxs-lookup"><span data-stu-id="c1932-104">For example, you can define what happens when you try to get or set an object property, call a method, or perform standard mathematical operations such as addition and multiplication.</span></span>  
  
 <span data-ttu-id="c1932-105">Essa classe pode ser útil se você quiser criar um protocolo mais conveniente para uma biblioteca.</span><span class="sxs-lookup"><span data-stu-id="c1932-105">This class can be useful if you want to create a more convenient protocol for a library.</span></span> <span data-ttu-id="c1932-106">Por exemplo, se os usuários da sua biblioteca tem que usar uma sintaxe como `Scriptobj.SetProperty("Count", 1)`, você pode fornecer a capacidade de usar a sintaxe muito mais simples, como `scriptobj.Count = 1`.</span><span class="sxs-lookup"><span data-stu-id="c1932-106">For example, if users of your library have to use syntax like `Scriptobj.SetProperty("Count", 1)`, you can provide the ability to use much simpler syntax, like `scriptobj.Count = 1`.</span></span>  
  
 <span data-ttu-id="c1932-107">Você não pode criar diretamente uma instância da `DynamicObject` classe.</span><span class="sxs-lookup"><span data-stu-id="c1932-107">You cannot directly create an instance of the `DynamicObject` class.</span></span> <span data-ttu-id="c1932-108">Para implementar o comportamento dinâmico, você talvez queira herdam o `DynamicObject` de classe e substituir os métodos necessários.</span><span class="sxs-lookup"><span data-stu-id="c1932-108">To implement the dynamic behavior, you may want to inherit from the `DynamicObject` class and override necessary methods.</span></span> <span data-ttu-id="c1932-109">Por exemplo, se você precisar somente as operações para definir e obter as propriedades, você pode substituir apenas a <xref:System.Dynamic.DynamicObject.TrySetMember%2A> e <xref:System.Dynamic.DynamicObject.TryGetMember%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="c1932-109">For example, if you need only operations for setting and getting properties, you can override just the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods.</span></span>  
  
 <span data-ttu-id="c1932-110">No c#, para habilitar o comportamento dinâmico para instâncias de classes derivam de `DynamicObject` classe, você deve usar o `dynamic` palavra-chave.</span><span class="sxs-lookup"><span data-stu-id="c1932-110">In C#, to enable dynamic behavior for instances of classes derived from the `DynamicObject` class, you must use the `dynamic` keyword.</span></span> <span data-ttu-id="c1932-111">Para obter mais informações, veja [Usando o tipo dynamic](~/docs/csharp/programming-guide/types/using-type-dynamic.md).</span><span class="sxs-lookup"><span data-stu-id="c1932-111">For more information, see [Using Type dynamic](~/docs/csharp/programming-guide/types/using-type-dynamic.md).</span></span>  
  
 <span data-ttu-id="c1932-112">No Visual Basic, operações dinâmicas têm suporte por associação tardia.</span><span class="sxs-lookup"><span data-stu-id="c1932-112">In Visual Basic, dynamic operations are supported by late binding.</span></span> <span data-ttu-id="c1932-113">Para obter mais informações, consulte [associação antecipada e tardia](http://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724).</span><span class="sxs-lookup"><span data-stu-id="c1932-113">For more information, see [Early and Late Binding](http://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724).</span></span>  
  
 <span data-ttu-id="c1932-114">O exemplo de código a seguir demonstra como criar uma instância de uma classe que deriva de `DynamicObject` classe.</span><span class="sxs-lookup"><span data-stu-id="c1932-114">The following code example demonstrates how to create an instance of a class that is derived from the `DynamicObject` class.</span></span>  
  
```csharp  
public class SampleDynamicObject : DynamicObject {}  
//...  
dynamic sampleObject = new SampleDynamicObject ();  
```  
  
```vb  
Public Class SampleDynamicObject   
    Inherits DynamicObject  
'...  
Dim sampleObject As Object = New SampleDynamicObject()  
```  
  
 <span data-ttu-id="c1932-115">Você também pode adicionar seus próprios membros para classes derivadas de `DynamicObject` classe.</span><span class="sxs-lookup"><span data-stu-id="c1932-115">You can also add your own members to classes derived from the `DynamicObject` class.</span></span> <span data-ttu-id="c1932-116">Se sua classe define propriedades e também substitui o <xref:System.Dynamic.DynamicObject.TrySetMember%2A> método, o tempo de execução de linguagem dinâmica (DLR) primeiro usa o associador de linguagem para procurar por uma definição estática de uma propriedade na classe.</span><span class="sxs-lookup"><span data-stu-id="c1932-116">If your class defines properties and also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class.</span></span> <span data-ttu-id="c1932-117">Se não houver nenhuma propriedade, o DLR chama o <xref:System.Dynamic.DynamicObject.TrySetMember%2A> método.</span><span class="sxs-lookup"><span data-stu-id="c1932-117">If there is no such property, the DLR calls the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method.</span></span>  
  
 <span data-ttu-id="c1932-118">O `DynamicObject` classe implementa a interface do DLR <xref:System.Dynamic.IDynamicMetaObjectProvider>, que permite que você compartilhe instâncias do `DynamicObject` classe entre linguagens com suporte para o modelo de interoperabilidade do DLR.</span><span class="sxs-lookup"><span data-stu-id="c1932-118">The `DynamicObject` class implements the DLR interface <xref:System.Dynamic.IDynamicMetaObjectProvider>, which enables you to share instances of the `DynamicObject` class between languages that support the DLR interoperability model.</span></span> <span data-ttu-id="c1932-119">Por exemplo, você pode criar uma instância da `DynamicObject` de classe em c# e, em seguida, passá-lo para uma função de IronPython.</span><span class="sxs-lookup"><span data-stu-id="c1932-119">For example, you can create an instance of the `DynamicObject` class in C# and then pass it to an IronPython function.</span></span> <span data-ttu-id="c1932-120">Para obter mais informações, consulte [visão geral do Dynamic Language Runtime](~/docs/framework/reflection-and-codedom/dynamic-language-runtime-overview.md).</span><span class="sxs-lookup"><span data-stu-id="c1932-120">For more information, see [Dynamic Language Runtime Overview](~/docs/framework/reflection-and-codedom/dynamic-language-runtime-overview.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c1932-121">Se você tiver um cenário simples em que você precisa de um objeto que só pode adicionar e remover membros em tempo de execução, mas que não precisa definir as operações específicas e não têm membros estáticos, use o <xref:System.Dynamic.ExpandoObject> classe.</span><span class="sxs-lookup"><span data-stu-id="c1932-121">If you have a simple scenario in which you need an object that can only add and remove members at run time but that does not need to define specific operations and does not have static members, use the <xref:System.Dynamic.ExpandoObject> class.</span></span>  
>   
>  <span data-ttu-id="c1932-122">Se você tiver um cenário mais avançado em que você precisa definir como objetos dinâmicos participa do protocolo de interoperabilidade, ou você precisa para gerenciar o cache de expedição dinâmica rápidas do DLR, crie sua própria implementação do <xref:System.Dynamic.IDynamicMetaObjectProvider> interface.</span><span class="sxs-lookup"><span data-stu-id="c1932-122">If you have a more advanced scenario in which you need to define how dynamic objects participate in the interoperability protocol, or you need to manage DLR fast dynamic dispatch caching, create your own implementation of the <xref:System.Dynamic.IDynamicMetaObjectProvider> interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c1932-123">Suponha que você deseja fornecer a sintaxe alternativa para acessar valores em um dicionário, portanto, que, em vez de escrever `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` no Visual Basic), você pode escrever `sampleDictionary.Text = "Sample text"`.</span><span class="sxs-lookup"><span data-stu-id="c1932-123">Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` in Visual Basic), you can write `sampleDictionary.Text = "Sample text"`.</span></span> <span data-ttu-id="c1932-124">Além disso, você deseja que essa sintaxe para diferenciar maiusculas de minúsculas, para que `sampleDictionary.Text` é equivalente a `sampleDictionary.text`.</span><span class="sxs-lookup"><span data-stu-id="c1932-124">Also, you want this syntax to be case-insensitive, so that `sampleDictionary.Text` is equivalent to `sampleDictionary.text`.</span></span>  
  
 <span data-ttu-id="c1932-125">O exemplo de código a seguir demonstra a `DynamicDictionary` classe, que é derivado do `DynamicObject` classe.</span><span class="sxs-lookup"><span data-stu-id="c1932-125">The following code example demonstrates the `DynamicDictionary` class, which is derived from the `DynamicObject` class.</span></span> <span data-ttu-id="c1932-126">O `DynamicDictionary` classe contém um objeto do `Dictionary<string, object>` tipo (`Dictionary(Of String, Object)` no Visual Basic) para armazenar os pares chave-valor e substituições de <xref:System.Dynamic.DynamicObject.TrySetMember%2A> e <xref:System.Dynamic.DynamicObject.TryGetMember%2A> métodos para dar suporte a nova sintaxe.</span><span class="sxs-lookup"><span data-stu-id="c1932-126">The `DynamicDictionary` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs, and overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to support the new syntax.</span></span> <span data-ttu-id="c1932-127">Ele também fornece um `Count` propriedade, que mostra quantas propriedades dinâmicas o dicionário contém.</span><span class="sxs-lookup"><span data-stu-id="c1932-127">It also provides a `Count` property, which shows how many dynamic properties the dictionary contains.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#1)]
 [!code-vb[System.Dynamic.DynamicObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#1)]  
  
 <span data-ttu-id="c1932-128">Para obter mais exemplos, consulte [criando Wrappers com DynamicObject](http://go.microsoft.com/fwlink/?LinkId=169008) no blog do c# perguntas frequentes.</span><span class="sxs-lookup"><span data-stu-id="c1932-128">For more examples, see [Creating Wrappers with DynamicObject](http://go.microsoft.com/fwlink/?LinkId=169008) on the C# Frequently Asked Questions blog.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DynamicObject ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DynamicObject();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c1932-129">Habilita os tipos derivados para inicializarem uma nova instância do tipo <see cref="T:System.Dynamic.DynamicObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-129">Enables derived types to initialize a new instance of the <see cref="T:System.Dynamic.DynamicObject" /> type.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1932-130">Você não pode criar diretamente uma instância da <xref:System.Dynamic.DynamicObject> classe.</span><span class="sxs-lookup"><span data-stu-id="c1932-130">You cannot directly create an instance of the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="c1932-131">Para implementar o comportamento dinâmico, você precisa herdar o <xref:System.Dynamic.DynamicObject> de classe e substituir os métodos necessários.</span><span class="sxs-lookup"><span data-stu-id="c1932-131">To implement dynamic behavior, you have to inherit from the <xref:System.Dynamic.DynamicObject> class and override necessary methods.</span></span>  
  
 <span data-ttu-id="c1932-132">No c#, para habilitar o comportamento dinâmico para instâncias de classes derivam de <xref:System.Dynamic.DynamicObject> classe, você deve usar o `dynamic` palavra-chave.</span><span class="sxs-lookup"><span data-stu-id="c1932-132">In C#, to enable dynamic behavior for instances of the classes derived from the <xref:System.Dynamic.DynamicObject> class, you must use the `dynamic` keyword.</span></span> <span data-ttu-id="c1932-133">Para obter mais informações, veja [Usando o tipo dynamic](~/docs/csharp/programming-guide/types/using-type-dynamic.md).</span><span class="sxs-lookup"><span data-stu-id="c1932-133">For more information, see [Using Type dynamic](~/docs/csharp/programming-guide/types/using-type-dynamic.md).</span></span>  
  
 <span data-ttu-id="c1932-134">No Visual Basic, operações dinâmicas têm suporte por associação tardia.</span><span class="sxs-lookup"><span data-stu-id="c1932-134">In Visual Basic, dynamic operations are supported by late binding.</span></span> <span data-ttu-id="c1932-135">Para obter mais informações, consulte [associação antecipada e tardia](http://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724).</span><span class="sxs-lookup"><span data-stu-id="c1932-135">For more information, see [Early and Late Binding](http://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c1932-136">O exemplo de código a seguir demonstra como criar uma instância de classes que derivam de <xref:System.Dynamic.DynamicObject> classe.</span><span class="sxs-lookup"><span data-stu-id="c1932-136">The following code example demonstrates how to create an instance of classes that are derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
```csharp  
public class SampleDynamicObject : DynamicObject {}  
//...  
dynamic sampleObject = new SampleDynamicObject ();  
```  
  
```vb  
Public Class SampleDynamicObject   
    Inherits DynamicObject  
'...  
Dim sampleObject As Object = New SampleDynamicObject()  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDynamicMemberNames">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;string&gt; GetDynamicMemberNames ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;string&gt; GetDynamicMemberNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.GetDynamicMemberNames" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDynamicMemberNames () As IEnumerable(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ GetDynamicMemberNames();" />
      <MemberSignature Language="F#" Value="abstract member GetDynamicMemberNames : unit -&gt; seq&lt;string&gt;&#xA;override this.GetDynamicMemberNames : unit -&gt; seq&lt;string&gt;" Usage="dynamicObject.GetDynamicMemberNames " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c1932-137">Retorna a enumeração de todos os nomes de membro dinâmico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-137">Returns the enumeration of all dynamic member names.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c1932-138">Uma sequência que contém os nomes de membro dinâmico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-138">A sequence that contains dynamic member names.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1932-139">Este método existe apenas para fins de depuração.</span><span class="sxs-lookup"><span data-stu-id="c1932-139">This method exists for debugging purposes only.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMetaObject">
      <MemberSignature Language="C#" Value="public virtual System.Dynamic.DynamicMetaObject GetMetaObject (System.Linq.Expressions.Expression parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Dynamic.DynamicMetaObject GetMetaObject(class System.Linq.Expressions.Expression parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMetaObject (parameter As Expression) As DynamicMetaObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Dynamic::DynamicMetaObject ^ GetMetaObject(System::Linq::Expressions::Expression ^ parameter);" />
      <MemberSignature Language="F#" Value="abstract member GetMetaObject : System.Linq.Expressions.Expression -&gt; System.Dynamic.DynamicMetaObject&#xA;override this.GetMetaObject : System.Linq.Expressions.Expression -&gt; System.Dynamic.DynamicMetaObject" Usage="dynamicObject.GetMetaObject parameter" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Dynamic.DynamicMetaObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="parameter">
          <span data-ttu-id="c1932-140">A expressão que representa o <see cref="T:System.Dynamic.DynamicMetaObject" /> para expedir para os métodos virtuais dinâmicos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-140">The expression that represents <see cref="T:System.Dynamic.DynamicMetaObject" /> to dispatch to the dynamic virtual methods.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c1932-141">Fornece um <see cref="T:System.Dynamic.DynamicMetaObject" /> que expede para os métodos virtuais dinâmicos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-141">Provides a <see cref="T:System.Dynamic.DynamicMetaObject" /> that dispatches to the dynamic virtual methods.</span>
          </span>
          <span data-ttu-id="c1932-142">O objeto pode ser encapsulado em outro <see cref="T:System.Dynamic.DynamicMetaObject" /> para fornecer um comportamento personalizado para ações individuais.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-142">The object can be encapsulated inside another <see cref="T:System.Dynamic.DynamicMetaObject" /> to provide custom behavior for individual actions.</span>
          </span>
          <span data-ttu-id="c1932-143">Esse método dá suporte à infraestrutura do Dynamic Language Runtime para implementadores de linguagem e não se destina a ser usado diretamente do seu código.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-143">This method supports the Dynamic Language Runtime infrastructure for language implementers and it is not intended to be used directly from your code.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c1932-144">Um objeto do tipo <see cref="T:System.Dynamic.DynamicMetaObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-144">An object of the <see cref="T:System.Dynamic.DynamicMetaObject" /> type.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryBinaryOperation">
      <MemberSignature Language="C#" Value="public virtual bool TryBinaryOperation (System.Dynamic.BinaryOperationBinder binder, object arg, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryBinaryOperation(class System.Dynamic.BinaryOperationBinder binder, object arg, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryBinaryOperation (binder As BinaryOperationBinder, arg As Object, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryBinaryOperation(System::Dynamic::BinaryOperationBinder ^ binder, System::Object ^ arg, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryBinaryOperation : System.Dynamic.BinaryOperationBinder * obj *  -&gt; bool&#xA;override this.TryBinaryOperation : System.Dynamic.BinaryOperationBinder * obj *  -&gt; bool" Usage="dynamicObject.TryBinaryOperation (binder, arg, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.BinaryOperationBinder" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="c1932-145">Fornece informações sobre a operação binária.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-145">Provides information about the binary operation.</span>
          </span>
          <span data-ttu-id="c1932-146">A propriedade <c>binder.Operation</c> retorna um objeto <see cref="T:System.Linq.Expressions.ExpressionType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-146">The <c>binder.Operation</c> property returns an <see cref="T:System.Linq.Expressions.ExpressionType" /> object.</span>
          </span>
          <span data-ttu-id="c1932-147">Por exemplo, para a instrução <c>sum = first + second</c>, em que <c>first</c> e <c>second</c> são derivados da classe <see langword="DynamicObject" />, <c>binder.Operation</c> retorna <c>ExpressionType.Add</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-147">For example, for the <c>sum = first + second</c> statement, where <c>first</c> and <c>second</c> are derived from the <see langword="DynamicObject" /> class, <c>binder.Operation</c> returns <c>ExpressionType.Add</c>.</span>
          </span>
        </param>
        <param name="arg">
          <span data-ttu-id="c1932-148">O operando direito da operação binária.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-148">The right operand for the binary operation.</span>
          </span>
          <span data-ttu-id="c1932-149">Por exemplo, para a instrução <c>sum = first + second</c>, em que <c>first</c> e <c>second</c> são derivados da classe <see langword="DynamicObject" />, <c>arg</c> é igual a <c>second</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-149">For example, for the <c>sum = first + second</c> statement, where <c>first</c> and <c>second</c> are derived from the <see langword="DynamicObject" /> class, <c>arg</c> is equal to <c>second</c>.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="c1932-150">O resultado da operação binária.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-150">The result of the binary operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c1932-151">Fornece implementação para operações binárias.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-151">Provides implementation for binary operations.</span>
          </span>
          <span data-ttu-id="c1932-152">As classes derivadas da classe <see cref="T:System.Dynamic.DynamicObject" /> podem substituir esse método a fim de especificar o comportamento dinâmico para operações como adição e multiplicação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-152">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as addition and multiplication.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c1932-153">
            <see langword="true" /> se a operação for bem-sucedida; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-153">
              <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="c1932-154">Se esse método retornar <see langword="false" />, o associador de tempo de execução da linguagem determinará o comportamento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-154">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span>
          </span>
          <span data-ttu-id="c1932-155">(Na maioria dos casos, uma exceção de tempo de execução específica a um idioma é gerada.)</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-155">(In most cases, a language-specific run-time exception is thrown.)</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1932-156">As classes derivadas de <xref:System.Dynamic.DynamicObject> classe pode substituir este método para especificar como as operações binárias deve ser executadas para um objeto dinâmico.</span><span class="sxs-lookup"><span data-stu-id="c1932-156">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how binary operations should be performed for a dynamic object.</span></span> <span data-ttu-id="c1932-157">Quando o método não for substituído, o associador de tempo de execução da linguagem determina o comportamento.</span><span class="sxs-lookup"><span data-stu-id="c1932-157">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="c1932-158">(Na maioria dos casos, uma exceção de tempo de execução específica a um idioma é gerada.)</span><span class="sxs-lookup"><span data-stu-id="c1932-158">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="c1932-159">Esse método é chamado quando você tiver operações binárias, como adição ou multiplicação.</span><span class="sxs-lookup"><span data-stu-id="c1932-159">This method is called when you have binary operations such as addition or multiplication.</span></span> <span data-ttu-id="c1932-160">Por exemplo, se o <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> método for substituído, ele é invocado automaticamente para instruções, como `sum = first + second` ou `multiply = first*second`, onde `first` deriva o `DynamicObject` classe.</span><span class="sxs-lookup"><span data-stu-id="c1932-160">For example, if the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method is overridden, it is automatically invoked for statements like `sum = first + second` or `multiply = first*second`, where `first` is derived from the `DynamicObject` class.</span></span>  
  
 <span data-ttu-id="c1932-161">Você pode obter informações sobre o tipo da operação binária usando o `Operation` propriedade do `binder` parâmetro.</span><span class="sxs-lookup"><span data-stu-id="c1932-161">You can get information about the type of the binary operation by using the `Operation` property of the `binder` parameter.</span></span>  
  
 <span data-ttu-id="c1932-162">Se o objeto dinâmico é usado somente em c# e Visual Basic, o `binder.Operation` propriedade pode ter um dos seguintes valores do <xref:System.Linq.Expressions.ExpressionType> enumeração.</span><span class="sxs-lookup"><span data-stu-id="c1932-162">If your dynamic object is used only in C# and Visual Basic, the `binder.Operation` property can have one of the following values from the <xref:System.Linq.Expressions.ExpressionType> enumeration.</span></span> <span data-ttu-id="c1932-163">No entanto, em outras linguagens como o IronPython ou IronRuby, você pode ter outros valores.</span><span class="sxs-lookup"><span data-stu-id="c1932-163">However, in other languages such as IronPython or IronRuby, you can have other values.</span></span>
  
|<span data-ttu-id="c1932-164">Valor</span><span class="sxs-lookup"><span data-stu-id="c1932-164">Value</span></span>|<span data-ttu-id="c1932-165">Descrição</span><span class="sxs-lookup"><span data-stu-id="c1932-165">Description</span></span>|<span data-ttu-id="c1932-166">C#</span><span class="sxs-lookup"><span data-stu-id="c1932-166">C#</span></span>|<span data-ttu-id="c1932-167">Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c1932-167">Visual Basic</span></span>|  
|-----------|-----------------|---------|------------------|  
|`Add`|<span data-ttu-id="c1932-168">Uma operação de adição sem verificação de estouro, para operandos numéricos.</span><span class="sxs-lookup"><span data-stu-id="c1932-168">An addition operation without overflow checking, for numeric operands.</span></span>|`a + b`|`a + b`|  
|`AddAssign`|<span data-ttu-id="c1932-169">Uma operação de atribuição composta de adição sem verificação de estouro, para operandos numéricos.</span><span class="sxs-lookup"><span data-stu-id="c1932-169">An addition compound assignment operation without overflow checking, for numeric operands.</span></span>|`a += b`|<span data-ttu-id="c1932-170">Sem suporte.</span><span class="sxs-lookup"><span data-stu-id="c1932-170">Not supported.</span></span>|  
|`And`|<span data-ttu-id="c1932-171">Um bit a bit `AND` operação.</span><span class="sxs-lookup"><span data-stu-id="c1932-171">A bitwise `AND` operation.</span></span>|`a & b`|`a And b`|  
|`AndAssign`|<span data-ttu-id="c1932-172">Um bit a bit `AND` operação de atribuição composta.</span><span class="sxs-lookup"><span data-stu-id="c1932-172">A bitwise `AND` compound assignment operation.</span></span>|`a &= b`|<span data-ttu-id="c1932-173">Sem suporte.</span><span class="sxs-lookup"><span data-stu-id="c1932-173">Not supported.</span></span>|  
|`Divide`|<span data-ttu-id="c1932-174">Uma operação de divisão aritmética.</span><span class="sxs-lookup"><span data-stu-id="c1932-174">An arithmetic division operation.</span></span>|`a / b`|`a / b`|  
|`DivideAssign`|<span data-ttu-id="c1932-175">Uma operação de atribuição composta de divisão aritmética.</span><span class="sxs-lookup"><span data-stu-id="c1932-175">An arithmetic division compound assignment operation.</span></span>|`a /= b`|<span data-ttu-id="c1932-176">Sem suporte.</span><span class="sxs-lookup"><span data-stu-id="c1932-176">Not supported.</span></span>|  
|`ExclusiveOr`|<span data-ttu-id="c1932-177">Um bit a bit `XOR` operação.</span><span class="sxs-lookup"><span data-stu-id="c1932-177">A bitwise `XOR` operation.</span></span>|`a ^ b`|`a Xor b`|  
|`ExclusiveOrAssign`|<span data-ttu-id="c1932-178">Um bit a bit `XOR` operação de atribuição composta.</span><span class="sxs-lookup"><span data-stu-id="c1932-178">A bitwise `XOR` compound assignment operation.</span></span>|`a ^= b`|<span data-ttu-id="c1932-179">Sem suporte.</span><span class="sxs-lookup"><span data-stu-id="c1932-179">Not supported.</span></span>|  
|`GreaterThan`|<span data-ttu-id="c1932-180">Uma comparação "maior que".</span><span class="sxs-lookup"><span data-stu-id="c1932-180">A "greater than" comparison.</span></span>|`a > b`|`a > b`|  
|`GreaterThanOrEqual`|<span data-ttu-id="c1932-181">Uma comparação "maior que ou igual a".</span><span class="sxs-lookup"><span data-stu-id="c1932-181">A "greater than or equal to" comparison.</span></span>|`a >= b`|<span data-ttu-id="c1932-182">Sem suporte.</span><span class="sxs-lookup"><span data-stu-id="c1932-182">Not supported.</span></span>|  
|`LeftShift`|<span data-ttu-id="c1932-183">Uma operação bit a bit de deslocamento à esquerda.</span><span class="sxs-lookup"><span data-stu-id="c1932-183">A bitwise left-shift operation.</span></span>|`a << b`|`a << b`|  
|`LeftShiftAssign`|<span data-ttu-id="c1932-184">Uma operação de atribuição composta bit a bit de deslocamento à esquerda.</span><span class="sxs-lookup"><span data-stu-id="c1932-184">A bitwise left-shift compound assignment operation.</span></span>|`a <<= b`|<span data-ttu-id="c1932-185">Sem suporte.</span><span class="sxs-lookup"><span data-stu-id="c1932-185">Not supported.</span></span>|  
|`LessThan`|<span data-ttu-id="c1932-186">Uma comparação "menor que".</span><span class="sxs-lookup"><span data-stu-id="c1932-186">A "less than" comparison.</span></span>|`a < b`|`a < b`|  
|`LessThanOrEqual`|<span data-ttu-id="c1932-187">Uma comparação "menor ou igual a".</span><span class="sxs-lookup"><span data-stu-id="c1932-187">A "less than or equal to" comparison.</span></span>|`a <= b`|<span data-ttu-id="c1932-188">Sem suporte.</span><span class="sxs-lookup"><span data-stu-id="c1932-188">Not supported.</span></span>|  
|`Modulo`|<span data-ttu-id="c1932-189">Uma operação aritmética restante.</span><span class="sxs-lookup"><span data-stu-id="c1932-189">An arithmetic remainder operation.</span></span>|`a % b`|`a Mod b`|  
|`ModuloAssign`|<span data-ttu-id="c1932-190">Uma operação de atribuição composta restante aritmética.</span><span class="sxs-lookup"><span data-stu-id="c1932-190">An arithmetic remainder compound assignment operation.</span></span>|`a %= b`|<span data-ttu-id="c1932-191">Sem suporte.</span><span class="sxs-lookup"><span data-stu-id="c1932-191">Not supported.</span></span>|  
|`Multiply`|<span data-ttu-id="c1932-192">Uma operação de multiplicação sem verificação de estouro, para operandos numéricos.</span><span class="sxs-lookup"><span data-stu-id="c1932-192">A multiplication operation without overflow checking, for numeric operands.</span></span>|`a * b`|`a * b`|  
|`MultiplyAssign`|<span data-ttu-id="c1932-193">Uma operação de atribuição composta de multiplicação sem verificação de estouro, para operandos numéricos.</span><span class="sxs-lookup"><span data-stu-id="c1932-193">A multiplication compound assignment operation without overflow checking, for numeric operands.</span></span>|`a *= b`|<span data-ttu-id="c1932-194">Sem suporte.</span><span class="sxs-lookup"><span data-stu-id="c1932-194">Not supported.</span></span>|  
|`NotEqual`|<span data-ttu-id="c1932-195">Uma comparação de desigualdade.</span><span class="sxs-lookup"><span data-stu-id="c1932-195">An inequality comparison.</span></span>|`a != b`|`a <> b`|  
|`Or`|<span data-ttu-id="c1932-196">A lógica ou bit a bit `OR` operação.</span><span class="sxs-lookup"><span data-stu-id="c1932-196">A bitwise or logical `OR` operation.</span></span>|`a &#124; b`|`a Or b`|  
|`OrAssign`|<span data-ttu-id="c1932-197">A lógica ou bit a bit `OR` atribuição composta.</span><span class="sxs-lookup"><span data-stu-id="c1932-197">A bitwise or logical `OR` compound assignment.</span></span>|`a &#124;= b`|<span data-ttu-id="c1932-198">Sem suporte.</span><span class="sxs-lookup"><span data-stu-id="c1932-198">Not supported.</span></span>|  
|`Power`|<span data-ttu-id="c1932-199">Uma operação matemática de elevar um número a uma potência.</span><span class="sxs-lookup"><span data-stu-id="c1932-199">A mathematical operation of raising a number to a power.</span></span>|<span data-ttu-id="c1932-200">Sem suporte.</span><span class="sxs-lookup"><span data-stu-id="c1932-200">Not supported.</span></span>|`a ^ b`|  
|`RightShift`|<span data-ttu-id="c1932-201">Uma operação bit a bit de deslocamento à direita.</span><span class="sxs-lookup"><span data-stu-id="c1932-201">A bitwise right-shift operation.</span></span>|`a >> b`|`a >> b`|  
|`RightShiftAssign`|<span data-ttu-id="c1932-202">Uma operação de atribuição composta bit a bit de deslocamento à direita.</span><span class="sxs-lookup"><span data-stu-id="c1932-202">A bitwise right-shift compound assignment operation.</span></span>|`a >>= b`|<span data-ttu-id="c1932-203">Sem suporte.</span><span class="sxs-lookup"><span data-stu-id="c1932-203">Not supported.</span></span>|  
|`Subtract`|<span data-ttu-id="c1932-204">Uma operação de subtração sem verificação de estouro, para operandos numéricos.</span><span class="sxs-lookup"><span data-stu-id="c1932-204">A subtraction operation without overflow checking, for numeric operands.</span></span>|`a - b`|`a - b`|  
|`SubtractAssign`|<span data-ttu-id="c1932-205">Uma operação de atribuição composta de subtração sem verificação de estouro, para operandos numéricos.</span><span class="sxs-lookup"><span data-stu-id="c1932-205">A subtraction compound assignment operation without overflow checking, for numeric operands.</span></span>|`a -= b`|<span data-ttu-id="c1932-206">Sem suporte.</span><span class="sxs-lookup"><span data-stu-id="c1932-206">Not supported.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="c1932-207">Para implementar `OrElse` (`a || b`) e `AndAlso` (`a && b`) operações para objetos dinâmicos no c#, você talvez queira implementar ambos os <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> método e o <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> método.</span><span class="sxs-lookup"><span data-stu-id="c1932-207">To implement `OrElse` (`a || b`) and `AndAlso` (`a && b`) operations for dynamic objects in C#, you may want to implement both the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method and the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method.</span></span>  
>   
>  <span data-ttu-id="c1932-208">O `OrElse` consiste em operação unária `IsTrue` operação e o binário `Or` operação.</span><span class="sxs-lookup"><span data-stu-id="c1932-208">The `OrElse` operation consists of the unary `IsTrue` operation and the binary `Or` operation.</span></span> <span data-ttu-id="c1932-209">O `Or` operação é executada apenas se o resultado do `IsTrue` operação é `false`.</span><span class="sxs-lookup"><span data-stu-id="c1932-209">The `Or` operation is performed only if the result of the `IsTrue` operation is `false`.</span></span>  
>   
>  <span data-ttu-id="c1932-210">O `AndAlso` consiste em operação unária `IsFalse` operação e o binário `And` operação.</span><span class="sxs-lookup"><span data-stu-id="c1932-210">The `AndAlso` operation consists of the unary `IsFalse` operation and the binary `And` operation.</span></span> <span data-ttu-id="c1932-211">O `And` operação é executada apenas se o resultado do `IsFalse` operação é `false`.</span><span class="sxs-lookup"><span data-stu-id="c1932-211">The `And` operation is performed only if the result of the `IsFalse` operation is `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c1932-212">Suponha que você precisa de uma estrutura de dados para armazenar representações textuais e numéricas de números, e você deseja definir operações matemáticas básicas, como adição e subtração para esses dados.</span><span class="sxs-lookup"><span data-stu-id="c1932-212">Assume that you need a data structure to store textual and numeric representations of numbers, and you want to define basic mathematical operations such as addition and subtraction for such data.</span></span>  
  
 <span data-ttu-id="c1932-213">O exemplo de código a seguir demonstra a `DynamicNumber` classe, que é derivado do <xref:System.Dynamic.DynamicObject> classe.</span><span class="sxs-lookup"><span data-stu-id="c1932-213">The following code example demonstrates the `DynamicNumber` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="c1932-214">`DynamicNumber` substitui o <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> método para permitir operações matemáticas.</span><span class="sxs-lookup"><span data-stu-id="c1932-214">`DynamicNumber` overrides the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method to enable mathematical operations.</span></span> <span data-ttu-id="c1932-215">Ele também substitui o <xref:System.Dynamic.DynamicObject.TrySetMember%2A> e <xref:System.Dynamic.DynamicObject.TryGetMember%2A> métodos para habilitar o acesso aos elementos.</span><span class="sxs-lookup"><span data-stu-id="c1932-215">It also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access to the elements.</span></span>  
  
 <span data-ttu-id="c1932-216">Neste exemplo, as únicas operações de adição e subtração têm suporte.</span><span class="sxs-lookup"><span data-stu-id="c1932-216">In this example, only addition and subtraction operations are supported.</span></span> <span data-ttu-id="c1932-217">Se você tentar gravar uma instrução como `resultNumber = firstNumber*secondNumber`, uma exceção de tempo de execução é gerada.</span><span class="sxs-lookup"><span data-stu-id="c1932-217">If you try to write a statement like `resultNumber = firstNumber*secondNumber`, a run-time exception is thrown.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#2)]
 [!code-vb[System.Dynamic.DynamicObject#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryConvert">
      <MemberSignature Language="C#" Value="public virtual bool TryConvert (System.Dynamic.ConvertBinder binder, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryConvert(class System.Dynamic.ConvertBinder binder, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryConvert (binder As ConvertBinder, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryConvert(System::Dynamic::ConvertBinder ^ binder, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryConvert : System.Dynamic.ConvertBinder *  -&gt; bool&#xA;override this.TryConvert : System.Dynamic.ConvertBinder *  -&gt; bool" Usage="dynamicObject.TryConvert (binder, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.ConvertBinder" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="c1932-218">Fornece informações sobre a operação de conversão.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-218">Provides information about the conversion operation.</span>
          </span>
          <span data-ttu-id="c1932-219">A propriedade <c>binder.Type</c> fornece o tipo para o qual o objeto deve ser convertido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-219">The <c>binder.Type</c> property provides the type to which the object must be converted.</span>
          </span>
          <span data-ttu-id="c1932-220">Por exemplo, a instrução <c>(String)sampleObject</c> em C# (<c>CType(sampleObject, Type)</c> em Visual Basic), em que <c>sampleObject</c> é uma instância da classe derivada da classe <see cref="T:System.Dynamic.DynamicObject" />, <c>binder.Type</c> retorna o tipo <see cref="T:System.String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-220">For example, for the statement <c>(String)sampleObject</c> in C# (<c>CType(sampleObject, Type)</c> in Visual Basic), where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>binder.Type</c> returns the <see cref="T:System.String" /> type.</span>
          </span>
          <span data-ttu-id="c1932-221">A propriedade <c>binder.Explicit</c> fornece informações sobre o tipo de conversão que ocorre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-221">The <c>binder.Explicit</c> property provides information about the kind of conversion that occurs.</span>
          </span>
          <span data-ttu-id="c1932-222">Ela retorna <see langword="true" /> para conversão explícita e <see langword="false" /> para conversão implícita.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-222">It returns <see langword="true" /> for explicit conversion and <see langword="false" /> for implicit conversion.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="c1932-223">O resultado da operação de conversão de tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-223">The result of the type conversion operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c1932-224">Fornece implementação para operações de conversão de tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-224">Provides implementation for type conversion operations.</span>
          </span>
          <span data-ttu-id="c1932-225">As classes derivadas da classe <see cref="T:System.Dynamic.DynamicObject" /> podem substituir este método para especificar o comportamento dinâmico para operações que convertem um objeto de um tipo em outro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-225">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations that convert an object from one type to another.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c1932-226">
            <see langword="true" /> se a operação for bem-sucedida; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-226">
              <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="c1932-227">Se esse método retornar <see langword="false" />, o associador de tempo de execução da linguagem determinará o comportamento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-227">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span>
          </span>
          <span data-ttu-id="c1932-228">(Na maioria dos casos, uma exceção de tempo de execução específica a um idioma é gerada.)</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-228">(In most cases, a language-specific run-time exception is thrown.)</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1932-229">As classes derivadas de <xref:System.Dynamic.DynamicObject> classe pode substituir este método para especificar como uma conversão de tipo deve ser executada para um objeto dinâmico.</span><span class="sxs-lookup"><span data-stu-id="c1932-229">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how a type conversion should be performed for a dynamic object.</span></span> <span data-ttu-id="c1932-230">Quando o método não for substituído, o associador de tempo de execução da linguagem determina o comportamento.</span><span class="sxs-lookup"><span data-stu-id="c1932-230">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="c1932-231">(Na maioria dos casos, uma exceção de tempo de execução específica a um idioma é gerada.)</span><span class="sxs-lookup"><span data-stu-id="c1932-231">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="c1932-232">No c#, se esse método for substituído, ele é invocado automaticamente quando você tem uma conversão explícita ou implícita, conforme mostrado no exemplo de código abaixo.</span><span class="sxs-lookup"><span data-stu-id="c1932-232">In C#, if this method is overridden, it is automatically invoked when you have an explicit or implicit conversion, as shown in the code example below.</span></span>  
  
 <span data-ttu-id="c1932-233">No Visual Basic, há suporte para apenas para uma conversão explícita.</span><span class="sxs-lookup"><span data-stu-id="c1932-233">In Visual Basic, only explicit conversion is supported.</span></span> <span data-ttu-id="c1932-234">Se você substituir esse método, você chamá-lo usando o <xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A> ou <xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A> funções.</span><span class="sxs-lookup"><span data-stu-id="c1932-234">If you override this method, you call it by using the <xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A> or <xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A> functions.</span></span>  
  
```csharp  
// Explicit conversion.  
String sampleExplicit = (String)sampleObject;  
// Implicit conversion.  
String sampleImplicit = sampleObject;  
```  
  
```vb  
// Explicit conversion - first variant.  
Dim testExplicit1 = CTypeDynamic(Of String)(sampleObject)  
// Explicit conversion - second variant.  
Dim testExplicit2 = CTypeDynamic(sampleObject, GetType(String))  
```  
  
   
  
## Examples  
 <span data-ttu-id="c1932-235">Suponha que você precisa de uma estrutura de dados para armazenar representações textuais e numéricas de números, e você deseja definir conversões dessa estrutura de dados de cadeias de caracteres e inteiros.</span><span class="sxs-lookup"><span data-stu-id="c1932-235">Assume that you need a data structure to store textual and numeric representations of numbers, and you want to define conversions of this data structure to strings and integers.</span></span>  
  
 <span data-ttu-id="c1932-236">O exemplo de código a seguir demonstra a `DynamicNumber` classe, que é derivado do <xref:System.Dynamic.DynamicObject> classe.</span><span class="sxs-lookup"><span data-stu-id="c1932-236">The following code example demonstrates the `DynamicNumber` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="c1932-237">`DynamicNumber` substitui o <xref:System.Dynamic.DynamicObject.TryConvert%2A> método para habilitar a conversão de tipo.</span><span class="sxs-lookup"><span data-stu-id="c1932-237">`DynamicNumber` overrides the <xref:System.Dynamic.DynamicObject.TryConvert%2A> method to enable type conversion.</span></span> <span data-ttu-id="c1932-238">Ele também substitui o <xref:System.Dynamic.DynamicObject.TrySetMember%2A> e <xref:System.Dynamic.DynamicObject.TryGetMember%2A> métodos para habilitar o acesso aos elementos de dados.</span><span class="sxs-lookup"><span data-stu-id="c1932-238">It also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access to the data elements.</span></span>  
  
 <span data-ttu-id="c1932-239">Neste exemplo, há suporte para apenas uma conversão de cadeias de caracteres e inteiros.</span><span class="sxs-lookup"><span data-stu-id="c1932-239">In this example, only conversion to strings and integers is supported.</span></span> <span data-ttu-id="c1932-240">Se você tentar converter um objeto em qualquer outro tipo, uma exceção de tempo de execução é gerada.</span><span class="sxs-lookup"><span data-stu-id="c1932-240">If you try to convert an object to any other type, a run-time exception is thrown.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#3)]
 [!code-vb[System.Dynamic.DynamicObject#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCreateInstance">
      <MemberSignature Language="C#" Value="public virtual bool TryCreateInstance (System.Dynamic.CreateInstanceBinder binder, object[] args, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryCreateInstance(class System.Dynamic.CreateInstanceBinder binder, object[] args, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryCreateInstance (binder As CreateInstanceBinder, args As Object(), ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryCreateInstance(System::Dynamic::CreateInstanceBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryCreateInstance : System.Dynamic.CreateInstanceBinder * obj[] *  -&gt; bool&#xA;override this.TryCreateInstance : System.Dynamic.CreateInstanceBinder * obj[] *  -&gt; bool" Usage="dynamicObject.TryCreateInstance (binder, args, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.CreateInstanceBinder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="c1932-241">Fornece informações sobre a operação de inicialização.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-241">Provides information about the initialization operation.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="c1932-242">Os argumentos que são passados ao objeto durante inicialização.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-242">The arguments that are passed to the object during initialization.</span>
          </span>
          <span data-ttu-id="c1932-243">Por exemplo, para a operação <c>new SampleType(100)</c>, em que <c>SampleType</c> é o tipo derivado da classe <see cref="T:System.Dynamic.DynamicObject" />, <c>args[0]</c> é igual a 100.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-243">For example, for the <c>new SampleType(100)</c> operation, where <c>SampleType</c> is the type derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>args[0]</c> is equal to 100.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="c1932-244">O resultado da inicialização.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-244">The result of the initialization.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c1932-245">Fornece a implementação para operações que inicializam uma nova instância de um objeto dinâmico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-245">Provides the implementation for operations that initialize a new instance of a dynamic object.</span>
          </span>
          <span data-ttu-id="c1932-246">Esse método não se destina ao uso em C# ou Visual Basic.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-246">This method is not intended for use in C# or Visual Basic.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c1932-247">
            <see langword="true" /> se a operação for bem-sucedida; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-247">
              <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="c1932-248">Se esse método retornar <see langword="false" />, o associador de tempo de execução da linguagem determinará o comportamento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-248">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span>
          </span>
          <span data-ttu-id="c1932-249">(Na maioria dos casos, uma exceção de tempo de execução específica a um idioma é gerada.)</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-249">(In most cases, a language-specific run-time exception is thrown.)</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1932-250">As classes derivadas de <xref:System.Dynamic.DynamicObject> classe pode substituir este método para especificar como uma nova instância do objeto dinâmico deve ser inicializada.</span><span class="sxs-lookup"><span data-stu-id="c1932-250">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how a new instance of the dynamic object should be initialized.</span></span> <span data-ttu-id="c1932-251">Quando o método não for substituído, o associador de tempo de execução da linguagem determina o comportamento.</span><span class="sxs-lookup"><span data-stu-id="c1932-251">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="c1932-252">(Na maioria dos casos, uma exceção de tempo de execução específica a um idioma é gerada.)</span><span class="sxs-lookup"><span data-stu-id="c1932-252">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="c1932-253">Compiladores c# e Visual Basic nunca emitem o código para usar esse método, porque eles não dão suporte a tipos de primeira classe.</span><span class="sxs-lookup"><span data-stu-id="c1932-253">C# and Visual Basic compilers never emit code to use this method because they do not support first-class types.</span></span> <span data-ttu-id="c1932-254">Este método destina-se para linguagens que dão suporte a inicialização de objetos dinâmicos usando uma sintaxe como `dynamic new`.</span><span class="sxs-lookup"><span data-stu-id="c1932-254">This method is intended for languages that support the initialization of dynamic objects by using syntax like `dynamic new`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryDeleteIndex">
      <MemberSignature Language="C#" Value="public virtual bool TryDeleteIndex (System.Dynamic.DeleteIndexBinder binder, object[] indexes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryDeleteIndex(class System.Dynamic.DeleteIndexBinder binder, object[] indexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryDeleteIndex (binder As DeleteIndexBinder, indexes As Object()) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryDeleteIndex(System::Dynamic::DeleteIndexBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ indexes);" />
      <MemberSignature Language="F#" Value="abstract member TryDeleteIndex : System.Dynamic.DeleteIndexBinder * obj[] -&gt; bool&#xA;override this.TryDeleteIndex : System.Dynamic.DeleteIndexBinder * obj[] -&gt; bool" Usage="dynamicObject.TryDeleteIndex (binder, indexes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.DeleteIndexBinder" />
        <Parameter Name="indexes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="c1932-255">Fornece informações sobre a exclusão.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-255">Provides information about the deletion.</span>
          </span>
        </param>
        <param name="indexes">
          <span data-ttu-id="c1932-256">Os índices a serem excluídos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-256">The indexes to be deleted.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c1932-257">Fornece a implementação para operações que excluem um objeto pelo índice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-257">Provides the implementation for operations that delete an object by index.</span>
          </span>
          <span data-ttu-id="c1932-258">Esse método não se destina ao uso em C# ou Visual Basic.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-258">This method is not intended for use in C# or Visual Basic.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c1932-259">
            <see langword="true" /> se a operação for bem-sucedida; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-259">
              <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="c1932-260">Se esse método retornar <see langword="false" />, o associador de tempo de execução da linguagem determinará o comportamento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-260">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span>
          </span>
          <span data-ttu-id="c1932-261">(Na maioria dos casos, uma exceção de tempo de execução específica a um idioma é gerada.)</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-261">(In most cases, a language-specific run-time exception is thrown.)</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1932-262">As classes derivadas de <xref:System.Dynamic.DynamicObject> classe pode substituir este método para especificar como um valor que tem um índice especificado deve ser excluído.</span><span class="sxs-lookup"><span data-stu-id="c1932-262">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how a value that has a specified index should be deleted.</span></span> <span data-ttu-id="c1932-263">Quando o método não for substituído, o associador de tempo de execução da linguagem determina o comportamento.</span><span class="sxs-lookup"><span data-stu-id="c1932-263">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="c1932-264">(Na maioria dos casos, uma exceção de tempo de execução específica a um idioma é gerada.)</span><span class="sxs-lookup"><span data-stu-id="c1932-264">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="c1932-265">Compiladores c# e Visual Basic nunca emitem o código para usar esse método, porque eles não dão suporte a esse tipo de operação.</span><span class="sxs-lookup"><span data-stu-id="c1932-265">C# and Visual Basic compilers never emit code to use this method because they do not support this kind of operation.</span></span> <span data-ttu-id="c1932-266">Este método destina-se para linguagens que dão suporte à sintaxe para a exclusão de objetos por índice, tais como `del sampleObject[1,2]` em Python.</span><span class="sxs-lookup"><span data-stu-id="c1932-266">This method is intended for languages that support syntax for deleting objects by index, such as `del sampleObject[1,2]` in Python.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryDeleteMember">
      <MemberSignature Language="C#" Value="public virtual bool TryDeleteMember (System.Dynamic.DeleteMemberBinder binder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryDeleteMember(class System.Dynamic.DeleteMemberBinder binder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryDeleteMember (binder As DeleteMemberBinder) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryDeleteMember(System::Dynamic::DeleteMemberBinder ^ binder);" />
      <MemberSignature Language="F#" Value="abstract member TryDeleteMember : System.Dynamic.DeleteMemberBinder -&gt; bool&#xA;override this.TryDeleteMember : System.Dynamic.DeleteMemberBinder -&gt; bool" Usage="dynamicObject.TryDeleteMember binder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.DeleteMemberBinder" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="c1932-267">Fornece informações sobre a exclusão.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-267">Provides information about the deletion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c1932-268">Fornece a implementação para operações que excluem um membro de objeto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-268">Provides the implementation for operations that delete an object member.</span>
          </span>
          <span data-ttu-id="c1932-269">Esse método não se destina ao uso em C# ou Visual Basic.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-269">This method is not intended for use in C# or Visual Basic.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c1932-270">
            <see langword="true" /> se a operação for bem-sucedida; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-270">
              <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="c1932-271">Se esse método retornar <see langword="false" />, o associador de tempo de execução da linguagem determinará o comportamento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-271">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span>
          </span>
          <span data-ttu-id="c1932-272">(Na maioria dos casos, uma exceção de tempo de execução específica a um idioma é gerada.)</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-272">(In most cases, a language-specific run-time exception is thrown.)</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1932-273">As classes derivadas de <xref:System.Dynamic.DynamicObject> classe pode substituir este método para especificar como um membro de objeto deve ser excluído.</span><span class="sxs-lookup"><span data-stu-id="c1932-273">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how an object member should be deleted.</span></span> <span data-ttu-id="c1932-274">Quando esse método não for substituído, o associador de tempo de execução da linguagem determina o comportamento.</span><span class="sxs-lookup"><span data-stu-id="c1932-274">When this method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="c1932-275">(Na maioria dos casos, uma exceção de tempo de execução específica a um idioma é gerada.)</span><span class="sxs-lookup"><span data-stu-id="c1932-275">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="c1932-276">Compiladores c# e Visual Basic nunca emitem o código para usar esse método, porque eles não dão suporte a esse tipo de operação.</span><span class="sxs-lookup"><span data-stu-id="c1932-276">C# and Visual Basic compilers never emit code to use this method because they do not support this kind of operation.</span></span> <span data-ttu-id="c1932-277">Este método destina-se para linguagens que dão suporte à sintaxe para a exclusão de membros, como `del sampleObject.SampleMember` em Python.</span><span class="sxs-lookup"><span data-stu-id="c1932-277">This method is intended for languages that support syntax for deleting members, such as `del sampleObject.SampleMember` in Python.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetIndex">
      <MemberSignature Language="C#" Value="public virtual bool TryGetIndex (System.Dynamic.GetIndexBinder binder, object[] indexes, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetIndex(class System.Dynamic.GetIndexBinder binder, object[] indexes, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryGetIndex (binder As GetIndexBinder, indexes As Object(), ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryGetIndex(System::Dynamic::GetIndexBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ indexes, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryGetIndex : System.Dynamic.GetIndexBinder * obj[] *  -&gt; bool&#xA;override this.TryGetIndex : System.Dynamic.GetIndexBinder * obj[] *  -&gt; bool" Usage="dynamicObject.TryGetIndex (binder, indexes, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.GetIndexBinder" />
        <Parameter Name="indexes" Type="System.Object[]" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="c1932-278">Fornece informações sobre a operação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-278">Provides information about the operation.</span>
          </span>
        </param>
        <param name="indexes">
          <span data-ttu-id="c1932-279">Os índices usados na operação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-279">The indexes that are used in the operation.</span>
          </span>
          <span data-ttu-id="c1932-280">Por exemplo, para a operação <c>sampleObject[3]</c> em C# (<c>sampleObject(3)</c> em Visual Basic), em que <c>sampleObject</c> é derivado da classe <see langword="DynamicObject" />, <c>indexes[0]</c> é igual a 3.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-280">For example, for the <c>sampleObject[3]</c> operation in C# (<c>sampleObject(3)</c> in Visual Basic), where <c>sampleObject</c> is derived from the <see langword="DynamicObject" /> class, <c>indexes[0]</c> is equal to 3.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="c1932-281">O resultado da operação de índice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-281">The result of the index operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c1932-282">Fornece a implementação para operações que obtêm um valor por índice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-282">Provides the implementation for operations that get a value by index.</span>
          </span>
          <span data-ttu-id="c1932-283">As classes derivadas da classe <see cref="T:System.Dynamic.DynamicObject" /> podem substituir esse método para especificar o comportamento dinâmico das operações de indexação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-283">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for indexing operations.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c1932-284">
            <see langword="true" /> se a operação for bem-sucedida; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-284">
              <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="c1932-285">Se esse método retornar <see langword="false" />, o associador de tempo de execução da linguagem determinará o comportamento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-285">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span>
          </span>
          <span data-ttu-id="c1932-286">(Na maioria dos casos, uma exceção de tempo de execução é gerada.)</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-286">(In most cases, a run-time exception is thrown.)</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1932-287">As classes derivadas de <xref:System.Dynamic.DynamicObject> classe pode substituir este método para especificar como a obtenção de um valor por índice deve ser executada para um objeto dinâmico.</span><span class="sxs-lookup"><span data-stu-id="c1932-287">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how getting a value by index should be performed for a dynamic object.</span></span> <span data-ttu-id="c1932-288">Quando o método não for substituído, o associador de tempo de execução da linguagem determina o comportamento.</span><span class="sxs-lookup"><span data-stu-id="c1932-288">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="c1932-289">(Na maioria dos casos, uma exceção de tempo de execução é gerada.)</span><span class="sxs-lookup"><span data-stu-id="c1932-289">(In most cases, a run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="c1932-290">Se esse método for substituído, ele é invocado automaticamente quando você tem uma operação como `sampleObject[3]` em c# ou `sampleObject(3)` no Visual Basic, em que `sampleObject` deriva o <xref:System.Dynamic.DynamicObject> classe.</span><span class="sxs-lookup"><span data-stu-id="c1932-290">If this method is overridden, it is automatically invoked when you have an operation like `sampleObject[3]` in C# or `sampleObject(3)` in Visual Basic, where `sampleObject` is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c1932-291">Suponha que você deseja criar um objeto no qual as propriedades podem ser acessados por nomes, como `Property0`, `Property1`e assim por diante, ou por índice, para que, por exemplo, `sampleObject.Property0` é equivalente a `sampleObject[0]` em c# ou `sampleObject(0)` no Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c1932-291">Assume that you want to create an object in which properties can be accessed either by names such as `Property0`, `Property1`, and so on, or by index, so that, for example, `sampleObject.Property0` is equivalent to `sampleObject[0]` in C# or `sampleObject(0)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="c1932-292">O exemplo de código a seguir demonstra a `SampleDynamicObject` classe, que é derivado do <xref:System.Dynamic.DynamicObject> classe.</span><span class="sxs-lookup"><span data-stu-id="c1932-292">The following code example demonstrates the `SampleDynamicObject` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="c1932-293">O `SampleDynamicObject` classe contém um objeto do `Dictionary<string, object>` tipo (`Dictionary(Of String, Object)` no Visual Basic) para armazenar os pares chave-valor.</span><span class="sxs-lookup"><span data-stu-id="c1932-293">The `SampleDynamicObject` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs.</span></span> <span data-ttu-id="c1932-294">`SampleDynamicObject` substitui o <xref:System.Dynamic.DynamicObject.TrySetIndex%2A> e <xref:System.Dynamic.DynamicObject.TryGetIndex%2A> métodos para habilitar o acesso por índice.</span><span class="sxs-lookup"><span data-stu-id="c1932-294">`SampleDynamicObject` overrides the <xref:System.Dynamic.DynamicObject.TrySetIndex%2A> and <xref:System.Dynamic.DynamicObject.TryGetIndex%2A> methods to enable access by index.</span></span> <span data-ttu-id="c1932-295">Ele substitui o <xref:System.Dynamic.DynamicObject.TrySetMember%2A> e <xref:System.Dynamic.DynamicObject.TryGetMember%2A> métodos para habilitar o acesso pelo nome da propriedade.</span><span class="sxs-lookup"><span data-stu-id="c1932-295">It overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access by property name.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#4)]
 [!code-vb[System.Dynamic.DynamicObject#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetMember">
      <MemberSignature Language="C#" Value="public virtual bool TryGetMember (System.Dynamic.GetMemberBinder binder, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetMember(class System.Dynamic.GetMemberBinder binder, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryGetMember (binder As GetMemberBinder, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryGetMember(System::Dynamic::GetMemberBinder ^ binder, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryGetMember : System.Dynamic.GetMemberBinder *  -&gt; bool&#xA;override this.TryGetMember : System.Dynamic.GetMemberBinder *  -&gt; bool" Usage="dynamicObject.TryGetMember (binder, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.GetMemberBinder" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="c1932-296">Fornece informações sobre o objeto que chamou a operação dinâmica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-296">Provides information about the object that called the dynamic operation.</span>
          </span>
          <span data-ttu-id="c1932-297">A propriedade <c>binder.Name</c> fornece o nome do membro no qual a operação dinâmica é executada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-297">The <c>binder.Name</c> property provides the name of the member on which the dynamic operation is performed.</span>
          </span>
          <span data-ttu-id="c1932-298">Por exemplo, para a instrução <c>Console.WriteLine(sampleObject.SampleProperty)</c>, em que <c>sampleObject</c> é uma instância da classe derivada da classe <see cref="T:System.Dynamic.DynamicObject" />, <c>binder.Name</c> retorna "SampleProperty".</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-298">For example, for the <c>Console.WriteLine(sampleObject.SampleProperty)</c> statement, where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>binder.Name</c> returns "SampleProperty".</span>
          </span>
          <span data-ttu-id="c1932-299">A propriedade <c>binder.IgnoreCase</c> especifica se o nome do membro diferencia maiúsculas de minúsculas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-299">The <c>binder.IgnoreCase</c> property specifies whether the member name is case-sensitive.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="c1932-300">O resultado da operação get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-300">The result of the get operation.</span>
          </span>
          <span data-ttu-id="c1932-301">Por exemplo, se o método é chamado para uma propriedade, atribua o valor da propriedade a <c>result</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-301">For example, if the method is called for a property, you can assign the property value to <c>result</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c1932-302">Fornece a implementação para operações que obtêm valores de membro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-302">Provides the implementation for operations that get member values.</span>
          </span>
          <span data-ttu-id="c1932-303">As classes derivadas da classe <see cref="T:System.Dynamic.DynamicObject" /> podem substituir este método para especificar o comportamento dinâmico para operações como obtenção de um valor para uma propriedade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-303">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as getting a value for a property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c1932-304">
            <see langword="true" /> se a operação for bem-sucedida; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-304">
              <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="c1932-305">Se esse método retornar <see langword="false" />, o associador de tempo de execução da linguagem determinará o comportamento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-305">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span>
          </span>
          <span data-ttu-id="c1932-306">(Na maioria dos casos, uma exceção de tempo de execução é gerada.)</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-306">(In most cases, a run-time exception is thrown.)</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1932-307">As classes derivadas de <xref:System.Dynamic.DynamicObject> classe pode substituir este método para especificar como as operações que obtêm valores de membro devem ser executadas para um objeto dinâmico.</span><span class="sxs-lookup"><span data-stu-id="c1932-307">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that get member values should be performed for a dynamic object.</span></span> <span data-ttu-id="c1932-308">Quando o método não for substituído, o associador de tempo de execução da linguagem determina o comportamento.</span><span class="sxs-lookup"><span data-stu-id="c1932-308">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="c1932-309">(Na maioria dos casos, uma exceção de tempo de execução é gerada.)</span><span class="sxs-lookup"><span data-stu-id="c1932-309">(In most cases, a run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="c1932-310">Esse método é chamado quando você tiver instruções como `Console.WriteLine(sampleObject.SampleProperty)`, onde `sampleObject` é uma instância da classe que deriva de <xref:System.Dynamic.DynamicObject> classe.</span><span class="sxs-lookup"><span data-stu-id="c1932-310">This method is called when you have statements like `Console.WriteLine(sampleObject.SampleProperty)`, where `sampleObject` is an instance of the class derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
 <span data-ttu-id="c1932-311">Você também pode adicionar seus próprios membros para classes derivadas de `DynamicObject` classe.</span><span class="sxs-lookup"><span data-stu-id="c1932-311">You can also add your own members to classes derived from the `DynamicObject` class.</span></span> <span data-ttu-id="c1932-312">Se sua classe define propriedades e também substitui o <xref:System.Dynamic.DynamicObject.TrySetMember%2A> método, o tempo de execução de linguagem dinâmica (DLR) primeiro usa o associador de linguagem para procurar por uma definição estática de uma propriedade na classe.</span><span class="sxs-lookup"><span data-stu-id="c1932-312">If your class defines properties and also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class.</span></span> <span data-ttu-id="c1932-313">Se não houver nenhuma propriedade, o DLR chama o <xref:System.Dynamic.DynamicObject.TrySetMember%2A> método.</span><span class="sxs-lookup"><span data-stu-id="c1932-313">If there is no such property, the DLR calls the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c1932-314">Suponha que você deseja fornecer a sintaxe alternativa para acessar valores em um dicionário, portanto, que, em vez de escrever `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` no Visual Basic), você pode escrever `sampleDictionary.Text = "Sample text"`.</span><span class="sxs-lookup"><span data-stu-id="c1932-314">Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` in Visual Basic), you can write `sampleDictionary.Text = "Sample text"`.</span></span> <span data-ttu-id="c1932-315">Além disso, essa sintaxe deve ser diferencia maiusculas de minúsculas, de modo que `sampleDictionary.Text` é equivalente a `sampleDictionary.text`.</span><span class="sxs-lookup"><span data-stu-id="c1932-315">Also, this syntax must be case-insensitive, so that `sampleDictionary.Text` is equivalent to `sampleDictionary.text`.</span></span>  
  
 <span data-ttu-id="c1932-316">O exemplo de código a seguir demonstra a `DynamicDictionary` classe, que é derivado do <xref:System.Dynamic.DynamicObject> classe.</span><span class="sxs-lookup"><span data-stu-id="c1932-316">The following code example demonstrates the `DynamicDictionary` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="c1932-317">O `DynamicDictionary` classe contém um objeto do `Dictionary<string, object>` tipo (`Dictionary(Of String, Object)` no Visual Basic) para armazenar os pares chave-valor e substituições de <xref:System.Dynamic.DynamicObject.TrySetMember%2A> e <xref:System.Dynamic.DynamicObject.TryGetMember%2A> métodos para dar suporte a nova sintaxe.</span><span class="sxs-lookup"><span data-stu-id="c1932-317">The `DynamicDictionary` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs, and overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to support the new syntax.</span></span> <span data-ttu-id="c1932-318">Ele também fornece um `Count` propriedade, que mostra quantas propriedades dinâmicas o dicionário contém.</span><span class="sxs-lookup"><span data-stu-id="c1932-318">It also provides a `Count` property, which shows how many dynamic properties the dictionary contains.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#1)]
 [!code-vb[System.Dynamic.DynamicObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryInvoke">
      <MemberSignature Language="C#" Value="public virtual bool TryInvoke (System.Dynamic.InvokeBinder binder, object[] args, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryInvoke(class System.Dynamic.InvokeBinder binder, object[] args, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryInvoke (binder As InvokeBinder, args As Object(), ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryInvoke(System::Dynamic::InvokeBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryInvoke : System.Dynamic.InvokeBinder * obj[] *  -&gt; bool&#xA;override this.TryInvoke : System.Dynamic.InvokeBinder * obj[] *  -&gt; bool" Usage="dynamicObject.TryInvoke (binder, args, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.InvokeBinder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="c1932-319">Fornece informações sobre a operação de invocação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-319">Provides information about the invoke operation.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="c1932-320">Os argumentos que são passados ao objeto durante a operação de invocação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-320">The arguments that are passed to the object during the invoke operation.</span>
          </span>
          <span data-ttu-id="c1932-321">Por exemplo, para a operação <c>sampleObject(100)</c>, em que <c>sampleObject</c> é derivado da classe <see cref="T:System.Dynamic.DynamicObject" />, <c>args[0]</c> é igual a 100.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-321">For example, for the <c>sampleObject(100)</c> operation, where <c>sampleObject</c> is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>args[0]</c> is equal to 100.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="c1932-322">O resultado da invocação do objeto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-322">The result of the object invocation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c1932-323">Fornece a implementação para operações que invocam um objeto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-323">Provides the implementation for operations that invoke an object.</span>
          </span>
          <span data-ttu-id="c1932-324">Classes derivadas da classe <see cref="T:System.Dynamic.DynamicObject" /> podem substituir este método para especificar o comportamento dinâmico para operações como invocar um objeto ou um delegado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-324">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as invoking an object or a delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c1932-325">
            <see langword="true" /> se a operação for bem-sucedida; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-325">
              <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="c1932-326">Se esse método retornar <see langword="false" />, o associador de tempo de execução da linguagem determinará o comportamento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-326">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span>
          </span>
          <span data-ttu-id="c1932-327">(Na maioria dos casos, uma exceção de tempo de execução específica a um idioma é gerada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-327">(In most cases, a language-specific run-time exception is thrown.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1932-328">As classes derivadas de <xref:System.Dynamic.DynamicObject> classe pode substituir este método para especificar como as operações que invocam um objeto devem ser executadas para um objeto dinâmico.</span><span class="sxs-lookup"><span data-stu-id="c1932-328">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that invoke an object should be performed for a dynamic object.</span></span> <span data-ttu-id="c1932-329">Quando o método não for substituído, o associador de tempo de execução da linguagem determina o comportamento.</span><span class="sxs-lookup"><span data-stu-id="c1932-329">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="c1932-330">(Na maioria dos casos, uma exceção de tempo de execução é gerada.)</span><span class="sxs-lookup"><span data-stu-id="c1932-330">(In most cases, a run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="c1932-331">Se esse método for substituído, ele é invocado automaticamente quando você tem uma operação semelhante `sampleObject(100)`, onde `sampleObject` deriva o <xref:System.Dynamic.DynamicObject> classe.</span><span class="sxs-lookup"><span data-stu-id="c1932-331">If this method is overridden, it is automatically invoked when you have an operation like `sampleObject(100)`, where `sampleObject` is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
 <span data-ttu-id="c1932-332">A operação para invocar um objeto é suportada em c#, mas não no Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c1932-332">The operation for invoking an object is supported in C# but not in Visual Basic.</span></span> <span data-ttu-id="c1932-333">O compilador do Visual Basic nunca emite código para usar esse método, e a linguagem Visual Basic não oferece suporte a uma sintaxe como `sampleObject(100)`.</span><span class="sxs-lookup"><span data-stu-id="c1932-333">The Visual Basic compiler never emits code to use this method, and the Visual Basic language does not support syntax like `sampleObject(100)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c1932-334">Suponha que você precisa de uma estrutura de dados para armazenar representações textuais e numéricas de números.</span><span class="sxs-lookup"><span data-stu-id="c1932-334">Assume that you need a data structure to store textual and numeric representations of numbers.</span></span> <span data-ttu-id="c1932-335">Você deseja ser capaz de especificar o valor para cada propriedade individualmente e também ser capaz de inicializar todas as propriedades em uma única instrução.</span><span class="sxs-lookup"><span data-stu-id="c1932-335">You want to be able to specify the value for each property individually and also to be able to initialize all properties in a single statement.</span></span>  
  
 <span data-ttu-id="c1932-336">O exemplo de código a seguir demonstra a `DynamicNumber` classe, que é derivado do <xref:System.Dynamic.DynamicObject> classe.</span><span class="sxs-lookup"><span data-stu-id="c1932-336">The following code example demonstrates the `DynamicNumber` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="c1932-337">`DynamicNumber` substitui o <xref:System.Dynamic.DynamicObject.TryInvoke%2A> método para habilitar a inicialização de todas as propriedades de uma só vez.</span><span class="sxs-lookup"><span data-stu-id="c1932-337">`DynamicNumber` overrides the <xref:System.Dynamic.DynamicObject.TryInvoke%2A> method to enable initialization of all properties at one time.</span></span> <span data-ttu-id="c1932-338">Ele também substitui o <xref:System.Dynamic.DynamicObject.TrySetMember%2A> e <xref:System.Dynamic.DynamicObject.TryGetMember%2A> métodos para habilitar o acesso às propriedades de objeto individuais.</span><span class="sxs-lookup"><span data-stu-id="c1932-338">It also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access to individual object properties.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryInvokeMember">
      <MemberSignature Language="C#" Value="public virtual bool TryInvokeMember (System.Dynamic.InvokeMemberBinder binder, object[] args, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryInvokeMember(class System.Dynamic.InvokeMemberBinder binder, object[] args, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryInvokeMember (binder As InvokeMemberBinder, args As Object(), ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryInvokeMember(System::Dynamic::InvokeMemberBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryInvokeMember : System.Dynamic.InvokeMemberBinder * obj[] *  -&gt; bool&#xA;override this.TryInvokeMember : System.Dynamic.InvokeMemberBinder * obj[] *  -&gt; bool" Usage="dynamicObject.TryInvokeMember (binder, args, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.InvokeMemberBinder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="c1932-339">Fornece informações sobre a operação dinâmica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-339">Provides information about the dynamic operation.</span>
          </span>
          <span data-ttu-id="c1932-340">A propriedade <c>binder.Name</c> fornece o nome do membro no qual a operação dinâmica é executada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-340">The <c>binder.Name</c> property provides the name of the member on which the dynamic operation is performed.</span>
          </span>
          <span data-ttu-id="c1932-341">Por exemplo, para a instrução <c>sampleObject.SampleMethod(100)</c>, em que <c>sampleObject</c> é uma instância da classe derivada da classe <see cref="T:System.Dynamic.DynamicObject" />, <c>binder.Name</c> retorna "SampleMethod".</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-341">For example, for the statement <c>sampleObject.SampleMethod(100)</c>, where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>binder.Name</c> returns "SampleMethod".</span>
          </span>
          <span data-ttu-id="c1932-342">A propriedade <c>binder.IgnoreCase</c> especifica se o nome do membro diferencia maiúsculas de minúsculas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-342">The <c>binder.IgnoreCase</c> property specifies whether the member name is case-sensitive.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="c1932-343">Os argumentos passados ao membro do objeto durante a operação de invocação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-343">The arguments that are passed to the object member during the invoke operation.</span>
          </span>
          <span data-ttu-id="c1932-344">Por exemplo, para a instrução <c>sampleObject.SampleMethod(100)</c>, em que <c>sampleObject</c> é derivado da classe <see cref="T:System.Dynamic.DynamicObject" />, <c>args[0]</c> é igual a 100.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-344">For example, for the statement <c>sampleObject.SampleMethod(100)</c>, where <c>sampleObject</c> is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>args[0]</c> is equal to 100.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="c1932-345">O resultado da invocação do membro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-345">The result of the member invocation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c1932-346">Fornece a implementação para operações que invocam um membro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-346">Provides the implementation for operations that invoke a member.</span>
          </span>
          <span data-ttu-id="c1932-347">As classes derivadas da classe <see cref="T:System.Dynamic.DynamicObject" /> podem substituir esse método a fim de especificar o comportamento dinâmico para operações como chamar um método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-347">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as calling a method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c1932-348">
            <see langword="true" /> se a operação for bem-sucedida; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-348">
              <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="c1932-349">Se esse método retornar <see langword="false" />, o associador de tempo de execução da linguagem determinará o comportamento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-349">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span>
          </span>
          <span data-ttu-id="c1932-350">(Na maioria dos casos, uma exceção de tempo de execução específica a um idioma é gerada.)</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-350">(In most cases, a language-specific run-time exception is thrown.)</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1932-351">As classes derivadas de <xref:System.Dynamic.DynamicObject> classe pode substituir este método para especificar como as operações que invocam um membro de objeto devem ser executadas para um objeto dinâmico.</span><span class="sxs-lookup"><span data-stu-id="c1932-351">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that invoke an object member should be performed for a dynamic object.</span></span> <span data-ttu-id="c1932-352">Quando o método não for substituído, o associador de tempo de execução da linguagem determina o comportamento.</span><span class="sxs-lookup"><span data-stu-id="c1932-352">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="c1932-353">(Na maioria dos casos, uma exceção de tempo de execução específica a um idioma é gerada.)</span><span class="sxs-lookup"><span data-stu-id="c1932-353">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="c1932-354">Se esse método for substituído, ele é invocado automaticamente quando você executa uma operação semelhante `sampleObject.SampleMethod(100)`, onde `sampleObject` deriva o `DynamicObject` classe.</span><span class="sxs-lookup"><span data-stu-id="c1932-354">If this method is overridden, it is automatically invoked when you perform an operation like `sampleObject.SampleMethod(100)`, where `sampleObject` is derived from the `DynamicObject` class.</span></span>  
  
 <span data-ttu-id="c1932-355">Você também pode adicionar seus próprios métodos para classes que derivam de <xref:System.Dynamic.DynamicObject> classe.</span><span class="sxs-lookup"><span data-stu-id="c1932-355">You can also add your own methods to classes that are derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="c1932-356">Por exemplo, se você substituir o <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> método, o sistema de expedição dinâmica primeiro tenta determinar se o método especificado existe na classe.</span><span class="sxs-lookup"><span data-stu-id="c1932-356">For example, if you override the <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> method, the dynamic dispatch system first attempts to determine whether the specified method exists in the class.</span></span> <span data-ttu-id="c1932-357">Se não encontrar o método, ele usa o <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> implementação.</span><span class="sxs-lookup"><span data-stu-id="c1932-357">If it does not find the method, it uses the <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> implementation.</span></span>  
  
 <span data-ttu-id="c1932-358">Esse método não suporta `ref` e `out` parâmetros.</span><span class="sxs-lookup"><span data-stu-id="c1932-358">This method does not support `ref` and `out` parameters.</span></span> <span data-ttu-id="c1932-359">Todos os parâmetros no `args` matriz são passados por valor.</span><span class="sxs-lookup"><span data-stu-id="c1932-359">All parameters in the `args` array are passed by value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c1932-360">Suponha que você deseja fornecer a sintaxe alternativa para acessar valores em um dicionário, portanto, que, em vez de escrever `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` no Visual Basic), você pode escrever `sampleDictionary.Text = "Sample text"`.</span><span class="sxs-lookup"><span data-stu-id="c1932-360">Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` in Visual Basic), you can write `sampleDictionary.Text = "Sample text"`.</span></span> <span data-ttu-id="c1932-361">Além disso, você deseja ser capaz de chamar os métodos de dicionário padrão neste dicionário.</span><span class="sxs-lookup"><span data-stu-id="c1932-361">Also, you want to be able to call all the standard dictionary methods on this dictionary.</span></span>  
  
 <span data-ttu-id="c1932-362">O exemplo de código a seguir demonstra a `DynamicDictionary` classe, que é derivado do <xref:System.Dynamic.DynamicObject> classe.</span><span class="sxs-lookup"><span data-stu-id="c1932-362">The following code example demonstrates the `DynamicDictionary` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="c1932-363">O `DynamicDictionary` classe contém um objeto do `Dictionary<string, object>` tipo (`Dictionary(Of String, Object)` no Visual Basic) para armazenar os pares chave-valor.</span><span class="sxs-lookup"><span data-stu-id="c1932-363">The `DynamicDictionary` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs.</span></span> <span data-ttu-id="c1932-364">Ele substitui o <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> método para dar suporte a métodos do <xref:System.Collections.Generic.Dictionary%602> classe e substitui o <xref:System.Dynamic.DynamicObject.TrySetMember%2A> e <xref:System.Dynamic.DynamicObject.TryGetMember%2A> métodos para dar suporte a nova sintaxe.</span><span class="sxs-lookup"><span data-stu-id="c1932-364">It overrides the <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> method to support methods of the <xref:System.Collections.Generic.Dictionary%602> class and overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to support the new syntax.</span></span> <span data-ttu-id="c1932-365">Ele também fornece um `Print` método, que imprime todos os valores e chaves de dicionário.</span><span class="sxs-lookup"><span data-stu-id="c1932-365">It also provides a `Print` method, which prints out all dictionary keys and values.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#6)]
 [!code-vb[System.Dynamic.DynamicObject#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrySetIndex">
      <MemberSignature Language="C#" Value="public virtual bool TrySetIndex (System.Dynamic.SetIndexBinder binder, object[] indexes, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TrySetIndex(class System.Dynamic.SetIndexBinder binder, object[] indexes, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TrySetIndex (binder As SetIndexBinder, indexes As Object(), value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TrySetIndex(System::Dynamic::SetIndexBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ indexes, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member TrySetIndex : System.Dynamic.SetIndexBinder * obj[] * obj -&gt; bool&#xA;override this.TrySetIndex : System.Dynamic.SetIndexBinder * obj[] * obj -&gt; bool" Usage="dynamicObject.TrySetIndex (binder, indexes, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.SetIndexBinder" />
        <Parameter Name="indexes" Type="System.Object[]" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="c1932-366">Fornece informações sobre a operação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-366">Provides information about the operation.</span>
          </span>
        </param>
        <param name="indexes">
          <span data-ttu-id="c1932-367">Os índices usados na operação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-367">The indexes that are used in the operation.</span>
          </span>
          <span data-ttu-id="c1932-368">Por exemplo, para a operação <c>sampleObject[3] = 10</c> em C# (<c>sampleObject(3) = 10</c> em Visual Basic), em que <c>sampleObject</c> é derivado da classe <see cref="T:System.Dynamic.DynamicObject" />, <c>indexes[0]</c> é igual a 3.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-368">For example, for the <c>sampleObject[3] = 10</c> operation in C# (<c>sampleObject(3) = 10</c> in Visual Basic), where <c>sampleObject</c> is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>indexes[0]</c> is equal to 3.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="c1932-369">O valor a ser definido para o objeto que tem o índice especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-369">The value to set to the object that has the specified index.</span>
          </span>
          <span data-ttu-id="c1932-370">Por exemplo, para a operação <c>sampleObject[3] = 10</c> em C# (<c>sampleObject(3) = 10</c> em Visual Basic), em que <c>sampleObject</c> é derivado da classe <see cref="T:System.Dynamic.DynamicObject" />, <c>value</c> é igual a 10.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-370">For example, for the <c>sampleObject[3] = 10</c> operation in C# (<c>sampleObject(3) = 10</c> in Visual Basic), where <c>sampleObject</c> is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>value</c> is equal to 10.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c1932-371">Fornece a implementação para operações que definem um valor por índice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-371">Provides the implementation for operations that set a value by index.</span>
          </span>
          <span data-ttu-id="c1932-372">As classes derivadas da classe <see cref="T:System.Dynamic.DynamicObject" /> podem substituir este método para especificar o comportamento dinâmico para operações que acessam os objetos por um índice especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-372">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations that access objects by a specified index.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c1932-373">
            <see langword="true" /> se a operação for bem-sucedida; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-373">
              <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="c1932-374">Se esse método retornar <see langword="false" />, o associador de tempo de execução da linguagem determinará o comportamento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-374">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span>
          </span>
          <span data-ttu-id="c1932-375">(Na maioria dos casos, uma exceção de tempo de execução específica a um idioma é gerada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-375">(In most cases, a language-specific run-time exception is thrown.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1932-376">As classes derivadas de <xref:System.Dynamic.DynamicObject> classe pode substituir este método para especificar como as operações que acessam um objeto pelo índice devem ser executadas para um objeto dinâmico.</span><span class="sxs-lookup"><span data-stu-id="c1932-376">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that access an object by index should be performed for a dynamic object.</span></span> <span data-ttu-id="c1932-377">Quando o método não for substituído, o associador de tempo de execução da linguagem determina o comportamento.</span><span class="sxs-lookup"><span data-stu-id="c1932-377">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="c1932-378">(Na maioria dos casos, uma exceção de tempo de execução específica a um idioma é gerada.)</span><span class="sxs-lookup"><span data-stu-id="c1932-378">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="c1932-379">Se esse método for substituído, ele é invocado automaticamente quando você tem uma operação como `sampleObject[3] = 10` em c# ou `sampleObject(3) = 10` no Visual Basic, em que `sampleObject` deriva o <xref:System.Dynamic.DynamicObject> classe.</span><span class="sxs-lookup"><span data-stu-id="c1932-379">If this method is overridden, it is automatically invoked when you have an operation like `sampleObject[3] = 10` in C# or `sampleObject(3) = 10` in Visual Basic, where `sampleObject` is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c1932-380">Suponha que você deseja criar um objeto no qual as propriedades podem ser acessados por nomes, como `Property0`, `Property1`e assim por diante, ou por índice, para que, por exemplo, `sampleObject.Property0` é equivalente a `sampleObject[0]` em c# ou `sampleObject(0)` no Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c1932-380">Assume that you want to create an object in which properties can be accessed either by names such as `Property0`, `Property1`, and so on, or by index, so that, for example, `sampleObject.Property0` is equivalent to `sampleObject[0]` in C# or `sampleObject(0)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="c1932-381">O exemplo de código a seguir demonstra a `SampleDynamicObject` classe, que é derivado do <xref:System.Dynamic.DynamicObject> classe.</span><span class="sxs-lookup"><span data-stu-id="c1932-381">The following code example demonstrates the `SampleDynamicObject` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="c1932-382">O `SampleDynamicObject` classe contém um objeto do `Dictionary<string, object>` tipo (`Dictionary(Of String, Object)` no Visual Basic) para armazenar os pares chave-valor.</span><span class="sxs-lookup"><span data-stu-id="c1932-382">The `SampleDynamicObject` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs.</span></span> <span data-ttu-id="c1932-383">`SampleDynamicObject` substitui o <xref:System.Dynamic.DynamicObject.TrySetIndex%2A> e <xref:System.Dynamic.DynamicObject.TryGetIndex%2A> métodos para habilitar o acesso por índice.</span><span class="sxs-lookup"><span data-stu-id="c1932-383">`SampleDynamicObject` overrides the <xref:System.Dynamic.DynamicObject.TrySetIndex%2A> and <xref:System.Dynamic.DynamicObject.TryGetIndex%2A> methods to enable access by index.</span></span> <span data-ttu-id="c1932-384">Ele substitui o <xref:System.Dynamic.DynamicObject.TrySetMember%2A> e <xref:System.Dynamic.DynamicObject.TryGetMember%2A> métodos para habilitar o acesso pelo nome da propriedade.</span><span class="sxs-lookup"><span data-stu-id="c1932-384">It overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access by property name.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#4)]
 [!code-vb[System.Dynamic.DynamicObject#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrySetMember">
      <MemberSignature Language="C#" Value="public virtual bool TrySetMember (System.Dynamic.SetMemberBinder binder, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TrySetMember(class System.Dynamic.SetMemberBinder binder, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TrySetMember (binder As SetMemberBinder, value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TrySetMember(System::Dynamic::SetMemberBinder ^ binder, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member TrySetMember : System.Dynamic.SetMemberBinder * obj -&gt; bool&#xA;override this.TrySetMember : System.Dynamic.SetMemberBinder * obj -&gt; bool" Usage="dynamicObject.TrySetMember (binder, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.SetMemberBinder" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="c1932-385">Fornece informações sobre o objeto que chamou a operação dinâmica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-385">Provides information about the object that called the dynamic operation.</span>
          </span>
          <span data-ttu-id="c1932-386">A propriedade <c>binder.Name</c> fornece o nome do membro ao qual o valor está sendo atribuído.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-386">The <c>binder.Name</c> property provides the name of the member to which the value is being assigned.</span>
          </span>
          <span data-ttu-id="c1932-387">Por exemplo, para a instrução <c>sampleObject.SampleProperty = "Test"</c>, em que <c>sampleObject</c> é a instância da classe derivada da classe <see cref="T:System.Dynamic.DynamicObject" />, <c>binder.Name</c> retorna "SampleProperty".</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-387">For example, for the statement <c>sampleObject.SampleProperty = "Test"</c>, where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>binder.Name</c> returns "SampleProperty".</span>
          </span>
          <span data-ttu-id="c1932-388">A propriedade <c>binder.IgnoreCase</c> especifica se o nome do membro diferencia maiúsculas de minúsculas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-388">The <c>binder.IgnoreCase</c> property specifies whether the member name is case-sensitive.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="c1932-389">O valor a ser definido para o membro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-389">The value to set to the member.</span>
          </span>
          <span data-ttu-id="c1932-390">Por exemplo, para <c>sampleObject.SampleProperty = "Test"</c>, em que <c>sampleObject</c> é a instância da classe derivada da classe <see cref="T:System.Dynamic.DynamicObject" />, o <c>value</c> é "Test".</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-390">For example, for <c>sampleObject.SampleProperty = "Test"</c>, where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, the <c>value</c> is "Test".</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c1932-391">Fornece a implementação para operações que definem valores de membro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-391">Provides the implementation for operations that set member values.</span>
          </span>
          <span data-ttu-id="c1932-392">As classes derivadas da classe <see cref="T:System.Dynamic.DynamicObject" /> podem substituir este método para especificar o comportamento dinâmico para operações como definição de um valor para uma propriedade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-392">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as setting a value for a property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c1932-393">
            <see langword="true" /> se a operação for bem-sucedida; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-393">
              <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="c1932-394">Se esse método retornar <see langword="false" />, o associador de tempo de execução da linguagem determinará o comportamento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-394">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span>
          </span>
          <span data-ttu-id="c1932-395">(Na maioria dos casos, uma exceção de tempo de execução específica a um idioma é gerada.)</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-395">(In most cases, a language-specific run-time exception is thrown.)</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1932-396">As classes derivadas de <xref:System.Dynamic.DynamicObject> classe pode substituir este método para especificar como as operações que definem um valor a um membro devem ser executadas para um objeto dinâmico.</span><span class="sxs-lookup"><span data-stu-id="c1932-396">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that set a value to a member should be performed for a dynamic object.</span></span> <span data-ttu-id="c1932-397">Quando o método não for substituído, o associador de tempo de execução da linguagem determina o comportamento.</span><span class="sxs-lookup"><span data-stu-id="c1932-397">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="c1932-398">(Na maioria dos casos, uma exceção de tempo de execução específica a um idioma é gerada.)</span><span class="sxs-lookup"><span data-stu-id="c1932-398">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="c1932-399">Esse método é chamado quando você tiver instruções como `sampleObject.SampleProperty = "Test"`, onde `sampleObject` é uma instância da classe que deriva de <xref:System.Dynamic.DynamicObject> classe.</span><span class="sxs-lookup"><span data-stu-id="c1932-399">This method is called when you have statements like `sampleObject.SampleProperty = "Test"`, where `sampleObject` is an instance of the class that is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
 <span data-ttu-id="c1932-400">Você também pode adicionar seus próprios membros para classes derivadas de `DynamicObject` classe.</span><span class="sxs-lookup"><span data-stu-id="c1932-400">You can also add your own members to classes derived from the `DynamicObject` class.</span></span> <span data-ttu-id="c1932-401">Se sua classe define propriedades e também substitui o <xref:System.Dynamic.DynamicObject.TrySetMember%2A> método, o tempo de execução de linguagem dinâmica (DLR) primeiro usa o associador de linguagem para procurar por uma definição estática de uma propriedade na classe.</span><span class="sxs-lookup"><span data-stu-id="c1932-401">If your class defines properties and also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class.</span></span> <span data-ttu-id="c1932-402">Se não houver nenhuma propriedade, o DLR chama o <xref:System.Dynamic.DynamicObject.TrySetMember%2A> método.</span><span class="sxs-lookup"><span data-stu-id="c1932-402">If there is no such property, the DLR calls the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c1932-403">Suponha que você deseja fornecer a sintaxe alternativa para acessar valores em um dicionário, portanto, que, em vez de escrever `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` no Visual Basic), você pode escrever `sampleDictionary.Text = "Sample text"`.</span><span class="sxs-lookup"><span data-stu-id="c1932-403">Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` in Visual Basic), you can write `sampleDictionary.Text = "Sample text"`.</span></span> <span data-ttu-id="c1932-404">Além disso, essa sintaxe deve ser diferencia maiusculas de minúsculas, de modo que `sampleDictionary.Text` é equivalente a `sampleDictionary.text`.</span><span class="sxs-lookup"><span data-stu-id="c1932-404">Also, this syntax must be case-insensitive, so that `sampleDictionary.Text` is equivalent to `sampleDictionary.text`.</span></span>  
  
 <span data-ttu-id="c1932-405">O exemplo de código a seguir demonstra a `DynamicDictionary` classe, que é derivado do <xref:System.Dynamic.DynamicObject> classe.</span><span class="sxs-lookup"><span data-stu-id="c1932-405">The following code example demonstrates the `DynamicDictionary` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="c1932-406">O `DynamicDictionary` classe contém um objeto do `Dictionary<string, object>` tipo (`Dictionary(Of String, Object)` no Visual Basic) para armazenar os pares chave-valor e substituições de <xref:System.Dynamic.DynamicObject.TrySetMember%2A> e <xref:System.Dynamic.DynamicObject.TryGetMember%2A> métodos para dar suporte a nova sintaxe.</span><span class="sxs-lookup"><span data-stu-id="c1932-406">The `DynamicDictionary` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs, and overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to support the new syntax.</span></span> <span data-ttu-id="c1932-407">Ele também fornece um `Count` propriedade, que mostra quantas propriedades dinâmicas o dicionário contém.</span><span class="sxs-lookup"><span data-stu-id="c1932-407">It also provides a `Count` property, which shows how many dynamic properties the dictionary contains.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#1)]
 [!code-vb[System.Dynamic.DynamicObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryUnaryOperation">
      <MemberSignature Language="C#" Value="public virtual bool TryUnaryOperation (System.Dynamic.UnaryOperationBinder binder, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryUnaryOperation(class System.Dynamic.UnaryOperationBinder binder, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryUnaryOperation (binder As UnaryOperationBinder, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryUnaryOperation(System::Dynamic::UnaryOperationBinder ^ binder, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryUnaryOperation : System.Dynamic.UnaryOperationBinder *  -&gt; bool&#xA;override this.TryUnaryOperation : System.Dynamic.UnaryOperationBinder *  -&gt; bool" Usage="dynamicObject.TryUnaryOperation (binder, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.UnaryOperationBinder" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="c1932-408">Fornece informações sobre a operação unária.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-408">Provides information about the unary operation.</span>
          </span>
          <span data-ttu-id="c1932-409">A propriedade <c>binder.Operation</c> retorna um objeto <see cref="T:System.Linq.Expressions.ExpressionType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-409">The <c>binder.Operation</c> property returns an <see cref="T:System.Linq.Expressions.ExpressionType" /> object.</span>
          </span>
          <span data-ttu-id="c1932-410">Por exemplo, para a instrução <c>negativeNumber = -number</c>, em que <c>number</c> é derivado da classe <see langword="DynamicObject" />, <c>binder.Operation</c> retorna "Negate".</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-410">For example, for the <c>negativeNumber = -number</c> statement, where <c>number</c> is derived from the <see langword="DynamicObject" /> class, <c>binder.Operation</c> returns "Negate".</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="c1932-411">O resultado da operação unária.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-411">The result of the unary operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c1932-412">Fornece implementação para operações unárias.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-412">Provides implementation for unary operations.</span>
          </span>
          <span data-ttu-id="c1932-413">As classes derivadas da classe <see cref="T:System.Dynamic.DynamicObject" /> podem substituir este método para especificar o comportamento dinâmico para operações como uma negação, incremento ou decremento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-413">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as negation, increment, or decrement.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c1932-414">
            <see langword="true" /> se a operação for bem-sucedida; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-414">
              <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="c1932-415">Se esse método retornar <see langword="false" />, o associador de tempo de execução da linguagem determinará o comportamento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-415">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span>
          </span>
          <span data-ttu-id="c1932-416">(Na maioria dos casos, uma exceção de tempo de execução específica a um idioma é gerada.)</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1932-416">(In most cases, a language-specific run-time exception is thrown.)</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1932-417">As classes derivadas de <xref:System.Dynamic.DynamicObject> classe pode substituir este método para especificar como operações unárias devem ser executadas para um objeto dinâmico.</span><span class="sxs-lookup"><span data-stu-id="c1932-417">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how unary operations should be performed for a dynamic object.</span></span> <span data-ttu-id="c1932-418">Quando o método não for substituído, o associador de tempo de execução da linguagem determina o comportamento.</span><span class="sxs-lookup"><span data-stu-id="c1932-418">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="c1932-419">(Na maioria dos casos, uma exceção de tempo de execução específica a um idioma é gerada.)</span><span class="sxs-lookup"><span data-stu-id="c1932-419">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="c1932-420">Esse método é chamado quando você tiver operações unárias, como negação, incremento ou decremento.</span><span class="sxs-lookup"><span data-stu-id="c1932-420">This method is called when you have unary operations such as negation, increment, or decrement.</span></span> <span data-ttu-id="c1932-421">Por exemplo, se o <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> método for substituído, esse método é invocado automaticamente para instruções, como `negativeNumber = -number`, onde `number` deriva o <xref:System.Dynamic.DynamicObject> classe.</span><span class="sxs-lookup"><span data-stu-id="c1932-421">For example, if the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method is overridden, this method is automatically invoked for statements like `negativeNumber = -number`, where `number` is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
 <span data-ttu-id="c1932-422">Você pode obter informações sobre o tipo da operação unária, usando o `Operation` propriedade do `binder` parâmetro.</span><span class="sxs-lookup"><span data-stu-id="c1932-422">You can get information about the type of the unary operation by using the `Operation` property of the `binder` parameter.</span></span>  
  
 <span data-ttu-id="c1932-423">Se o objeto dinâmico é usado somente em c# e Visual Basic, o `binder.Operation` propriedade pode ter um dos seguintes valores do <xref:System.Linq.Expressions.ExpressionType> enumeração.</span><span class="sxs-lookup"><span data-stu-id="c1932-423">If your dynamic object is used only in C# and Visual Basic, the `binder.Operation` property can have one of the following values from the <xref:System.Linq.Expressions.ExpressionType> enumeration.</span></span> <span data-ttu-id="c1932-424">No entanto, em outras linguagens como o IronPython ou IronRuby, você pode ter outros valores.</span><span class="sxs-lookup"><span data-stu-id="c1932-424">However, in other languages such as IronPython or IronRuby, you can have other values.</span></span>
  
|<span data-ttu-id="c1932-425">Valor</span><span class="sxs-lookup"><span data-stu-id="c1932-425">Value</span></span>|<span data-ttu-id="c1932-426">Descrição</span><span class="sxs-lookup"><span data-stu-id="c1932-426">Description</span></span>|<span data-ttu-id="c1932-427">C#</span><span class="sxs-lookup"><span data-stu-id="c1932-427">C#</span></span>|<span data-ttu-id="c1932-428">Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c1932-428">Visual Basic</span></span>|  
|-----------|-----------------|---------|------------------|  
|`Decrement`|<span data-ttu-id="c1932-429">Uma operação de decremento unária.</span><span class="sxs-lookup"><span data-stu-id="c1932-429">A unary decrement operation.</span></span>|`a--`|<span data-ttu-id="c1932-430">Sem suporte.</span><span class="sxs-lookup"><span data-stu-id="c1932-430">Not supported.</span></span>|  
|`Increment`|<span data-ttu-id="c1932-431">Uma operação de incremento unária.</span><span class="sxs-lookup"><span data-stu-id="c1932-431">A unary increment operation.</span></span>|`a++`|<span data-ttu-id="c1932-432">Sem suporte.</span><span class="sxs-lookup"><span data-stu-id="c1932-432">Not supported.</span></span>|  
|`Negate`|<span data-ttu-id="c1932-433">Uma negação aritmética.</span><span class="sxs-lookup"><span data-stu-id="c1932-433">An arithmetic negation.</span></span>|`-a`|`-a`|  
|`Not`|<span data-ttu-id="c1932-434">Uma negação lógica.</span><span class="sxs-lookup"><span data-stu-id="c1932-434">A logical negation.</span></span>|`!a`|`Not a`|  
|`OnesComplement`|<span data-ttu-id="c1932-435">Um aqueles complemento.</span><span class="sxs-lookup"><span data-stu-id="c1932-435">A ones complement.</span></span>|`~a`|<span data-ttu-id="c1932-436">Sem suporte.</span><span class="sxs-lookup"><span data-stu-id="c1932-436">Not supported.</span></span>|  
|`IsFalse`|<span data-ttu-id="c1932-437">Um valor de condição falsa.</span><span class="sxs-lookup"><span data-stu-id="c1932-437">A false condition value.</span></span>|`a && b`|<span data-ttu-id="c1932-438">Sem suporte.</span><span class="sxs-lookup"><span data-stu-id="c1932-438">Not supported.</span></span>|  
|`IsTrue`|<span data-ttu-id="c1932-439">Um valor de condição verdadeira.</span><span class="sxs-lookup"><span data-stu-id="c1932-439">A true condition value.</span></span>|`a &#124;&#124; b`|<span data-ttu-id="c1932-440">Sem suporte.</span><span class="sxs-lookup"><span data-stu-id="c1932-440">Not supported.</span></span>|  
|`UnaryPlus`|<span data-ttu-id="c1932-441">Uma adição unária.</span><span class="sxs-lookup"><span data-stu-id="c1932-441">A unary plus.</span></span>|`+a`|`+a`|  
  
> [!NOTE]
>  <span data-ttu-id="c1932-442">Para implementar `OrElse` (`a || b`) e `AndAlso` (`a && b`) operações para objetos dinâmicos no c#, você talvez queira implementar ambos os <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> método e o <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> método.</span><span class="sxs-lookup"><span data-stu-id="c1932-442">To implement `OrElse` (`a || b`) and `AndAlso` (`a && b`) operations for dynamic objects in C#, you may want to implement both the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method and the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method.</span></span>  
>   
>  <span data-ttu-id="c1932-443">O `OrElse` consiste em operação unária `IsTrue` operação e o binário `Or` operação.</span><span class="sxs-lookup"><span data-stu-id="c1932-443">The `OrElse` operation consists of the unary `IsTrue` operation and the binary `Or` operation.</span></span> <span data-ttu-id="c1932-444">O `Or` operação é executada apenas se o resultado do `IsTrue` operação é `false`.</span><span class="sxs-lookup"><span data-stu-id="c1932-444">The `Or` operation is performed only if the result of the `IsTrue` operation is `false`.</span></span>  
>   
>  <span data-ttu-id="c1932-445">O `AndAlso` consiste em operação unária `IsFalse` operação e o binário `And` operação.</span><span class="sxs-lookup"><span data-stu-id="c1932-445">The `AndAlso` operation consists of the unary `IsFalse` operation and the binary `And` operation.</span></span> <span data-ttu-id="c1932-446">O `And` operação é executada apenas se o resultado do `IsFalse` operação é `false`.</span><span class="sxs-lookup"><span data-stu-id="c1932-446">The `And` operation is performed only if the result of the `IsFalse` operation is `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c1932-447">Suponha que você precisa de uma estrutura de dados para armazenar representações textuais e numéricas de números, e você deseja definir uma operação de negação de matemática para esses dados.</span><span class="sxs-lookup"><span data-stu-id="c1932-447">Assume that you need a data structure to store textual and numeric representations of numbers, and you want to define a mathematical negation operation for such data.</span></span>  
  
 <span data-ttu-id="c1932-448">O exemplo de código a seguir demonstra a `DynamicNumber` classe, que é derivado do <xref:System.Dynamic.DynamicObject> classe.</span><span class="sxs-lookup"><span data-stu-id="c1932-448">The following code example demonstrates the `DynamicNumber` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="c1932-449">`DynamicNumber` substitui o <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> método para habilitar a operação de negação de matemática.</span><span class="sxs-lookup"><span data-stu-id="c1932-449">`DynamicNumber` overrides the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method to enable the mathematical negation operation.</span></span> <span data-ttu-id="c1932-450">Também é substituições de <xref:System.Dynamic.DynamicObject.TrySetMember%2A> e <xref:System.Dynamic.DynamicObject.TryGetMember%2A> métodos para habilitar o acesso aos elementos.</span><span class="sxs-lookup"><span data-stu-id="c1932-450">Is also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access to the elements.</span></span>  
  
 <span data-ttu-id="c1932-451">Neste exemplo, há suporte para apenas a operação de negação de matemática.</span><span class="sxs-lookup"><span data-stu-id="c1932-451">In this example, only the mathematical negation operation is supported.</span></span> <span data-ttu-id="c1932-452">Se você tentar gravar uma instrução como `negativeNumber = +number`, ocorre uma exceção de tempo de execução.</span><span class="sxs-lookup"><span data-stu-id="c1932-452">If you try to write a statement like `negativeNumber = +number`, a run-time exception occurs.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#7)]
 [!code-vb[System.Dynamic.DynamicObject#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>