<Type Name="ServiceXNameTypeConverter" FullName="System.ServiceModel.XamlIntegration.ServiceXNameTypeConverter">
  <TypeSignature Language="C#" Value="public class ServiceXNameTypeConverter : System.ComponentModel.TypeConverter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceXNameTypeConverter extends System.ComponentModel.TypeConverter" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.XamlIntegration.ServiceXNameTypeConverter" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceXNameTypeConverter&#xA;Inherits TypeConverter" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceXNameTypeConverter : System::ComponentModel::TypeConverter" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.TypeConverter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="4bf9f-101">Uma implementação específica a um WCF de um conversor de tipo <see cref="T:System.Xml.Linq.XName" /> que não requer que instâncias de <see cref="T:System.Xml.Linq.XName" /> especifiquem um namespace.</span><span class="sxs-lookup"><span data-stu-id="4bf9f-101">A WCF-specific implementation of a <see cref="T:System.Xml.Linq.XName" /> type converter that does not require <see cref="T:System.Xml.Linq.XName" /> instances to specify a namespace.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceXNameTypeConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.XamlIntegration.ServiceXNameTypeConverter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceXNameTypeConverter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4bf9f-102">Inicializa uma nova instância da classe <see cref="T:System.ServiceModel.XamlIntegration.ServiceXNameTypeConverter" />.</span><span class="sxs-lookup"><span data-stu-id="4bf9f-102">Initializes a new instance of the <see cref="T:System.ServiceModel.XamlIntegration.ServiceXNameTypeConverter" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertFrom">
      <MemberSignature Language="C#" Value="public override bool CanConvertFrom (System.ComponentModel.ITypeDescriptorContext context, Type sourceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvertFrom(class System.ComponentModel.ITypeDescriptorContext context, class System.Type sourceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.XamlIntegration.ServiceXNameTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CanConvertFrom (context As ITypeDescriptorContext, sourceType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool CanConvertFrom(System::ComponentModel::ITypeDescriptorContext ^ context, Type ^ sourceType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="sourceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context"><span data-ttu-id="4bf9f-103">O contexto do descritor de tipo</span><span class="sxs-lookup"><span data-stu-id="4bf9f-103">The type descriptor context</span></span></param>
        <param name="sourceType"><span data-ttu-id="4bf9f-104">O tipo do qual converter.</span><span class="sxs-lookup"><span data-stu-id="4bf9f-104">The type to convert from.</span></span></param>
        <summary><span data-ttu-id="4bf9f-105">Obtém um valor que indica se este conversor pode converter um objeto de um tipo em um <see cref="T:System.Xml.Linq.XName" />.</span><span class="sxs-lookup"><span data-stu-id="4bf9f-105">Gets a value that indicates whether this converter can convert an object of one type to an <see cref="T:System.Xml.Linq.XName" />.</span></span></summary>
        <returns>
          <span data-ttu-id="4bf9f-106"><see langword="true" /> se o conversor puder realizar a conversão; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="4bf9f-106"><see langword="true" /> if the converter can perform the conversion; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertTo">
      <MemberSignature Language="C#" Value="public override bool CanConvertTo (System.ComponentModel.ITypeDescriptorContext context, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvertTo(class System.ComponentModel.ITypeDescriptorContext context, class System.Type destinationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.XamlIntegration.ServiceXNameTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CanConvertTo (context As ITypeDescriptorContext, destinationType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool CanConvertTo(System::ComponentModel::ITypeDescriptorContext ^ context, Type ^ destinationType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context"><span data-ttu-id="4bf9f-107">O contexto do descritor de tipo.</span><span class="sxs-lookup"><span data-stu-id="4bf9f-107">The type descriptor context.</span></span></param>
        <param name="destinationType"><span data-ttu-id="4bf9f-108">O tipo para o qual converter.</span><span class="sxs-lookup"><span data-stu-id="4bf9f-108">The type to convert to.</span></span></param>
        <summary><span data-ttu-id="4bf9f-109">Obtém um valor que indica se esse conversor pode converter uma instância de <see cref="T:System.Xml.Linq.XName" /> em um objeto do tipo especificado.</span><span class="sxs-lookup"><span data-stu-id="4bf9f-109">Gets a value that indicates whether this converter can convert an <see cref="T:System.Xml.Linq.XName" /> instance to an object of the specified type.</span></span></summary>
        <returns>
          <span data-ttu-id="4bf9f-110"><see langword="true" /> se o conversor puder realizar a conversão; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="4bf9f-110"><see langword="true" /> if the converter can perform the conversion; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertFrom">
      <MemberSignature Language="C#" Value="public override object ConvertFrom (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertFrom(class System.ComponentModel.ITypeDescriptorContext context, class System.Globalization.CultureInfo culture, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.XamlIntegration.ServiceXNameTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ConvertFrom (context As ITypeDescriptorContext, culture As CultureInfo, value As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ ConvertFrom(System::ComponentModel::ITypeDescriptorContext ^ context, System::Globalization::CultureInfo ^ culture, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="context"><span data-ttu-id="4bf9f-111">O contexto do descritor de tipo.</span><span class="sxs-lookup"><span data-stu-id="4bf9f-111">The type descriptor context.</span></span></param>
        <param name="culture"><span data-ttu-id="4bf9f-112">A cultura atual.</span><span class="sxs-lookup"><span data-stu-id="4bf9f-112">The current culture.</span></span></param>
        <param name="value"><span data-ttu-id="4bf9f-113">O objeto a ser convertido.</span><span class="sxs-lookup"><span data-stu-id="4bf9f-113">The object to convert.</span></span></param>
        <summary><span data-ttu-id="4bf9f-114">Converte o valor especificado em uma instância de <see cref="T:System.Xml.Linq.XName" />.</span><span class="sxs-lookup"><span data-stu-id="4bf9f-114">Converts the specified value to a <see cref="T:System.Xml.Linq.XName" /> instance.</span></span></summary>
        <returns><span data-ttu-id="4bf9f-115">O valor convertido.</span><span class="sxs-lookup"><span data-stu-id="4bf9f-115">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bf9f-116">Esse método não adicionará um namespace padrão se nenhuma for especificada no objeto que está sendo convertido.</span><span class="sxs-lookup"><span data-stu-id="4bf9f-116">This method will not add a default namespace if one is not specified in the object being converted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertTo">
      <MemberSignature Language="C#" Value="public override object ConvertTo (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertTo(class System.ComponentModel.ITypeDescriptorContext context, class System.Globalization.CultureInfo culture, object value, class System.Type destinationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.XamlIntegration.ServiceXNameTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ConvertTo (context As ITypeDescriptorContext, culture As CultureInfo, value As Object, destinationType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ ConvertTo(System::ComponentModel::ITypeDescriptorContext ^ context, System::Globalization::CultureInfo ^ culture, System::Object ^ value, Type ^ destinationType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context"><span data-ttu-id="4bf9f-117">O contexto do descritor de tipo.</span><span class="sxs-lookup"><span data-stu-id="4bf9f-117">The type descriptor context.</span></span></param>
        <param name="culture"><span data-ttu-id="4bf9f-118">A cultura atual.</span><span class="sxs-lookup"><span data-stu-id="4bf9f-118">The current culture.</span></span></param>
        <param name="value"><span data-ttu-id="4bf9f-119">O valor a ser convertido.</span><span class="sxs-lookup"><span data-stu-id="4bf9f-119">The value to convert.</span></span></param>
        <param name="destinationType"><span data-ttu-id="4bf9f-120">O tipo no qual converter o valor.</span><span class="sxs-lookup"><span data-stu-id="4bf9f-120">The type to convert the value to.</span></span></param>
        <summary><span data-ttu-id="4bf9f-121">Converte uma instância de <see cref="T:System.Xml.Linq.XName" /> em um objeto do tipo especificado.</span><span class="sxs-lookup"><span data-stu-id="4bf9f-121">Converts a <see cref="T:System.Xml.Linq.XName" /> instance to an object of the specified type.</span></span></summary>
        <returns><span data-ttu-id="4bf9f-122">O valor convertido.</span><span class="sxs-lookup"><span data-stu-id="4bf9f-122">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bf9f-123">Esse método retorna um nome não qualificado de local não se foi fornecido nenhum namespace no <xref:System.Xml.Linq.XName> que está sendo convertido.</span><span class="sxs-lookup"><span data-stu-id="4bf9f-123">This method returns an unqualified local name if no namespace has been provided in the <xref:System.Xml.Linq.XName> being converted.</span></span> <span data-ttu-id="4bf9f-124">Um nome não qualificado de local é um <xref:System.Xml.Linq.XName> que não contém nenhum namespace.</span><span class="sxs-lookup"><span data-stu-id="4bf9f-124">An unqualified local name is a <xref:System.Xml.Linq.XName> that contains no namespace.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>