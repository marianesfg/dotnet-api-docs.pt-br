<Type Name="IMemoryOwner&lt;T&gt;" FullName="System.Buffers.IMemoryOwner&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c65114bc31d595b318fd8b25e11e92583234d593" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58725626" /></Metadata><TypeSignature Language="C#" Value="public interface IMemoryOwner&lt;T&gt; : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IMemoryOwner`1&lt;T&gt; implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Buffers.IMemoryOwner`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IMemoryOwner(Of T)&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IMemoryOwner : IDisposable" />
  <TypeSignature Language="F#" Value="type IMemoryOwner&lt;'T&gt; = interface&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T"><span data-ttu-id="9279a-101">O tipo dos elementos para armazenar na memória.</span><span class="sxs-lookup"><span data-stu-id="9279a-101">The type of elements to store in memory.</span></span></typeparam>
    <summary><span data-ttu-id="9279a-102">Identifica o proprietário de um bloco de memória que é responsável pelo descarte adequado da memória subjacente.</span><span class="sxs-lookup"><span data-stu-id="9279a-102">Identifies the owner of a block of memory who is responsible for disposing of the underlying memory appropriately.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

<span data-ttu-id="9279a-103">O `IMemoryOwner<T>` interface é usada para definir o proprietário responsável pelo gerenciamento de tempo de vida de um <xref:System.Memory%601> buffer.</span><span class="sxs-lookup"><span data-stu-id="9279a-103">The `IMemoryOwner<T>` interface is used to define the owner responsible for the lifetime management of a <xref:System.Memory%601> buffer.</span></span> <span data-ttu-id="9279a-104">Uma instância das `IMemoryOwner<T>` retornado pela interface de <xref:System.Buffers.MemoryPool%601.Rent%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="9279a-104">An instance of the `IMemoryOwner<T>` interface is returned by the <xref:System.Buffers.MemoryPool%601.Rent%2A?displayProperty=nameWithType> method.</span></span> 

<span data-ttu-id="9279a-105">Enquanto um buffer pode ter vários consumidores, ele só pode ter um único proprietário em um determinado momento.</span><span class="sxs-lookup"><span data-stu-id="9279a-105">While a buffer can have multiple consumers, it can only have a single owner at any given time.</span></span> <span data-ttu-id="9279a-106">O proprietário pode:</span><span class="sxs-lookup"><span data-stu-id="9279a-106">The owner can:</span></span>

- <span data-ttu-id="9279a-107">Crie o buffer diretamente ou chamando um método de fábrica.</span><span class="sxs-lookup"><span data-stu-id="9279a-107">Create the buffer either directly or by calling a factory method.</span></span>

- <span data-ttu-id="9279a-108">Transferir a propriedade para outro consumidor.</span><span class="sxs-lookup"><span data-stu-id="9279a-108">Transfer ownership to another consumer.</span></span> <span data-ttu-id="9279a-109">Nesse caso, o proprietário anterior não deve mais usar o buffer.</span><span class="sxs-lookup"><span data-stu-id="9279a-109">In this case, the previous owner should no longer use the buffer.</span></span>

- <span data-ttu-id="9279a-110">Destrua o buffer quando ele não estiver mais em uso.</span><span class="sxs-lookup"><span data-stu-id="9279a-110">Destroy the buffer when it is no longer in use.</span></span>

<span data-ttu-id="9279a-111">Porque o `IMemoryOwner<T>` objeto implementa a <xref:System.IDisposable> interface, você deve chamar seu <xref:System.IDisposable.Dispose%2A> método somente depois que o buffer de memória não é mais necessário e tenham destruídos-lo.</span><span class="sxs-lookup"><span data-stu-id="9279a-111">Because the `IMemoryOwner<T>` object implements the <xref:System.IDisposable> interface, you should call its <xref:System.IDisposable.Dispose%2A> method only after the memory buffer is no longer needed and you have destroyed it.</span></span> <span data-ttu-id="9279a-112">Você deve *não* descarto o `IMemoryOwner<T>` objeto enquanto uma referência à sua memória está disponível.</span><span class="sxs-lookup"><span data-stu-id="9279a-112">You should *not* dispose of the `IMemoryOwner<T>` object while a reference to its memory is available.</span></span> <span data-ttu-id="9279a-113">Isso significa que o tipo no qual `IMemoryOwner<T>` é declarado não deve ter um <xref:System.Object.Finalize%2A> método.</span><span class="sxs-lookup"><span data-stu-id="9279a-113">This means that the type in which `IMemoryOwner<T>` is declared should not have a <xref:System.Object.Finalize%2A> method.</span></span>

   ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Memory">
      <MemberSignature Language="C#" Value="public Memory&lt;T&gt; Memory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Memory`1&lt;!T&gt; Memory" />
      <MemberSignature Language="DocId" Value="P:System.Buffers.IMemoryOwner`1.Memory" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Memory As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Memory&lt;T&gt; Memory { Memory&lt;T&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.Memory : Memory&lt;'T&gt;" Usage="System.Buffers.IMemoryOwner&lt;'T&gt;.Memory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9279a-114">Obtém a memória que pertence a esse proprietário.</span><span class="sxs-lookup"><span data-stu-id="9279a-114">Gets the memory belonging to this owner.</span></span></summary>
        <value><span data-ttu-id="9279a-115">A memória que pertencem a esse proprietário.</span><span class="sxs-lookup"><span data-stu-id="9279a-115">The memory belonging to this owner.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>