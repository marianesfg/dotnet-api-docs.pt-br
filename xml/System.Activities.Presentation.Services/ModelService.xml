<Type Name="ModelService" FullName="System.Activities.Presentation.Services.ModelService">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8fc7ca25f653c91b9b06dd48c70a713ee9660274" /><Meta Name="ms.sourcegitcommit" Value="9802d4c6745a8ae514b26f144fb3969265b224ba" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="12/22/2018" /><Meta Name="ms.locfileid" Value="53750290" /></Metadata><TypeSignature Language="C#" Value="public abstract class ModelService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ModelService extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Activities.Presentation.Services.ModelService" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ModelService" />
  <TypeSignature Language="C++ CLI" Value="public ref class ModelService abstract" />
  <TypeSignature Language="F#" Value="type ModelService = class" />
  <AssemblyInfo>
    <AssemblyName>System.Activities.Presentation</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="b7f62-101">Essa classe é o ponto de entrada principal que o designer usa para interagir com o modelo.</span><span class="sxs-lookup"><span data-stu-id="b7f62-101">This class is the main entry point that the designer uses to interact with the model.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7f62-102">O serviço tem uma divisão entre os métodos públicos e protegidos que você deve implementar quando você cria uma classe derivada.</span><span class="sxs-lookup"><span data-stu-id="b7f62-102">The service has a split between public and protected methods that you must implement when you create a derived class.</span></span> <span data-ttu-id="b7f62-103">Os métodos públicos são que pode ser chamados por qualquer pessoa.</span><span class="sxs-lookup"><span data-stu-id="b7f62-103">The public methods are callable by anyone.</span></span> <span data-ttu-id="b7f62-104">Os métodos protegidos são invocados pelo modelo.</span><span class="sxs-lookup"><span data-stu-id="b7f62-104">The protected methods are invoked by the model.</span></span>  
  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ModelService ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Services.ModelService.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ModelService();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b7f62-105">Cria um novo <see cref="T:System.Activities.Presentation.Services.ModelService" />.</span><span class="sxs-lookup"><span data-stu-id="b7f62-105">Creates a new <see cref="T:System.Activities.Presentation.Services.ModelService" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateItem">
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b7f62-106">Cria um <see cref="T:System.Activities.Presentation.Model.ModelItem" /> para um determinado tipo.</span><span class="sxs-lookup"><span data-stu-id="b7f62-106">Creates a <see cref="T:System.Activities.Presentation.Model.ModelItem" /> for a given type.</span></span> <span data-ttu-id="b7f62-107">Este método é chamado pela <see cref="T:System.Activities.Presentation.Model.ModelFactory" /> quando o usuário deseja criar um novo item.</span><span class="sxs-lookup"><span data-stu-id="b7f62-107">This method is called by <see cref="T:System.Activities.Presentation.Model.ModelFactory" /> when the user wants to create a new item.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateItem">
      <MemberSignature Language="C#" Value="protected abstract System.Activities.Presentation.Model.ModelItem CreateItem (object item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Activities.Presentation.Model.ModelItem CreateItem(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Services.ModelService.CreateItem(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function CreateItem (item As Object) As ModelItem" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Activities::Presentation::Model::ModelItem ^ CreateItem(System::Object ^ item);" />
      <MemberSignature Language="F#" Value="abstract member CreateItem : obj -&gt; System.Activities.Presentation.Model.ModelItem" Usage="modelService.CreateItem item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Presentation.Model.ModelItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="b7f62-108">O item a ser clonado e encapsulado.</span><span class="sxs-lookup"><span data-stu-id="b7f62-108">The item to clone and wrap.</span></span></param>
        <summary><span data-ttu-id="b7f62-109">Obtém uma instância existente e cria um item de modelo que é um clone profundo da instância.</span><span class="sxs-lookup"><span data-stu-id="b7f62-109">Takes an existing instance and creates a model item that is a deep clone of the instance.</span></span></summary>
        <returns><span data-ttu-id="b7f62-110">O <see cref="T:System.Activities.Presentation.Model.ModelItem" /> recém-criado que é um clone do item existente.</span><span class="sxs-lookup"><span data-stu-id="b7f62-110">The newly created <see cref="T:System.Activities.Presentation.Model.ModelItem" /> that is a clone of the existing item.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateItem">
      <MemberSignature Language="C#" Value="protected abstract System.Activities.Presentation.Model.ModelItem CreateItem (Type itemType, System.Activities.Presentation.Model.CreateOptions options, params object[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Activities.Presentation.Model.ModelItem CreateItem(class System.Type itemType, valuetype System.Activities.Presentation.Model.CreateOptions options, object[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Services.ModelService.CreateItem(System.Type,System.Activities.Presentation.Model.CreateOptions,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function CreateItem (itemType As Type, options As CreateOptions, ParamArray arguments As Object()) As ModelItem" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Activities::Presentation::Model::ModelItem ^ CreateItem(Type ^ itemType, System::Activities::Presentation::Model::CreateOptions options, ... cli::array &lt;System::Object ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="abstract member CreateItem : Type * System.Activities.Presentation.Model.CreateOptions * obj[] -&gt; System.Activities.Presentation.Model.ModelItem" Usage="modelService.CreateItem (itemType, options, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Presentation.Model.ModelItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemType" Type="System.Type" />
        <Parameter Name="options" Type="System.Activities.Presentation.Model.CreateOptions" />
        <Parameter Name="arguments" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="itemType"><span data-ttu-id="b7f62-111">O tipo de item a ser criado.</span><span class="sxs-lookup"><span data-stu-id="b7f62-111">The type of item to create.</span></span></param>
        <param name="options"><span data-ttu-id="b7f62-112">Opções de criação.</span><span class="sxs-lookup"><span data-stu-id="b7f62-112">Creation options.</span></span> <span data-ttu-id="b7f62-113">Você pode especificar se deseja inicializar valores padrão para um item.</span><span class="sxs-lookup"><span data-stu-id="b7f62-113">You can specify whether you would like to initialize default values for an item.</span></span></param>
        <param name="arguments"><span data-ttu-id="b7f62-114">Uma matriz de argumentos para o construtor do item.</span><span class="sxs-lookup"><span data-stu-id="b7f62-114">An array of arguments to the constructor of the item.</span></span></param>
        <summary><span data-ttu-id="b7f62-115">Cria um <see cref="T:System.Activities.Presentation.Model.ModelItem" /> para um determinado tipo.</span><span class="sxs-lookup"><span data-stu-id="b7f62-115">Creates a <see cref="T:System.Activities.Presentation.Model.ModelItem" /> for a given type.</span></span> <span data-ttu-id="b7f62-116">Este método é chamado pela <see cref="T:System.Activities.Presentation.Model.ModelFactory" /> quando o usuário deseja criar um novo item.</span><span class="sxs-lookup"><span data-stu-id="b7f62-116">This method is called by <see cref="T:System.Activities.Presentation.Model.ModelFactory" /> when the user wants to create a new item.</span></span></summary>
        <returns><span data-ttu-id="b7f62-117">O <see cref="T:System.Activities.Presentation.Model.ModelItem" /> recém-criado.</span><span class="sxs-lookup"><span data-stu-id="b7f62-117">The newly created <see cref="T:System.Activities.Presentation.Model.ModelItem" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateStaticMemberItem">
      <MemberSignature Language="C#" Value="protected abstract System.Activities.Presentation.Model.ModelItem CreateStaticMemberItem (Type type, string memberName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Activities.Presentation.Model.ModelItem CreateStaticMemberItem(class System.Type type, string memberName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Services.ModelService.CreateStaticMemberItem(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Activities::Presentation::Model::ModelItem ^ CreateStaticMemberItem(Type ^ type, System::String ^ memberName);" />
      <MemberSignature Language="F#" Value="abstract member CreateStaticMemberItem : Type * string -&gt; System.Activities.Presentation.Model.ModelItem" Usage="modelService.CreateStaticMemberItem (type, memberName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Presentation.Model.ModelItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="memberName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="b7f62-118">O tipo que contém o membro estático que está sendo referenciado.</span><span class="sxs-lookup"><span data-stu-id="b7f62-118">The type that contains the static member being referenced.</span></span></param>
        <param name="memberName"><span data-ttu-id="b7f62-119">O nome do membro estático que está sendo referenciado.</span><span class="sxs-lookup"><span data-stu-id="b7f62-119">The name of the static member being referenced.</span></span></param>
        <summary><span data-ttu-id="b7f62-120">Cria um novo item de modelo que representa o valor de um membro estático da classe fornecida.</span><span class="sxs-lookup"><span data-stu-id="b7f62-120">Creates a new model item that represents the value of a static member of the given class.</span></span></summary>
        <returns><span data-ttu-id="b7f62-121">Retorna <see cref="T:System.Activities.Presentation.Model.ModelItem" />.</span><span class="sxs-lookup"><span data-stu-id="b7f62-121">Returns <see cref="T:System.Activities.Presentation.Model.ModelItem" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7f62-122">Por exemplo, para adicionar uma referência a `Brushes.Red` no modelo, chamar esse método com `typeof(Brushes)` e a cadeia de caracteres "Vermelho" como parâmetros.</span><span class="sxs-lookup"><span data-stu-id="b7f62-122">For example, to add a reference to `Brushes.Red` to the model, call this method with `typeof(Brushes)` and the string "Red" as the parameters.</span></span> <span data-ttu-id="b7f62-123">Isso será serializado em XAML como `{x:Static Brushes.Red}`.</span><span class="sxs-lookup"><span data-stu-id="b7f62-123">This will be serialized into XAML as `{x:Static Brushes.Red}`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Find">
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b7f62-124">Localiza os itens de modelo correspondentes dado um ponto inicial para pesquisar.</span><span class="sxs-lookup"><span data-stu-id="b7f62-124">Finds matching model items given a starting point from which to look.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7f62-125">Todas as movimentações são recursivos.</span><span class="sxs-lookup"><span data-stu-id="b7f62-125">All walks are recursive.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IEnumerable&lt;System.Activities.Presentation.Model.ModelItem&gt; Find (System.Activities.Presentation.Model.ModelItem startingItem, Predicate&lt;Type&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.Activities.Presentation.Model.ModelItem&gt; Find(class System.Activities.Presentation.Model.ModelItem startingItem, class System.Predicate`1&lt;class System.Type&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Services.ModelService.Find(System.Activities.Presentation.Model.ModelItem,System.Predicate{System.Type})" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Find (startingItem As ModelItem, match As Predicate(Of Type)) As IEnumerable(Of ModelItem)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Collections::Generic::IEnumerable&lt;System::Activities::Presentation::Model::ModelItem ^&gt; ^ Find(System::Activities::Presentation::Model::ModelItem ^ startingItem, Predicate&lt;Type ^&gt; ^ match);" />
      <MemberSignature Language="F#" Value="abstract member Find : System.Activities.Presentation.Model.ModelItem * Predicate&lt;Type&gt; -&gt; seq&lt;System.Activities.Presentation.Model.ModelItem&gt;" Usage="modelService.Find (startingItem, match)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Activities.Presentation.Model.ModelItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startingItem" Type="System.Activities.Presentation.Model.ModelItem" />
        <Parameter Name="match" Type="System.Predicate&lt;System.Type&gt;" />
      </Parameters>
      <Docs>
        <param name="startingItem"><span data-ttu-id="b7f62-126">O <see cref="T:System.Activities.Presentation.Model.ModelItem" /> do qual a pesquisa deve ser iniciada.</span><span class="sxs-lookup"><span data-stu-id="b7f62-126">The <see cref="T:System.Activities.Presentation.Model.ModelItem" /> from which to start the search.</span></span> <span data-ttu-id="b7f62-127">Os itens acima deste item serão ignorados.</span><span class="sxs-lookup"><span data-stu-id="b7f62-127">Items above this item will be ignored.</span></span> <span data-ttu-id="b7f62-128">Este item e qualquer item abaixo na hierarquia serão incluídos na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="b7f62-128">This item, and any item below it in the hierarchy, will be included in the search.</span></span> <span data-ttu-id="b7f62-129">Se esse valor for <see langword="null" />, <see cref="P:System.Activities.Presentation.Services.ModelService.Root" /> será usado.</span><span class="sxs-lookup"><span data-stu-id="b7f62-129">If this value is <see langword="null" />, <see cref="P:System.Activities.Presentation.Services.ModelService.Root" /> is used instead.</span></span></param>
        <param name="match"><span data-ttu-id="b7f62-130">Um predicado que permite usar uma correspondência de tipo mais complexo.</span><span class="sxs-lookup"><span data-stu-id="b7f62-130">A predicate that allows more complex type matching to be used.</span></span> <span data-ttu-id="b7f62-131">Esse método vai enumerar todos os itens dentro do escopo pai fornecido que correspondam ao predicado.</span><span class="sxs-lookup"><span data-stu-id="b7f62-131">This method will enumerate all items within the given parent scope that match the predicate.</span></span></param>
        <summary><span data-ttu-id="b7f62-132">Localiza os itens de modelo correspondentes dado um ponto inicial para pesquisar.</span><span class="sxs-lookup"><span data-stu-id="b7f62-132">Finds matching model items given a starting point from which to look.</span></span></summary>
        <returns><span data-ttu-id="b7f62-133">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> que contém todos os itens de modelo que correspondem à consulta.</span><span class="sxs-lookup"><span data-stu-id="b7f62-133">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains all model items that match the query.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7f62-134">Todas as movimentações são recursivos.</span><span class="sxs-lookup"><span data-stu-id="b7f62-134">All walks are recursive.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b7f62-135"><paramref name="match" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b7f62-135"><paramref name="match" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IEnumerable&lt;System.Activities.Presentation.Model.ModelItem&gt; Find (System.Activities.Presentation.Model.ModelItem startingItem, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.Activities.Presentation.Model.ModelItem&gt; Find(class System.Activities.Presentation.Model.ModelItem startingItem, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Services.ModelService.Find(System.Activities.Presentation.Model.ModelItem,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Collections::Generic::IEnumerable&lt;System::Activities::Presentation::Model::ModelItem ^&gt; ^ Find(System::Activities::Presentation::Model::ModelItem ^ startingItem, Type ^ type);" />
      <MemberSignature Language="F#" Value="abstract member Find : System.Activities.Presentation.Model.ModelItem * Type -&gt; seq&lt;System.Activities.Presentation.Model.ModelItem&gt;" Usage="modelService.Find (startingItem, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Activities.Presentation.Model.ModelItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startingItem" Type="System.Activities.Presentation.Model.ModelItem" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="startingItem"><span data-ttu-id="b7f62-136">O <see cref="T:System.Activities.Presentation.Model.ModelItem" /> do qual a pesquisa deve ser iniciada.</span><span class="sxs-lookup"><span data-stu-id="b7f62-136">The <see cref="T:System.Activities.Presentation.Model.ModelItem" /> from which to start the search.</span></span> <span data-ttu-id="b7f62-137">Os itens acima deste item serão ignorados.</span><span class="sxs-lookup"><span data-stu-id="b7f62-137">Items above this item will be ignored.</span></span> <span data-ttu-id="b7f62-138">Este item e qualquer item abaixo na hierarquia serão incluídos na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="b7f62-138">This item, and any item below it in the hierarchy, will be included in the search.</span></span> <span data-ttu-id="b7f62-139">Se esse valor for <see langword="null" />, <see cref="P:System.Activities.Presentation.Services.ModelService.Root" /> será usado.</span><span class="sxs-lookup"><span data-stu-id="b7f62-139">If this value is <see langword="null" />, <see cref="P:System.Activities.Presentation.Services.ModelService.Root" /> is used instead.</span></span></param>
        <param name="type"><span data-ttu-id="b7f62-140">O <see cref="T:System.Type" /> do objeto a ser encontrado.</span><span class="sxs-lookup"><span data-stu-id="b7f62-140">The <see cref="T:System.Type" /> of the object to find.</span></span> <span data-ttu-id="b7f62-141">Esse método vai enumerar todos os itens dentro do escopo pai fornecido que sejam do tipo solicitado.</span><span class="sxs-lookup"><span data-stu-id="b7f62-141">This method will enumerate all items within the given parent scope that are of the requested type.</span></span></param>
        <summary><span data-ttu-id="b7f62-142">Localiza os itens de modelo correspondentes dado um ponto inicial para pesquisar.</span><span class="sxs-lookup"><span data-stu-id="b7f62-142">Finds matching model items given a starting point from which to look.</span></span></summary>
        <returns><span data-ttu-id="b7f62-143">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> que contém todos os itens de modelo que correspondem à consulta.</span><span class="sxs-lookup"><span data-stu-id="b7f62-143">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains all model items that match the query.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7f62-144">Todas as movimentações são recursivos.</span><span class="sxs-lookup"><span data-stu-id="b7f62-144">All walks are recursive.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b7f62-145"><paramref name="type" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b7f62-145"><paramref name="type" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FromName">
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b7f62-146">Localiza o <see cref="T:System.Activities.Presentation.Model.ModelItem" /> no escopo fornecido com o nome fornecido.</span><span class="sxs-lookup"><span data-stu-id="b7f62-146">Locates the <see cref="T:System.Activities.Presentation.Model.ModelItem" /> in the given scope with the given name.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7f62-147">Retorna `null` se o item de modelo não pôde ser localizado.</span><span class="sxs-lookup"><span data-stu-id="b7f62-147">Returns `null` if the model item could not be located.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="FromName">
      <MemberSignature Language="C#" Value="public System.Activities.Presentation.Model.ModelItem FromName (System.Activities.Presentation.Model.ModelItem scope, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Activities.Presentation.Model.ModelItem FromName(class System.Activities.Presentation.Model.ModelItem scope, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Services.ModelService.FromName(System.Activities.Presentation.Model.ModelItem,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromName (scope As ModelItem, name As String) As ModelItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Activities::Presentation::Model::ModelItem ^ FromName(System::Activities::Presentation::Model::ModelItem ^ scope, System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.FromName : System.Activities.Presentation.Model.ModelItem * string -&gt; System.Activities.Presentation.Model.ModelItem" Usage="modelService.FromName (scope, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Activities.Presentation.Model.ModelItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="System.Activities.Presentation.Model.ModelItem" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="scope"><span data-ttu-id="b7f62-148">Um escopo opcional a ser fornecido.</span><span class="sxs-lookup"><span data-stu-id="b7f62-148">An optional scope to provide.</span></span> <span data-ttu-id="b7f62-149">Se o escopo não for fornecido, <see cref="P:System.Activities.Presentation.Services.ModelService.Root" /> será usado como um escopo.</span><span class="sxs-lookup"><span data-stu-id="b7f62-149">If the scope is not provided, <see cref="P:System.Activities.Presentation.Services.ModelService.Root" /> will be used as a scope.</span></span> <span data-ttu-id="b7f62-150">Se o escopo for fornecido, o <see cref="T:System.Windows.Markup.INameScope" /> mais próximo na hierarquia será usado para localizar o item.</span><span class="sxs-lookup"><span data-stu-id="b7f62-150">If the scope is provided, the nearest <see cref="T:System.Windows.Markup.INameScope" /> in the hierarchy will be used to locate the item.</span></span></param>
        <param name="name"><span data-ttu-id="b7f62-151">O nome a ser localizado.</span><span class="sxs-lookup"><span data-stu-id="b7f62-151">The name to locate.</span></span></param>
        <summary><span data-ttu-id="b7f62-152">Localiza o <see cref="T:System.Activities.Presentation.Model.ModelItem" /> no escopo fornecido com o nome fornecido.</span><span class="sxs-lookup"><span data-stu-id="b7f62-152">Locates the <see cref="T:System.Activities.Presentation.Model.ModelItem" /> in the given scope with the given name.</span></span></summary>
        <returns><span data-ttu-id="b7f62-153">Um <see cref="T:System.Activities.Presentation.Model.ModelItem" /> cujo nome corresponde a <paramref name="name" /> ou <see langword="null" /> se nenhuma correspondência for encontrada.</span><span class="sxs-lookup"><span data-stu-id="b7f62-153">A <see cref="T:System.Activities.Presentation.Model.ModelItem" /> whose name matches <paramref name="name" />, or <see langword="null" /> if no match was found.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b7f62-154"><paramref name="name" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b7f62-154"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="FromName">
      <MemberSignature Language="C#" Value="public abstract System.Activities.Presentation.Model.ModelItem FromName (System.Activities.Presentation.Model.ModelItem scope, string name, StringComparison comparison);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Activities.Presentation.Model.ModelItem FromName(class System.Activities.Presentation.Model.ModelItem scope, string name, valuetype System.StringComparison comparison) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Services.ModelService.FromName(System.Activities.Presentation.Model.ModelItem,System.String,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function FromName (scope As ModelItem, name As String, comparison As StringComparison) As ModelItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Activities::Presentation::Model::ModelItem ^ FromName(System::Activities::Presentation::Model::ModelItem ^ scope, System::String ^ name, StringComparison comparison);" />
      <MemberSignature Language="F#" Value="abstract member FromName : System.Activities.Presentation.Model.ModelItem * string * StringComparison -&gt; System.Activities.Presentation.Model.ModelItem" Usage="modelService.FromName (scope, name, comparison)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Presentation.Model.ModelItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="System.Activities.Presentation.Model.ModelItem" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="comparison" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="scope"><span data-ttu-id="b7f62-155">Um escopo opcional a ser fornecido.</span><span class="sxs-lookup"><span data-stu-id="b7f62-155">An optional scope to provide.</span></span> <span data-ttu-id="b7f62-156">Se o escopo não for fornecido, <see cref="P:System.Activities.Presentation.Services.ModelService.Root" /> será usado como um escopo.</span><span class="sxs-lookup"><span data-stu-id="b7f62-156">If the scope is not provided, <see cref="P:System.Activities.Presentation.Services.ModelService.Root" /> will be used as a scope.</span></span> <span data-ttu-id="b7f62-157">Se o escopo for fornecido, o <see cref="T:System.Windows.Markup.INameScope" /> mais próximo na hierarquia será usado para localizar o item.</span><span class="sxs-lookup"><span data-stu-id="b7f62-157">If the scope is provided, the nearest <see cref="T:System.Windows.Markup.INameScope" /> in the hierarchy will be used to locate the item.</span></span></param>
        <param name="name"><span data-ttu-id="b7f62-158">O nome a ser localizado.</span><span class="sxs-lookup"><span data-stu-id="b7f62-158">The name to locate.</span></span></param>
        <param name="comparison"><span data-ttu-id="b7f62-159">Determina como o nome deve ser comparado.</span><span class="sxs-lookup"><span data-stu-id="b7f62-159">Determines how the name should be compared.</span></span> <span data-ttu-id="b7f62-160">O padrão é comparar com ordinal.</span><span class="sxs-lookup"><span data-stu-id="b7f62-160">The default is to compare against ordinal.</span></span></param>
        <summary><span data-ttu-id="b7f62-161">Localiza o <see cref="T:System.Activities.Presentation.Model.ModelItem" /> no escopo fornecido com o nome fornecido.</span><span class="sxs-lookup"><span data-stu-id="b7f62-161">Locates the <see cref="T:System.Activities.Presentation.Model.ModelItem" /> in the given scope with the given name.</span></span></summary>
        <returns><span data-ttu-id="b7f62-162">Um <see cref="T:System.Activities.Presentation.Model.ModelItem" /> cujo nome corresponde a <paramref name="name" /> ou <see langword="null" /> se nenhuma correspondência for encontrada.</span><span class="sxs-lookup"><span data-stu-id="b7f62-162">A <see cref="T:System.Activities.Presentation.Model.ModelItem" /> whose name matches <paramref name="name" />, or <see langword="null" /> if no match was found.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b7f62-163"><paramref name="name" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b7f62-163"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ModelChanged">
      <MemberSignature Language="C#" Value="public abstract event EventHandler&lt;System.Activities.Presentation.Services.ModelChangedEventArgs&gt; ModelChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Activities.Presentation.Services.ModelChangedEventArgs&gt; ModelChanged" />
      <MemberSignature Language="DocId" Value="E:System.Activities.Presentation.Services.ModelService.ModelChanged" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Event ModelChanged As EventHandler(Of ModelChangedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract event EventHandler&lt;System::Activities::Presentation::Services::ModelChangedEventArgs ^&gt; ^ ModelChanged;" />
      <MemberSignature Language="F#" Value="member this.ModelChanged : EventHandler&lt;System.Activities.Presentation.Services.ModelChangedEventArgs&gt; " Usage="member this.ModelChanged : System.EventHandler&lt;System.Activities.Presentation.Services.ModelChangedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Activities.Presentation.Services.ModelChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7f62-164">Esse evento é gerado quando algo no modelo é alterado.</span><span class="sxs-lookup"><span data-stu-id="b7f62-164">This event is raised when something in the model has changed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7f62-165">Os argumentos do evento de eventos podem ser usados para localizar o que mudou.</span><span class="sxs-lookup"><span data-stu-id="b7f62-165">The event arguments in the event can be used to find what has changed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Root">
      <MemberSignature Language="C#" Value="public abstract System.Activities.Presentation.Model.ModelItem Root { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Activities.Presentation.Model.ModelItem Root" />
      <MemberSignature Language="DocId" Value="P:System.Activities.Presentation.Services.ModelService.Root" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Root As ModelItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Activities::Presentation::Model::ModelItem ^ Root { System::Activities::Presentation::Model::ModelItem ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Root : System.Activities.Presentation.Model.ModelItem" Usage="System.Activities.Presentation.Services.ModelService.Root" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Presentation.Model.ModelItem</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7f62-166">A raiz da hierarquia do objeto.</span><span class="sxs-lookup"><span data-stu-id="b7f62-166">The root of the object hierarchy.</span></span></summary>
        <value><span data-ttu-id="b7f62-167">A raiz da hierarquia de modelo como um <see cref="T:System.Activities.Presentation.Model.ModelItem" />.</span><span class="sxs-lookup"><span data-stu-id="b7f62-167">The root of the model hierarchy as a <see cref="T:System.Activities.Presentation.Model.ModelItem" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7f62-168">Para armazenamentos de lineares, a raiz é o primeiro objeto no repositório.</span><span class="sxs-lookup"><span data-stu-id="b7f62-168">For linear stores, the root is the first object in the store.</span></span> <span data-ttu-id="b7f62-169">Para os armazenamentos que representam uma árvore de objetos, isso retorna o nó superior da árvore.</span><span class="sxs-lookup"><span data-stu-id="b7f62-169">For stores that represent a tree of objects, this returns the topmost node of the tree.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>