<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ThreadExceptionEventArgs.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5a54cf75e4e0c0ef07c0b66ac63e218532b41785d.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a54cf75e4e0c0ef07c0b66ac63e218532b41785d</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.ThreadExceptionEventArgs">
          <source>Provides data for the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Application.ThreadException" /&gt;</ph> event.</source>
          <target state="translated">Fornece dados para o evento de <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Application.ThreadException" /&gt;</ph> .</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadExceptionEventArgs">
          <source>A <ph id="ph1">&lt;xref:System.Threading.ThreadExceptionEventArgs&gt;</ph> is created by a thread when an unhandled exception occurs.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.Threading.ThreadExceptionEventArgs&gt;</ph> é criado por um thread quando ocorre uma exceção sem tratamento.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadExceptionEventArgs">
          <source><ph id="ph1">&lt;xref:System.Threading.ThreadExceptionEventArgs&gt;</ph> contains the <ph id="ph2">&lt;xref:System.Exception&gt;</ph> that occurred.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ThreadExceptionEventArgs&gt;</ph> contém o <ph id="ph2">&lt;xref:System.Exception&gt;</ph> que ocorreu.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadExceptionEventArgs">
          <source>The following example allows you to raise a <ph id="ph1">&lt;xref:System.Windows.Forms.Application.ThreadException&gt;</ph> event by clicking <ph id="ph2">`button1`</ph> on a form.</source>
          <target state="translated">O exemplo a seguir permite que você aumente uma <ph id="ph1">&lt;xref:System.Windows.Forms.Application.ThreadException&gt;</ph> evento clicando <ph id="ph2">`button1`</ph> em um formulário.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadExceptionEventArgs">
          <source>The example creates two classes.</source>
          <target state="translated">O exemplo cria duas classes.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadExceptionEventArgs">
          <source>The <ph id="ph1">`ErrorHandler`</ph> class creates the form and the button that raises the event.</source>
          <target state="translated">O <ph id="ph1">`ErrorHandler`</ph> classe cria o formulário e o botão que gera o evento.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadExceptionEventArgs">
          <source>The <ph id="ph1">`CustomExceptionHandler`</ph> class provides the methods to handle the exception.</source>
          <target state="translated">O <ph id="ph1">`CustomExceptionHandler`</ph> classe fornece métodos para lidar com a exceção.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadExceptionEventArgs">
          <source>In <ph id="ph1">`Main`</ph> in the <ph id="ph2">`ErrorHandler`</ph> class, the code creates a new instance of the exception handling class, that is, an instance of the <ph id="ph3">`CustomExceptionHandler`</ph>.</source>
          <target state="translated">Em <ph id="ph1">`Main`</ph> no <ph id="ph2">`ErrorHandler`</ph> classe, o código cria uma nova instância da classe, isto é, de manipulação de exceções uma instância do <ph id="ph3">`CustomExceptionHandler`</ph>.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadExceptionEventArgs">
          <source>Then the instance is added to the event, and the application is run.</source>
          <target state="translated">Em seguida, a instância é adicionada ao evento e o aplicativo é executado.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadExceptionEventArgs">
          <source>In the <ph id="ph1">`OnThreadException`</ph> method in the <ph id="ph2">`CustomExceptionHandler`</ph> class, the example uses a <ph id="ph3">`try...catch...finally`</ph> statement to process the exception.</source>
          <target state="translated">No <ph id="ph1">`OnThreadException`</ph> método o <ph id="ph2">`CustomExceptionHandler`</ph> classe, o exemplo usa um <ph id="ph3">`try...catch...finally`</ph> instrução para processar a exceção.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadExceptionEventArgs">
          <source>The <ph id="ph1">`ShowThreadExceptionDialog`</ph> method creates the message to display, and displays it in a message box.</source>
          <target state="translated">O <ph id="ph1">`ShowThreadExceptionDialog`</ph> método cria a mensagem a ser exibida e o exibe em uma caixa de mensagem.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadExceptionEventArgs.#ctor(System.Exception)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> that occurred.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> que ocorreu.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadExceptionEventArgs.#ctor(System.Exception)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.ThreadExceptionEventArgs" /&gt;</ph> class.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Threading.ThreadExceptionEventArgs" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadExceptionEventArgs.#ctor(System.Exception)">
          <source>The following example allows you to raise a <ph id="ph1">&lt;xref:System.Windows.Forms.Application.ThreadException&gt;</ph> event by clicking <ph id="ph2">`button1`</ph> on a form.</source>
          <target state="translated">O exemplo a seguir permite que você aumente uma <ph id="ph1">&lt;xref:System.Windows.Forms.Application.ThreadException&gt;</ph> evento clicando <ph id="ph2">`button1`</ph> em um formulário.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadExceptionEventArgs.#ctor(System.Exception)">
          <source>The example creates two classes.</source>
          <target state="translated">O exemplo cria duas classes.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadExceptionEventArgs.#ctor(System.Exception)">
          <source>The <ph id="ph1">`ErrorHandler`</ph> class creates the form and the button that raises the event.</source>
          <target state="translated">O <ph id="ph1">`ErrorHandler`</ph> classe cria o formulário e o botão que gera o evento.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadExceptionEventArgs.#ctor(System.Exception)">
          <source>The <ph id="ph1">`CustomExceptionHandler`</ph> class provides the methods to handle the exception.</source>
          <target state="translated">O <ph id="ph1">`CustomExceptionHandler`</ph> classe fornece métodos para lidar com a exceção.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadExceptionEventArgs.#ctor(System.Exception)">
          <source>In <ph id="ph1">`Main`</ph> in the <ph id="ph2">`ErrorHandler`</ph> class, the code creates a new instance of the exception handling class, that is, an instance of the <ph id="ph3">`CustomExceptionHandler`</ph>.</source>
          <target state="translated">Em <ph id="ph1">`Main`</ph> no <ph id="ph2">`ErrorHandler`</ph> classe, o código cria uma nova instância da classe, isto é, de manipulação de exceções uma instância do <ph id="ph3">`CustomExceptionHandler`</ph>.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadExceptionEventArgs.#ctor(System.Exception)">
          <source>Then the instance is added to the event, and the application is run.</source>
          <target state="translated">Em seguida, a instância é adicionada ao evento e o aplicativo é executado.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadExceptionEventArgs.#ctor(System.Exception)">
          <source>In the <ph id="ph1">`OnThreadException`</ph> method in the <ph id="ph2">`CustomExceptionHandler`</ph> class, the example uses a <ph id="ph3">`try...catch...finally`</ph> statement to process the exception.</source>
          <target state="translated">No <ph id="ph1">`OnThreadException`</ph> método o <ph id="ph2">`CustomExceptionHandler`</ph> classe, o exemplo usa um <ph id="ph3">`try...catch...finally`</ph> instrução para processar a exceção.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadExceptionEventArgs.#ctor(System.Exception)">
          <source>The <ph id="ph1">`ShowThreadExceptionDialog`</ph> method creates the message to display, and displays it in a message box.</source>
          <target state="translated">O <ph id="ph1">`ShowThreadExceptionDialog`</ph> método cria a mensagem a ser exibida e o exibe em uma caixa de mensagem.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="P:System.Threading.ThreadExceptionEventArgs.Exception">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> that occurred.</source>
          <target state="translated">Obtém a <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> ocorrida.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ThreadExceptionEventArgs.Exception">
          <source>The <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> that occurred.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> que ocorreu.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ThreadExceptionEventArgs.Exception">
          <source>The following example allows you to raise a <ph id="ph1">&lt;xref:System.Windows.Forms.Application.ThreadException&gt;</ph> event by clicking <ph id="ph2">`button1`</ph> on a form.</source>
          <target state="translated">O exemplo a seguir permite que você aumente uma <ph id="ph1">&lt;xref:System.Windows.Forms.Application.ThreadException&gt;</ph> evento clicando <ph id="ph2">`button1`</ph> em um formulário.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ThreadExceptionEventArgs.Exception">
          <source>The example creates two classes.</source>
          <target state="translated">O exemplo cria duas classes.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ThreadExceptionEventArgs.Exception">
          <source>The <ph id="ph1">`ErrorHandler`</ph> class creates the form and the button that raises the event.</source>
          <target state="translated">O <ph id="ph1">`ErrorHandler`</ph> classe cria o formulário e o botão que gera o evento.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ThreadExceptionEventArgs.Exception">
          <source>The <ph id="ph1">`CustomExceptionHandler`</ph> class provides the methods to handle the exception.</source>
          <target state="translated">O <ph id="ph1">`CustomExceptionHandler`</ph> classe fornece métodos para lidar com a exceção.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ThreadExceptionEventArgs.Exception">
          <source>In <ph id="ph1">`Main`</ph> in the <ph id="ph2">`ErrorHandler`</ph> class, the code creates a new instance of the exception handling class, that is, an instance of the <ph id="ph3">`CustomExceptionHandler`</ph>.</source>
          <target state="translated">Em <ph id="ph1">`Main`</ph> no <ph id="ph2">`ErrorHandler`</ph> classe, o código cria uma nova instância da classe, isto é, de manipulação de exceções uma instância do <ph id="ph3">`CustomExceptionHandler`</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ThreadExceptionEventArgs.Exception">
          <source>Then the instance is added to the event, and the application is run.</source>
          <target state="translated">Em seguida, a instância é adicionada ao evento e o aplicativo é executado.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ThreadExceptionEventArgs.Exception">
          <source>In the <ph id="ph1">`OnThreadException`</ph> method in the <ph id="ph2">`CustomExceptionHandler`</ph> class, the example uses a <ph id="ph3">`try...catch...finally`</ph> statement to process the exception.</source>
          <target state="translated">No <ph id="ph1">`OnThreadException`</ph> método o <ph id="ph2">`CustomExceptionHandler`</ph> classe, o exemplo usa um <ph id="ph3">`try...catch...finally`</ph> instrução para processar a exceção.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ThreadExceptionEventArgs.Exception">
          <source>The <ph id="ph1">`ShowThreadExceptionDialog`</ph> method creates the message to display, and displays it in a message box.</source>
          <target state="translated">O <ph id="ph1">`ShowThreadExceptionDialog`</ph> método cria a mensagem a ser exibida e o exibe em uma caixa de mensagem.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>