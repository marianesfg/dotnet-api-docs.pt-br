<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="AsyncFlowControl.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5e6dae693cd1ac3ea4d8fb159e78d5e7190097d98.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e6dae693cd1ac3ea4d8fb159e78d5e7190097d98</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.AsyncFlowControl">
          <source>Provides the functionality to restore the migration, or flow, of the execution context between threads.</source>
          <target state="translated">Fornece a funcionalidade para restaurar a migração ou o fluxo do contexto de execução entre threads.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AsyncFlowControl">
          <source>An execution context contains all execution-related information for a logical thread.</source>
          <target state="translated">Um contexto de execução contém todas as informações relacionadas à execução de um segmento lógico.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AsyncFlowControl">
          <source>The flow of the execution context to other threads can be prevented by using the <ph id="ph1">&lt;xref:System.Threading.ExecutionContext.SuppressFlow%2A?displayProperty=nameWithType&gt;</ph> method, which returns an <ph id="ph2">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph> structure.</source>
          <target state="translated">O fluxo do contexto de execução a outros threads pode ser evitado por meio de <ph id="ph1">&lt;xref:System.Threading.ExecutionContext.SuppressFlow%2A?displayProperty=nameWithType&gt;</ph> método, que retorna um <ph id="ph2">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph> estrutura.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AsyncFlowControl">
          <source>The <ph id="ph1">&lt;xref:System.Threading.AsyncFlowControl.Undo%2A&gt;</ph> method of the returned <ph id="ph2">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph> structure can be used to undo the flow suppression.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Threading.AsyncFlowControl.Undo%2A&gt;</ph> método retornado <ph id="ph2">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph> estrutura pode ser usada para desfazer a supressão de fluxo.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AsyncFlowControl">
          <source>The <ph id="ph1">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph> structure must be used on the same thread on which it was created.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph> estrutura deve ser usada no mesmo thread em que ele foi criado.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.Threading.AsyncFlowControl.Dispose">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> class.</source>
          <target state="translated">Libera todos os recursos usados pela instância atual da classe <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AsyncFlowControl.Dispose">
          <source>Call <ph id="ph1">`Dispose`</ph> when you are finished using the <ph id="ph2">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph>.</source>
          <target state="translated">Chamar <ph id="ph1">`Dispose`</ph> quando tiver terminado de usar o <ph id="ph2">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AsyncFlowControl.Dispose">
          <source>The <ph id="ph1">`Dispose`</ph> method leaves the <ph id="ph2">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph> in an unusable state.</source>
          <target state="translated">O <ph id="ph1">`Dispose`</ph> método deixa o <ph id="ph2">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph> em um estado inutilizável.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AsyncFlowControl.Dispose">
          <source>After calling <ph id="ph1">`Dispose`</ph>, you must release all references to the <ph id="ph2">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph> so the garbage collector can reclaim the memory that the <ph id="ph3">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph> was occupying.</source>
          <target state="translated">Depois de chamar <ph id="ph1">`Dispose`</ph>, você deve liberar todas as referências para o <ph id="ph2">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph> para o coletor de lixo possa recuperar a memória que o <ph id="ph3">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph> estava ocupando.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AsyncFlowControl.Dispose">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">Para obter mais informações, consulte <bpt id="p1">[</bpt>limpeza de recursos não gerenciados<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> e <bpt id="p2">[</bpt>implementar um método Dispose<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AsyncFlowControl.Dispose">
          <source>Always call <ph id="ph1">`Dispose`</ph> before you release your last reference to the <ph id="ph2">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph>.</source>
          <target state="translated">Sempre chamar <ph id="ph1">`Dispose`</ph> antes de liberar sua última referência para o <ph id="ph2">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AsyncFlowControl.Dispose">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id="ph1">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph> object's <ph id="ph2">`Finalize`</ph> method.</source>
          <target state="translated">Caso contrário, os recursos que está usando não serão liberados até que o coletor de lixo chame o <ph id="ph1">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph> do objeto <ph id="ph2">`Finalize`</ph> método.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Threading.AsyncFlowControl.Dispose">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> structure is not used on the thread where it was created.</source>
          <target state="translated">A estrutura <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> não é usada no thread em que ela foi criada.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Threading.AsyncFlowControl.Dispose">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Threading.AsyncFlowControl.Dispose">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> structure has already been used to call <ph id="ph2">&lt;see cref="M:System.Threading.AsyncFlowControl.Dispose" /&gt;</ph> or <ph id="ph3">&lt;see cref="M:System.Threading.AsyncFlowControl.Undo" /&gt;</ph>.</source>
          <target state="translated">A estrutura <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> já foi usada para chamar <ph id="ph2">&lt;see cref="M:System.Threading.AsyncFlowControl.Dispose" /&gt;</ph> ou <ph id="ph3">&lt;see cref="M:System.Threading.AsyncFlowControl.Undo" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="T:System.Threading.AsyncFlowControl">
          <source>Determines whether two instances are equal.</source>
          <target state="translated">Determina se duas instâncias são iguais.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Threading.AsyncFlowControl.Equals(System.Object)">
          <source>An object to compare with the current structure.</source>
          <target state="translated">Um objeto a ser comparado com a estrutura atual.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Threading.AsyncFlowControl.Equals(System.Object)">
          <source>Determines whether the specified object is equal to the current <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> structure.</source>
          <target state="translated">Determina se o objeto especificado é igual à estrutura <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Threading.AsyncFlowControl.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> is an <ph id="ph3">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> structure and is equal to the current <ph id="ph4">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> structure; otherwise, <ph id="ph5">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> for uma estrutura <ph id="ph3">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> e for igual à estrutura <ph id="ph4">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> atual, caso contrário, <ph id="ph5">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Threading.AsyncFlowControl.Equals(System.Threading.AsyncFlowControl)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> structure to compare with the current structure.</source>
          <target state="translated">Uma estrutura <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> a comparar à estrutura atual.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Threading.AsyncFlowControl.Equals(System.Threading.AsyncFlowControl)">
          <source>Determines whether the specified <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> structure is equal to the current <ph id="ph2">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> structure.</source>
          <target state="translated">Determina se a estrutura <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> especificada é igual à estrutura <ph id="ph2">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Threading.AsyncFlowControl.Equals(System.Threading.AsyncFlowControl)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> is equal to the current <ph id="ph3">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> structure; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> for igual à estrutura <ph id="ph3">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> atual; caso contrário, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Threading.AsyncFlowControl.GetHashCode">
          <source>Gets a hash code for the current <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> structure.</source>
          <target state="translated">Obtém um código hash para a estrutura <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Threading.AsyncFlowControl.GetHashCode">
          <source>A hash code for the current <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> structure.</source>
          <target state="translated">Um código hash para a estrutura <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Threading.AsyncFlowControl.op_Equality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> structure.</source>
          <target state="translated">Uma estrutura <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Threading.AsyncFlowControl.op_Equality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> structure.</source>
          <target state="translated">Uma estrutura <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Threading.AsyncFlowControl.op_Equality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)">
          <source>Compares two <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> structures to determine whether they are equal.</source>
          <target state="translated">Compara duas estruturas <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> para determinar se elas são iguais.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Threading.AsyncFlowControl.op_Equality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two structures are equal; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se as duas estruturas forem iguais, caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AsyncFlowControl.op_Equality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:System.Threading.AsyncFlowControl.Equals%28System.Threading.AsyncFlowControl%29?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">O método equivalente para esse operador é <ph id="ph1">&lt;xref:System.Threading.AsyncFlowControl.Equals%28System.Threading.AsyncFlowControl%29?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Threading.AsyncFlowControl.op_Inequality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> structure.</source>
          <target state="translated">Uma estrutura <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Threading.AsyncFlowControl.op_Inequality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> structure.</source>
          <target state="translated">Uma estrutura <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Threading.AsyncFlowControl.op_Inequality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)">
          <source>Compares two <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> structures to determine whether they are not equal.</source>
          <target state="translated">Compara duas estruturas <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> para determinar se elas não são iguais.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Threading.AsyncFlowControl.op_Inequality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the structures are not equal; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se as estruturas não forem iguais; caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AsyncFlowControl.op_Inequality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:System.Threading.AsyncFlowControl.Equals%28System.Threading.AsyncFlowControl%29?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">O método equivalente para esse operador é <ph id="ph1">&lt;xref:System.Threading.AsyncFlowControl.Equals%28System.Threading.AsyncFlowControl%29?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Threading.AsyncFlowControl.Undo">
          <source>Restores the flow of the execution context between threads.</source>
          <target state="translated">Restaura o fluxo do contexto de execução entre threads.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AsyncFlowControl.Undo">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ExecutionContext.SuppressFlow%2A?displayProperty=nameWithType&gt;</ph> method returns an <ph id="ph2">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph> structure that is used to restore the flow.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Threading.ExecutionContext.SuppressFlow%2A?displayProperty=nameWithType&gt;</ph> método retorna um <ph id="ph2">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph> estrutura que é usada para restaurar o fluxo.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AsyncFlowControl.Undo">
          <source>The <ph id="ph1">&lt;xref:System.Threading.AsyncFlowControl.Undo%2A&gt;</ph> method must be called only on the <ph id="ph2">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph> structure returned by its associated <ph id="ph3">&lt;xref:System.Threading.ExecutionContext.SuppressFlow%2A&gt;</ph> method.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Threading.AsyncFlowControl.Undo%2A&gt;</ph> método deve ser chamado apenas no <ph id="ph2">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph> estrutura retornada por seus associados <ph id="ph3">&lt;xref:System.Threading.ExecutionContext.SuppressFlow%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Threading.AsyncFlowControl.Undo">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> structure is not used on the thread where it was created.</source>
          <target state="translated">A estrutura <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> não é usada no thread em que ela foi criada.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Threading.AsyncFlowControl.Undo">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Threading.AsyncFlowControl.Undo">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> structure has already been used to call <ph id="ph2">&lt;see cref="M:System.Threading.AsyncFlowControl.Dispose" /&gt;</ph> or <ph id="ph3">&lt;see cref="M:System.Threading.AsyncFlowControl.Undo" /&gt;</ph>.</source>
          <target state="translated">A estrutura <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> já foi usada para chamar <ph id="ph2">&lt;see cref="M:System.Threading.AsyncFlowControl.Dispose" /&gt;</ph> ou <ph id="ph3">&lt;see cref="M:System.Threading.AsyncFlowControl.Undo" /&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>