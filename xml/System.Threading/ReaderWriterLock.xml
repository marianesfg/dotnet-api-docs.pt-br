<Type Name="ReaderWriterLock" FullName="System.Threading.ReaderWriterLock">
  <Metadata><Meta Name="ms.openlocfilehash" Value="405e3d2ae723a795a5dc6cc955e36cfb6ca813b7" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48747864" /></Metadata><TypeSignature Language="C#" Value="public sealed class ReaderWriterLock : System.Runtime.ConstrainedExecution.CriticalFinalizerObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ReaderWriterLock extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ReaderWriterLock" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ReaderWriterLock&#xA;Inherits CriticalFinalizerObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class ReaderWriterLock sealed : System::Runtime::ConstrainedExecution::CriticalFinalizerObject" />
  <TypeSignature Language="F#" Value="type ReaderWriterLock = class&#xA;    inherit CriticalFinalizerObject" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Runtime.ConstrainedExecution.CriticalFinalizerObject</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-1.1">System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="be6ab-101">Define um bloqueio que dá suporte a autores únicos e múltiplos leitores.</span><span class="sxs-lookup"><span data-stu-id="be6ab-101">Defines a lock that supports single writers and multiple readers.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="be6ab-102">O [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] tem dois bloqueios de leitor-gravador, <xref:System.Threading.ReaderWriterLockSlim> e <xref:System.Threading.ReaderWriterLock>.</span><span class="sxs-lookup"><span data-stu-id="be6ab-102">The [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] has two reader-writer locks, <xref:System.Threading.ReaderWriterLockSlim> and <xref:System.Threading.ReaderWriterLock>.</span></span> <span data-ttu-id="be6ab-103">O <xref:System.Threading.ReaderWriterLockSlim> é recomendado para todos os novos desenvolvimentos.</span><span class="sxs-lookup"><span data-stu-id="be6ab-103"><xref:System.Threading.ReaderWriterLockSlim> is recommended for all new development.</span></span> <span data-ttu-id="be6ab-104">O <xref:System.Threading.ReaderWriterLockSlim> é semelhante ao <xref:System.Threading.ReaderWriterLock>, mas tem regras simplificadas para recursão e para atualização e downgrade de estado de bloqueio.</span><span class="sxs-lookup"><span data-stu-id="be6ab-104"><xref:System.Threading.ReaderWriterLockSlim> is similar to <xref:System.Threading.ReaderWriterLock>, but it has simplified rules for recursion and for upgrading and downgrading lock state.</span></span> <span data-ttu-id="be6ab-105"><xref:System.Threading.ReaderWriterLockSlim> evita muitos casos potenciais de deadlock.</span><span class="sxs-lookup"><span data-stu-id="be6ab-105"><xref:System.Threading.ReaderWriterLockSlim> avoids many cases of potential deadlock.</span></span> <span data-ttu-id="be6ab-106">Além disso, o desempenho de <xref:System.Threading.ReaderWriterLockSlim> é significativamente melhor que o de <xref:System.Threading.ReaderWriterLock>.</span><span class="sxs-lookup"><span data-stu-id="be6ab-106">In addition, the performance of <xref:System.Threading.ReaderWriterLockSlim> is significantly better than <xref:System.Threading.ReaderWriterLock>.</span></span>  
  
 <span data-ttu-id="be6ab-107"><xref:System.Threading.ReaderWriterLock> é usado para sincronizar o acesso a um recurso.</span><span class="sxs-lookup"><span data-stu-id="be6ab-107"><xref:System.Threading.ReaderWriterLock> is used to synchronize access to a resource.</span></span> <span data-ttu-id="be6ab-108">A qualquer momento determinado, ele permite que o acesso simultâneo de leitura para vários threads, ou acesso de gravação para um único thread.</span><span class="sxs-lookup"><span data-stu-id="be6ab-108">At any given time, it allows either concurrent read access for multiple threads, or write access for a single thread.</span></span> <span data-ttu-id="be6ab-109">Em uma situação em que um recurso é alterado com frequência, uma `ReaderWriterLock` fornece a melhor taxa de transferência que um bloqueio de um em vez de simple, como <xref:System.Threading.Monitor>.</span><span class="sxs-lookup"><span data-stu-id="be6ab-109">In a situation where a resource is changed infrequently, a `ReaderWriterLock` provides better throughput than a simple one-at-a-time lock, such as <xref:System.Threading.Monitor>.</span></span>  
  
 <span data-ttu-id="be6ab-110">`ReaderWriterLock` funciona melhor em que a maioria dos acessos são leituras, enquanto as gravações são frequentes e de curta duração.</span><span class="sxs-lookup"><span data-stu-id="be6ab-110">`ReaderWriterLock` works best where most accesses are reads, while writes are infrequent and of short duration.</span></span> <span data-ttu-id="be6ab-111">Vários leitores alternam com autores únicos, para que nem leitores nem gravadores estão bloqueados por longos períodos.</span><span class="sxs-lookup"><span data-stu-id="be6ab-111">Multiple readers alternate with single writers, so that neither readers nor writers are blocked for long periods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="be6ab-112">Mantendo bloqueios de leitor ou bloqueios de gravação por longos períodos será enfraquecer outros threads.</span><span class="sxs-lookup"><span data-stu-id="be6ab-112">Holding reader locks or writer locks for long periods will starve other threads.</span></span> <span data-ttu-id="be6ab-113">Para obter melhor desempenho, considere a reestruturação do seu aplicativo para minimizar a duração de gravações.</span><span class="sxs-lookup"><span data-stu-id="be6ab-113">For best performance, consider restructuring your application to minimize the duration of writes.</span></span>  
  
 <span data-ttu-id="be6ab-114">Um thread pode conter um leitor de bloqueio ou um bloqueio de gravador, mas não ambos ao mesmo tempo.</span><span class="sxs-lookup"><span data-stu-id="be6ab-114">A thread can hold a reader lock or a writer lock, but not both at the same time.</span></span> <span data-ttu-id="be6ab-115">Em vez de liberar um bloqueio de leitor para adquirir o bloqueio de gravador, você pode usar <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> e <xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="be6ab-115">Instead of releasing a reader lock in order to acquire the writer lock, you can use <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> and <xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A>.</span></span>  
  
 <span data-ttu-id="be6ab-116">Solicitações de bloqueio recursiva aumentam a contagem de bloqueio em um bloqueio.</span><span class="sxs-lookup"><span data-stu-id="be6ab-116">Recursive lock requests increase the lock count on a lock.</span></span>  
  
 <span data-ttu-id="be6ab-117">Os leitores e gravadores são enfileirados separadamente.</span><span class="sxs-lookup"><span data-stu-id="be6ab-117">Readers and writers are queued separately.</span></span> <span data-ttu-id="be6ab-118">Quando um thread libera o bloqueio de gravador, todos os threads aguardando na fila leitor nesse momento são concedidos os bloqueios de leitor; Quando todos os bloqueios de leitor foram lançados, a próxima espera de thread no gravador de fila, se houver, é concedido o bloqueio de gravador e assim por diante.</span><span class="sxs-lookup"><span data-stu-id="be6ab-118">When a thread releases the writer lock, all threads waiting in the reader queue at that instant are granted reader locks; when all of those reader locks have been released, the next thread waiting in the writer queue, if any, is granted the writer lock, and so on.</span></span> <span data-ttu-id="be6ab-119">Em outras palavras, `ReaderWriterLock` alterna entre uma coleção de leitores e um gravador.</span><span class="sxs-lookup"><span data-stu-id="be6ab-119">In other words, `ReaderWriterLock` alternates between a collection of readers, and one writer.</span></span>  
  
 <span data-ttu-id="be6ab-120">Enquanto um thread na fila de gravador está aguardando os bloqueios de leitor ativo a ser liberado, threads solicitando novos bloqueios de leitor se acumulam na fila de leitor.</span><span class="sxs-lookup"><span data-stu-id="be6ab-120">While a thread in the writer queue is waiting for active reader locks to be released, threads requesting new reader locks accumulate in the reader queue.</span></span> <span data-ttu-id="be6ab-121">Suas solicitações não são concedidas, mesmo que eles podem compartilhar o acesso simultâneo com detentores de bloqueio de leitor existente; Isso ajuda a proteger gravadores em bloqueio indefinido pelos leitores.</span><span class="sxs-lookup"><span data-stu-id="be6ab-121">Their requests are not granted, even though they could share concurrent access with existing reader-lock holders; this helps protect writers against indefinite blockage by readers.</span></span>  
  
 <span data-ttu-id="be6ab-122">A maioria dos métodos para adquirir bloqueios em um `ReaderWriterLock` aceitar valores de tempo limite.</span><span class="sxs-lookup"><span data-stu-id="be6ab-122">Most methods for acquiring locks on a `ReaderWriterLock` accept time-out values.</span></span> <span data-ttu-id="be6ab-123">Use tempos limite para evitar deadlocks em seu aplicativo.</span><span class="sxs-lookup"><span data-stu-id="be6ab-123">Use time-outs to avoid deadlocks in your application.</span></span> <span data-ttu-id="be6ab-124">Por exemplo, um thread pode adquirir o bloqueio de gravador em um recurso e, em seguida, solicitar um bloqueio de leitor em um segundo recurso; Enquanto isso, outro thread pode adquirir o bloqueio de gravador em segundo recurso e solicitar um bloqueio de leitor no primeiro.</span><span class="sxs-lookup"><span data-stu-id="be6ab-124">For example, a thread might acquire the writer lock on one resource and then request a reader lock on a second resource; in the meantime, another thread might acquire the writer lock on the second resource, and request a reader lock on the first.</span></span> <span data-ttu-id="be6ab-125">A menos que os tempos limite são usados, o segmentos apresentam um deadlock.</span><span class="sxs-lookup"><span data-stu-id="be6ab-125">Unless time-outs are used, the threads deadlock.</span></span>  
  
 <span data-ttu-id="be6ab-126">Se o intervalo de tempo limite expirar, e a solicitação de bloqueio não foi concedida, o método retorna o controle para o thread de chamada, lançando uma <xref:System.ApplicationException>.</span><span class="sxs-lookup"><span data-stu-id="be6ab-126">If the time-out interval expires and the lock request has not been granted, the method returns control to the calling thread by throwing an <xref:System.ApplicationException>.</span></span> <span data-ttu-id="be6ab-127">Um thread pode capturar essa exceção e determinar qual ação será tomada próxima.</span><span class="sxs-lookup"><span data-stu-id="be6ab-127">A thread can catch this exception and determine what action to take next.</span></span>  
  
 <span data-ttu-id="be6ab-128">Tempos limite são expressos em milissegundos.</span><span class="sxs-lookup"><span data-stu-id="be6ab-128">Time-outs are expressed in milliseconds.</span></span> <span data-ttu-id="be6ab-129">Se você usar um <xref:System.TimeSpan?displayProperty=nameWithType> para especificar o tempo limite, o valor usado é o número total de milissegundos inteiros representado pelo <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="be6ab-129">If you use a <xref:System.TimeSpan?displayProperty=nameWithType> to specify the time-out, the value used is the total number of whole milliseconds represented by the <xref:System.TimeSpan>.</span></span> <span data-ttu-id="be6ab-130">A tabela a seguir mostra os valores de tempo limite válido em milissegundos.</span><span class="sxs-lookup"><span data-stu-id="be6ab-130">The following table shows the valid time-out values in milliseconds.</span></span>  
  
|<span data-ttu-id="be6ab-131">Valor</span><span class="sxs-lookup"><span data-stu-id="be6ab-131">Value</span></span>|<span data-ttu-id="be6ab-132">Descrição</span><span class="sxs-lookup"><span data-stu-id="be6ab-132">Description</span></span>|  
|-----------|-----------------|  
|<span data-ttu-id="be6ab-133">-1</span><span class="sxs-lookup"><span data-stu-id="be6ab-133">-1</span></span>|<span data-ttu-id="be6ab-134">O thread aguarda até que o bloqueio é adquirido, independentemente de quanto tempo demora.</span><span class="sxs-lookup"><span data-stu-id="be6ab-134">The thread waits until the lock is acquired, regardless of how long it takes.</span></span> <span data-ttu-id="be6ab-135">Para métodos que especificam tempos limite de número inteiro, a constante <xref:System.Threading.Timeout.Infinite> pode ser usado.</span><span class="sxs-lookup"><span data-stu-id="be6ab-135">For methods that specify integer time-outs, the constant <xref:System.Threading.Timeout.Infinite> can be used.</span></span>|  
|<span data-ttu-id="be6ab-136">0</span><span class="sxs-lookup"><span data-stu-id="be6ab-136">0</span></span>|<span data-ttu-id="be6ab-137">O thread não espera para adquirir o bloqueio.</span><span class="sxs-lookup"><span data-stu-id="be6ab-137">The thread does not wait to acquire the lock.</span></span> <span data-ttu-id="be6ab-138">Se o bloqueio não pode ser adquirido imediatamente, o método retorna.</span><span class="sxs-lookup"><span data-stu-id="be6ab-138">If the lock cannot be acquired immediately, the method returns.</span></span>|  
|<span data-ttu-id="be6ab-139">>0</span><span class="sxs-lookup"><span data-stu-id="be6ab-139">>0</span></span>|<span data-ttu-id="be6ab-140">O número de milissegundos de espera.</span><span class="sxs-lookup"><span data-stu-id="be6ab-140">The number of milliseconds to wait.</span></span>|  
  
 <span data-ttu-id="be6ab-141">Com exceção de -1, não são permitidos valores de tempo limite negativo.</span><span class="sxs-lookup"><span data-stu-id="be6ab-141">With the exception of -1, negative time-out values are not allowed.</span></span> <span data-ttu-id="be6ab-142">Se você especificar um inteiro negativo diferente de -1, um valor de tempo limite de zero será usado.</span><span class="sxs-lookup"><span data-stu-id="be6ab-142">If you specify a negative integer other than -1, a time-out value of zero is used instead.</span></span> <span data-ttu-id="be6ab-143">(Ou seja, o método retorna sem esperar, se o bloqueio não pode ser adquirido imediatamente.) Se você especificar uma <xref:System.TimeSpan> que representa um número negativo de milissegundos diferente de -1, <xref:System.ArgumentOutOfRangeException> é lançada.</span><span class="sxs-lookup"><span data-stu-id="be6ab-143">(That is, the method returns without waiting, if the lock cannot be acquired immediately.) If you specify a <xref:System.TimeSpan> that represents a negative number of milliseconds other than -1, <xref:System.ArgumentOutOfRangeException> is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="be6ab-144">O exemplo a seguir demonstra como usar um <xref:System.Threading.ReaderWriterLock> para proteger um recurso compartilhado, um valor inteiro chamado `resource`, que é ler simultaneamente e escritos exclusivamente por vários threads.</span><span class="sxs-lookup"><span data-stu-id="be6ab-144">The following example demonstrates how to use a <xref:System.Threading.ReaderWriterLock> to protect a shared resource, an integer value named `resource`, that is read concurrently and written exclusively by multiple threads.</span></span> <span data-ttu-id="be6ab-145">Observe que o <xref:System.Threading.ReaderWriterLock> é declarado no nível de classe para que ele fique visível a todos os threads.</span><span class="sxs-lookup"><span data-stu-id="be6ab-145">Note that the <xref:System.Threading.ReaderWriterLock> is declared at the class level so that it is visible to all threads.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ReaderWriterLock#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLock#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="be6ab-146">Este tipo é thread-safe.</span><span class="sxs-lookup"><span data-stu-id="be6ab-146">This type is thread safe.</span></span></threadsafe>
    <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="be6ab-147">Threading gerenciado</span><span class="sxs-lookup"><span data-stu-id="be6ab-147">Managed Threading</span></span></related>
    <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="be6ab-148">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="be6ab-148">ReaderWriterLock</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReaderWriterLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReaderWriterLock();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="be6ab-149">Inicializa uma nova instância da classe <see cref="T:System.Threading.ReaderWriterLock" />.</span><span class="sxs-lookup"><span data-stu-id="be6ab-149">Initializes a new instance of the <see cref="T:System.Threading.ReaderWriterLock" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="be6ab-150">O exemplo de código a seguir demonstra como criar uma nova instância do <xref:System.Threading.ReaderWriterLock> classe.</span><span class="sxs-lookup"><span data-stu-id="be6ab-150">The following code example demonstrates how to create a new instance of the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 <span data-ttu-id="be6ab-151">Esse código é parte de um exemplo maior fornecido para o <xref:System.Threading.ReaderWriterLock> classe.</span><span class="sxs-lookup"><span data-stu-id="be6ab-151">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="be6ab-152">Threading gerenciado</span><span class="sxs-lookup"><span data-stu-id="be6ab-152">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="be6ab-153">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="be6ab-153">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="AcquireReaderLock">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="be6ab-154">Adquire um bloqueio de leitor.</span><span class="sxs-lookup"><span data-stu-id="be6ab-154">Acquires a reader lock.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AcquireReaderLock">
      <MemberSignature Language="C#" Value="public void AcquireReaderLock (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcquireReaderLock(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AcquireReaderLock (millisecondsTimeout As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AcquireReaderLock(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.AcquireReaderLock : int -&gt; unit" Usage="readerWriterLock.AcquireReaderLock millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="be6ab-155">O tempo limite em milissegundos.</span><span class="sxs-lookup"><span data-stu-id="be6ab-155">The time-out in milliseconds.</span></span></param>
        <summary><span data-ttu-id="be6ab-156">Adquire um bloqueio de leitor, usando um valor <see cref="T:System.Int32" /> para o tempo limite.</span><span class="sxs-lookup"><span data-stu-id="be6ab-156">Acquires a reader lock, using an <see cref="T:System.Int32" /> value for the time-out.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="be6ab-157"><xref:System.Threading.ReaderWriterLock.AcquireReaderLock%2A> bloqueia um thread diferente tem o bloqueio de gravador, ou se pelo menos um thread está aguardando o bloqueio de gravador.</span><span class="sxs-lookup"><span data-stu-id="be6ab-157"><xref:System.Threading.ReaderWriterLock.AcquireReaderLock%2A> blocks if a different thread has the writer lock, or if at least one thread is waiting for the writer lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="be6ab-158">Se o thread atual já tiver o bloqueio de gravador, nenhum bloqueio de leitor é adquirido.</span><span class="sxs-lookup"><span data-stu-id="be6ab-158">If the current thread already has the writer lock, no reader lock is acquired.</span></span> <span data-ttu-id="be6ab-159">Em vez disso, a contagem de bloqueio no bloqueio de gravador é incrementada.</span><span class="sxs-lookup"><span data-stu-id="be6ab-159">Instead, the lock count on the writer lock is incremented.</span></span> <span data-ttu-id="be6ab-160">Isso impede que um segmento de bloqueio em seu próprio bloqueio de gravador.</span><span class="sxs-lookup"><span data-stu-id="be6ab-160">This prevents a thread from blocking on its own writer lock.</span></span> <span data-ttu-id="be6ab-161">O resultado é exatamente o mesmo que chamar <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>e uma chamada adicional para <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> é necessária ao liberar o bloqueio de gravador.</span><span class="sxs-lookup"><span data-stu-id="be6ab-161">The result is exactly the same as calling <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>, and an additional call to <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> is required when releasing the writer lock.</span></span>  
  
 <span data-ttu-id="be6ab-162">`AcquireReaderLock` dá suporte a solicitações de bloqueio de leitor de recursiva.</span><span class="sxs-lookup"><span data-stu-id="be6ab-162">`AcquireReaderLock` supports recursive reader-lock requests.</span></span> <span data-ttu-id="be6ab-163">Ou seja, um thread pode chamar AcquireReaderLock várias vezes, que incrementa a contagem de bloqueio de cada vez.</span><span class="sxs-lookup"><span data-stu-id="be6ab-163">That is, a thread can call AcquireReaderLock multiple times, which increments the lock count each time.</span></span> <span data-ttu-id="be6ab-164">Você deve chamar <xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A> uma vez para cada vez que você chamar `AcquireReaderLock`.</span><span class="sxs-lookup"><span data-stu-id="be6ab-164">You must call <xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A> once for each time you call `AcquireReaderLock`.</span></span> <span data-ttu-id="be6ab-165">Como alternativa, você pode chamar <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> para reduzir a contagem de bloqueio como zero imediatamente.</span><span class="sxs-lookup"><span data-stu-id="be6ab-165">Alternatively, you can call <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> to reduce the lock count to zero immediately.</span></span>  
  
 <span data-ttu-id="be6ab-166">Solicitações de bloqueio recursivas sempre são concedidas imediatamente, sem colocar o thread de solicitação na fila de leitor.</span><span class="sxs-lookup"><span data-stu-id="be6ab-166">Recursive lock requests are always granted immediately, without placing the requesting thread in the reader queue.</span></span> <span data-ttu-id="be6ab-167">Use bloqueios de recursiva com cuidado, para evitar o bloqueio de solicitações de bloqueio de gravador por longos períodos.</span><span class="sxs-lookup"><span data-stu-id="be6ab-167">Use recursive locks with caution, to avoid blocking writer-lock requests for long periods.</span></span>  
  
 <span data-ttu-id="be6ab-168">Para obter valores de tempo limite válido, consulte <xref:System.Threading.ReaderWriterLock>.</span><span class="sxs-lookup"><span data-stu-id="be6ab-168">For valid time-out values, see <xref:System.Threading.ReaderWriterLock>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="be6ab-169">O exemplo de código a seguir mostra como adquirir e liberar um bloqueio de leitor e como tratar a exceção gerada quando uma solicitação expira.</span><span class="sxs-lookup"><span data-stu-id="be6ab-169">The following code example shows how to acquire and release a reader lock, and how to handle the exception thrown when a request times out.</span></span>  
  
 <span data-ttu-id="be6ab-170">Esse código é parte de um exemplo maior fornecido para o <xref:System.Threading.ReaderWriterLock> classe.</span><span class="sxs-lookup"><span data-stu-id="be6ab-170">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#3)]
[!code-csharp[System.Threading.ReaderWriterLock#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#3)]
[!code-vb[System.Threading.ReaderWriterLock#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#3)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="be6ab-171">O <paramref name="millisecondsTimeout" /> expira antes que a solicitação de bloqueio seja concedida.</span><span class="sxs-lookup"><span data-stu-id="be6ab-171"><paramref name="millisecondsTimeout" /> expires before the lock request is granted.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="be6ab-172">Threading gerenciado</span><span class="sxs-lookup"><span data-stu-id="be6ab-172">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="be6ab-173">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="be6ab-173">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="AcquireReaderLock">
      <MemberSignature Language="C#" Value="public void AcquireReaderLock (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcquireReaderLock(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AcquireReaderLock (timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AcquireReaderLock(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.AcquireReaderLock : TimeSpan -&gt; unit" Usage="readerWriterLock.AcquireReaderLock timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="be6ab-174">Um <see langword="TimeSpan" /> que especifica o período de tempo limite.</span><span class="sxs-lookup"><span data-stu-id="be6ab-174">A <see langword="TimeSpan" /> specifying the time-out period.</span></span></param>
        <summary><span data-ttu-id="be6ab-175">Adquire um bloqueio de leitor, usando um valor <see cref="T:System.TimeSpan" /> para o tempo limite.</span><span class="sxs-lookup"><span data-stu-id="be6ab-175">Acquires a reader lock, using a <see cref="T:System.TimeSpan" /> value for the time-out.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="be6ab-176"><xref:System.Threading.ReaderWriterLock.AcquireReaderLock%2A> bloqueia um thread diferente tem o bloqueio de gravador, ou se pelo menos um thread está aguardando o bloqueio de gravador.</span><span class="sxs-lookup"><span data-stu-id="be6ab-176"><xref:System.Threading.ReaderWriterLock.AcquireReaderLock%2A> blocks if a different thread has the writer lock, or if at least one thread is waiting for the writer lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="be6ab-177">Se o thread atual já tiver o bloqueio de gravador, nenhum bloqueio de leitor é adquirido.</span><span class="sxs-lookup"><span data-stu-id="be6ab-177">If the current thread already has the writer lock, no reader lock is acquired.</span></span> <span data-ttu-id="be6ab-178">Em vez disso, a contagem de bloqueio no bloqueio de gravador é incrementada.</span><span class="sxs-lookup"><span data-stu-id="be6ab-178">Instead, the lock count on the writer lock is incremented.</span></span> <span data-ttu-id="be6ab-179">Isso impede que um segmento de bloqueio em seu próprio bloqueio de gravador.</span><span class="sxs-lookup"><span data-stu-id="be6ab-179">This prevents a thread from blocking on its own writer lock.</span></span> <span data-ttu-id="be6ab-180">O resultado é exatamente o mesmo que chamar <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>e uma chamada adicional para <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> é necessária ao liberar o bloqueio de gravador.</span><span class="sxs-lookup"><span data-stu-id="be6ab-180">The result is exactly the same as calling <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>, and an additional call to <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> is required when releasing the writer lock.</span></span>  
  
 <span data-ttu-id="be6ab-181">`AcquireReaderLock` dá suporte a solicitações de bloqueio de leitor de recursiva.</span><span class="sxs-lookup"><span data-stu-id="be6ab-181">`AcquireReaderLock` supports recursive reader-lock requests.</span></span> <span data-ttu-id="be6ab-182">Ou seja, um thread pode chamar AcquireReaderLock várias vezes, que incrementa a contagem de bloqueio de cada vez.</span><span class="sxs-lookup"><span data-stu-id="be6ab-182">That is, a thread can call AcquireReaderLock multiple times, which increments the lock count each time.</span></span> <span data-ttu-id="be6ab-183">Você deve chamar <xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A> uma vez para cada vez que você chamar `AcquireReaderLock`.</span><span class="sxs-lookup"><span data-stu-id="be6ab-183">You must call <xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A> once for each time you call `AcquireReaderLock`.</span></span> <span data-ttu-id="be6ab-184">Como alternativa, você pode chamar <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> para reduzir a contagem de bloqueio como zero imediatamente.</span><span class="sxs-lookup"><span data-stu-id="be6ab-184">Alternatively, you can call <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> to reduce the lock count to zero immediately.</span></span>  
  
 <span data-ttu-id="be6ab-185">Solicitações de bloqueio recursivas sempre são concedidas imediatamente, sem colocar o thread de solicitação na fila de leitor.</span><span class="sxs-lookup"><span data-stu-id="be6ab-185">Recursive lock requests are always granted immediately, without placing the requesting thread in the reader queue.</span></span> <span data-ttu-id="be6ab-186">Use bloqueios de recursiva com cuidado, para evitar o bloqueio de solicitações de bloqueio de gravador por longos períodos.</span><span class="sxs-lookup"><span data-stu-id="be6ab-186">Use recursive locks with caution, to avoid blocking writer-lock requests for long periods.</span></span>  
  
 <span data-ttu-id="be6ab-187">Para obter valores de tempo limite válido, consulte <xref:System.Threading.ReaderWriterLock>.</span><span class="sxs-lookup"><span data-stu-id="be6ab-187">For valid time-out values, see <xref:System.Threading.ReaderWriterLock>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="be6ab-188">O <paramref name="timeout" /> expira antes que a solicitação de bloqueio seja concedida.</span><span class="sxs-lookup"><span data-stu-id="be6ab-188"><paramref name="timeout" /> expires before the lock request is granted.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="be6ab-189"><paramref name="timeout" /> especifica um valor negativo diferente de -1 milissegundo.</span><span class="sxs-lookup"><span data-stu-id="be6ab-189"><paramref name="timeout" /> specifies a negative value other than -1 milliseconds.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="be6ab-190">Threading gerenciado</span><span class="sxs-lookup"><span data-stu-id="be6ab-190">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="be6ab-191">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="be6ab-191">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="AcquireWriterLock">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="be6ab-192">Adquire o bloqueio de gravador.</span><span class="sxs-lookup"><span data-stu-id="be6ab-192">Acquires the writer lock.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AcquireWriterLock">
      <MemberSignature Language="C#" Value="public void AcquireWriterLock (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcquireWriterLock(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AcquireWriterLock (millisecondsTimeout As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AcquireWriterLock(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.AcquireWriterLock : int -&gt; unit" Usage="readerWriterLock.AcquireWriterLock millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="be6ab-193">O tempo limite em milissegundos.</span><span class="sxs-lookup"><span data-stu-id="be6ab-193">The time-out in milliseconds.</span></span></param>
        <summary><span data-ttu-id="be6ab-194">Adquire um bloqueio de gravador, usando um valor <see cref="T:System.Int32" /> para o tempo limite.</span><span class="sxs-lookup"><span data-stu-id="be6ab-194">Acquires the writer lock, using an <see cref="T:System.Int32" /> value for the time-out.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="be6ab-195">Esse método bloqueia se outro thread tiver um bloqueio de leitor ou gravador.</span><span class="sxs-lookup"><span data-stu-id="be6ab-195">This method blocks if another thread has a reader lock or writer lock.</span></span> <span data-ttu-id="be6ab-196">Para obter uma descrição da maneira como o bloqueio de gravador é alternada com vários bloqueios de leitor simultâneo, consulte o <xref:System.Threading.ReaderWriterLock> classe.</span><span class="sxs-lookup"><span data-stu-id="be6ab-196">For a description of the way the writer lock alternates with multiple concurrent reader locks, see the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 <span data-ttu-id="be6ab-197">Um thread que já tem um bloqueio de leitor pode adquirir o bloqueio de gravador em uma das duas maneiras: liberando o bloqueio de leitor antes de chamar <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>, ou chamando <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="be6ab-197">A thread that already has a reader lock can acquire the writer lock in one of two ways: by releasing the reader lock before calling <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>, or by calling <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="be6ab-198">Se um thread chama `AcquireWriterLock` enquanto ele ainda tem um bloqueio de leitor, ele será bloqueado em seu próprio bloqueio de leitor; se for especificado um tempo limite infinito, o thread enfrentarão deadlock.</span><span class="sxs-lookup"><span data-stu-id="be6ab-198">If a thread calls `AcquireWriterLock` while it still has a reader lock, it will block on its own reader lock; if an infinite time-out is specified, the thread will deadlock.</span></span> <span data-ttu-id="be6ab-199">Para evitar esses deadlocks, use <xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A> para determinar se o thread atual já tem um bloqueio de leitor.</span><span class="sxs-lookup"><span data-stu-id="be6ab-199">To avoid such deadlocks, use <xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A> to determine whether the current thread already has a reader lock.</span></span>  
  
 <span data-ttu-id="be6ab-200">`AcquireWriterLock` dá suporte a solicitações de bloqueio de gravador recursiva.</span><span class="sxs-lookup"><span data-stu-id="be6ab-200">`AcquireWriterLock` supports recursive writer-lock requests.</span></span> <span data-ttu-id="be6ab-201">Ou seja, um thread pode chamar `AcquireWriterLock` várias vezes, que incrementa a contagem de bloqueio de cada vez.</span><span class="sxs-lookup"><span data-stu-id="be6ab-201">That is, a thread can call `AcquireWriterLock` multiple times, which increments the lock count each time.</span></span> <span data-ttu-id="be6ab-202">Você deve chamar <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> uma vez para cada vez que você chamar `AcquireWriterLock`.</span><span class="sxs-lookup"><span data-stu-id="be6ab-202">You must call <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> once for each time you call `AcquireWriterLock`.</span></span> <span data-ttu-id="be6ab-203">Como alternativa, você pode chamar <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> para reduzir a contagem de bloqueio como zero imediatamente.</span><span class="sxs-lookup"><span data-stu-id="be6ab-203">Alternatively, you can call <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> to reduce the lock count to zero immediately.</span></span>  
  
 <span data-ttu-id="be6ab-204">Solicitações de bloqueio recursivas sempre são concedidas imediatamente, sem colocar o thread de solicitação na fila do gravador.</span><span class="sxs-lookup"><span data-stu-id="be6ab-204">Recursive lock requests are always granted immediately, without placing the requesting thread in the writer queue.</span></span>  
  
 <span data-ttu-id="be6ab-205">Para obter valores de tempo limite válido, consulte <xref:System.Threading.ReaderWriterLock>.</span><span class="sxs-lookup"><span data-stu-id="be6ab-205">For valid time-out values, see <xref:System.Threading.ReaderWriterLock>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="be6ab-206">O exemplo de código a seguir mostra como adquirir e liberar um bloqueio de gravador e como tratar a exceção gerada quando uma solicitação expira.</span><span class="sxs-lookup"><span data-stu-id="be6ab-206">The following code example shows how to acquire and release a writer lock, and how to handle the exception thrown when a request times out.</span></span>  
  
 <span data-ttu-id="be6ab-207">Esse código é parte de um exemplo maior fornecido para o <xref:System.Threading.ReaderWriterLock> classe.</span><span class="sxs-lookup"><span data-stu-id="be6ab-207">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#4)]
[!code-csharp[System.Threading.ReaderWriterLock#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#4)]
[!code-vb[System.Threading.ReaderWriterLock#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#4)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="be6ab-208">O <paramref name="timeout" /> expira antes que a solicitação de bloqueio seja concedida.</span><span class="sxs-lookup"><span data-stu-id="be6ab-208"><paramref name="timeout" /> expires before the lock request is granted.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="be6ab-209">Threading gerenciado</span><span class="sxs-lookup"><span data-stu-id="be6ab-209">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="be6ab-210">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="be6ab-210">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="AcquireWriterLock">
      <MemberSignature Language="C#" Value="public void AcquireWriterLock (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcquireWriterLock(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AcquireWriterLock (timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AcquireWriterLock(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.AcquireWriterLock : TimeSpan -&gt; unit" Usage="readerWriterLock.AcquireWriterLock timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="be6ab-211">O <see langword="TimeSpan" /> que especifica o período de tempo limite.</span><span class="sxs-lookup"><span data-stu-id="be6ab-211">The <see langword="TimeSpan" /> specifying the time-out period.</span></span></param>
        <summary><span data-ttu-id="be6ab-212">Adquire um bloqueio de gravador, usando um valor <see cref="T:System.TimeSpan" /> para o tempo limite.</span><span class="sxs-lookup"><span data-stu-id="be6ab-212">Acquires the writer lock, using a <see cref="T:System.TimeSpan" /> value for the time-out.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="be6ab-213">Esse método bloqueia se outro thread tiver um bloqueio de leitor ou gravador.</span><span class="sxs-lookup"><span data-stu-id="be6ab-213">This method blocks if another thread has a reader lock or writer lock.</span></span> <span data-ttu-id="be6ab-214">Para obter uma descrição da maneira como o bloqueio de gravador é alternada com vários bloqueios de leitor simultâneo, consulte o <xref:System.Threading.ReaderWriterLock> classe.</span><span class="sxs-lookup"><span data-stu-id="be6ab-214">For a description of the way the writer lock alternates with multiple concurrent reader locks, see the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 <span data-ttu-id="be6ab-215">Um thread que já tem um bloqueio de leitor pode adquirir o bloqueio de gravador em uma das duas maneiras: liberando o bloqueio de leitor antes de chamar <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>, ou chamando <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="be6ab-215">A thread that already has a reader lock can acquire the writer lock in one of two ways: by releasing the reader lock before calling <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>, or by calling <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="be6ab-216">Se um thread chama `AcquireWriterLock` enquanto ele ainda tem um bloqueio de leitor, ele será bloqueado em seu próprio bloqueio de leitor; se for especificado um tempo limite infinito, o thread enfrentarão deadlock.</span><span class="sxs-lookup"><span data-stu-id="be6ab-216">If a thread calls `AcquireWriterLock` while it still has a reader lock, it will block on its own reader lock; if an infinite time-out is specified, the thread will deadlock.</span></span> <span data-ttu-id="be6ab-217">Para evitar esses deadlocks, use <xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A> para determinar se o thread atual já tem um bloqueio de leitor.</span><span class="sxs-lookup"><span data-stu-id="be6ab-217">To avoid such deadlocks, use <xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A> to determine whether the current thread already has a reader lock.</span></span>  
  
 <span data-ttu-id="be6ab-218">`AcquireWriterLock` dá suporte a solicitações de bloqueio de gravador recursiva.</span><span class="sxs-lookup"><span data-stu-id="be6ab-218">`AcquireWriterLock` supports recursive writer-lock requests.</span></span> <span data-ttu-id="be6ab-219">Ou seja, um thread pode chamar `AcquireWriterLock` várias vezes, que incrementa a contagem de bloqueio de cada vez.</span><span class="sxs-lookup"><span data-stu-id="be6ab-219">That is, a thread can call `AcquireWriterLock` multiple times, which increments the lock count each time.</span></span> <span data-ttu-id="be6ab-220">Você deve chamar <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> uma vez para cada vez que você chamar `AcquireWriterLock`.</span><span class="sxs-lookup"><span data-stu-id="be6ab-220">You must call <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> once for each time you call `AcquireWriterLock`.</span></span> <span data-ttu-id="be6ab-221">Como alternativa, você pode chamar <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> para reduzir a contagem de bloqueio como zero imediatamente.</span><span class="sxs-lookup"><span data-stu-id="be6ab-221">Alternatively, you can call <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> to reduce the lock count to zero immediately.</span></span>  
  
 <span data-ttu-id="be6ab-222">Solicitações de bloqueio recursivas sempre são concedidas imediatamente, sem colocar o thread de solicitação na fila do gravador.</span><span class="sxs-lookup"><span data-stu-id="be6ab-222">Recursive lock requests are always granted immediately, without placing the requesting thread in the writer queue.</span></span>  
  
 <span data-ttu-id="be6ab-223">Para obter valores de tempo limite válido, consulte <xref:System.Threading.ReaderWriterLock>.</span><span class="sxs-lookup"><span data-stu-id="be6ab-223">For valid time-out values, see <xref:System.Threading.ReaderWriterLock>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="be6ab-224">O <paramref name="timeout" /> expira antes que a solicitação de bloqueio seja concedida.</span><span class="sxs-lookup"><span data-stu-id="be6ab-224"><paramref name="timeout" /> expires before the lock request is granted.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="be6ab-225"><paramref name="timeout" /> especifica um valor negativo diferente de -1 milissegundo.</span><span class="sxs-lookup"><span data-stu-id="be6ab-225"><paramref name="timeout" /> specifies a negative value other than -1 milliseconds.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="be6ab-226">Threading gerenciado</span><span class="sxs-lookup"><span data-stu-id="be6ab-226">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="be6ab-227">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="be6ab-227">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="AnyWritersSince">
      <MemberSignature Language="C#" Value="public bool AnyWritersSince (int seqNum);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool AnyWritersSince(int32 seqNum) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.AnyWritersSince(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AnyWritersSince (seqNum As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool AnyWritersSince(int seqNum);" />
      <MemberSignature Language="F#" Value="member this.AnyWritersSince : int -&gt; bool" Usage="readerWriterLock.AnyWritersSince seqNum" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seqNum" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="seqNum"><span data-ttu-id="be6ab-228">O número de sequência.</span><span class="sxs-lookup"><span data-stu-id="be6ab-228">The sequence number.</span></span></param>
        <summary><span data-ttu-id="be6ab-229">Indica se o bloqueio de gravador foi concedido a qualquer thread desde que o número de sequência foi obtido.</span><span class="sxs-lookup"><span data-stu-id="be6ab-229">Indicates whether the writer lock has been granted to any thread since the sequence number was obtained.</span></span></summary>
        <returns><span data-ttu-id="be6ab-230"><see langword="true" /> se o bloqueio de gravador tiver sido concedido a qualquer thread desde que o número de sequência foi obtido; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="be6ab-230"><see langword="true" /> if the writer lock has been granted to any thread since the sequence number was obtained; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="be6ab-231">Você pode usar <xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A> e `AnyWritersSince` para melhorar o desempenho do aplicativo.</span><span class="sxs-lookup"><span data-stu-id="be6ab-231">You can use <xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A> and `AnyWritersSince` to improve application performance.</span></span> <span data-ttu-id="be6ab-232">Por exemplo, um thread pode armazenar em cache as informações que ele obtém mantendo um bloqueio de leitor.</span><span class="sxs-lookup"><span data-stu-id="be6ab-232">For example, a thread might cache the information it obtains while holding a reader lock.</span></span> <span data-ttu-id="be6ab-233">Após a liberação e mais tarde readquirir o bloqueio, o thread pode usar `AnyWritersSince` para determinar se outros threads têm escrito para o recurso durante o processo; caso contrário, as informações em cache podem ser usadas.</span><span class="sxs-lookup"><span data-stu-id="be6ab-233">After releasing and later reacquiring the lock, the thread can use `AnyWritersSince` to determine whether other threads have written to the resource in the interim; if not, the cached information can be used.</span></span> <span data-ttu-id="be6ab-234">Essa técnica é útil onde as informações protegidas pelo bloqueio de leitura é caro; Por exemplo, executando uma consulta de banco de dados.</span><span class="sxs-lookup"><span data-stu-id="be6ab-234">This technique is useful where reading the information protected by the lock is expensive; for example, running a database query.</span></span>  
  
 <span data-ttu-id="be6ab-235">O chamador deve ser mantendo um bloqueio de leitor ou um bloqueio de gravador para que o número de sequência para serem úteis.</span><span class="sxs-lookup"><span data-stu-id="be6ab-235">The caller must be holding a reader lock or a writer lock in order for the sequence number to be useful.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="be6ab-236">O exemplo de código a seguir mostra como usar o <xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A> método e o <xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A> pela última vez, propriedade para determinar se outro thread adquiriu o bloqueio de gravador de recurso protegido desde o thread atual mantém o bloqueio de gravador.</span><span class="sxs-lookup"><span data-stu-id="be6ab-236">The following code example shows how to use the <xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A> method and the <xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A> property to determine whether another thread acquired the writer lock on the protected resource since the current thread last held the writer lock.</span></span>  
  
 <span data-ttu-id="be6ab-237">Esse código é parte de um exemplo maior fornecido para o <xref:System.Threading.ReaderWriterLock> classe.</span><span class="sxs-lookup"><span data-stu-id="be6ab-237">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#6)]
[!code-csharp[System.Threading.ReaderWriterLock#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#6)]
[!code-vb[System.Threading.ReaderWriterLock#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#6)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="be6ab-238">Threading gerenciado</span><span class="sxs-lookup"><span data-stu-id="be6ab-238">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="be6ab-239">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="be6ab-239">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DowngradeFromWriterLock">
      <MemberSignature Language="C#" Value="public void DowngradeFromWriterLock (ref System.Threading.LockCookie lockCookie);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DowngradeFromWriterLock(valuetype System.Threading.LockCookie&amp; lockCookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DowngradeFromWriterLock (ByRef lockCookie As LockCookie)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DowngradeFromWriterLock(System::Threading::LockCookie % lockCookie);" />
      <MemberSignature Language="F#" Value="member this.DowngradeFromWriterLock :  -&gt; unit" Usage="readerWriterLock.DowngradeFromWriterLock lockCookie" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lockCookie" Type="System.Threading.LockCookie" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="lockCookie"><span data-ttu-id="be6ab-240">Um <see cref="T:System.Threading.LockCookie" /> retornado por <see cref="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" />.</span><span class="sxs-lookup"><span data-stu-id="be6ab-240">A <see cref="T:System.Threading.LockCookie" /> returned by <see cref="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" />.</span></span></param>
        <summary><span data-ttu-id="be6ab-241">Restaura o status de bloqueio do thread para o status prévio antes de <see cref="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" /> ser chamado.</span><span class="sxs-lookup"><span data-stu-id="be6ab-241">Restores the lock status of the thread to what it was before <see cref="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" /> was called.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="be6ab-242"><xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A> libera o bloqueio de gravador, independentemente da contagem de bloqueio recursivos e restaura o bloqueio de leitor foi mantido pelo thread antes de atualizar para o bloqueio de gravador.</span><span class="sxs-lookup"><span data-stu-id="be6ab-242"><xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A> releases the writer lock, regardless of the recursive lock count, and restores the reader lock that was held by the thread before upgrading to the writer lock.</span></span> <span data-ttu-id="be6ab-243">A contagem de bloqueio no bloqueio de leitor é restaurada.</span><span class="sxs-lookup"><span data-stu-id="be6ab-243">The lock count on the reader lock is restored.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="be6ab-244">`DowngradeFromWriterLock` aceita uma <xref:System.Threading.LockCookie> obtido chamando <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="be6ab-244">`DowngradeFromWriterLock` accepts a <xref:System.Threading.LockCookie> obtained by calling <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>.</span></span> <span data-ttu-id="be6ab-245">Não use uma `LockCookie` retornado por <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="be6ab-245">Do not use a `LockCookie` returned by <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A>.</span></span>  
  
 <span data-ttu-id="be6ab-246">Um thread não bloqueia ao fazer downgrade de bloqueio de gravador, mesmo se outros threads estão aguardando o bloqueio de gravador, porque todas as solicitações de bloqueio de leitor são concedidas quando o bloqueio de gravador é liberado.</span><span class="sxs-lookup"><span data-stu-id="be6ab-246">A thread does not block when downgrading from the writer lock, even if other threads are waiting for the writer lock, because all reader-lock requests are granted when the writer lock is released.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="be6ab-247">O exemplo de código a seguir mostra como solicitar um bloqueio de leitor, atualize o bloqueio de leitor para um bloqueio de gravador e fazer o downgrade para um bloqueio de leitor novamente.</span><span class="sxs-lookup"><span data-stu-id="be6ab-247">The following code example shows how to request a reader lock, upgrade the reader lock to a writer lock, and downgrade to a reader lock again.</span></span>  
  
 <span data-ttu-id="be6ab-248">Esse código é parte de um exemplo maior fornecido para o <xref:System.Threading.ReaderWriterLock> classe.</span><span class="sxs-lookup"><span data-stu-id="be6ab-248">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#5)]
[!code-csharp[System.Threading.ReaderWriterLock#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#5)]
[!code-vb[System.Threading.ReaderWriterLock#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#5)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="be6ab-249">O thread não tem o bloqueio de gravador.</span><span class="sxs-lookup"><span data-stu-id="be6ab-249">The thread does not have the writer lock.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="be6ab-250">O endereço de <paramref name="lockCookie" /> é um ponteiro nulo.</span><span class="sxs-lookup"><span data-stu-id="be6ab-250">The address of <paramref name="lockCookie" /> is a null pointer.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="be6ab-251">Threading gerenciado</span><span class="sxs-lookup"><span data-stu-id="be6ab-251">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="be6ab-252">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="be6ab-252">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~ReaderWriterLock ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!ReaderWriterLock ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="readerWriterLock.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="be6ab-253">Garante que os recursos são liberados e outras operações de limpeza são executadas quando o coletor de lixo recupera o objeto <see cref="T:System.Threading.ReaderWriterLock" />.</span><span class="sxs-lookup"><span data-stu-id="be6ab-253">Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <see cref="T:System.Threading.ReaderWriterLock" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="be6ab-254">O coletor de lixo chama <xref:System.Threading.ReaderWriterLock.Finalize%2A> quando atual <xref:System.Threading.ReaderWriterLock> objeto está pronto para ser finalizado.</span><span class="sxs-lookup"><span data-stu-id="be6ab-254">The garbage collector calls <xref:System.Threading.ReaderWriterLock.Finalize%2A> when the current <xref:System.Threading.ReaderWriterLock> object is ready to be finalized.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReaderLockHeld">
      <MemberSignature Language="C#" Value="public bool IsReaderLockHeld { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReaderLockHeld" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLock.IsReaderLockHeld" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReaderLockHeld As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReaderLockHeld { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReaderLockHeld : bool" Usage="System.Threading.ReaderWriterLock.IsReaderLockHeld" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="be6ab-255">Obtém um valor que indica se o thread atual mantém um bloqueio de leitor.</span><span class="sxs-lookup"><span data-stu-id="be6ab-255">Gets a value indicating whether the current thread holds a reader lock.</span></span></summary>
        <value><span data-ttu-id="be6ab-256"><see langword="true" /> Se o thread atual mantém um bloqueio de leitor; Caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="be6ab-256"><see langword="true" /> if the current thread holds a reader lock; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="be6ab-257">O exemplo de código a seguir demonstra como usar `IsReaderLockHeld` para evitar deadlocks.</span><span class="sxs-lookup"><span data-stu-id="be6ab-257">The following code example demonstrates how to use `IsReaderLockHeld` to avoid deadlocks.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock.IsWriterLockHeld#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock.IsWriterLockHeld/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ReaderWriterLock.IsWriterLockHeld#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock.IsWriterLockHeld/CS/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLock.IsWriterLockHeld#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock.IsWriterLockHeld/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="be6ab-258">Threading gerenciado</span><span class="sxs-lookup"><span data-stu-id="be6ab-258">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="be6ab-259">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="be6ab-259">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsWriterLockHeld">
      <MemberSignature Language="C#" Value="public bool IsWriterLockHeld { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsWriterLockHeld" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLock.IsWriterLockHeld" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsWriterLockHeld As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsWriterLockHeld { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsWriterLockHeld : bool" Usage="System.Threading.ReaderWriterLock.IsWriterLockHeld" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="be6ab-260">Obtém um valor que indica se o thread atual mantém um bloqueio de gravador.</span><span class="sxs-lookup"><span data-stu-id="be6ab-260">Gets a value indicating whether the current thread holds the writer lock.</span></span></summary>
        <value><span data-ttu-id="be6ab-261"><see langword="true" /> Se o thread atual mantiver o bloqueio de gravador; Caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="be6ab-261"><see langword="true" /> if the current thread holds the writer lock; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="be6ab-262">O exemplo de código a seguir demonstra que, quando é feita uma tentativa para adquirir um bloqueio de leitor em um thread que tem um bloqueio de gravador, `ReaderWriterLock` não concede o bloqueio de leitor, mas em vez disso, incrementa a contagem de bloqueio no bloqueio de gravador.</span><span class="sxs-lookup"><span data-stu-id="be6ab-262">The following code example demonstrates that when an attempt is made to acquire a reader lock on a thread that has a writer lock, `ReaderWriterLock` does not grant the reader lock but instead increments the lock count on the writer lock.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock.IsWriterLockHeld#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock.IsWriterLockHeld/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ReaderWriterLock.IsWriterLockHeld#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock.IsWriterLockHeld/CS/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLock.IsWriterLockHeld#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock.IsWriterLockHeld/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="be6ab-263">Threading gerenciado</span><span class="sxs-lookup"><span data-stu-id="be6ab-263">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="be6ab-264">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="be6ab-264">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReleaseLock">
      <MemberSignature Language="C#" Value="public System.Threading.LockCookie ReleaseLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.LockCookie ReleaseLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.ReleaseLock" />
      <MemberSignature Language="VB.NET" Value="Public Function ReleaseLock () As LockCookie" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::LockCookie ReleaseLock();" />
      <MemberSignature Language="F#" Value="member this.ReleaseLock : unit -&gt; System.Threading.LockCookie" Usage="readerWriterLock.ReleaseLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.LockCookie</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="be6ab-265">Libera o bloqueio, independentemente do número de vezes que o thread adquiriu o bloqueio.</span><span class="sxs-lookup"><span data-stu-id="be6ab-265">Releases the lock, regardless of the number of times the thread acquired the lock.</span></span></summary>
        <returns><span data-ttu-id="be6ab-266">Um valor <see cref="T:System.Threading.LockCookie" /> que representa o bloqueio liberado.</span><span class="sxs-lookup"><span data-stu-id="be6ab-266">A <see cref="T:System.Threading.LockCookie" /> value representing the released lock.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="be6ab-267"><xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> libera o bloqueio de leitor ou gravador, independentemente da contagem de bloqueio recursiva.</span><span class="sxs-lookup"><span data-stu-id="be6ab-267"><xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> releases the reader lock or writer lock, regardless of the recursive lock count.</span></span> <span data-ttu-id="be6ab-268">Para restaurar o estado do bloqueio, incluindo a contagem de bloqueio, passe o <xref:System.Threading.LockCookie> para <xref:System.Threading.ReaderWriterLock.RestoreLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="be6ab-268">To restore the state of the lock, including the lock count, pass the <xref:System.Threading.LockCookie> to <xref:System.Threading.ReaderWriterLock.RestoreLock%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="be6ab-269">O exemplo de código a seguir mostra como usar o <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> método para liberar o bloqueio, independentemente de quantas vezes ele foi adquirido por thread e como restaurar o estado do bloqueio mais tarde.</span><span class="sxs-lookup"><span data-stu-id="be6ab-269">The following code example shows how to use the <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> method to release the lock, regardless of how many times it has been acquired by the thread, and how to restore the state of the lock later.</span></span>  
  
 <span data-ttu-id="be6ab-270">Esse código é parte de um exemplo maior fornecido para o <xref:System.Threading.ReaderWriterLock> classe.</span><span class="sxs-lookup"><span data-stu-id="be6ab-270">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#6)]
[!code-csharp[System.Threading.ReaderWriterLock#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#6)]
[!code-vb[System.Threading.ReaderWriterLock#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#6)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="be6ab-271">Threading gerenciado</span><span class="sxs-lookup"><span data-stu-id="be6ab-271">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="be6ab-272">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="be6ab-272">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReleaseReaderLock">
      <MemberSignature Language="C#" Value="public void ReleaseReaderLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseReaderLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.ReleaseReaderLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseReaderLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseReaderLock();" />
      <MemberSignature Language="F#" Value="member this.ReleaseReaderLock : unit -&gt; unit" Usage="readerWriterLock.ReleaseReaderLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="be6ab-273">Diminui a contagem de bloqueio.</span><span class="sxs-lookup"><span data-stu-id="be6ab-273">Decrements the lock count.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="be6ab-274"><xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A> Diminui a contagem de bloqueio.</span><span class="sxs-lookup"><span data-stu-id="be6ab-274"><xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A> decrements the lock count.</span></span> <span data-ttu-id="be6ab-275">Quando a contagem chega a zero, o bloqueio é liberado.</span><span class="sxs-lookup"><span data-stu-id="be6ab-275">When the count reaches zero, the lock is released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="be6ab-276">Se um thread possui o bloqueio de gravador, chamando `ReleaseReaderLock` tem o mesmo efeito de chamar <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="be6ab-276">If a thread has the writer lock, calling `ReleaseReaderLock` has the same effect as calling <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A>.</span></span> <span data-ttu-id="be6ab-277">Se um thread não tem nenhum bloqueio, chamando `ReleaseReaderLock` lança um <xref:System.ApplicationException>.</span><span class="sxs-lookup"><span data-stu-id="be6ab-277">If a thread has no locks, calling `ReleaseReaderLock` throws an <xref:System.ApplicationException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="be6ab-278">O exemplo de código a seguir mostra como adquirir e liberar um bloqueio de leitor e como tratar a exceção gerada quando uma solicitação expira.</span><span class="sxs-lookup"><span data-stu-id="be6ab-278">The following code example shows how to acquire and release a reader lock, and how to handle the exception thrown when a request times out.</span></span>  
  
 <span data-ttu-id="be6ab-279">Esse código é parte de um exemplo maior fornecido para o <xref:System.Threading.ReaderWriterLock> classe.</span><span class="sxs-lookup"><span data-stu-id="be6ab-279">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#3)]
[!code-csharp[System.Threading.ReaderWriterLock#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#3)]
[!code-vb[System.Threading.ReaderWriterLock#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#3)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="be6ab-280">O thread não tem nenhum bloqueio de leitor ou de gravador.</span><span class="sxs-lookup"><span data-stu-id="be6ab-280">The thread does not have any reader or writer locks.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="be6ab-281">Threading gerenciado</span><span class="sxs-lookup"><span data-stu-id="be6ab-281">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="be6ab-282">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="be6ab-282">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReleaseWriterLock">
      <MemberSignature Language="C#" Value="public void ReleaseWriterLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseWriterLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.ReleaseWriterLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseWriterLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseWriterLock();" />
      <MemberSignature Language="F#" Value="member this.ReleaseWriterLock : unit -&gt; unit" Usage="readerWriterLock.ReleaseWriterLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="be6ab-283">Diminui a contagem de bloqueio no bloqueio de gravador.</span><span class="sxs-lookup"><span data-stu-id="be6ab-283">Decrements the lock count on the writer lock.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="be6ab-284"><xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> diminui o bloqueio de gravador contagem.</span><span class="sxs-lookup"><span data-stu-id="be6ab-284"><xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> decrements the writer lock count.</span></span> <span data-ttu-id="be6ab-285">Quando a contagem chega a zero, o bloqueio de gravador é liberado.</span><span class="sxs-lookup"><span data-stu-id="be6ab-285">When the count reaches zero, the writer lock is released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="be6ab-286">Se um thread tem um bloqueio de leitor, ou nenhum bloqueio, chamando `ReleaseWriterLock` lança um <xref:System.ApplicationException>.</span><span class="sxs-lookup"><span data-stu-id="be6ab-286">If a thread has a reader lock, or no locks, calling `ReleaseWriterLock` throws an <xref:System.ApplicationException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="be6ab-287">O exemplo de código a seguir mostra como adquirir e liberar um bloqueio de gravador e como tratar a exceção gerada quando uma solicitação expira.</span><span class="sxs-lookup"><span data-stu-id="be6ab-287">The following code example shows how to acquire and release a writer lock, and how to handle the exception thrown when a request times out.</span></span>  
  
 <span data-ttu-id="be6ab-288">Esse código é parte de um exemplo maior fornecido para o <xref:System.Threading.ReaderWriterLock> classe.</span><span class="sxs-lookup"><span data-stu-id="be6ab-288">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#4)]
[!code-csharp[System.Threading.ReaderWriterLock#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#4)]
[!code-vb[System.Threading.ReaderWriterLock#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#4)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="be6ab-289">O thread não tem o bloqueio de gravador.</span><span class="sxs-lookup"><span data-stu-id="be6ab-289">The thread does not have the writer lock.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="be6ab-290">Threading gerenciado</span><span class="sxs-lookup"><span data-stu-id="be6ab-290">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="be6ab-291">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="be6ab-291">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RestoreLock">
      <MemberSignature Language="C#" Value="public void RestoreLock (ref System.Threading.LockCookie lockCookie);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RestoreLock(valuetype System.Threading.LockCookie&amp; lockCookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RestoreLock (ByRef lockCookie As LockCookie)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RestoreLock(System::Threading::LockCookie % lockCookie);" />
      <MemberSignature Language="F#" Value="member this.RestoreLock :  -&gt; unit" Usage="readerWriterLock.RestoreLock lockCookie" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lockCookie" Type="System.Threading.LockCookie" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="lockCookie"><span data-ttu-id="be6ab-292">Um <see cref="T:System.Threading.LockCookie" /> retornado por <see cref="M:System.Threading.ReaderWriterLock.ReleaseLock" />.</span><span class="sxs-lookup"><span data-stu-id="be6ab-292">A <see cref="T:System.Threading.LockCookie" /> returned by <see cref="M:System.Threading.ReaderWriterLock.ReleaseLock" />.</span></span></param>
        <summary><span data-ttu-id="be6ab-293">Restaura o status de bloqueio do thread para o que era antes de chamar <see cref="M:System.Threading.ReaderWriterLock.ReleaseLock" />.</span><span class="sxs-lookup"><span data-stu-id="be6ab-293">Restores the lock status of the thread to what it was before calling <see cref="M:System.Threading.ReaderWriterLock.ReleaseLock" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="be6ab-294">O estado restaurado por `RestoreLock` inclui a contagem de bloqueio recursiva.</span><span class="sxs-lookup"><span data-stu-id="be6ab-294">The state restored by `RestoreLock` includes the recursive lock count.</span></span>  
  
 <span data-ttu-id="be6ab-295">Um thread seja bloqueado se tentar restaurar um bloqueio de leitor depois de outro thread adquiriu o bloqueio de gravador, ou se ele tentar restaurar o bloqueio de gravador após o outro thread adquiriu um bloqueio de leitor ou gravador.</span><span class="sxs-lookup"><span data-stu-id="be6ab-295">A thread blocks if it tries to restore a reader lock after another thread has acquired the writer lock, or if it tries to restore the writer lock after another thread has acquired a reader lock or writer lock.</span></span> <span data-ttu-id="be6ab-296">Porque `RestoreLock` não aceita um tempo limite, você deve ter cuidado para evitar possíveis deadlocks.</span><span class="sxs-lookup"><span data-stu-id="be6ab-296">Because `RestoreLock` does not accept a time-out, you should take care to avoid possible deadlocks.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="be6ab-297">Antes de chamar `RestoreLock`, verifique se você lançou uma todos os bloqueios adquiridos desde a chamada para <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="be6ab-297">Before calling `RestoreLock`, make sure you have released all locks acquired since the call to <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A>.</span></span> <span data-ttu-id="be6ab-298">Por exemplo, um thread deadlocks se adquire um bloqueio de leitor e, em seguida, tenta restaurar um bloqueio de gravador anterior.</span><span class="sxs-lookup"><span data-stu-id="be6ab-298">For example, a thread deadlocks if it acquires a reader lock, and then attempts to restore an earlier writer lock.</span></span> <span data-ttu-id="be6ab-299">Use <xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A> e <xref:System.Threading.ReaderWriterLock.IsWriterLockHeld%2A> para detectar esses bloqueios adicionais.</span><span class="sxs-lookup"><span data-stu-id="be6ab-299">Use <xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A> and <xref:System.Threading.ReaderWriterLock.IsWriterLockHeld%2A> to detect such additional locks.</span></span>  
  
 <span data-ttu-id="be6ab-300">Não use uma <xref:System.Threading.LockCookie> retornado de <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="be6ab-300">Do not use a <xref:System.Threading.LockCookie> returned from <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="be6ab-301">O exemplo de código a seguir mostra como usar o <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> método para liberar o bloqueio, independentemente de quantas vezes ele foi adquirido por thread e como restaurar o estado do bloqueio mais tarde.</span><span class="sxs-lookup"><span data-stu-id="be6ab-301">The following code example shows how to use the <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> method to release the lock, regardless of how many times it has been acquired by the thread, and how to restore the state of the lock later.</span></span>  
  
 <span data-ttu-id="be6ab-302">Esse código é parte de um exemplo maior fornecido para o <xref:System.Threading.ReaderWriterLock> classe.</span><span class="sxs-lookup"><span data-stu-id="be6ab-302">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#6)]
[!code-csharp[System.Threading.ReaderWriterLock#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#6)]
[!code-vb[System.Threading.ReaderWriterLock#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#6)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="be6ab-303">O endereço de <paramref name="lockCookie" /> é um ponteiro nulo.</span><span class="sxs-lookup"><span data-stu-id="be6ab-303">The address of <paramref name="lockCookie" /> is a null pointer.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="be6ab-304">Threading gerenciado</span><span class="sxs-lookup"><span data-stu-id="be6ab-304">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="be6ab-305">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="be6ab-305">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="UpgradeToWriterLock">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="be6ab-306">Faz o upgrade de um bloqueio de leitor para o bloqueio de gravador.</span><span class="sxs-lookup"><span data-stu-id="be6ab-306">Upgrades a reader lock to the writer lock.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UpgradeToWriterLock">
      <MemberSignature Language="C#" Value="public System.Threading.LockCookie UpgradeToWriterLock (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.LockCookie UpgradeToWriterLock(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function UpgradeToWriterLock (millisecondsTimeout As Integer) As LockCookie" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::LockCookie UpgradeToWriterLock(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.UpgradeToWriterLock : int -&gt; System.Threading.LockCookie" Usage="readerWriterLock.UpgradeToWriterLock millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.LockCookie</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="be6ab-307">O tempo limite em milissegundos.</span><span class="sxs-lookup"><span data-stu-id="be6ab-307">The time-out in milliseconds.</span></span></param>
        <summary><span data-ttu-id="be6ab-308">Atualiza um bloqueio de leitor para o bloqueio de gravador, usando um valor <see langword="Int32" /> para o tempo limite.</span><span class="sxs-lookup"><span data-stu-id="be6ab-308">Upgrades a reader lock to the writer lock, using an <see langword="Int32" /> value for the time-out.</span></span></summary>
        <returns><span data-ttu-id="be6ab-309">Um valor <see cref="T:System.Threading.LockCookie" />.</span><span class="sxs-lookup"><span data-stu-id="be6ab-309">A <see cref="T:System.Threading.LockCookie" /> value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="be6ab-310">Quando um thread chama `UpgradeToWriterLock` o bloqueio de leitor é liberado, independentemente da contagem de bloqueio, e o thread vai para o final da fila de bloqueio de gravador.</span><span class="sxs-lookup"><span data-stu-id="be6ab-310">When a thread calls `UpgradeToWriterLock` the reader lock is released, regardless of the lock count, and the thread goes to the end of the queue for the writer lock.</span></span> <span data-ttu-id="be6ab-311">Assim, outros threads podem gravar o recurso antes que o thread que solicitou que a atualização é concedida o bloqueio de gravador.</span><span class="sxs-lookup"><span data-stu-id="be6ab-311">Thus, other threads might write to the resource before the thread that requested the upgrade is granted the writer lock.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="be6ab-312">A exceção de tempo limite não é lançada até que o thread que chamou o <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> método pode readquirir o bloqueio de leitor.</span><span class="sxs-lookup"><span data-stu-id="be6ab-312">The time-out exception is not thrown until the thread that called the <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> method can reacquire the reader lock.</span></span> <span data-ttu-id="be6ab-313">Se houver outros segmentos aguardando o bloqueio de gravador, isso acontece imediatamente.</span><span class="sxs-lookup"><span data-stu-id="be6ab-313">If there are no other threads waiting for the writer lock, this happens immediately.</span></span> <span data-ttu-id="be6ab-314">No entanto, se outro thread está na fila de bloqueio de gravador, o thread que chamado o <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> método não é possível readquirir o bloqueio de leitor até que todos os leitores atuais lançaram seus bloqueios e um thread tenha adquirido e liberado o bloqueio de gravador.</span><span class="sxs-lookup"><span data-stu-id="be6ab-314">However, if another thread is queued for the writer lock, the thread that called the <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> method cannot reacquire the reader lock until all current readers have released their locks, and one thread has acquired and released the writer lock.</span></span> <span data-ttu-id="be6ab-315">Isso é verdadeiro mesmo se o outro thread que solicitou o bloqueio de gravador solicitou que ela depois que o thread atual é chamado de <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> método.</span><span class="sxs-lookup"><span data-stu-id="be6ab-315">This is true even if the other thread that requested the writer lock requested it after the current thread called the <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> method.</span></span>  
  
 <span data-ttu-id="be6ab-316">Para restaurar o estado de bloqueio, chame <xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A> usando o <xref:System.Threading.LockCookie> retornado pela `UpgradeToWriterLock`.</span><span class="sxs-lookup"><span data-stu-id="be6ab-316">To restore the lock state, call <xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A> using the <xref:System.Threading.LockCookie> returned by `UpgradeToWriterLock`.</span></span> <span data-ttu-id="be6ab-317">Não use isso `LockCookie` com <xref:System.Threading.ReaderWriterLock.RestoreLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="be6ab-317">Do not use this `LockCookie` with <xref:System.Threading.ReaderWriterLock.RestoreLock%2A>.</span></span>  
  
 <span data-ttu-id="be6ab-318">Quando um thread não tem nenhum bloqueio de leitor, não use `UpgradeToWriterLock`.</span><span class="sxs-lookup"><span data-stu-id="be6ab-318">When a thread has no reader lock, do not use `UpgradeToWriterLock`.</span></span> <span data-ttu-id="be6ab-319">Use <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A> em seu lugar.</span><span class="sxs-lookup"><span data-stu-id="be6ab-319">Use <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A> instead.</span></span>  
  
 <span data-ttu-id="be6ab-320">Para obter valores de tempo limite válido, consulte <xref:System.Threading.ReaderWriterLock>.</span><span class="sxs-lookup"><span data-stu-id="be6ab-320">For valid time-out values, see <xref:System.Threading.ReaderWriterLock>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="be6ab-321">O exemplo de código a seguir mostra como solicitar um bloqueio de leitor, atualize o bloqueio de leitor para um bloqueio de gravador e fazer o downgrade para um bloqueio de leitor novamente.</span><span class="sxs-lookup"><span data-stu-id="be6ab-321">The following code example shows how to request a reader lock, upgrade the reader lock to a writer lock, and downgrade to a reader lock again.</span></span>  
  
 <span data-ttu-id="be6ab-322">Esse código é parte de um exemplo maior fornecido para o <xref:System.Threading.ReaderWriterLock> classe.</span><span class="sxs-lookup"><span data-stu-id="be6ab-322">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#5)]
[!code-csharp[System.Threading.ReaderWriterLock#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#5)]
[!code-vb[System.Threading.ReaderWriterLock#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#5)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="be6ab-323">O <paramref name="millisecondsTimeout" /> expira antes que a solicitação de bloqueio seja concedida.</span><span class="sxs-lookup"><span data-stu-id="be6ab-323"><paramref name="millisecondsTimeout" /> expires before the lock request is granted.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="be6ab-324">Threading gerenciado</span><span class="sxs-lookup"><span data-stu-id="be6ab-324">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="be6ab-325">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="be6ab-325">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="UpgradeToWriterLock">
      <MemberSignature Language="C#" Value="public System.Threading.LockCookie UpgradeToWriterLock (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.LockCookie UpgradeToWriterLock(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function UpgradeToWriterLock (timeout As TimeSpan) As LockCookie" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::LockCookie UpgradeToWriterLock(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.UpgradeToWriterLock : TimeSpan -&gt; System.Threading.LockCookie" Usage="readerWriterLock.UpgradeToWriterLock timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LockCookie</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="be6ab-326">O <see langword="TimeSpan" /> que especifica o período de tempo limite.</span><span class="sxs-lookup"><span data-stu-id="be6ab-326">The <see langword="TimeSpan" /> specifying the time-out period.</span></span></param>
        <summary><span data-ttu-id="be6ab-327">Faz o upgrade de um bloqueio de leitor para o bloqueio de gravador usando um valor <see langword="TimeSpan" /> para o tempo limite.</span><span class="sxs-lookup"><span data-stu-id="be6ab-327">Upgrades a reader lock to the writer lock, using a <see langword="TimeSpan" /> value for the time-out.</span></span></summary>
        <returns><span data-ttu-id="be6ab-328">Um valor <see cref="T:System.Threading.LockCookie" />.</span><span class="sxs-lookup"><span data-stu-id="be6ab-328">A <see cref="T:System.Threading.LockCookie" /> value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="be6ab-329">Quando um thread chama `UpgradeToWriterLock` o bloqueio de leitor é liberado, independentemente da contagem de bloqueio, e o thread vai para o final da fila de bloqueio de gravador.</span><span class="sxs-lookup"><span data-stu-id="be6ab-329">When a thread calls `UpgradeToWriterLock` the reader lock is released, regardless of the lock count, and the thread goes to the end of the queue for the writer lock.</span></span> <span data-ttu-id="be6ab-330">Assim, outros threads podem gravar o recurso antes que o thread que solicitou que a atualização é concedida o bloqueio de gravador.</span><span class="sxs-lookup"><span data-stu-id="be6ab-330">Thus, other threads might write to the resource before the thread that requested the upgrade is granted the writer lock.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="be6ab-331">A exceção de tempo limite não é lançada até que o thread que chamou o <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> método pode readquirir o bloqueio de leitor.</span><span class="sxs-lookup"><span data-stu-id="be6ab-331">The time-out exception is not thrown until the thread that called the <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> method can reacquire the reader lock.</span></span> <span data-ttu-id="be6ab-332">Se houver outros segmentos aguardando o bloqueio de gravador, isso acontece imediatamente.</span><span class="sxs-lookup"><span data-stu-id="be6ab-332">If there are no other threads waiting for the writer lock, this happens immediately.</span></span> <span data-ttu-id="be6ab-333">No entanto, se outro thread está na fila de bloqueio de gravador, o thread que chamado o <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> método não é possível readquirir o bloqueio de leitor até que todos os leitores atuais lançaram seus bloqueios e um thread tenha adquirido e liberado o bloqueio de gravador.</span><span class="sxs-lookup"><span data-stu-id="be6ab-333">However, if another thread is queued for the writer lock, the thread that called the <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> method cannot reacquire the reader lock until all current readers have released their locks, and one thread has acquired and released the writer lock.</span></span> <span data-ttu-id="be6ab-334">Isso é verdadeiro mesmo se o outro thread que solicitou o bloqueio de gravador solicitou que ela depois que o thread atual é chamado de <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> método.</span><span class="sxs-lookup"><span data-stu-id="be6ab-334">This is true even if the other thread that requested the writer lock requested it after the current thread called the <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> method.</span></span>  
  
 <span data-ttu-id="be6ab-335">Para restaurar o estado de bloqueio, chame <xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A> usando o <xref:System.Threading.LockCookie> retornado pela `UpgradeToWriterLock`.</span><span class="sxs-lookup"><span data-stu-id="be6ab-335">To restore the lock state, call <xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A> using the <xref:System.Threading.LockCookie> returned by `UpgradeToWriterLock`.</span></span> <span data-ttu-id="be6ab-336">Não use isso `LockCookie` com <xref:System.Threading.ReaderWriterLock.RestoreLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="be6ab-336">Do not use this `LockCookie` with <xref:System.Threading.ReaderWriterLock.RestoreLock%2A>.</span></span>  
  
 <span data-ttu-id="be6ab-337">Quando um thread não tem nenhum bloqueio de leitor, não use `UpgradeToWriterLock`.</span><span class="sxs-lookup"><span data-stu-id="be6ab-337">When a thread has no reader lock, do not use `UpgradeToWriterLock`.</span></span> <span data-ttu-id="be6ab-338">Use <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A> em seu lugar.</span><span class="sxs-lookup"><span data-stu-id="be6ab-338">Use <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A> instead.</span></span>  
  
 <span data-ttu-id="be6ab-339">Para obter valores de tempo limite válido, consulte <xref:System.Threading.ReaderWriterLock>.</span><span class="sxs-lookup"><span data-stu-id="be6ab-339">For valid time-out values, see <xref:System.Threading.ReaderWriterLock>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="be6ab-340">O <paramref name="timeout" /> expira antes que a solicitação de bloqueio seja concedida.</span><span class="sxs-lookup"><span data-stu-id="be6ab-340"><paramref name="timeout" /> expires before the lock request is granted.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="be6ab-341"><paramref name="timeout" /> especifica um valor negativo diferente de -1 milissegundo.</span><span class="sxs-lookup"><span data-stu-id="be6ab-341"><paramref name="timeout" /> specifies a negative value other than -1 milliseconds.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="be6ab-342">Threading gerenciado</span><span class="sxs-lookup"><span data-stu-id="be6ab-342">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="be6ab-343">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="be6ab-343">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriterSeqNum">
      <MemberSignature Language="C#" Value="public int WriterSeqNum { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WriterSeqNum" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLock.WriterSeqNum" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WriterSeqNum As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int WriterSeqNum { int get(); };" />
      <MemberSignature Language="F#" Value="member this.WriterSeqNum : int" Usage="System.Threading.ReaderWriterLock.WriterSeqNum" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="be6ab-344">Obtém o número de sequência atual.</span><span class="sxs-lookup"><span data-stu-id="be6ab-344">Gets the current sequence number.</span></span></summary>
        <value><span data-ttu-id="be6ab-345">O número de sequência atual.</span><span class="sxs-lookup"><span data-stu-id="be6ab-345">The current sequence number.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="be6ab-346">A sequência número aumenta sempre que um thread adquire o bloqueio de gravador.</span><span class="sxs-lookup"><span data-stu-id="be6ab-346">The sequence number increases whenever a thread acquires the writer lock.</span></span> <span data-ttu-id="be6ab-347">Você pode salvar o número de sequência e passá-lo para <xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A> em um momento posterior, se você quiser determinar se outros threads tiveram adquirido o bloqueio de gravador nesse meio tempo.</span><span class="sxs-lookup"><span data-stu-id="be6ab-347">You can save the sequence number and pass it to <xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A> at a later time, if you want to determine whether other threads have acquired the writer lock in the meantime.</span></span>  
  
 <span data-ttu-id="be6ab-348">Você pode usar `WriterSeqNum` para melhorar o desempenho do aplicativo.</span><span class="sxs-lookup"><span data-stu-id="be6ab-348">You can use `WriterSeqNum` to improve application performance.</span></span> <span data-ttu-id="be6ab-349">Por exemplo, um thread pode armazenar em cache as informações que ele obtém mantendo um bloqueio de leitor.</span><span class="sxs-lookup"><span data-stu-id="be6ab-349">For example, a thread might cache the information it obtains while holding a reader lock.</span></span> <span data-ttu-id="be6ab-350">Após a liberação e mais tarde readquirir o bloqueio, o thread pode determinar se outros threads têm escrito para o recurso chamando `AnyWritersSince`; se não, as informações em cache podem ser usadas.</span><span class="sxs-lookup"><span data-stu-id="be6ab-350">After releasing and later reacquiring the lock, the thread can determine whether other threads have written to the resource by calling `AnyWritersSince`; if not, the cached information can be used.</span></span> <span data-ttu-id="be6ab-351">Essa técnica é útil quando as informações protegidas pelo bloqueio de leitura é caro; Por exemplo, executando uma consulta de banco de dados.</span><span class="sxs-lookup"><span data-stu-id="be6ab-351">This technique is useful when reading the information protected by the lock is expensive; for example, running a database query.</span></span>  
  
 <span data-ttu-id="be6ab-352">O chamador deve ser mantendo um bloqueio de leitor ou um bloqueio de gravador para que o número de sequência para serem úteis.</span><span class="sxs-lookup"><span data-stu-id="be6ab-352">The caller must be holding a reader lock or a writer lock in order for the sequence number to be useful.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="be6ab-353">O exemplo de código a seguir mostra como usar o <xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A> propriedade e o <xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A> pela última vez, método para determinar se outro thread adquiriu o bloqueio de gravador de recurso protegido desde o thread atual mantém o bloqueio de gravador.</span><span class="sxs-lookup"><span data-stu-id="be6ab-353">The following code example shows how to use the <xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A> property and the <xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A> method to determine whether another thread acquired the writer lock on the protected resource since the current thread last held the writer lock.</span></span>  
  
 <span data-ttu-id="be6ab-354">Esse código é parte de um exemplo maior fornecido para o <xref:System.Threading.ReaderWriterLock> classe.</span><span class="sxs-lookup"><span data-stu-id="be6ab-354">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#6)]
[!code-csharp[System.Threading.ReaderWriterLock#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#6)]
[!code-vb[System.Threading.ReaderWriterLock#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#6)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="be6ab-355">Threading gerenciado</span><span class="sxs-lookup"><span data-stu-id="be6ab-355">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="be6ab-356">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="be6ab-356">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>