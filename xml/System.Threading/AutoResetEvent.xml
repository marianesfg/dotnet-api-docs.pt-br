<Type Name="AutoResetEvent" FullName="System.Threading.AutoResetEvent">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0f065cc64ff40bfc4392ac5996a4573819cea143" /><Meta Name="ms.sourcegitcommit" Value="adc8598fd19d91438cacaa8fa7ce613e28c8218e" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="12/11/2018" /><Meta Name="ms.locfileid" Value="53228590" /></Metadata><TypeSignature Language="C#" Value="public sealed class AutoResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AutoResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.AutoResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AutoResetEvent&#xA;Inherits EventWaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class AutoResetEvent sealed : System::Threading::EventWaitHandle" />
  <TypeSignature Language="F#" Value="type AutoResetEvent = class&#xA;    inherit EventWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-1.1">System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Notifica um thread de espera em que um evento ocorreu. Essa classe não pode ser herdada.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `AutoResetEvent` permite que os threads se comunicam entre si por meio da sinalização. Normalmente, você usa essa classe quando threads precisam de acesso exclusivo a um recurso.  
  
> [!IMPORTANT]
>  Esse tipo implementa o <xref:System.IDisposable> interface. Quando você terminar de usar o tipo, você deve descartá-lo diretamente ou indiretamente. Para descartar o tipo diretamente, chame seu <xref:System.IDisposable.Dispose%2A> método em um `try` / `catch` bloco. Para descartá-los indiretamente, usar uma construção de linguagem, como `using` (em c#) ou `Using` (no Visual Basic). Para obter mais informações, consulte a seção "Usando um objeto que implementa IDisposable" o <xref:System.IDisposable> tópico da interface.  
  
 Um thread aguarda um sinal chamando <xref:System.Threading.WaitHandle.WaitOne%2A> sobre o `AutoResetEvent`. Se o `AutoResetEvent` está em estado não sinalizado, o thread bloqueia, aguardando o thread que está sendo controla o recurso para sinalizar que o recurso está disponível por meio da chamada <xref:System.Threading.EventWaitHandle.Set%2A>.  
  
 Chamando `Set` sinais `AutoResetEvent` para liberar um thread em espera. `AutoResetEvent` permanece sinalizado até que um único thread em espera é liberado e, em seguida, retorna automaticamente para o estado não sinalizado. Se nenhum thread estiver aguardando, o estado permanecerá sinalizado indefinidamente.  
  
 Se um thread chama <xref:System.Threading.WaitHandle.WaitOne%2A> enquanto o <xref:System.Threading.AutoResetEvent> está no estado sinalizado, o thread não bloqueia. O <xref:System.Threading.AutoResetEvent> libera o thread imediatamente e retorna ao estado não sinalizado.  
  
> [!IMPORTANT]
>  Não há nenhuma garantia de que todas as chamadas para o <xref:System.Threading.EventWaitHandle.Set%2A> método lançará um thread. Se duas chamadas são muito próximos uns dos outros, para que a segunda chamada ocorre antes que um thread foi lançado, apenas um thread será liberado. É como se a segunda chamada não aconteceu. Além disso, se <xref:System.Threading.EventWaitHandle.Set%2A> é chamado quando não houver nenhum segmento esperando e o <xref:System.Threading.AutoResetEvent> já é sinalizado, a chamada não tem nenhum efeito.  
  
 Você pode controlar o estado inicial de um `AutoResetEvent` , passando um valor booleano para o construtor: `true` se o estado inicial é sinalizado e `false` caso contrário.  
  
 `AutoResetEvent` também pode ser usado com o `static` <xref:System.Threading.WaitHandle.WaitAll%2A> e <xref:System.Threading.WaitHandle.WaitAny%2A> métodos.  
  
 Para obter mais informações sobre mecanismos de sincronização de thread, consulte [AutoResetEvent](~/docs/standard/threading/autoresetevent.md) na documentação conceitual.  
  
 Começando com o .NET Framework versão 2.0, <xref:System.Threading.AutoResetEvent> deriva o novo <xref:System.Threading.EventWaitHandle> classe. Uma <xref:System.Threading.AutoResetEvent> é funcionalmente equivalente a um <xref:System.Threading.EventWaitHandle> criado com <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType>.  
  
> [!NOTE]
>  Ao contrário do <xref:System.Threading.AutoResetEvent> classe, o <xref:System.Threading.EventWaitHandle> classe fornece acesso a eventos de sincronização do sistema nomeado.  
  
   
  
## Examples  
 O exemplo a seguir mostra como usar <xref:System.Threading.AutoResetEvent> para liberar um thread por vez, chamando o <xref:System.Threading.EventWaitHandle.Set%2A> método (na classe base) cada vez que o usuário pressiona o **Enter** chave. O exemplo inicia três threads, o que esperam um <xref:System.Threading.AutoResetEvent> que foi criado no estado sinalizado. O primeiro thread é liberado imediatamente, porque o <xref:System.Threading.AutoResetEvent> já está no estado sinalizado. Isso redefine o <xref:System.Threading.AutoResetEvent> para o estado não sinalizado, para que os threads subsequentes bloqueiam. Os threads bloqueados não são liberados até que o usuário libera-los um por vez, pressionando a **Enter** chave.  
  
 Depois que os threads são liberados desde a primeira <xref:System.Threading.AutoResetEvent>, eles esperam em outro <xref:System.Threading.AutoResetEvent> que foi criada no estado não sinalizado. Bloqueiam todas as três threads, portanto, o <xref:System.Threading.EventWaitHandle.Set%2A> método deve ser chamado três vezes para liberar todos eles.  
  
 [!code-cpp[System.Threading.AutoResetEvent#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CPP/simplerisbetter.cpp#3)]
 [!code-csharp[System.Threading.AutoResetEvent#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CS/simplerisbetter.cs#3)]
 [!code-vb[System.Threading.AutoResetEvent#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/VB/simplerisbetter.vb#3)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Essa classe é thread-safe.</threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
    <related type="Article" href="~/docs/standard/threading/index.md">Threading gerenciado</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AutoResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AutoResetEvent(bool initialState);" />
      <MemberSignature Language="F#" Value="new System.Threading.AutoResetEvent : bool -&gt; System.Threading.AutoResetEvent" Usage="new System.Threading.AutoResetEvent initialState" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState"><see langword="true" /> para definir o estado inicial como sinalizado; <see langword="false" /> para defini-lo como não sinalizado.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Threading.AutoResetEvent" /> com um valor booliano que indica se é necessário definir o estado inicial como sinalizado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir usa um <xref:System.Threading.AutoResetEvent> para sincronizar as atividades dos dois threads. O primeiro segmento, que é o thread do aplicativo, execute `Main`. Ele grava os valores para o recurso protegido, o que é um `static` (`Shared` no Visual Basic) chamado de campo `number`. O segundo thread estático é executado `ThreadProc` método, que lê os valores gravados pelo `Main`.  
  
 O `ThreadProc` método aguarda o <xref:System.Threading.AutoResetEvent>. Quando `Main` chamadas a <xref:System.Threading.EventWaitHandle.Set%2A> método sobre o <xref:System.Threading.AutoResetEvent>, o `ThreadProc` método lê um valor. O <xref:System.Threading.AutoResetEvent> redefine imediatamente, portanto, o `ThreadProc` método aguarda novamente.  
  
 A lógica do programa garante que o `ThreadProc` método nunca ler o mesmo valor duas vezes. Ele não garante que o `ThreadProc` método lerá todos os valores gravados pelo `Main`. Essa garantia exigiria um segundo <xref:System.Threading.AutoResetEvent> bloqueio.  
  
 Após cada operação de gravação `Main` produz chamando o <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> método, para permitir que o thread de segundo para executar. Caso contrário, em um computador de processador único `Main` escreveria muitos valores entre quaisquer duas operações de leitura.  
  
 [!code-cpp[System.Threading.AutoResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.AutoResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CS/class1.cs#1)]
 [!code-vb[System.Threading.AutoResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
        <related type="Article" href="~/docs/standard/threading/index.md">Threading gerenciado</related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public bool Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Function Reset () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; bool" Usage="autoResetEvent.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Define o estado do evento como não sinalizado, o que causa o bloqueio dos threads.</summary>
        <returns><see langword="true" /> se a operação for bem-sucedida; caso contrário, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public bool Set ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Set() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.Set" />
      <MemberSignature Language="VB.NET" Value="Public Function Set () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Set();" />
      <MemberSignature Language="F#" Value="member this.Set : unit -&gt; bool" Usage="autoResetEvent.Set " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Define o estado do evento a ser sinalizado, que permite, no máximo, um thread em espera para continuar.</summary>
        <returns><see langword="true" /> se a operação for bem-sucedida; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
O método Set libera um único thread. Se não houver nenhum threads em espera, o identificador de espera permanece sinalizado até que um thread tente esperar por ele, ou até que seu método Reset é chamado.

> [!IMPORTANT]
> Não há nenhuma garantia de que todas as chamadas para o método Set irá liberar um thread. Se duas chamadas são muito próximos uns dos outros, para que a segunda chamada ocorre antes que um thread foi lançado, apenas um thread será liberado - como se a segunda chamada não aconteceu. Além disso, se o método Set é chamado quando não houver nenhum segmento esperando e o <xref:System.Threading.AutoResetEvent> já é sinalizado, a chamada não tem nenhum efeito.

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>