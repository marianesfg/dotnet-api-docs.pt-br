<Type Name="AutoResetEvent" FullName="System.Threading.AutoResetEvent">
  <TypeSignature Language="C#" Value="public sealed class AutoResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AutoResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.AutoResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AutoResetEvent&#xA;Inherits EventWaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class AutoResetEvent sealed : System::Threading::EventWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="1eff4-101">Notifica um thread de espera em que um evento ocorreu.</span><span class="sxs-lookup"><span data-stu-id="1eff4-101">Notifies a waiting thread that an event has occurred.</span></span> <span data-ttu-id="1eff4-102">Essa classe não pode ser herdada.</span><span class="sxs-lookup"><span data-stu-id="1eff4-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1eff4-103">`AutoResetEvent` permite que os threads para se comunicar entre si por sinalização.</span><span class="sxs-lookup"><span data-stu-id="1eff4-103">`AutoResetEvent` allows threads to communicate with each other by signaling.</span></span> <span data-ttu-id="1eff4-104">Normalmente, você usa esta classe quando precisam de threads acesso exclusivo a um recurso.</span><span class="sxs-lookup"><span data-stu-id="1eff4-104">Typically, you use this class when threads need exclusive access to a resource.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1eff4-105">Este tipo implementa o <xref:System.IDisposable> interface.</span><span class="sxs-lookup"><span data-stu-id="1eff4-105">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="1eff4-106">Quando você terminar de usar o tipo, descarte-direta ou indiretamente.</span><span class="sxs-lookup"><span data-stu-id="1eff4-106">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="1eff4-107">Para descartar o tipo diretamente, chame seu <xref:System.IDisposable.Dispose%2A> método em um `try` / `catch` bloco.</span><span class="sxs-lookup"><span data-stu-id="1eff4-107">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="1eff4-108">Para descartar indiretamente dele, use uma construção de linguagem, como `using` (em c#) ou `Using` (no Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="1eff4-108">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="1eff4-109">Para obter mais informações, consulte a seção "Usando um objeto que implementa IDisposable" o <xref:System.IDisposable> tópico de interface.</span><span class="sxs-lookup"><span data-stu-id="1eff4-109">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="1eff4-110">Um thread aguarda um sinal chamando <xref:System.Threading.WaitHandle.WaitOne%2A> sobre o `AutoResetEvent`.</span><span class="sxs-lookup"><span data-stu-id="1eff4-110">A thread waits for a signal by calling <xref:System.Threading.WaitHandle.WaitOne%2A> on the `AutoResetEvent`.</span></span> <span data-ttu-id="1eff4-111">Se o `AutoResetEvent` está em estado não sinalizado, os blocos de thread, aguardando o thread que atualmente controla o recurso para sinalizar que o recurso está disponível por meio da chamada <xref:System.Threading.EventWaitHandle.Set%2A>.</span><span class="sxs-lookup"><span data-stu-id="1eff4-111">If the `AutoResetEvent` is in the non-signaled state, the thread blocks, waiting for the thread that currently controls the resource to signal that the resource is available by calling <xref:System.Threading.EventWaitHandle.Set%2A>.</span></span>  
  
 <span data-ttu-id="1eff4-112">Chamando `Set` sinais `AutoResetEvent` para liberar um thread de espera.</span><span class="sxs-lookup"><span data-stu-id="1eff4-112">Calling `Set` signals `AutoResetEvent` to release a waiting thread.</span></span> <span data-ttu-id="1eff4-113">`AutoResetEvent` permanece sinalizado até que um único thread de espera é liberado e retorna automaticamente para o estado não sinalizado.</span><span class="sxs-lookup"><span data-stu-id="1eff4-113">`AutoResetEvent` remains signaled until a single waiting thread is released, and then automatically returns to the non-signaled state.</span></span> <span data-ttu-id="1eff4-114">Se nenhum segmento estiver aguardando, o estado permanece sinalizado indefinidamente.</span><span class="sxs-lookup"><span data-stu-id="1eff4-114">If no threads are waiting, the state remains signaled indefinitely.</span></span>  
  
 <span data-ttu-id="1eff4-115">Se um thread chama <xref:System.Threading.WaitHandle.WaitOne%2A> enquanto o <xref:System.Threading.AutoResetEvent> está no estado sinalizado, o thread não bloquear.</span><span class="sxs-lookup"><span data-stu-id="1eff4-115">If a thread calls <xref:System.Threading.WaitHandle.WaitOne%2A> while the <xref:System.Threading.AutoResetEvent> is in the signaled state, the thread does not block.</span></span> <span data-ttu-id="1eff4-116">O <xref:System.Threading.AutoResetEvent> libera o thread imediatamente e retorna ao estado não sinalizado.</span><span class="sxs-lookup"><span data-stu-id="1eff4-116">The <xref:System.Threading.AutoResetEvent> releases the thread immediately and returns to the non-signaled state.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1eff4-117">Não há nenhuma garantia de que todas as chamadas para o <xref:System.Threading.EventWaitHandle.Set%2A> método lançará um thread.</span><span class="sxs-lookup"><span data-stu-id="1eff4-117">There is no guarantee that every call to the <xref:System.Threading.EventWaitHandle.Set%2A> method will release a thread.</span></span> <span data-ttu-id="1eff4-118">Se duas chamadas estiverem muito juntos, para que a segunda chamada ocorre antes de um thread foi liberado, apenas um thread é liberado.</span><span class="sxs-lookup"><span data-stu-id="1eff4-118">If two calls are too close together, so that the second call occurs before a thread has been released, only one thread is released.</span></span> <span data-ttu-id="1eff4-119">É como se a segunda chamada não aconteceu.</span><span class="sxs-lookup"><span data-stu-id="1eff4-119">It is as if the second call did not happen.</span></span> <span data-ttu-id="1eff4-120">Além disso, se <xref:System.Threading.EventWaitHandle.Set%2A> é chamado quando não houver nenhum thread de espera e o <xref:System.Threading.AutoResetEvent> já está sinalizado, a chamada não tem nenhum efeito.</span><span class="sxs-lookup"><span data-stu-id="1eff4-120">Also, if <xref:System.Threading.EventWaitHandle.Set%2A> is called when there are no threads waiting and the <xref:System.Threading.AutoResetEvent> is already signaled, the call has no effect.</span></span>  
  
 <span data-ttu-id="1eff4-121">Você pode controlar o estado inicial de um `AutoResetEvent` passando um valor booleano para o construtor: `true` se o estado inicial é sinalizado e `false` caso contrário.</span><span class="sxs-lookup"><span data-stu-id="1eff4-121">You can control the initial state of an `AutoResetEvent` by passing a Boolean value to the constructor: `true` if the initial state is signaled and `false` otherwise.</span></span>  
  
 <span data-ttu-id="1eff4-122">`AutoResetEvent` também pode ser usado com o `static` <xref:System.Threading.WaitHandle.WaitAll%2A> e <xref:System.Threading.WaitHandle.WaitAny%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="1eff4-122">`AutoResetEvent` can also be used with the `static`<xref:System.Threading.WaitHandle.WaitAll%2A> and <xref:System.Threading.WaitHandle.WaitAny%2A> methods.</span></span>  
  
 <span data-ttu-id="1eff4-123">Para obter mais informações sobre mecanismos de sincronização de thread, consulte [AutoResetEvent](~/docs/standard/threading/autoresetevent.md) na documentação conceitual.</span><span class="sxs-lookup"><span data-stu-id="1eff4-123">For more information about thread synchronization mechanisms, see [AutoResetEvent](~/docs/standard/threading/autoresetevent.md) in the conceptual documentation.</span></span>  
  
 <span data-ttu-id="1eff4-124">Começando com o .NET Framework versão 2.0, <xref:System.Threading.AutoResetEvent> deriva o novo <xref:System.Threading.EventWaitHandle> classe.</span><span class="sxs-lookup"><span data-stu-id="1eff4-124">Beginning with the .NET Framework version 2.0, <xref:System.Threading.AutoResetEvent> derives from the new <xref:System.Threading.EventWaitHandle> class.</span></span> <span data-ttu-id="1eff4-125">Um <xref:System.Threading.AutoResetEvent> é funcionalmente equivalente a uma <xref:System.Threading.EventWaitHandle> criado com <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="1eff4-125">An <xref:System.Threading.AutoResetEvent> is functionally equivalent to an <xref:System.Threading.EventWaitHandle> created with <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1eff4-126">Ao contrário de <xref:System.Threading.AutoResetEvent> classe, o <xref:System.Threading.EventWaitHandle> classe fornece acesso a chamado sistema de eventos de sincronização.</span><span class="sxs-lookup"><span data-stu-id="1eff4-126">Unlike the <xref:System.Threading.AutoResetEvent> class, the <xref:System.Threading.EventWaitHandle> class provides access to named system synchronization events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1eff4-127">O exemplo a seguir mostra como usar <xref:System.Threading.AutoResetEvent> para liberar um thread de cada vez, chamando o <xref:System.Threading.EventWaitHandle.Set%2A> método (na classe base) cada vez que o usuário pressiona o **Enter** chave.</span><span class="sxs-lookup"><span data-stu-id="1eff4-127">The following example shows how to use <xref:System.Threading.AutoResetEvent> to release one thread at a time, by calling the <xref:System.Threading.EventWaitHandle.Set%2A> method (on the base class) each time the user presses the **Enter** key.</span></span> <span data-ttu-id="1eff4-128">O exemplo inicia três threads, o que esperar por um <xref:System.Threading.AutoResetEvent> que foi criado no estado sinalizado.</span><span class="sxs-lookup"><span data-stu-id="1eff4-128">The example starts three threads, which wait on an <xref:System.Threading.AutoResetEvent> that was created in the signaled state.</span></span> <span data-ttu-id="1eff4-129">O primeiro thread é liberado imediatamente, porque o <xref:System.Threading.AutoResetEvent> já está no estado sinalizado.</span><span class="sxs-lookup"><span data-stu-id="1eff4-129">The first thread is released immediately, because the <xref:System.Threading.AutoResetEvent> is already in the signaled state.</span></span> <span data-ttu-id="1eff4-130">Isso redefine o <xref:System.Threading.AutoResetEvent> para o estado não sinalizado, para que os threads subsequentes bloqueiam.</span><span class="sxs-lookup"><span data-stu-id="1eff4-130">This resets the <xref:System.Threading.AutoResetEvent> to the non-signaled state, so that subsequent threads block.</span></span> <span data-ttu-id="1eff4-131">Os threads bloqueados não são liberados até que o usuário libera um por vez pressionando o **Enter** chave.</span><span class="sxs-lookup"><span data-stu-id="1eff4-131">The blocked threads are not released until the user releases them one at a time by pressing the **Enter** key.</span></span>  
  
 <span data-ttu-id="1eff4-132">Depois que os threads são liberados da primeira <xref:System.Threading.AutoResetEvent>, eles esperam em outro <xref:System.Threading.AutoResetEvent> que foi criado no estado não sinalizado.</span><span class="sxs-lookup"><span data-stu-id="1eff4-132">After the threads are released from the first <xref:System.Threading.AutoResetEvent>, they wait on another <xref:System.Threading.AutoResetEvent> that was created in the non-signaled state.</span></span> <span data-ttu-id="1eff4-133">Bloqueiam todas as três threads, portanto, o <xref:System.Threading.EventWaitHandle.Set%2A> método deve ser chamado três vezes para liberar todos eles.</span><span class="sxs-lookup"><span data-stu-id="1eff4-133">All three threads block, so the <xref:System.Threading.EventWaitHandle.Set%2A> method must be called three times to release them all.</span></span>  
  
 [!code-cpp[System.Threading.AutoResetEvent#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CPP/simplerisbetter.cpp#3)]
 [!code-csharp[System.Threading.AutoResetEvent#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CS/simplerisbetter.cs#3)]
 [!code-vb[System.Threading.AutoResetEvent#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/VB/simplerisbetter.vb#3)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="1eff4-134">Essa classe é thread-safe.</span><span class="sxs-lookup"><span data-stu-id="1eff4-134">This class is thread safe.</span></span></threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AutoResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AutoResetEvent(bool initialState);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState">
          <span data-ttu-id="1eff4-135"><see langword="true" /> para definir o estado inicial como sinalizado; <see langword="false" /> para defini-lo como não sinalizado.</span><span class="sxs-lookup"><span data-stu-id="1eff4-135"><see langword="true" /> to set the initial state to signaled; <see langword="false" /> to set the initial state to non-signaled.</span></span></param>
        <summary><span data-ttu-id="1eff4-136">Inicializa uma nova instância da classe <see cref="T:System.Threading.AutoResetEvent" /> com um valor booliano que indica se é necessário definir o estado inicial como sinalizado.</span><span class="sxs-lookup"><span data-stu-id="1eff4-136">Initializes a new instance of the <see cref="T:System.Threading.AutoResetEvent" /> class with a Boolean value indicating whether to set the initial state to signaled.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1eff4-137">O exemplo a seguir usa um <xref:System.Threading.AutoResetEvent> para sincronizar as atividades dos dois threads.</span><span class="sxs-lookup"><span data-stu-id="1eff4-137">The following example uses an <xref:System.Threading.AutoResetEvent> to synchronize the activities of two threads.</span></span> <span data-ttu-id="1eff4-138">O primeiro segmento, que é o thread de aplicativo, execute `Main`.</span><span class="sxs-lookup"><span data-stu-id="1eff4-138">The first thread, which is the application thread, executes `Main`.</span></span> <span data-ttu-id="1eff4-139">Ele grava os valores para o recurso protegido, o que é um `static` (`Shared` no Visual Basic) campo chamado `number`.</span><span class="sxs-lookup"><span data-stu-id="1eff4-139">It writes values to the protected resource, which is a `static` (`Shared` in Visual Basic) field named `number`.</span></span> <span data-ttu-id="1eff4-140">O thread de segundo executa estático `ThreadProc` método, que lê os valores gravados pelo `Main`.</span><span class="sxs-lookup"><span data-stu-id="1eff4-140">The second thread executes the static `ThreadProc` method, which reads the values written by `Main`.</span></span>  
  
 <span data-ttu-id="1eff4-141">O `ThreadProc` método aguarda o <xref:System.Threading.AutoResetEvent>.</span><span class="sxs-lookup"><span data-stu-id="1eff4-141">The `ThreadProc` method waits for the <xref:System.Threading.AutoResetEvent>.</span></span> <span data-ttu-id="1eff4-142">Quando `Main` chama o <xref:System.Threading.EventWaitHandle.Set%2A> método o <xref:System.Threading.AutoResetEvent>, o `ThreadProc` método lê um valor.</span><span class="sxs-lookup"><span data-stu-id="1eff4-142">When `Main` calls the <xref:System.Threading.EventWaitHandle.Set%2A> method on the <xref:System.Threading.AutoResetEvent>, the `ThreadProc` method reads one value.</span></span> <span data-ttu-id="1eff4-143">O <xref:System.Threading.AutoResetEvent> redefine imediatamente, portanto, o `ThreadProc` método aguarda novamente.</span><span class="sxs-lookup"><span data-stu-id="1eff4-143">The <xref:System.Threading.AutoResetEvent> immediately resets, so the `ThreadProc` method waits again.</span></span>  
  
 <span data-ttu-id="1eff4-144">A lógica do programa garante que o `ThreadProc` método nunca ler o mesmo valor duas vezes.</span><span class="sxs-lookup"><span data-stu-id="1eff4-144">The program logic guarantees that the `ThreadProc` method will never read the same value two times.</span></span> <span data-ttu-id="1eff4-145">Isso não garante que o `ThreadProc` método lerá todos os valores gravados pelo `Main`.</span><span class="sxs-lookup"><span data-stu-id="1eff4-145">It does not guarantee that the `ThreadProc` method will read every value written by `Main`.</span></span> <span data-ttu-id="1eff4-146">Garantia de que exigiria um segundo <xref:System.Threading.AutoResetEvent> bloqueio.</span><span class="sxs-lookup"><span data-stu-id="1eff4-146">That guarantee would require a second <xref:System.Threading.AutoResetEvent> lock.</span></span>  
  
 <span data-ttu-id="1eff4-147">Depois de cada operação de gravação, `Main` produz chamando o <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> método para fornecer o thread de segundo uma possibilidade de executar.</span><span class="sxs-lookup"><span data-stu-id="1eff4-147">After each write operation, `Main` yields by calling the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method, to give the second thread a chance to execute.</span></span> <span data-ttu-id="1eff4-148">Caso contrário, em um computador com processador único `Main` escreve muitos valores entre quaisquer duas operações de leitura.</span><span class="sxs-lookup"><span data-stu-id="1eff4-148">Otherwise, on a single-processor computer `Main` would write many values between any two read operations.</span></span>  
  
 [!code-cpp[System.Threading.AutoResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.AutoResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CS/class1.cs#1)]
 [!code-vb[System.Threading.AutoResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
      </Docs>
    </Member>
  </Members>
</Type>