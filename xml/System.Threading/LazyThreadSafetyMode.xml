<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="LazyThreadSafetyMode.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac57b8cb3cb58c44ad9e2ea7abef87a229aed01ec6a.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7b8cb3cb58c44ad9e2ea7abef87a229aed01ec6a</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Specifies how a <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance synchronizes access among multiple threads.</source>
          <target state="translated">Especifica como uma instância <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> sincroniza o acesso entre vários threads.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Use this enumeration to specify the <ph id="ph1">`mode`</ph> parameter of <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> constructors.</source>
          <target state="translated">Use esta enumeração para especificar o <ph id="ph1">`mode`</ph> parâmetro <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> construtores.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>The effects of all constructors on thread synchronization can be described in terms of this enumeration, whether or not they have <ph id="ph1">`mode`</ph> parameters.</source>
          <target state="translated">Os efeitos de todos os construtores na sincronização de thread podem ser descritos em termos esta enumeração tenham ou não <ph id="ph1">`mode`</ph> parâmetros.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>A <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance is initialized either by a user-specified initialization method or by the default constructor for <ph id="ph2">`T`</ph>.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instância é inicializada por um método de inicialização especificado pelo usuário ou pelo construtor padrão para <ph id="ph2">`T`</ph>.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>The initialization method is specified by the <ph id="ph1">`valueFactory`</ph> parameter of a <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> constructor.</source>
          <target state="translated">O método de inicialização for especificado o <ph id="ph1">`valueFactory`</ph> parâmetro de um <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> construtor.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>The method returns an instance of <ph id="ph1">`T`</ph>, which is the type that is lazily instantiated by the instance of <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph>.</source>
          <target state="translated">O método retorna uma instância de <ph id="ph1">`T`</ph>, que é o tipo que é instanciado lentamente pela instância do <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>If a constructor does not have a <ph id="ph1">`valueFactory`</ph> parameter, the default constructor for <ph id="ph2">`T`</ph> is used to initialize the <ph id="ph3">&lt;xref:System.Lazy%601&gt;</ph> instance.</source>
          <target state="translated">Se um construtor não tiver um <ph id="ph1">`valueFactory`</ph> parâmetro, o construtor padrão para <ph id="ph2">`T`</ph> é usado para inicializar o <ph id="ph3">&lt;xref:System.Lazy%601&gt;</ph> instância.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>In either case, initialization occurs the first time you call the <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">Em ambos os casos, a inicialização ocorre na primeira vez que você chamar o <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A?displayProperty=nameWithType&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>In addition to specifying the thread safety of a <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance, this enumeration affects exception caching.</source>
          <target state="translated">Além de especificar a segurança de thread de um <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instância, esta enumeração afeta o cache de exceções.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>When exceptions are cached for a <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance, you get only one chance to initialize the instance.</source>
          <target state="translated">Quando exceções são armazenados em cache para um <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instância, você obtém apenas uma chance para inicializar a instância.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>If an exception is thrown the first time you call the <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A?displayProperty=nameWithType&gt;</ph> property, that exception is cached and rethrown on all subsequent calls to the <ph id="ph2">&lt;xref:System.Lazy%601.Value%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">Se uma exceção será lançada na primeira vez que você chamar o <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A?displayProperty=nameWithType&gt;</ph> propriedade, que a exceção é armazenado em cache e lançada novamente em todas as chamadas subsequentes para o <ph id="ph2">&lt;xref:System.Lazy%601.Value%2A?displayProperty=nameWithType&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>The advantage of caching exceptions is that any two threads always get the same result, even when errors occur.</source>
          <target state="translated">A vantagem de exceções de cache é que qualquer dois threads sempre obtém o mesmo resultado, mesmo quando ocorrem erros.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>When you specify the PublicationOnly mode, exceptions are never cached.</source>
          <target state="translated">Quando você especificar o modo de PublicationOnly, exceções nunca são armazenadas em cache.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>When you specify None or ExecutionAndPublication, caching depends on whether you specify an initialization method or allow the default constructor for <ph id="ph1">`T`</ph> to be used.</source>
          <target state="translated">Quando você especificar nenhuma ou ExecutionAndPublication, cache depende se você especifica um método de inicialização ou permitir que o construtor padrão para <ph id="ph1">`T`</ph> a ser usado.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Specifying an initialization method enables exception caching for these two modes.</source>
          <target state="translated">Especificar um método de inicialização permite o cache de exceções para esses dois modos.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>The initialization method can be very simple.</source>
          <target state="translated">O método de inicialização pode ser muito simples.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>For example, it might call the default constructor for <ph id="ph1">`T`</ph>: <ph id="ph2">`new Lazy&lt;Contents&gt;(() =&gt; new Contents(), mode)`</ph> in C#, or <ph id="ph3">`New Lazy(Of Contents)(Function() New Contents())`</ph> in Visual Basic.</source>
          <target state="translated">Por exemplo, ele pode chamar o construtor padrão para <ph id="ph1">`T`</ph>: <ph id="ph2">`new Lazy&lt;Contents&gt;(() =&gt; new Contents(), mode)`</ph> em C# ou <ph id="ph3">`New Lazy(Of Contents)(Function() New Contents())`</ph> no Visual Basic.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>If you use a constructor that does not specify an initialization method, exceptions that are thrown by the default constructor for <ph id="ph1">`T`</ph> are not cached.</source>
          <target state="translated">Se você usar um construtor que não especifica um método de inicialização, exceções que são geradas pelo construtor padrão para <ph id="ph1">`T`</ph> não são armazenados em cache.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>The following table summarizes exception caching behavior.</source>
          <target state="translated">A tabela a seguir resume o comportamento do cache de exceção.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Mode</source>
          <target state="translated">Modo</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Using initialization method</source>
          <target state="translated">Usando o método de inicialização</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Using default constructor for <ph id="ph1">`T`</ph></source>
          <target state="translated">Usando o construtor padrão para <ph id="ph1">`T`</ph></target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>None</source>
          <target state="translated">Nenhum</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Cached</source>
          <target state="translated">Armazenado em cache</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Not cached</source>
          <target state="translated">Não armazenado em cache</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>PublicationOnly</source>
          <target state="translated">PublicationOnly</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Not cached</source>
          <target state="translated">Não armazenado em cache</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Not cached</source>
          <target state="translated">Não armazenado em cache</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>ExecutionAndPublication</source>
          <target state="translated">ExecutionAndPublication</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Cached</source>
          <target state="translated">Armazenado em cache</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Not cached</source>
          <target state="translated">Não armazenado em cache</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication">
          <source>Locks are used to ensure that only a single thread can initialize a <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance in a thread-safe manner.</source>
          <target state="translated">Os bloqueios são usados para garantir que apenas um único thread possa inicializar uma instância <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> de uma forma thread-safe.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication">
          <source>If the initialization method (or the default constructor, if there is no initialization method) uses locks internally, deadlocks can occur.</source>
          <target state="translated">Se o método de inicialização (ou o construtor padrão, se não houver nenhum método de inicialização) usa bloqueios internamente, deadlocks poderão ocorrer.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication">
          <source>If you use a <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> constructor that specifies an initialization method (<ph id="ph2">&lt;paramref name="valueFactory" /&gt;</ph> parameter), and if that initialization method throws an exception (or fails to handle an exception) the first time you call the <ph id="ph3">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property, then the exception is cached and thrown again on subsequent calls to the <ph id="ph4">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property.</source>
          <target state="translated">Se você usar um construtor <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> que especifica um método de inicialização (parâmetro <ph id="ph2">&lt;paramref name="valueFactory" /&gt;</ph>) e se o método de inicialização lança uma exceção (ou não consegue manipular uma exceção) na primeira vez que você chama a propriedade <ph id="ph3">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> e, em seguida, a exceção é armazenada em cache e gerada novamente em chamadas subsequentes para a propriedade <ph id="ph4">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication">
          <source>If you use a <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> constructor that does not specify an initialization method, exceptions that are thrown by the default constructor for <ph id="ph2">&lt;paramref name="T" /&gt;</ph> are not cached.</source>
          <target state="translated">Se você usar um construtor <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> que não especifica um método de inicialização, exceções que serão geradas pelo construtor padrão para <ph id="ph2">&lt;paramref name="T" /&gt;</ph> não são armazenadas em cache.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication">
          <source>In that case, a subsequent call to the <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property might successfully initialize the <ph id="ph2">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance.</source>
          <target state="translated">No caso, uma chamada subsequente para a propriedade <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> pode ser inicializada com êxito a <ph id="ph2">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instância.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication">
          <source>If the initialization method recursively accesses the <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property of the <ph id="ph2">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance, an <ph id="ph3">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph> is thrown.</source>
          <target state="translated">Se acessar recursivamente o método de inicialização, a propriedade <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> da instância <ph id="ph2">&lt;see cref="T:System.Lazy`1" /&gt;</ph>, uma <ph id="ph3">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph> será lançada.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.None">
          <source>The <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance is not thread safe; if the instance is accessed from multiple threads, its behavior is undefined.</source>
          <target state="translated">A instância <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> não é segura para thread; se a instância é acessada de vários threads, seu comportamento é indefinido.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.None">
          <source>Use this mode only when high performance is crucial and the <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance is guaranteed never to be initialized from more than one thread.</source>
          <target state="translated">Use esse modo apenas quando o alto desempenho é fundamental e é garantido que a instância <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> nunca será inicializada de mais de um thread.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.None">
          <source>If you use a <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> constructor that specifies an initialization method (<ph id="ph2">&lt;paramref name="valueFactory" /&gt;</ph> parameter), and if that initialization method throws an exception (or fails to handle an exception) the first time you call the <ph id="ph3">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property, then the exception is cached and thrown again on subsequent calls to the <ph id="ph4">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property.</source>
          <target state="translated">Se você usar um construtor <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> que especifica um método de inicialização (parâmetro <ph id="ph2">&lt;paramref name="valueFactory" /&gt;</ph>) e se o método de inicialização lança uma exceção (ou não consegue manipular uma exceção) na primeira vez que você chama a propriedade <ph id="ph3">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> e, em seguida, a exceção é armazenada em cache e gerada novamente em chamadas subsequentes para a propriedade <ph id="ph4">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.None">
          <source>If you use a <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> constructor that does not specify an initialization method, exceptions that are thrown by the default constructor for <ph id="ph2">&lt;paramref name="T" /&gt;</ph> are not cached.</source>
          <target state="translated">Se você usar um construtor <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> que não especifica um método de inicialização, exceções que serão geradas pelo construtor padrão para <ph id="ph2">&lt;paramref name="T" /&gt;</ph> não são armazenadas em cache.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.None">
          <source>In that case, a subsequent call to the <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property might successfully initialize the <ph id="ph2">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance.</source>
          <target state="translated">No caso, uma chamada subsequente para a propriedade <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> pode ser inicializada com êxito a <ph id="ph2">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instância.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.None">
          <source>If the initialization method recursively accesses the <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property of the <ph id="ph2">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance, an <ph id="ph3">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph> is thrown.</source>
          <target state="translated">Se acessar recursivamente o método de inicialização, a propriedade <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> da instância <ph id="ph2">&lt;see cref="T:System.Lazy`1" /&gt;</ph>, uma <ph id="ph3">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph> será lançada.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.PublicationOnly">
          <source>When multiple threads try to initialize a <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance simultaneously, all threads are allowed to run the initialization method (or the default constructor, if there is no initialization method).</source>
          <target state="translated">Quando vários threads tentam inicializar uma instância <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> simultaneamente, todos os threads têm permissão para executar o método de inicialização (ou o construtor padrão, se não houver nenhum método de inicialização).</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.PublicationOnly">
          <source>The first thread to complete initialization sets the value of the <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance.</source>
          <target state="translated">O primeiro thread para concluir a inicialização define o valor da instância de <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.PublicationOnly">
          <source>That value is returned to any other threads that were simultaneously running the initialization method, unless the initialization method throws exceptions on those threads.</source>
          <target state="translated">Esse valor é retornado a outros threads que estavam executando simultaneamente o método de inicialização, a menos que o método de inicialização lance exceções nesses threads.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.PublicationOnly">
          <source>Any instances of <ph id="ph1">&lt;paramref name="T" /&gt;</ph> that were created by the competing threads are discarded.</source>
          <target state="translated">Quaisquer instâncias de <ph id="ph1">&lt;paramref name="T" /&gt;</ph> que foram criadas pelos threads concorrentes são descartadas.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.PublicationOnly">
          <source>If the initialization method throws an exception on any thread, the exception is propagated out of the <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property on that thread.</source>
          <target state="translated">Se o método de inicialização lança uma exceção em qualquer thread, a exceção é propagada para fora da propriedade <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> nesse thread.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.PublicationOnly">
          <source>The exception is not cached.</source>
          <target state="translated">A exceção não é armazenada em cache.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.PublicationOnly">
          <source>The value of the <ph id="ph1">&lt;see cref="P:System.Lazy`1.IsValueCreated" /&gt;</ph> property remains <ph id="ph2">&lt;see langword="false" /&gt;</ph>, and subsequent calls to the <ph id="ph3">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property, either by the thread where the exception was thrown or by other threads, cause the initialization method to run again.</source>
          <target state="translated">O valor da propriedade <ph id="ph1">&lt;see cref="P:System.Lazy`1.IsValueCreated" /&gt;</ph> permanece <ph id="ph2">&lt;see langword="false" /&gt;</ph> e as chamadas subsequentes para a propriedade <ph id="ph3">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph>, sejam elas pelo thread no qual a exceção foi lançada ou por outros threads, fazem com que o método de inicialização seja executado novamente.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.PublicationOnly">
          <source>If the initialization method recursively accesses the <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property of the <ph id="ph2">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance, no exception is thrown.</source>
          <target state="translated">Se acessar recursivamente o método de inicialização, a propriedade <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> da instância <ph id="ph2">&lt;see cref="T:System.Lazy`1" /&gt;</ph>, nenhuma exceção será lançada.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>