<Type Name="LazyThreadSafetyMode" FullName="System.Threading.LazyThreadSafetyMode">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4502e79c5f83c66e066d94d6b0a8fddc75bfa4ea" />
    <Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="09/22/2018" />
    <Meta Name="ms.locfileid" Value="46646666" />
  </Metadata>
  <TypeSignature Language="C#" Value="public enum LazyThreadSafetyMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed LazyThreadSafetyMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Threading.LazyThreadSafetyMode" />
  <TypeSignature Language="VB.NET" Value="Public Enum LazyThreadSafetyMode" />
  <TypeSignature Language="C++ CLI" Value="public enum class LazyThreadSafetyMode" />
  <TypeSignature Language="F#" Value="type LazyThreadSafetyMode = " />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>
      <span data-ttu-id="37b09-101">Especifica como uma instância <see cref="T:System.Lazy`1" /> sincroniza o acesso entre vários threads.</span>
      <span class="sxs-lookup">
        <span data-stu-id="37b09-101">Specifies how a <see cref="T:System.Lazy`1" /> instance synchronizes access among multiple threads.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37b09-102">Use esta enumeração para especificar o `mode` parâmetro de <xref:System.Lazy%601> construtores.</span><span class="sxs-lookup"><span data-stu-id="37b09-102">Use this enumeration to specify the `mode` parameter of <xref:System.Lazy%601> constructors.</span></span> <span data-ttu-id="37b09-103">Os efeitos de todos os construtores em sincronização de thread podem ser descritos em termos dessa enumeração, tenham ou não `mode` parâmetros.</span><span class="sxs-lookup"><span data-stu-id="37b09-103">The effects of all constructors on thread synchronization can be described in terms of this enumeration, whether or not they have `mode` parameters.</span></span>  
  
 <span data-ttu-id="37b09-104">Um <xref:System.Lazy%601> instância será inicializada por um método de inicialização especificado pelo usuário ou pelo construtor padrão para `T`.</span><span class="sxs-lookup"><span data-stu-id="37b09-104">A <xref:System.Lazy%601> instance is initialized either by a user-specified initialization method or by the default constructor for `T`.</span></span> <span data-ttu-id="37b09-105">O método de inicialização for especificado o `valueFactory` parâmetro de um <xref:System.Lazy%601> construtor.</span><span class="sxs-lookup"><span data-stu-id="37b09-105">The initialization method is specified by the `valueFactory` parameter of a <xref:System.Lazy%601> constructor.</span></span> <span data-ttu-id="37b09-106">O método retorna uma instância de `T`, que é o tipo que é instanciado lentamente pela instância do <xref:System.Lazy%601>.</span><span class="sxs-lookup"><span data-stu-id="37b09-106">The method returns an instance of `T`, which is the type that is lazily instantiated by the instance of <xref:System.Lazy%601>.</span></span> <span data-ttu-id="37b09-107">Se um construtor não tem um `valueFactory` parâmetro, o construtor padrão para `T` é usado para inicializar o <xref:System.Lazy%601> instância.</span><span class="sxs-lookup"><span data-stu-id="37b09-107">If a constructor does not have a `valueFactory` parameter, the default constructor for `T` is used to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="37b09-108">Em ambos os casos, a inicialização ocorre na primeira vez que você chamar o <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> propriedade.</span><span class="sxs-lookup"><span data-stu-id="37b09-108">In either case, initialization occurs the first time you call the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="37b09-109">Além de especificar a segurança de segmentos de um <xref:System.Lazy%601> instância, esta enumeração afeta o cache de exceção.</span><span class="sxs-lookup"><span data-stu-id="37b09-109">In addition to specifying the thread safety of a <xref:System.Lazy%601> instance, this enumeration affects exception caching.</span></span> <span data-ttu-id="37b09-110">Quando as exceções são armazenadas em cache para um <xref:System.Lazy%601> instância, você obtém apenas uma oportunidade de inicializar a instância.</span><span class="sxs-lookup"><span data-stu-id="37b09-110">When exceptions are cached for a <xref:System.Lazy%601> instance, you get only one chance to initialize the instance.</span></span> <span data-ttu-id="37b09-111">Se uma exceção é lançada na primeira vez que você chamar o <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> propriedade, que a exceção é armazenado em cache e gerada novamente em todas as chamadas subsequentes para o <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> propriedade.</span><span class="sxs-lookup"><span data-stu-id="37b09-111">If an exception is thrown the first time you call the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property, that exception is cached and rethrown on all subsequent calls to the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="37b09-112">A vantagem de exceções de cache é que quaisquer dois threads sempre obterá o mesmo resultado, mesmo quando ocorrem erros.</span><span class="sxs-lookup"><span data-stu-id="37b09-112">The advantage of caching exceptions is that any two threads always get the same result, even when errors occur.</span></span>  
  
 <span data-ttu-id="37b09-113">Quando você especifica o modo de PublicationOnly, as exceções nunca são armazenadas em cache.</span><span class="sxs-lookup"><span data-stu-id="37b09-113">When you specify the PublicationOnly mode, exceptions are never cached.</span></span> <span data-ttu-id="37b09-114">Quando você especificar nenhum ou ExecutionAndPublication, armazenamento em cache depende se você especifica um método de inicialização ou permitir que o construtor padrão para `T` a ser usado.</span><span class="sxs-lookup"><span data-stu-id="37b09-114">When you specify None or ExecutionAndPublication, caching depends on whether you specify an initialization method or allow the default constructor for `T` to be used.</span></span> <span data-ttu-id="37b09-115">Especificar um método de inicialização permite o cache de exceções para esses dois modos.</span><span class="sxs-lookup"><span data-stu-id="37b09-115">Specifying an initialization method enables exception caching for these two modes.</span></span> <span data-ttu-id="37b09-116">O método de inicialização pode ser muito simples.</span><span class="sxs-lookup"><span data-stu-id="37b09-116">The initialization method can be very simple.</span></span> <span data-ttu-id="37b09-117">Por exemplo, ele pode chamar o construtor padrão para `T`: `new Lazy<Contents>(() => new Contents(), mode)` em C# ou `New Lazy(Of Contents)(Function() New Contents())` no Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="37b09-117">For example, it might call the default constructor for `T`: `new Lazy<Contents>(() => new Contents(), mode)` in C#, or `New Lazy(Of Contents)(Function() New Contents())` in Visual Basic.</span></span> <span data-ttu-id="37b09-118">Se você usar um construtor que não especifica um método de inicialização, exceções geradas pelo construtor padrão para `T` não são armazenados em cache.</span><span class="sxs-lookup"><span data-stu-id="37b09-118">If you use a constructor that does not specify an initialization method, exceptions that are thrown by the default constructor for `T` are not cached.</span></span> <span data-ttu-id="37b09-119">A tabela a seguir resume o comportamento de cache de exceção.</span><span class="sxs-lookup"><span data-stu-id="37b09-119">The following table summarizes exception caching behavior.</span></span>  
  
|<span data-ttu-id="37b09-120">Modo</span><span class="sxs-lookup"><span data-stu-id="37b09-120">Mode</span></span>|<span data-ttu-id="37b09-121">Usando o método de inicialização</span><span class="sxs-lookup"><span data-stu-id="37b09-121">Using initialization method</span></span>|<span data-ttu-id="37b09-122">Usando o construtor padrão para `T`</span><span class="sxs-lookup"><span data-stu-id="37b09-122">Using default constructor for `T`</span></span>|  
|----------|---------------------------------|---------------------------------------|  
|<span data-ttu-id="37b09-123">Nenhum</span><span class="sxs-lookup"><span data-stu-id="37b09-123">None</span></span>|<span data-ttu-id="37b09-124">Armazenado em cache</span><span class="sxs-lookup"><span data-stu-id="37b09-124">Cached</span></span>|<span data-ttu-id="37b09-125">Não armazenado em cache</span><span class="sxs-lookup"><span data-stu-id="37b09-125">Not cached</span></span>|  
|<span data-ttu-id="37b09-126">PublicationOnly</span><span class="sxs-lookup"><span data-stu-id="37b09-126">PublicationOnly</span></span>|<span data-ttu-id="37b09-127">Não armazenado em cache</span><span class="sxs-lookup"><span data-stu-id="37b09-127">Not cached</span></span>|<span data-ttu-id="37b09-128">Não armazenado em cache</span><span class="sxs-lookup"><span data-stu-id="37b09-128">Not cached</span></span>|  
|<span data-ttu-id="37b09-129">ExecutionAndPublication</span><span class="sxs-lookup"><span data-stu-id="37b09-129">ExecutionAndPublication</span></span>|<span data-ttu-id="37b09-130">Armazenado em cache</span><span class="sxs-lookup"><span data-stu-id="37b09-130">Cached</span></span>|<span data-ttu-id="37b09-131">Não armazenado em cache</span><span class="sxs-lookup"><span data-stu-id="37b09-131">Not cached</span></span>|  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/framework/performance/lazy-initialization.md">
      <span data-ttu-id="37b09-132">Inicialização lenta</span>
      <span class="sxs-lookup">
        <span data-stu-id="37b09-132">Lazy Initialization</span>
      </span>
    </related>
  </Docs>
  <Members>
    <Member MemberName="ExecutionAndPublication">
      <MemberSignature Language="C#" Value="ExecutionAndPublication" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode ExecutionAndPublication = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication" />
      <MemberSignature Language="VB.NET" Value="ExecutionAndPublication" />
      <MemberSignature Language="C++ CLI" Value="ExecutionAndPublication" />
      <MemberSignature Language="F#" Value="ExecutionAndPublication = 2" Usage="System.Threading.LazyThreadSafetyMode.ExecutionAndPublication" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="37b09-133">Os bloqueios são usados para garantir que apenas um único thread possa inicializar uma instância <see cref="T:System.Lazy`1" /> de uma forma thread-safe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37b09-133">Locks are used to ensure that only a single thread can initialize a <see cref="T:System.Lazy`1" /> instance in a thread-safe manner.</span>
          </span>
          <span data-ttu-id="37b09-134">Se o método de inicialização (ou o construtor padrão, se não houver nenhum método de inicialização) usa bloqueios internamente, deadlocks poderão ocorrer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37b09-134">If the initialization method (or the default constructor, if there is no initialization method) uses locks internally, deadlocks can occur.</span>
          </span>
          <span data-ttu-id="37b09-135">Se você usar um construtor <see cref="T:System.Lazy`1" /> que especifica um método de inicialização (parâmetro <paramref name="valueFactory" />) e se o método de inicialização lança uma exceção (ou não consegue manipular uma exceção) na primeira vez que você chama a propriedade <see cref="P:System.Lazy`1.Value" /> e, em seguida, a exceção é armazenada em cache e gerada novamente em chamadas subsequentes para a propriedade <see cref="P:System.Lazy`1.Value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37b09-135">If you use a <see cref="T:System.Lazy`1" /> constructor that specifies an initialization method (<paramref name="valueFactory" /> parameter), and if that initialization method throws an exception (or fails to handle an exception) the first time you call the <see cref="P:System.Lazy`1.Value" /> property, then the exception is cached and thrown again on subsequent calls to the <see cref="P:System.Lazy`1.Value" /> property.</span>
          </span>
          <span data-ttu-id="37b09-136">Se você usar um construtor <see cref="T:System.Lazy`1" /> que não especifica um método de inicialização, exceções que serão geradas pelo construtor padrão para <paramref name="T" /> não são armazenadas em cache.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37b09-136">If you use a <see cref="T:System.Lazy`1" /> constructor that does not specify an initialization method, exceptions that are thrown by the default constructor for <paramref name="T" /> are not cached.</span>
          </span>
          <span data-ttu-id="37b09-137">No caso, uma chamada subsequente para a propriedade <see cref="P:System.Lazy`1.Value" /> pode ser inicializada com êxito a <see cref="T:System.Lazy`1" /> instância.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37b09-137">In that case, a subsequent call to the <see cref="P:System.Lazy`1.Value" /> property might successfully initialize the <see cref="T:System.Lazy`1" /> instance.</span>
          </span>
          <span data-ttu-id="37b09-138">Se acessar recursivamente o método de inicialização, a propriedade <see cref="P:System.Lazy`1.Value" /> da instância <see cref="T:System.Lazy`1" />, uma <see cref="T:System.InvalidOperationException" /> será lançada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37b09-138">If the initialization method recursively accesses the <see cref="P:System.Lazy`1.Value" /> property of the <see cref="T:System.Lazy`1" /> instance, an <see cref="T:System.InvalidOperationException" /> is thrown.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="None" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode None = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.None" />
      <MemberSignature Language="VB.NET" Value="None" />
      <MemberSignature Language="C++ CLI" Value="None" />
      <MemberSignature Language="F#" Value="None = 0" Usage="System.Threading.LazyThreadSafetyMode.None" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="37b09-139">A instância <see cref="T:System.Lazy`1" /> não é segura para thread; se a instância é acessada de vários threads, seu comportamento é indefinido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37b09-139">The <see cref="T:System.Lazy`1" /> instance is not thread safe; if the instance is accessed from multiple threads, its behavior is undefined.</span>
          </span>
          <span data-ttu-id="37b09-140">Use esse modo apenas quando o alto desempenho é fundamental e é garantido que a instância <see cref="T:System.Lazy`1" /> nunca será inicializada de mais de um thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37b09-140">Use this mode only when high performance is crucial and the <see cref="T:System.Lazy`1" /> instance is guaranteed never to be initialized from more than one thread.</span>
          </span>
          <span data-ttu-id="37b09-141">Se você usar um construtor <see cref="T:System.Lazy`1" /> que especifica um método de inicialização (parâmetro <paramref name="valueFactory" />) e se o método de inicialização lança uma exceção (ou não consegue manipular uma exceção) na primeira vez que você chama a propriedade <see cref="P:System.Lazy`1.Value" /> e, em seguida, a exceção é armazenada em cache e gerada novamente em chamadas subsequentes para a propriedade <see cref="P:System.Lazy`1.Value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37b09-141">If you use a <see cref="T:System.Lazy`1" /> constructor that specifies an initialization method (<paramref name="valueFactory" /> parameter), and if that initialization method throws an exception (or fails to handle an exception) the first time you call the <see cref="P:System.Lazy`1.Value" /> property, then the exception is cached and thrown again on subsequent calls to the <see cref="P:System.Lazy`1.Value" /> property.</span>
          </span>
          <span data-ttu-id="37b09-142">Se você usar um construtor <see cref="T:System.Lazy`1" /> que não especifica um método de inicialização, exceções que serão geradas pelo construtor padrão para <paramref name="T" /> não são armazenadas em cache.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37b09-142">If you use a <see cref="T:System.Lazy`1" /> constructor that does not specify an initialization method, exceptions that are thrown by the default constructor for <paramref name="T" /> are not cached.</span>
          </span>
          <span data-ttu-id="37b09-143">No caso, uma chamada subsequente para a propriedade <see cref="P:System.Lazy`1.Value" /> pode ser inicializada com êxito a <see cref="T:System.Lazy`1" /> instância.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37b09-143">In that case, a subsequent call to the <see cref="P:System.Lazy`1.Value" /> property might successfully initialize the <see cref="T:System.Lazy`1" /> instance.</span>
          </span>
          <span data-ttu-id="37b09-144">Se acessar recursivamente o método de inicialização, a propriedade <see cref="P:System.Lazy`1.Value" /> da instância <see cref="T:System.Lazy`1" />, uma <see cref="T:System.InvalidOperationException" /> será lançada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37b09-144">If the initialization method recursively accesses the <see cref="P:System.Lazy`1.Value" /> property of the <see cref="T:System.Lazy`1" /> instance, an <see cref="T:System.InvalidOperationException" /> is thrown.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="PublicationOnly">
      <MemberSignature Language="C#" Value="PublicationOnly" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode PublicationOnly = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.PublicationOnly" />
      <MemberSignature Language="VB.NET" Value="PublicationOnly" />
      <MemberSignature Language="C++ CLI" Value="PublicationOnly" />
      <MemberSignature Language="F#" Value="PublicationOnly = 1" Usage="System.Threading.LazyThreadSafetyMode.PublicationOnly" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="37b09-145">Quando vários threads tentam inicializar uma instância <see cref="T:System.Lazy`1" /> simultaneamente, todos os threads têm permissão para executar o método de inicialização (ou o construtor padrão, se não houver nenhum método de inicialização).</span>
          <span class="sxs-lookup">
            <span data-stu-id="37b09-145">When multiple threads try to initialize a <see cref="T:System.Lazy`1" /> instance simultaneously, all threads are allowed to run the initialization method (or the default constructor, if there is no initialization method).</span>
          </span>
          <span data-ttu-id="37b09-146">O primeiro thread para concluir a inicialização define o valor da instância de <see cref="T:System.Lazy`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37b09-146">The first thread to complete initialization sets the value of the <see cref="T:System.Lazy`1" /> instance.</span>
          </span>
          <span data-ttu-id="37b09-147">Esse valor é retornado a outros threads que estavam executando simultaneamente o método de inicialização, a menos que o método de inicialização lance exceções nesses threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37b09-147">That value is returned to any other threads that were simultaneously running the initialization method, unless the initialization method throws exceptions on those threads.</span>
          </span>
          <span data-ttu-id="37b09-148">Quaisquer instâncias de <paramref name="T" /> que foram criadas pelos threads concorrentes são descartadas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37b09-148">Any instances of <paramref name="T" /> that were created by the competing threads are discarded.</span>
          </span>
          <span data-ttu-id="37b09-149">Se o método de inicialização lança uma exceção em qualquer thread, a exceção é propagada para fora da propriedade <see cref="P:System.Lazy`1.Value" /> nesse thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37b09-149">If the initialization method throws an exception on any thread, the exception is propagated out of the <see cref="P:System.Lazy`1.Value" /> property on that thread.</span>
          </span>
          <span data-ttu-id="37b09-150">A exceção não é armazenada em cache.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37b09-150">The exception is not cached.</span>
          </span>
          <span data-ttu-id="37b09-151">O valor da propriedade <see cref="P:System.Lazy`1.IsValueCreated" /> permanece <see langword="false" /> e as chamadas subsequentes para a propriedade <see cref="P:System.Lazy`1.Value" />, sejam elas pelo thread no qual a exceção foi lançada ou por outros threads, fazem com que o método de inicialização seja executado novamente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37b09-151">The value of the <see cref="P:System.Lazy`1.IsValueCreated" /> property remains <see langword="false" />, and subsequent calls to the <see cref="P:System.Lazy`1.Value" /> property, either by the thread where the exception was thrown or by other threads, cause the initialization method to run again.</span>
          </span>
          <span data-ttu-id="37b09-152">Se acessar recursivamente o método de inicialização, a propriedade <see cref="P:System.Lazy`1.Value" /> da instância <see cref="T:System.Lazy`1" />, nenhuma exceção será lançada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37b09-152">If the initialization method recursively accesses the <see cref="P:System.Lazy`1.Value" /> property of the <see cref="T:System.Lazy`1" /> instance, no exception is thrown.</span>
          </span>
        </summary>
      </Docs>
    </Member>
  </Members>
</Type>