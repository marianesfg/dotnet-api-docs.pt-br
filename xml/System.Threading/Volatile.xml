<Type Name="Volatile" FullName="System.Threading.Volatile">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e015169fdea0b177ae9dfa539d0e1c3aed9e0c48" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30530590" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Volatile" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Volatile extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Volatile" />
  <TypeSignature Language="VB.NET" Value="Public Class Volatile" />
  <TypeSignature Language="C++ CLI" Value="public ref class Volatile abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="e6726-101">Contém métodos para executar operações de memória voláteis.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e6726-101">Contains methods for performing volatile memory operations.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6726-102">Em um sistema multiprocessador, uma operação de gravação volátil garante que um valor gravado em um local de memória fica imediatamente visível para todos os processadores.</span><span class="sxs-lookup"><span data-stu-id="e6726-102">On a multiprocessor system, a volatile write operation ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="e6726-103">Uma operação de leitura volátil obtém o valor de muito mais recente gravado em um local de memória por qualquer processador.</span><span class="sxs-lookup"><span data-stu-id="e6726-103">A volatile read operation obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="e6726-104">Essas operações podem exigir a liberação de caches de processador, o que podem afetar o desempenho.</span><span class="sxs-lookup"><span data-stu-id="e6726-104">These operations might require flushing processor caches, which can affect performance.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e6726-105">Em um sistema de processador único, gravações e leituras volátil Certifique-se de que um valor é lido ou gravado na memória e não armazenadas em cache (por exemplo, em um registro do processador).</span><span class="sxs-lookup"><span data-stu-id="e6726-105">On a uniprocessor system, volatile reads and writes ensure that a value is read or written to memory and not cached (for example, in a processor register).</span></span> <span data-ttu-id="e6726-106">Assim, você pode usar essas operações para sincronizar o acesso a um campo que pode ser atualizado por outro thread ou hardware.</span><span class="sxs-lookup"><span data-stu-id="e6726-106">Thus, you can use these operations to synchronize access to a field that can be updated by another thread or by hardware.</span></span>  
  
 <span data-ttu-id="e6726-107">Operações de memória voláteis são casos especiais de sincronização, onde o bloqueio normal não é uma alternativa aceitável.</span><span class="sxs-lookup"><span data-stu-id="e6726-107">Volatile memory operations are for special cases of synchronization, where normal locking is not an acceptable alternative.</span></span> <span data-ttu-id="e6726-108">Em circunstâncias normais, o c# `lock` instrução, o Visual Basic `SyncLock` instrução e o <xref:System.Threading.Monitor> classe fornecem a maneira mais fácil e menos propenso a erros de sincronização de acesso a dados e o <xref:System.Lazy%601> classe fornece uma maneira simples de escrever o código de inicialização lenta sem diretamente usando o bloqueio com verificação dupla.</span><span class="sxs-lookup"><span data-stu-id="e6726-108">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide the easiest and least error-prone way of synchronizing access to data, and the <xref:System.Lazy%601> class provides a simple way to write lazy initialization code without directly using double-checked locking.</span></span>  
  
 <span data-ttu-id="e6726-109">O <xref:System.Threading.Volatile.Read%2A?displayProperty=nameWithType> e <xref:System.Threading.Volatile.Write%2A?displayProperty=nameWithType> métodos habilitem a funcionalidade que não há suporte para idiomas.</span><span class="sxs-lookup"><span data-stu-id="e6726-109">The <xref:System.Threading.Volatile.Read%2A?displayProperty=nameWithType> and <xref:System.Threading.Volatile.Write%2A?displayProperty=nameWithType> methods enable functionality that is not supported in languages.</span></span> <span data-ttu-id="e6726-110">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="e6726-110">For example:</span></span>  
  
-   <span data-ttu-id="e6726-111">Algumas linguagens, como Visual Basic, não reconhecem o conceito de operações de memória voláteis.</span><span class="sxs-lookup"><span data-stu-id="e6726-111">Some languages, such as Visual Basic, do not recognize the concept of volatile memory operations.</span></span> <span data-ttu-id="e6726-112">O <xref:System.Threading.Volatile> classe fornece essa funcionalidade nesses idiomas.</span><span class="sxs-lookup"><span data-stu-id="e6726-112">The <xref:System.Threading.Volatile> class provides that functionality in such languages.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="e6726-113">Chamar um desses métodos afeta apenas um acesso de memória único.</span><span class="sxs-lookup"><span data-stu-id="e6726-113">Calling one of these methods affects only a single memory access.</span></span> <span data-ttu-id="e6726-114">Para fornecer sincronização efetiva para um campo, todo o acesso ao campo deve usar <xref:System.Threading.Volatile.Read%2A?displayProperty=nameWithType> e <xref:System.Threading.Volatile.Write%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="e6726-114">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Volatile.Read%2A?displayProperty=nameWithType> and <xref:System.Threading.Volatile.Write%2A?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="e6726-115">No c#, usando o `volatile` modificador em um campo garante que todo o acesso a esse campo usa o <xref:System.Threading.Volatile.Read%2A?displayProperty=nameWithType> e <xref:System.Threading.Volatile.Write%2A?displayProperty=nameWithType> métodos, mas o `volatile` modificador não pode ser aplicado a elementos da matriz.</span><span class="sxs-lookup"><span data-stu-id="e6726-115">In C#, using the `volatile` modifier on a field guarantees that every access to that field uses the <xref:System.Threading.Volatile.Read%2A?displayProperty=nameWithType> and <xref:System.Threading.Volatile.Write%2A?displayProperty=nameWithType> methods, but the `volatile` modifier cannot be applied to array elements.</span></span> <span data-ttu-id="e6726-116">O <xref:System.Threading.Volatile.Read%2A?displayProperty=nameWithType> e <xref:System.Threading.Volatile.Write%2A?displayProperty=nameWithType> métodos podem ser usados em elementos de matriz.</span><span class="sxs-lookup"><span data-stu-id="e6726-116">The <xref:System.Threading.Volatile.Read%2A?displayProperty=nameWithType> and <xref:System.Threading.Volatile.Write%2A?displayProperty=nameWithType> methods can be used on array elements.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Read">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e6726-117">Lê o valor de um campo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-117">Reads the value of a field.</span>
          </span>
          <span data-ttu-id="e6726-118">Em sistemas que precisam dele, insere uma barreira de memória que impede que o processador reordene as operações de memória da seguinte maneira: se uma leitura ou gravação aparecer após esse método no código, o processador não poderá movê-la para antes desse método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-118">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static bool Read (ref bool location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Read(bool&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Read(System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read (ByRef location As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Read(bool % location);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="e6726-119">O campo a ser lido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-119">The field to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6726-120">Lê o valor do campo especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-120">Reads the value of the specified field.</span>
          </span>
          <span data-ttu-id="e6726-121">Em sistemas que precisam dele, insere uma barreira de memória que impede que o processador reordene as operações de memória da seguinte maneira: se uma leitura ou gravação aparecer após esse método no código, o processador não poderá movê-la para antes desse método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-121">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e6726-122">O valor que foi lido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-122">The value that was read.</span>
          </span>
          <span data-ttu-id="e6726-123">Este valor é o último gravado por qualquer processador no computador, independentemente do número de processadores ou do estado do cache do processador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-123">This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6726-124">Para obter mais informações, consulte a classe <xref:System.Threading.Volatile>.</span><span class="sxs-lookup"><span data-stu-id="e6726-124">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static byte Read (ref byte location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 Read(unsigned int8&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Read(System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read (ByRef location As Byte) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte Read(System::Byte % location);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Byte&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="e6726-125">O campo a ser lido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-125">The field to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6726-126">Lê o valor do campo especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-126">Reads the value of the specified field.</span>
          </span>
          <span data-ttu-id="e6726-127">Em sistemas que precisam dele, insere uma barreira de memória que impede que o processador reordene as operações de memória da seguinte maneira: se uma leitura ou gravação aparecer após esse método no código, o processador não poderá movê-la para antes desse método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-127">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e6726-128">O valor que foi lido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-128">The value that was read.</span>
          </span>
          <span data-ttu-id="e6726-129">Este valor é o último gravado por qualquer processador no computador, independentemente do número de processadores ou do estado do cache do processador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-129">This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6726-130">Para obter mais informações, consulte a classe <xref:System.Threading.Volatile>.</span><span class="sxs-lookup"><span data-stu-id="e6726-130">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static double Read (ref double location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Read(float64&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Read(System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read (ByRef location As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Read(double % location);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Double&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="e6726-131">O campo a ser lido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-131">The field to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6726-132">Lê o valor do campo especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-132">Reads the value of the specified field.</span>
          </span>
          <span data-ttu-id="e6726-133">Em sistemas que precisam dele, insere uma barreira de memória que impede que o processador reordene as operações de memória da seguinte maneira: se uma leitura ou gravação aparecer após esse método no código, o processador não poderá movê-la para antes desse método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-133">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e6726-134">O valor que foi lido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-134">The value that was read.</span>
          </span>
          <span data-ttu-id="e6726-135">Este valor é o último gravado por qualquer processador no computador, independentemente do número de processadores ou do estado do cache do processador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-135">This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6726-136">Para obter mais informações, consulte a classe <xref:System.Threading.Volatile>.</span><span class="sxs-lookup"><span data-stu-id="e6726-136">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static short Read (ref short location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 Read(int16&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Read(System.Int16@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read (ByRef location As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Read(short % location);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Int16&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="e6726-137">O campo a ser lido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-137">The field to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6726-138">Lê o valor do campo especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-138">Reads the value of the specified field.</span>
          </span>
          <span data-ttu-id="e6726-139">Em sistemas que precisam dele, insere uma barreira de memória que impede que o processador reordene as operações de memória da seguinte maneira: se uma leitura ou gravação aparecer após esse método no código, o processador não poderá movê-la para antes desse método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-139">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e6726-140">O valor que foi lido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-140">The value that was read.</span>
          </span>
          <span data-ttu-id="e6726-141">Este valor é o último gravado por qualquer processador no computador, independentemente do número de processadores ou do estado do cache do processador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-141">This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6726-142">Para obter mais informações, consulte a classe <xref:System.Threading.Volatile>.</span><span class="sxs-lookup"><span data-stu-id="e6726-142">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static int Read (ref int location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Read(int32&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Read(System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read (ByRef location As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Read(int % location);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Int32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="e6726-143">O campo a ser lido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-143">The field to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6726-144">Lê o valor do campo especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-144">Reads the value of the specified field.</span>
          </span>
          <span data-ttu-id="e6726-145">Em sistemas que precisam dele, insere uma barreira de memória que impede que o processador reordene as operações de memória da seguinte maneira: se uma leitura ou gravação aparecer após esse método no código, o processador não poderá movê-la para antes desse método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-145">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e6726-146">O valor que foi lido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-146">The value that was read.</span>
          </span>
          <span data-ttu-id="e6726-147">Este valor é o último gravado por qualquer processador no computador, independentemente do número de processadores ou do estado do cache do processador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-147">This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6726-148">Para obter mais informações, consulte a classe <xref:System.Threading.Volatile>.</span><span class="sxs-lookup"><span data-stu-id="e6726-148">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static long Read (ref long location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Read(int64&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Read(System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read (ByRef location As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Read(long % location);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Int64&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="e6726-149">O campo a ser lido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-149">The field to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6726-150">Lê o valor do campo especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-150">Reads the value of the specified field.</span>
          </span>
          <span data-ttu-id="e6726-151">Em sistemas que precisam dele, insere uma barreira de memória que impede que o processador reordene as operações de memória da seguinte maneira: se uma leitura ou gravação aparecer após esse método no código, o processador não poderá movê-la para antes desse método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-151">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e6726-152">O valor que foi lido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-152">The value that was read.</span>
          </span>
          <span data-ttu-id="e6726-153">Este valor é o último gravado por qualquer processador no computador, independentemente do número de processadores ou do estado do cache do processador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-153">This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6726-154">Para obter mais informações, consulte a classe <xref:System.Threading.Volatile>.</span><span class="sxs-lookup"><span data-stu-id="e6726-154">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static IntPtr Read (ref IntPtr location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int Read(native int&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Read(System.IntPtr@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read (ByRef location As IntPtr) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr Read(IntPtr % location);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.IntPtr&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="e6726-155">O campo a ser lido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-155">The field to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6726-156">Lê o valor do campo especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-156">Reads the value of the specified field.</span>
          </span>
          <span data-ttu-id="e6726-157">Em sistemas que precisam dele, insere uma barreira de memória que impede que o processador reordene as operações de memória da seguinte maneira: se uma leitura ou gravação aparecer após esse método no código, o processador não poderá movê-la para antes desse método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-157">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e6726-158">O valor que foi lido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-158">The value that was read.</span>
          </span>
          <span data-ttu-id="e6726-159">Este valor é o último gravado por qualquer processador no computador, independentemente do número de processadores ou do estado do cache do processador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-159">This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6726-160">Para obter mais informações, consulte a classe <xref:System.Threading.Volatile>.</span><span class="sxs-lookup"><span data-stu-id="e6726-160">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static sbyte Read (ref sbyte location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 Read(int8&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Read(System.SByte@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read (ByRef location As SByte) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte Read(System::SByte % location);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.SByte&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="e6726-161">O campo a ser lido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-161">The field to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6726-162">Lê o valor do campo especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-162">Reads the value of the specified field.</span>
          </span>
          <span data-ttu-id="e6726-163">Em sistemas que precisam dele, insere uma barreira de memória que impede que o processador reordene as operações de memória da seguinte maneira: se uma leitura ou gravação aparecer após esse método no código, o processador não poderá movê-la para antes desse método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-163">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e6726-164">O valor que foi lido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-164">The value that was read.</span>
          </span>
          <span data-ttu-id="e6726-165">Este valor é o último gravado por qualquer processador no computador, independentemente do número de processadores ou do estado do cache do processador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-165">This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6726-166">Para obter mais informações, consulte a classe <xref:System.Threading.Volatile>.</span><span class="sxs-lookup"><span data-stu-id="e6726-166">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static float Read (ref float location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Read(float32&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Read(System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read (ByRef location As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Read(float % location);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Single&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="e6726-167">O campo a ser lido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-167">The field to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6726-168">Lê o valor do campo especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-168">Reads the value of the specified field.</span>
          </span>
          <span data-ttu-id="e6726-169">Em sistemas que precisam dele, insere uma barreira de memória que impede que o processador reordene as operações de memória da seguinte maneira: se uma leitura ou gravação aparecer após esse método no código, o processador não poderá movê-la para antes desse método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-169">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e6726-170">O valor que foi lido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-170">The value that was read.</span>
          </span>
          <span data-ttu-id="e6726-171">Este valor é o último gravado por qualquer processador no computador, independentemente do número de processadores ou do estado do cache do processador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-171">This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6726-172">Para obter mais informações, consulte a classe <xref:System.Threading.Volatile>.</span><span class="sxs-lookup"><span data-stu-id="e6726-172">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static ushort Read (ref ushort location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 Read(unsigned int16&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Read(System.UInt16@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read (ByRef location As UShort) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 Read(System::UInt16 % location);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.UInt16&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="e6726-173">O campo a ser lido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-173">The field to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6726-174">Lê o valor do campo especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-174">Reads the value of the specified field.</span>
          </span>
          <span data-ttu-id="e6726-175">Em sistemas que precisam dele, insere uma barreira de memória que impede que o processador reordene as operações de memória da seguinte maneira: se uma leitura ou gravação aparecer após esse método no código, o processador não poderá movê-la para antes desse método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-175">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e6726-176">O valor que foi lido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-176">The value that was read.</span>
          </span>
          <span data-ttu-id="e6726-177">Este valor é o último gravado por qualquer processador no computador, independentemente do número de processadores ou do estado do cache do processador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-177">This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6726-178">Para obter mais informações, consulte a classe <xref:System.Threading.Volatile>.</span><span class="sxs-lookup"><span data-stu-id="e6726-178">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Threading.Volatile.Read(System.Int16@)" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static uint Read (ref uint location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 Read(unsigned int32&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Read(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read (ByRef location As UInteger) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 Read(System::UInt32 % location);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.UInt32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="e6726-179">O campo a ser lido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-179">The field to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6726-180">Lê o valor do campo especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-180">Reads the value of the specified field.</span>
          </span>
          <span data-ttu-id="e6726-181">Em sistemas que precisam dele, insere uma barreira de memória que impede que o processador reordene as operações de memória da seguinte maneira: se uma leitura ou gravação aparecer após esse método no código, o processador não poderá movê-la para antes desse método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-181">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e6726-182">O valor que foi lido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-182">The value that was read.</span>
          </span>
          <span data-ttu-id="e6726-183">Este valor é o último gravado por qualquer processador no computador, independentemente do número de processadores ou do estado do cache do processador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-183">This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6726-184">Para obter mais informações, consulte a classe <xref:System.Threading.Volatile>.</span><span class="sxs-lookup"><span data-stu-id="e6726-184">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Threading.Volatile.Read(System.Int32@)" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static ulong Read (ref ulong location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 Read(unsigned int64&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Read(System.UInt64@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read (ByRef location As ULong) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 Read(System::UInt64 % location);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.UInt64&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="e6726-185">O campo a ser lido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-185">The field to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6726-186">Lê o valor do campo especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-186">Reads the value of the specified field.</span>
          </span>
          <span data-ttu-id="e6726-187">Em sistemas que precisam dele, insere uma barreira de memória que impede que o processador reordene as operações de memória da seguinte maneira: se uma leitura ou gravação aparecer após esse método no código, o processador não poderá movê-la para antes desse método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-187">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e6726-188">O valor que foi lido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-188">The value that was read.</span>
          </span>
          <span data-ttu-id="e6726-189">Este valor é o último gravado por qualquer processador no computador, independentemente do número de processadores ou do estado do cache do processador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-189">This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6726-190">Para obter mais informações, consulte a classe <xref:System.Threading.Volatile>.</span><span class="sxs-lookup"><span data-stu-id="e6726-190">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Threading.Volatile.Read(System.Int64@)" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static UIntPtr Read (ref UIntPtr location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native unsigned int Read(native unsigned int&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Read(System.UIntPtr@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read (ByRef location As UIntPtr) As UIntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static UIntPtr Read(UIntPtr % location);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UIntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.UIntPtr&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="e6726-191">O campo a ser lido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-191">The field to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6726-192">Lê o valor do campo especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-192">Reads the value of the specified field.</span>
          </span>
          <span data-ttu-id="e6726-193">Em sistemas que precisam dele, insere uma barreira de memória que impede que o processador reordene as operações de memória da seguinte maneira: se uma leitura ou gravação aparecer após esse método no código, o processador não poderá movê-la para antes desse método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-193">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e6726-194">O valor que foi lido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-194">The value that was read.</span>
          </span>
          <span data-ttu-id="e6726-195">Este valor é o último gravado por qualquer processador no computador, independentemente do número de processadores ou do estado do cache do processador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-195">This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6726-196">Para obter mais informações, consulte a classe <xref:System.Threading.Volatile>.</span><span class="sxs-lookup"><span data-stu-id="e6726-196">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Threading.Volatile.Read(System.IntPtr@)" />
      </Docs>
    </Member>
    <Member MemberName="Read&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Read&lt;T&gt; (ref T location) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Read&lt;class T&gt;(!!T&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Read``1(``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read(Of T As Class) (ByRef location As T) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T Read(T % location);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="T&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e6726-197">O tipo do campo a ser lido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-197">The type of field to read.</span>
          </span>
          <span data-ttu-id="e6726-198">Este deve ser um tipo de referência, não um tipo de valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-198">This must be a reference type, not a value type.</span>
          </span>
        </typeparam>
        <param name="location">
          <span data-ttu-id="e6726-199">O campo a ser lido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-199">The field to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6726-200">Lê a referência de objeto do campo especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-200">Reads the object reference from the specified field.</span>
          </span>
          <span data-ttu-id="e6726-201">Em sistemas que precisam dele, insere uma barreira de memória que impede que o processador reordene as operações de memória da seguinte maneira: se uma leitura ou gravação aparecer após esse método no código, o processador não poderá movê-la para antes desse método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-201">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e6726-202">A referência a <paramref name="T" /> que foi lida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-202">The reference to <paramref name="T" /> that was read.</span>
          </span>
          <span data-ttu-id="e6726-203">A referência é o último gravado por qualquer processador em um computador, independentemente do número de processadores ou do estado do cache do processador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-203">This reference is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6726-204">Para obter mais informações, consulte a classe <xref:System.Threading.Volatile>.</span><span class="sxs-lookup"><span data-stu-id="e6726-204">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Write">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e6726-205">Grava um valor em um campo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-205">Writes a value to a field.</span>
          </span>
          <span data-ttu-id="e6726-206">Em sistemas que precisam dele, insere uma barreira de memória que impede que o processador reordene as operações de memória da seguinte maneira: se uma leitura ou gravação aparecer antes desse método no código, o processador não poderá movê-la para depois desse método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-206">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ref bool location, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(bool&amp; location, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Write(System.Boolean@,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (ByRef location As Boolean, value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(bool % location, bool value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Boolean&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="e6726-207">O campo em que o valor é gravado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-207">The field where the value is written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="e6726-208">O valor a ser gravado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-208">The value to write.</span>
          </span>
          <span data-ttu-id="e6726-209">O valor é gravado imediatamente para que fique visível a todos os processadores no computador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-209">The value is written immediately so that it is visible to all processors in the computer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6726-210">Grava o valor especificado no campo especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-210">Writes the specified value to the specified field.</span>
          </span>
          <span data-ttu-id="e6726-211">Em sistemas que precisam dele, insere uma barreira de memória que impede que o processador reordene as operações de memória da seguinte maneira: se uma leitura ou gravação aparecer antes desse método no código, o processador não poderá movê-la para depois desse método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-211">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6726-212">Para obter mais informações, consulte a classe <xref:System.Threading.Volatile>.</span><span class="sxs-lookup"><span data-stu-id="e6726-212">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ref byte location, byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(unsigned int8&amp; location, unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Write(System.Byte@,System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (ByRef location As Byte, value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::Byte % location, System::Byte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Byte&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="e6726-213">O campo em que o valor é gravado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-213">The field where the value is written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="e6726-214">O valor a ser gravado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-214">The value to write.</span>
          </span>
          <span data-ttu-id="e6726-215">O valor é gravado imediatamente para que fique visível a todos os processadores no computador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-215">The value is written immediately so that it is visible to all processors in the computer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6726-216">Grava o valor especificado no campo especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-216">Writes the specified value to the specified field.</span>
          </span>
          <span data-ttu-id="e6726-217">Em sistemas que precisam dele, insere uma barreira de memória que impede que o processador reordene as operações de memória da seguinte maneira: se uma leitura ou gravação aparecer antes desse método no código, o processador não poderá movê-la para depois desse método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-217">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6726-218">Para obter mais informações, consulte a classe <xref:System.Threading.Volatile>.</span><span class="sxs-lookup"><span data-stu-id="e6726-218">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ref double location, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(float64&amp; location, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Write(System.Double@,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (ByRef location As Double, value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(double % location, double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Double&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="e6726-219">O campo em que o valor é gravado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-219">The field where the value is written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="e6726-220">O valor a ser gravado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-220">The value to write.</span>
          </span>
          <span data-ttu-id="e6726-221">O valor é gravado imediatamente para que fique visível a todos os processadores no computador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-221">The value is written immediately so that it is visible to all processors in the computer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6726-222">Grava o valor especificado no campo especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-222">Writes the specified value to the specified field.</span>
          </span>
          <span data-ttu-id="e6726-223">Em sistemas que precisam dele, insere uma barreira de memória que impede que o processador reordene as operações de memória da seguinte maneira: se uma leitura ou gravação aparecer antes desse método no código, o processador não poderá movê-la para depois desse método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-223">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6726-224">Para obter mais informações, consulte a classe <xref:System.Threading.Volatile>.</span><span class="sxs-lookup"><span data-stu-id="e6726-224">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ref short location, short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(int16&amp; location, int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Write(System.Int16@,System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (ByRef location As Short, value As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(short % location, short value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Int16&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="e6726-225">O campo em que o valor é gravado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-225">The field where the value is written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="e6726-226">O valor a ser gravado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-226">The value to write.</span>
          </span>
          <span data-ttu-id="e6726-227">O valor é gravado imediatamente para que fique visível a todos os processadores no computador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-227">The value is written immediately so that it is visible to all processors in the computer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6726-228">Grava o valor especificado no campo especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-228">Writes the specified value to the specified field.</span>
          </span>
          <span data-ttu-id="e6726-229">Em sistemas que precisam dele, insere uma barreira de memória que impede que o processador reordene as operações de memória da seguinte maneira: se uma leitura ou gravação aparecer antes desse método no código, o processador não poderá movê-la para depois desse método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-229">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6726-230">Para obter mais informações, consulte a classe <xref:System.Threading.Volatile>.</span><span class="sxs-lookup"><span data-stu-id="e6726-230">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ref int location, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(int32&amp; location, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Write(System.Int32@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (ByRef location As Integer, value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(int % location, int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Int32&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="e6726-231">O campo em que o valor é gravado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-231">The field where the value is written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="e6726-232">O valor a ser gravado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-232">The value to write.</span>
          </span>
          <span data-ttu-id="e6726-233">O valor é gravado imediatamente para que fique visível a todos os processadores no computador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-233">The value is written immediately so that it is visible to all processors in the computer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6726-234">Grava o valor especificado no campo especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-234">Writes the specified value to the specified field.</span>
          </span>
          <span data-ttu-id="e6726-235">Em sistemas que precisam dele, insere uma barreira de memória que impede que o processador reordene as operações de memória da seguinte maneira: se uma leitura ou gravação aparecer antes desse método no código, o processador não poderá movê-la para depois desse método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-235">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6726-236">Para obter mais informações, consulte a classe <xref:System.Threading.Volatile>.</span><span class="sxs-lookup"><span data-stu-id="e6726-236">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ref long location, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(int64&amp; location, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Write(System.Int64@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (ByRef location As Long, value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(long % location, long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Int64&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="e6726-237">O campo em que o valor é gravado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-237">The field where the value is written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="e6726-238">O valor a ser gravado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-238">The value to write.</span>
          </span>
          <span data-ttu-id="e6726-239">O valor é gravado imediatamente para que fique visível a todos os processadores no computador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-239">The value is written immediately so that it is visible to all processors in the computer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6726-240">Grava o valor especificado no campo especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-240">Writes the specified value to the specified field.</span>
          </span>
          <span data-ttu-id="e6726-241">Em sistemas que precisam dele, insere uma barreira de memória que impede que o processador reordene as operações de memória da seguinte maneira: se uma operação de memória aparecer antes desse método no código, o processador não poderá movê-la para depois desse método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-241">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a memory operation appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6726-242">Para obter mais informações, consulte a classe <xref:System.Threading.Volatile>.</span><span class="sxs-lookup"><span data-stu-id="e6726-242">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ref IntPtr location, IntPtr value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(native int&amp; location, native int value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Write(System.IntPtr@,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (ByRef location As IntPtr, value As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(IntPtr % location, IntPtr value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.IntPtr&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="e6726-243">O campo em que o valor é gravado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-243">The field where the value is written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="e6726-244">O valor a ser gravado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-244">The value to write.</span>
          </span>
          <span data-ttu-id="e6726-245">O valor é gravado imediatamente para que fique visível a todos os processadores no computador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-245">The value is written immediately so that it is visible to all processors in the computer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6726-246">Grava o valor especificado no campo especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-246">Writes the specified value to the specified field.</span>
          </span>
          <span data-ttu-id="e6726-247">Em sistemas que precisam dele, insere uma barreira de memória que impede que o processador reordene as operações de memória da seguinte maneira: se uma leitura ou gravação aparecer antes desse método no código, o processador não poderá movê-la para depois desse método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-247">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6726-248">Para obter mais informações, consulte a classe <xref:System.Threading.Volatile>.</span><span class="sxs-lookup"><span data-stu-id="e6726-248">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ref sbyte location, sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(int8&amp; location, int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Write(System.SByte@,System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (ByRef location As SByte, value As SByte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::SByte % location, System::SByte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.SByte&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="e6726-249">O campo em que o valor é gravado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-249">The field where the value is written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="e6726-250">O valor a ser gravado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-250">The value to write.</span>
          </span>
          <span data-ttu-id="e6726-251">O valor é gravado imediatamente para que fique visível a todos os processadores no computador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-251">The value is written immediately so that it is visible to all processors in the computer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6726-252">Grava o valor especificado no campo especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-252">Writes the specified value to the specified field.</span>
          </span>
          <span data-ttu-id="e6726-253">Em sistemas que precisam dele, insere uma barreira de memória que impede que o processador reordene as operações de memória da seguinte maneira: se uma leitura ou gravação aparecer antes desse método no código, o processador não poderá movê-la para depois desse método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-253">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6726-254">Para obter mais informações, consulte a classe <xref:System.Threading.Volatile>.</span><span class="sxs-lookup"><span data-stu-id="e6726-254">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ref float location, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(float32&amp; location, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Write(System.Single@,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (ByRef location As Single, value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(float % location, float value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Single&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="e6726-255">O campo em que o valor é gravado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-255">The field where the value is written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="e6726-256">O valor a ser gravado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-256">The value to write.</span>
          </span>
          <span data-ttu-id="e6726-257">O valor é gravado imediatamente para que fique visível a todos os processadores no computador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-257">The value is written immediately so that it is visible to all processors in the computer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6726-258">Grava o valor especificado no campo especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-258">Writes the specified value to the specified field.</span>
          </span>
          <span data-ttu-id="e6726-259">Em sistemas que precisam dele, insere uma barreira de memória que impede que o processador reordene as operações de memória da seguinte maneira: se uma leitura ou gravação aparecer antes desse método no código, o processador não poderá movê-la para depois desse método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-259">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6726-260">Para obter mais informações, consulte a classe <xref:System.Threading.Volatile>.</span><span class="sxs-lookup"><span data-stu-id="e6726-260">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ref ushort location, ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(unsigned int16&amp; location, unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Write(System.UInt16@,System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (ByRef location As UShort, value As UShort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::UInt16 % location, System::UInt16 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.UInt16&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="e6726-261">O campo em que o valor é gravado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-261">The field where the value is written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="e6726-262">O valor a ser gravado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-262">The value to write.</span>
          </span>
          <span data-ttu-id="e6726-263">O valor é gravado imediatamente para que fique visível a todos os processadores no computador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-263">The value is written immediately so that it is visible to all processors in the computer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6726-264">Grava o valor especificado no campo especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-264">Writes the specified value to the specified field.</span>
          </span>
          <span data-ttu-id="e6726-265">Em sistemas que precisam dele, insere uma barreira de memória que impede que o processador reordene as operações de memória da seguinte maneira: se uma leitura ou gravação aparecer antes desse método no código, o processador não poderá movê-la para depois desse método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-265">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6726-266">Para obter mais informações, consulte a classe <xref:System.Threading.Volatile>.</span><span class="sxs-lookup"><span data-stu-id="e6726-266">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Threading.Volatile.Write(System.Int16@,System.Int16)" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ref uint location, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(unsigned int32&amp; location, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Write(System.UInt32@,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (ByRef location As UInteger, value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::UInt32 % location, System::UInt32 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.UInt32&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="e6726-267">O campo em que o valor é gravado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-267">The field where the value is written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="e6726-268">O valor a ser gravado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-268">The value to write.</span>
          </span>
          <span data-ttu-id="e6726-269">O valor é gravado imediatamente para que fique visível a todos os processadores no computador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-269">The value is written immediately so that it is visible to all processors in the computer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6726-270">Grava o valor especificado no campo especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-270">Writes the specified value to the specified field.</span>
          </span>
          <span data-ttu-id="e6726-271">Em sistemas que precisam dele, insere uma barreira de memória que impede que o processador reordene as operações de memória da seguinte maneira: se uma leitura ou gravação aparecer antes desse método no código, o processador não poderá movê-la para depois desse método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-271">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6726-272">Para obter mais informações, consulte a classe <xref:System.Threading.Volatile>.</span><span class="sxs-lookup"><span data-stu-id="e6726-272">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Threading.Volatile.Write(System.Int32@,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ref ulong location, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(unsigned int64&amp; location, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Write(System.UInt64@,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (ByRef location As ULong, value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::UInt64 % location, System::UInt64 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.UInt64&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="e6726-273">O campo em que o valor é gravado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-273">The field where the value is written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="e6726-274">O valor a ser gravado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-274">The value to write.</span>
          </span>
          <span data-ttu-id="e6726-275">O valor é gravado imediatamente para que fique visível a todos os processadores no computador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-275">The value is written immediately so that it is visible to all processors in the computer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6726-276">Grava o valor especificado no campo especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-276">Writes the specified value to the specified field.</span>
          </span>
          <span data-ttu-id="e6726-277">Em sistemas que precisam dele, insere uma barreira de memória que impede que o processador reordene as operações de memória da seguinte maneira: se uma leitura ou gravação aparecer antes desse método no código, o processador não poderá movê-la para depois desse método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-277">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6726-278">Para obter mais informações, consulte a classe <xref:System.Threading.Volatile>.</span><span class="sxs-lookup"><span data-stu-id="e6726-278">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Threading.Volatile.Write(System.Int64@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ref UIntPtr location, UIntPtr value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(native unsigned int&amp; location, native unsigned int value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Write(System.UIntPtr@,System.UIntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (ByRef location As UIntPtr, value As UIntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(UIntPtr % location, UIntPtr value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.UIntPtr&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.UIntPtr" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="e6726-279">O campo em que o valor é gravado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-279">The field where the value is written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="e6726-280">O valor a ser gravado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-280">The value to write.</span>
          </span>
          <span data-ttu-id="e6726-281">O valor é gravado imediatamente para que fique visível a todos os processadores no computador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-281">The value is written immediately so that it is visible to all processors in the computer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6726-282">Grava o valor especificado no campo especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-282">Writes the specified value to the specified field.</span>
          </span>
          <span data-ttu-id="e6726-283">Em sistemas que precisam dele, insere uma barreira de memória que impede que o processador reordene as operações de memória da seguinte maneira: se uma leitura ou gravação aparecer antes desse método no código, o processador não poderá movê-la para depois desse método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-283">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6726-284">Para obter mais informações, consulte a classe <xref:System.Threading.Volatile>.</span><span class="sxs-lookup"><span data-stu-id="e6726-284">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Threading.Volatile.Write(System.IntPtr@,System.IntPtr)" />
      </Docs>
    </Member>
    <Member MemberName="Write&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Write&lt;T&gt; (ref T location, T value) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write&lt;class T&gt;(!!T&amp; location, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Write``1(``0@,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write(Of T As Class) (ByRef location As T, value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static void Write(T % location, T value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="T&amp;" RefType="ref" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e6726-285">O tipo de campo para gravação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-285">The type of field to write.</span>
          </span>
          <span data-ttu-id="e6726-286">Este deve ser um tipo de referência, não um tipo de valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-286">This must be a reference type, not a value type.</span>
          </span>
        </typeparam>
        <param name="location">
          <span data-ttu-id="e6726-287">O campo em que a referência de objeto é gravada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-287">The field where the object reference is written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="e6726-288">A referência de objeto a gravar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-288">The object reference to write.</span>
          </span>
          <span data-ttu-id="e6726-289">A referência é gravada imediatamente para que fique visível a todos os processadores no computador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-289">The reference is written immediately so that it is visible to all processors in the computer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6726-290">Grava a referência de objeto especificada no campo especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-290">Writes the specified object reference to the specified field.</span>
          </span>
          <span data-ttu-id="e6726-291">Em sistemas que precisam dele, insere uma barreira de memória que impede que o processador reordene as operações de memória da seguinte maneira: se uma leitura ou gravação aparecer antes desse método no código, o processador não poderá movê-la para depois desse método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6726-291">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6726-292">Para obter mais informações, consulte a classe <xref:System.Threading.Volatile>.</span><span class="sxs-lookup"><span data-stu-id="e6726-292">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>