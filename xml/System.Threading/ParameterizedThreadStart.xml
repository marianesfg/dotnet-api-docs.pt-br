<Type Name="ParameterizedThreadStart" FullName="System.Threading.ParameterizedThreadStart">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7eefb6f07e6d47833b846c1cdd6159512c1c407c" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39778252" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void ParameterizedThreadStart(object obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ParameterizedThreadStart extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ParameterizedThreadStart" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub ParameterizedThreadStart(obj As Object)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void ParameterizedThreadStart(System::Object ^ obj);" />
  <TypeSignature Language="F#" Value="type ParameterizedThreadStart = delegate of obj -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="obj" Type="System.Object" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="obj">
      <span data-ttu-id="c6032-101">Um objeto que contém dados para o procedimento de thread.</span>
      <span class="sxs-lookup">
        <span data-stu-id="c6032-101">An object that contains data for the thread procedure.</span>
      </span>
    </param>
    <summary>
      <span data-ttu-id="c6032-102">Representa o método que é executado em um <see cref="T:System.Threading.Thread" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="c6032-102">Represents the method that executes on a <see cref="T:System.Threading.Thread" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c6032-103">Quando um thread gerenciado é criado, o método que executa no thread é representado por:</span><span class="sxs-lookup"><span data-stu-id="c6032-103">When a managed thread is created, the method that executes on the thread is represented by:</span></span>  
  
-   <span data-ttu-id="c6032-104">Um <xref:System.Threading.ThreadStart> delegado que é passado para o <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=nameWithType> construtor.</span><span class="sxs-lookup"><span data-stu-id="c6032-104">A <xref:System.Threading.ThreadStart> delegate that is passed to the <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=nameWithType> constructor.</span></span>  <span data-ttu-id="c6032-105">Qualquer método que não tem parâmetros e que retorna `void` em c# ou é um `Sub` procedimento no Visual Basic pode representar o delegado.</span><span class="sxs-lookup"><span data-stu-id="c6032-105">Any method that has no parameters and that returns `void` in C# or is a `Sub` procedure in Visual Basic can represent the delegate.</span></span>  
  
-   <span data-ttu-id="c6032-106">Um <xref:System.Threading.ParameterizedThreadStart> delegado que é passado para o <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29?displayProperty=nameWithType> construtor.</span><span class="sxs-lookup"><span data-stu-id="c6032-106">A <xref:System.Threading.ParameterizedThreadStart> delegate that is passed to the <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="c6032-107">Qualquer método que tem um único parâmetro do tipo <xref:System.Object> e que retorna void em c# ou é um procedimento Sub no Visual Basic pode representar o delegado.</span><span class="sxs-lookup"><span data-stu-id="c6032-107">Any method that has a single parameter of type <xref:System.Object> and that returns void in C# or is a Sub procedure in Visual Basic can represent the delegate.</span></span>  
  
 <span data-ttu-id="c6032-108">O thread não começa a execução até o <xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType> método é chamado.</span><span class="sxs-lookup"><span data-stu-id="c6032-108">The thread does not begin executing until the <xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType> method is called.</span></span> <span data-ttu-id="c6032-109">O <xref:System.Threading.ThreadStart> ou <xref:System.Threading.ParameterizedThreadStart> delegado é invocado no thread, e a execução começa na primeira linha do método representado pelo delegado.</span><span class="sxs-lookup"><span data-stu-id="c6032-109">The <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate is invoked on the thread, and execution begins at the first line of the method represented by the delegate.</span></span> <span data-ttu-id="c6032-110">No caso do <xref:System.Threading.ParameterizedThreadStart> delegado, o objeto que é passado para o <xref:System.Threading.Thread.Start%28System.Object%29> método é passado para o delegado.</span><span class="sxs-lookup"><span data-stu-id="c6032-110">In the case of the <xref:System.Threading.ParameterizedThreadStart> delegate, the object that is passed to the <xref:System.Threading.Thread.Start%28System.Object%29> method is passed to the delegate.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c6032-111">Os usuários do Visual Basic e c# podem omitir as <xref:System.Threading.ThreadStart> ou <xref:System.Threading.ParameterizedThreadStart> construtor delegate durante a criação de um thread.</span><span class="sxs-lookup"><span data-stu-id="c6032-111">Visual Basic and C# users can omit the <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate constructor when creating a thread.</span></span> <span data-ttu-id="c6032-112">No Visual Basic, use o `AddressOf` operador ao passar o método para o <xref:System.Threading.Thread.%23ctor%2A> construtor; por exemplo, `Dim t As New Thread(AddressOf ThreadProc)`.</span><span class="sxs-lookup"><span data-stu-id="c6032-112">In Visual Basic, use the `AddressOf` operator when passing your method to the <xref:System.Threading.Thread.%23ctor%2A> constructor; for example, `Dim t As New Thread(AddressOf ThreadProc)`.</span></span> <span data-ttu-id="c6032-113">No c#, basta Especifica o nome do procedimento de thread.</span><span class="sxs-lookup"><span data-stu-id="c6032-113">In C#, simply specify the name of the thread procedure.</span></span> <span data-ttu-id="c6032-114">O compilador seleciona o construtor delegado correto.</span><span class="sxs-lookup"><span data-stu-id="c6032-114">The compiler selects the correct delegate constructor.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c6032-115">Quando você cria um <xref:System.Threading.ParameterizedThreadStart> delegado para um método de instância em C++, o primeiro parâmetro do construtor é a variável de instância.</span><span class="sxs-lookup"><span data-stu-id="c6032-115">When you create a <xref:System.Threading.ParameterizedThreadStart> delegate for an instance method in C++, the first parameter of the constructor is the instance variable.</span></span> <span data-ttu-id="c6032-116">Para um método estático, o primeiro parâmetro do construtor é zero.</span><span class="sxs-lookup"><span data-stu-id="c6032-116">For a static method, the first parameter of the constructor is zero.</span></span> <span data-ttu-id="c6032-117">Para um método estático, o construtor delegate requer apenas um parâmetro: o endereço do método de retorno de chamada, qualificado pelo nome da classe.</span><span class="sxs-lookup"><span data-stu-id="c6032-117">For a static method, the delegate constructor requires only one parameter: the address of the callback method, qualified by the class name.</span></span>  
  
 <span data-ttu-id="c6032-118">O <xref:System.Threading.ParameterizedThreadStart> delegado e o <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> sobrecarga do método tornam mais fácil passar dados para um procedimento de thread, mas essa técnica não é fortemente tipado, porque qualquer objeto pode ser passado para <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c6032-118">The <xref:System.Threading.ParameterizedThreadStart> delegate and the <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> method overload make it easy to pass data to a thread procedure, but this technique is not type safe because any object can be passed to <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType>.</span></span> <span data-ttu-id="c6032-119">Uma maneira mais robusta para passar dados para um procedimento de thread é colocar o procedimento de thread e os campos de dados em um objeto de trabalho.</span><span class="sxs-lookup"><span data-stu-id="c6032-119">A more robust way to pass data to a thread procedure is to put both the thread procedure and the data fields into a worker object.</span></span> <span data-ttu-id="c6032-120">Para obter mais informações, consulte [criando Threads e passando dados na hora de início](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md).</span><span class="sxs-lookup"><span data-stu-id="c6032-120">For more information, see [Creating Threads and Passing Data at Start Time](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md).</span></span>  
  
 <span data-ttu-id="c6032-121">O <xref:System.Threading.ParameterizedThreadStart> delegado dá suporte a apenas um único parâmetro.</span><span class="sxs-lookup"><span data-stu-id="c6032-121">The <xref:System.Threading.ParameterizedThreadStart> delegate supports only a single parameter.</span></span> <span data-ttu-id="c6032-122">Você pode passar vários itens de dados para o <xref:System.Threading.ParameterizedThreadStart> , tornando esse parâmetro um dos seguintes:</span><span class="sxs-lookup"><span data-stu-id="c6032-122">You can pass multiple data items to the <xref:System.Threading.ParameterizedThreadStart> by making that parameter one of the following:</span></span>  
  
-   <span data-ttu-id="c6032-123">Uma matriz.</span><span class="sxs-lookup"><span data-stu-id="c6032-123">An array.</span></span>  
  
-   <span data-ttu-id="c6032-124">Um tipo de coleção, se todos os itens de dados são do mesmo tipo.</span><span class="sxs-lookup"><span data-stu-id="c6032-124">A collection type, if all of the data items are of the same type.</span></span>  
  
-   <span data-ttu-id="c6032-125">Tipo de uma tupla, como <xref:System.Tuple%602> ou <xref:System.Tuple%604>.</span><span class="sxs-lookup"><span data-stu-id="c6032-125">A tuple type, such as <xref:System.Tuple%602> or <xref:System.Tuple%604>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c6032-126">O seguinte exemplo de código usa um <xref:System.Threading.ParameterizedThreadStart> delegado para execução de um método estático e um método de instância.</span><span class="sxs-lookup"><span data-stu-id="c6032-126">The following code example uses a <xref:System.Threading.ParameterizedThreadStart> delegate to execute a static method and an instance method.</span></span> <span data-ttu-id="c6032-127">A primeira <xref:System.Threading.ParameterizedThreadStart> delegado é representado por estático `DoWork` método e a segunda é representado pela instância `DoMoreWork` método.</span><span class="sxs-lookup"><span data-stu-id="c6032-127">The first <xref:System.Threading.ParameterizedThreadStart> delegate is represented by the static `DoWork` method and the second is represented by the instance `DoMoreWork` method.</span></span> <span data-ttu-id="c6032-128">Ambos os métodos correspondem a <xref:System.Threading.ParameterizedThreadStart> assinatura do delegado; ou seja, eles têm um único parâmetro do tipo <xref:System.Object> e não retornam um valor.</span><span class="sxs-lookup"><span data-stu-id="c6032-128">Both methods match the <xref:System.Threading.ParameterizedThreadStart> delegate signature; that is, they have a single parameter of type <xref:System.Object> and don't return a value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c6032-129">Os compiladores do Visual Basic e c# inferem os <xref:System.Threading.ParameterizedThreadStart> delegar das assinaturas do `DoWork` e `DoMoreWork` métodos e chame o construtor correto.</span><span class="sxs-lookup"><span data-stu-id="c6032-129">The Visual Basic and C# compilers infer the <xref:System.Threading.ParameterizedThreadStart> delegate from the signatures of the `DoWork` and `DoMoreWork` methods, and call the correct constructor.</span></span> <span data-ttu-id="c6032-130">Portanto, não há nenhuma chamada de construtor explícito no código.</span><span class="sxs-lookup"><span data-stu-id="c6032-130">Thus, there is no explicit constructor call in the code.</span></span>  
  
 [!code-cpp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CS/source.cs#1)]
 [!code-vb[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.ThreadStart" />
    <altmember cref="T:System.Threading.Thread" />
    <altmember cref="Overload:System.Threading.Thread.Start" />
    <altmember cref="T:System.AppDomain" />
  </Docs>
</Type>