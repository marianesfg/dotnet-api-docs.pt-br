<Type Name="ParameterizedThreadStart" FullName="System.Threading.ParameterizedThreadStart">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bc6c2ce3193e94e9ebebf79527f88ceff7690a1e" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37548767" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void ParameterizedThreadStart(object obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ParameterizedThreadStart extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ParameterizedThreadStart" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub ParameterizedThreadStart(obj As Object)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void ParameterizedThreadStart(System::Object ^ obj);" />
  <TypeSignature Language="F#" Value="type ParameterizedThreadStart = delegate of obj -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="obj" Type="System.Object" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="obj">Um objeto que contém dados para o procedimento de thread.</param>
    <summary>Representa o método que é executado em um <see cref="T:System.Threading.Thread" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando um thread gerenciado é criado, o método que executa no thread é representado por:  
  
-   Um <xref:System.Threading.ThreadStart> delegado que é passado para o <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=nameWithType> construtor.  Qualquer método que não tem parâmetros e que retorna `void` em c# ou é um `Sub` procedimento no Visual Basic pode representar o delegado.  
  
-   Um <xref:System.Threading.ParameterizedThreadStart> delegado que é passado para o <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29?displayProperty=nameWithType> construtor. Qualquer método que tem um único parâmetro do tipo <xref:System.Object> e que retorna void em c# ou é um procedimento Sub no Visual Basic pode representar o delegado.  
  
 O thread não começa a execução até o <xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType> método é chamado. O <xref:System.Threading.ThreadStart> ou <xref:System.Threading.ParameterizedThreadStart> delegado é invocado no thread, e a execução começa na primeira linha do método representado pelo delegado. No caso do <xref:System.Threading.ParameterizedThreadStart> delegado, o objeto que é passado para o <xref:System.Threading.Thread.Start%28System.Object%29> método é passado para o delegado.  
  
> [!NOTE]
>  Os usuários do Visual Basic e c# podem omitir as <xref:System.Threading.ThreadStart> ou <xref:System.Threading.ParameterizedThreadStart> construtor delegate durante a criação de um thread. No Visual Basic, use o `AddressOf` operador ao passar o método para o <xref:System.Threading.Thread.%23ctor%2A> construtor; por exemplo, `Dim t As New Thread(AddressOf ThreadProc)`. No c#, basta Especifica o nome do procedimento de thread. O compilador seleciona o construtor delegado correto.  
  
> [!NOTE]
>  Quando você cria um <xref:System.Threading.ParameterizedThreadStart> delegado para um método de instância em C++, o primeiro parâmetro do construtor é a variável de instância. Para um método estático, o primeiro parâmetro do construtor é zero. Para um método estático, o construtor delegate requer apenas um parâmetro: o endereço do método de retorno de chamada, qualificado pelo nome da classe.  
  
 O <xref:System.Threading.ParameterizedThreadStart> delegado e o <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> sobrecarga do método tornam mais fácil passar dados para um procedimento de thread, mas essa técnica não é fortemente tipado, porque qualquer objeto pode ser passado para <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType>. Uma maneira mais robusta para passar dados para um procedimento de thread é colocar o procedimento de thread e os campos de dados em um objeto de trabalho. Para obter mais informações, consulte [criando Threads e passando dados na hora de início](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md).  
  
 O <xref:System.Threading.ParameterizedThreadStart> delegado dá suporte a apenas um único parâmetro. Você pode passar vários itens de dados para o <xref:System.Threading.ParameterizedThreadStart> , tornando esse parâmetro um dos seguintes:  
  
-   Uma matriz.  
  
-   Um tipo de coleção, se todos os itens de dados são do mesmo tipo.  
  
-   Tipo de uma tupla, como <xref:System.Tuple%602> ou <xref:System.Tuple%604>.  
  
   
  
## Examples  
 O seguinte exemplo de código usa um <xref:System.Threading.ParameterizedThreadStart> delegado para execução de um método estático e um método de instância. A primeira <xref:System.Threading.ParameterizedThreadStart> delegado é representado por estático `DoWork` método e a segunda é representado pela instância `DoMoreWork` método. Ambos os métodos correspondem a <xref:System.Threading.ParameterizedThreadStart> assinatura do delegado; ou seja, eles têm um único parâmetro do tipo <xref:System.Object> e não retornam um valor.  
  
> [!NOTE]
>  Os compiladores do Visual Basic e c# inferem os <xref:System.Threading.ParameterizedThreadStart> delegar das assinaturas do `DoWork` e `DoMoreWork` métodos e chame o construtor correto. Portanto, não há nenhuma chamada de construtor explícito no código.  
  
 [!code-cpp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CS/source.cs#1)]
 [!code-vb[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.ThreadStart" />
    <altmember cref="T:System.Threading.Thread" />
    <altmember cref="Overload:System.Threading.Thread.Start" />
    <altmember cref="T:System.AppDomain" />
  </Docs>
</Type>