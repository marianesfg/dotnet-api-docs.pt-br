<Type Name="ManualResetEvent" FullName="System.Threading.ManualResetEvent">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9f583caf50ddbb4a7bdf1f90196e252a650505bb" /><Meta Name="ms.sourcegitcommit" Value="8b9e4a20f5d8811cfd7b034cb499f2c78ad1b2c1" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="02/06/2019" /><Meta Name="ms.locfileid" Value="55760662" /></Metadata><TypeSignature Language="C#" Value="public sealed class ManualResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManualResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ManualResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ManualResetEvent&#xA;Inherits EventWaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManualResetEvent sealed : System::Threading::EventWaitHandle" />
  <TypeSignature Language="F#" Value="type ManualResetEvent = class&#xA;    inherit EventWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-1.1">System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa um evento de sincronização de thread que, quando sinalizado, deve ser redefinido manualmente. Essa classe não pode ser herdada.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

 Você usa `ManualResetEvent`, <xref:System.Threading.AutoResetEvent>, e <xref:System.Threading.EventWaitHandle> para interação de thread (ou sinalização do thread). Para obter mais informações, consulte o [interação ou a sinalização do Thread](~/docs/standard/threading/overview-of-synchronization-primitives.md#thread-interaction-or-signaling) seção o [visão geral dos primitivos de sincronização](~/docs/standard/threading/overview-of-synchronization-primitives.md) artigo.  

 Quando um thread começa uma atividade que deve ser concluída antes que outros threads prossiga, ela chama [ManualResetEvent.Reset](xref:System.Threading.EventWaitHandle.Reset%2A) colocar `ManualResetEvent` no estado não sinalizado. Esse thread pode ser pensado como controlar o `ManualResetEvent`. Threads que chamam [ManualResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne%2A) bloquear, aguardando o sinal. Quando o controle de thread conclui a atividade, ele chama [ManualResetEvent.Set](xref:System.Threading.EventWaitHandle.Set%2A) para sinalizar que os threads em espera podem continuar. Todos os threads em espera são liberados.  

 Depois que ele tiver sido assinalado `ManualResetEvent` permanece sinalizado até ser redefinido manualmente, chamando o <xref:System.Threading.EventWaitHandle.Reset> método. Ou seja, chamadas para <xref:System.Threading.WaitHandle.WaitOne%2A> retornar imediatamente.  

 Você pode controlar o estado inicial de um `ManualResetEvent` , passando um valor booleano para o construtor: `true` se o estado inicial é sinalizado, e `false` caso contrário.  
 
 `ManualResetEvent` também pode ser usado com o `static` <xref:System.Threading.WaitHandle.WaitAll%2A> e <xref:System.Threading.WaitHandle.WaitAny%2A> métodos.  
  
 Começando com o .NET Framework versão 2.0, <xref:System.Threading.ManualResetEvent> deriva o <xref:System.Threading.EventWaitHandle> classe. Um <xref:System.Threading.ManualResetEvent> é funcionalmente equivalente a um <xref:System.Threading.EventWaitHandle> criado com <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType>.  
  
> [!NOTE]
> Ao contrário do <xref:System.Threading.ManualResetEvent> classe, o <xref:System.Threading.EventWaitHandle> classe fornece acesso a eventos de sincronização do sistema nomeado.  

 Começando com o .NET Framework versão 4.0, o <xref:System.Threading.ManualResetEventSlim?displayProperty=nameWithType> classe é uma alternativa leve para <xref:System.Threading.ManualResetEvent>.    
   
   
  
## Examples  
 O exemplo a seguir demonstra como <xref:System.Threading.ManualResetEvent> funciona. O exemplo inicia com um <xref:System.Threading.ManualResetEvent> no estado não sinalizado (ou seja, `false` é passado para o construtor). O exemplo cria três threads, cada um dos quais blocos de <xref:System.Threading.ManualResetEvent> chamando seu <xref:System.Threading.WaitHandle.WaitOne%2A> método. Quando o usuário pressiona o **Enter** da chave, o exemplo chama o <xref:System.Threading.EventWaitHandle.Set%2A> método, que libera todos os três threads. Compare isso com o comportamento do <xref:System.Threading.AutoResetEvent> classe, que libera segmentos um por vez, redefinindo automaticamente após cada versão.  
  
 Pressionar o **Enter** chave novamente demonstra que o <xref:System.Threading.ManualResetEvent> permanece no estado sinalizado até que seu <xref:System.Threading.EventWaitHandle.Reset%2A> método é chamado: O exemplo inicia mais dois threads. Esses threads não bloqueiam quando eles chamam o <xref:System.Threading.WaitHandle.WaitOne%2A> método, mas são executadas até a conclusão.  
  
 Pressionar o **Enter** chave novamente faz com que o exemplo para chamar o <xref:System.Threading.EventWaitHandle.Reset%2A> método e para iniciar mais um thread, que bloqueia quando ele chama <xref:System.Threading.WaitHandle.WaitOne%2A>. Pressionar o **Enter** chave uma última vez chamadas <xref:System.Threading.EventWaitHandle.Set%2A> liberar o último segmento e o programa termina.  
  
 [!code-cpp[System.Threading.ManualResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ManualResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CS/source.cs#1)]
 [!code-vb[System.Threading.ManualResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Essa classe é thread-safe.</threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
    <related type="Article" href="~/docs/standard/threading/index.md">Threading gerenciado</related>
    <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md">Visão geral dos primitivos de sincronização</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManualResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ManualResetEvent(bool initialState);" />
      <MemberSignature Language="F#" Value="new System.Threading.ManualResetEvent : bool -&gt; System.Threading.ManualResetEvent" Usage="new System.Threading.ManualResetEvent initialState" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState"><see langword="true" /> para definir o estado inicial como sinalizado; <see langword="false" /> para defini-lo como não sinalizado.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Threading.ManualResetEvent" /> com um valor booliano que indica se é necessário definir o estado inicial como sinalizado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se o estado inicial de um <xref:System.Threading.ManualResetEvent> é sinalizado (ou seja, se ele é criado, passando `true` para `initialState`), threads que aguardam o <xref:System.Threading.ManualResetEvent> não bloqueiam. Se o estado inicial é não sinalizado, threads bloqueados até que o <xref:System.Threading.EventWaitHandle.Set%2A> método é chamado.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
        <related type="Article" href="~/docs/standard/threading/index.md">Threading gerenciado</related>
        <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md">Visão geral dos primitivos de sincronização</related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public bool Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Function Reset () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; bool" Usage="manualResetEvent.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Define o estado do evento como não sinalizado, o que causa o bloqueio dos threads.</summary>
        <returns><see langword="true" /> se a operação for bem-sucedida; caso contrário, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public bool Set ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Set() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.Set" />
      <MemberSignature Language="VB.NET" Value="Public Function Set () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Set();" />
      <MemberSignature Language="F#" Value="member this.Set : unit -&gt; bool" Usage="manualResetEvent.Set " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Define o estado do evento a ser sinalizado, permitindo que um ou mais threads de espera prossigam.</summary>
        <returns><see langword="true" /> se a operação for bem-sucedida; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Chamar o método Set deixa o identificador de espera em um estado sinalizado até que o <xref:System.Threading.ManualResetEvent.Reset> método é chamado.

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
