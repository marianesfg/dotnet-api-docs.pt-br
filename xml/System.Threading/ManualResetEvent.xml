<Type Name="ManualResetEvent" FullName="System.Threading.ManualResetEvent">
  <Metadata><Meta Name="ms.openlocfilehash" Value="55d22a680762383ef96947462e2824d553269a1f" /><Meta Name="ms.sourcegitcommit" Value="1654a92bac785a221098172d9cacd405ceaac9b7" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="12/01/2018" /><Meta Name="ms.locfileid" Value="52738797" /></Metadata><TypeSignature Language="C#" Value="public sealed class ManualResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManualResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ManualResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ManualResetEvent&#xA;Inherits EventWaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManualResetEvent sealed : System::Threading::EventWaitHandle" />
  <TypeSignature Language="F#" Value="type ManualResetEvent = class&#xA;    inherit EventWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-1.1">System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="0d605-101">Notifica um ou mais threads de espera em que um evento ocorreu.</span><span class="sxs-lookup"><span data-stu-id="0d605-101">Notifies one or more waiting threads that an event has occurred.</span></span> <span data-ttu-id="0d605-102">Essa classe não pode ser herdada.</span><span class="sxs-lookup"><span data-stu-id="0d605-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d605-103">No .NET Framework versão 2.0, <xref:System.Threading.ManualResetEvent> deriva o novo <xref:System.Threading.EventWaitHandle> classe.</span><span class="sxs-lookup"><span data-stu-id="0d605-103">In the .NET Framework version 2.0, <xref:System.Threading.ManualResetEvent> derives from the new <xref:System.Threading.EventWaitHandle> class.</span></span> <span data-ttu-id="0d605-104">Um <xref:System.Threading.ManualResetEvent> é funcionalmente equivalente a um <xref:System.Threading.EventWaitHandle> criado com <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="0d605-104">A <xref:System.Threading.ManualResetEvent> is functionally equivalent to an <xref:System.Threading.EventWaitHandle> created with <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0d605-105">Ao contrário do <xref:System.Threading.ManualResetEvent> classe, o <xref:System.Threading.EventWaitHandle> classe fornece acesso a eventos de sincronização do sistema nomeado.</span><span class="sxs-lookup"><span data-stu-id="0d605-105">Unlike the <xref:System.Threading.ManualResetEvent> class, the <xref:System.Threading.EventWaitHandle> class provides access to named system synchronization events.</span></span>  
  
 <span data-ttu-id="0d605-106"><xref:System.Threading.ManualResetEvent> permite que os threads se comunicam entre si por meio da sinalização.</span><span class="sxs-lookup"><span data-stu-id="0d605-106"><xref:System.Threading.ManualResetEvent> allows threads to communicate with each other by signaling.</span></span> <span data-ttu-id="0d605-107">Normalmente, essa comunicação diz respeito a uma tarefa que um thread deve ser concluída antes de prosseguir com outros threads.</span><span class="sxs-lookup"><span data-stu-id="0d605-107">Typically, this communication concerns a task which one thread must complete before other threads can proceed.</span></span>  
  
 <span data-ttu-id="0d605-108">Quando um thread começa uma atividade que deve ser concluída antes que outros threads prossiga, ela chama <xref:System.Threading.EventWaitHandle.Reset%2A> colocar `ManualResetEvent` no estado não sinalizado.</span><span class="sxs-lookup"><span data-stu-id="0d605-108">When a thread begins an activity that must complete before other threads proceed, it calls <xref:System.Threading.EventWaitHandle.Reset%2A> to put `ManualResetEvent` in the non-signaled state.</span></span> <span data-ttu-id="0d605-109">Esse thread pode ser pensado como controlar o `ManualResetEvent`.</span><span class="sxs-lookup"><span data-stu-id="0d605-109">This thread can be thought of as controlling the `ManualResetEvent`.</span></span> <span data-ttu-id="0d605-110">Threads que chamam <xref:System.Threading.WaitHandle.WaitOne%2A> sobre o `ManualResetEvent` será bloqueado, aguardando o sinal.</span><span class="sxs-lookup"><span data-stu-id="0d605-110">Threads that call <xref:System.Threading.WaitHandle.WaitOne%2A> on the `ManualResetEvent` will block, awaiting the signal.</span></span> <span data-ttu-id="0d605-111">Quando o controle de thread conclui a atividade, ele chama <xref:System.Threading.EventWaitHandle.Set%2A> para sinalizar que os threads em espera podem continuar.</span><span class="sxs-lookup"><span data-stu-id="0d605-111">When the controlling thread completes the activity, it calls <xref:System.Threading.EventWaitHandle.Set%2A> to signal that the waiting threads can proceed.</span></span> <span data-ttu-id="0d605-112">Todos os threads em espera são liberados.</span><span class="sxs-lookup"><span data-stu-id="0d605-112">All waiting threads are released.</span></span>  
  
 <span data-ttu-id="0d605-113">Depois que ela foi sinalizada, `ManualResetEvent` permanece sinalizado até ser redefinido manualmente.</span><span class="sxs-lookup"><span data-stu-id="0d605-113">Once it has been signaled, `ManualResetEvent` remains signaled until it is manually reset.</span></span> <span data-ttu-id="0d605-114">Ou seja, chamadas para `WaitOne` retornar imediatamente.</span><span class="sxs-lookup"><span data-stu-id="0d605-114">That is, calls to `WaitOne` return immediately.</span></span>  
  
 <span data-ttu-id="0d605-115">Você pode controlar o estado inicial de um `ManualResetEvent` , passando um valor booleano para o construtor `true` se o estado inicial é sinalizado e `false` caso contrário.</span><span class="sxs-lookup"><span data-stu-id="0d605-115">You can control the initial state of a `ManualResetEvent` by passing a Boolean value to the constructor, `true` if the initial state is signaled and `false` otherwise.</span></span>  
  
 <span data-ttu-id="0d605-116">`ManualResetEvent` também pode ser usado com o `static` <xref:System.Threading.WaitHandle.WaitAll%2A> e <xref:System.Threading.WaitHandle.WaitAny%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="0d605-116">`ManualResetEvent` can also be used with the `static`<xref:System.Threading.WaitHandle.WaitAll%2A> and <xref:System.Threading.WaitHandle.WaitAny%2A> methods.</span></span>  
  
 <span data-ttu-id="0d605-117">Para obter mais informações sobre mecanismos de sincronização de thread, consulte [ManualResetEvent e ManualResetEventSlim](~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md) na documentação conceitual.</span><span class="sxs-lookup"><span data-stu-id="0d605-117">For more information about thread synchronization mechanisms, see [ManualResetEvent and ManualResetEventSlim](~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md) in the conceptual documentation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0d605-118">O exemplo a seguir demonstra como <xref:System.Threading.ManualResetEvent> funciona.</span><span class="sxs-lookup"><span data-stu-id="0d605-118">The following example demonstrates how <xref:System.Threading.ManualResetEvent> works.</span></span> <span data-ttu-id="0d605-119">O exemplo inicia com um <xref:System.Threading.ManualResetEvent> no estado não sinalizado (ou seja, `false` é passado para o construtor).</span><span class="sxs-lookup"><span data-stu-id="0d605-119">The example starts with a <xref:System.Threading.ManualResetEvent> in the unsignaled state (that is, `false` is passed to the constructor).</span></span> <span data-ttu-id="0d605-120">O exemplo cria três threads, cada um dos quais blocos de <xref:System.Threading.ManualResetEvent> chamando seu <xref:System.Threading.WaitHandle.WaitOne%2A> método.</span><span class="sxs-lookup"><span data-stu-id="0d605-120">The example creates three threads, each of which blocks on the <xref:System.Threading.ManualResetEvent> by calling its <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span> <span data-ttu-id="0d605-121">Quando o usuário pressiona o **Enter** da chave, o exemplo chama o <xref:System.Threading.EventWaitHandle.Set%2A> método, que libera todos os três threads.</span><span class="sxs-lookup"><span data-stu-id="0d605-121">When the user presses the **Enter** key, the example calls the <xref:System.Threading.EventWaitHandle.Set%2A> method, which releases all three threads.</span></span> <span data-ttu-id="0d605-122">Compare isso com o comportamento do <xref:System.Threading.AutoResetEvent> classe, que libera segmentos um por vez, redefinindo automaticamente após cada versão.</span><span class="sxs-lookup"><span data-stu-id="0d605-122">Contrast this with the behavior of the <xref:System.Threading.AutoResetEvent> class, which releases threads one at a time, resetting automatically after each release.</span></span>  
  
 <span data-ttu-id="0d605-123">Pressionar o **Enter** chave novamente demonstra que o <xref:System.Threading.ManualResetEvent> permanece no estado sinalizado até que seu <xref:System.Threading.EventWaitHandle.Reset%2A> método é chamado: O exemplo inicia mais dois threads.</span><span class="sxs-lookup"><span data-stu-id="0d605-123">Pressing the **Enter** key again demonstrates that the <xref:System.Threading.ManualResetEvent> remains in the signaled state until its <xref:System.Threading.EventWaitHandle.Reset%2A> method is called: The example starts two more threads.</span></span> <span data-ttu-id="0d605-124">Esses threads não bloqueiam quando eles chamam o <xref:System.Threading.WaitHandle.WaitOne%2A> método, mas são executadas até a conclusão.</span><span class="sxs-lookup"><span data-stu-id="0d605-124">These threads do not block when they call the <xref:System.Threading.WaitHandle.WaitOne%2A> method, but instead run to completion.</span></span>  
  
 <span data-ttu-id="0d605-125">Pressionar o **Enter** chave novamente faz com que o exemplo para chamar o <xref:System.Threading.EventWaitHandle.Reset%2A> método e para iniciar mais um thread, que bloqueia quando ele chama <xref:System.Threading.WaitHandle.WaitOne%2A>.</span><span class="sxs-lookup"><span data-stu-id="0d605-125">Pressing the **Enter** key again causes the example to call the <xref:System.Threading.EventWaitHandle.Reset%2A> method and to start one more thread, which blocks when it calls <xref:System.Threading.WaitHandle.WaitOne%2A>.</span></span> <span data-ttu-id="0d605-126">Pressionar o **Enter** chave uma última vez chamadas <xref:System.Threading.EventWaitHandle.Set%2A> liberar o último segmento e o programa termina.</span><span class="sxs-lookup"><span data-stu-id="0d605-126">Pressing the **Enter** key one final time calls <xref:System.Threading.EventWaitHandle.Set%2A> to release the last thread, and the program ends.</span></span>  
  
 [!code-cpp[System.Threading.ManualResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ManualResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CS/source.cs#1)]
 [!code-vb[System.Threading.ManualResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="0d605-127">Essa classe é thread-safe.</span><span class="sxs-lookup"><span data-stu-id="0d605-127">This class is thread safe.</span></span></threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
    <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="0d605-128">Threading gerenciado</span><span class="sxs-lookup"><span data-stu-id="0d605-128">Managed Threading</span></span></related>
    <related type="Article" href="~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md"><span data-ttu-id="0d605-129">Evento de redefinição manual</span><span class="sxs-lookup"><span data-stu-id="0d605-129">Manual Reset Event</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManualResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ManualResetEvent(bool initialState);" />
      <MemberSignature Language="F#" Value="new System.Threading.ManualResetEvent : bool -&gt; System.Threading.ManualResetEvent" Usage="new System.Threading.ManualResetEvent initialState" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState"><span data-ttu-id="0d605-130"><see langword="true" /> para definir o estado inicial como sinalizado; <see langword="false" /> para defini-lo como não sinalizado.</span><span class="sxs-lookup"><span data-stu-id="0d605-130"><see langword="true" /> to set the initial state signaled; <see langword="false" /> to set the initial state to nonsignaled.</span></span></param>
        <summary><span data-ttu-id="0d605-131">Inicializa uma nova instância da classe <see cref="T:System.Threading.ManualResetEvent" /> com um valor booliano que indica se é necessário definir o estado inicial como sinalizado.</span><span class="sxs-lookup"><span data-stu-id="0d605-131">Initializes a new instance of the <see cref="T:System.Threading.ManualResetEvent" /> class with a Boolean value indicating whether to set the initial state to signaled.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d605-132">Se o estado inicial de um <xref:System.Threading.ManualResetEvent> é sinalizado (ou seja, se ele é criado, passando `true` para `initialState`), threads que aguardam o <xref:System.Threading.ManualResetEvent> não bloqueiam.</span><span class="sxs-lookup"><span data-stu-id="0d605-132">If the initial state of a <xref:System.Threading.ManualResetEvent> is signaled (that is, if it is created by passing `true` for `initialState`), threads that wait on the <xref:System.Threading.ManualResetEvent> do not block.</span></span> <span data-ttu-id="0d605-133">Se o estado inicial é não sinalizado, threads bloqueados até que o <xref:System.Threading.EventWaitHandle.Set%2A> método é chamado.</span><span class="sxs-lookup"><span data-stu-id="0d605-133">If the initial state is nonsignaled, threads block until the <xref:System.Threading.EventWaitHandle.Set%2A> method is called.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="0d605-134">Threading gerenciado</span><span class="sxs-lookup"><span data-stu-id="0d605-134">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md"><span data-ttu-id="0d605-135">ManualResetEvent</span><span class="sxs-lookup"><span data-stu-id="0d605-135">ManualResetEvent</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public bool Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Function Reset () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; bool" Usage="manualResetEvent.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0d605-136">Define o estado do evento como não sinalizado, o que causa o bloqueio dos threads.</span><span class="sxs-lookup"><span data-stu-id="0d605-136">Sets the state of the event to nonsignaled, which causes threads to block.</span></span></summary>
        <returns><span data-ttu-id="0d605-137"><see langword="true" /> se a operação for bem-sucedida; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0d605-137"><see langword="true" /> if the operation succeeds; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public bool Set ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Set() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.Set" />
      <MemberSignature Language="VB.NET" Value="Public Function Set () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Set();" />
      <MemberSignature Language="F#" Value="member this.Set : unit -&gt; bool" Usage="manualResetEvent.Set " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0d605-138">Define o estado do evento a ser sinalizado, permitindo que um ou mais threads de espera prossigam.</span><span class="sxs-lookup"><span data-stu-id="0d605-138">Sets the state of the event to signaled, which allows one or more waiting threads to proceed.</span></span></summary>
        <returns><span data-ttu-id="0d605-139"><see langword="true" /> se a operação for bem-sucedida; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0d605-139"><see langword="true" /> if the operation succeeds; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="0d605-140">Chamar o método Set deixa o identificador de espera em um estado sinalizado até que o <xref:System.Threading.ManualResetEvent.Reset> método é chamado.</span><span class="sxs-lookup"><span data-stu-id="0d605-140">Calling the Set method leaves the wait handle in a signaled state until the <xref:System.Threading.ManualResetEvent.Reset> method is called.</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>