<Type Name="CancellationToken" FullName="System.Threading.CancellationToken">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="de6f75d4506356775c02922ff31f88f46d43b9c8" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36606407" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct CancellationToken" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit CancellationToken extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Threading.CancellationToken" />
  <TypeSignature Language="VB.NET" Value="Public Structure CancellationToken" />
  <TypeSignature Language="C++ CLI" Value="public value class CancellationToken" />
  <TypeSignature Language="F#" Value="type CancellationToken = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("IsCancellationRequested = {IsCancellationRequested}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="bb871-101">Propaga a notificação de que as operações devem ser canceladas.</span>
      <span class="sxs-lookup">
        <span data-stu-id="bb871-101">Propagates notification that operations should be canceled.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bb871-102">Um <xref:System.Threading.CancellationToken> permite o cancelamento cooperativo entre threads, itens de trabalho do pool de threads, ou <xref:System.Threading.Tasks.Task> objetos.</span><span class="sxs-lookup"><span data-stu-id="bb871-102">A <xref:System.Threading.CancellationToken> enables cooperative cancellation between threads, thread pool work items, or <xref:System.Threading.Tasks.Task> objects.</span></span> <span data-ttu-id="bb871-103">Criar um token de cancelamento instanciando um <xref:System.Threading.CancellationTokenSource> recuperado do objeto, que gerencia os tokens de cancelamento do seu <xref:System.Threading.CancellationTokenSource.Token%2A?displayProperty=nameWithType> propriedade.</span><span class="sxs-lookup"><span data-stu-id="bb871-103">You create a cancellation token by instantiating a <xref:System.Threading.CancellationTokenSource> object, which manages cancellation tokens retrieved from its <xref:System.Threading.CancellationTokenSource.Token%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="bb871-104">Passe o token de cancelamento para qualquer número de threads, tarefas ou operações que devem receber o aviso de cancelamento.</span><span class="sxs-lookup"><span data-stu-id="bb871-104">You then  pass the cancellation token to any number of threads, tasks, or operations that should receive notice of cancellation.</span></span> <span data-ttu-id="bb871-105">O token não pode ser usado para iniciar o cancelamento.</span><span class="sxs-lookup"><span data-stu-id="bb871-105">The token cannot be used to initiate cancellation.</span></span> <span data-ttu-id="bb871-106">Quando o objeto proprietário chama <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType>, o <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> em todas as cópias do token de cancelamento é definida como `true`.</span><span class="sxs-lookup"><span data-stu-id="bb871-106">When the owning object calls <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType>, the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property on every copy of the cancellation token is set to `true`.</span></span> <span data-ttu-id="bb871-107">Os objetos que recebem a notificação podem responder de maneira que for apropriada.</span><span class="sxs-lookup"><span data-stu-id="bb871-107">The objects that receive the notification can respond in whatever manner is appropriate.</span></span>  
  
 <span data-ttu-id="bb871-108">Para mais informações e exemplos de código, consulte [cancelamento em Threads gerenciados](~/docs/standard/threading/cancellation-in-managed-threads.md).</span><span class="sxs-lookup"><span data-stu-id="bb871-108">For more information and code examples see [Cancellation in Managed Threads](~/docs/standard/threading/cancellation-in-managed-threads.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bb871-109">O exemplo a seguir usa um gerador de número aleatório para emular um aplicativo de coleta de dados que lê 10 valores integrais dos onze instrumentos diferentes.</span><span class="sxs-lookup"><span data-stu-id="bb871-109">The following example uses a random number generator to emulate a data collection application that reads 10 integral values from eleven different instruments.</span></span> <span data-ttu-id="bb871-110">Um valor de zero indica que a medida falhou para um instrumento, caso em que a operação deve ser cancelada e nenhum média geral devem ser calculadas.</span><span class="sxs-lookup"><span data-stu-id="bb871-110">A value of zero indicates that the measurement has failed for one instrument, in which case the operation should be cancelled and no overall mean should be computed.</span></span>  
  
 <span data-ttu-id="bb871-111">Para tratar de possíveis cancelamento da operação, o exemplo cria um <xref:System.Threading.CancellationTokenSource> objeto que gera um token de cancelamento que é passado para um <xref:System.Threading.Tasks.TaskFactory> objeto.</span><span class="sxs-lookup"><span data-stu-id="bb871-111">To handle the possible cancellation of the operation, the example instantiates a <xref:System.Threading.CancellationTokenSource> object that generates a cancellation token which is passed to a <xref:System.Threading.Tasks.TaskFactory> object.</span></span> <span data-ttu-id="bb871-112">O <xref:System.Threading.Tasks.TaskFactory> objeto passa o token de cancelamento para cada tarefa responsável por coletar leituras para um determinado instrumento.</span><span class="sxs-lookup"><span data-stu-id="bb871-112">The <xref:System.Threading.Tasks.TaskFactory> object in turn passes the cancellation token to each of the tasks responsible for collecting readings for a particular instrument.</span></span> <span data-ttu-id="bb871-113">O <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%60%602%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2CSystem.Func%7BSystem.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2C%60%601%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> método é chamado para garantir que a média é computada somente depois que todas as leituras tenham sido coletadas com êxito.</span><span class="sxs-lookup"><span data-stu-id="bb871-113">The <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%60%602%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2CSystem.Func%7BSystem.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2C%60%601%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> method is called to ensure that the mean is computed only after all readings have been gathered successfully.</span></span> <span data-ttu-id="bb871-114">Se uma tarefa não porque ele foi cancelado, a chamada para o <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A?displayProperty=nameWithType> método lançará uma exceção.</span><span class="sxs-lookup"><span data-stu-id="bb871-114">If a task has not because it has been cancelled, the call to the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A?displayProperty=nameWithType> method throws an exception.</span></span>  
  
 [!code-csharp[System.Threading.CancellationTokenSource.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.cancellationtokensource.class/cs/cancel1.cs#1)]
 [!code-vb[System.Threading.CancellationTokenSource.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.cancellationtokensource.class/vb/cancel1.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="bb871-115">Todos os membros protegidos e públicos da <see cref="T:System.Threading.CancellationToken" /> são thread-safe e podem ser usados simultaneamente em vários threads.</span>
      <span class="sxs-lookup">
        <span data-stu-id="bb871-115">All public and protected members of <see cref="T:System.Threading.CancellationToken" /> are thread-safe and may be used concurrently from multiple threads.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CancellationToken (bool canceled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool canceled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (canceled As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CancellationToken(bool canceled);" />
      <MemberSignature Language="F#" Value="new System.Threading.CancellationToken : bool -&gt; System.Threading.CancellationToken" Usage="new System.Threading.CancellationToken canceled" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="canceled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="canceled">
          <span data-ttu-id="bb871-116">O estado cancelado do token.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-116">The canceled state for the token.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bb871-117">Inicializa o <see cref="T:System.Threading.CancellationToken" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-117">Initializes the <see cref="T:System.Threading.CancellationToken" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bb871-118">Tokens criados com esse construtor permanecerá em estado cancelado especificado pelo `canceled` parâmetro.</span><span class="sxs-lookup"><span data-stu-id="bb871-118">Tokens created with this constructor will remain in the canceled state specified by the `canceled` parameter.</span></span> <span data-ttu-id="bb871-119">Se `canceled` é `false`, ambos <xref:System.Threading.CancellationToken.CanBeCanceled%2A> e <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> será `false`.</span><span class="sxs-lookup"><span data-stu-id="bb871-119">If `canceled` is `false`, both <xref:System.Threading.CancellationToken.CanBeCanceled%2A> and <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> will be `false`.</span></span>  
  
 <span data-ttu-id="bb871-120">Se `canceled` é `true`, ambos <xref:System.Threading.CancellationToken.CanBeCanceled%2A> e <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> será `true`.</span><span class="sxs-lookup"><span data-stu-id="bb871-120">If `canceled` is `true`, both <xref:System.Threading.CancellationToken.CanBeCanceled%2A> and <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> will be `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanBeCanceled">
      <MemberSignature Language="C#" Value="public bool CanBeCanceled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanBeCanceled" />
      <MemberSignature Language="DocId" Value="P:System.Threading.CancellationToken.CanBeCanceled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanBeCanceled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanBeCanceled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanBeCanceled : bool" Usage="System.Threading.CancellationToken.CanBeCanceled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bb871-121">Determina se esse token pode estar no estado cancelado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-121">Gets whether this token is capable of being in the canceled state.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="bb871-122">
            <see langword="true" /> se esse token puder estar no estado cancelado; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-122">
              <see langword="true" /> if this token is capable of being in the canceled state; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bb871-123">Se <xref:System.Threading.CancellationToken.CanBeCanceled%2A> retorna `false`, é garantido que o token nunca mudará em um estado cancelado, que significa que <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> nunca retornará `true`.</span><span class="sxs-lookup"><span data-stu-id="bb871-123">If <xref:System.Threading.CancellationToken.CanBeCanceled%2A> returns `false`, it is guaranteed that the token will never transition into a canceled state, meaning that <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> will never return `true`.</span></span> <span data-ttu-id="bb871-124">Um token de cancelamento não pode ser cancelado é retornado por estático <xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType> propriedade.</span><span class="sxs-lookup"><span data-stu-id="bb871-124">A cancellation token that cannot be canceled is returned by the static <xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="bb871-125">Opcionalmente, você pode usar essa propriedade para determinar se um token de cancelamento pode ser cancelada antes da verificação, o valor da <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> propriedade para determinar se ela foi cancelada.</span><span class="sxs-lookup"><span data-stu-id="bb871-125">You can optionally use this property to determine whether a cancellation token can be canceled before examing the value of the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property to determine whether it has been canceled.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="bb871-126">Determina se a instância <see cref="T:System.Threading.CancellationToken" /> atual é igual ao token especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-126">Determines whether the current <see cref="T:System.Threading.CancellationToken" /> instance is equal to the specified token.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (other As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ other);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="cancellationToken.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="bb871-127">O outro objeto a ser comparado com essa instância.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-127">The other object to compare with this instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bb871-128">Determina se a instância <see cref="T:System.Threading.CancellationToken" /> atual é igual ao <see cref="T:System.Object" /> especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-128">Determines whether the current <see cref="T:System.Threading.CancellationToken" /> instance is equal to the specified <see cref="T:System.Object" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bb871-129">
            <see langword="true" /> se <paramref name="other" /> for um <see cref="T:System.Threading.CancellationToken" /> e se as duas instâncias forem iguais, caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-129">
              <see langword="true" /> if <paramref name="other" /> is a <see cref="T:System.Threading.CancellationToken" /> and if the two instances are equal; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="bb871-130">Consulte a seção Comentários para obter mais informações.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-130">See the Remarks section for more information.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
## Remarks  

<span data-ttu-id="bb871-131">Tokens de cancelamento dois são iguais se qualquer uma das seguintes condições for verdadeira:</span><span class="sxs-lookup"><span data-stu-id="bb871-131">Two cancellation tokens are equal if any one of the following conditions is true:</span></span> 

- <span data-ttu-id="bb871-132">Eles estão associados com o mesmo <xref:System.Threading.CancellationTokenSource>.</span><span class="sxs-lookup"><span data-stu-id="bb871-132">They are associated with the same <xref:System.Threading.CancellationTokenSource>.</span></span>

- <span data-ttu-id="bb871-133">Eles foram construídos de público <xref:System.Threading.CancellationToken> construtores e seus <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> valores são iguais.</span><span class="sxs-lookup"><span data-stu-id="bb871-133">They were both constructed from public <xref:System.Threading.CancellationToken> constructors, and their <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> values are equal.</span></span>

- <span data-ttu-id="bb871-134">O valor de ambos os tokens de cancelamento é <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="bb871-134">The value of both cancellation tokens is <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>.</span></span>

       ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="bb871-135">Um <see cref="T:System.Threading.CancellationTokenSource" /> associado foi descartado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-135">An associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Threading.CancellationToken other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(valuetype System.Threading.CancellationToken other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Equals(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As CancellationToken) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::Threading::CancellationToken other);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Threading.CancellationToken -&gt; bool" Usage="cancellationToken.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="bb871-136">O outro <see cref="T:System.Threading.CancellationToken" /> a ser comparado com essa instância.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-136">The other <see cref="T:System.Threading.CancellationToken" /> to compare with this instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bb871-137">Determina se a instância <see cref="T:System.Threading.CancellationToken" /> atual é igual ao token especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-137">Determines whether the current <see cref="T:System.Threading.CancellationToken" /> instance is equal to the specified token.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bb871-138">
            <see langword="true" /> se as instâncias forem iguais; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-138">
              <see langword="true" /> if the instances are equal; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="bb871-139">Consulte a seção Comentários para obter mais informações.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-139">See the Remarks section for more information.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
## Remarks  

<span data-ttu-id="bb871-140">Tokens de cancelamento dois são iguais se qualquer uma das seguintes condições for verdadeira:</span><span class="sxs-lookup"><span data-stu-id="bb871-140">Two cancellation tokens are equal if any one of the following conditions is true:</span></span> 

- <span data-ttu-id="bb871-141">Eles estão associados com o mesmo <xref:System.Threading.CancellationTokenSource>.</span><span class="sxs-lookup"><span data-stu-id="bb871-141">They are associated with the same <xref:System.Threading.CancellationTokenSource>.</span></span>

- <span data-ttu-id="bb871-142">Eles foram construídos de público <xref:System.Threading.CancellationToken> construtores e seus <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> valores são iguais.</span><span class="sxs-lookup"><span data-stu-id="bb871-142">They were both constructed from public <xref:System.Threading.CancellationToken> constructors, and their <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> values are equal.</span></span>

- <span data-ttu-id="bb871-143">O valor de ambos os tokens de cancelamento é <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="bb871-143">The value of both cancellation tokens is <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="cancellationToken.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="bb871-144">Serve como uma função de hash para <see cref="T:System.Threading.CancellationToken" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-144">Serves as a hash function for a <see cref="T:System.Threading.CancellationToken" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bb871-145">Um código hash da instância <see cref="T:System.Threading.CancellationToken" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-145">A hash code for the current <see cref="T:System.Threading.CancellationToken" /> instance.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCancellationRequested">
      <MemberSignature Language="C#" Value="public bool IsCancellationRequested { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCancellationRequested" />
      <MemberSignature Language="DocId" Value="P:System.Threading.CancellationToken.IsCancellationRequested" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCancellationRequested As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCancellationRequested { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCancellationRequested : bool" Usage="System.Threading.CancellationToken.IsCancellationRequested" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bb871-146">Especifica se o cancelamento foi solicitado para esse token.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-146">Gets whether cancellation has been requested for this token.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="bb871-147">
            <see langword="true" /> se o cancelamento tiver sido solicitado para esse token; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-147">
              <see langword="true" /> if cancellation has been requested for this token; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bb871-148">Essa propriedade indica se o cancelamento foi solicitado para este token por meio do token inicialmente sendo construído em um estado cancelado, ou chamar <xref:System.Threading.CancellationTokenSource.Cancel%2A> no token associado <xref:System.Threading.CancellationTokenSource>.</span><span class="sxs-lookup"><span data-stu-id="bb871-148">This property indicates whether cancellation has been requested for this token, either through the token initially being constructed in a canceled state, or through calling <xref:System.Threading.CancellationTokenSource.Cancel%2A> on the token's associated <xref:System.Threading.CancellationTokenSource>.</span></span>  
  
 <span data-ttu-id="bb871-149">Se essa propriedade for `true`, apenas garante que o cancelamento foi solicitado.</span><span class="sxs-lookup"><span data-stu-id="bb871-149">If this property is `true`, it only guarantees that cancellation has been requested.</span></span> <span data-ttu-id="bb871-150">Isso não garante que cada manipulador registrado concluiu a execução, nem que solicitações de cancelamento terminar propagada para todos os manipuladores registrados.</span><span class="sxs-lookup"><span data-stu-id="bb871-150">It does not guarantee that every registered handler has finished executing, nor that cancellation requests have finished propagating to all registered handlers.</span></span> <span data-ttu-id="bb871-151">Sincronização adicional pode ser necessária, especialmente em situações onde objetos relacionados são cancelados simultaneamente.</span><span class="sxs-lookup"><span data-stu-id="bb871-151">Additional synchronization may be required, particularly in situations where related objects are being canceled concurrently.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bb871-152">A seguir está um exemplo simples que executa um processo de servidor até que o <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> propriedade retorna `true`.</span><span class="sxs-lookup"><span data-stu-id="bb871-152">The following is a simple example that executes a server process until the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property returns `true`.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.CancellationToken.IsCancellationRequested#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Tasks.CancellationToken.IsCancellationRequested/cs/cancellation.cs#12)]
 [!code-vb[System.Threading.Tasks.CancellationToken.IsCancellationRequested#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Tasks.CancellationToken.IsCancellationRequested/vb/cancelthreads.vb#12)]  
  
 <span data-ttu-id="bb871-153">O exemplo cria um <xref:System.Threading.CancellationTokenSource> objeto, que controla o acesso ao token de cancelamento.</span><span class="sxs-lookup"><span data-stu-id="bb871-153">The example instantiates a <xref:System.Threading.CancellationTokenSource> object, which controls access to the cancellation token.</span></span> <span data-ttu-id="bb871-154">Em seguida, define dois procedimentos de thread.</span><span class="sxs-lookup"><span data-stu-id="bb871-154">It then defines two thread procedures.</span></span> <span data-ttu-id="bb871-155">A primeira é definida como uma expressão lambda que pools de teclado e, quando a chave "C" é pressionada, chama <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> para definir o token de cancelamento para o estado cancelado.</span><span class="sxs-lookup"><span data-stu-id="bb871-155">The first is defined as a lambda expression that pools the keyboard and, when the "C" key is pressed, calls <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> to set the cancellation token to the cancelled state.</span></span> <span data-ttu-id="bb871-156">O segundo é um método com parâmetros, `ServerClass.StaticMethod`, que executa um loop até que o <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> é de propriedade `true`.</span><span class="sxs-lookup"><span data-stu-id="bb871-156">The second is a parameterized method, `ServerClass.StaticMethod`, that executes a loop until the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property is `true`.</span></span>  
  
 <span data-ttu-id="bb871-157">O thread principal, em seguida, inicia a dois threads e blocos até que o thread que executa o `ServerClass.StaticMethod` método termina.</span><span class="sxs-lookup"><span data-stu-id="bb871-157">The main thread then starts the two threads and blocks until the thread that executes the `ServerClass.StaticMethod` method terminates.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="public static System.Threading.CancellationToken None { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Threading.CancellationToken None" />
      <MemberSignature Language="DocId" Value="P:System.Threading.CancellationToken.None" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property None As CancellationToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::CancellationToken None { System::Threading::CancellationToken get(); };" />
      <MemberSignature Language="F#" Value="member this.None : System.Threading.CancellationToken" Usage="System.Threading.CancellationToken.None" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bb871-158">Retorna um valor <see cref="T:System.Threading.CancellationToken" /> vazio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-158">Returns an empty <see cref="T:System.Threading.CancellationToken" /> value.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="bb871-159">Um token de cancelamento vazio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-159">An empty cancellation token.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bb871-160">O token de cancelamento retornado por essa propriedade não pode ser cancelado; Isto é, seu <xref:System.Threading.CancellationToken.CanBeCanceled%2A> é de propriedade `false`.</span><span class="sxs-lookup"><span data-stu-id="bb871-160">The cancellation token returned by this property cannot be canceled; that is, its <xref:System.Threading.CancellationToken.CanBeCanceled%2A> property is `false`.</span></span>  
  
 <span data-ttu-id="bb871-161">Você também pode usar o c# [default(CancellationToken)](~/docs/csharp/language-reference/keywords/default.md) instrução para criar um token de cancelamento vazio.</span><span class="sxs-lookup"><span data-stu-id="bb871-161">You can also use the C#  [default(CancellationToken)](~/docs/csharp/language-reference/keywords/default.md) statement to create an empty cancellation token.</span></span> 

 <span data-ttu-id="bb871-162">Dois tokens de cancelamento vazio sempre são iguais.</span><span class="sxs-lookup"><span data-stu-id="bb871-162">Two empty cancellation tokens are always equal.</span></span>
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Threading.CancellationToken left, System.Threading.CancellationToken right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Threading.CancellationToken left, valuetype System.Threading.CancellationToken right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.op_Equality(System.Threading.CancellationToken,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As CancellationToken, right As CancellationToken) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Threading::CancellationToken left, System::Threading::CancellationToken right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Threading.CancellationToken * System.Threading.CancellationToken -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Threading.CancellationToken" />
        <Parameter Name="right" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="bb871-163">A primeira instância.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-163">The first instance.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="bb871-164">A segunda instância.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-164">The second instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bb871-165">Determina se duas instâncias <see cref="T:System.Threading.CancellationToken" /> são iguais.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-165">Determines whether two <see cref="T:System.Threading.CancellationToken" /> instances are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bb871-166">
            <see langword="true" /> se as instâncias forem iguais; caso contrário, <see langword="false" /> consulte a seção Comentários para obter mais informações.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-166">
              <see langword="true" /> if the instances are equal; otherwise, <see langword="false" /> See the Remarks section for more information.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
## Remarks  

<span data-ttu-id="bb871-167">Tokens de cancelamento dois são iguais se qualquer uma das seguintes condições for verdadeira:</span><span class="sxs-lookup"><span data-stu-id="bb871-167">Two cancellation tokens are equal if any one of the following conditions is true:</span></span> 

- <span data-ttu-id="bb871-168">Eles estão associados com o mesmo <xref:System.Threading.CancellationTokenSource>.</span><span class="sxs-lookup"><span data-stu-id="bb871-168">They are associated with the same <xref:System.Threading.CancellationTokenSource>.</span></span>

- <span data-ttu-id="bb871-169">Eles foram construídos de público <xref:System.Threading.CancellationToken> construtores e seus <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> valores são iguais.</span><span class="sxs-lookup"><span data-stu-id="bb871-169">They were both constructed from public <xref:System.Threading.CancellationToken> constructors, and their <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> values are equal.</span></span>

- <span data-ttu-id="bb871-170">O valor de ambos os tokens de cancelamento é <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="bb871-170">The value of both cancellation tokens is <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>.</span></span>
       ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="bb871-171">Um <see cref="T:System.Threading.CancellationTokenSource" /> associado foi descartado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-171">An associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Threading.CancellationToken left, System.Threading.CancellationToken right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Threading.CancellationToken left, valuetype System.Threading.CancellationToken right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.op_Inequality(System.Threading.CancellationToken,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As CancellationToken, right As CancellationToken) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Threading::CancellationToken left, System::Threading::CancellationToken right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Threading.CancellationToken * System.Threading.CancellationToken -&gt; bool" Usage="System.Threading.CancellationToken.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Threading.CancellationToken" />
        <Parameter Name="right" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="bb871-172">A primeira instância.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-172">The first instance.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="bb871-173">A segunda instância.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-173">The second instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bb871-174">Determina se duas instâncias <see cref="T:System.Threading.CancellationToken" /> não são iguais.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-174">Determines whether two <see cref="T:System.Threading.CancellationToken" /> instances are not equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bb871-175">
            <see langword="true" /> se as instâncias não forem iguais; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-175">
              <see langword="true" /> if the instances are not equal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
## Remarks  

<span data-ttu-id="bb871-176">Para obter a definição de igualdade, consulte o <xref:System.Threading.CancellationToken.Equals%2A> método.</span><span class="sxs-lookup"><span data-stu-id="bb871-176">For the definition of equality, see the <xref:System.Threading.CancellationToken.Equals%2A> method.</span></span> 
       ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="bb871-177">Um <see cref="T:System.Threading.CancellationTokenSource" /> associado foi descartado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-177">An associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Register">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="bb871-178">Registra um delegado que será chamado quando este <see cref="T:System.Threading.CancellationToken" /> for cancelado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-178">Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationTokenRegistration Register (Action callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.CancellationTokenRegistration Register(class System.Action callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Register(System.Action)" />
      <MemberSignature Language="VB.NET" Value="Public Function Register (callback As Action) As CancellationTokenRegistration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::CancellationTokenRegistration Register(Action ^ callback);" />
      <MemberSignature Language="F#" Value="member this.Register : Action -&gt; System.Threading.CancellationTokenRegistration" Usage="cancellationToken.Register callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenRegistration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="bb871-179">O delegado a ser executado quando o <see cref="T:System.Threading.CancellationToken" /> for cancelado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-179">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken" /> is canceled.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bb871-180">Registra um delegado que será chamado quando este <see cref="T:System.Threading.CancellationToken" /> for cancelado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-180">Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bb871-181">A instância de <see cref="T:System.Threading.CancellationTokenRegistration" /> que pode ser usada para cancelar o registro do retorno de chamada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-181">The <see cref="T:System.Threading.CancellationTokenRegistration" /> instance that can be used to unregister the callback.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bb871-182">Se esse token já está no estado cancelado, o representante será executado imediatamente e de forma síncrona.</span><span class="sxs-lookup"><span data-stu-id="bb871-182">If this token is already in the canceled state, the delegate will be run immediately and synchronously.</span></span> <span data-ttu-id="bb871-183">Qualquer exceção que gera o representante será propagada sem esta chamada de método.</span><span class="sxs-lookup"><span data-stu-id="bb871-183">Any exception the delegate generates will be propagated out of this method call.</span></span>  
  
 <span data-ttu-id="bb871-184">Atual <xref:System.Threading.ExecutionContext> for capturada junto com o delegado e será usada quando executá-lo.</span><span class="sxs-lookup"><span data-stu-id="bb871-184">The current <xref:System.Threading.ExecutionContext> is captured along with the delegate and will be used when executing it.</span></span> 

 <span data-ttu-id="bb871-185">Atual <xref:System.Threading.SynchronizationContext> não é capturado.</span><span class="sxs-lookup"><span data-stu-id="bb871-185">The current <xref:System.Threading.SynchronizationContext> is not captured.</span></span>
 
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="bb871-186">O <see cref="T:System.Threading.CancellationTokenSource" /> associado foi descartado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-186">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="bb871-187">
            <paramref name="callback" /> é nulo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-187">
              <paramref name="callback" /> is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationTokenRegistration Register (Action callback, bool useSynchronizationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.CancellationTokenRegistration Register(class System.Action callback, bool useSynchronizationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Register(System.Action,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Register (callback As Action, useSynchronizationContext As Boolean) As CancellationTokenRegistration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::CancellationTokenRegistration Register(Action ^ callback, bool useSynchronizationContext);" />
      <MemberSignature Language="F#" Value="member this.Register : Action * bool -&gt; System.Threading.CancellationTokenRegistration" Usage="cancellationToken.Register (callback, useSynchronizationContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenRegistration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="useSynchronizationContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="bb871-188">O delegado a ser executado quando o <see cref="T:System.Threading.CancellationToken" /> for cancelado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-188">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken" /> is canceled.</span>
          </span>
        </param>
        <param name="useSynchronizationContext">
          <span data-ttu-id="bb871-189">Um valor que indica se deseja capturar o <see cref="T:System.Threading.SynchronizationContext" /> atual e usá-lo ao invocar o <c>retorno de chamada</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-189">A value that indicates whether to capture the current <see cref="T:System.Threading.SynchronizationContext" /> and use it when invoking the <c>callback</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bb871-190">Registra um delegado que será chamado quando este <see cref="T:System.Threading.CancellationToken" /> for cancelado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-190">Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bb871-191">A instância de <see cref="T:System.Threading.CancellationTokenRegistration" /> que pode ser usada para cancelar o registro do retorno de chamada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-191">The <see cref="T:System.Threading.CancellationTokenRegistration" /> instance that can be used to unregister the callback.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bb871-192">Se esse token já está no estado cancelado, o representante será executado imediatamente e de forma síncrona.</span><span class="sxs-lookup"><span data-stu-id="bb871-192">If this token is already in the canceled state, the delegate will be run immediately and synchronously.</span></span> <span data-ttu-id="bb871-193">Qualquer exceção que gera o representante será propagada sem esta chamada de método.</span><span class="sxs-lookup"><span data-stu-id="bb871-193">Any exception the delegate generates will be propagated out of this method call.</span></span>  
  
 <span data-ttu-id="bb871-194">Atual <xref:System.Threading.ExecutionContext> for capturada junto com o delegado e será usada quando executá-lo.</span><span class="sxs-lookup"><span data-stu-id="bb871-194">The current <xref:System.Threading.ExecutionContext> is captured along with the delegate and will be used when executing it.</span></span> 

 <span data-ttu-id="bb871-195">Se `useSynchronizationContext` é `true`, atual <xref:System.Threading.SynchronizationContext>, se um existe, também é capturado junto com o delegado e será usado quando executá-lo.</span><span class="sxs-lookup"><span data-stu-id="bb871-195">If `useSynchronizationContext` is `true`, the current <xref:System.Threading.SynchronizationContext>, if one exists, is also captured along with the delegate and will be used when executing it.</span></span> <span data-ttu-id="bb871-196">Caso contrário, <xref:System.Threading.SynchronizationContext> não é capturado.</span><span class="sxs-lookup"><span data-stu-id="bb871-196">Otherwise, <xref:System.Threading.SynchronizationContext> is not captured.</span></span>
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="bb871-197">O <see cref="T:System.Threading.CancellationTokenSource" /> associado foi descartado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-197">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="bb871-198">
            <paramref name="callback" /> é nulo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-198">
              <paramref name="callback" /> is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationTokenRegistration Register (Action&lt;object&gt; callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.CancellationTokenRegistration Register(class System.Action`1&lt;object&gt; callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Register (callback As Action(Of Object), state As Object) As CancellationTokenRegistration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::CancellationTokenRegistration Register(Action&lt;System::Object ^&gt; ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.Register : Action&lt;obj&gt; * obj -&gt; System.Threading.CancellationTokenRegistration" Usage="cancellationToken.Register (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenRegistration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="bb871-199">O delegado a ser executado quando o <see cref="T:System.Threading.CancellationToken" /> for cancelado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-199">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken" /> is canceled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="bb871-200">O estado a ser passado para o <c>retorno de chamada</c> quando o delegado é invocado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-200">The state to pass to the <c>callback</c> when the delegate is invoked.</span>
          </span>
          <span data-ttu-id="bb871-201">Isso pode ser nulo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-201">This may be null.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bb871-202">Registra um delegado que será chamado quando este <see cref="T:System.Threading.CancellationToken" /> for cancelado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-202">Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bb871-203">A instância de <see cref="T:System.Threading.CancellationTokenRegistration" /> que pode ser usada para cancelar o registro do retorno de chamada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-203">The <see cref="T:System.Threading.CancellationTokenRegistration" /> instance that can be used to unregister the callback.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bb871-204">Se esse token já está no estado cancelado, o representante será executado imediatamente e de forma síncrona.</span><span class="sxs-lookup"><span data-stu-id="bb871-204">If this token is already in the canceled state, the delegate will be run immediately and synchronously.</span></span> <span data-ttu-id="bb871-205">Qualquer exceção que gera o representante será propagada sem esta chamada de método.</span><span class="sxs-lookup"><span data-stu-id="bb871-205">Any exception the delegate generates will be propagated out of this method call.</span></span>  
  
 <span data-ttu-id="bb871-206">Atual <xref:System.Threading.ExecutionContext> for capturada junto com o delegado e será usada quando executá-lo.</span><span class="sxs-lookup"><span data-stu-id="bb871-206">The current <xref:System.Threading.ExecutionContext> is captured along with the delegate and will be used when executing it.</span></span> 

 <span data-ttu-id="bb871-207">Atual <xref:System.Threading.SynchronizationContext> não é capturado.</span><span class="sxs-lookup"><span data-stu-id="bb871-207">The current <xref:System.Threading.SynchronizationContext> is not captured.</span></span>
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="bb871-208">O <see cref="T:System.Threading.CancellationTokenSource" /> associado foi descartado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-208">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="bb871-209">
            <paramref name="callback" /> é nulo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-209">
              <paramref name="callback" /> is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationTokenRegistration Register (Action&lt;object&gt; callback, object state, bool useSynchronizationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.CancellationTokenRegistration Register(class System.Action`1&lt;object&gt; callback, object state, bool useSynchronizationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Register (callback As Action(Of Object), state As Object, useSynchronizationContext As Boolean) As CancellationTokenRegistration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::CancellationTokenRegistration Register(Action&lt;System::Object ^&gt; ^ callback, System::Object ^ state, bool useSynchronizationContext);" />
      <MemberSignature Language="F#" Value="member this.Register : Action&lt;obj&gt; * obj * bool -&gt; System.Threading.CancellationTokenRegistration" Usage="cancellationToken.Register (callback, state, useSynchronizationContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenRegistration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="useSynchronizationContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="bb871-210">O delegado a ser executado quando o <see cref="T:System.Threading.CancellationToken" /> for cancelado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-210">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken" /> is canceled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="bb871-211">O estado a ser passado para o <c>retorno de chamada</c> quando o delegado é invocado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-211">The state to pass to the <c>callback</c> when the delegate is invoked.</span>
          </span>
          <span data-ttu-id="bb871-212">Isso pode ser nulo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-212">This may be null.</span>
          </span>
        </param>
        <param name="useSynchronizationContext">
          <span data-ttu-id="bb871-213">Um valor booliano que indica se deseja capturar o <see cref="T:System.Threading.SynchronizationContext" /> atual e usá-lo ao invocar o <c>retorno de chamada</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-213">A Boolean value that indicates whether to capture the current <see cref="T:System.Threading.SynchronizationContext" /> and use it when invoking the <c>callback</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bb871-214">Registra um delegado que será chamado quando este <see cref="T:System.Threading.CancellationToken" /> for cancelado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-214">Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bb871-215">A instância de <see cref="T:System.Threading.CancellationTokenRegistration" /> que pode ser usada para cancelar o registro do retorno de chamada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-215">The <see cref="T:System.Threading.CancellationTokenRegistration" /> instance that can be used to unregister the callback.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bb871-216">Se esse token já está no estado cancelado, o representante será executado imediatamente e de forma síncrona.</span><span class="sxs-lookup"><span data-stu-id="bb871-216">If this token is already in the canceled state, the delegate will be run immediately and synchronously.</span></span> <span data-ttu-id="bb871-217">Qualquer exceção que gera o representante será propagada sem esta chamada de método.</span><span class="sxs-lookup"><span data-stu-id="bb871-217">Any exception the delegate generates will be propagated out of this method call.</span></span>  
  
 <span data-ttu-id="bb871-218">Atual <xref:System.Threading.ExecutionContext> for capturada junto com o delegado e será usada quando executá-lo.</span><span class="sxs-lookup"><span data-stu-id="bb871-218">The current <xref:System.Threading.ExecutionContext> is captured along with the delegate and will be used when executing it.</span></span> 

 <span data-ttu-id="bb871-219">Se `useSynchronizationContext` é `true`, atual <xref:System.Threading.SynchronizationContext>, se um existe, também é capturado junto com o delegado e será usado quando executá-lo.</span><span class="sxs-lookup"><span data-stu-id="bb871-219">If `useSynchronizationContext` is `true`, the current <xref:System.Threading.SynchronizationContext>, if one exists, is also captured along with the delegate and will be used when executing it.</span></span> <span data-ttu-id="bb871-220">Caso contrário, <xref:System.Threading.SynchronizationContext> não é capturado.</span><span class="sxs-lookup"><span data-stu-id="bb871-220">Otherwise, <xref:System.Threading.SynchronizationContext> is not captured.</span></span>
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="bb871-221">O <see cref="T:System.Threading.CancellationTokenSource" /> associado foi descartado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-221">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="bb871-222">
            <paramref name="callback" /> é nulo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-222">
              <paramref name="callback" /> is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ThrowIfCancellationRequested">
      <MemberSignature Language="C#" Value="public void ThrowIfCancellationRequested ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ThrowIfCancellationRequested() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.ThrowIfCancellationRequested" />
      <MemberSignature Language="VB.NET" Value="Public Sub ThrowIfCancellationRequested ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ThrowIfCancellationRequested();" />
      <MemberSignature Language="F#" Value="member this.ThrowIfCancellationRequested : unit -&gt; unit" Usage="cancellationToken.ThrowIfCancellationRequested " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="bb871-223">Gera um <see cref="T:System.OperationCanceledException" /> se esse token tiver tido o cancelamento solicitado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-223">Throws a <see cref="T:System.OperationCanceledException" /> if this token has had cancellation requested.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bb871-224">Esse método fornece funcionalidade equivalente a:</span><span class="sxs-lookup"><span data-stu-id="bb871-224">This method provides functionality equivalent to:</span></span>  
  
 <span data-ttu-id="bb871-225">C#</span><span class="sxs-lookup"><span data-stu-id="bb871-225">C#</span></span>  
  
```csharp  
if (token.IsCancellationRequested)   
    throw new OperationCanceledException(token);  
```  
  
```vb  
If token.IsCancellationRequested Then  
    Throw New OperationCanceledException(token)  
End If  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="bb871-226">O token teve o cancelamento solicitado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-226">The token has had cancellation requested.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="bb871-227">O <see cref="T:System.Threading.CancellationTokenSource" /> associado foi descartado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-227">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitHandle">
      <MemberSignature Language="C#" Value="public System.Threading.WaitHandle WaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle WaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.Threading.CancellationToken.WaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WaitHandle As WaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::WaitHandle ^ WaitHandle { System::Threading::WaitHandle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WaitHandle : System.Threading.WaitHandle" Usage="System.Threading.CancellationToken.WaitHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bb871-228">Obtém um <see cref="T:System.Threading.WaitHandle" /> que é sinalizado quando o token é cancelado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-228">Gets a <see cref="T:System.Threading.WaitHandle" /> that is signaled when the token is canceled.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="bb871-229">Um <see cref="T:System.Threading.WaitHandle" /> que é sinalizado quando o token é cancelado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-229">A <see cref="T:System.Threading.WaitHandle" /> that is signaled when the token is canceled.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bb871-230">Acessar essa propriedade faz com que um <xref:System.Threading.WaitHandle> a ser instanciado.</span><span class="sxs-lookup"><span data-stu-id="bb871-230">Accessing this property causes a <xref:System.Threading.WaitHandle> to be instantiated.</span></span> <span data-ttu-id="bb871-231">É preferível para usar somente esta propriedade quando necessário e, em seguida, descarte associado <xref:System.Threading.CancellationTokenSource> instância (disposing a fonte será descartar esse identificador alocado) assim que possível.</span><span class="sxs-lookup"><span data-stu-id="bb871-231">It is preferable to only use this property when necessary, and to then dispose the associated <xref:System.Threading.CancellationTokenSource> instance at the earliest opportunity (disposing the source will dispose of this allocated handle).</span></span> <span data-ttu-id="bb871-232">O identificador não deve ser fechado ou descartado diretamente.</span><span class="sxs-lookup"><span data-stu-id="bb871-232">The handle should not be closed or disposed directly.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="bb871-233">O <see cref="T:System.Threading.CancellationTokenSource" /> associado foi descartado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb871-233">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>