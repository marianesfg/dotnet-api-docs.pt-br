<Type Name="WaitOrTimerCallback" FullName="System.Threading.WaitOrTimerCallback">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="469d652f29246ee0fba56dca58170b558a5ef452" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39873256" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void WaitOrTimerCallback(object state, bool timedOut);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed WaitOrTimerCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.WaitOrTimerCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub WaitOrTimerCallback(state As Object, timedOut As Boolean)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void WaitOrTimerCallback(System::Object ^ state, bool timedOut);" />
  <TypeSignature Language="F#" Value="type WaitOrTimerCallback = delegate of obj * bool -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.ThreadPool</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="state" Type="System.Object" />
    <Parameter Name="timedOut" Type="System.Boolean" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="state">
      <span data-ttu-id="889af-101">Um objeto que contém as informações a serem usadas pelo método de retorno de chamada sempre que ele for executado.</span>
      <span class="sxs-lookup">
        <span data-stu-id="889af-101">An object containing information to be used by the callback method each time it executes.</span>
      </span>
    </param>
    <param name="timedOut">
      <span data-ttu-id="889af-102">
        <see langword="true" /> se o <see cref="T:System.Threading.WaitHandle" /> tiver atingido o tempo limite; <see langword="false" /> se ele tiver sido sinalizado.</span>
      <span class="sxs-lookup">
        <span data-stu-id="889af-102">
          <see langword="true" /> if the <see cref="T:System.Threading.WaitHandle" /> timed out; <see langword="false" /> if it was signaled.</span>
      </span>
    </param>
    <summary>
      <span data-ttu-id="889af-103">Representa um método a ser chamado quando um <see cref="T:System.Threading.WaitHandle" /> é sinalizado ou atinge o tempo limite.</span>
      <span class="sxs-lookup">
        <span data-stu-id="889af-103">Represents a method to be called when a <see cref="T:System.Threading.WaitHandle" /> is signaled or times out.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="889af-104"><xref:System.Threading.WaitOrTimerCallback> representa um método de retorno de chamada que você deseja executar quando um identificador de espera registrada expira ou é sinalizado.</span><span class="sxs-lookup"><span data-stu-id="889af-104"><xref:System.Threading.WaitOrTimerCallback> represents a callback method that you want to execute when a registered wait handle times out or is signaled.</span></span> <span data-ttu-id="889af-105">Criar o delegado passando o seu método de retorno de chamada para o <xref:System.Threading.WaitOrTimerCallback> construtor.</span><span class="sxs-lookup"><span data-stu-id="889af-105">Create the delegate by passing your callback method to the <xref:System.Threading.WaitOrTimerCallback> constructor.</span></span> <span data-ttu-id="889af-106">O método deve ter a assinatura mostrada aqui.</span><span class="sxs-lookup"><span data-stu-id="889af-106">Your method must have the signature shown here.</span></span>  
  
 <span data-ttu-id="889af-107">Criar o identificador de espera registrada, passando o <xref:System.Threading.WaitOrTimerCallback> delegar e uma <xref:System.Threading.WaitHandle> para <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="889af-107">Create the registered wait handle by passing the <xref:System.Threading.WaitOrTimerCallback> delegate and a <xref:System.Threading.WaitHandle> to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="889af-108">Seu método de retorno de chamada é executado a cada vez que o <xref:System.Threading.WaitHandle> expirar ou for sinalizado.</span><span class="sxs-lookup"><span data-stu-id="889af-108">Your callback method executes each time the <xref:System.Threading.WaitHandle> times out or is signaled.</span></span>  
  
  
> [!NOTE]
>  <span data-ttu-id="889af-109">Usuários do Visual Basic podem omitir as <xref:System.Threading.WaitOrTimerCallback> construtor e simplesmente usar o `AddressOf` operador ao passar o método de retorno de chamada para <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>.</span><span class="sxs-lookup"><span data-stu-id="889af-109">Visual Basic users can omit the <xref:System.Threading.WaitOrTimerCallback> constructor, and simply use the `AddressOf` operator when passing the callback method to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>.</span></span> <span data-ttu-id="889af-110">Visual Basic chama automaticamente o construtor delegado correto.</span><span class="sxs-lookup"><span data-stu-id="889af-110">Visual Basic automatically calls the correct delegate constructor.</span></span>  
  
 <span data-ttu-id="889af-111">Se você quer passar informações para o seu método de retorno de chamada, crie um objeto que contém as informações necessárias e passá-lo para <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> quando você cria o identificador de espera registrada.</span><span class="sxs-lookup"><span data-stu-id="889af-111">If you want to pass information to your callback method, create an object that contains the necessary information and pass it to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> when you create the registered wait handle.</span></span> <span data-ttu-id="889af-112">Cada vez que seu método de retorno de chamada é executado, o `state` parâmetro contém este objeto.</span><span class="sxs-lookup"><span data-stu-id="889af-112">Each time your callback method executes, the `state` parameter contains this object.</span></span>  
  
 <span data-ttu-id="889af-113">Para obter mais informações sobre como usar métodos de retorno de chamada para sincronizar threads do pool, consulte [o Pool de threads gerenciados](~/docs/standard/threading/the-managed-thread-pool.md).</span><span class="sxs-lookup"><span data-stu-id="889af-113">For more information about using callback methods to synchronize thread pool threads, see [The Managed Thread Pool](~/docs/standard/threading/the-managed-thread-pool.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="889af-114">O exemplo a seguir mostra como usar o <xref:System.Threading.WaitOrTimerCallback> delegado para representar um método de retorno de chamada que é executado quando um identificador de espera é sinalizado.</span><span class="sxs-lookup"><span data-stu-id="889af-114">The following example shows how to use the <xref:System.Threading.WaitOrTimerCallback> delegate to represent a callback method that is executed when a wait handle is signaled.</span></span>  
  
 <span data-ttu-id="889af-115">O exemplo também mostra como usar o <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> método para executar um método de retorno de chamada especificado quando um identificador de espera especificado é sinalizado.</span><span class="sxs-lookup"><span data-stu-id="889af-115">The example also shows how to use the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method to execute a specified callback method when a specified wait handle is signaled.</span></span> <span data-ttu-id="889af-116">Neste exemplo, o método de retorno de chamada é `WaitProc` e o identificador de espera é um <xref:System.Threading.AutoResetEvent>.</span><span class="sxs-lookup"><span data-stu-id="889af-116">In this example, the callback method is `WaitProc` and the wait handle is an <xref:System.Threading.AutoResetEvent>.</span></span>  
  
 <span data-ttu-id="889af-117">O exemplo define um `TaskInfo` classe para manter as informações que são passadas para o retorno de chamada quando ele é executado.</span><span class="sxs-lookup"><span data-stu-id="889af-117">The example defines a `TaskInfo` class to hold the information that is passed to the callback when it executes.</span></span> <span data-ttu-id="889af-118">O exemplo cria um `TaskInfo` do objeto e o atribui alguns dados de cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="889af-118">The example creates a `TaskInfo` object and assigns it some string data.</span></span> <span data-ttu-id="889af-119">O <xref:System.Threading.RegisteredWaitHandle> que é retornado pela <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> método é atribuído ao `Handle` campo dos `TaskInfo` objeto, de modo que o método de retorno de chamada tem acesso ao <xref:System.Threading.RegisteredWaitHandle>.</span><span class="sxs-lookup"><span data-stu-id="889af-119">The <xref:System.Threading.RegisteredWaitHandle> that is returned by the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method is assigned to the `Handle` field of the `TaskInfo` object, so that the callback method has access to the <xref:System.Threading.RegisteredWaitHandle>.</span></span>  
  
 <span data-ttu-id="889af-120">Além de `TaskInfo` objeto, a chamada para o <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> método Especifica a <xref:System.Threading.AutoResetEvent> aguarda a tarefa, uma <xref:System.Threading.WaitOrTimerCallback> delegado que representa o `WaitProc` vários retornos de chamada de método de retorno de chamada e um intervalo de tempo limite de um segundo .</span><span class="sxs-lookup"><span data-stu-id="889af-120">In addition to the `TaskInfo` object, the call to the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method specifies the <xref:System.Threading.AutoResetEvent> the task waits on, a <xref:System.Threading.WaitOrTimerCallback> delegate that represents the `WaitProc` callback method, a one-second timeout interval, and multiple callbacks.</span></span>  
  
 <span data-ttu-id="889af-121">Quando o thread principal sinaliza a <xref:System.Threading.AutoResetEvent> chamando seus <xref:System.Threading.EventWaitHandle.Set%2A> método, o <xref:System.Threading.WaitOrTimerCallback> delegado é invocado.</span><span class="sxs-lookup"><span data-stu-id="889af-121">When the main thread signals the <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, the <xref:System.Threading.WaitOrTimerCallback> delegate is invoked.</span></span> <span data-ttu-id="889af-122">O `WaitProc` testes de método <xref:System.Threading.RegisteredWaitHandle> para determinar se um tempo limite ocorreu.</span><span class="sxs-lookup"><span data-stu-id="889af-122">The `WaitProc` method tests <xref:System.Threading.RegisteredWaitHandle> to determine whether a timeout occurred.</span></span> <span data-ttu-id="889af-123">Se o retorno de chamada foi invocado porque o identificador de espera foi sinalizado, o `WaitProc` método cancela o registro de <xref:System.Threading.RegisteredWaitHandle>, parando ainda mais os retornos de chamada.</span><span class="sxs-lookup"><span data-stu-id="889af-123">If the callback was invoked because the wait handle was signaled, the `WaitProc` method unregisters the <xref:System.Threading.RegisteredWaitHandle>, stopping further callbacks.</span></span> <span data-ttu-id="889af-124">No caso de um tempo limite, a tarefa continua a espera.</span><span class="sxs-lookup"><span data-stu-id="889af-124">In the case of a timeout, the task continues waiting.</span></span> <span data-ttu-id="889af-125">O `WaitProc` método termina imprimindo uma mensagem no console.</span><span class="sxs-lookup"><span data-stu-id="889af-125">The `WaitProc` method ends by printing a message to the console.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>