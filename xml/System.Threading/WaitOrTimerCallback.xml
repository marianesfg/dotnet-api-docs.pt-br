<Type Name="WaitOrTimerCallback" FullName="System.Threading.WaitOrTimerCallback">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="af724dd6cd68f618205b75cc02a5a8db76787ff4" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37754235" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void WaitOrTimerCallback(object state, bool timedOut);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed WaitOrTimerCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.WaitOrTimerCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub WaitOrTimerCallback(state As Object, timedOut As Boolean)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void WaitOrTimerCallback(System::Object ^ state, bool timedOut);" />
  <TypeSignature Language="F#" Value="type WaitOrTimerCallback = delegate of obj * bool -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.ThreadPool</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="state" Type="System.Object" />
    <Parameter Name="timedOut" Type="System.Boolean" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="state">Um objeto que contém as informações a serem usadas pelo método de retorno de chamada sempre que ele for executado.</param>
    <param name="timedOut">
      <see langword="true" /> se o <see cref="T:System.Threading.WaitHandle" /> tiver atingido o tempo limite; <see langword="false" /> se ele tiver sido sinalizado.</param>
    <summary>Representa um método a ser chamado quando um <see cref="T:System.Threading.WaitHandle" /> é sinalizado ou atinge o tempo limite.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.WaitOrTimerCallback> representa um método de retorno de chamada que você deseja executar quando um identificador de espera registrada expira ou é sinalizado. Criar o delegado passando o seu método de retorno de chamada para o <xref:System.Threading.WaitOrTimerCallback> construtor. O método deve ter a assinatura mostrada aqui.  
  
 Criar o identificador de espera registrada, passando o <xref:System.Threading.WaitOrTimerCallback> delegar e uma <xref:System.Threading.WaitHandle> para <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=nameWithType>. Seu método de retorno de chamada é executado a cada vez que o <xref:System.Threading.WaitHandle> expirar ou for sinalizado.  
  
  
> [!NOTE]
>  Usuários do Visual Basic podem omitir as <xref:System.Threading.WaitOrTimerCallback> construtor e simplesmente usar o `AddressOf` operador ao passar o método de retorno de chamada para <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>. Visual Basic chama automaticamente o construtor delegado correto.  
  
 Se você quer passar informações para o seu método de retorno de chamada, crie um objeto que contém as informações necessárias e passá-lo para <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> quando você cria o identificador de espera registrada. Cada vez que seu método de retorno de chamada é executado, o `state` parâmetro contém este objeto.  
  
 Para obter mais informações sobre como usar métodos de retorno de chamada para sincronizar threads do pool, consulte [o Pool de threads gerenciados](~/docs/standard/threading/the-managed-thread-pool.md).  
  
   
  
## Examples  
 O exemplo a seguir mostra como usar o <xref:System.Threading.WaitOrTimerCallback> delegado para representar um método de retorno de chamada que é executado quando um identificador de espera é sinalizado.  
  
 O exemplo também mostra como usar o <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> método para executar um método de retorno de chamada especificado quando um identificador de espera especificado é sinalizado. Neste exemplo, o método de retorno de chamada é `WaitProc` e o identificador de espera é um <xref:System.Threading.AutoResetEvent>.  
  
 O exemplo define um `TaskInfo` classe para manter as informações que são passadas para o retorno de chamada quando ele é executado. O exemplo cria um `TaskInfo` do objeto e o atribui alguns dados de cadeia de caracteres. O <xref:System.Threading.RegisteredWaitHandle> que é retornado pela <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> método é atribuído ao `Handle` campo dos `TaskInfo` objeto, de modo que o método de retorno de chamada tem acesso ao <xref:System.Threading.RegisteredWaitHandle>.  
  
 Além de `TaskInfo` objeto, a chamada para o <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> método Especifica a <xref:System.Threading.AutoResetEvent> aguarda a tarefa, uma <xref:System.Threading.WaitOrTimerCallback> delegado que representa o `WaitProc` vários retornos de chamada de método de retorno de chamada e um intervalo de tempo limite de um segundo .  
  
 Quando o thread principal sinaliza a <xref:System.Threading.AutoResetEvent> chamando seus <xref:System.Threading.EventWaitHandle.Set%2A> método, o <xref:System.Threading.WaitOrTimerCallback> delegado é invocado. O `WaitProc` testes de método <xref:System.Threading.RegisteredWaitHandle> para determinar se um tempo limite ocorreu. Se o retorno de chamada foi invocado porque o identificador de espera foi sinalizado, o `WaitProc` método cancela o registro de <xref:System.Threading.RegisteredWaitHandle>, parando ainda mais os retornos de chamada. No caso de um tempo limite, a tarefa continua a espera. O `WaitProc` método termina imprimindo uma mensagem no console.  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>