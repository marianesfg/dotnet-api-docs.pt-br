<Type Name="Interlocked" FullName="System.Threading.Interlocked">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="883047e940a7b189bf8c52c13e9ba85d0fb9bf82" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Interlocked" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Interlocked extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Interlocked" />
  <TypeSignature Language="VB.NET" Value="Public Class Interlocked" />
  <TypeSignature Language="C++ CLI" Value="public ref class Interlocked abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="7552e-101">Fornece operações atômicas para variáveis que são compartilhadas por vários threads.</span>
      <span class="sxs-lookup">
        <span data-stu-id="7552e-101">Provides atomic operations for variables that are shared by multiple threads.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7552e-102">Os métodos dessa classe ajudam a proteger contra erros que podem ocorrer quando o Agendador alterna contextos enquanto um thread está atualizando uma variável que pode ser acessada por outros threads, ou quando dois threads estão em execução simultaneamente em processadores separados.</span><span class="sxs-lookup"><span data-stu-id="7552e-102">The methods of this class help protect against errors that can occur when the scheduler switches contexts while a thread is updating a variable that can be accessed by other threads, or when two threads are executing concurrently on separate processors.</span></span> <span data-ttu-id="7552e-103">Os membros dessa classe não lançam exceções.</span><span class="sxs-lookup"><span data-stu-id="7552e-103">The members of this class do not throw exceptions.</span></span>  
  
 <span data-ttu-id="7552e-104">O <xref:System.Threading.Interlocked.Increment%2A> e <xref:System.Threading.Interlocked.Decrement%2A> métodos incrementar ou decrementar a uma variável e armazenar o valor resultante em uma única operação.</span><span class="sxs-lookup"><span data-stu-id="7552e-104">The <xref:System.Threading.Interlocked.Increment%2A> and <xref:System.Threading.Interlocked.Decrement%2A> methods increment or decrement a variable and store the resulting value in a single operation.</span></span> <span data-ttu-id="7552e-105">Na maioria dos computadores, incrementar uma variável não é uma operação atômica, que requerem as seguintes etapas:</span><span class="sxs-lookup"><span data-stu-id="7552e-105">On most computers, incrementing a variable is not an atomic operation, requiring the following steps:</span></span>  
  
1.  <span data-ttu-id="7552e-106">Carregar um valor de uma variável de instância em um registro.</span><span class="sxs-lookup"><span data-stu-id="7552e-106">Load a value from an instance variable into a register.</span></span>  
  
2.  <span data-ttu-id="7552e-107">Aumentar ou diminuir o valor.</span><span class="sxs-lookup"><span data-stu-id="7552e-107">Increment or decrement the value.</span></span>  
  
3.  <span data-ttu-id="7552e-108">Armazene o valor na variável de instância.</span><span class="sxs-lookup"><span data-stu-id="7552e-108">Store the value in the instance variable.</span></span>  
  
 <span data-ttu-id="7552e-109">Se você não usar <xref:System.Threading.Interlocked.Increment%2A> e <xref:System.Threading.Interlocked.Decrement%2A>, um thread pode ser impedido depois de executar as duas primeiras etapas.</span><span class="sxs-lookup"><span data-stu-id="7552e-109">If you do not use <xref:System.Threading.Interlocked.Increment%2A> and <xref:System.Threading.Interlocked.Decrement%2A>, a thread can be preempted after executing the first two steps.</span></span> <span data-ttu-id="7552e-110">Outro thread, em seguida, pode executar todas as três etapas.</span><span class="sxs-lookup"><span data-stu-id="7552e-110">Another thread can then execute all three steps.</span></span> <span data-ttu-id="7552e-111">Quando o primeiro thread retoma a execução, ele substitui o valor da variável de instância, e o efeito do incremento ou decremento executada pelo thread de segundo serão perdido.</span><span class="sxs-lookup"><span data-stu-id="7552e-111">When the first thread resumes execution, it overwrites the value in the instance variable, and the effect of the increment or decrement performed by the second thread is lost.</span></span>  
  
 <span data-ttu-id="7552e-112">O <xref:System.Threading.Interlocked.Exchange%2A> método atomicamente troca os valores das variáveis especificados.</span><span class="sxs-lookup"><span data-stu-id="7552e-112">The <xref:System.Threading.Interlocked.Exchange%2A> method atomically exchanges the values of the specified variables.</span></span> <span data-ttu-id="7552e-113">O <xref:System.Threading.Interlocked.CompareExchange%2A> método combina duas operações: comparando dois valores e armazenar um terceiro valor em uma das variáveis, com base no resultado da comparação.</span><span class="sxs-lookup"><span data-stu-id="7552e-113">The <xref:System.Threading.Interlocked.CompareExchange%2A> method combines two operations: comparing two values and storing a third value in one of the variables, based on the outcome of the comparison.</span></span> <span data-ttu-id="7552e-114">As operações de comparação e o exchange são executadas como uma operação atômica.</span><span class="sxs-lookup"><span data-stu-id="7552e-114">The compare and exchange operations are performed as an atomic operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7552e-115">O exemplo de código a seguir mostra um mecanismo de bloqueio de recurso de thread-safe.</span><span class="sxs-lookup"><span data-stu-id="7552e-115">The following code example shows a thread-safe resource locking mechanism.</span></span>  
  
 [!code-cpp[System.Threading.Interlocked.Exchange Int32 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Interlocked.Exchange Int32 Example/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.Interlocked.Exchange Int32 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Interlocked.Exchange Int32 Example/CS/class1.cs#1)]
 [!code-vb[System.Threading.Interlocked.Exchange Int32 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Interlocked.Exchange Int32 Example/VB/class1.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="7552e-116">Este tipo é thread-safe.</span>
      <span class="sxs-lookup">
        <span data-stu-id="7552e-116">This type is thread safe.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7552e-117">Adiciona dois números inteiros e substitui o primeiro inteiro com a soma, como uma operação atômica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-117">Adds two integers and replaces the first integer with the sum, as an atomic operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static int Add (ref int location1, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Add(int32&amp; location1, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.Add(System.Int32@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (ByRef location1 As Integer, value As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Add(int % location1, int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location1" Type="System.Int32&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="location1">
          <span data-ttu-id="7552e-118">Uma variável que contém o primeiro valor a ser adicionado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-118">A variable containing the first value to be added.</span>
          </span>
          <span data-ttu-id="7552e-119">A soma dos dois valores é armazenada em <c>location1</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-119">The sum of the two values is stored in <c>location1</c>.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="7552e-120">O valor a ser adicionado ao inteiro em <c>location1</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-120">The value to be added to the integer at <c>location1</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7552e-121">Adiciona dois números inteiros de 32 bits e substitui o primeiro inteiro com a soma, como uma operação atômica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-121">Adds two 32-bit integers and replaces the first integer with the sum, as an atomic operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7552e-122">O novo valor armazenado em <paramref name="location1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-122">The new value stored at <paramref name="location1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7552e-123">Este método trata uma condição de estouro encapsulando: se o valor no `location1` é <xref:System.Int32.MaxValue?displayProperty=nameWithType> e `value` é 1, o resultado é <xref:System.Int32.MinValue?displayProperty=nameWithType>; se `value` for 2, o resultado é (<xref:System.Int32.MinValue?displayProperty=nameWithType> + 1); e assim por diante.</span><span class="sxs-lookup"><span data-stu-id="7552e-123">This method handles an overflow condition by wrapping: if the value at `location1` is <xref:System.Int32.MaxValue?displayProperty=nameWithType> and `value` is 1, the result is <xref:System.Int32.MinValue?displayProperty=nameWithType>; if `value` is 2, the result is (<xref:System.Int32.MinValue?displayProperty=nameWithType> + 1); and so on.</span></span> <span data-ttu-id="7552e-124">Nenhuma exceção é lançada.</span><span class="sxs-lookup"><span data-stu-id="7552e-124">No exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="7552e-125">O endereço de <paramref name="location1" /> é um ponteiro nulo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-125">The address of <paramref name="location1" /> is a null pointer.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static long Add (ref long location1, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Add(int64&amp; location1, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.Add(System.Int64@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (ByRef location1 As Long, value As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Add(long % location1, long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location1" Type="System.Int64&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="location1">
          <span data-ttu-id="7552e-126">Uma variável que contém o primeiro valor a ser adicionado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-126">A variable containing the first value to be added.</span>
          </span>
          <span data-ttu-id="7552e-127">A soma dos dois valores é armazenada em <c>location1</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-127">The sum of the two values is stored in <c>location1</c>.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="7552e-128">O valor a ser adicionado ao inteiro em <c>location1</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-128">The value to be added to the integer at <c>location1</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7552e-129">Adiciona dois números inteiros de 64 bits e substitui o primeiro inteiro com a soma, como uma operação atômica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-129">Adds two 64-bit integers and replaces the first integer with the sum, as an atomic operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7552e-130">O novo valor armazenado em <paramref name="location1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-130">The new value stored at <paramref name="location1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7552e-131">Este método trata uma condição de estouro encapsulando: se o valor no `location1` é <xref:System.Int64.MaxValue?displayProperty=nameWithType> e `value` é 1, o resultado é <xref:System.Int64.MinValue?displayProperty=nameWithType>; se `value` for 2, o resultado é (<xref:System.Int64.MinValue?displayProperty=nameWithType> + 1); e assim por diante.</span><span class="sxs-lookup"><span data-stu-id="7552e-131">This method handles an overflow condition by wrapping: if the value at `location1` is <xref:System.Int64.MaxValue?displayProperty=nameWithType> and `value` is 1, the result is <xref:System.Int64.MinValue?displayProperty=nameWithType>; if `value` is 2, the result is (<xref:System.Int64.MinValue?displayProperty=nameWithType> + 1); and so on.</span></span> <span data-ttu-id="7552e-132">Nenhuma exceção é lançada.</span><span class="sxs-lookup"><span data-stu-id="7552e-132">No exception is thrown.</span></span>  
  
 <span data-ttu-id="7552e-133">O <xref:System.Threading.Interlocked.Read%2A> método e as sobrecargas de 64 bits do <xref:System.Threading.Interlocked.Increment%2A>, <xref:System.Threading.Interlocked.Decrement%2A>, e <xref:System.Threading.Interlocked.Add%2A> métodos são realmente atômicos apenas em sistemas em que um <xref:System.IntPtr?displayProperty=nameWithType> tem 64 bits.</span><span class="sxs-lookup"><span data-stu-id="7552e-133">The <xref:System.Threading.Interlocked.Read%2A> method and the 64-bit overloads of the <xref:System.Threading.Interlocked.Increment%2A>, <xref:System.Threading.Interlocked.Decrement%2A>, and <xref:System.Threading.Interlocked.Add%2A> methods are truly atomic only on systems where a <xref:System.IntPtr?displayProperty=nameWithType> is 64 bits long.</span></span> <span data-ttu-id="7552e-134">Em outros sistemas, esses métodos são atômicos com respeito ao outro, mas não em relação a outros meios de acesso a dados.</span><span class="sxs-lookup"><span data-stu-id="7552e-134">On other systems, these methods are atomic with respect to each other, but not with respect to other means of accessing the data.</span></span> <span data-ttu-id="7552e-135">Portanto, para ser thread-safe em sistemas de 32 bits, qualquer acesso a um valor de 64 bits deve ser feito através dos membros do <xref:System.Threading.Interlocked> classe.</span><span class="sxs-lookup"><span data-stu-id="7552e-135">Thus, to be thread safe on 32-bit systems, any access to a 64-bit value must be made through the members of the <xref:System.Threading.Interlocked> class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="7552e-136">O endereço de <paramref name="location1" /> é um ponteiro nulo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-136">The address of <paramref name="location1" /> is a null pointer.</span>
          </span>
        </exception>
        <altmember cref="Overload:System.Threading.Interlocked.Increment" />
        <altmember cref="Overload:System.Threading.Interlocked.Decrement" />
        <altmember cref="M:System.Threading.Interlocked.Read(System.Int64@)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CompareExchange">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7552e-137">Compara dois valores para verificar se são iguais e, em caso de igualdade, substitui o primeiro valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-137">Compares two values for equality and, if they are equal, replaces the first value.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareExchange">
      <MemberSignature Language="C#" Value="public static double CompareExchange (ref double location1, double value, double comparand);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 CompareExchange(float64&amp; location1, float64 value, float64 comparand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.CompareExchange(System.Double@,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompareExchange (ByRef location1 As Double, value As Double, comparand As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double CompareExchange(double % location1, double value, double comparand);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location1" Type="System.Double&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="comparand" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="location1">
          <span data-ttu-id="7552e-138">O destino, cujo valor é comparado com <c>termo de comparação</c> e possivelmente substituído.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-138">The destination, whose value is compared with <c>comparand</c> and possibly replaced.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="7552e-139">O valor que substitui o valor de destino quando a comparação resulta em igualdade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-139">The value that replaces the destination value if the comparison results in equality.</span>
          </span>
        </param>
        <param name="comparand">
          <span data-ttu-id="7552e-140">O valor comparado com o valor em <c>location1</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-140">The value that is compared to the value at <c>location1</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7552e-141">Compara se dois pontos flutuantes de precisão dupla são iguais e, se eles forem, substitui o primeiro valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-141">Compares two double-precision floating point numbers for equality and, if they are equal, replaces the first value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7552e-142">O valor original em <paramref name="location1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-142">The original value in <paramref name="location1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7552e-143">Se `comparand` e o valor na `location1` são iguais, em seguida, `value` é armazenado em `location1`.</span><span class="sxs-lookup"><span data-stu-id="7552e-143">If `comparand` and the value in `location1` are equal, then `value` is stored in `location1`.</span></span> <span data-ttu-id="7552e-144">Caso contrário, nenhuma operação será executada.</span><span class="sxs-lookup"><span data-stu-id="7552e-144">Otherwise, no operation is performed.</span></span> <span data-ttu-id="7552e-145">As operações de comparação e o exchange são executadas como uma operação atômica.</span><span class="sxs-lookup"><span data-stu-id="7552e-145">The compare and exchange operations are performed as an atomic operation.</span></span> <span data-ttu-id="7552e-146">O valor de retorno <xref:System.Threading.Interlocked.CompareExchange%2A> é o valor original no `location1`, esteja ou não ocorre a troca.</span><span class="sxs-lookup"><span data-stu-id="7552e-146">The return value of <xref:System.Threading.Interlocked.CompareExchange%2A> is the original value in `location1`, whether or not the exchange takes place.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7552e-147">O exemplo de código a seguir demonstra um método de thread-safe que acumula total de execução de <xref:System.Double> valores.</span><span class="sxs-lookup"><span data-stu-id="7552e-147">The following code example demonstrates a thread-safe method that accumulates a running total of <xref:System.Double> values.</span></span> <span data-ttu-id="7552e-148">Dois threads de adicionar uma série de <xref:System.Double> valores usando o método de thread-safe e adição comum, e quando os threads concluir os totais são comparados.</span><span class="sxs-lookup"><span data-stu-id="7552e-148">Two threads add a series of <xref:System.Double> values using the thread-safe method and ordinary addition, and when the threads complete the totals are compared.</span></span> <span data-ttu-id="7552e-149">Em um computador com processador duplo, há uma diferença significativa nos totais.</span><span class="sxs-lookup"><span data-stu-id="7552e-149">On a dual-processor computer, there is a significant difference in the totals.</span></span>  
  
 <span data-ttu-id="7552e-150">O método de thread-safe, o valor inicial de execução total é salvo e, em seguida, o <xref:System.Threading.Interlocked.CompareExchange%2A> método é usado para o computado recentemente total com o total antigo do exchange.</span><span class="sxs-lookup"><span data-stu-id="7552e-150">In the thread-safe method, the initial value of the running total is saved, and then the <xref:System.Threading.Interlocked.CompareExchange%2A> method is used to exchange the newly computed total with the old total.</span></span> <span data-ttu-id="7552e-151">Se o valor de retorno não é igual ao valor salvo do total em execução, em seguida, outro thread atualizou o total nesse meio tempo.</span><span class="sxs-lookup"><span data-stu-id="7552e-151">If the return value is not equal to the saved value of the running total, then another thread has updated the total in the meantime.</span></span> <span data-ttu-id="7552e-152">Nesse caso, a tentativa de atualizar o total de execução deve ser repetida.</span><span class="sxs-lookup"><span data-stu-id="7552e-152">In that case, the attempt to update the running total must be repeated.</span></span>  
  
 [!code-csharp[System.Threading.Interlocked CompareExchange Double#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Interlocked CompareExchange Double/cs/source.cs#1)]
 [!code-vb[System.Threading.Interlocked CompareExchange Double#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Interlocked CompareExchange Double/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="7552e-153">O endereço de <paramref name="location1" /> é um ponteiro nulo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-153">The address of <paramref name="location1" /> is a null pointer.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CompareExchange">
      <MemberSignature Language="C#" Value="public static int CompareExchange (ref int location1, int value, int comparand);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 CompareExchange(int32&amp; location1, int32 value, int32 comparand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.CompareExchange(System.Int32@,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompareExchange (ByRef location1 As Integer, value As Integer, comparand As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int CompareExchange(int % location1, int value, int comparand);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location1" Type="System.Int32&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="comparand" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="location1">
          <span data-ttu-id="7552e-154">O destino, cujo valor é comparado com <c>termo de comparação</c> e possivelmente substituído.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-154">The destination, whose value is compared with <c>comparand</c> and possibly replaced.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="7552e-155">O valor que substitui o valor de destino quando a comparação resulta em igualdade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-155">The value that replaces the destination value if the comparison results in equality.</span>
          </span>
        </param>
        <param name="comparand">
          <span data-ttu-id="7552e-156">O valor comparado com o valor em <c>location1</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-156">The value that is compared to the value at <c>location1</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7552e-157">Compara dois inteiros com sinal de 32 bits para verificar se são iguais e, em caso de igualdade, substitui o primeiro valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-157">Compares two 32-bit signed integers for equality and, if they are equal, replaces the first value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7552e-158">O valor original em <paramref name="location1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-158">The original value in <paramref name="location1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7552e-159">Se `comparand` e o valor na `location1` são iguais, em seguida, `value` é armazenado em `location1`.</span><span class="sxs-lookup"><span data-stu-id="7552e-159">If `comparand` and the value in `location1` are equal, then `value` is stored in `location1`.</span></span> <span data-ttu-id="7552e-160">Caso contrário, nenhuma operação será executada.</span><span class="sxs-lookup"><span data-stu-id="7552e-160">Otherwise, no operation is performed.</span></span> <span data-ttu-id="7552e-161">As operações de comparação e o exchange são executadas como uma operação atômica.</span><span class="sxs-lookup"><span data-stu-id="7552e-161">The compare and exchange operations are performed as an atomic operation.</span></span> <span data-ttu-id="7552e-162">O valor de retorno <xref:System.Threading.Interlocked.CompareExchange%2A> é o valor original no `location1`, esteja ou não ocorre a troca.</span><span class="sxs-lookup"><span data-stu-id="7552e-162">The return value of <xref:System.Threading.Interlocked.CompareExchange%2A> is the original value in `location1`, whether or not the exchange takes place.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7552e-163">O exemplo de código a seguir demonstra um método de thread-safe que acumula total de execução.</span><span class="sxs-lookup"><span data-stu-id="7552e-163">The following code example demonstrates a thread-safe method that accumulates a running total.</span></span> <span data-ttu-id="7552e-164">O valor inicial de execução total é salvo e, em seguida, o <xref:System.Threading.Interlocked.CompareExchange%2A> método é usado para o computado recentemente total com o total antigo do exchange.</span><span class="sxs-lookup"><span data-stu-id="7552e-164">The initial value of the running total is saved, and then the <xref:System.Threading.Interlocked.CompareExchange%2A> method is used to exchange the newly computed total with the old total.</span></span> <span data-ttu-id="7552e-165">Se o valor de retorno não é igual ao valor salvo do total em execução, em seguida, outro thread atualizou o total nesse meio tempo.</span><span class="sxs-lookup"><span data-stu-id="7552e-165">If the return value is not equal to the saved value of the running total, then another thread has updated the total in the meantime.</span></span> <span data-ttu-id="7552e-166">Nesse caso, a tentativa de atualizar o total de execução deve ser repetida.</span><span class="sxs-lookup"><span data-stu-id="7552e-166">In that case, the attempt to update the running total must be repeated.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7552e-167">O <xref:System.Threading.Interlocked.Add%2A> método, introduzido na versão 2.0 do .NET Framework, fornece uma maneira mais conveniente para acumular os totais em execução de thread-safe de inteiros.</span><span class="sxs-lookup"><span data-stu-id="7552e-167">The <xref:System.Threading.Interlocked.Add%2A> method, introduced in version 2.0 of the .NET Framework, provides a more convenient way to accumulate thread-safe running totals for integers.</span></span>  
  
 [!code-cpp[System.Threading.Interlocked CompareExchange0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Interlocked CompareExchange0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Interlocked CompareExchange0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Interlocked CompareExchange0/CS/source.cs#1)]
 [!code-vb[System.Threading.Interlocked CompareExchange0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Interlocked CompareExchange0/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="7552e-168">O endereço de <paramref name="location1" /> é um ponteiro nulo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-168">The address of <paramref name="location1" /> is a null pointer.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CompareExchange">
      <MemberSignature Language="C#" Value="public static long CompareExchange (ref long location1, long value, long comparand);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 CompareExchange(int64&amp; location1, int64 value, int64 comparand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.CompareExchange(System.Int64@,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompareExchange (ByRef location1 As Long, value As Long, comparand As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long CompareExchange(long % location1, long value, long comparand);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location1" Type="System.Int64&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="comparand" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="location1">
          <span data-ttu-id="7552e-169">O destino, cujo valor é comparado com <c>termo de comparação</c> e possivelmente substituído.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-169">The destination, whose value is compared with <c>comparand</c> and possibly replaced.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="7552e-170">O valor que substitui o valor de destino quando a comparação resulta em igualdade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-170">The value that replaces the destination value if the comparison results in equality.</span>
          </span>
        </param>
        <param name="comparand">
          <span data-ttu-id="7552e-171">O valor comparado com o valor em <c>location1</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-171">The value that is compared to the value at <c>location1</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7552e-172">Compara dois inteiros com sinal de 64 bits para verificar se são iguais e, em caso de igualdade, substitui o primeiro valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-172">Compares two 64-bit signed integers for equality and, if they are equal, replaces the first value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7552e-173">O valor original em <paramref name="location1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-173">The original value in <paramref name="location1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7552e-174">Se `comparand` e o valor na `location1` são iguais, em seguida, `value` é armazenado em `location1`.</span><span class="sxs-lookup"><span data-stu-id="7552e-174">If `comparand` and the value in `location1` are equal, then `value` is stored in `location1`.</span></span> <span data-ttu-id="7552e-175">Caso contrário, nenhuma operação será executada.</span><span class="sxs-lookup"><span data-stu-id="7552e-175">Otherwise, no operation is performed.</span></span> <span data-ttu-id="7552e-176">As operações de comparação e o exchange são executadas como uma operação atômica.</span><span class="sxs-lookup"><span data-stu-id="7552e-176">The compare and exchange operations are performed as an atomic operation.</span></span> <span data-ttu-id="7552e-177">O valor de retorno <xref:System.Threading.Interlocked.CompareExchange%2A> é o valor original no `location1`, esteja ou não ocorre a troca.</span><span class="sxs-lookup"><span data-stu-id="7552e-177">The return value of <xref:System.Threading.Interlocked.CompareExchange%2A> is the original value in `location1`, whether or not the exchange takes place.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="7552e-178">O endereço de <paramref name="location1" /> é um ponteiro nulo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-178">The address of <paramref name="location1" /> is a null pointer.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CompareExchange">
      <MemberSignature Language="C#" Value="public static IntPtr CompareExchange (ref IntPtr location1, IntPtr value, IntPtr comparand);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int CompareExchange(native int&amp; location1, native int value, native int comparand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.CompareExchange(System.IntPtr@,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompareExchange (ByRef location1 As IntPtr, value As IntPtr, comparand As IntPtr) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr CompareExchange(IntPtr % location1, IntPtr value, IntPtr comparand);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location1" Type="System.IntPtr&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.IntPtr" />
        <Parameter Name="comparand" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="location1">
          <span data-ttu-id="7552e-179">O <see cref="T:System.IntPtr" /> de destino, cujo valor é comparado com o valor de <c>comparand</c> e possivelmente substituído por <c>value</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-179">The destination <see cref="T:System.IntPtr" />, whose value is compared with the value of <c>comparand</c> and possibly replaced by <c>value</c>.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="7552e-180">O <see cref="T:System.IntPtr" /> que substitui o valor de destino quando a comparação resulta em igualdade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-180">The <see cref="T:System.IntPtr" /> that replaces the destination value if the comparison results in equality.</span>
          </span>
        </param>
        <param name="comparand">
          <span data-ttu-id="7552e-181">O <see cref="T:System.IntPtr" /> comparado com o valor em <c>location1</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-181">The <see cref="T:System.IntPtr" /> that is compared to the value at <c>location1</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7552e-182">Compara dois ponteiros ou identificadores específicos da plataforma quanto à igualdade e, se eles são iguais, substitui o primeiro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-182">Compares two platform-specific handles or pointers for equality and, if they are equal, replaces the first one.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7552e-183">O valor original em <paramref name="location1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-183">The original value in <paramref name="location1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7552e-184">Se `comparand` e o valor na `location1` são iguais, em seguida, `value` é armazenado em `location1`.</span><span class="sxs-lookup"><span data-stu-id="7552e-184">If `comparand` and the value in `location1` are equal, then `value` is stored in `location1`.</span></span> <span data-ttu-id="7552e-185">Caso contrário, nenhuma operação será executada.</span><span class="sxs-lookup"><span data-stu-id="7552e-185">Otherwise, no operation is performed.</span></span> <span data-ttu-id="7552e-186">As operações de comparação e o exchange são executadas como uma operação atômica.</span><span class="sxs-lookup"><span data-stu-id="7552e-186">The compare and exchange operations are performed as an atomic operation.</span></span> <span data-ttu-id="7552e-187">O valor de retorno desse método é o valor original no `location1`, esteja ou não ocorre a troca.</span><span class="sxs-lookup"><span data-stu-id="7552e-187">The return value of this method is the original value in `location1`, whether or not the exchange takes place.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7552e-188"><xref:System.IntPtr> é um tipo específico de plataforma.</span><span class="sxs-lookup"><span data-stu-id="7552e-188"><xref:System.IntPtr> is a platform-specific type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="7552e-189">O endereço de <paramref name="location1" /> é um ponteiro nulo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-189">The address of <paramref name="location1" /> is a null pointer.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CompareExchange">
      <MemberSignature Language="C#" Value="public static object CompareExchange (ref object location1, object value, object comparand);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object CompareExchange(object&amp; location1, object value, object comparand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.CompareExchange(System.Object@,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompareExchange (ByRef location1 As Object, value As Object, comparand As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CompareExchange(System::Object ^ % location1, System::Object ^ value, System::Object ^ comparand);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location1" Type="System.Object&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="comparand" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="location1">
          <span data-ttu-id="7552e-190">O objeto de destino que é comparado com <c>comparand</c> e possivelmente substituído.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-190">The destination object that is compared with <c>comparand</c> and possibly replaced.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="7552e-191">O objeto que substitui o objeto de destino quando a comparação resulta em igualdade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-191">The object that replaces the destination object if the comparison results in equality.</span>
          </span>
        </param>
        <param name="comparand">
          <span data-ttu-id="7552e-192">O objeto que é comparado ao objeto em <c>location1</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-192">The object that is compared to the object at <c>location1</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7552e-193">Compara dois objetos quanto à igualdade de referência e, se eles forem iguais, substitui o primeiro objeto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-193">Compares two objects for reference equality and, if they are equal, replaces the first object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7552e-194">O valor original em <paramref name="location1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-194">The original value in <paramref name="location1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7552e-195">Se `comparand` e o objeto no `location1` são iguais, em seguida, `value` é armazenado em `location1`.</span><span class="sxs-lookup"><span data-stu-id="7552e-195">If `comparand` and the object in `location1` are equal, then `value` is stored in `location1`.</span></span> <span data-ttu-id="7552e-196">Caso contrário, nenhuma operação será executada.</span><span class="sxs-lookup"><span data-stu-id="7552e-196">Otherwise, no operation is performed.</span></span> <span data-ttu-id="7552e-197">As operações de comparação e o exchange são executadas como uma operação atômica.</span><span class="sxs-lookup"><span data-stu-id="7552e-197">The compare and exchange operations are performed as an atomic operation.</span></span> <span data-ttu-id="7552e-198">O valor de retorno <xref:System.Threading.Interlocked.CompareExchange%2A> é o valor original no `location1`, esteja ou não ocorre a troca.</span><span class="sxs-lookup"><span data-stu-id="7552e-198">The return value of <xref:System.Threading.Interlocked.CompareExchange%2A> is the original value in `location1`, whether or not the exchange takes place.</span></span>  
  
 <span data-ttu-id="7552e-199">Começando com o .NET Framework versão 2.0, o <xref:System.Threading.Interlocked.CompareExchange%60%601%28%60%600%40%2C%60%600%2C%60%600%29> sobrecarga do método fornece uma alternativa de tipo seguro para tipos de referência.</span><span class="sxs-lookup"><span data-stu-id="7552e-199">Beginning with .NET Framework version 2.0, the <xref:System.Threading.Interlocked.CompareExchange%60%601%28%60%600%40%2C%60%600%2C%60%600%29> method overload provides a type-safe alternative for reference types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7552e-200">Os objetos são comparados para igualdade de referência, em vez de <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="7552e-200">The objects are compared for reference equality, rather than <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="7552e-201">Como resultado, duas instâncias de processador do mesmo tipo de valor (por exemplo, o valor inteiro 3) sempre parecem ser diferentes, e nenhuma operação é executada.</span><span class="sxs-lookup"><span data-stu-id="7552e-201">As a result, two boxed instances of the same value type (for example, the integer 3) always appear to be unequal, and no operation is performed.</span></span> <span data-ttu-id="7552e-202">Não use essa sobrecarga com tipos de valor.</span><span class="sxs-lookup"><span data-stu-id="7552e-202">Do not use this overload with value types.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7552e-203">O endereço de <paramref name="location1" /> é um ponteiro nulo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-203">The address of <paramref name="location1" /> is a null pointer.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CompareExchange">
      <MemberSignature Language="C#" Value="public static float CompareExchange (ref float location1, float value, float comparand);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 CompareExchange(float32&amp; location1, float32 value, float32 comparand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.CompareExchange(System.Single@,System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompareExchange (ByRef location1 As Single, value As Single, comparand As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float CompareExchange(float % location1, float value, float comparand);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location1" Type="System.Single&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="comparand" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="location1">
          <span data-ttu-id="7552e-204">O destino, cujo valor é comparado com <c>termo de comparação</c> e possivelmente substituído.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-204">The destination, whose value is compared with <c>comparand</c> and possibly replaced.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="7552e-205">O valor que substitui o valor de destino quando a comparação resulta em igualdade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-205">The value that replaces the destination value if the comparison results in equality.</span>
          </span>
        </param>
        <param name="comparand">
          <span data-ttu-id="7552e-206">O valor comparado com o valor em <c>location1</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-206">The value that is compared to the value at <c>location1</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7552e-207">Compara se dois números de ponto flutuante de precisão simples são iguais e, se eles são, substitui o primeiro valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-207">Compares two single-precision floating point numbers for equality and, if they are equal, replaces the first value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7552e-208">O valor original em <paramref name="location1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-208">The original value in <paramref name="location1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7552e-209">Se `comparand` e o valor na `location1` são iguais, em seguida, `value` é armazenado em `location1`.</span><span class="sxs-lookup"><span data-stu-id="7552e-209">If `comparand` and the value in `location1` are equal, then `value` is stored in `location1`.</span></span> <span data-ttu-id="7552e-210">Caso contrário, nenhuma operação será executada.</span><span class="sxs-lookup"><span data-stu-id="7552e-210">Otherwise, no operation is performed.</span></span> <span data-ttu-id="7552e-211">As operações de comparação e o exchange são executadas como uma operação atômica.</span><span class="sxs-lookup"><span data-stu-id="7552e-211">The compare and exchange operations are performed as an atomic operation.</span></span> <span data-ttu-id="7552e-212">O valor de retorno <xref:System.Threading.Interlocked.CompareExchange%2A> é o valor original no `location1`, esteja ou não ocorre a troca.</span><span class="sxs-lookup"><span data-stu-id="7552e-212">The return value of <xref:System.Threading.Interlocked.CompareExchange%2A> is the original value in `location1`, whether or not the exchange takes place.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7552e-213">O exemplo de código a seguir demonstra um método de thread-safe que acumula total de execução de <xref:System.Single> valores.</span><span class="sxs-lookup"><span data-stu-id="7552e-213">The following code example demonstrates a thread-safe method that accumulates a running total of <xref:System.Single> values.</span></span> <span data-ttu-id="7552e-214">Dois threads de adicionar uma série de <xref:System.Single> valores usando o método de thread-safe e adição comum, e quando os threads concluir os totais são comparados.</span><span class="sxs-lookup"><span data-stu-id="7552e-214">Two threads add a series of <xref:System.Single> values using the thread-safe method and ordinary addition, and when the threads complete the totals are compared.</span></span> <span data-ttu-id="7552e-215">Em um computador com processador duplo, há uma diferença significativa nos totais.</span><span class="sxs-lookup"><span data-stu-id="7552e-215">On a dual-processor computer, there is a significant difference in the totals.</span></span>  
  
 <span data-ttu-id="7552e-216">O método de thread-safe, o valor inicial de execução total é salvo e, em seguida, o <xref:System.Threading.Interlocked.CompareExchange%2A> método é usado para o computado recentemente total com o total antigo do exchange.</span><span class="sxs-lookup"><span data-stu-id="7552e-216">In the thread-safe method, the initial value of the running total is saved, and then the <xref:System.Threading.Interlocked.CompareExchange%2A> method is used to exchange the newly computed total with the old total.</span></span> <span data-ttu-id="7552e-217">Se o valor de retorno não é igual ao valor salvo do total em execução, em seguida, outro thread atualizou o total nesse meio tempo.</span><span class="sxs-lookup"><span data-stu-id="7552e-217">If the return value is not equal to the saved value of the running total, then another thread has updated the total in the meantime.</span></span> <span data-ttu-id="7552e-218">Nesse caso, a tentativa de atualizar o total de execução deve ser repetida.</span><span class="sxs-lookup"><span data-stu-id="7552e-218">In that case, the attempt to update the running total must be repeated.</span></span>  
  
 [!code-csharp[System.Threading.Interlocked CompareExchange Single#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Interlocked CompareExchange Single/cs/source.cs#1)]
 [!code-vb[System.Threading.Interlocked CompareExchange Single#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Interlocked CompareExchange Single/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="7552e-219">O endereço de <paramref name="location1" /> é um ponteiro nulo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-219">The address of <paramref name="location1" /> is a null pointer.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CompareExchange&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T CompareExchange&lt;T&gt; (ref T location1, T value, T comparand) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T CompareExchange&lt;class T&gt;(!!T&amp; location1, !!T value, !!T comparand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.CompareExchange``1(``0@,``0,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompareExchange(Of T As Class) (ByRef location1 As T, value As T, comparand As T) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T CompareExchange(T % location1, T value, T comparand);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="location1" Type="T&amp;" RefType="ref" />
        <Parameter Name="value" Type="T" />
        <Parameter Name="comparand" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="7552e-220">O tipo a ser usado para <c>location1</c>, <c>valor</c>, e <c>termo de comparação</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-220">The type to be used for <c>location1</c>, <c>value</c>, and <c>comparand</c>.</span>
          </span>
          <span data-ttu-id="7552e-221">Esse tipo deve ser um tipo de referência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-221">This type must be a reference type.</span>
          </span>
        </typeparam>
        <param name="location1">
          <span data-ttu-id="7552e-222">O destino, cujo valor é comparado com <c>termo de comparação</c> e possivelmente substituído.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-222">The destination, whose value is compared with <c>comparand</c> and possibly replaced.</span>
          </span>
          <span data-ttu-id="7552e-223">Esse é um parâmetro de referência (<see langword="ref" /> no C# e <see langword="ByRef" /> no Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-223">This is a reference parameter (<see langword="ref" /> in C#, <see langword="ByRef" /> in Visual Basic).</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="7552e-224">O valor que substitui o valor de destino quando a comparação resulta em igualdade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-224">The value that replaces the destination value if the comparison results in equality.</span>
          </span>
        </param>
        <param name="comparand">
          <span data-ttu-id="7552e-225">O valor comparado com o valor em <c>location1</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-225">The value that is compared to the value at <c>location1</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7552e-226">Compara duas instâncias do tipo de referência <paramref name="T" /> especificado em relação à igualdade e, se elas forem iguais, substitui a primeira.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-226">Compares two instances of the specified reference type <paramref name="T" /> for equality and, if they are equal, replaces the first one.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7552e-227">O valor original em <paramref name="location1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-227">The original value in <paramref name="location1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7552e-228">Se `comparand` e o valor na `location1` são iguais, em seguida, `value` é armazenado em `location1`.</span><span class="sxs-lookup"><span data-stu-id="7552e-228">If `comparand` and the value in `location1` are equal, then `value` is stored in `location1`.</span></span> <span data-ttu-id="7552e-229">Caso contrário, nenhuma operação será executada.</span><span class="sxs-lookup"><span data-stu-id="7552e-229">Otherwise, no operation is performed.</span></span> <span data-ttu-id="7552e-230">A comparação e o exchange são executadas como uma operação atômica.</span><span class="sxs-lookup"><span data-stu-id="7552e-230">The comparison and the exchange are performed as an atomic operation.</span></span> <span data-ttu-id="7552e-231">O valor de retorno desse método é o valor original no `location1`, esteja ou não ocorre a troca.</span><span class="sxs-lookup"><span data-stu-id="7552e-231">The return value of this method is the original value in `location1`, whether or not the exchange takes place.</span></span>  
  
 <span data-ttu-id="7552e-232">Esse método só dá suporte a tipos de referência.</span><span class="sxs-lookup"><span data-stu-id="7552e-232">This method only supports reference types.</span></span> <span data-ttu-id="7552e-233">Há sobrecargas do <xref:System.Threading.Interlocked.CompareExchange%2A> método para os tipos de valor <xref:System.Int32>, <xref:System.Int64>, <xref:System.IntPtr>, <xref:System.Single>, e <xref:System.Double>, mas não há suporte para outros tipos de valor.</span><span class="sxs-lookup"><span data-stu-id="7552e-233">There are overloads of the <xref:System.Threading.Interlocked.CompareExchange%2A> method for the value types <xref:System.Int32>, <xref:System.Int64>, <xref:System.IntPtr>, <xref:System.Single>, and <xref:System.Double>, but there is no support for other value types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7552e-234">Essa sobrecarga de método é preferível a <xref:System.Threading.Interlocked.CompareExchange%28System.Object%40%2CSystem.Object%2CSystem.Object%29> sobrecarga do método, porque o último requer o objeto de destino a serem acessadas associação tardia.</span><span class="sxs-lookup"><span data-stu-id="7552e-234">This method overload is preferable to the <xref:System.Threading.Interlocked.CompareExchange%28System.Object%40%2CSystem.Object%2CSystem.Object%29> method overload, because the latter requires the destination object to be accessed late-bound.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="7552e-235">O endereço de <paramref name="location1" /> é um ponteiro nulo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-235">The address of <paramref name="location1" /> is a null pointer.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Decrement">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7552e-236">Decrementa uma variável especificada e armazena o resultado, como uma operação atômica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-236">Decrements a specified variable and stores the result, as an atomic operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Decrement">
      <MemberSignature Language="C#" Value="public static int Decrement (ref int location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Decrement(int32&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.Decrement(System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Decrement (ByRef location As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Decrement(int % location);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Int32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="7552e-237">A variável cujo valor deve ser decrementado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-237">The variable whose value is to be decremented.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7552e-238">Decrementa uma variável especificada e armazena o resultado, como uma operação atômica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-238">Decrements a specified variable and stores the result, as an atomic operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7552e-239">O valor decrementado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-239">The decremented value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7552e-240">Este método trata uma condição de estouro encapsulando: se `location`  =  <xref:System.Int32.MinValue?displayProperty=nameWithType>, `location` - 1 = <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="7552e-240">This method handles an overflow condition by wrapping: If `location` = <xref:System.Int32.MinValue?displayProperty=nameWithType>, `location` - 1 = <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span> <span data-ttu-id="7552e-241">Nenhuma exceção é lançada.</span><span class="sxs-lookup"><span data-stu-id="7552e-241">No exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7552e-242">O exemplo a seguir determina quantos números aleatórios que variam de 0 a 1.000 são necessários para gerar números aleatórios 1.000 com um valor de ponto médio.</span><span class="sxs-lookup"><span data-stu-id="7552e-242">The following example determines how many random numbers that range from 0 to 1,000 are required to generate 1,000 random numbers with a midpoint value.</span></span> <span data-ttu-id="7552e-243">Para controlar o número de valores de ponto médio, uma variável, `midpointCount`, é definida igual a 1.000 e reduzido cada vez que o gerador de número aleatório retorna um valor de ponto médio.</span><span class="sxs-lookup"><span data-stu-id="7552e-243">To keep track of the number of midpoint values, a variable, `midpointCount`, is set equal to 1,000 and decremented each time the random number generator returns a midpoint value.</span></span> <span data-ttu-id="7552e-244">Como três threads geram números aleatórios, o <xref:System.Threading.Interlocked.Decrement%28System.Int32%40%29> método é chamado para garantir que vários threads não atualizem `midpointCount` simultaneamente.</span><span class="sxs-lookup"><span data-stu-id="7552e-244">Because three threads generate the random numbers, the <xref:System.Threading.Interlocked.Decrement%28System.Int32%40%29> method is called to ensure that multiple threads don't update `midpointCount` concurrently.</span></span> <span data-ttu-id="7552e-245">Observe que um bloqueio também é usado para proteger o gerador de número aleatório e que um <xref:System.Threading.CountdownEvent> objeto é usado para garantir que o `Main` método não concluir a execução antes de três threads.</span><span class="sxs-lookup"><span data-stu-id="7552e-245">Note that a lock is also used to protect the random number generator, and that a <xref:System.Threading.CountdownEvent> object is used to ensure that the `Main` method doesn't finish execution before the three threads.</span></span>  
  
 [!code-csharp[System.Threading.Interlocked.Decrement#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.interlocked.decrement/cs/decrement1.cs#1)]
 [!code-vb[System.Threading.Interlocked.Decrement#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.interlocked.decrement/vb/decrement1.vb#1)]  
  
 <span data-ttu-id="7552e-246">O exemplo a seguir é semelhante ao anterior, exceto que ele usa o em vez de um procedimento de thread para gerar números inteiros de ponto médio aleatório 50.000.</span><span class="sxs-lookup"><span data-stu-id="7552e-246">The following example is similar to the previous one, except that it uses the  instead of a thread procedure to generate 50,000 random midpoint integers.</span></span> <span data-ttu-id="7552e-247">Neste exemplo, uma expressão lambda substitui o `GenerateNumbers` procedimento de thread e a chamada para o <xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=nameWithType> método elimina a necessidade do <xref:System.Threading.CountdownEvent> objeto.</span><span class="sxs-lookup"><span data-stu-id="7552e-247">In this example, a lambda expression replaces the `GenerateNumbers` thread procedure, and the call to the <xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=nameWithType> method eliminates the need for the <xref:System.Threading.CountdownEvent> object.</span></span>  
  
 [!code-csharp[System.Threading.Interlocked.Decrement#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.interlocked.decrement/cs/decrement2.cs#2)]
 [!code-vb[System.Threading.Interlocked.Decrement#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.interlocked.decrement/vb/decrement2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7552e-248">O endereço de <paramref name="location" /> é um ponteiro nulo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-248">The address of <paramref name="location" /> is a null pointer.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Decrement">
      <MemberSignature Language="C#" Value="public static long Decrement (ref long location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Decrement(int64&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.Decrement(System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Decrement (ByRef location As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Decrement(long % location);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Int64&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="7552e-249">A variável cujo valor deve ser decrementado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-249">The variable whose value is to be decremented.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7552e-250">Diminui uma variável especificada e armazena o resultado como uma operação atômica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-250">Decrements the specified variable and stores the result, as an atomic operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7552e-251">O valor decrementado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-251">The decremented value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7552e-252">Este método trata uma condição de estouro encapsulando: se `location`  =  <xref:System.Int64.MinValue?displayProperty=nameWithType>, `location` - 1 = <xref:System.Int64.MaxValue?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="7552e-252">This method handles an overflow condition by wrapping: if `location` = <xref:System.Int64.MinValue?displayProperty=nameWithType>, `location` - 1 = <xref:System.Int64.MaxValue?displayProperty=nameWithType>.</span></span> <span data-ttu-id="7552e-253">Nenhuma exceção é lançada.</span><span class="sxs-lookup"><span data-stu-id="7552e-253">No exception is thrown.</span></span>  
  
 <span data-ttu-id="7552e-254">O <xref:System.Threading.Interlocked.Read%2A> método e as sobrecargas de 64 bits do <xref:System.Threading.Interlocked.Increment%2A>, <xref:System.Threading.Interlocked.Decrement%2A>, e <xref:System.Threading.Interlocked.Add%2A> métodos são realmente atômicos apenas em sistemas em que um <xref:System.IntPtr?displayProperty=nameWithType> tem 64 bits.</span><span class="sxs-lookup"><span data-stu-id="7552e-254">The <xref:System.Threading.Interlocked.Read%2A> method and the 64-bit overloads of the <xref:System.Threading.Interlocked.Increment%2A>, <xref:System.Threading.Interlocked.Decrement%2A>, and <xref:System.Threading.Interlocked.Add%2A> methods are truly atomic only on systems where a <xref:System.IntPtr?displayProperty=nameWithType> is 64 bits long.</span></span> <span data-ttu-id="7552e-255">Em outros sistemas, esses métodos são atômicos com respeito ao outro, mas não em relação a outros meios de acesso a dados.</span><span class="sxs-lookup"><span data-stu-id="7552e-255">On other systems, these methods are atomic with respect to each other, but not with respect to other means of accessing the data.</span></span> <span data-ttu-id="7552e-256">Portanto, para ser thread-safe em sistemas de 32 bits, qualquer acesso a um valor de 64 bits deve ser feito através dos membros do <xref:System.Threading.Interlocked> classe.</span><span class="sxs-lookup"><span data-stu-id="7552e-256">Thus, to be thread safe on 32-bit systems, any access to a 64-bit value must be made through the members of the <xref:System.Threading.Interlocked> class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7552e-257">O endereço de <paramref name="location" /> é um ponteiro nulo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-257">The address of <paramref name="location" /> is a null pointer.</span>
          </span>
        </exception>
        <altmember cref="Overload:System.Threading.Interlocked.Increment" />
        <altmember cref="Overload:System.Threading.Interlocked.Add" />
        <altmember cref="M:System.Threading.Interlocked.Read(System.Int64@)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Exchange">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7552e-258">Define uma variável com um valor especificado como uma operação atômica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-258">Sets a variable to a specified value as an atomic operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Exchange">
      <MemberSignature Language="C#" Value="public static double Exchange (ref double location1, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Exchange(float64&amp; location1, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.Exchange(System.Double@,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exchange (ByRef location1 As Double, value As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Exchange(double % location1, double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location1" Type="System.Double&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="location1">
          <span data-ttu-id="7552e-259">A variável a ser definida com o valor especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-259">The variable to set to the specified value.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="7552e-260">O valor para o qual o parâmetro <c>location1</c> é definido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-260">The value to which the <c>location1</c> parameter is set.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7552e-261">Define um número de ponto flutuante de precisão dupla para um valor especificado e retorna o valor original, como uma operação atômica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-261">Sets a double-precision floating point number to a specified value and returns the original value, as an atomic operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7552e-262">O valor original de <paramref name="location1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-262">The original value of <paramref name="location1" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="7552e-263">O endereço de <paramref name="location1" /> é um ponteiro nulo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-263">The address of <paramref name="location1" /> is a null pointer.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Exchange">
      <MemberSignature Language="C#" Value="public static int Exchange (ref int location1, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Exchange(int32&amp; location1, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.Exchange(System.Int32@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exchange (ByRef location1 As Integer, value As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Exchange(int % location1, int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location1" Type="System.Int32&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="location1">
          <span data-ttu-id="7552e-264">A variável a ser definida com o valor especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-264">The variable to set to the specified value.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="7552e-265">O valor para o qual o parâmetro <c>location1</c> é definido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-265">The value to which the <c>location1</c> parameter is set.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7552e-266">Define um inteiro com sinal de 32 bits com um valor especificado e retorna o valor original, como uma operação atômica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-266">Sets a 32-bit signed integer to a specified value and returns the original value, as an atomic operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7552e-267">O valor original de <paramref name="location1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-267">The original value of <paramref name="location1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="7552e-268">O exemplo de código a seguir mostra um mecanismo de bloqueio de recurso de thread-safe.</span><span class="sxs-lookup"><span data-stu-id="7552e-268">The following code example shows a thread-safe resource locking mechanism.</span></span>  
  
 [!code-cpp[System.Threading.Interlocked.Exchange Int32 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Interlocked.Exchange Int32 Example/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.Interlocked.Exchange Int32 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Interlocked.Exchange Int32 Example/CS/class1.cs#1)]
 [!code-vb[System.Threading.Interlocked.Exchange Int32 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Interlocked.Exchange Int32 Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7552e-269">O endereço de <paramref name="location1" /> é um ponteiro nulo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-269">The address of <paramref name="location1" /> is a null pointer.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Exchange">
      <MemberSignature Language="C#" Value="public static long Exchange (ref long location1, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Exchange(int64&amp; location1, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.Exchange(System.Int64@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exchange (ByRef location1 As Long, value As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Exchange(long % location1, long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location1" Type="System.Int64&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="location1">
          <span data-ttu-id="7552e-270">A variável a ser definida com o valor especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-270">The variable to set to the specified value.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="7552e-271">O valor para o qual o parâmetro <c>location1</c> é definido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-271">The value to which the <c>location1</c> parameter is set.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7552e-272">Define um inteiro com sinal de 64 bits com um valor especificado e retorna o valor original, como uma operação atômica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-272">Sets a 64-bit signed integer to a specified value and returns the original value, as an atomic operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7552e-273">O valor original de <paramref name="location1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-273">The original value of <paramref name="location1" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="7552e-274">O endereço de <paramref name="location1" /> é um ponteiro nulo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-274">The address of <paramref name="location1" /> is a null pointer.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Exchange">
      <MemberSignature Language="C#" Value="public static IntPtr Exchange (ref IntPtr location1, IntPtr value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int Exchange(native int&amp; location1, native int value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.Exchange(System.IntPtr@,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exchange (ByRef location1 As IntPtr, value As IntPtr) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr Exchange(IntPtr % location1, IntPtr value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location1" Type="System.IntPtr&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="location1">
          <span data-ttu-id="7552e-275">A variável a ser definida com o valor especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-275">The variable to set to the specified value.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="7552e-276">O valor para o qual o parâmetro <c>location1</c> é definido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-276">The value to which the <c>location1</c> parameter is set.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7552e-277">Define um identificador específico de plataforma ou um ponteiro para um valor especificado e retorna o valor original como uma operação atômica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-277">Sets a platform-specific handle or pointer to a specified value and returns the original value, as an atomic operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7552e-278">O valor original de <paramref name="location1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-278">The original value of <paramref name="location1" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="7552e-279">O endereço de <paramref name="location1" /> é um ponteiro nulo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-279">The address of <paramref name="location1" /> is a null pointer.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Exchange">
      <MemberSignature Language="C#" Value="public static object Exchange (ref object location1, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Exchange(object&amp; location1, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.Exchange(System.Object@,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exchange (ByRef location1 As Object, value As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Exchange(System::Object ^ % location1, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location1" Type="System.Object&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="location1">
          <span data-ttu-id="7552e-280">A variável a ser definida com o valor especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-280">The variable to set to the specified value.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="7552e-281">O valor para o qual o parâmetro <c>location1</c> é definido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-281">The value to which the <c>location1</c> parameter is set.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7552e-282">Define um objeto com um valor especificado e retorna uma referência ao objeto original, como uma operação atômica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-282">Sets an object to a specified value and returns a reference to the original object, as an atomic operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7552e-283">O valor original de <paramref name="location1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-283">The original value of <paramref name="location1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7552e-284">Começando com o .NET Framework versão 2.0, o <xref:System.Threading.Interlocked.Exchange%60%601%28%60%600%40%2C%60%600%29> sobrecarga do método fornece uma alternativa de tipo seguro para tipos de referência.</span><span class="sxs-lookup"><span data-stu-id="7552e-284">Beginning with .NET Framework version 2.0, the <xref:System.Threading.Interlocked.Exchange%60%601%28%60%600%40%2C%60%600%29> method overload provides a type-safe alternative for reference types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7552e-285">O exemplo de código a seguir mostra a sintaxe para usar `Exchange` com qualquer objeto do tipo de referência.</span><span class="sxs-lookup"><span data-stu-id="7552e-285">The following code example shows the syntax for using `Exchange` with any reference type object.</span></span>  
  
 [!code-cpp[System.Threading.Interlocked.Exchange#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Interlocked.Exchange/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Interlocked.Exchange#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Interlocked.Exchange/CS/source.cs#1)]
 [!code-vb[System.Threading.Interlocked.Exchange#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Interlocked.Exchange/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7552e-286">O endereço de <paramref name="location1" /> é um ponteiro nulo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-286">The address of <paramref name="location1" /> is a null pointer.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Exchange">
      <MemberSignature Language="C#" Value="public static float Exchange (ref float location1, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Exchange(float32&amp; location1, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.Exchange(System.Single@,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exchange (ByRef location1 As Single, value As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Exchange(float % location1, float value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location1" Type="System.Single&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="location1">
          <span data-ttu-id="7552e-287">A variável a ser definida com o valor especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-287">The variable to set to the specified value.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="7552e-288">O valor para o qual o parâmetro <c>location1</c> é definido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-288">The value to which the <c>location1</c> parameter is set.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7552e-289">Define um número de ponto flutuante de precisão simples para um valor especificado e retorna o valor original como uma operação atômica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-289">Sets a single-precision floating point number to a specified value and returns the original value, as an atomic operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7552e-290">O valor original de <paramref name="location1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-290">The original value of <paramref name="location1" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="7552e-291">O endereço de <paramref name="location1" /> é um ponteiro nulo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-291">The address of <paramref name="location1" /> is a null pointer.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Exchange&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Exchange&lt;T&gt; (ref T location1, T value) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Exchange&lt;class T&gt;(!!T&amp; location1, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.Exchange``1(``0@,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exchange(Of T As Class) (ByRef location1 As T, value As T) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T Exchange(T % location1, T value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="location1" Type="T&amp;" RefType="ref" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="7552e-292">O tipo a ser usado para <c>location1</c> e <c>valor</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-292">The type to be used for <c>location1</c> and <c>value</c>.</span>
          </span>
          <span data-ttu-id="7552e-293">Esse tipo deve ser um tipo de referência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-293">This type must be a reference type.</span>
          </span>
        </typeparam>
        <param name="location1">
          <span data-ttu-id="7552e-294">A variável a ser definida com o valor especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-294">The variable to set to the specified value.</span>
          </span>
          <span data-ttu-id="7552e-295">Esse é um parâmetro de referência (<see langword="ref" /> no C# e <see langword="ByRef" /> no Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-295">This is a reference parameter (<see langword="ref" /> in C#, <see langword="ByRef" /> in Visual Basic).</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="7552e-296">O valor para o qual o parâmetro <c>location1</c> é definido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-296">The value to which the <c>location1</c> parameter is set.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7552e-297">Define uma variável do tipo <paramref name="T" /> especificado como um valor especificado e retorna o valor original como uma operação atômica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-297">Sets a variable of the specified type <paramref name="T" /> to a specified value and returns the original value, as an atomic operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7552e-298">O valor original de <paramref name="location1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-298">The original value of <paramref name="location1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7552e-299">Esse método só dá suporte a tipos de referência.</span><span class="sxs-lookup"><span data-stu-id="7552e-299">This method only supports reference types.</span></span> <span data-ttu-id="7552e-300">Há sobrecargas do <xref:System.Threading.Interlocked.Exchange%2A> método para o <xref:System.Int32>, <xref:System.Int64>, <xref:System.IntPtr>, <xref:System.Single>, e <xref:System.Double> os tipos de valor, mas não há suporte para outros tipos de valor.</span><span class="sxs-lookup"><span data-stu-id="7552e-300">There are overloads of the <xref:System.Threading.Interlocked.Exchange%2A> method for the <xref:System.Int32>, <xref:System.Int64>, <xref:System.IntPtr>, <xref:System.Single>, and <xref:System.Double> value types, but there is no support for other value types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7552e-301">Essa sobrecarga de método é preferível a <xref:System.Threading.Interlocked.Exchange%28System.Object%40%2CSystem.Object%29> sobrecarga do método, porque o último requer acesso de associação tardia para o objeto de destino.</span><span class="sxs-lookup"><span data-stu-id="7552e-301">This method overload is preferable to the <xref:System.Threading.Interlocked.Exchange%28System.Object%40%2CSystem.Object%29> method overload, because the latter requires late-bound access to the destination object .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7552e-302">O exemplo a seguir executa dez tarefas, cada um deles gera números de 100 caracteres dez parte.</span><span class="sxs-lookup"><span data-stu-id="7552e-302">The following example launches ten tasks, each of which generates  100 ten-character part numbers.</span></span> <span data-ttu-id="7552e-303">Em seguida, o número de peça é o primeiro em ordem alfabética.</span><span class="sxs-lookup"><span data-stu-id="7552e-303">It then the part number that is first alphabetically.</span></span>  
  
 [!code-csharp[System.Threading.Interlocked.Exchange#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Interlocked.Exchange/CS/Exchange5.cs#2)]
 [!code-vb[System.Threading.Interlocked.Exchange#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Interlocked.Exchange/VB/Exchange5.vb#2)]  
  
 <span data-ttu-id="7552e-304">O exemplo usa o `firstWidget` variável para armazenar a ID que ocorre primeiro na ordem de classificação.</span><span class="sxs-lookup"><span data-stu-id="7552e-304">The example uses the `firstWidget` variable to store the ID that occurs first in the sort order.</span></span> <span data-ttu-id="7552e-305">Ele compara cada ID gerado com o `firstWidget` valor.</span><span class="sxs-lookup"><span data-stu-id="7552e-305">It compares each ID that it generates with the `firstWidget` value.</span></span>  <span data-ttu-id="7552e-306">Se o novo valor precede o valor atual de `firstWidget` na ordem de classificação, o exemplo chama o <xref:System.Threading.Interlocked.Exchange%2A> método para atribuir o novo valor para `firstWidget`.</span><span class="sxs-lookup"><span data-stu-id="7552e-306">If the new value precedes the current value of `firstWidget` in the sort order, the example calls the <xref:System.Threading.Interlocked.Exchange%2A> method to assign the new value to `firstWidget`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="7552e-307">O endereço de <paramref name="location1" /> é um ponteiro nulo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-307">The address of <paramref name="location1" /> is a null pointer.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Increment">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7552e-308">Incrementa uma variável especificada e armazena o resultado, como uma operação atômica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-308">Increments a specified variable and stores the result, as an atomic operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Increment">
      <MemberSignature Language="C#" Value="public static int Increment (ref int location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Increment(int32&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.Increment(System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Increment (ByRef location As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Increment(int % location);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Int32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="7552e-309">A variável cujo valor deve ser incrementado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-309">The variable whose value is to be incremented.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7552e-310">Incrementa uma variável especificada e armazena o resultado, como uma operação atômica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-310">Increments a specified variable and stores the result, as an atomic operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7552e-311">O valor incrementado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-311">The incremented value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7552e-312">Este método trata uma condição de estouro encapsulando: se `location`  =  <xref:System.Int32.MaxValue?displayProperty=nameWithType>, `location` + 1 = <xref:System.Int32.MinValue?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="7552e-312">This method handles an overflow condition by wrapping: if `location` = <xref:System.Int32.MaxValue?displayProperty=nameWithType>, `location` + 1 = <xref:System.Int32.MinValue?displayProperty=nameWithType>.</span></span> <span data-ttu-id="7552e-313">Nenhuma exceção é lançada.</span><span class="sxs-lookup"><span data-stu-id="7552e-313">No exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7552e-314">O exemplo a seguir determina quantos números aleatórios que variam de 0 a 1.000 são necessários para gerar números aleatórios 1.000 com um valor de ponto médio.</span><span class="sxs-lookup"><span data-stu-id="7552e-314">The following example determines how many random numbers that range from 0 to 1,000 are required to generate 1,000 random numbers with a midpoint value.</span></span> <span data-ttu-id="7552e-315">Para controlar o número de valores de ponto médio, uma variável, `midpointCount`, é definido como 0 e incrementado toda vez que o gerador de número aleatório retorna um valor de ponto médio até atingir a 10.000.</span><span class="sxs-lookup"><span data-stu-id="7552e-315">To keep track of the number of midpoint values, a variable, `midpointCount`, is set equal to 0 and incremented each time the random number generator returns a midpoint value until it reaches 10,000.</span></span> <span data-ttu-id="7552e-316">Como três threads geram números aleatórios, o <xref:System.Threading.Interlocked.Increment%28System.Int32%40%29> método é chamado para garantir que vários threads não atualizem `midpointCount` simultaneamente.</span><span class="sxs-lookup"><span data-stu-id="7552e-316">Because three threads generate the random numbers, the <xref:System.Threading.Interlocked.Increment%28System.Int32%40%29> method is called to ensure that multiple threads don't update `midpointCount` concurrently.</span></span> <span data-ttu-id="7552e-317">Observe que um bloqueio também é usado para proteger o gerador de número aleatório e que um <xref:System.Threading.CountdownEvent> objeto é usado para garantir que o `Main` método não concluir a execução antes de três threads.</span><span class="sxs-lookup"><span data-stu-id="7552e-317">Note that a lock is also used to protect the random number generator, and that a <xref:System.Threading.CountdownEvent> object is used to ensure that the `Main` method doesn't finish execution before the three threads.</span></span>  
  
 [!code-csharp[System.Threading.Interlocked.Increment2#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.interlocked.increment2/cs/increment3.cs#3)]
 [!code-vb[System.Threading.Interlocked.Increment2#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.interlocked.increment2/vb/Increment3.vb#3)]  
  
 <span data-ttu-id="7552e-318">O exemplo a seguir é semelhante ao anterior, exceto que ele usa o em vez de um procedimento de thread para gerar números inteiros de ponto médio aleatório 50.000.</span><span class="sxs-lookup"><span data-stu-id="7552e-318">The following example is similar to the previous one, except that it uses the  instead of a thread procedure to generate 50,000 random midpoint integers.</span></span> <span data-ttu-id="7552e-319">Neste exemplo, uma expressão lambda substitui o `GenerateNumbers` procedimento de thread e a chamada para o <xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=nameWithType> método elimina a necessidade do <xref:System.Threading.CountdownEvent> objeto.</span><span class="sxs-lookup"><span data-stu-id="7552e-319">In this example, a lambda expression replaces the `GenerateNumbers` thread procedure, and the call to the <xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=nameWithType> method eliminates the need for the <xref:System.Threading.CountdownEvent> object.</span></span>  
  
 [!code-csharp[System.Threading.Interlocked.Increment2#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.interlocked.increment2/cs/increment4.cs#4)]
 [!code-vb[System.Threading.Interlocked.Increment2#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.interlocked.increment2/vb/Increment4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="7552e-320">O endereço de <paramref name="location" /> é um ponteiro nulo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-320">The address of <paramref name="location" /> is a null pointer.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Increment">
      <MemberSignature Language="C#" Value="public static long Increment (ref long location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Increment(int64&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.Increment(System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Increment (ByRef location As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Increment(long % location);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Int64&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="7552e-321">A variável cujo valor deve ser incrementado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-321">The variable whose value is to be incremented.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7552e-322">Incrementa uma variável especificada e armazena o resultado, como uma operação atômica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-322">Increments a specified variable and stores the result, as an atomic operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7552e-323">O valor incrementado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-323">The incremented value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7552e-324">Este método trata uma condição de estouro encapsulando: se `location`  =  <xref:System.Int64.MaxValue?displayProperty=nameWithType>, `location` + 1 = <xref:System.Int64.MinValue?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="7552e-324">This method handles an overflow condition by wrapping: if `location` = <xref:System.Int64.MaxValue?displayProperty=nameWithType>, `location` + 1 = <xref:System.Int64.MinValue?displayProperty=nameWithType>.</span></span> <span data-ttu-id="7552e-325">Nenhuma exceção é lançada.</span><span class="sxs-lookup"><span data-stu-id="7552e-325">No exception is thrown.</span></span>  
  
 <span data-ttu-id="7552e-326">O <xref:System.Threading.Interlocked.Read%2A> método e as sobrecargas de 64 bits do <xref:System.Threading.Interlocked.Increment%2A>, <xref:System.Threading.Interlocked.Decrement%2A>, e <xref:System.Threading.Interlocked.Add%2A> métodos são realmente atômicos apenas em sistemas em que um <xref:System.IntPtr?displayProperty=nameWithType> tem 64 bits.</span><span class="sxs-lookup"><span data-stu-id="7552e-326">The <xref:System.Threading.Interlocked.Read%2A> method and the 64-bit overloads of the <xref:System.Threading.Interlocked.Increment%2A>, <xref:System.Threading.Interlocked.Decrement%2A>, and <xref:System.Threading.Interlocked.Add%2A> methods are truly atomic only on systems where a <xref:System.IntPtr?displayProperty=nameWithType> is 64 bits long.</span></span> <span data-ttu-id="7552e-327">Em outros sistemas, esses métodos são atômicos com respeito ao outro, mas não em relação a outros meios de acesso a dados.</span><span class="sxs-lookup"><span data-stu-id="7552e-327">On other systems, these methods are atomic with respect to each other, but not with respect to other means of accessing the data.</span></span> <span data-ttu-id="7552e-328">Portanto, para ser thread-safe em sistemas de 32 bits, qualquer acesso a um valor de 64 bits deve ser feito através dos membros do <xref:System.Threading.Interlocked> classe.</span><span class="sxs-lookup"><span data-stu-id="7552e-328">Thus, to be thread safe on 32-bit systems, any access to a 64-bit value must be made through the members of the <xref:System.Threading.Interlocked> class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="7552e-329">O endereço de <paramref name="location" /> é um ponteiro nulo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-329">The address of <paramref name="location" /> is a null pointer.</span>
          </span>
        </exception>
        <altmember cref="Overload:System.Threading.Interlocked.Decrement" />
        <altmember cref="Overload:System.Threading.Interlocked.Add" />
        <altmember cref="M:System.Threading.Interlocked.Read(System.Int64@)" />
      </Docs>
    </Member>
    <Member MemberName="MemoryBarrier">
      <MemberSignature Language="C#" Value="public static void MemoryBarrier ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MemoryBarrier() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.MemoryBarrier" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub MemoryBarrier ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MemoryBarrier();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7552e-330">Sincroniza o acesso à memória da seguinte maneira: o processador que executa o thread atual não pode reorganizar as instruções de forma que os acessos à memória anteriores à chamada para <see cref="M:System.Threading.Interlocked.MemoryBarrier" /> sejam executados depois dos acessos à memória posteriores à chamada para <see cref="M:System.Threading.Interlocked.MemoryBarrier" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-330">Synchronizes memory access as follows: The processor that executes the current thread cannot reorder instructions in such a way that memory accesses before the call to <see cref="M:System.Threading.Interlocked.MemoryBarrier" /> execute after memory accesses that follow the call to <see cref="M:System.Threading.Interlocked.MemoryBarrier" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7552e-331">Esse método foi adicionado para o <xref:System.Threading.Interlocked> classe no [!INCLUDE[net_v45](~/includes/net-v45-md.md)] como uma conveniência; é um wrapper para o <xref:System.Threading.Thread.MemoryBarrier%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="7552e-331">This method was added to the <xref:System.Threading.Interlocked> class in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] as a convenience; it's a wrapper for the <xref:System.Threading.Thread.MemoryBarrier%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="7552e-332"><xref:System.Threading.Interlocked.MemoryBarrier%2A> é necessária somente em sistemas de multiprocessador que têm memória fraca ordenação (por exemplo, um sistema que utiliza vários processadores Intel Itanium).</span><span class="sxs-lookup"><span data-stu-id="7552e-332"><xref:System.Threading.Interlocked.MemoryBarrier%2A> is required only on multiprocessor systems that have weak memory ordering (for example, a system that employs multiple Intel Itanium processors).</span></span>  
  
 <span data-ttu-id="7552e-333">Para a maioria das finalidades, c# `lock` instrução, o Visual Basic `SyncLock` instrução, ou o <xref:System.Threading.Monitor> classe fornecem maneiras mais fáceis para sincronizar os dados.</span><span class="sxs-lookup"><span data-stu-id="7552e-333">For most purposes, the C# `lock` statement, the Visual Basic `SyncLock` statement, or the <xref:System.Threading.Monitor> class provide easier ways to synchronize data.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MemoryBarrierProcessWide">
      <MemberSignature Language="C#" Value="public static void MemoryBarrierProcessWide ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MemoryBarrierProcessWide() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.MemoryBarrierProcessWide" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub MemoryBarrierProcessWide ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MemoryBarrierProcessWide();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static long Read (ref long location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Read(int64&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.Read(System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read (ByRef location As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Read(long % location);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Int64&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="7552e-334">O valor de 64 bits a ser carregado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-334">The 64-bit value to be loaded.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7552e-335">Retorna um valor de 64 bits, carregado como uma operação atômica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-335">Returns a 64-bit value, loaded as an atomic operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7552e-336">O valor carregado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7552e-336">The loaded value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7552e-337">O <xref:System.Threading.Interlocked.Read%2A> método é desnecessário em sistemas de 64 bits, pois as operações de leitura de 64 bits já são atômicas.</span><span class="sxs-lookup"><span data-stu-id="7552e-337">The <xref:System.Threading.Interlocked.Read%2A> method is unnecessary on 64-bit systems, because 64-bit read operations are already atomic.</span></span> <span data-ttu-id="7552e-338">Operações de leitura de 64 bits em sistemas de 32 bits, não são atômicas, a menos que executada usando <xref:System.Threading.Interlocked.Read%2A>.</span><span class="sxs-lookup"><span data-stu-id="7552e-338">On 32-bit systems, 64-bit read operations are not atomic unless performed using <xref:System.Threading.Interlocked.Read%2A>.</span></span>  
  
 <span data-ttu-id="7552e-339">O <xref:System.Threading.Interlocked.Read%2A> método e as sobrecargas de 64 bits do <xref:System.Threading.Interlocked.Increment%2A>, <xref:System.Threading.Interlocked.Decrement%2A>, e <xref:System.Threading.Interlocked.Add%2A> métodos são realmente atômicos apenas em sistemas em que um <xref:System.IntPtr?displayProperty=nameWithType> tem 64 bits.</span><span class="sxs-lookup"><span data-stu-id="7552e-339">The <xref:System.Threading.Interlocked.Read%2A> method and the 64-bit overloads of the <xref:System.Threading.Interlocked.Increment%2A>, <xref:System.Threading.Interlocked.Decrement%2A>, and <xref:System.Threading.Interlocked.Add%2A> methods are truly atomic only on systems where a <xref:System.IntPtr?displayProperty=nameWithType> is 64 bits long.</span></span> <span data-ttu-id="7552e-340">Em outros sistemas, esses métodos são atômicos com respeito ao outro, mas não em relação a outros meios de acesso a dados.</span><span class="sxs-lookup"><span data-stu-id="7552e-340">On other systems, these methods are atomic with respect to each other, but not with respect to other means of accessing the data.</span></span> <span data-ttu-id="7552e-341">Portanto, para ser thread-safe em sistemas de 32 bits, qualquer acesso a um valor de 64 bits deve ser feito através dos membros do <xref:System.Threading.Interlocked> classe.</span><span class="sxs-lookup"><span data-stu-id="7552e-341">Thus, to be thread safe on 32-bit systems, any access to a 64-bit value must be made through the members of the <xref:System.Threading.Interlocked> class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7552e-342"><xref:System.IntPtr> é um tipo específico de plataforma.</span><span class="sxs-lookup"><span data-stu-id="7552e-342"><xref:System.IntPtr> is a platform-specific type.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Threading.Interlocked.Increment" />
        <altmember cref="Overload:System.Threading.Interlocked.Decrement" />
        <altmember cref="Overload:System.Threading.Interlocked.Add" />
      </Docs>
    </Member>
  </Members>
</Type>