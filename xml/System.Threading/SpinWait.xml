<Type Name="SpinWait" FullName="System.Threading.SpinWait">
  <Metadata><Meta Name="ms.openlocfilehash" Value="baa8e7275af23a7e4c91a819530b414b19386b75" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51866147" /></Metadata><TypeSignature Language="C#" Value="public struct SpinWait" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit SpinWait extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Threading.SpinWait" />
  <TypeSignature Language="VB.NET" Value="Public Structure SpinWait" />
  <TypeSignature Language="C++ CLI" Value="public value class SpinWait" />
  <TypeSignature Language="F#" Value="type SpinWait = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornece suporte à espera baseada em rotação.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.SpinWait> encapsula a lógica de rotação comum. Em máquinas de processador único, produz sempre é usados em vez de esperas de ocupado e, em computadores com processadores Intel empregando a tecnologia Hyper-Threading, ele ajuda a evitar a privação de thread de hardware. SpinWait encapsula uma mistura de BOM de rotação e produzindo true.  
  
 <xref:System.Threading.SpinWait> é um tipo de valor, o que significa que o código de nível baixo pode utilizar SpinWait sem medo de sobrecargas de alocação desnecessária. SpinWait não geralmente é útil para aplicativos comuns. Na maioria dos casos, você deve usar as classes de sincronização fornecidas pelo .NET Framework, tal como <xref:System.Threading.Monitor>. Para a maioria das finalidades, onde espera de rotação é necessária, no entanto, o <xref:System.Threading.SpinWait> o tipo deve ser preferível a <xref:System.Threading.Thread.SpinWait%2A?displayProperty=nameWithType> método.  
  
   
  
## Examples  
 O exemplo a seguir mostra como usar um <xref:System.Threading.SpinWait>:  
  
 [!code-csharp[System.Threading.SpinWait#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.spinwait/cs/spinwait.cs#01)]
 [!code-vb[System.Threading.SpinWait#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.spinwait/vb/spinwait.vb#01)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Enquanto <see cref="T:System.Threading.SpinWait" /> é projetado para ser usado em aplicativos simultâneos, ele não é projetado para ser usados simultaneamente de vários threads. <see cref="T:System.Threading.SpinWait" /> os membros não são thread-safe. Se vários threads devem girar, cada um deverá usar sua própria instância do <see cref="T:System.Threading.SpinWait" />.</threadsafe>
    <related type="Article" href="~/docs/standard/threading/spinwait.md">SpinWait</related>
    <related type="Article" href="~/docs/standard/threading/how-to-use-spinwait-to-implement-a-two-phase-wait-operation.md">Como usar SpinWait para implementar uma operação bifásica de espera</related>
  </Docs>
  <Members>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SpinWait.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Threading.SpinWait.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o número de vezes que <see cref="M:System.Threading.SpinWait.SpinOnce" /> foi chamado nessa instância.</summary>
        <value>Retorna um inteiro que representa o número de vezes que <see cref="M:System.Threading.SpinWait.SpinOnce" /> foi chamado nessa instância.</value>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/36012f42-34e5-4f86-adf4-973f433ed6c6">SpinWait</related>
        <related type="Article" href="https://msdn.microsoft.com/library/b2ac4e4a-051a-4f65-b4b9-f8e103aff195">Como usar SpinWait para implementar uma operação bifásica de espera</related>
      </Docs>
    </Member>
    <Member MemberName="NextSpinWillYield">
      <MemberSignature Language="C#" Value="public bool NextSpinWillYield { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NextSpinWillYield" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SpinWait.NextSpinWillYield" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NextSpinWillYield As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NextSpinWillYield { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.NextSpinWillYield : bool" Usage="System.Threading.SpinWait.NextSpinWillYield" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Especifica se a próxima chamada para <see cref="M:System.Threading.SpinWait.SpinOnce" /> produzirá o processador, disparando uma alternância de contexto forçado.</summary>
        <value>Se a próxima chamada para <see cref="M:System.Threading.SpinWait.SpinOnce" /> produzirá o processador, disparando uma alternância de contexto forçado.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Em um computador único CPU, <xref:System.Threading.SpinWait.SpinOnce%2A> sempre produzirá o processador. Em computadores com várias CPUs, <xref:System.Threading.SpinWait.SpinOnce%2A> pode produzir após um número especificado de chamadas.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/36012f42-34e5-4f86-adf4-973f433ed6c6">SpinWait</related>
        <related type="Article" href="https://msdn.microsoft.com/library/b2ac4e4a-051a-4f65-b4b9-f8e103aff195">Como usar SpinWait para implementar uma operação bifásica de espera</related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinWait.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="spinWait.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Redefine o contador de rotação.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Isso torna <xref:System.Threading.SpinWait.SpinOnce%2A> e <xref:System.Threading.SpinWait.NextSpinWillYield%2A> se comportam como se nenhuma chamada para <xref:System.Threading.SpinWait.SpinOnce%2A> tinha sido emitido nessa instância. Se um <xref:System.Threading.SpinWait> instância é reutilizada muitas vezes, pode ser útil para redefini-la para evitar produzindo muito em breve.  
  
   
  
## Examples  
 O exemplo a seguir é um exemplo de como usar SpinWait em uma implementação simples de pilha sem bloqueio. (Isso é apenas um exemplo. Se for necessária uma pilha de thread-safe eficiente, considere o uso ConcurrentStack.)  
  
 `// C#`  
  
 `public class LockFreeStack<T>`  
  
 `{`  
  
 `private volatile Node m_head;`  
  
 `private class Node { public Node Next; public T Value; }`  
  
 `public void Push(T item)`  
  
 `{`  
  
 `var spin = new SpinWait();`  
  
 `Node node = new Node { Value = item }, head;`  
  
 `while (true)`  
  
 `{`  
  
 `head = m_head;`  
  
 `node.Next = head;`  
  
 `if (Interlocked.CompareExchange(ref m_head, node, head) == head) break;`  
  
 `spin.SpinOnce();`  
  
 `}`  
  
 `}`  
  
 `public bool TryPop(out T result)`  
  
 `{`  
  
 `result = default(T);`  
  
 `var spin = new SpinWait();`  
  
 `Node head;`  
  
 `while (true)`  
  
 `{`  
  
 `head = m_head;`  
  
 `if (head == null) return false;`  
  
 `if (Interlocked.CompareExchange(ref m_head, head.Next, head) == head)`  
  
 `{`  
  
 `result = head.Value;`  
  
 `return true;`  
  
 `}`  
  
 `spin.SpinOnce();`  
  
 `}`  
  
 `}`  
  
 `}`  
  
 `' Visual Basic`  
  
 `Public Class LockFreeStack(Of T)`  
  
 `Private m_head As Node`  
  
 `Private Class Node`  
  
 `Public [Next] As Node`  
  
 `Public Value As T`  
  
 `End Class`  
  
 `Public Sub Push(ByVal item As T)`  
  
 `Dim spin As New SpinWait()`  
  
 `Dim head As Node, node As New Node With {.Value = item}`  
  
 `While True`  
  
 `Thread.MemoryBarrier()`  
  
 `head = m_head`  
  
 `node.Next = head`  
  
 `If Interlocked.CompareExchange(m_head, node, head) Is head Then Exit While`  
  
 `spin.SpinOnce()`  
  
 `End While`  
  
 `End Sub`  
  
 `Public Function TryPop(ByRef result As T) As Boolean`  
  
 `result = CType(Nothing, T)`  
  
 `Dim spin As New SpinWait()`  
  
 `Dim head As Node`  
  
 `While True`  
  
 `Thread.MemoryBarrier()`  
  
 `head = m_head`  
  
 `If head Is Nothing Then Return False`  
  
 `If Interlocked.CompareExchange(m_head, head.Next, head) Is head Then`  
  
 `result = head.Value`  
  
 `Return True`  
  
 `End If`  
  
 `spin.SpinOnce()`  
  
 `End While`  
  
 `End Function`  
  
 `End Class`  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/36012f42-34e5-4f86-adf4-973f433ed6c6">SpinWait</related>
        <related type="Article" href="https://msdn.microsoft.com/library/b2ac4e4a-051a-4f65-b4b9-f8e103aff195">Como usar SpinWait para implementar uma operação bifásica de espera</related>
      </Docs>
    </Member>
    <Member MemberName="SpinOnce">
      <MemberSignature Language="C#" Value="public void SpinOnce ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SpinOnce() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinWait.SpinOnce" />
      <MemberSignature Language="VB.NET" Value="Public Sub SpinOnce ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SpinOnce();" />
      <MemberSignature Language="F#" Value="member this.SpinOnce : unit -&gt; unit" Usage="spinWait.SpinOnce " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Executa uma única rotação.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Isso normalmente é chamado em um loop e poderá ser alterado em comportamento com base no número de vezes que um <xref:System.Threading.SpinWait.SpinOnce%2A> chamada até o momento na instância. Cada rotação resulta no <xref:System.Threading.Thread.SpinWait%2A> método sendo chamado. Uma contagem é mantida do número de vezes <xref:System.Threading.SpinWait.SpinOnce%2A> é chamado, e depois que uma contagem de limite for atingida, o <xref:System.Threading.Thread.Yield%2A> método é chamado.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/36012f42-34e5-4f86-adf4-973f433ed6c6">SpinWait</related>
        <related type="Article" href="https://msdn.microsoft.com/library/b2ac4e4a-051a-4f65-b4b9-f8e103aff195">Como usar SpinWait para implementar uma operação bifásica de espera</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="SpinUntil">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gira até que a condição especificada seja atendida.</summary>
        <related type="Article" href="https://msdn.microsoft.com/library/36012f42-34e5-4f86-adf4-973f433ed6c6">SpinWait</related>
        <related type="Article" href="https://msdn.microsoft.com/library/b2ac4e4a-051a-4f65-b4b9-f8e103aff195">Como usar SpinWait para implementar uma operação bifásica de espera</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="SpinUntil">
      <MemberSignature Language="C#" Value="public static void SpinUntil (Func&lt;bool&gt; condition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SpinUntil(class System.Func`1&lt;bool&gt; condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SpinUntil (condition As Func(Of Boolean))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SpinUntil(Func&lt;bool&gt; ^ condition);" />
      <MemberSignature Language="F#" Value="static member SpinUntil : Func&lt;bool&gt; -&gt; unit" Usage="System.Threading.SpinWait.SpinUntil condition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Func&lt;System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="condition">Um delegado a ser executado repetidamente até retornar true.</param>
        <summary>Gira até que a condição especificada seja atendida.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">O argumento <paramref name="condition" /> é nulo.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/36012f42-34e5-4f86-adf4-973f433ed6c6">SpinWait</related>
        <related type="Article" href="https://msdn.microsoft.com/library/b2ac4e4a-051a-4f65-b4b9-f8e103aff195">Como usar SpinWait para implementar uma operação bifásica de espera</related>
      </Docs>
    </Member>
    <Member MemberName="SpinUntil">
      <MemberSignature Language="C#" Value="public static bool SpinUntil (Func&lt;bool&gt; condition, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SpinUntil(class System.Func`1&lt;bool&gt; condition, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SpinUntil (condition As Func(Of Boolean), millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SpinUntil(Func&lt;bool&gt; ^ condition, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member SpinUntil : Func&lt;bool&gt; * int -&gt; bool" Usage="System.Threading.SpinWait.SpinUntil (condition, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Func&lt;System.Boolean&gt;" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="condition">Um delegado a ser executado repetidamente até retornar true.</param>
        <param name="millisecondsTimeout">O número de milissegundos para aguardar ou <see cref="F:System.Threading.Timeout.Infinite" /> (- 1) para aguardar indefinidamente.</param>
        <summary>Gira até que a condição especificada seja atendida ou até que o tempo limite especificado expire.</summary>
        <returns>True se a condição for atendida dentro do tempo limite; caso contrário, false</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">O argumento <paramref name="condition" /> é nulo.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout" /> é um número negativo diferente de -1, que representa um tempo limite infinito.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/36012f42-34e5-4f86-adf4-973f433ed6c6">SpinWait</related>
        <related type="Article" href="https://msdn.microsoft.com/library/b2ac4e4a-051a-4f65-b4b9-f8e103aff195">Como usar SpinWait para implementar uma operação bifásica de espera</related>
      </Docs>
    </Member>
    <Member MemberName="SpinUntil">
      <MemberSignature Language="C#" Value="public static bool SpinUntil (Func&lt;bool&gt; condition, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SpinUntil(class System.Func`1&lt;bool&gt; condition, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SpinUntil (condition As Func(Of Boolean), timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SpinUntil(Func&lt;bool&gt; ^ condition, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member SpinUntil : Func&lt;bool&gt; * TimeSpan -&gt; bool" Usage="System.Threading.SpinWait.SpinUntil (condition, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Func&lt;System.Boolean&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="condition">Um delegado a ser executado repetidamente até retornar true.</param>
        <param name="timeout">Um <see cref="T:System.TimeSpan" /> que representa o número de milissegundos de espera ou um TimeSpan que representa -1 milissegundo de espera indefinidamente.</param>
        <summary>Gira até que a condição especificada seja atendida ou até que o tempo limite especificado expire.</summary>
        <returns>True se a condição for atendida dentro do tempo limite; caso contrário, false</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">O argumento <paramref name="condition" /> é nulo.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> é um número negativo diferente de -1 milissegundos, que representa um tempo limite infinito ou o tempo limite é maior que <see cref="F:System.Int32.MaxValue" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/36012f42-34e5-4f86-adf4-973f433ed6c6">SpinWait</related>
        <related type="Article" href="https://msdn.microsoft.com/library/b2ac4e4a-051a-4f65-b4b9-f8e103aff195">Como usar SpinWait para implementar uma operação bifásica de espera</related>
      </Docs>
    </Member>
  </Members>
</Type>