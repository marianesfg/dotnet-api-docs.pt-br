<Type Name="Monitor" FullName="System.Threading.Monitor">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="954622f2462225c1791594afeb678ab93b5bb509" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39989882" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Monitor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Monitor extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Monitor" />
  <TypeSignature Language="VB.NET" Value="Public Class Monitor" />
  <TypeSignature Language="C++ CLI" Value="public ref class Monitor abstract sealed" />
  <TypeSignature Language="F#" Value="type Monitor = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="8be66-101">Fornece um mecanismo que sincroniza o acesso a objetos.</span>
      <span class="sxs-lookup">
        <span data-stu-id="8be66-101">Provides a mechanism that synchronizes access to objects.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8be66-102">O <xref:System.Threading.Monitor> classe permite que você sincronizar o acesso a uma região de código utilizando e liberar um bloqueio em um determinado objeto chamando o <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType>, <xref:System.Threading.Monitor.TryEnter%2A?displayProperty=nameWithType>, e <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> métodos.</span><span class="sxs-lookup"><span data-stu-id="8be66-102">The <xref:System.Threading.Monitor> class allows you to synchronize access to a region of code by taking and releasing a lock on a particular object by calling the <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType>, <xref:System.Threading.Monitor.TryEnter%2A?displayProperty=nameWithType>, and <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> methods.</span></span> <span data-ttu-id="8be66-103">Bloqueios de objeto fornecem a capacidade de restringir o acesso a um bloco de código, normalmente chamado de uma seção crítica.</span><span class="sxs-lookup"><span data-stu-id="8be66-103">Object locks provide the ability to restrict access to a block of code, commonly called a critical section.</span></span> <span data-ttu-id="8be66-104">Enquanto um thread possui o bloqueio de um objeto, nenhum outro thread pode adquirir o bloqueio.</span><span class="sxs-lookup"><span data-stu-id="8be66-104">While a thread owns the lock for an object, no other thread can acquire that lock.</span></span> <span data-ttu-id="8be66-105">Você também pode usar o <xref:System.Threading.Monitor> classe para garantir que nenhum outro segmento tem permissão para acessar uma seção do aplicativo de código que está sendo executada pelo proprietário do bloqueio, a menos que o outro thread está executando o código usando um objeto bloqueado diferente.</span><span class="sxs-lookup"><span data-stu-id="8be66-105">You can also use the <xref:System.Threading.Monitor> class to ensure that no other thread is allowed to access a section of application code being executed by the lock owner, unless the other thread is executing the code using a different locked object.</span></span>  
  
 <span data-ttu-id="8be66-106">Neste artigo:</span><span class="sxs-lookup"><span data-stu-id="8be66-106">In this article:</span></span>  
  
 <span data-ttu-id="8be66-107">[A classe Monitor: uma visão geral](#Overview) </span><span class="sxs-lookup"><span data-stu-id="8be66-107">[The Monitor class: An overview](#Overview) </span></span>  
 <span data-ttu-id="8be66-108">[O objeto de bloqueio](#Lock) </span><span class="sxs-lookup"><span data-stu-id="8be66-108">[The lock object](#Lock) </span></span>  
 <span data-ttu-id="8be66-109">[A seção crítica](#CriticalSection) </span><span class="sxs-lookup"><span data-stu-id="8be66-109">[The critical section](#CriticalSection) </span></span>  
 <span data-ttu-id="8be66-110">[Pulse e PulseAll espera](#Pulse) </span><span class="sxs-lookup"><span data-stu-id="8be66-110">[Pulse, PulseAll, and Wait](#Pulse) </span></span>  
 [<span data-ttu-id="8be66-111">Monitores e identificadores de espera</span><span class="sxs-lookup"><span data-stu-id="8be66-111">Monitors and wait handles</span></span>](#WaitHandles)  
  
<a name="Overview"></a>   
## <a name="the-monitor-class-an-overview"></a><span data-ttu-id="8be66-112">A classe Monitor: uma visão geral</span><span class="sxs-lookup"><span data-stu-id="8be66-112">The Monitor class: An overview</span></span>  
 <span data-ttu-id="8be66-113"><xref:System.Threading.Monitor> tem os seguintes recursos:</span><span class="sxs-lookup"><span data-stu-id="8be66-113"><xref:System.Threading.Monitor> has the following features:</span></span>  
  
-   <span data-ttu-id="8be66-114">Ele está associado um objeto sob demanda.</span><span class="sxs-lookup"><span data-stu-id="8be66-114">It is associated with an object on demand.</span></span>  
  
-   <span data-ttu-id="8be66-115">Ele é desativado, que significa que ele pode ser chamado diretamente de qualquer contexto.</span><span class="sxs-lookup"><span data-stu-id="8be66-115">It is unbound, which means it can be called directly from any context.</span></span>  
  
-   <span data-ttu-id="8be66-116">Uma instância das <xref:System.Threading.Monitor> classe não pode ser criado; os métodos do <xref:System.Threading.Monitor> classe são todos estáticos.</span><span class="sxs-lookup"><span data-stu-id="8be66-116">An instance of the <xref:System.Threading.Monitor> class cannot be created; the methods of the <xref:System.Threading.Monitor> class are all static.</span></span> <span data-ttu-id="8be66-117">Cada método recebe o objeto sincronizado que controla o acesso à seção crítica.</span><span class="sxs-lookup"><span data-stu-id="8be66-117">Each method is passed the synchronized object that controls access to the critical section.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8be66-118">Use o <xref:System.Threading.Monitor> classe para objetos de bloqueio que não sejam cadeias de caracteres (ou seja, tipos de referência diferente de <xref:System.String>), não os tipos de valor.</span><span class="sxs-lookup"><span data-stu-id="8be66-118">Use the <xref:System.Threading.Monitor> class to lock objects other than strings (that is, reference types other than <xref:System.String>), not value types.</span></span> <span data-ttu-id="8be66-119">Para obter detalhes, consulte as sobrecargas do <xref:System.Threading.Monitor.Enter%2A> método e [o objeto de bloqueio](#Lock) seção mais adiante neste artigo.</span><span class="sxs-lookup"><span data-stu-id="8be66-119">For details, see the overloads of the <xref:System.Threading.Monitor.Enter%2A> method and [The lock object](#Lock) section later in this article.</span></span>  
  
 <span data-ttu-id="8be66-120">A tabela a seguir descreve as ações que podem ser executadas por threads que acessam objetos sincronizados:</span><span class="sxs-lookup"><span data-stu-id="8be66-120">The following table describes the actions that can be taken by threads that access synchronized objects:</span></span>  
  
|<span data-ttu-id="8be66-121">Ação</span><span class="sxs-lookup"><span data-stu-id="8be66-121">Action</span></span>|<span data-ttu-id="8be66-122">Descrição</span><span class="sxs-lookup"><span data-stu-id="8be66-122">Description</span></span>|  
|------------|-----------------|  
|<span data-ttu-id="8be66-123"><xref:System.Threading.Monitor.Enter%2A>, <xref:System.Threading.Monitor.TryEnter%2A></span><span class="sxs-lookup"><span data-stu-id="8be66-123"><xref:System.Threading.Monitor.Enter%2A>, <xref:System.Threading.Monitor.TryEnter%2A></span></span>|<span data-ttu-id="8be66-124">Adquire um bloqueio para um objeto.</span><span class="sxs-lookup"><span data-stu-id="8be66-124">Acquires a lock for an object.</span></span> <span data-ttu-id="8be66-125">Essa ação também marca o início de uma seção crítica.</span><span class="sxs-lookup"><span data-stu-id="8be66-125">This action also marks the beginning of a critical section.</span></span> <span data-ttu-id="8be66-126">Nenhum outro thread pode inserir a seção crítica, a menos que ele está executando as instruções na seção crítica usando um objeto bloqueado diferente.</span><span class="sxs-lookup"><span data-stu-id="8be66-126">No other thread can enter the critical section unless it is executing the instructions in the critical section using a different locked object.</span></span>|  
|<xref:System.Threading.Monitor.Wait%2A>|<span data-ttu-id="8be66-127">Libera o bloqueio em um objeto para permitir que outros threads para bloquear e acessar o objeto.</span><span class="sxs-lookup"><span data-stu-id="8be66-127">Releases the lock on an object in order to permit other threads to lock and access the object.</span></span> <span data-ttu-id="8be66-128">O thread de chamada aguarda enquanto outro thread acessa o objeto.</span><span class="sxs-lookup"><span data-stu-id="8be66-128">The calling thread waits while another thread accesses the object.</span></span> <span data-ttu-id="8be66-129">Sinais de pulso são usados para notificar os threads em espera sobre alterações no estado de um objeto.</span><span class="sxs-lookup"><span data-stu-id="8be66-129">Pulse signals are used to notify waiting threads about changes to an object's state.</span></span>|  
|<span data-ttu-id="8be66-130"><xref:System.Threading.Monitor.Pulse%2A> (sinal) <xref:System.Threading.Monitor.PulseAll%2A></span><span class="sxs-lookup"><span data-stu-id="8be66-130"><xref:System.Threading.Monitor.Pulse%2A> (signal), <xref:System.Threading.Monitor.PulseAll%2A></span></span>|<span data-ttu-id="8be66-131">Envia um sinal para um ou mais threads em espera.</span><span class="sxs-lookup"><span data-stu-id="8be66-131">Sends a signal to one or more waiting threads.</span></span> <span data-ttu-id="8be66-132">O sinal notifica um thread em espera que o estado do objeto bloqueado foi alterado e o proprietário do bloqueio está pronto para liberar o bloqueio.</span><span class="sxs-lookup"><span data-stu-id="8be66-132">The signal notifies a waiting thread that the state of the locked object has changed, and the owner of the lock is ready to release the lock.</span></span> <span data-ttu-id="8be66-133">O thread em espera é colocado na fila de pronto do objeto para que, eventualmente, ele poderá receber o bloqueio do objeto.</span><span class="sxs-lookup"><span data-stu-id="8be66-133">The waiting thread is placed in the object's ready queue so that it might eventually receive the lock for the object.</span></span> <span data-ttu-id="8be66-134">Depois que o thread tiver o bloqueio, ele pode verificar o novo estado do objeto para ver se o estado necessário foi atingido.</span><span class="sxs-lookup"><span data-stu-id="8be66-134">Once the thread has the lock, it can check the new state of the object to see if the required state has been reached.</span></span>|  
|<xref:System.Threading.Monitor.Exit%2A>|<span data-ttu-id="8be66-135">Libera o bloqueio em um objeto.</span><span class="sxs-lookup"><span data-stu-id="8be66-135">Releases the lock on an object.</span></span> <span data-ttu-id="8be66-136">Essa ação também marca o final de uma seção crítica protegido pelo objeto bloqueado.</span><span class="sxs-lookup"><span data-stu-id="8be66-136">This action also marks the end of a critical section protected by the locked object.</span></span>|  
  
 <span data-ttu-id="8be66-137">Começando com o [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], há dois conjuntos de sobrecargas para os <xref:System.Threading.Monitor.Enter%2A> e <xref:System.Threading.Monitor.TryEnter%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="8be66-137">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], there are two sets of overloads for the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.TryEnter%2A> methods.</span></span> <span data-ttu-id="8be66-138">Um conjunto de sobrecargas tem um `ref` (em c#) ou `ByRef` (no Visual Basic) <xref:System.Boolean> parâmetro atomicamente é definido como `true` se o bloqueio é adquirido, mesmo se uma exceção for gerada ao adquirir o bloqueio.</span><span class="sxs-lookup"><span data-stu-id="8be66-138">One set of overloads has a `ref` (in C#) or `ByRef` (in Visual Basic) <xref:System.Boolean> parameter that is atomically set to `true` if the lock is acquired, even if an exception is thrown when acquiring the lock.</span></span> <span data-ttu-id="8be66-139">Use essas sobrecargas se ele for essencial para liberar o bloqueio em todos os casos, mesmo quando os recursos que o bloqueio está protegendo podem não estar em um estado consistente.</span><span class="sxs-lookup"><span data-stu-id="8be66-139">Use these overloads if it is critical to release the lock in all cases, even when the resources the lock is protecting might not be in a consistent state.</span></span>  
  
<a name="Lock"></a>   
## <a name="the-lock-object"></a><span data-ttu-id="8be66-140">O objeto de bloqueio</span><span class="sxs-lookup"><span data-stu-id="8be66-140">The lock object</span></span>  
 <span data-ttu-id="8be66-141">A classe Monitor consiste `static` (em c#) ou `Shared` (no Visual Basic) métodos que operam em um objeto que controla o acesso à seção crítica.</span><span class="sxs-lookup"><span data-stu-id="8be66-141">The Monitor class consists of `static` (in C#) or  `Shared` (in Visual Basic) methods that operate on an object that controls access to the critical section.</span></span>  <span data-ttu-id="8be66-142">As informações a seguir são mantidas para cada objeto sincronizado:</span><span class="sxs-lookup"><span data-stu-id="8be66-142">The following information is maintained for each synchronized object:</span></span>  
  
-   <span data-ttu-id="8be66-143">Uma referência para o thread que atualmente mantém o bloqueio.</span><span class="sxs-lookup"><span data-stu-id="8be66-143">A reference to the thread that currently holds the lock.</span></span>  
  
-   <span data-ttu-id="8be66-144">Uma referência a uma fila de pronta, que contém os threads que estão prontos para obter o bloqueio.</span><span class="sxs-lookup"><span data-stu-id="8be66-144">A reference to a ready queue, which contains the threads that are ready to obtain the lock.</span></span>  
  
-   <span data-ttu-id="8be66-145">Uma referência a uma fila de espera, que contém os threads que estão aguardando a notificação de alteração no estado do objeto bloqueado.</span><span class="sxs-lookup"><span data-stu-id="8be66-145">A reference to a waiting queue, which contains the threads that are waiting for notification of a change in the state of the locked object.</span></span>  
  
 <span data-ttu-id="8be66-146"><xref:System.Threading.Monitor> bloqueios de objetos (ou seja, tipos de referência), não os tipos de valor.</span><span class="sxs-lookup"><span data-stu-id="8be66-146"><xref:System.Threading.Monitor> locks objects (that is, reference types), not value types.</span></span> <span data-ttu-id="8be66-147">Enquanto você pode passar um tipo de valor para <xref:System.Threading.Monitor.Enter%2A> e <xref:System.Threading.Monitor.Exit%2A>, ele é convertido separadamente para cada chamada.</span><span class="sxs-lookup"><span data-stu-id="8be66-147">While you can pass a value type to <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A>, it is boxed separately for each call.</span></span> <span data-ttu-id="8be66-148">Uma vez que cada chamada cria um objeto separado, <xref:System.Threading.Monitor.Enter%2A> nunca blocos e o código que ele está protegendo supostamente não está realmente sincronizado.</span><span class="sxs-lookup"><span data-stu-id="8be66-148">Since each call creates a separate object, <xref:System.Threading.Monitor.Enter%2A> never blocks, and the code it is supposedly protecting is not really synchronized.</span></span> <span data-ttu-id="8be66-149">Além disso, o objeto passado para <xref:System.Threading.Monitor.Exit%2A> é diferente do objeto passado para <xref:System.Threading.Monitor.Enter%2A>, então <xref:System.Threading.Monitor> lança <xref:System.Threading.SynchronizationLockException> exceção com a mensagem "método de sincronização do objeto foi chamado de um bloco não sincronizado de código."</span><span class="sxs-lookup"><span data-stu-id="8be66-149">In addition, the object passed to <xref:System.Threading.Monitor.Exit%2A> is different from the object passed to <xref:System.Threading.Monitor.Enter%2A>, so <xref:System.Threading.Monitor> throws <xref:System.Threading.SynchronizationLockException> exception with the message "Object synchronization method was called from an unsynchronized block of code."</span></span>  
  
 <span data-ttu-id="8be66-150">O exemplo a seguir ilustra esse problema.</span><span class="sxs-lookup"><span data-stu-id="8be66-150">The following example illustrates this problem.</span></span> <span data-ttu-id="8be66-151">Ele iniciará dez tarefas, cada um dos quais apenas ficará suspenso por 250 milissegundos.</span><span class="sxs-lookup"><span data-stu-id="8be66-151">It launches ten tasks, each of which just sleeps for 250 milliseconds.</span></span> <span data-ttu-id="8be66-152">Cada tarefa, em seguida, atualiza uma variável de contador, `nTasks`, que destina-se para contar o número de tarefas que realmente iniciado e executado.</span><span class="sxs-lookup"><span data-stu-id="8be66-152">Each task then updates a counter variable, `nTasks`, which is intended to count the number of tasks that actually launched and executed.</span></span> <span data-ttu-id="8be66-153">Porque `nTasks` é uma variável global que pode ser atualizada por várias tarefas simultaneamente, um monitor é usado para protegê-lo contra modificações simultâneas por várias tarefas.</span><span class="sxs-lookup"><span data-stu-id="8be66-153">Because `nTasks` is a global variable that can be updated by multiple tasks simultaneously, a monitor is used to protect it from simultaneous modification by multiple tasks.</span></span> <span data-ttu-id="8be66-154">No entanto, como a saída do exemplo mostra, cada uma das tarefas lança um <xref:System.Threading.SynchronizationLockException> exceção.</span><span class="sxs-lookup"><span data-stu-id="8be66-154">However, as the output from the example shows, each of the tasks throws a <xref:System.Threading.SynchronizationLockException> exception.</span></span>  
  
 [!code-csharp[Conceptual.Monitors#2](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.monitors/cs/badlock1.cs#2)]
 [!code-vb[Conceptual.Monitors#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.monitors/vb/badlock1.vb#2)]  
  
 <span data-ttu-id="8be66-155">Cada tarefa gera uma <xref:System.Threading.SynchronizationLockException> exceção porque o `nTasks` variável é convertido antes de chamar o <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> método em cada tarefa.</span><span class="sxs-lookup"><span data-stu-id="8be66-155">Each task throws a <xref:System.Threading.SynchronizationLockException> exception because the `nTasks` variable is boxed before the call to the <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> method in each task.</span></span> <span data-ttu-id="8be66-156">Em outras palavras, cada chamada de método é passada a uma variável separada que é independente dos outros.</span><span class="sxs-lookup"><span data-stu-id="8be66-156">In other words, each method call is passed a separate variable that is independent of the others.</span></span> <span data-ttu-id="8be66-157">`nTasks` é convertido novamente na chamada para o <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="8be66-157">`nTasks` is boxed again in the call to the <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="8be66-158">Mais uma vez, isso cria dez novas demarcadas variáveis, que são independentes umas das outras, `nTasks`, e os dez boxed variáveis criadas na chamada para o <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="8be66-158">Once again, this creates ten new boxed variables, which are independent of each other, `nTasks`, and the ten boxed variables created in the call to the <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="8be66-159">A exceção é gerada, em seguida, porque o nosso código está tentando liberar um bloqueio em uma variável recém-criada que não foi bloqueado anteriormente.</span><span class="sxs-lookup"><span data-stu-id="8be66-159">The exception is thrown, then, because our code is attempting to release a lock on a newly created variable that was not previously locked.</span></span>  
  
 <span data-ttu-id="8be66-160">Embora a caixa de uma variável de tipo de valor antes de chamar <xref:System.Threading.Monitor.Enter%2A> e <xref:System.Threading.Monitor.Exit%2A>, conforme mostrado no exemplo a seguir e passam o mesmo objeto demarcado para ambos os métodos, não há nenhuma vantagem em fazer isso.</span><span class="sxs-lookup"><span data-stu-id="8be66-160">Although you can box a value type variable before calling <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A>, as shown in the following example, and pass the same boxed object to both methods, there is no advantage to doing this.</span></span> <span data-ttu-id="8be66-161">As alterações para a variável não demarcada não são refletidas na cópia demarcada e não é possível alterar o valor da cópia do box.</span><span class="sxs-lookup"><span data-stu-id="8be66-161">Changes to the unboxed variable are not reflected in the boxed copy, and there is no way to change the value of the boxed copy.</span></span>  
  
 [!code-csharp[Conceptual.Monitors#3](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.monitors/cs/badbox1.cs#3)]
 [!code-vb[Conceptual.Monitors#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.monitors/vb/badbox1.vb#3)]  
  
 <span data-ttu-id="8be66-162">Ao selecionar um objeto no qual a sincronização, você deve bloquear apenas em objetos privados ou internos.</span><span class="sxs-lookup"><span data-stu-id="8be66-162">When selecting an object on which to synchronize, you should lock only on private or internal objects.</span></span> <span data-ttu-id="8be66-163">Bloquear objetos externos pode resultar em deadlocks, porque o código relacionado pode escolher os mesmos objetos bloquear em para finalidades diferentes.</span><span class="sxs-lookup"><span data-stu-id="8be66-163">Locking on external objects might result in deadlocks, because unrelated code could choose the same objects to lock on for different purposes.</span></span>  
  
 <span data-ttu-id="8be66-164">Observe que você pode sincronizar em um objeto em vários domínios de aplicativo se o objeto usado para o bloqueio for derivado de <xref:System.MarshalByRefObject>.</span><span class="sxs-lookup"><span data-stu-id="8be66-164">Note that you can synchronize on an object in multiple application domains if the object used for the lock derives from <xref:System.MarshalByRefObject>.</span></span>  
  
<a name="CriticalSection"></a>   
## <a name="the-critical-section"></a><span data-ttu-id="8be66-165">A seção crítica</span><span class="sxs-lookup"><span data-stu-id="8be66-165">The critical section</span></span>  
 <span data-ttu-id="8be66-166">Use o <xref:System.Threading.Monitor.Enter%2A> e <xref:System.Threading.Monitor.Exit%2A> métodos para marcar o início e término de uma seção crítica.</span><span class="sxs-lookup"><span data-stu-id="8be66-166">Use the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> methods to mark the beginning and end of a critical section.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8be66-167">A funcionalidade fornecida pelos <xref:System.Threading.Monitor.Enter%2A> e <xref:System.Threading.Monitor.Exit%2A> métodos é idêntica àquela fornecida pela [bloqueio](~/docs/csharp/language-reference/keywords/lock-statement.md) instrução em c# e o [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) instrução no Visual Basic, exceto que o quebra automática de construções de linguagem a <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29?displayProperty=nameWithType> sobrecarga de método e o <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> método em um `try`...`finally`</span><span class="sxs-lookup"><span data-stu-id="8be66-167">The functionality provided by the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> methods is identical to that provided by the [lock](~/docs/csharp/language-reference/keywords/lock-statement.md) statement in C# and the [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) statement in Visual Basic, except that the language constructs wrap the <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29?displayProperty=nameWithType> method overload and the <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> method in a `try`…`finally`</span></span> <span data-ttu-id="8be66-168">bloco para garantir que o monitor seja liberado.</span><span class="sxs-lookup"><span data-stu-id="8be66-168">block to ensure that the monitor is released.</span></span>  
  
 <span data-ttu-id="8be66-169">Se a seção crítica é um conjunto de instruções contíguas, em seguida, o bloqueio adquirido pelo <xref:System.Threading.Monitor.Enter%2A> método garante que apenas um único thread pode executar o código incluído com o objeto bloqueado.</span><span class="sxs-lookup"><span data-stu-id="8be66-169">If the critical section is a set of contiguous instructions, then the lock acquired by the <xref:System.Threading.Monitor.Enter%2A> method guarantees that only a single thread can execute the enclosed code with the locked object.</span></span> <span data-ttu-id="8be66-170">Nesse caso, é recomendável que você coloque esse código em um `try` bloquear e coloque a chamada para o <xref:System.Threading.Monitor.Exit%2A> método em um `finally` bloco.</span><span class="sxs-lookup"><span data-stu-id="8be66-170">In this case, we recommend that you place that code in a `try` block and place the call to the <xref:System.Threading.Monitor.Exit%2A> method in a `finally` block.</span></span> <span data-ttu-id="8be66-171">Isso garante que o bloqueio seja liberado, mesmo se ocorrer uma exceção.</span><span class="sxs-lookup"><span data-stu-id="8be66-171">This ensures that the lock is released even if an exception occurs.</span></span> <span data-ttu-id="8be66-172">O fragmento de código a seguir ilustra esse padrão.</span><span class="sxs-lookup"><span data-stu-id="8be66-172">The following code fragment illustrates this pattern.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.class/cs/Pattern2.cs#2)]
 [!code-vb[System.Threading.Monitor.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.class/vb/Pattern2.vb#2)]  
  
 <span data-ttu-id="8be66-173">Esse recurso é normalmente usado para sincronizar o acesso a um estático ou o método de instância de uma classe.</span><span class="sxs-lookup"><span data-stu-id="8be66-173">This facility is typically used to synchronize access to a static or instance method of a class.</span></span>  
  
 <span data-ttu-id="8be66-174">Se uma seção crítica se estende por todo um método, o recurso de bloqueio poderá ser feito colocando a <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType> no método e especificando as <xref:System.Runtime.CompilerServices.MethodImplOptions.Synchronized> valor no construtor do <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="8be66-174">If a critical section spans an entire method, the locking facility can be achieved by placing the <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType> on the method, and specifying the <xref:System.Runtime.CompilerServices.MethodImplOptions.Synchronized> value in the constructor of <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType>.</span></span> <span data-ttu-id="8be66-175">Quando você usa esse atributo, o <xref:System.Threading.Monitor.Enter%2A> e <xref:System.Threading.Monitor.Exit%2A> chamadas de método não são necessários.</span><span class="sxs-lookup"><span data-stu-id="8be66-175">When you use this attribute, the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> method calls are not needed.</span></span> <span data-ttu-id="8be66-176">O fragmento de código a seguir ilustra esse padrão:</span><span class="sxs-lookup"><span data-stu-id="8be66-176">The following code fragment illustrates this pattern:</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.class/cs/Pattern2.cs#3)]
 [!code-vb[System.Threading.Monitor.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.class/vb/Pattern2.vb#3)]  
  
 <span data-ttu-id="8be66-177">Observe que o atributo faz com que o thread atual manter o bloqueio até que o método retorne; Se o bloqueio pode ser liberado antes, use o <xref:System.Threading.Monitor> classe, o c# [bloqueio](~/docs/csharp/language-reference/keywords/lock-statement.md) instrução ou o Visual Basic [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) instrução dentro do método em vez do atributo.</span><span class="sxs-lookup"><span data-stu-id="8be66-177">Note that the attribute causes the current thread to hold the lock until the method returns; if the lock can be released sooner, use the <xref:System.Threading.Monitor> class, the C# [lock](~/docs/csharp/language-reference/keywords/lock-statement.md) statement, or the Visual Basic [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) statement inside of the method instead of the attribute.</span></span>  
  
 <span data-ttu-id="8be66-178">Embora seja possível para o <xref:System.Threading.Monitor.Enter%2A> e <xref:System.Threading.Monitor.Exit%2A> instruções que bloquear e liberar um determinado objeto para cruzar o membro ou os limites de classe ou ambos, essa prática não é recomendada.</span><span class="sxs-lookup"><span data-stu-id="8be66-178">While it is possible for the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> statements that lock and release a given object to cross member or class boundaries or both, this practice is not recommended.</span></span>  
  
<a name="Pulse"></a>   
## <a name="pulse-pulseall-and-wait"></a><span data-ttu-id="8be66-179">Pulse e PulseAll espera</span><span class="sxs-lookup"><span data-stu-id="8be66-179">Pulse, PulseAll, and Wait</span></span>  
 <span data-ttu-id="8be66-180">Depois que um thread possui o bloqueio e ele entrou na seção crítica que protege o bloqueio, ele pode chamar o <xref:System.Threading.Monitor.Wait%2A?displayProperty=nameWithType>, <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType>, e <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> métodos.</span><span class="sxs-lookup"><span data-stu-id="8be66-180">Once a thread owns the lock and has entered the critical section that the lock protects, it can call the <xref:System.Threading.Monitor.Wait%2A?displayProperty=nameWithType>, <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType>, and <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> methods.</span></span>  
  
 <span data-ttu-id="8be66-181"><xref:System.Threading.Monitor.Wait%2A> libera o bloqueio se ele é mantido, permite que um thread em espera ou threads para obter o bloqueio e inserir a seção crítica e aguarda para ser notificado por uma chamada para o <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType> ou <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="8be66-181"><xref:System.Threading.Monitor.Wait%2A> releases the lock if it is held, allows a waiting thread or threads to obtain the lock and enter the critical section,   and waits to be notified by a call to the <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType> or <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="8be66-182">Quando <xref:System.Threading.Monitor.Wait%2A> é notificado, ele retorna e obtém o bloqueio novamente.</span><span class="sxs-lookup"><span data-stu-id="8be66-182">When <xref:System.Threading.Monitor.Wait%2A> is notified, it returns and obtains the lock again.</span></span>  
  
 <span data-ttu-id="8be66-183">Ambos <xref:System.Threading.Monitor.Pulse%2A> e <xref:System.Threading.Monitor.PulseAll%2A> sinal para o próximo thread na fila de espera para continuar.</span><span class="sxs-lookup"><span data-stu-id="8be66-183">Both <xref:System.Threading.Monitor.Pulse%2A> and <xref:System.Threading.Monitor.PulseAll%2A> signal for the next thread in the wait queue to proceed.</span></span>  
  
<a name="WaitHandles"></a>   
## <a name="monitors-and-wait-handles"></a><span data-ttu-id="8be66-184">Monitores e identificadores de espera</span><span class="sxs-lookup"><span data-stu-id="8be66-184">Monitors and wait handles</span></span>  
 <span data-ttu-id="8be66-185">É importante observar a diferença entre o uso do <xref:System.Threading.Monitor> classe e <xref:System.Threading.WaitHandle> objetos.</span><span class="sxs-lookup"><span data-stu-id="8be66-185">It is important to note the distinction between the use of the <xref:System.Threading.Monitor> class and <xref:System.Threading.WaitHandle> objects.</span></span>  
  
-   <span data-ttu-id="8be66-186">O <xref:System.Threading.Monitor> classe é totalmente gerenciada, totalmente portáteis e podem ser mais eficiente em termos de requisitos de recursos do sistema operacional.</span><span class="sxs-lookup"><span data-stu-id="8be66-186">The <xref:System.Threading.Monitor> class is purely managed, fully portable, and might be more efficient in terms of operating-system resource requirements.</span></span>  
  
-   <span data-ttu-id="8be66-187"><xref:System.Threading.WaitHandle> objetos representam objetos de espera do sistema operacional, são úteis para a sincronização entre código gerenciado e e expõem alguns recursos avançados do sistema operacional, como a capacidade de aguardar vários objetos ao mesmo tempo.</span><span class="sxs-lookup"><span data-stu-id="8be66-187"><xref:System.Threading.WaitHandle> objects represent operating-system waitable objects, are useful for synchronizing between managed and unmanaged code, and expose some advanced operating-system features like the ability to wait on many objects at once.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8be66-188">O exemplo a seguir usa o <xref:System.Threading.Monitor> classe para sincronizar o acesso a uma única instância de um gerador de número aleatório representado pelo <xref:System.Random> classe.</span><span class="sxs-lookup"><span data-stu-id="8be66-188">The following example uses the <xref:System.Threading.Monitor> class to synchronize access to a single instance of a random number generator represented by the <xref:System.Random> class.</span></span> <span data-ttu-id="8be66-189">O exemplo cria dez tarefas, cada uma delas executa de forma assíncrona em um pool de threads.</span><span class="sxs-lookup"><span data-stu-id="8be66-189">The example creates ten tasks, each of which executes asynchronously on a thread pool thread.</span></span> <span data-ttu-id="8be66-190">Cada tarefa gera números aleatórios 10.000, calcula a média e atualiza as duas variáveis de nível de procedimento que mantêm um total acumulado do número de números aleatórios gerados e sua soma.</span><span class="sxs-lookup"><span data-stu-id="8be66-190">Each task generates 10,000 random numbers, calculates their average, and updates two procedure-level variables that maintain a running total of the number of random numbers generated and their sum.</span></span> <span data-ttu-id="8be66-191">Depois que todas as tarefas tiverem executados, esses dois valores, em seguida, são usados para calcular a média geral.</span><span class="sxs-lookup"><span data-stu-id="8be66-191">After all tasks have executed, these two values are then used to calculate the overall mean.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.class/cs/example1.cs#1)]
 [!code-vb[System.Threading.Monitor.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.class/vb/example1.vb#1)]  
  
 <span data-ttu-id="8be66-192">Porque eles podem ser acessados de qualquer tarefa em execução em um pool de threads, acesso às variáveis `total` e `n` também devem ser sincronizados.</span><span class="sxs-lookup"><span data-stu-id="8be66-192">Because they can be accessed from any task running on a thread pool thread, access to the variables `total` and `n` must also be synchronized.</span></span> <span data-ttu-id="8be66-193">O <xref:System.Threading.Interlocked.Add%2A?displayProperty=nameWithType> método é usado para essa finalidade.</span><span class="sxs-lookup"><span data-stu-id="8be66-193">The <xref:System.Threading.Interlocked.Add%2A?displayProperty=nameWithType> method is used for this purpose.</span></span>  
  
 <span data-ttu-id="8be66-194">O exemplo a seguir demonstra o uso combinado do <xref:System.Threading.Monitor> classe (implementado com o `lock` ou `SyncLock` constructo de linguagem), o <xref:System.Threading.Interlocked> classe e o <xref:System.Threading.AutoResetEvent> classe.</span><span class="sxs-lookup"><span data-stu-id="8be66-194">The following example demonstrates the combined use of the <xref:System.Threading.Monitor> class (implemented with the `lock` or `SyncLock` language construct), the <xref:System.Threading.Interlocked> class, and the <xref:System.Threading.AutoResetEvent> class.</span></span> <span data-ttu-id="8be66-195">Ele define dois `internal` (em c#) ou `Friend` (no Visual Basic), classes de `SyncResource` e `UnSyncResource`, que fornecem acesso sincronizado e não sincronizado para um recurso, respectivamente.</span><span class="sxs-lookup"><span data-stu-id="8be66-195">It defines two `internal` (in C#) or `Friend` (in Visual Basic) classes, `SyncResource` and `UnSyncResource`, that respectively provide synchronized and unsynchronized access to a resource.</span></span> <span data-ttu-id="8be66-196">Para garantir que o exemplo ilustra a diferença entre o acesso sincronizado e não sincronizada (que pode ser o caso se cada chamada de método é concluída rapidamente), o método inclui um atraso aleatório: para threads cuja <xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType> propriedade for par, o chamadas de método <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> para introduzir um atraso de 2.000 milissegundos.</span><span class="sxs-lookup"><span data-stu-id="8be66-196">To ensure that the example illustrates the difference between the synchronized and unsynchronized access (which could be the case if each method call completes rapidly), the method includes a random delay: for threads whose <xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType> property is even, the method calls <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> to introduce a delay of 2,000 milliseconds.</span></span> <span data-ttu-id="8be66-197">Observe que, como o `SyncResource` classe não é público, nenhum código cliente usa um bloqueio no recurso sincronizado; a própria classe interna leva o bloqueio.</span><span class="sxs-lookup"><span data-stu-id="8be66-197">Note that, because the `SyncResource` class is not public, none of the client code takes a lock on the synchronized resource; the internal class itself takes the lock.</span></span> <span data-ttu-id="8be66-198">Isso evita código mal-intencionado tire um bloqueio em um objeto público.</span><span class="sxs-lookup"><span data-stu-id="8be66-198">This prevents malicious code from taking a lock on a public object.</span></span>  
  
 [!code-csharp[Conceptual.Monitors#1](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.monitors/cs/source.cs#1)]
 [!code-vb[Conceptual.Monitors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.monitors/vb/source.vb#1)]  
  
 <span data-ttu-id="8be66-199">O exemplo define uma variável, `numOps`, que define o número de threads que tentam acessar o recurso.</span><span class="sxs-lookup"><span data-stu-id="8be66-199">The example defines a variable, `numOps`, that defines the number of threads that will attempt to access the resource.</span></span> <span data-ttu-id="8be66-200">O thread do aplicativo chama o <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> método sincronizadas e não sincronizada acessar cinco vezes cada uma.</span><span class="sxs-lookup"><span data-stu-id="8be66-200">The application thread calls the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> method for synchronized and unsynchronized access five times each.</span></span> <span data-ttu-id="8be66-201">O <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> método tem um único parâmetro, um delegado que não aceita parâmetros e não retorna nenhum valor.</span><span class="sxs-lookup"><span data-stu-id="8be66-201">The <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> method has a single parameter, a delegate that accepts no parameters and returns no value.</span></span> <span data-ttu-id="8be66-202">Para o acesso sincronizado, ele invoca o `SyncUpdateResource` método; para obter acesso não sincronizado, ele invoca o `UnSyncUpdateResource` método.</span><span class="sxs-lookup"><span data-stu-id="8be66-202">For synchronized access, it invokes the `SyncUpdateResource` method; for unsynchronized access, it invokes the `UnSyncUpdateResource` method.</span></span> <span data-ttu-id="8be66-203">Depois de cada conjunto de chamadas de método, o thread do aplicativo chama o [AutoResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne*) , de modo que ele bloqueia até que o <xref:System.Threading.AutoResetEvent> instância é sinalizada.</span><span class="sxs-lookup"><span data-stu-id="8be66-203">After each set of method calls, the application thread calls the [AutoResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne*) method so that it blocks until the <xref:System.Threading.AutoResetEvent> instance is signaled.</span></span>  
  
 <span data-ttu-id="8be66-204">Cada chamada para o `SyncUpdateResource` chamadas de método interno `SyncResource.Access` método e, em seguida, chama o <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> método para diminuir o `numOps` contador.</span><span class="sxs-lookup"><span data-stu-id="8be66-204">Each call to the `SyncUpdateResource` method calls the internal `SyncResource.Access` method and then calls the <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method to decrement the `numOps` counter.</span></span> <span data-ttu-id="8be66-205">O <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> método é usado para diminuir o contador, pois caso contrário, você não pode ter certeza de que um segundo thread acessará o valor antes que um thread de primeiro 's decrementado valor foi armazenado na variável.</span><span class="sxs-lookup"><span data-stu-id="8be66-205">The <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method Is used to decrement the counter, because otherwise you cannot be certain that a second thread will access the value before a first thread's decremented value has been stored in the variable.</span></span> <span data-ttu-id="8be66-206">Quando a última sincronizado diminui de thread de trabalho o contador de zero, indicando que todos os threads de sincronizados concluiu o acesso ao recurso, o `SyncUpdateResource` chamadas de método a <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> método, que sinaliza o thread principal para continuar execução.</span><span class="sxs-lookup"><span data-stu-id="8be66-206">When the last synchronized worker thread decrements the counter to zero, indicating that all synchronized threads have completed accessing the resource, the `SyncUpdateResource` method calls the <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> method, which signals the main thread to continue execution.</span></span>  
  
 <span data-ttu-id="8be66-207">Cada chamada para o `UnSyncUpdateResource` chamadas de método interno `UnSyncResource.Access` método e, em seguida, chama o <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> método para diminuir o `numOps` contador.</span><span class="sxs-lookup"><span data-stu-id="8be66-207">Each call to the `UnSyncUpdateResource` method calls the internal `UnSyncResource.Access` method and then calls the <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method to decrement the `numOps` counter.</span></span> <span data-ttu-id="8be66-208">Mais uma vez, o <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> método é usado para diminuir o contador para garantir que o valor não acesso a um segundo thread antes que o valor de diminuído primeiro do thread foi atribuído à variável.</span><span class="sxs-lookup"><span data-stu-id="8be66-208">Once again, the <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method Is used to decrement the counter to ensure that a second thread does not access the value before a first thread's decremented value has been assigned to the variable.</span></span> <span data-ttu-id="8be66-209">Quando o último não sincronizada diminui de thread de trabalho para o contador de zero, indicando que não mais não sincronizada threads precisam acessar o recurso, o `UnSyncUpdateResource` chamadas de método a <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> método, que sinaliza o thread principal para continuar a execução .</span><span class="sxs-lookup"><span data-stu-id="8be66-209">When the last unsynchronized worker thread decrements the counter to zero, indicating that no more unsynchronized threads need to access the resource, the `UnSyncUpdateResource` method calls the <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> method, which signals the main thread to continue execution.</span></span>  
  
 <span data-ttu-id="8be66-210">Como mostra a saída do exemplo, o acesso sincronizado garante que o thread de chamada sai antes que outro thread pode acessá-lo; o recurso protegido cada thread aguarda seu antecessor.</span><span class="sxs-lookup"><span data-stu-id="8be66-210">As the output from  the example shows, synchronized access ensures that the calling thread exits the protected resource before another thread can access it; each thread waits on its predecessor.</span></span> <span data-ttu-id="8be66-211">Por outro lado, sem bloqueio, o `UnSyncResource.Access` método é chamado na ordem na qual threads acessá-lo.</span><span class="sxs-lookup"><span data-stu-id="8be66-211">On the other hand, without the lock, the `UnSyncResource.Access` method is called in the order in which threads reach it.</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="8be66-212">Este tipo é thread-safe.</span>
      <span class="sxs-lookup">
        <span data-stu-id="8be66-212">This type is thread safe.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Threading.Thread" />
  </Docs>
  <Members>
    <MemberGroup MemberName="Enter">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8be66-213">Adquire um bloqueio exclusivo em um objeto especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-213">Acquires an exclusive lock on a specified object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public static void Enter (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Enter(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Enter(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Enter (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Enter(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member Enter : obj -&gt; unit" Usage="System.Threading.Monitor.Enter obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="8be66-214">O objeto no qual adquirir o bloqueio do monitor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-214">The object on which to acquire the monitor lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8be66-215">Adquire um bloqueio exclusivo no objeto especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-215">Acquires an exclusive lock on the specified object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8be66-216">Use `Enter` para adquirir o <xref:System.Threading.Monitor> no objeto passado como parâmetro.</span><span class="sxs-lookup"><span data-stu-id="8be66-216">Use `Enter` to acquire the <xref:System.Threading.Monitor> on the object passed as the parameter.</span></span> <span data-ttu-id="8be66-217">Se outro thread tenha executado uma `Enter` no objeto, mas ainda não foi executada correspondente <xref:System.Threading.Monitor.Exit%2A>, o thread atual será bloqueado até que o outro thread libera o objeto.</span><span class="sxs-lookup"><span data-stu-id="8be66-217">If another thread has executed an `Enter` on the object but has not yet executed the corresponding <xref:System.Threading.Monitor.Exit%2A>, the current thread will block until the other thread releases the object.</span></span> <span data-ttu-id="8be66-218">É válido para o mesmo thread invocar `Enter` mais de uma vez sem-bloqueio; no entanto, um número igual de `Exit` chamadas devem ser invocadas antes de outros threads aguardando o objeto serão desbloquear.</span><span class="sxs-lookup"><span data-stu-id="8be66-218">It is legal for the same thread to invoke `Enter` more than once without it blocking; however, an equal number of `Exit` calls must be invoked before other threads waiting on the object will unblock.</span></span>  
  
 <span data-ttu-id="8be66-219">Use <xref:System.Threading.Monitor> para bloquear objetos (ou seja, tipos de referência), não os tipos de valor.</span><span class="sxs-lookup"><span data-stu-id="8be66-219">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="8be66-220">Quando você passa uma variável de tipo de valor para `Enter`, ele é convertido como um objeto.</span><span class="sxs-lookup"><span data-stu-id="8be66-220">When you pass a value type variable to `Enter`, it is boxed as an object.</span></span> <span data-ttu-id="8be66-221">Se você passar a mesma variável para `Enter` novamente, ele é convertido como um objeto separado e não bloqueia o thread.</span><span class="sxs-lookup"><span data-stu-id="8be66-221">If you pass the same variable to `Enter` again, it is boxed as a separate object, and the thread does not block.</span></span> <span data-ttu-id="8be66-222">Nesse caso, o código que `Monitor` é supostamente proteger não está protegido.</span><span class="sxs-lookup"><span data-stu-id="8be66-222">In this case, the code that `Monitor` is supposedly protecting is not protected.</span></span> <span data-ttu-id="8be66-223">Além disso, quando você passa a variável para `Exit`, ainda outro objeto separado é criado.</span><span class="sxs-lookup"><span data-stu-id="8be66-223">Furthermore, when you pass the variable to `Exit`, still another separate object is created.</span></span> <span data-ttu-id="8be66-224">Porque o objeto passado para `Exit` é diferente do objeto passado para `Enter`, `Monitor` lança <xref:System.Threading.SynchronizationLockException>.</span><span class="sxs-lookup"><span data-stu-id="8be66-224">Because the object passed to `Exit` is different from the object passed to `Enter`, `Monitor` throws <xref:System.Threading.SynchronizationLockException>.</span></span> <span data-ttu-id="8be66-225">Para obter mais informações, consulte o tópico conceitual [monitores](xref:System.Threading.Monitor).</span><span class="sxs-lookup"><span data-stu-id="8be66-225">For more information, see the conceptual topic [Monitors](xref:System.Threading.Monitor).</span></span>  
  
 <span data-ttu-id="8be66-226"><xref:System.Threading.Thread.Interrupt%2A> pode interromper threads que estão esperando para inserir um `Monitor` em um objeto.</span><span class="sxs-lookup"><span data-stu-id="8be66-226"><xref:System.Threading.Thread.Interrupt%2A> can interrupt threads that are waiting to enter a `Monitor` on an object.</span></span> <span data-ttu-id="8be66-227">Um <xref:System.Threading.ThreadInterruptedException> será lançada.</span><span class="sxs-lookup"><span data-stu-id="8be66-227">A <xref:System.Threading.ThreadInterruptedException> will be thrown.</span></span>  
  
 <span data-ttu-id="8be66-228">Usar c# `try`...`finally`</span><span class="sxs-lookup"><span data-stu-id="8be66-228">Use a C# `try`…`finally`</span></span> <span data-ttu-id="8be66-229">bloco (`Try`...`Finally`</span><span class="sxs-lookup"><span data-stu-id="8be66-229">block (`Try`…`Finally`</span></span> <span data-ttu-id="8be66-230">no Visual Basic) para garantir que o monitor de versão, ou usar o c# `lock` instrução (`SyncLock` instrução no Visual Basic), que encapsula o <xref:System.Threading.Monitor.Enter%2A> e <xref:System.Threading.Monitor.Exit%2A> métodos em um `try`...`finally`</span><span class="sxs-lookup"><span data-stu-id="8be66-230">in Visual Basic) to ensure that you release the monitor, or use the C# `lock` statement (`SyncLock` statement in Visual Basic), which wraps the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> methods in a `try`…`finally`</span></span> <span data-ttu-id="8be66-231">bloco.</span><span class="sxs-lookup"><span data-stu-id="8be66-231">block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8be66-232">O exemplo a seguir demonstra como usar o `Enter` método.</span><span class="sxs-lookup"><span data-stu-id="8be66-232">The following example demonstrates how to use the `Enter` method.</span></span>  
  
 [!code-cpp[MonitorExmpl2#1](~/samples/snippets/cpp/VS_Snippets_CLR/MonitorExmpl2/CPP/monitor2.cpp#1)]
 [!code-csharp[MonitorExmpl2#1](~/samples/snippets/csharp/VS_Snippets_CLR/MonitorExmpl2/CS/monitor2.cs#1)]
 [!code-vb[MonitorExmpl2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MonitorExmpl2/VB/monitor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8be66-233">O parâmetro <paramref name="obj" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-233">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public static void Enter (object obj, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Enter(object obj, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Enter (obj As Object, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Enter(System::Object ^ obj, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="static member Enter : obj *  -&gt; unit" Usage="System.Threading.Monitor.Enter (obj, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="8be66-234">O objeto no qual aguardar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-234">The object on which to wait.</span>
          </span>
        </param>
        <param name="lockTaken">
          <span data-ttu-id="8be66-235">O resultado da tentativa de adquirir o bloqueio, passado por referência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-235">The result of the attempt to acquire the lock, passed by reference.</span>
          </span>
          <span data-ttu-id="8be66-236">A entrada deve ser <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-236">The input must be <see langword="false" />.</span>
          </span>
          <span data-ttu-id="8be66-237">A saída será <see langword="true" /> se o bloqueio for adquirido; caso contrário, a saída será <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-237">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span>
          </span>
          <span data-ttu-id="8be66-238">A saída é definida mesmo se ocorrer uma exceção durante a tentativa de adquirir o bloqueio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-238">The output is set even if an exception occurs during the attempt to acquire the lock.</span>
          </span>
          <span data-ttu-id="8be66-239">Observação   Se não nenhuma exceção ocorrer, a saída desse método sempre será <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-239">Note   If no exception occurs, the output of this method is always <see langword="true" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8be66-240">Obtém um bloqueio exclusivo no objeto especificado e define automaticamente um valor que indica se o bloqueio foi realizado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-240">Acquires an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8be66-241">Use `Enter` para adquirir o <xref:System.Threading.Monitor> no objeto passado como o `obj` parâmetro.</span><span class="sxs-lookup"><span data-stu-id="8be66-241">Use `Enter` to acquire the <xref:System.Threading.Monitor> on the object passed as the `obj` parameter.</span></span> <span data-ttu-id="8be66-242">Se outro thread tenha executado uma `Enter` no objeto, mas ainda não foi executada correspondente <xref:System.Threading.Monitor.Exit%2A>, o thread atual será bloqueado até que o outro thread libera o objeto.</span><span class="sxs-lookup"><span data-stu-id="8be66-242">If another thread has executed an `Enter` on the object but has not yet executed the corresponding <xref:System.Threading.Monitor.Exit%2A>, the current thread will block until the other thread releases the object.</span></span> <span data-ttu-id="8be66-243">É válido para o mesmo thread invocar `Enter` mais de uma vez sem-bloqueio; no entanto, um número igual de `Exit` chamadas devem ser invocadas antes de outros threads aguardando o objeto serão desbloquear.</span><span class="sxs-lookup"><span data-stu-id="8be66-243">It is legal for the same thread to invoke `Enter` more than once without it blocking; however, an equal number of `Exit` calls must be invoked before other threads waiting on the object will unblock.</span></span>  
  
 <span data-ttu-id="8be66-244">Se o bloqueio não foi executado porque ocorreu uma exceção, a variável especificada para o `lockTaken` parâmetro é `false` após o término desse método.</span><span class="sxs-lookup"><span data-stu-id="8be66-244">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="8be66-245">Isso permite que o programa determinar, em todos os casos, se é necessário liberar o bloqueio.</span><span class="sxs-lookup"><span data-stu-id="8be66-245">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span> <span data-ttu-id="8be66-246">Se esse método retornar sem gerar uma exceção, a variável especificada para o `lockTaken` parâmetro é sempre `true`, e não é necessário testá-lo.</span><span class="sxs-lookup"><span data-stu-id="8be66-246">If this method returns without throwing an exception, the variable specified for the `lockTaken` parameter is always `true`, and there is no need to test it.</span></span>  
  
 <span data-ttu-id="8be66-247">Use <xref:System.Threading.Monitor> para bloquear objetos (ou seja, tipos de referência), não os tipos de valor.</span><span class="sxs-lookup"><span data-stu-id="8be66-247">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="8be66-248">Quando você passa uma variável de tipo de valor para `Enter`, ele é convertido como um objeto.</span><span class="sxs-lookup"><span data-stu-id="8be66-248">When you pass a value type variable to `Enter`, it is boxed as an object.</span></span> <span data-ttu-id="8be66-249">Se você passar a mesma variável para `Enter` novamente, ele é convertido como um objeto separado e não bloqueia o thread.</span><span class="sxs-lookup"><span data-stu-id="8be66-249">If you pass the same variable to `Enter` again, it is boxed as a separate object, and the thread does not block.</span></span> <span data-ttu-id="8be66-250">Nesse caso, o código que `Monitor` é supostamente proteger não está protegido.</span><span class="sxs-lookup"><span data-stu-id="8be66-250">In this case, the code that `Monitor` is supposedly protecting is not protected.</span></span> <span data-ttu-id="8be66-251">Além disso, quando você passa a variável para `Exit`, outro objeto separado é criado.</span><span class="sxs-lookup"><span data-stu-id="8be66-251">Furthermore, when you pass the variable to `Exit`, another separate object is created.</span></span> <span data-ttu-id="8be66-252">Porque o objeto passado para `Exit` é diferente do objeto passado para `Enter`, `Monitor` lança <xref:System.Threading.SynchronizationLockException>.</span><span class="sxs-lookup"><span data-stu-id="8be66-252">Because the object passed to `Exit` is different from the object passed to `Enter`, `Monitor` throws <xref:System.Threading.SynchronizationLockException>.</span></span> <span data-ttu-id="8be66-253">Para obter mais informações, consulte o tópico conceitual [monitores](xref:System.Threading.Monitor).</span><span class="sxs-lookup"><span data-stu-id="8be66-253">For more information, see the conceptual topic [Monitors](xref:System.Threading.Monitor).</span></span>  
  
 <span data-ttu-id="8be66-254"><xref:System.Threading.Thread.Interrupt%2A> pode interromper threads que estão esperando para inserir um `Monitor` em um objeto.</span><span class="sxs-lookup"><span data-stu-id="8be66-254"><xref:System.Threading.Thread.Interrupt%2A> can interrupt threads that are waiting to enter a `Monitor` on an object.</span></span> <span data-ttu-id="8be66-255">Um <xref:System.Threading.ThreadInterruptedException> será lançada.</span><span class="sxs-lookup"><span data-stu-id="8be66-255">A <xref:System.Threading.ThreadInterruptedException> will be thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8be66-256">O código a seguir mostra o padrão básico para usar o <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29> sobrecarga de método.</span><span class="sxs-lookup"><span data-stu-id="8be66-256">The following code shows the basic pattern for using the <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29> method overload.</span></span> <span data-ttu-id="8be66-257">Essa sobrecarga sempre define o valor da variável que é passado para o `ref` parâmetro (`ByRef` no Visual Basic) `lockTaken`, mesmo que o método lança uma exceção, portanto, o valor da variável é uma maneira confiável de testar se o bloqueio tem de ser lançado.</span><span class="sxs-lookup"><span data-stu-id="8be66-257">This overload always sets the value of the variable that is passed to the `ref` parameter (`ByRef` in Visual Basic) `lockTaken`, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Enter#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.enter/cs/example.cs#2)]
 [!code-vb[System.Threading.Monitor.Enter#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.enter/vb/example.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8be66-258">A entrada para <paramref name="lockTaken" /> é <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-258">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8be66-259">O parâmetro <paramref name="obj" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-259">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Exit">
      <MemberSignature Language="C#" Value="public static void Exit (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Exit(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Exit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Exit (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Exit(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member Exit : obj -&gt; unit" Usage="System.Threading.Monitor.Exit obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="8be66-260">O objeto no qual liberar o bloqueio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-260">The object on which to release the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8be66-261">Libera um bloqueio exclusivo no objeto especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-261">Releases an exclusive lock on the specified object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8be66-262">O thread de chamada deve possuir o bloqueio no `obj` parâmetro.</span><span class="sxs-lookup"><span data-stu-id="8be66-262">The calling thread must own the lock on the `obj` parameter.</span></span> <span data-ttu-id="8be66-263">Se o thread de chamada possui o bloqueio no objeto especificado e tem feito um número igual de `Exit` e <xref:System.Threading.Monitor.Enter%2A> chama para o objeto, em seguida, o bloqueio seja liberado.</span><span class="sxs-lookup"><span data-stu-id="8be66-263">If the calling thread owns the lock on the specified object, and has made an equal number of `Exit` and <xref:System.Threading.Monitor.Enter%2A> calls for the object, then the lock is released.</span></span> <span data-ttu-id="8be66-264">Se o thread de chamada não invocado `Exit` tantas vezes quanto `Enter`, o bloqueio não será liberado.</span><span class="sxs-lookup"><span data-stu-id="8be66-264">If the calling thread has not invoked `Exit` as many times as `Enter`, the lock is not released.</span></span>  
  
 <span data-ttu-id="8be66-265">Se o bloqueio é liberado e outros threads estão na fila de pronto para o objeto, um dos threads adquire o bloqueio.</span><span class="sxs-lookup"><span data-stu-id="8be66-265">If the lock is released and other threads are in the ready queue for the object, one of the threads acquires the lock.</span></span> <span data-ttu-id="8be66-266">Se outros threads estiverem na fila de espera, aguardando para adquirir o bloqueio, eles não serão automaticamente movidos para a fila de pronto quando chama o proprietário do bloqueio `Exit`.</span><span class="sxs-lookup"><span data-stu-id="8be66-266">If other threads are in the waiting queue waiting to acquire the lock, they are not automatically moved to the ready queue when the owner of the lock calls `Exit`.</span></span> <span data-ttu-id="8be66-267">Para mover um ou mais threads em espera na fila de pronto, chame <xref:System.Threading.Monitor.Pulse%2A> ou <xref:System.Threading.Monitor.PulseAll%2A> antes de invocar `Exit`.</span><span class="sxs-lookup"><span data-stu-id="8be66-267">To move one or more waiting threads into the ready queue, call <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> before invoking `Exit`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8be66-268">O exemplo a seguir demonstra como usar o `Exit` método.</span><span class="sxs-lookup"><span data-stu-id="8be66-268">The following example demonstrates how to use the `Exit` method.</span></span>  
  
 [!code-cpp[MonitorExmpl2#1](~/samples/snippets/cpp/VS_Snippets_CLR/MonitorExmpl2/CPP/monitor2.cpp#1)]
 [!code-csharp[MonitorExmpl2#1](~/samples/snippets/csharp/VS_Snippets_CLR/MonitorExmpl2/CS/monitor2.cs#1)]
 [!code-vb[MonitorExmpl2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MonitorExmpl2/VB/monitor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8be66-269">O parâmetro <paramref name="obj" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-269">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="8be66-270">O thread atual não é o proprietário do bloqueio do objeto especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-270">The current thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="IsEntered">
      <MemberSignature Language="C#" Value="public static bool IsEntered (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsEntered(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.IsEntered(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsEntered (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsEntered(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member IsEntered : obj -&gt; bool" Usage="System.Threading.Monitor.IsEntered obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="8be66-271">O objeto a ser testado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-271">The object to test.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8be66-272">Determina se o thread atual mantém o bloqueio no objeto especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-272">Determines whether the current thread holds the lock on the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8be66-273">
            <see langword="true" /> se o thread atual mantiver o bloqueio no <paramref name="obj" />; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-273">
              <see langword="true" /> if the current thread holds the lock on <paramref name="obj" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8be66-274">Esse método funciona apenas para os bloqueios são adquiridos por meio dos métodos do <xref:System.Threading.Monitor> classe ou usando o c# `lock` instrução ou o Visual Basic `SyncLock` instrução, que são implementadas com <xref:System.Threading.Monitor>.</span><span class="sxs-lookup"><span data-stu-id="8be66-274">This method works only for locks that are acquired by using the methods of the <xref:System.Threading.Monitor> class, or by using the C# `lock` statement or the Visual Basic `SyncLock` statement, which are implemented with <xref:System.Threading.Monitor>.</span></span>  
  
 <span data-ttu-id="8be66-275">Use esse método com ferramentas de diagnóstico, como o <xref:System.Diagnostics.Debug.Assert%2A> método e o <xref:System.Diagnostics.Contracts.Contract> classe, para depurar problemas de bloqueio que envolvem o <xref:System.Threading.Monitor> classe.</span><span class="sxs-lookup"><span data-stu-id="8be66-275">Use this method with diagnostic tools, such as the <xref:System.Diagnostics.Debug.Assert%2A> method and the <xref:System.Diagnostics.Contracts.Contract> class, to debug locking issues that involve the <xref:System.Threading.Monitor> class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8be66-276">
            <paramref name="obj" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-276">
              <paramref name="obj" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Pulse">
      <MemberSignature Language="C#" Value="public static void Pulse (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Pulse(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Pulse(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Pulse (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Pulse(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member Pulse : obj -&gt; unit" Usage="System.Threading.Monitor.Pulse obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="8be66-277">O objeto ao qual um thread está aguardando.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-277">The object a thread is waiting for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8be66-278">Notifica um thread na fila de espera de uma alteração no estado do objeto bloqueado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-278">Notifies a thread in the waiting queue of a change in the locked object's state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8be66-279">Somente o proprietário atual do bloqueio pode sinalizar um objeto de espera usando `Pulse`.</span><span class="sxs-lookup"><span data-stu-id="8be66-279">Only the current owner of the lock can signal a waiting object using `Pulse`.</span></span>  
  
 <span data-ttu-id="8be66-280">O thread que atualmente detém o bloqueio no objeto especificado invoca esse método para sinalizar o próximo segmento em linha para o bloqueio.</span><span class="sxs-lookup"><span data-stu-id="8be66-280">The thread that currently owns the lock on the specified object invokes this method to signal the next thread in line for the lock.</span></span> <span data-ttu-id="8be66-281">Ao receber o ritmo, o thread em espera é movido para a fila de pronto.</span><span class="sxs-lookup"><span data-stu-id="8be66-281">Upon receiving the pulse, the waiting thread is moved to the ready queue.</span></span> <span data-ttu-id="8be66-282">Quando o thread que invocou `Pulse` libera o bloqueio, o próximo thread na fila de pronto (que não necessariamente o thread que foi pulsado) adquire o bloqueio.</span><span class="sxs-lookup"><span data-stu-id="8be66-282">When the thread that invoked `Pulse` releases the lock, the next thread in the ready queue (which is not necessarily the thread that was pulsed) acquires the lock.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8be66-283">O <xref:System.Threading.Monitor> classe não mantém o estado indicando que o <xref:System.Threading.Monitor.Pulse%2A> método foi chamado.</span><span class="sxs-lookup"><span data-stu-id="8be66-283">The <xref:System.Threading.Monitor> class does not maintain state indicating that the <xref:System.Threading.Monitor.Pulse%2A> method has been called.</span></span> <span data-ttu-id="8be66-284">Portanto, se você chamar <xref:System.Threading.Monitor.Pulse%2A> quando nenhum thread estiver aguardando, o próximo segmento que chama <xref:System.Threading.Monitor.Wait%2A> blocos como se <xref:System.Threading.Monitor.Pulse%2A> nunca tivesse sido chamada.</span><span class="sxs-lookup"><span data-stu-id="8be66-284">Thus, if you call <xref:System.Threading.Monitor.Pulse%2A> when no threads are waiting, the next thread that calls <xref:System.Threading.Monitor.Wait%2A> blocks as if <xref:System.Threading.Monitor.Pulse%2A> had never been called.</span></span> <span data-ttu-id="8be66-285">Se estiver usando a dois threads <xref:System.Threading.Monitor.Pulse%2A> e <xref:System.Threading.Monitor.Wait%2A> para interagir, isso pode resultar em um deadlock.</span><span class="sxs-lookup"><span data-stu-id="8be66-285">If two threads are using <xref:System.Threading.Monitor.Pulse%2A> and <xref:System.Threading.Monitor.Wait%2A> to interact, this could result in a deadlock.</span></span> <span data-ttu-id="8be66-286">Compare isso com o comportamento do <xref:System.Threading.AutoResetEvent> classe: se você sinalizar uma <xref:System.Threading.AutoResetEvent> chamando seu <xref:System.Threading.EventWaitHandle.Set%2A> método e não há nenhum segmento esperando, o <xref:System.Threading.AutoResetEvent> permanece em um estado sinalizado até que um thread chama <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, ou <xref:System.Threading.WaitHandle.WaitAll%2A>.</span><span class="sxs-lookup"><span data-stu-id="8be66-286">Contrast this with the behavior of the <xref:System.Threading.AutoResetEvent> class: If you signal an <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, and there are no threads waiting, the <xref:System.Threading.AutoResetEvent> remains in a signaled state until a thread calls <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, or <xref:System.Threading.WaitHandle.WaitAll%2A>.</span></span> <span data-ttu-id="8be66-287">O <xref:System.Threading.AutoResetEvent> libera o thread em questão e retorna ao estado não sinalizado.</span><span class="sxs-lookup"><span data-stu-id="8be66-287">The <xref:System.Threading.AutoResetEvent> releases that thread and returns to the unsignaled state.</span></span>  
  
 <span data-ttu-id="8be66-288">Observe que um objeto sincronizado contém várias referências, incluindo uma referência para o thread que atualmente mantém o bloqueio, uma referência para a fila de pronto, que contém os threads que estão prontos para obter o bloqueio, e uma referência à fila de espera, que contém os threads que estão aguardando a notificação de alteração no estado do objeto.</span><span class="sxs-lookup"><span data-stu-id="8be66-288">Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="8be66-289">O `Pulse`, <xref:System.Threading.Monitor.PulseAll%2A>, e <xref:System.Threading.Monitor.Wait%2A> métodos devem ser chamados de dentro de um bloco de código sincronizado.</span><span class="sxs-lookup"><span data-stu-id="8be66-289">The `Pulse`, <xref:System.Threading.Monitor.PulseAll%2A>, and <xref:System.Threading.Monitor.Wait%2A> methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="8be66-290">Para sinalizar vários threads, use o <xref:System.Threading.Monitor.PulseAll%2A> método.</span><span class="sxs-lookup"><span data-stu-id="8be66-290">To signal multiple threads, use the <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8be66-291">O parâmetro <paramref name="obj" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-291">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="8be66-292">O thread de chamada não é proprietário do bloqueio do objeto especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-292">The calling thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="PulseAll">
      <MemberSignature Language="C#" Value="public static void PulseAll (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PulseAll(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.PulseAll(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub PulseAll (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PulseAll(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member PulseAll : obj -&gt; unit" Usage="System.Threading.Monitor.PulseAll obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="8be66-293">O objeto que envia o pulso.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-293">The object that sends the pulse.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8be66-294">Notifica todos os threads em espera de uma alteração no estado do objeto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-294">Notifies all waiting threads of a change in the object's state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8be66-295">O thread que atualmente detém o bloqueio no objeto especificado invoca esse método para sinalizar todos os threads estão aguardando para adquirir o bloqueio no objeto.</span><span class="sxs-lookup"><span data-stu-id="8be66-295">The thread that currently owns the lock on the specified object invokes this method to signal all threads waiting to acquire the lock on the object.</span></span> <span data-ttu-id="8be66-296">Depois que o sinal for enviado, os threads em espera são movidos para a fila de pronto.</span><span class="sxs-lookup"><span data-stu-id="8be66-296">After the signal is sent, the waiting threads are moved to the ready queue.</span></span> <span data-ttu-id="8be66-297">Quando o thread que invocou `PulseAll` libera o bloqueio, o próximo thread na fila de pronto adquire o bloqueio.</span><span class="sxs-lookup"><span data-stu-id="8be66-297">When the thread that invoked `PulseAll` releases the lock, the next thread in the ready queue acquires the lock.</span></span>  
  
 <span data-ttu-id="8be66-298">Observe que um objeto sincronizado contém várias referências, incluindo uma referência para o thread que atualmente mantém o bloqueio, uma referência para a fila de pronto, que contém os threads que estão prontos para obter o bloqueio, e uma referência à fila de espera, que contém os threads que estão aguardando a notificação de alteração no estado do objeto.</span><span class="sxs-lookup"><span data-stu-id="8be66-298">Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="8be66-299">O <xref:System.Threading.Monitor.Pulse%2A>, `PulseAll`, e <xref:System.Threading.Monitor.Wait%2A> métodos devem ser chamados de dentro de um bloco de código sincronizado.</span><span class="sxs-lookup"><span data-stu-id="8be66-299">The <xref:System.Threading.Monitor.Pulse%2A>, `PulseAll`, and <xref:System.Threading.Monitor.Wait%2A> methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="8be66-300">Os comentários para o <xref:System.Threading.Monitor.Pulse%2A> método explicar o que acontece se <xref:System.Threading.Monitor.Pulse%2A> é chamado quando nenhum thread estiver aguardando.</span><span class="sxs-lookup"><span data-stu-id="8be66-300">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 <span data-ttu-id="8be66-301">Para sinalizar que um único thread, use o `Pulse` método.</span><span class="sxs-lookup"><span data-stu-id="8be66-301">To signal a single thread, use the `Pulse` method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8be66-302">O parâmetro <paramref name="obj" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-302">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="8be66-303">O thread de chamada não é proprietário do bloqueio do objeto especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-303">The calling thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TryEnter">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8be66-304">Tenta adquirir um bloqueio exclusivo no objeto especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-304">Attempts to acquire an exclusive lock on the specified object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static bool TryEnter (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEnter(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEnter (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEnter(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj -&gt; bool" Usage="System.Threading.Monitor.TryEnter obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="8be66-305">O objeto no qual adquirir o bloqueio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-305">The object on which to acquire the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8be66-306">Tenta adquirir um bloqueio exclusivo no objeto especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-306">Attempts to acquire an exclusive lock on the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8be66-307">
            <see langword="true" /> se o thread atual adquirir o bloqueio; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-307">
              <see langword="true" /> if the current thread acquires the lock; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8be66-308">Se for bem-sucedido, este método adquire um bloqueio exclusivo no `obj` parâmetro.</span><span class="sxs-lookup"><span data-stu-id="8be66-308">If successful, this method acquires an exclusive lock on the `obj` parameter.</span></span> <span data-ttu-id="8be66-309">Esse método retorna imediatamente, se o bloqueio está disponível ou não.</span><span class="sxs-lookup"><span data-stu-id="8be66-309">This method returns immediately, whether or not the lock is available.</span></span>  
  
 <span data-ttu-id="8be66-310">Esse método é semelhante ao <xref:System.Threading.Monitor.Enter%2A>, mas nunca irá bloquear o thread atual.</span><span class="sxs-lookup"><span data-stu-id="8be66-310">This method is similar to <xref:System.Threading.Monitor.Enter%2A>, but it will never block the current thread.</span></span> <span data-ttu-id="8be66-311">Se o thread não é possível inserir sem bloqueio, o método retorna `false,`.</span><span class="sxs-lookup"><span data-stu-id="8be66-311">If the thread cannot enter without blocking, the method returns `false,`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8be66-312">Use <xref:System.Threading.Monitor> para bloquear objetos (ou seja, tipos de referência), não os tipos de valor.</span><span class="sxs-lookup"><span data-stu-id="8be66-312">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="8be66-313">Para obter detalhes, consulte o <xref:System.Threading.Monitor> artigo.</span><span class="sxs-lookup"><span data-stu-id="8be66-313">For details, see the <xref:System.Threading.Monitor> article.</span></span>  
  
 <span data-ttu-id="8be66-314">Para garantir que o thread não inserir a seção crítica, você deve examinar o valor de retorno do método e executar o código na seção crítica somente se seu valor de retorno é `true`.</span><span class="sxs-lookup"><span data-stu-id="8be66-314">To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is `true`.</span></span> <span data-ttu-id="8be66-315">O fragmento de código a seguir mostra o padrão usado para chamar esse método.</span><span class="sxs-lookup"><span data-stu-id="8be66-315">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="8be66-316">Observe que você deve chamar <xref:System.Threading.Monitor.Exit%2A> em um `finally` bloco para garantir que o thread de chamada libera o bloqueio na seção crítica se ocorrer uma exceção.</span><span class="sxs-lookup"><span data-stu-id="8be66-316">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#1)]
 [!code-vb[System.Threading.Monitor.TryEnter#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="8be66-317">O exemplo de código a seguir demonstra como usar o `TryEnter` método.</span><span class="sxs-lookup"><span data-stu-id="8be66-317">The following code example demonstrates how to use the `TryEnter` method.</span></span>  
  
 [!code-cpp[MonitorExmpl2#1](~/samples/snippets/cpp/VS_Snippets_CLR/MonitorExmpl2/CPP/monitor2.cpp#1)]
 [!code-csharp[MonitorExmpl2#1](~/samples/snippets/csharp/VS_Snippets_CLR/MonitorExmpl2/CS/monitor2.cs#1)]
 [!code-vb[MonitorExmpl2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MonitorExmpl2/VB/monitor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8be66-318">O parâmetro <paramref name="obj" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-318">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static void TryEnter (object obj, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryEnter(object obj, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TryEnter (obj As Object, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TryEnter(System::Object ^ obj, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj *  -&gt; unit" Usage="System.Threading.Monitor.TryEnter (obj, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="8be66-319">O objeto no qual adquirir o bloqueio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-319">The object on which to acquire the lock.</span>
          </span>
        </param>
        <param name="lockTaken">
          <span data-ttu-id="8be66-320">O resultado da tentativa de adquirir o bloqueio, passado por referência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-320">The result of the attempt to acquire the lock, passed by reference.</span>
          </span>
          <span data-ttu-id="8be66-321">A entrada deve ser <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-321">The input must be <see langword="false" />.</span>
          </span>
          <span data-ttu-id="8be66-322">A saída será <see langword="true" /> se o bloqueio for adquirido; caso contrário, a saída será <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-322">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span>
          </span>
          <span data-ttu-id="8be66-323">A saída é definida mesmo se ocorrer uma exceção durante a tentativa de adquirir o bloqueio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-323">The output is set even if an exception occurs during the attempt to acquire the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8be66-324">Tenta obter um bloqueio exclusivo no objeto especificado e define automaticamente um valor que indica se o bloqueio foi realizado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-324">Attempts to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8be66-325">Se for bem-sucedido, este método adquire um bloqueio exclusivo no `obj` parâmetro.</span><span class="sxs-lookup"><span data-stu-id="8be66-325">If successful, this method acquires an exclusive lock on the `obj` parameter.</span></span> <span data-ttu-id="8be66-326">Esse método retorna imediatamente, se o bloqueio está disponível ou não.</span><span class="sxs-lookup"><span data-stu-id="8be66-326">This method returns immediately, whether or not the lock is available.</span></span>  
  
 <span data-ttu-id="8be66-327">Se o bloqueio não foi executado porque ocorreu uma exceção, a variável especificada para o `lockTaken` parâmetro é `false` após o término desse método.</span><span class="sxs-lookup"><span data-stu-id="8be66-327">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="8be66-328">Isso permite que o programa determinar, em todos os casos, se é necessário liberar o bloqueio.</span><span class="sxs-lookup"><span data-stu-id="8be66-328">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span>  
  
 <span data-ttu-id="8be66-329">Esse método é semelhante ao <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29>, mas nunca irá bloquear o thread atual.</span><span class="sxs-lookup"><span data-stu-id="8be66-329">This method is similar to <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29>, but it will never block the current thread.</span></span> <span data-ttu-id="8be66-330">Se o thread não é possível inserir sem bloqueio, o `lockTaken` argumento for definido como `false` quando o método retornar.</span><span class="sxs-lookup"><span data-stu-id="8be66-330">If the thread cannot enter without blocking, the `lockTaken` argument is set to `false` when the method returns.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8be66-331">Use <xref:System.Threading.Monitor> para bloquear objetos (ou seja, tipos de referência), não os tipos de valor.</span><span class="sxs-lookup"><span data-stu-id="8be66-331">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="8be66-332">Para obter mais informações, consulte o <xref:System.Threading.Monitor> artigo.</span><span class="sxs-lookup"><span data-stu-id="8be66-332">For more information, see the <xref:System.Threading.Monitor> article.</span></span>  
  
 <span data-ttu-id="8be66-333">Para garantir que o thread não insere a seção crítica, você deve examinar o valor de `lockTaken` e executar o código na seção crítica somente se seu valor é `true`.</span><span class="sxs-lookup"><span data-stu-id="8be66-333">To ensure that the thread does not enter the critical section, you should examine the value of `lockTaken` and  execute code in the critical section only if its value is `true`.</span></span> <span data-ttu-id="8be66-334">O fragmento de código a seguir mostra o padrão usado para chamar esse método.</span><span class="sxs-lookup"><span data-stu-id="8be66-334">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="8be66-335">Observe que você deve chamar <xref:System.Threading.Monitor.Exit%2A> em um `finally` bloco para garantir que o thread de chamada libera o bloqueio na seção crítica se ocorrer uma exceção.</span><span class="sxs-lookup"><span data-stu-id="8be66-335">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#2)]
 [!code-vb[System.Threading.Monitor.TryEnter#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#2)]  
  
   
  
## Examples  
 <span data-ttu-id="8be66-336">O código a seguir mostra o padrão básico para usar o <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> sobrecarga de método.</span><span class="sxs-lookup"><span data-stu-id="8be66-336">The following code shows the basic pattern for using the <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> method overload.</span></span> <span data-ttu-id="8be66-337">Essa sobrecarga sempre define o valor da variável que é passado para o `ref` parâmetro (`ByRef` no Visual Basic) `lockTaken`, mesmo que o método lança uma exceção, portanto, o valor da variável é uma maneira confiável de testar se o bloqueio tem de ser lançado.</span><span class="sxs-lookup"><span data-stu-id="8be66-337">This overload always sets the value of the variable that is passed to the `ref` parameter (`ByRef` in Visual Basic) `lockTaken`, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Enter#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.enter/cs/example.cs#3)]
 [!code-vb[System.Threading.Monitor.Enter#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.enter/vb/example.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8be66-338">A entrada para <paramref name="lockTaken" /> é <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-338">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8be66-339">O parâmetro <paramref name="obj" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-339">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static bool TryEnter (object obj, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEnter(object obj, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEnter (obj As Object, millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEnter(System::Object ^ obj, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj * int -&gt; bool" Usage="System.Threading.Monitor.TryEnter (obj, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="8be66-340">O objeto no qual adquirir o bloqueio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-340">The object on which to acquire the lock.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="8be66-341">O número de milésimos de segundos de espera do bloqueio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-341">The number of milliseconds to wait for the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8be66-342">Tentativas, durante o período especificado de milésimos de segundos, para adquirir um bloqueio exclusivo no objeto especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-342">Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8be66-343">
            <see langword="true" /> se o thread atual adquirir o bloqueio; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-343">
              <see langword="true" /> if the current thread acquires the lock; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8be66-344">Se o `millisecondsTimeout` for igual ao parâmetro <xref:System.Threading.Timeout.Infinite>, esse método é equivalente a <xref:System.Threading.Monitor.Enter%2A>.</span><span class="sxs-lookup"><span data-stu-id="8be66-344">If the `millisecondsTimeout` parameter equals <xref:System.Threading.Timeout.Infinite>, this method is equivalent to <xref:System.Threading.Monitor.Enter%2A>.</span></span> <span data-ttu-id="8be66-345">Se `millisecondsTimeout` for igual a 0, esse método é equivalente a <xref:System.Threading.Monitor.TryEnter%2A>.</span><span class="sxs-lookup"><span data-stu-id="8be66-345">If `millisecondsTimeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8be66-346">Use <xref:System.Threading.Monitor> para bloquear objetos (ou seja, tipos de referência), não os tipos de valor.</span><span class="sxs-lookup"><span data-stu-id="8be66-346">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="8be66-347">Para obter detalhes, consulte o <xref:System.Threading.Monitor> artigo.</span><span class="sxs-lookup"><span data-stu-id="8be66-347">For details, see the <xref:System.Threading.Monitor> article.</span></span>  
  
 <span data-ttu-id="8be66-348">Para garantir que o thread não inserir a seção crítica, você deve examinar o valor de retorno do método e executar o código na seção crítica somente se seu valor de retorno é `true`.</span><span class="sxs-lookup"><span data-stu-id="8be66-348">To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is `true`.</span></span> <span data-ttu-id="8be66-349">O fragmento de código a seguir mostra o padrão usado para chamar esse método.</span><span class="sxs-lookup"><span data-stu-id="8be66-349">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="8be66-350">Observe que você deve chamar <xref:System.Threading.Monitor.Exit%2A> em um `finally` bloco para garantir que o thread de chamada libera o bloqueio na seção crítica se ocorrer uma exceção.</span><span class="sxs-lookup"><span data-stu-id="8be66-350">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#3)]
 [!code-vb[System.Threading.Monitor.TryEnter#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8be66-351">O parâmetro <paramref name="obj" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-351">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="8be66-352">
            <paramref name="millisecondsTimeout" /> é negativo e diferente de <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-352">
              <paramref name="millisecondsTimeout" /> is negative, and not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static bool TryEnter (object obj, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEnter(object obj, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEnter (obj As Object, timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEnter(System::Object ^ obj, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj * TimeSpan -&gt; bool" Usage="System.Threading.Monitor.TryEnter (obj, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="8be66-353">O objeto no qual adquirir o bloqueio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-353">The object on which to acquire the lock.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="8be66-354">Um <see cref="T:System.TimeSpan" /> que representa a quantidade de tempo a esperar pelo bloqueio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-354">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait for the lock.</span>
          </span>
          <span data-ttu-id="8be66-355">Um valor de -1 milissegundo especifica uma espera infinita.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-355">A value of –1 millisecond specifies an infinite wait.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8be66-356">Tentativas, durante o período especificado de tempo, para adquirir um bloqueio exclusivo no objeto especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-356">Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8be66-357">
            <see langword="true" /> se o thread atual adquirir o bloqueio; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-357">
              <see langword="true" /> if the current thread acquires the lock; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8be66-358">Se o valor de `timeout` convertido em milissegundos de parâmetro for igual a -1, esse método é equivalente a <xref:System.Threading.Monitor.Enter%2A>.</span><span class="sxs-lookup"><span data-stu-id="8be66-358">If the value of the `timeout` parameter converted to milliseconds equals –1, this method is equivalent to <xref:System.Threading.Monitor.Enter%2A>.</span></span> <span data-ttu-id="8be66-359">Se o valor de `timeout` for igual a 0, esse método é equivalente a <xref:System.Threading.Monitor.TryEnter%2A>.</span><span class="sxs-lookup"><span data-stu-id="8be66-359">If the value of `timeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8be66-360">Use <xref:System.Threading.Monitor> para bloquear objetos (ou seja, tipos de referência), não os tipos de valor.</span><span class="sxs-lookup"><span data-stu-id="8be66-360">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="8be66-361">Para obter detalhes, consulte o <xref:System.Threading.Monitor> tópico da classe.</span><span class="sxs-lookup"><span data-stu-id="8be66-361">For details, see the <xref:System.Threading.Monitor> class topic.</span></span>  
  
 <span data-ttu-id="8be66-362">Para garantir que o thread não inserir a seção crítica, você deve examinar o valor de retorno do método e executar o código na seção crítica somente se seu valor de retorno é `true`.</span><span class="sxs-lookup"><span data-stu-id="8be66-362">To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is `true`.</span></span> <span data-ttu-id="8be66-363">O fragmento de código a seguir mostra o padrão usado para chamar esse método.</span><span class="sxs-lookup"><span data-stu-id="8be66-363">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="8be66-364">Observe que você deve chamar <xref:System.Threading.Monitor.Exit%2A> em um `finally` bloco para garantir que o thread de chamada libera o bloqueio na seção crítica se ocorrer uma exceção.</span><span class="sxs-lookup"><span data-stu-id="8be66-364">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#5)]
 [!code-vb[System.Threading.Monitor.TryEnter#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8be66-365">O parâmetro <paramref name="obj" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-365">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="8be66-366">O valor de <paramref name="timeout" /> em milissegundos será negativo e não será igual a <see cref="F:System.Threading.Timeout.Infinite" /> (-1 milissegundo) ou será maior que <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-366">The value of <paramref name="timeout" /> in milliseconds is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (–1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static void TryEnter (object obj, int millisecondsTimeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryEnter(object obj, int32 millisecondsTimeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TryEnter (obj As Object, millisecondsTimeout As Integer, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TryEnter(System::Object ^ obj, int millisecondsTimeout, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj * int *  -&gt; unit" Usage="System.Threading.Monitor.TryEnter (obj, millisecondsTimeout, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="8be66-367">O objeto no qual adquirir o bloqueio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-367">The object on which to acquire the lock.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="8be66-368">O número de milésimos de segundos de espera do bloqueio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-368">The number of milliseconds to wait for the lock.</span>
          </span>
        </param>
        <param name="lockTaken">
          <span data-ttu-id="8be66-369">O resultado da tentativa de adquirir o bloqueio, passado por referência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-369">The result of the attempt to acquire the lock, passed by reference.</span>
          </span>
          <span data-ttu-id="8be66-370">A entrada deve ser <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-370">The input must be <see langword="false" />.</span>
          </span>
          <span data-ttu-id="8be66-371">A saída será <see langword="true" /> se o bloqueio for adquirido; caso contrário, a saída será <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-371">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span>
          </span>
          <span data-ttu-id="8be66-372">A saída é definida mesmo se ocorrer uma exceção durante a tentativa de adquirir o bloqueio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-372">The output is set even if an exception occurs during the attempt to acquire the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8be66-373">Tenta, pelo número de milissegundos especificado, obter um bloqueio exclusivo no objeto especificado e define de forma atômica um valor que indica se o bloqueio foi realizado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-373">Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8be66-374">Se o `millisecondsTimeout` for igual ao parâmetro <xref:System.Threading.Timeout.Infinite>, esse método é equivalente a <xref:System.Threading.Monitor.Enter%28System.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="8be66-374">If the `millisecondsTimeout` parameter equals <xref:System.Threading.Timeout.Infinite>, this method is equivalent to <xref:System.Threading.Monitor.Enter%28System.Object%29>.</span></span> <span data-ttu-id="8be66-375">Se `millisecondsTimeout` for igual a 0, esse método é equivalente a <xref:System.Threading.Monitor.TryEnter%28System.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="8be66-375">If `millisecondsTimeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%28System.Object%29>.</span></span>  
  
 <span data-ttu-id="8be66-376">Se o bloqueio não foi executado porque ocorreu uma exceção, a variável especificada para o `lockTaken` parâmetro é `false` após o término desse método.</span><span class="sxs-lookup"><span data-stu-id="8be66-376">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="8be66-377">Isso permite que o programa determinar, em todos os casos, se é necessário liberar o bloqueio.</span><span class="sxs-lookup"><span data-stu-id="8be66-377">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8be66-378">Use <xref:System.Threading.Monitor> para bloquear objetos (ou seja, tipos de referência), não os tipos de valor.</span><span class="sxs-lookup"><span data-stu-id="8be66-378">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="8be66-379">Para obter mais informações, consulte o <xref:System.Threading.Monitor> tópico da classe.</span><span class="sxs-lookup"><span data-stu-id="8be66-379">For more information, see the <xref:System.Threading.Monitor> class topic.</span></span>  
  
 <span data-ttu-id="8be66-380">Para garantir que o thread não insere a seção crítica, você deve examinar o valor de `lockTaken` e executar o código na seção crítica somente se seu valor é `true`.</span><span class="sxs-lookup"><span data-stu-id="8be66-380">To ensure that the thread does not enter the critical section, you should examine the value of `lockTaken` and  execute code in the critical section only if its value is `true`.</span></span> <span data-ttu-id="8be66-381">O fragmento de código a seguir mostra o padrão usado para chamar esse método.</span><span class="sxs-lookup"><span data-stu-id="8be66-381">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="8be66-382">Observe que você deve chamar <xref:System.Threading.Monitor.Exit%2A> em um `finally` bloco para garantir que o thread de chamada libera o bloqueio na seção crítica se ocorrer uma exceção.</span><span class="sxs-lookup"><span data-stu-id="8be66-382">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#4)]
 [!code-vb[System.Threading.Monitor.TryEnter#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#4)]  
  
   
  
## Examples  
 <span data-ttu-id="8be66-383">O código a seguir mostra o padrão básico para usar o <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> sobrecarga de método.</span><span class="sxs-lookup"><span data-stu-id="8be66-383">The following code shows the basic pattern for using the <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> method overload.</span></span> <span data-ttu-id="8be66-384">Essa sobrecarga sempre define o valor da variável que é passado para o `ref` parâmetro (`ByRef` no Visual Basic) `lockTaken`, mesmo que o método lança uma exceção, portanto, o valor da variável é uma maneira confiável de testar se o bloqueio tem de ser lançado.</span><span class="sxs-lookup"><span data-stu-id="8be66-384">This overload always sets the value of the variable that is passed to the `ref` parameter (`ByRef` in Visual Basic) `lockTaken`, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Enter#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.enter/cs/example.cs#4)]
 [!code-vb[System.Threading.Monitor.Enter#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.enter/vb/example.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8be66-385">A entrada para <paramref name="lockTaken" /> é <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-385">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8be66-386">O parâmetro <paramref name="obj" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-386">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="8be66-387">
            <paramref name="millisecondsTimeout" /> é negativo e diferente de <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-387">
              <paramref name="millisecondsTimeout" /> is negative, and not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static void TryEnter (object obj, TimeSpan timeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryEnter(object obj, valuetype System.TimeSpan timeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TryEnter (obj As Object, timeout As TimeSpan, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TryEnter(System::Object ^ obj, TimeSpan timeout, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj * TimeSpan *  -&gt; unit" Usage="System.Threading.Monitor.TryEnter (obj, timeout, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="8be66-388">O objeto no qual adquirir o bloqueio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-388">The object on which to acquire the lock.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="8be66-389">A quantidade de tempo a esperar pelo bloqueio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-389">The amount of time to wait for the lock.</span>
          </span>
          <span data-ttu-id="8be66-390">Um valor de -1 milissegundo especifica uma espera infinita.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-390">A value of –1 millisecond specifies an infinite wait.</span>
          </span>
        </param>
        <param name="lockTaken">
          <span data-ttu-id="8be66-391">O resultado da tentativa de adquirir o bloqueio, passado por referência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-391">The result of the attempt to acquire the lock, passed by reference.</span>
          </span>
          <span data-ttu-id="8be66-392">A entrada deve ser <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-392">The input must be <see langword="false" />.</span>
          </span>
          <span data-ttu-id="8be66-393">A saída será <see langword="true" /> se o bloqueio for adquirido; caso contrário, a saída será <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-393">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span>
          </span>
          <span data-ttu-id="8be66-394">A saída é definida mesmo se ocorrer uma exceção durante a tentativa de adquirir o bloqueio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-394">The output is set even if an exception occurs during the attempt to acquire the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8be66-395">Tenta, pelo período especificado, obter um bloqueio exclusivo no objeto especificado e define automaticamente um valor que indica se o bloqueio foi realizado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-395">Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8be66-396">Se o valor de `timeout` convertido em milissegundos de parâmetro for igual a -1, esse método é equivalente a <xref:System.Threading.Monitor.Enter%28System.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="8be66-396">If the value of the `timeout` parameter converted to milliseconds equals –1, this method is equivalent to <xref:System.Threading.Monitor.Enter%28System.Object%29>.</span></span> <span data-ttu-id="8be66-397">Se o valor de `timeout` for igual a 0, esse método é equivalente a <xref:System.Threading.Monitor.TryEnter%28System.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="8be66-397">If the value of `timeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%28System.Object%29>.</span></span>  
  
 <span data-ttu-id="8be66-398">Se o bloqueio não foi executado porque ocorreu uma exceção, a variável especificada para o `lockTaken` parâmetro é `false` após o término desse método.</span><span class="sxs-lookup"><span data-stu-id="8be66-398">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="8be66-399">Isso permite que o programa determinar, em todos os casos, se é necessário liberar o bloqueio.</span><span class="sxs-lookup"><span data-stu-id="8be66-399">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8be66-400">Use <xref:System.Threading.Monitor> para bloquear objetos (ou seja, tipos de referência), não os tipos de valor.</span><span class="sxs-lookup"><span data-stu-id="8be66-400">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="8be66-401">Para obter mais informações, consulte o <xref:System.Threading.Monitor> tópico da classe.</span><span class="sxs-lookup"><span data-stu-id="8be66-401">For more information, see the <xref:System.Threading.Monitor> class topic.</span></span>  
  
 <span data-ttu-id="8be66-402">Para garantir que o thread não insere a seção crítica, você deve examinar o valor de `lockTaken` e executar o código na seção crítica somente se seu valor é `true`.</span><span class="sxs-lookup"><span data-stu-id="8be66-402">To ensure that the thread does not enter the critical section, you should examine the value of `lockTaken` and  execute code in the critical section only if its value is `true`.</span></span> <span data-ttu-id="8be66-403">O fragmento de código a seguir mostra o padrão usado para chamar esse método.</span><span class="sxs-lookup"><span data-stu-id="8be66-403">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="8be66-404">Observe que você deve chamar <xref:System.Threading.Monitor.Exit%2A> em um `finally` bloco para garantir que o thread de chamada libera o bloqueio na seção crítica se ocorrer uma exceção.</span><span class="sxs-lookup"><span data-stu-id="8be66-404">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#6)]
 [!code-vb[System.Threading.Monitor.TryEnter#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8be66-405">A entrada para <paramref name="lockTaken" /> é <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-405">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8be66-406">O parâmetro <paramref name="obj" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-406">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="8be66-407">O valor de <paramref name="timeout" /> em milissegundos será negativo e não será igual a <see cref="F:System.Threading.Timeout.Infinite" /> (-1 milissegundo) ou será maior que <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-407">The value of <paramref name="timeout" /> in milliseconds is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (–1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Wait">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8be66-408">Libera o bloqueio de um objeto e bloqueia o thread atual até que ele adquira o bloqueio novamente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-408">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member Wait : obj -&gt; bool" Usage="System.Threading.Monitor.Wait obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="8be66-409">O objeto no qual aguardar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-409">The object on which to wait.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8be66-410">Libera o bloqueio de um objeto e bloqueia o thread atual até que ele adquira o bloqueio novamente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-410">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8be66-411">
            <see langword="true" /> se a chamada foi retornada porque o chamador adquiriu o bloqueio novamente para o objeto especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-411">
              <see langword="true" /> if the call returned because the caller reacquired the lock for the specified object.</span>
          </span>
          <span data-ttu-id="8be66-412">Este método não será retornado se o bloqueio não for adquirido novamente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-412">This method does not return if the lock is not reacquired.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8be66-413">O thread que atualmente detém o bloqueio no objeto especificado invoca esse método para liberar o objeto de modo que outro thread pode acessá-lo.</span><span class="sxs-lookup"><span data-stu-id="8be66-413">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="8be66-414">O chamador é bloqueado enquanto espera para readquirir o bloqueio.</span><span class="sxs-lookup"><span data-stu-id="8be66-414">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="8be66-415">Esse método é chamado quando o chamador precisa aguardar uma alteração de estado que ocorrerão como resultado de operações de outro thread.</span><span class="sxs-lookup"><span data-stu-id="8be66-415">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="8be66-416">Quando um thread chama `Wait`, ele libera o bloqueio no objeto e entra em fila de espera do objeto.</span><span class="sxs-lookup"><span data-stu-id="8be66-416">When a thread calls `Wait`, it releases the lock on the object and enters the object's waiting queue.</span></span> <span data-ttu-id="8be66-417">O próximo thread na fila de pronto do objeto (se houver) adquire o bloqueio e tem uso exclusivo do objeto.</span><span class="sxs-lookup"><span data-stu-id="8be66-417">The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object.</span></span> <span data-ttu-id="8be66-418">Todos os threads que chamam `Wait` permanecem na fila de espera até que eles recebam um sinal de <xref:System.Threading.Monitor.Pulse%2A> ou <xref:System.Threading.Monitor.PulseAll%2A>, enviado pelo proprietário do bloqueio.</span><span class="sxs-lookup"><span data-stu-id="8be66-418">All threads that call `Wait` remain in the waiting queue until they receive a signal from <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>, sent by the owner of the lock.</span></span> <span data-ttu-id="8be66-419">Se `Pulse` é enviada, somente o thread no início da fila de espera é afetado.</span><span class="sxs-lookup"><span data-stu-id="8be66-419">If `Pulse` is sent, only the thread at the head of the waiting queue is affected.</span></span> <span data-ttu-id="8be66-420">Se `PulseAll` é enviado, todos os threads que estão aguardando o objeto são afetados.</span><span class="sxs-lookup"><span data-stu-id="8be66-420">If `PulseAll` is sent, all threads that are waiting for the object are affected.</span></span> <span data-ttu-id="8be66-421">Quando o sinal é recebido, um ou mais threads deixar a fila de espera e insira a fila de pronto.</span><span class="sxs-lookup"><span data-stu-id="8be66-421">When the signal is received, one or more threads leave the waiting queue and enter the ready queue.</span></span> <span data-ttu-id="8be66-422">Um thread na fila de pronto é permitido para readquirir o bloqueio.</span><span class="sxs-lookup"><span data-stu-id="8be66-422">A thread in the ready queue is permitted to reacquire the lock.</span></span>  
  
 <span data-ttu-id="8be66-423">Esse método retorna quando o thread de chamada adquira o bloqueio novamente no objeto.</span><span class="sxs-lookup"><span data-stu-id="8be66-423">This method returns when the calling thread reacquires the lock on the object.</span></span> <span data-ttu-id="8be66-424">Observe que esse método bloqueia indefinidamente se o proprietário do bloqueio não chama `Pulse` ou `PulseAll`.</span><span class="sxs-lookup"><span data-stu-id="8be66-424">Note that this method blocks indefinitely if the holder of the lock does not call `Pulse` or `PulseAll`.</span></span>  
  
 <span data-ttu-id="8be66-425">Executa o chamador `Wait` uma vez, independentemente do número de vezes que <xref:System.Threading.Monitor.Enter%2A> foi invocado para o objeto especificado.</span><span class="sxs-lookup"><span data-stu-id="8be66-425">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="8be66-426">Conceitualmente, o `Wait` método armazena o número de vezes que o chamador invocado `Enter` no objeto e invoca `Exit` quantas vezes for necessário para liberar totalmente o objeto bloqueado.</span><span class="sxs-lookup"><span data-stu-id="8be66-426">Conceptually, the `Wait` method stores the number of times the caller invoked `Enter` on the object and invokes `Exit` as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="8be66-427">O chamador, em seguida, bloqueia enquanto espera para readquirir o objeto.</span><span class="sxs-lookup"><span data-stu-id="8be66-427">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="8be66-428">Quando o chamador adquira o bloqueio novamente, o sistema chama `Enter` quantas vezes for necessário para restaurar o salvo `Enter` contagem para o chamador.</span><span class="sxs-lookup"><span data-stu-id="8be66-428">When the caller reacquires the lock, the system calls `Enter` as many times as necessary to restore the saved `Enter` count for the caller.</span></span> <span data-ttu-id="8be66-429">Chamar `Wait` libera o bloqueio para o objeto especificado; se o chamador seja o proprietário de bloqueios em outros objetos, esses bloqueios não são liberados.</span><span class="sxs-lookup"><span data-stu-id="8be66-429">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
 <span data-ttu-id="8be66-430">Observe que um objeto sincronizado contém várias referências, incluindo uma referência para o thread que atualmente mantém o bloqueio, uma referência para a fila de pronto, que contém os threads que estão prontos para obter o bloqueio, e uma referência à fila de espera, que contém os threads que estão aguardando a notificação de alteração no estado do objeto.</span><span class="sxs-lookup"><span data-stu-id="8be66-430">Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="8be66-431">O <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, e `Wait` métodos devem ser chamados de dentro de um bloco de código sincronizado.</span><span class="sxs-lookup"><span data-stu-id="8be66-431">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="8be66-432">Os comentários para o <xref:System.Threading.Monitor.Pulse%2A> método explicar o que acontece se <xref:System.Threading.Monitor.Pulse%2A> é chamado quando nenhum thread estiver aguardando.</span><span class="sxs-lookup"><span data-stu-id="8be66-432">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8be66-433">O parâmetro <paramref name="obj" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-433">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="8be66-434">O thread de chamada não é proprietário do bloqueio do objeto especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-434">The calling thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">
          <span data-ttu-id="8be66-435">O thread que invoca <see langword="Wait" /> é posteriormente interrompido do estado de espera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-435">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span>
          </span>
          <span data-ttu-id="8be66-436">Isso acontece quando outro thread chama o método <see cref="M:System.Threading.Thread.Interrupt" /> desse thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-436">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member Wait : obj * int -&gt; bool" Usage="System.Threading.Monitor.Wait (obj, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="8be66-437">O objeto no qual aguardar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-437">The object on which to wait.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="8be66-438">O número de milissegundos de espera antes que o thread entre na fila pronta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-438">The number of milliseconds to wait before the thread enters the ready queue.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8be66-439">Libera o bloqueio de um objeto e bloqueia o thread atual até que ele adquira o bloqueio novamente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-439">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
          <span data-ttu-id="8be66-440">Se o intervalo de tempo limite especificado transcorrer, o thread entrará na fila pronta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-440">If the specified time-out interval elapses, the thread enters the ready queue.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8be66-441">
            <see langword="true" /> se o bloqueio foi readquirido antes de ter decorrido o tempo especificado e <see langword="false" /> se o bloqueio foi readquirido depois que o tempo especificado foi decorrido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-441">
              <see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span>
          </span>
          <span data-ttu-id="8be66-442">O método não retorna até que o bloqueio seja readquirido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-442">The method does not return until the lock is reacquired.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8be66-443">Esse método não retorna até que ele reacquires um bloqueio exclusivo no `obj` parâmetro.</span><span class="sxs-lookup"><span data-stu-id="8be66-443">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="8be66-444">O thread que atualmente detém o bloqueio no objeto especificado invoca esse método para liberar o objeto de modo que outro thread pode acessá-lo.</span><span class="sxs-lookup"><span data-stu-id="8be66-444">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="8be66-445">O chamador é bloqueado enquanto espera para readquirir o bloqueio.</span><span class="sxs-lookup"><span data-stu-id="8be66-445">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="8be66-446">Esse método é chamado quando o chamador precisa aguardar uma alteração de estado que ocorrerão como resultado de operações de outro thread.</span><span class="sxs-lookup"><span data-stu-id="8be66-446">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="8be66-447">O tempo limite assegura que o thread atual não bloquear indefinidamente se outro thread libera o bloqueio sem primeiro chamar o <xref:System.Threading.Monitor.Pulse%2A> ou <xref:System.Threading.Monitor.PulseAll%2A> método.</span><span class="sxs-lookup"><span data-stu-id="8be66-447">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="8be66-448">Ele também move o thread para a fila de pronto, ignorando os outros threads à sua frente na fila de espera, para que ele pode readquirir o bloqueio mais cedo.</span><span class="sxs-lookup"><span data-stu-id="8be66-448">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="8be66-449">O thread pode testar o valor de retorno de <xref:System.Threading.Monitor.Wait%2A> método para determinar se ele adquiriu o bloqueio antes do tempo limite novamente. O thread pode avaliar as condições que fez com que ele insira o tempo de espera, e se chamada necessária a <xref:System.Threading.Monitor.Wait%2A> método novamente.</span><span class="sxs-lookup"><span data-stu-id="8be66-449">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="8be66-450">Quando um thread chama `Wait`, ele libera o bloqueio no objeto e entra em fila de espera do objeto.</span><span class="sxs-lookup"><span data-stu-id="8be66-450">When a thread calls `Wait`, it releases the lock on the object and enters the object's waiting queue.</span></span> <span data-ttu-id="8be66-451">O próximo thread na fila de pronto do objeto (se houver) adquire o bloqueio e tem uso exclusivo do objeto.</span><span class="sxs-lookup"><span data-stu-id="8be66-451">The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object.</span></span> <span data-ttu-id="8be66-452">O thread que invocou `Wait` invoca do permanece na fila de espera até que um thread que mantém o bloqueio <xref:System.Threading.Monitor.PulseAll%2A>, ou é a próxima na fila e invoca um thread que mantém o bloqueio <xref:System.Threading.Monitor.Pulse%2A>.</span><span class="sxs-lookup"><span data-stu-id="8be66-452">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="8be66-453">No entanto, se `millisecondsTimeout` decorrido antes que outro thread chama esse objeto <xref:System.Threading.Monitor.Pulse%2A> ou <xref:System.Threading.Monitor.PulseAll%2A> método, o thread original é movido para a fila de pronto e para restabelecer o bloqueio.</span><span class="sxs-lookup"><span data-stu-id="8be66-453">However, if `millisecondsTimeout` elapses before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8be66-454">Se <xref:System.Threading.Timeout.Infinite> for especificado para o `millisecondsTimeout` parâmetro, esse método bloqueia indefinidamente, a menos que o proprietário do bloqueio de chamadas <xref:System.Threading.Monitor.Pulse%2A> ou <xref:System.Threading.Monitor.PulseAll%2A>.</span><span class="sxs-lookup"><span data-stu-id="8be66-454">If <xref:System.Threading.Timeout.Infinite> is specified for the `millisecondsTimeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="8be66-455">Se `millisecondsTimeout` é igual a 0, o thread que chama `Wait` libera o bloqueio e, em seguida, entre na fila pronta imediatamente e para restabelecer o bloqueio.</span><span class="sxs-lookup"><span data-stu-id="8be66-455">If `millisecondsTimeout` equals 0, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="8be66-456">Executa o chamador `Wait` uma vez, independentemente do número de vezes que <xref:System.Threading.Monitor.Enter%2A> foi invocado para o objeto especificado.</span><span class="sxs-lookup"><span data-stu-id="8be66-456">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="8be66-457">Conceitualmente, o `Wait` método armazena o número de vezes que o chamador invocado <xref:System.Threading.Monitor.Enter%2A> no objeto e invoca <xref:System.Threading.Monitor.Exit%2A> quantas vezes for necessário para liberar totalmente o objeto bloqueado.</span><span class="sxs-lookup"><span data-stu-id="8be66-457">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="8be66-458">O chamador, em seguida, bloqueia enquanto espera para readquirir o objeto.</span><span class="sxs-lookup"><span data-stu-id="8be66-458">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="8be66-459">Quando o chamador adquira o bloqueio novamente, o sistema chama <xref:System.Threading.Monitor.Enter%2A> quantas vezes for necessário para restaurar o salvo <xref:System.Threading.Monitor.Enter%2A> contagem para o chamador.</span><span class="sxs-lookup"><span data-stu-id="8be66-459">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="8be66-460">Chamar `Wait` libera o bloqueio para o objeto especificado; se o chamador seja o proprietário de bloqueios em outros objetos, esses bloqueios não são liberados.</span><span class="sxs-lookup"><span data-stu-id="8be66-460">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8be66-461">Um objeto sincronizado contém várias referências, incluindo uma referência para o thread que atualmente mantém o bloqueio, uma referência para a fila de pronto, que contém os threads que estão prontos para obter o bloqueio, e uma referência para a fila de espera, que contém o threads que estão aguardando a notificação de alteração no estado do objeto.</span><span class="sxs-lookup"><span data-stu-id="8be66-461">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="8be66-462">O <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, e `Wait` métodos devem ser chamados de dentro de um bloco de código sincronizado.</span><span class="sxs-lookup"><span data-stu-id="8be66-462">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="8be66-463">Os comentários para o <xref:System.Threading.Monitor.Pulse%2A> método explicar o que acontece se <xref:System.Threading.Monitor.Pulse%2A> é chamado quando nenhum thread estiver aguardando.</span><span class="sxs-lookup"><span data-stu-id="8be66-463">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8be66-464">O parâmetro <paramref name="obj" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-464">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="8be66-465">O thread de chamada não é proprietário do bloqueio do objeto especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-465">The calling thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">
          <span data-ttu-id="8be66-466">O thread que invoca <see langword="Wait" /> é posteriormente interrompido do estado de espera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-466">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span>
          </span>
          <span data-ttu-id="8be66-467">Isso acontece quando outro thread chama o método <see cref="M:System.Threading.Thread.Interrupt" /> desse thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-467">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="8be66-468">O valor do parâmetro <paramref name="millisecondsTimeout" /> é negativo e não é igual a <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-468">The value of the <paramref name="millisecondsTimeout" /> parameter is negative, and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Wait : obj * TimeSpan -&gt; bool" Usage="System.Threading.Monitor.Wait (obj, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="8be66-469">O objeto no qual aguardar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-469">The object on which to wait.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="8be66-470">Um <see cref="T:System.TimeSpan" /> que representa o período de tempo de espera antes que o thread entre na fila pronta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-470">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait before the thread enters the ready queue.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8be66-471">Libera o bloqueio de um objeto e bloqueia o thread atual até que ele adquira o bloqueio novamente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-471">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
          <span data-ttu-id="8be66-472">Se o intervalo de tempo limite especificado transcorrer, o thread entrará na fila pronta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-472">If the specified time-out interval elapses, the thread enters the ready queue.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8be66-473">
            <see langword="true" /> se o bloqueio foi readquirido antes de ter decorrido o tempo especificado e <see langword="false" /> se o bloqueio foi readquirido depois que o tempo especificado foi decorrido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-473">
              <see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span>
          </span>
          <span data-ttu-id="8be66-474">O método não retorna até que o bloqueio seja readquirido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-474">The method does not return until the lock is reacquired.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8be66-475">Esse método não retorna até que ele reacquires um bloqueio exclusivo no `obj` parâmetro.</span><span class="sxs-lookup"><span data-stu-id="8be66-475">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="8be66-476">O thread que atualmente detém o bloqueio no objeto especificado invoca esse método para liberar o objeto de modo que outro thread pode acessá-lo.</span><span class="sxs-lookup"><span data-stu-id="8be66-476">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="8be66-477">O chamador é bloqueado enquanto espera para readquirir o bloqueio.</span><span class="sxs-lookup"><span data-stu-id="8be66-477">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="8be66-478">Esse método é chamado quando o chamador precisa aguardar uma alteração de estado que ocorrerão como resultado de operações de outro thread.</span><span class="sxs-lookup"><span data-stu-id="8be66-478">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="8be66-479">O tempo limite assegura que o thread atual não bloquear indefinidamente se outro thread libera o bloqueio sem primeiro chamar o <xref:System.Threading.Monitor.Pulse%2A> ou <xref:System.Threading.Monitor.PulseAll%2A> método.</span><span class="sxs-lookup"><span data-stu-id="8be66-479">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="8be66-480">Ele também move o thread para a fila de pronto, ignorando os outros threads à sua frente na fila de espera, para que ele pode readquirir o bloqueio mais cedo.</span><span class="sxs-lookup"><span data-stu-id="8be66-480">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="8be66-481">O thread pode testar o valor de retorno de <xref:System.Threading.Monitor.Wait%2A> método para determinar se ele adquiriu o bloqueio antes do tempo limite novamente. O thread pode avaliar as condições que fez com que ele insira o tempo de espera, e se chamada necessária a <xref:System.Threading.Monitor.Wait%2A> método novamente.</span><span class="sxs-lookup"><span data-stu-id="8be66-481">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="8be66-482">Quando um thread chama `Wait`, ele libera o bloqueio no objeto e entra em fila de espera do objeto.</span><span class="sxs-lookup"><span data-stu-id="8be66-482">When a thread calls `Wait`, it releases the lock on the object and enters the object's waiting queue.</span></span> <span data-ttu-id="8be66-483">O próximo thread na fila de pronto do objeto (se houver) adquire o bloqueio e tem uso exclusivo do objeto.</span><span class="sxs-lookup"><span data-stu-id="8be66-483">The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object.</span></span> <span data-ttu-id="8be66-484">O thread que invocou `Wait` invoca do permanece na fila de espera até que um thread que mantém o bloqueio <xref:System.Threading.Monitor.PulseAll%2A>, ou é a próxima na fila e invoca um thread que mantém o bloqueio <xref:System.Threading.Monitor.Pulse%2A>.</span><span class="sxs-lookup"><span data-stu-id="8be66-484">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="8be66-485">No entanto, se `timeout` decorrido antes que outro thread chama esse objeto <xref:System.Threading.Monitor.Pulse%2A> ou <xref:System.Threading.Monitor.PulseAll%2A> método, o thread original é movido para a fila de pronto e para restabelecer o bloqueio.</span><span class="sxs-lookup"><span data-stu-id="8be66-485">However, if `timeout` elapses before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8be66-486">Se um <xref:System.TimeSpan> que representa-1 milissegundo é especificado para o `timeout` parâmetro, esse método bloqueia indefinidamente, a menos que o proprietário do bloqueio de chamadas <xref:System.Threading.Monitor.Pulse%2A> ou <xref:System.Threading.Monitor.PulseAll%2A>.</span><span class="sxs-lookup"><span data-stu-id="8be66-486">If a <xref:System.TimeSpan> representing –1 millisecond is specified for the `timeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="8be66-487">Se `timeout` é 0 milissegundos, o thread que chama `Wait` libera o bloqueio e, em seguida, entre na fila pronta imediatamente e para restabelecer o bloqueio.</span><span class="sxs-lookup"><span data-stu-id="8be66-487">If `timeout` is 0 milliseconds, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="8be66-488">Executa o chamador `Wait` uma vez, independentemente do número de vezes que <xref:System.Threading.Monitor.Enter%2A> foi invocado para o objeto especificado.</span><span class="sxs-lookup"><span data-stu-id="8be66-488">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="8be66-489">Conceitualmente, o `Wait` método armazena o número de vezes que o chamador invocado <xref:System.Threading.Monitor.Enter%2A> no objeto e invoca <xref:System.Threading.Monitor.Exit%2A> quantas vezes for necessário para liberar totalmente o objeto bloqueado.</span><span class="sxs-lookup"><span data-stu-id="8be66-489">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="8be66-490">O chamador, em seguida, bloqueia enquanto espera para readquirir o objeto.</span><span class="sxs-lookup"><span data-stu-id="8be66-490">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="8be66-491">Quando o chamador adquira o bloqueio novamente, o sistema chama <xref:System.Threading.Monitor.Enter%2A> quantas vezes for necessário para restaurar o salvo <xref:System.Threading.Monitor.Enter%2A> contagem para o chamador.</span><span class="sxs-lookup"><span data-stu-id="8be66-491">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="8be66-492">Chamar `Wait` libera o bloqueio para o objeto especificado; se o chamador seja o proprietário de bloqueios em outros objetos, esses bloqueios não são liberados.</span><span class="sxs-lookup"><span data-stu-id="8be66-492">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8be66-493">Um objeto sincronizado contém várias referências, incluindo uma referência para o thread que atualmente mantém o bloqueio, uma referência para a fila de pronto, que contém os threads que estão prontos para obter o bloqueio, e uma referência para a fila de espera, que contém o threads que estão aguardando a notificação de alteração no estado do objeto.</span><span class="sxs-lookup"><span data-stu-id="8be66-493">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="8be66-494">O <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, e `Wait` métodos devem ser chamados de dentro de um bloco de código sincronizado.</span><span class="sxs-lookup"><span data-stu-id="8be66-494">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="8be66-495">Os comentários para o <xref:System.Threading.Monitor.Pulse%2A> método explicar o que acontece se <xref:System.Threading.Monitor.Pulse%2A> é chamado quando nenhum thread estiver aguardando.</span><span class="sxs-lookup"><span data-stu-id="8be66-495">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8be66-496">O parâmetro <paramref name="obj" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-496">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="8be66-497">O thread de chamada não é proprietário do bloqueio do objeto especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-497">The calling thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">
          <span data-ttu-id="8be66-498">O thread que invoca <see langword="Wait" /> é posteriormente interrompido do estado de espera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-498">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span>
          </span>
          <span data-ttu-id="8be66-499">Isso acontece quando outro thread chama o método <see cref="M:System.Threading.Thread.Interrupt" /> desse thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-499">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="8be66-500">O valor do parâmetro <paramref name="timeout" /> em milissegundos é negativo e não representa <see cref="F:System.Threading.Timeout.Infinite" /> (-1 milissegundos) ou é maior que <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-500">The value of the <paramref name="timeout" /> parameter in milliseconds is negative and does not represent <see cref="F:System.Threading.Timeout.Infinite" /> (–1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member Wait : obj * int * bool -&gt; bool" Usage="System.Threading.Monitor.Wait (obj, millisecondsTimeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="8be66-501">O objeto no qual aguardar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-501">The object on which to wait.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="8be66-502">O número de milissegundos de espera antes que o thread entre na fila pronta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-502">The number of milliseconds to wait before the thread enters the ready queue.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="8be66-503">
            <see langword="true" /> para sair e readquirir o domínio de sincronização para o contexto (se estiver em um contexto sincronizado) antes do tempo de espera; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-503">
              <see langword="true" /> to exit and reacquire the synchronization domain for the context (if in a synchronized context) before the wait; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8be66-504">Libera o bloqueio de um objeto e bloqueia o thread atual até que ele adquira o bloqueio novamente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-504">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
          <span data-ttu-id="8be66-505">Se o intervalo de tempo limite especificado transcorrer, o thread entrará na fila pronta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-505">If the specified time-out interval elapses, the thread enters the ready queue.</span>
          </span>
          <span data-ttu-id="8be66-506">Esse método também especifica se o domínio de sincronização para o contexto (se estiver em um contexto sincronizado) é encerrado antes do tempo de espera e readquirido posteriormente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-506">This method also specifies whether the synchronization domain for the context (if in a synchronized context) is exited before the wait and reacquired afterward.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8be66-507">
            <see langword="true" /> se o bloqueio foi readquirido antes de ter decorrido o tempo especificado e <see langword="false" /> se o bloqueio foi readquirido depois que o tempo especificado foi decorrido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-507">
              <see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span>
          </span>
          <span data-ttu-id="8be66-508">O método não retorna até que o bloqueio seja readquirido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-508">The method does not return until the lock is reacquired.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8be66-509">Esse método não retorna até que ele reacquires um bloqueio exclusivo no `obj` parâmetro.</span><span class="sxs-lookup"><span data-stu-id="8be66-509">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="8be66-510">O thread que atualmente detém o bloqueio no objeto especificado invoca esse método para liberar o objeto de modo que outro thread pode acessá-lo.</span><span class="sxs-lookup"><span data-stu-id="8be66-510">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="8be66-511">O chamador é bloqueado enquanto espera para readquirir o bloqueio.</span><span class="sxs-lookup"><span data-stu-id="8be66-511">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="8be66-512">Esse método é chamado quando o chamador precisa aguardar uma alteração de estado que ocorrerão como resultado de operações de outro thread.</span><span class="sxs-lookup"><span data-stu-id="8be66-512">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="8be66-513">O tempo limite assegura que o thread atual não bloquear indefinidamente se outro thread libera o bloqueio sem primeiro chamar o <xref:System.Threading.Monitor.Pulse%2A> ou <xref:System.Threading.Monitor.PulseAll%2A> método.</span><span class="sxs-lookup"><span data-stu-id="8be66-513">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="8be66-514">Ele também move o thread para a fila de pronto, ignorando os outros threads à sua frente na fila de espera, para que ele pode readquirir o bloqueio mais cedo.</span><span class="sxs-lookup"><span data-stu-id="8be66-514">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="8be66-515">O thread pode testar o valor de retorno de <xref:System.Threading.Monitor.Wait%2A> método para determinar se ele adquiriu o bloqueio antes do tempo limite novamente. O thread pode avaliar as condições que fez com que ele insira o tempo de espera, e se chamada necessária a <xref:System.Threading.Monitor.Wait%2A> método novamente.</span><span class="sxs-lookup"><span data-stu-id="8be66-515">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="8be66-516">Quando um thread chama `Wait`, ele libera o bloqueio e entre na fila de espera.</span><span class="sxs-lookup"><span data-stu-id="8be66-516">When a thread calls `Wait`, it releases the lock and enters the waiting queue.</span></span> <span data-ttu-id="8be66-517">Neste ponto, o próximo thread na fila de pronto (se houver) é permitido para assumir o controle do bloqueio.</span><span class="sxs-lookup"><span data-stu-id="8be66-517">At this point, the next thread in the ready queue (if there is one) is allowed to take control of the lock.</span></span> <span data-ttu-id="8be66-518">O thread que invocou `Wait` invoca do permanece na fila de espera até que um thread que mantém o bloqueio <xref:System.Threading.Monitor.PulseAll%2A>, ou é a próxima na fila e invoca um thread que mantém o bloqueio <xref:System.Threading.Monitor.Pulse%2A>.</span><span class="sxs-lookup"><span data-stu-id="8be66-518">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="8be66-519">No entanto, se `millisecondsTimeout` decorrido antes que outro thread chama esse objeto <xref:System.Threading.Monitor.Pulse%2A> ou <xref:System.Threading.Monitor.PulseAll%2A> método, o thread original é movido para a fila de pronto e para restabelecer o bloqueio.</span><span class="sxs-lookup"><span data-stu-id="8be66-519">However, if `millisecondsTimeout` elapses before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8be66-520">Se <xref:System.Threading.Timeout.Infinite> for especificado para o `millisecondsTimeout` parâmetro, esse método bloqueia indefinidamente, a menos que o proprietário do bloqueio de chamadas <xref:System.Threading.Monitor.Pulse%2A> ou <xref:System.Threading.Monitor.PulseAll%2A>.</span><span class="sxs-lookup"><span data-stu-id="8be66-520">If <xref:System.Threading.Timeout.Infinite> is specified for the `millisecondsTimeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="8be66-521">Se `millisecondsTimeout` é igual a 0, o thread que chama `Wait` libera o bloqueio e, em seguida, entre na fila pronta imediatamente e para restabelecer o bloqueio.</span><span class="sxs-lookup"><span data-stu-id="8be66-521">If `millisecondsTimeout` equals 0, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="8be66-522">Executa o chamador `Wait` uma vez, independentemente do número de vezes que <xref:System.Threading.Monitor.Enter%2A> foi invocado para o objeto especificado.</span><span class="sxs-lookup"><span data-stu-id="8be66-522">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="8be66-523">Conceitualmente, o `Wait` método armazena o número de vezes que o chamador invocado <xref:System.Threading.Monitor.Enter%2A> no objeto e invoca <xref:System.Threading.Monitor.Exit%2A> quantas vezes for necessário para liberar totalmente o objeto bloqueado.</span><span class="sxs-lookup"><span data-stu-id="8be66-523">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="8be66-524">O chamador, em seguida, bloqueia enquanto espera para readquirir o objeto.</span><span class="sxs-lookup"><span data-stu-id="8be66-524">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="8be66-525">Quando o chamador adquira o bloqueio novamente, o sistema chama <xref:System.Threading.Monitor.Enter%2A> quantas vezes for necessário para restaurar o salvo <xref:System.Threading.Monitor.Enter%2A> contagem para o chamador.</span><span class="sxs-lookup"><span data-stu-id="8be66-525">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="8be66-526">Chamar `Wait` libera o bloqueio para o objeto especificado; se o chamador seja o proprietário de bloqueios em outros objetos, esses bloqueios não são liberados.</span><span class="sxs-lookup"><span data-stu-id="8be66-526">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8be66-527">Um objeto sincronizado contém várias referências, incluindo uma referência para o thread que atualmente mantém o bloqueio, uma referência para a fila de pronto, que contém os threads que estão prontos para obter o bloqueio, e uma referência para a fila de espera, que contém o threads que estão aguardando a notificação de alteração no estado do objeto.</span><span class="sxs-lookup"><span data-stu-id="8be66-527">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="8be66-528">O <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, e `Wait` métodos devem ser chamados de dentro de um bloco de código sincronizado.</span><span class="sxs-lookup"><span data-stu-id="8be66-528">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="8be66-529">Os comentários para o <xref:System.Threading.Monitor.Pulse%2A> método explicar o que acontece se <xref:System.Threading.Monitor.Pulse%2A> é chamado quando nenhum thread estiver aguardando.</span><span class="sxs-lookup"><span data-stu-id="8be66-529">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="8be66-530">Anotações na saída do contexto</span><span class="sxs-lookup"><span data-stu-id="8be66-530">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="8be66-531">O`exitContext` parâmetro não tem nenhum efeito a menos que o <xref:System.Threading.Monitor.Wait%2A> método é chamado de dentro de um contexto de gerenciado não padrão.</span><span class="sxs-lookup"><span data-stu-id="8be66-531">The`exitContext` parameter has no effect unless the <xref:System.Threading.Monitor.Wait%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="8be66-532">Isso pode acontecer se o thread está dentro de uma chamada para uma instância de uma classe derivada de <xref:System.ContextBoundObject>.</span><span class="sxs-lookup"><span data-stu-id="8be66-532">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="8be66-533">Mesmo se atualmente você estiver executando um método em uma classe que não é derivada de <xref:System.ContextBoundObject>, como <xref:System.String>, você pode estar em um contexto não padrão se um <xref:System.ContextBoundObject> está na sua pilha no domínio do aplicativo atual.</span><span class="sxs-lookup"><span data-stu-id="8be66-533">Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="8be66-534">Quando seu código está em execução em um contexto não padrão, especificando `true` para `exitContext` faz com que o thread sair do contexto gerenciado não padrão (ou seja, a transição para o contexto padrão) antes de executar o <xref:System.Threading.Monitor.Wait%2A> método.</span><span class="sxs-lookup"><span data-stu-id="8be66-534">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.Monitor.Wait%2A> method.</span></span> <span data-ttu-id="8be66-535">Ele retorna para o contexto não padrão original após a chamada para o <xref:System.Threading.Monitor.Wait%2A> método é concluído.</span><span class="sxs-lookup"><span data-stu-id="8be66-535">It returns to the original nondefault context after the call to the <xref:System.Threading.Monitor.Wait%2A> method completes.</span></span>  
  
 <span data-ttu-id="8be66-536">Isso pode ser útil quando a classe de contexto de associação tem o <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> atributo aplicado.</span><span class="sxs-lookup"><span data-stu-id="8be66-536">This can be useful when the context-bound class has the <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> attribute applied.</span></span> <span data-ttu-id="8be66-537">Nesse caso, todas as chamadas para os membros da classe serão sincronizadas automaticamente, e o domínio de sincronização é todo o corpo de código para a classe.</span><span class="sxs-lookup"><span data-stu-id="8be66-537">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="8be66-538">Se o código na pilha de chamadas de um membro chama o <xref:System.Threading.Monitor.Wait%2A> método e especifica `true` para `exitContext`, o thread sai do domínio de sincronização, permitindo que um thread que está bloqueado em uma chamada para qualquer membro do objeto para continuar.</span><span class="sxs-lookup"><span data-stu-id="8be66-538">If code in the call stack of a member calls the <xref:System.Threading.Monitor.Wait%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="8be66-539">Quando o <xref:System.Threading.Monitor.Wait%2A> método retorna, o thread que fez a chamada deve esperar para inserir novamente o domínio de sincronização.</span><span class="sxs-lookup"><span data-stu-id="8be66-539">When the <xref:System.Threading.Monitor.Wait%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8be66-540">O parâmetro <paramref name="obj" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-540">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="8be66-541">
            <see langword="Wait" /> não é invocado de dentro de um bloco de código sincronizado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-541">
              <see langword="Wait" /> is not invoked from within a synchronized block of code.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">
          <span data-ttu-id="8be66-542">O thread que invoca <see langword="Wait" /> é posteriormente interrompido do estado de espera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-542">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span>
          </span>
          <span data-ttu-id="8be66-543">Isso acontece quando outro thread chama o método <see cref="M:System.Threading.Thread.Interrupt" /> desse thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-543">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="8be66-544">O valor do parâmetro <paramref name="millisecondsTimeout" /> é negativo e não é igual a <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-544">The value of the <paramref name="millisecondsTimeout" /> parameter is negative, and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member Wait : obj * TimeSpan * bool -&gt; bool" Usage="System.Threading.Monitor.Wait (obj, timeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="8be66-545">O objeto no qual aguardar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-545">The object on which to wait.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="8be66-546">Um <see cref="T:System.TimeSpan" /> que representa o período de tempo de espera antes que o thread entre na fila pronta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-546">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait before the thread enters the ready queue.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="8be66-547">
            <see langword="true" /> para sair e readquirir o domínio de sincronização para o contexto (se estiver em um contexto sincronizado) antes do tempo de espera; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-547">
              <see langword="true" /> to exit and reacquire the synchronization domain for the context (if in a synchronized context) before the wait; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8be66-548">Libera o bloqueio de um objeto e bloqueia o thread atual até que ele adquira o bloqueio novamente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-548">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
          <span data-ttu-id="8be66-549">Se o intervalo de tempo limite especificado transcorrer, o thread entrará na fila pronta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-549">If the specified time-out interval elapses, the thread enters the ready queue.</span>
          </span>
          <span data-ttu-id="8be66-550">Opcionalmente, encerra o domínio de sincronização para o contexto sincronizado antes do tempo de espera e, depois disso, readquire o domínio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-550">Optionally exits the synchronization domain for the synchronized context before the wait and reacquires the domain afterward.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8be66-551">
            <see langword="true" /> se o bloqueio foi readquirido antes de ter decorrido o tempo especificado e <see langword="false" /> se o bloqueio foi readquirido depois que o tempo especificado foi decorrido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-551">
              <see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span>
          </span>
          <span data-ttu-id="8be66-552">O método não retorna até que o bloqueio seja readquirido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-552">The method does not return until the lock is reacquired.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8be66-553">Esse método não retorna até que ele reacquires um bloqueio exclusivo no `obj` parâmetro.</span><span class="sxs-lookup"><span data-stu-id="8be66-553">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="8be66-554">O thread que atualmente detém o bloqueio no objeto especificado invoca esse método para liberar o objeto de modo que outro thread pode acessá-lo.</span><span class="sxs-lookup"><span data-stu-id="8be66-554">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="8be66-555">O chamador é bloqueado enquanto espera para readquirir o bloqueio.</span><span class="sxs-lookup"><span data-stu-id="8be66-555">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="8be66-556">Esse método é chamado quando o chamador precisa aguardar uma alteração de estado que ocorrerão como resultado de operações de outro thread.</span><span class="sxs-lookup"><span data-stu-id="8be66-556">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="8be66-557">O tempo limite assegura que o thread atual não bloquear indefinidamente se outro thread libera o bloqueio sem primeiro chamar o <xref:System.Threading.Monitor.Pulse%2A> ou <xref:System.Threading.Monitor.PulseAll%2A> método.</span><span class="sxs-lookup"><span data-stu-id="8be66-557">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="8be66-558">Ele também move o thread para a fila de pronto, ignorando os outros threads à sua frente na fila de espera, para que ele pode readquirir o bloqueio mais cedo.</span><span class="sxs-lookup"><span data-stu-id="8be66-558">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="8be66-559">O thread pode testar o valor de retorno de <xref:System.Threading.Monitor.Wait%2A> método para determinar se ele adquiriu o bloqueio antes do tempo limite novamente. O thread pode avaliar as condições que fez com que ele insira o tempo de espera, e se chamada necessária a <xref:System.Threading.Monitor.Wait%2A> método novamente.</span><span class="sxs-lookup"><span data-stu-id="8be66-559">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="8be66-560">Quando um thread chama `Wait`, ele libera o bloqueio e entre na fila de espera.</span><span class="sxs-lookup"><span data-stu-id="8be66-560">When a thread calls `Wait`, it releases the lock and enters the waiting queue.</span></span> <span data-ttu-id="8be66-561">Neste ponto, o próximo thread na fila de pronto (se houver) é permitido para assumir o controle do bloqueio.</span><span class="sxs-lookup"><span data-stu-id="8be66-561">At this point, the next thread in the ready queue (if there is one) is allowed to take control of the lock.</span></span> <span data-ttu-id="8be66-562">O thread que invocou `Wait` invoca do permanece na fila de espera até que um thread que mantém o bloqueio <xref:System.Threading.Monitor.PulseAll%2A>, ou é a próxima na fila e invoca um thread que mantém o bloqueio <xref:System.Threading.Monitor.Pulse%2A>.</span><span class="sxs-lookup"><span data-stu-id="8be66-562">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="8be66-563">No entanto, se `timeout` milissegundos decorridos antes que outro thread chama esse objeto <xref:System.Threading.Monitor.Pulse%2A> ou <xref:System.Threading.Monitor.PulseAll%2A> método, o thread original é movido para a fila de pronto e para restabelecer o bloqueio.</span><span class="sxs-lookup"><span data-stu-id="8be66-563">However, if `timeout` milliseconds elapse before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8be66-564">Se um <xref:System.TimeSpan> que representa-1 milissegundo é especificado para o `timeout` parâmetro, esse método bloqueia indefinidamente, a menos que o proprietário do bloqueio de chamadas <xref:System.Threading.Monitor.Pulse%2A> ou <xref:System.Threading.Monitor.PulseAll%2A>.</span><span class="sxs-lookup"><span data-stu-id="8be66-564">If a <xref:System.TimeSpan> representing -1 millisecond is specified for the `timeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="8be66-565">Se `timeout` é 0 milissegundos, o thread que chama `Wait` libera o bloqueio e, em seguida, entre na fila pronta imediatamente e para restabelecer o bloqueio.</span><span class="sxs-lookup"><span data-stu-id="8be66-565">If `timeout` is 0 milliseconds, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="8be66-566">Executa o chamador `Wait` uma vez, independentemente do número de vezes que <xref:System.Threading.Monitor.Enter%2A> foi invocado para o objeto especificado.</span><span class="sxs-lookup"><span data-stu-id="8be66-566">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="8be66-567">Conceitualmente, o `Wait` método armazena o número de vezes que o chamador invocado <xref:System.Threading.Monitor.Enter%2A> no objeto e invoca <xref:System.Threading.Monitor.Exit%2A> quantas vezes for necessário para liberar totalmente o objeto bloqueado.</span><span class="sxs-lookup"><span data-stu-id="8be66-567">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="8be66-568">O chamador, em seguida, bloqueia enquanto espera para readquirir o objeto.</span><span class="sxs-lookup"><span data-stu-id="8be66-568">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="8be66-569">Quando o chamador adquira o bloqueio novamente, o sistema chama <xref:System.Threading.Monitor.Enter%2A> quantas vezes for necessário para restaurar o salvo <xref:System.Threading.Monitor.Enter%2A> contagem para o chamador.</span><span class="sxs-lookup"><span data-stu-id="8be66-569">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="8be66-570">Chamar `Wait` libera o bloqueio para o objeto especificado; se o chamador seja o proprietário de bloqueios em outros objetos, esses bloqueios não são liberados.</span><span class="sxs-lookup"><span data-stu-id="8be66-570">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8be66-571">Um objeto sincronizado contém várias referências, incluindo uma referência para o thread que atualmente mantém o bloqueio, uma referência para a fila de pronto, que contém os threads que estão prontos para obter o bloqueio, e uma referência para a fila de espera, que contém o threads que estão aguardando a notificação de alteração no estado do objeto.</span><span class="sxs-lookup"><span data-stu-id="8be66-571">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="8be66-572">O <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, e `Wait` métodos devem ser chamados de dentro de um bloco de código sincronizado.</span><span class="sxs-lookup"><span data-stu-id="8be66-572">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="8be66-573">Os comentários para o <xref:System.Threading.Monitor.Pulse%2A> método explicar o que acontece se <xref:System.Threading.Monitor.Pulse%2A> é chamado quando nenhum thread estiver aguardando.</span><span class="sxs-lookup"><span data-stu-id="8be66-573">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="8be66-574">Anotações na saída do contexto</span><span class="sxs-lookup"><span data-stu-id="8be66-574">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="8be66-575">O`exitContext` parâmetro não tem nenhum efeito a menos que o <xref:System.Threading.Monitor.Wait%2A> método é chamado de dentro de um contexto de gerenciado não padrão.</span><span class="sxs-lookup"><span data-stu-id="8be66-575">The`exitContext` parameter has no effect unless the <xref:System.Threading.Monitor.Wait%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="8be66-576">Isso pode acontecer se o thread está dentro de uma chamada para uma instância de uma classe derivada de <xref:System.ContextBoundObject>.</span><span class="sxs-lookup"><span data-stu-id="8be66-576">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="8be66-577">Mesmo se atualmente você estiver executando um método em uma classe que não é derivada de <xref:System.ContextBoundObject>, como <xref:System.String>, você pode estar em um contexto não padrão se um <xref:System.ContextBoundObject> está na sua pilha no domínio do aplicativo atual.</span><span class="sxs-lookup"><span data-stu-id="8be66-577">Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="8be66-578">Quando seu código está em execução em um contexto não padrão, especificando `true` para `exitContext` faz com que o thread sair do contexto gerenciado não padrão (ou seja, a transição para o contexto padrão) antes de executar o <xref:System.Threading.Monitor.Wait%2A> método.</span><span class="sxs-lookup"><span data-stu-id="8be66-578">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.Monitor.Wait%2A> method.</span></span> <span data-ttu-id="8be66-579">Ele retorna para o contexto não padrão original após a chamada para o <xref:System.Threading.Monitor.Wait%2A> método é concluído.</span><span class="sxs-lookup"><span data-stu-id="8be66-579">It returns to the original nondefault context after the call to the <xref:System.Threading.Monitor.Wait%2A> method completes.</span></span>  
  
 <span data-ttu-id="8be66-580">Isso pode ser útil quando a classe de contexto de associação tem o <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> atributo aplicado.</span><span class="sxs-lookup"><span data-stu-id="8be66-580">This can be useful when the context-bound class has the <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> attribute applied.</span></span> <span data-ttu-id="8be66-581">Nesse caso, todas as chamadas para os membros da classe serão sincronizadas automaticamente, e o domínio de sincronização é todo o corpo de código para a classe.</span><span class="sxs-lookup"><span data-stu-id="8be66-581">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="8be66-582">Se o código na pilha de chamadas de um membro chama o <xref:System.Threading.Monitor.Wait%2A> método e especifica `true` para `exitContext`, o thread sai do domínio de sincronização, permitindo que um thread que está bloqueado em uma chamada para qualquer membro do objeto para continuar.</span><span class="sxs-lookup"><span data-stu-id="8be66-582">If code in the call stack of a member calls the <xref:System.Threading.Monitor.Wait%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="8be66-583">Quando o <xref:System.Threading.Monitor.Wait%2A> método retorna, o thread que fez a chamada deve esperar para inserir novamente o domínio de sincronização.</span><span class="sxs-lookup"><span data-stu-id="8be66-583">When the <xref:System.Threading.Monitor.Wait%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8be66-584">O parâmetro <paramref name="obj" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-584">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="8be66-585">
            <see langword="Wait" /> não é invocado de dentro de um bloco de código sincronizado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-585">
              <see langword="Wait" /> is not invoked from within a synchronized block of code.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">
          <span data-ttu-id="8be66-586">O thread que invoca Wait é interrompido posteriormente do estado de espera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-586">The thread that invokes Wait is later interrupted from the waiting state.</span>
          </span>
          <span data-ttu-id="8be66-587">Isso acontece quando outro thread chama o método <see cref="M:System.Threading.Thread.Interrupt" /> desse thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-587">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="8be66-588">O parâmetro <paramref name="timeout" /> é negativo e não representa <see cref="F:System.Threading.Timeout.Infinite" /> (-1 milissegundo) ou é maior que <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8be66-588">The <paramref name="timeout" /> parameter is negative and does not represent <see cref="F:System.Threading.Timeout.Infinite" /> (–1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
  </Members>
</Type>