<Type Name="ThreadAbortException" FullName="System.Threading.ThreadAbortException">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1b2a2f2697e92949b7f739964f5f510bbcbe3e0a" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30527170" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ThreadAbortException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit ThreadAbortException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ThreadAbortException" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ThreadAbortException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class ThreadAbortException sealed : SystemException" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A exceção que é gerada quando uma chamada é feita para o método <see cref="M:System.Threading.Thread.Abort(System.Object)" />. Essa classe não pode ser herdada.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando é feita uma chamada para o <xref:System.Threading.Thread.Abort%2A> método destruir um thread, o common language runtime lança um <xref:System.Threading.ThreadAbortException>. <xref:System.Threading.ThreadAbortException> é uma exceção especial que pode ser capturada, mas ele automaticamente será gerado novamente no final do `catch` bloco. Quando essa exceção é gerada, o tempo de execução executa todos os `finally` blocos antes de encerrar o thread. Porque o thread pode fazer uma computação não associada a `finally` blocos ou chamada <xref:System.Threading.Thread.ResetAbort%2A?displayProperty=nameWithType> para cancelar a anulação, não há nenhuma garantia de que o thread nunca será finalizada. Se você quiser esperar até que o thread anulado terminou, você pode chamar o <xref:System.Threading.Thread.Join%2A?displayProperty=nameWithType> método. <xref:System.Threading.Thread.Join%2A> é uma chamada de bloqueio que não retorna até que o thread, na verdade, interrompe a execução.  
  
> [!NOTE]
>  Quando o common language runtime (CLR) para o plano de fundo threadsafter encerrar todos os threads de primeiro plano em um executável gerenciado, não use <xref:System.Threading.Thread.Abort%2A?displayProperty=nameWithType>. Portanto, você não pode usar <xref:System.Threading.ThreadAbortException> para detectar quando estão sendo encerrados threads em segundo plano pelo CLR.  
  
 <xref:System.Threading.ThreadAbortException> usa o HRESULT COR_E_THREADABORTED, que tem o valor 0x80131530.  
  
> [!NOTE]
>  O valor da herdadas <xref:System.Exception.Data%2A> propriedade é sempre `null`.  
  
   
  
## Examples  
 O exemplo a seguir demonstra como anular um thread. O thread que recebe o `ThreadAbortException` usa o <xref:System.Threading.Thread.ResetAbort%2A> método para cancelar a solicitação de anulação e continuar a executar.  
  
 [!code-cpp[ThreadAbEx#1](~/samples/snippets/cpp/VS_Snippets_CLR/ThreadAbEx/CPP/threadabex.cpp#1)]
 [!code-csharp[ThreadAbEx#1](~/samples/snippets/csharp/VS_Snippets_CLR/ThreadAbEx/CS/threadabex.cs#1)]
 [!code-vb[ThreadAbEx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ThreadAbEx/VB/threadabex.vb#1)]  
  
 Esse código gera a seguinte saída:  
  
```  
Thread - working.  
Main - aborting my thread.  
Thread - caught ThreadAbortException - resetting.  
Exception message: Thread was being aborted.  
Thread - still alive and working.  
Thread - finished working.  
Main ending.  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.Thread" />
    <altmember cref="M:System.Threading.Thread.Abort(System.Object)" />
  </Docs>
  <Members>
    <Member MemberName="ExceptionState">
      <MemberSignature Language="C#" Value="public object ExceptionState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ExceptionState" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ThreadAbortException.ExceptionState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExceptionState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ExceptionState { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um objeto que contém informações específicas ao aplicativo relacionadas à anulação de thread.</summary>
        <value>Um objeto que contém informações específicas do aplicativo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O objeto retornado por essa propriedade é especificado por meio de `stateInfo` parâmetro o <xref:System.Threading.Thread.Abort%2A> método. O conteúdo exato e o uso desse objeto é aplicativo definido; ele é normalmente usado para transmitir informações significativas para o thread anulado.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como passar informações para um thread que está sendo anulado.  
  
 [!code-cpp[System.Threading.Thread.Abort2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Abort2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Abort2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Abort2/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Abort2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Abort2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Thread.CurrentThread" />
        <altmember cref="M:System.Threading.Thread.Abort(System.Object)" />
      </Docs>
    </Member>
  </Members>
</Type>