<Type Name="SpinLock" FullName="System.Threading.SpinLock">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="10f26e6ab91a3ed621e096451edb0d7cae5bcc16" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48595404" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct SpinLock" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit SpinLock extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Threading.SpinLock" />
  <TypeSignature Language="VB.NET" Value="Public Structure SpinLock" />
  <TypeSignature Language="C++ CLI" Value="public value class SpinLock" />
  <TypeSignature Language="F#" Value="type SpinLock = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("IsHeld = {IsHeld}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Threading.SpinLock/SystemThreading_SpinLockDebugView))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="7f98f-101">Fornece um primitivo de bloqueio de exclusão mútua onde um thread que tenta adquirir o bloqueio aguarda em um loop, fazendo verificações repetidamente até que o bloqueio esteja disponível.</span>
      <span class="sxs-lookup">
        <span data-stu-id="7f98f-101">Provides a mutual exclusion lock primitive where a thread trying to acquire the lock waits in a loop repeatedly checking until the lock becomes available.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f98f-102">Para obter um exemplo de como usar um bloqueio de rotação, consulte [como: usar SpinLock para sincronização de nível inferior](~/docs/standard/threading/how-to-use-spinlock-for-low-level-synchronization.md).</span><span class="sxs-lookup"><span data-stu-id="7f98f-102">For an example of how to use a Spin Lock, see [How to: Use SpinLock for Low-Level Synchronization](~/docs/standard/threading/how-to-use-spinlock-for-low-level-synchronization.md).</span></span>  
  
 <span data-ttu-id="7f98f-103">Bloqueios de rotação podem ser usados para bloqueios de nível folha em que a alocação de objeto implícita, usando um <xref:System.Threading.Monitor>, tamanho ou devido à pressão de coleta de lixo, é muito caro.</span><span class="sxs-lookup"><span data-stu-id="7f98f-103">Spin locks can be used for leaf-level locks where the object allocation implied by using a <xref:System.Threading.Monitor>, in size or due to garbage collection pressure, is overly expensive.</span></span> <span data-ttu-id="7f98f-104">Um bloqueio de rotação pode ser útil para evitar o bloqueio; No entanto, se você espera que uma quantidade significativa de bloqueio, você provavelmente não deve usar bloqueios de rotação devido à rotação excessiva.</span><span class="sxs-lookup"><span data-stu-id="7f98f-104">A spin lock can be useful to avoid blocking; however, if you expect a significant amount of blocking, you should probably not use spin locks due to excessive spinning.</span></span> <span data-ttu-id="7f98f-105">Rotação pode ser útil quando os bloqueios são refinadas e grandes em número (por exemplo, um bloqueio por nó em uma lista vinculada) e também quando os tempos de espera de bloqueio sempre são extremamente curtos.</span><span class="sxs-lookup"><span data-stu-id="7f98f-105">Spinning can be beneficial when locks are fine-grained and large in number (for example, a lock per node in a linked list) and also when lock hold-times are always extremely short.</span></span> <span data-ttu-id="7f98f-106">Em geral, mantendo um bloqueio de rotação, um Evite qualquer uma das seguintes ações:</span><span class="sxs-lookup"><span data-stu-id="7f98f-106">In general, while holding a spin lock, one should avoid any of these actions:</span></span>  
  
-   <span data-ttu-id="7f98f-107">bloqueando,</span><span class="sxs-lookup"><span data-stu-id="7f98f-107">blocking,</span></span>  
  
-   <span data-ttu-id="7f98f-108">chamar qualquer coisa que por si só pode bloquear,</span><span class="sxs-lookup"><span data-stu-id="7f98f-108">calling anything that itself may block,</span></span>  
  
-   <span data-ttu-id="7f98f-109">mantendo mais de um bloqueio de rotação ao mesmo tempo,</span><span class="sxs-lookup"><span data-stu-id="7f98f-109">holding more than one spin lock at once,</span></span>  
  
-   <span data-ttu-id="7f98f-110">tornando dinamicamente expedida chamadas (interface e virtuais),</span><span class="sxs-lookup"><span data-stu-id="7f98f-110">making dynamically dispatched calls (interface and virtuals),</span></span>  
  
-   <span data-ttu-id="7f98f-111">tornando estaticamente expedidas chamadas em qualquer código de um não possui, ou</span><span class="sxs-lookup"><span data-stu-id="7f98f-111">making statically dispatched calls into any code one doesn't own, or</span></span>  
  
-   <span data-ttu-id="7f98f-112">alocação de memória.</span><span class="sxs-lookup"><span data-stu-id="7f98f-112">allocating memory.</span></span>  
  
 <span data-ttu-id="7f98f-113"><xref:System.Threading.SpinLock> deve ser usado somente depois de ter sido determinado que fazer então melhorará o desempenho de um aplicativo.</span><span class="sxs-lookup"><span data-stu-id="7f98f-113"><xref:System.Threading.SpinLock> should only be used after you have been determined that doing so will improve an application's performance.</span></span> <span data-ttu-id="7f98f-114">Também é importante observar que <xref:System.Threading.SpinLock> é um tipo de valor, por motivos de desempenho.</span><span class="sxs-lookup"><span data-stu-id="7f98f-114">It is also important to note that <xref:System.Threading.SpinLock> is a value type, for performance reasons.</span></span> <span data-ttu-id="7f98f-115">Por esse motivo, você deve ser muito cuidado para não copiar acidentalmente um <xref:System.Threading.SpinLock> da instância, como as duas instâncias (o original e a cópia), em seguida, seria completamente independentes um do outro, que provavelmente poderia levar a comportamento de erro do aplicativo.</span><span class="sxs-lookup"><span data-stu-id="7f98f-115">For this reason, you must be very careful not to accidentally copy a <xref:System.Threading.SpinLock> instance, as the two instances (the original and the copy) would then be completely independent of one another, which would likely lead to erroneous behavior of the application.</span></span> <span data-ttu-id="7f98f-116">Se um <xref:System.Threading.SpinLock> instância deve ser passada ao redor, ele deve ser passado por referência em vez de por valor.</span><span class="sxs-lookup"><span data-stu-id="7f98f-116">If a <xref:System.Threading.SpinLock> instance must be passed around, it should be passed by reference rather than by value.</span></span>  
  
 <span data-ttu-id="7f98f-117">Não armazene <xref:System.Threading.SpinLock> instâncias em campos somente leitura.</span><span class="sxs-lookup"><span data-stu-id="7f98f-117">Do not store <xref:System.Threading.SpinLock> instances in readonly fields.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f98f-118">O exemplo a seguir mostra como usar um <xref:System.Threading.SpinLock>:</span><span class="sxs-lookup"><span data-stu-id="7f98f-118">The following example shows how to use a <xref:System.Threading.SpinLock>:</span></span>  
  
 [!code-csharp[System.Threading.SpinLock#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.spinlock/cs/spinlock.cs#01)]
 [!code-vb[System.Threading.SpinLock#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.spinlock/vb/spinlock.vb#01)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="7f98f-119">Todos os membros de <see cref="T:System.Threading.SpinLock" /> são thread-safe e podem ser usados simultaneamente de vários threads.</span>
      <span class="sxs-lookup">
        <span data-stu-id="7f98f-119">All members of <see cref="T:System.Threading.SpinLock" /> are thread-safe and may be used from multiple threads concurrently.</span>
      </span>
    </threadsafe>
    <related type="Article" href="http://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
      <span data-ttu-id="7f98f-120">SpinLock</span>
      <span class="sxs-lookup">
        <span data-stu-id="7f98f-120">SpinLock</span>
      </span>
    </related>
    <related type="Article" href="http://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
      <span data-ttu-id="7f98f-121">Como: usar SpinWait e SpinLock</span>
      <span class="sxs-lookup">
        <span data-stu-id="7f98f-121">How to: Use SpinWait and SpinLock</span>
      </span>
    </related>
    <related type="Article" href="http://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
      <span data-ttu-id="7f98f-122">Como habilitar o modo de controle de thread em SpinLock</span>
      <span class="sxs-lookup">
        <span data-stu-id="7f98f-122">How to: Enable Thread-Tracking Mode in SpinLock</span>
      </span>
    </related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpinLock (bool enableThreadOwnerTracking);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool enableThreadOwnerTracking) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (enableThreadOwnerTracking As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpinLock(bool enableThreadOwnerTracking);" />
      <MemberSignature Language="F#" Value="new System.Threading.SpinLock : bool -&gt; System.Threading.SpinLock" Usage="new System.Threading.SpinLock enableThreadOwnerTracking" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="enableThreadOwnerTracking" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="enableThreadOwnerTracking">
          <span data-ttu-id="7f98f-123">Indica se IDs de threads serão capturadas e usadas para fins de depuração.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-123">Whether to capture and use thread IDs for debugging purposes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f98f-124">Inicializa uma nova instância da estrutura <see cref="T:System.Threading.SpinLock" /> com a opção para acompanhar IDs de thread para melhorar a depuração.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-124">Initializes a new instance of the <see cref="T:System.Threading.SpinLock" /> structure with the option to track thread IDs to improve debugging.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f98f-125">O construtor padrão para <xref:System.Threading.SpinLock> faixas de propriedade do thread.</span><span class="sxs-lookup"><span data-stu-id="7f98f-125">The default constructor for <xref:System.Threading.SpinLock> tracks thread ownership.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f98f-126">O exemplo a seguir demonstra como um SpinLock pode ser usado.</span><span class="sxs-lookup"><span data-stu-id="7f98f-126">The following example demonstrates how a SpinLock may be used.</span></span>  
  
```csharp  
// C#  
public class MyType  
{  
    private SpinLock _spinLock = new SpinLock();  
  
    public void DoWork()  
    {  
        bool lockTaken = false;   
        try  
        {  
           _spinLock.Enter(ref lockTaken);  
           // do work here protected by the lock  
        }  
        finally  
        {  
            if (lockTaken) _spinLock.Exit();  
        }  
    }  
}  
```  
  
```vb  
' Visual Basic  
  
Class MyType  
   Private _spinLock As New SpinLock()  
  
   Public Sub DoWork()  
      Dim lockTaken As Boolean = False  
      Try  
         _spinLock.Enter(lockTaken)  
         ' do work here protected by the lock  
      Finally  
         If lockTaken Then _spinLock.Exit()  
      End Try  
   End Sub  
End Class  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
          <span data-ttu-id="7f98f-127">SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-127">SpinLock</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
          <span data-ttu-id="7f98f-128">Como usar SpinLock para sincronização de baixo nível</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-128">How to: Use SpinLock for Low-Level Synchronization</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
          <span data-ttu-id="7f98f-129">Como habilitar o modo de controle de thread em SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-129">How to: Enable Thread-Tracking Mode in SpinLock</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public void Enter (ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Enter(bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.Enter(System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Enter (ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Enter(bool % lockTaken);" />
      <MemberSignature Language="F#" Value="member this.Enter :  -&gt; unit" Usage="spinLock.Enter lockTaken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="lockTaken">
          <span data-ttu-id="7f98f-130">True se o bloqueio tiver sido adquirido; caso contrário, false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-130">True if the lock is acquired; otherwise, false.</span>
          </span>
          <span data-ttu-id="7f98f-131">
            <c>lockTaken</c> deve ser inicializado como false antes de chamar esse método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-131">
              <c>lockTaken</c> must be initialized to false prior to calling this method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f98f-132">Adquire o bloqueio de maneira confiável, de forma que mesmo se uma exceção ocorrer dentro da chamada de método, <paramref name="lockTaken" /> poderá ser examinado com confiança para determinar se o bloqueio foi adquirido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-132">Acquires the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f98f-133"><xref:System.Threading.SpinLock> é um bloqueio não reentrante, que significa que, se um thread mantém o bloqueio, ele não tem permissão para entrar no bloqueio novamente.</span><span class="sxs-lookup"><span data-stu-id="7f98f-133"><xref:System.Threading.SpinLock> is a non-reentrant lock, meaning that if a thread holds the lock, it is not allowed to enter the lock again.</span></span> <span data-ttu-id="7f98f-134">Se o acompanhamento de propriedade de thread está habilitada (se ele está habilitado está disponível por meio de <xref:System.Threading.SpinLock.IsThreadOwnerTrackingEnabled%2A>), uma exceção será gerada quando um thread tenta reintroduzir um bloqueio que ele já retinha.</span><span class="sxs-lookup"><span data-stu-id="7f98f-134">If thread ownership tracking is enabled (whether it's enabled is available through <xref:System.Threading.SpinLock.IsThreadOwnerTrackingEnabled%2A>), an exception will be thrown when a thread tries to re-enter a lock it already holds.</span></span> <span data-ttu-id="7f98f-135">No entanto, se o acompanhamento de propriedade de thread estiver desabilitada, a tentativa de inserir um bloqueio mantido já resultará em deadlock.</span><span class="sxs-lookup"><span data-stu-id="7f98f-135">However, if thread ownership tracking is disabled, attempting to enter a lock already held will result in deadlock.</span></span>  
  
 <span data-ttu-id="7f98f-136">Se você chamar <xref:System.Threading.SpinLock.Exit%2A> sem primeiro ter chamado <xref:System.Threading.SpinLock.Enter%2A> o estado interno do <xref:System.Threading.SpinLock> podem ficar corrompidos.</span><span class="sxs-lookup"><span data-stu-id="7f98f-136">If you call <xref:System.Threading.SpinLock.Exit%2A> without having first called <xref:System.Threading.SpinLock.Enter%2A> the internal state of the <xref:System.Threading.SpinLock> can become corrupted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7f98f-137">O argumento <paramref name="lockTaken" /> deve ser inicializado como false antes de chamar Enter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-137">The <paramref name="lockTaken" /> argument must be initialized to false prior to calling Enter.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.LockRecursionException">
          <span data-ttu-id="7f98f-138">O acompanhamento de propriedade de thread está habilitado e o thread atual há adquiriu este bloqueio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-138">Thread ownership tracking is enabled, and the current thread has already acquired this lock.</span>
          </span>
        </exception>
        <related type="Article" href="http://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
          <span data-ttu-id="7f98f-139">SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-139">SpinLock</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
          <span data-ttu-id="7f98f-140">Como usar SpinLock para sincronização de baixo nível</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-140">How to: Use SpinLock for Low-Level Synchronization</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
          <span data-ttu-id="7f98f-141">Como habilitar o modo de controle de thread em SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-141">How to: Enable Thread-Tracking Mode in SpinLock</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Exit">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7f98f-142">Libera o bloqueio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-142">Releases the lock.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Exit">
      <MemberSignature Language="C#" Value="public void Exit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Exit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.Exit" />
      <MemberSignature Language="VB.NET" Value="Public Sub Exit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Exit();" />
      <MemberSignature Language="F#" Value="member this.Exit : unit -&gt; unit" Usage="spinLock.Exit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7f98f-143">Libera o bloqueio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-143">Releases the lock.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f98f-144">A sobrecarga de padrão de <xref:System.Threading.SpinLock.Exit%2A> fornece o mesmo comportamento como se chamar <xref:System.Threading.SpinLock.Exit%2A> usando true como o argumento.</span><span class="sxs-lookup"><span data-stu-id="7f98f-144">The default overload of <xref:System.Threading.SpinLock.Exit%2A> provides the same behavior as if calling <xref:System.Threading.SpinLock.Exit%2A> using true as the argument.</span></span>  
  
 <span data-ttu-id="7f98f-145">Se você chamar <xref:System.Threading.SpinLock.Exit%2A> sem primeiro ter chamado <xref:System.Threading.SpinLock.Enter%2A> o estado interno do <xref:System.Threading.SpinLock> podem ficar corrompidos.</span><span class="sxs-lookup"><span data-stu-id="7f98f-145">If you call <xref:System.Threading.SpinLock.Exit%2A> without having first called <xref:System.Threading.SpinLock.Enter%2A> the internal state of the <xref:System.Threading.SpinLock> can become corrupted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="7f98f-146">O acompanhamento de propriedade de thread está habilitado e o thread atual não é o proprietário deste bloqueio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-146">Thread ownership tracking is enabled, and the current thread is not the owner of this lock.</span>
          </span>
        </exception>
        <related type="Article" href="http://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
          <span data-ttu-id="7f98f-147">SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-147">SpinLock</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
          <span data-ttu-id="7f98f-148">Como usar SpinLock para sincronização de baixo nível</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-148">How to: Use SpinLock for Low-Level Synchronization</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
          <span data-ttu-id="7f98f-149">Como habilitar o modo de controle de thread em SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-149">How to: Enable Thread-Tracking Mode in SpinLock</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Exit">
      <MemberSignature Language="C#" Value="public void Exit (bool useMemoryBarrier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Exit(bool useMemoryBarrier) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.Exit(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Exit (useMemoryBarrier As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Exit(bool useMemoryBarrier);" />
      <MemberSignature Language="F#" Value="member this.Exit : bool -&gt; unit" Usage="spinLock.Exit useMemoryBarrier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="useMemoryBarrier" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="useMemoryBarrier">
          <span data-ttu-id="7f98f-150">Um valor booliano que indica se um limite de memória deve ser emitido para publicar imediatamente a operação de saída em outros threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-150">A Boolean value that indicates whether a memory fence should be issued in order to immediately publish the exit operation to other threads.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f98f-151">Libera o bloqueio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-151">Releases the lock.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f98f-152">Chamando <xref:System.Threading.SpinLock.Exit%2A> com o `useMemoryBarrier` argumento definido como true irá melhorar a imparcialidade do bloqueio às custas de alguns de desempenho.</span><span class="sxs-lookup"><span data-stu-id="7f98f-152">Calling <xref:System.Threading.SpinLock.Exit%2A> with the `useMemoryBarrier` argument set to true will improve the fairness of the lock at the expense of some performance.</span></span> <span data-ttu-id="7f98f-153">O padrão <xref:System.Threading.SpinLock.Exit%2A> sobrecarga se comporta como se especificar true para `useMemoryBarrier`.</span><span class="sxs-lookup"><span data-stu-id="7f98f-153">The default <xref:System.Threading.SpinLock.Exit%2A> overload behaves as if specifying true for `useMemoryBarrier`.</span></span>  
  
 <span data-ttu-id="7f98f-154">Se você chamar <xref:System.Threading.SpinLock.Exit%2A> sem primeiro ter chamado <xref:System.Threading.SpinLock.Enter%2A> o estado interno do <xref:System.Threading.SpinLock> podem ficar corrompidos.</span><span class="sxs-lookup"><span data-stu-id="7f98f-154">If you call <xref:System.Threading.SpinLock.Exit%2A> without having first called <xref:System.Threading.SpinLock.Enter%2A> the internal state of the <xref:System.Threading.SpinLock> can become corrupted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="7f98f-155">O acompanhamento de propriedade de thread está habilitado e o thread atual não é o proprietário deste bloqueio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-155">Thread ownership tracking is enabled, and the current thread is not the owner of this lock.</span>
          </span>
        </exception>
        <related type="Article" href="http://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
          <span data-ttu-id="7f98f-156">SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-156">SpinLock</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
          <span data-ttu-id="7f98f-157">Como usar SpinLock para sincronização de baixo nível</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-157">How to: Use SpinLock for Low-Level Synchronization</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
          <span data-ttu-id="7f98f-158">Como habilitar o modo de controle de thread em SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-158">How to: Enable Thread-Tracking Mode in SpinLock</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="IsHeld">
      <MemberSignature Language="C#" Value="public bool IsHeld { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHeld" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SpinLock.IsHeld" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsHeld As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHeld { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsHeld : bool" Usage="System.Threading.SpinLock.IsHeld" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7f98f-159">Especifica se o bloqueio é mantido atualmente por algum thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-159">Gets whether the lock is currently held by any thread.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7f98f-160">True se o bloqueio é mantido atualmente por qualquer thread. Caso contrário, false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-160">true if the lock is currently held by any thread; otherwise false.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
          <span data-ttu-id="7f98f-161">SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-161">SpinLock</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
          <span data-ttu-id="7f98f-162">Como usar SpinLock para sincronização de baixo nível</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-162">How to: Use SpinLock for Low-Level Synchronization</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
          <span data-ttu-id="7f98f-163">Como habilitar o modo de controle de thread em SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-163">How to: Enable Thread-Tracking Mode in SpinLock</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="IsHeldByCurrentThread">
      <MemberSignature Language="C#" Value="public bool IsHeldByCurrentThread { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHeldByCurrentThread" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SpinLock.IsHeldByCurrentThread" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsHeldByCurrentThread As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHeldByCurrentThread { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsHeldByCurrentThread : bool" Usage="System.Threading.SpinLock.IsHeldByCurrentThread" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7f98f-164">Especifica se o bloqueio é mantido pelo thread atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-164">Gets whether the lock is held by the current thread.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7f98f-165">True se o bloqueio é mantido pelo thread atual; Caso contrário, false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-165">true if the lock is held by the current thread; otherwise false.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f98f-166">Se o bloqueio foi inicializado para acompanhar os threads de proprietário, isso retornará se o bloqueio é adquirido pelo thread atual.</span><span class="sxs-lookup"><span data-stu-id="7f98f-166">If the lock was initialized to track owner threads, this will return whether the lock is acquired by the current thread.</span></span> <span data-ttu-id="7f98f-167">Não é válido para usar essa propriedade quando o bloqueio foi inicializado para não rastrear a propriedade de thread.</span><span class="sxs-lookup"><span data-stu-id="7f98f-167">It is invalid to use this property when the lock was initialized to not track thread ownership.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="7f98f-168">O acompanhamento de propriedade de thread está desabilitado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-168">Thread ownership tracking is disabled.</span>
          </span>
        </exception>
        <related type="Article" href="http://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
          <span data-ttu-id="7f98f-169">SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-169">SpinLock</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
          <span data-ttu-id="7f98f-170">Como usar SpinLock para sincronização de baixo nível</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-170">How to: Use SpinLock for Low-Level Synchronization</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
          <span data-ttu-id="7f98f-171">Como habilitar o modo de controle de thread em SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-171">How to: Enable Thread-Tracking Mode in SpinLock</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="IsThreadOwnerTrackingEnabled">
      <MemberSignature Language="C#" Value="public bool IsThreadOwnerTrackingEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsThreadOwnerTrackingEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SpinLock.IsThreadOwnerTrackingEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsThreadOwnerTrackingEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsThreadOwnerTrackingEnabled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsThreadOwnerTrackingEnabled : bool" Usage="System.Threading.SpinLock.IsThreadOwnerTrackingEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7f98f-172">Especifica se o acompanhamento de propriedade de thread está habilitado para esta instância.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-172">Gets whether thread ownership tracking is enabled for this instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7f98f-173">True se o acompanhamento de propriedade de thread está habilitada para esta instância; Caso contrário, false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-173">true if thread ownership tracking is enabled for this instance; otherwise false.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
          <span data-ttu-id="7f98f-174">SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-174">SpinLock</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
          <span data-ttu-id="7f98f-175">Como usar SpinLock para sincronização de baixo nível</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-175">How to: Use SpinLock for Low-Level Synchronization</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
          <span data-ttu-id="7f98f-176">Como habilitar o modo de controle de thread em SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-176">How to: Enable Thread-Tracking Mode in SpinLock</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryEnter">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7f98f-177">Tenta adquirir o bloqueio de maneira confiável, de forma que mesmo se uma exceção ocorrer dentro da chamada de método, <paramref name="lockTaken" /> poderá ser examinado com confiança para determinar se o bloqueio foi adquirido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-177">Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</span>
          </span>
        </summary>
        <related type="Article" href="http://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
          <span data-ttu-id="7f98f-178">SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-178">SpinLock</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
          <span data-ttu-id="7f98f-179">Como usar SpinLock para sincronização de baixo nível</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-179">How to: Use SpinLock for Low-Level Synchronization</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
          <span data-ttu-id="7f98f-180">Como habilitar o modo de controle de thread em SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-180">How to: Enable Thread-Tracking Mode in SpinLock</span>
          </span>
        </related>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public void TryEnter (ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TryEnter(bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.TryEnter(System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TryEnter (ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TryEnter(bool % lockTaken);" />
      <MemberSignature Language="F#" Value="member this.TryEnter :  -&gt; unit" Usage="spinLock.TryEnter lockTaken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="lockTaken">
          <span data-ttu-id="7f98f-181">True se o bloqueio tiver sido adquirido; caso contrário, false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-181">True if the lock is acquired; otherwise, false.</span>
          </span>
          <span data-ttu-id="7f98f-182">
            <c>lockTaken</c> deve ser inicializado como false antes de chamar esse método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-182">
              <c>lockTaken</c> must be initialized to false prior to calling this method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f98f-183">Tenta adquirir o bloqueio de maneira confiável, de forma que mesmo se uma exceção ocorrer dentro da chamada de método, <paramref name="lockTaken" /> poderá ser examinado com confiança para determinar se o bloqueio foi adquirido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-183">Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f98f-184">Ao contrário de <xref:System.Threading.SpinLock.Enter%2A>, TryEnter não será bloqueada aguardando o bloqueio esteja disponível.</span><span class="sxs-lookup"><span data-stu-id="7f98f-184">Unlike <xref:System.Threading.SpinLock.Enter%2A>, TryEnter will not block waiting for the lock to be available.</span></span> <span data-ttu-id="7f98f-185">Se o bloqueio não está disponível quando é chamado de TryEnter, ela retornará imediatamente sem qualquer girando ainda mais.</span><span class="sxs-lookup"><span data-stu-id="7f98f-185">If the lock is not available when TryEnter is called, it will return immediately without any further spinning.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7f98f-186">O argumento <paramref name="lockTaken" /> deve ser inicializado como false antes de chamar TryEnter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-186">The <paramref name="lockTaken" /> argument must be initialized to false prior to calling TryEnter.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.LockRecursionException">
          <span data-ttu-id="7f98f-187">O acompanhamento de propriedade de thread está habilitado e o thread atual há adquiriu este bloqueio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-187">Thread ownership tracking is enabled, and the current thread has already acquired this lock.</span>
          </span>
        </exception>
        <related type="Article" href="http://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
          <span data-ttu-id="7f98f-188">SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-188">SpinLock</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
          <span data-ttu-id="7f98f-189">Como usar SpinLock para sincronização de baixo nível</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-189">How to: Use SpinLock for Low-Level Synchronization</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
          <span data-ttu-id="7f98f-190">Como habilitar o modo de controle de thread em SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-190">How to: Enable Thread-Tracking Mode in SpinLock</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public void TryEnter (int millisecondsTimeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TryEnter(int32 millisecondsTimeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.TryEnter(System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TryEnter (millisecondsTimeout As Integer, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TryEnter(int millisecondsTimeout, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="member this.TryEnter : int *  -&gt; unit" Usage="spinLock.TryEnter (millisecondsTimeout, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="7f98f-191">O número de milissegundos para aguardar ou <see cref="F:System.Threading.Timeout.Infinite" /> (- 1) para aguardar indefinidamente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-191">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <param name="lockTaken">
          <span data-ttu-id="7f98f-192">True se o bloqueio tiver sido adquirido; caso contrário, false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-192">True if the lock is acquired; otherwise, false.</span>
          </span>
          <span data-ttu-id="7f98f-193">
            <c>lockTaken</c> deve ser inicializado como false antes de chamar esse método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-193">
              <c>lockTaken</c> must be initialized to false prior to calling this method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f98f-194">Tenta adquirir o bloqueio de maneira confiável, de forma que mesmo se uma exceção ocorrer dentro da chamada de método, <paramref name="lockTaken" /> poderá ser examinado com confiança para determinar se o bloqueio foi adquirido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-194">Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f98f-195">Ao contrário de <xref:System.Threading.SpinLock.Enter%2A>, TryEnter não bloqueará indefinidamente, aguardando o bloqueio esteja disponível.</span><span class="sxs-lookup"><span data-stu-id="7f98f-195">Unlike <xref:System.Threading.SpinLock.Enter%2A>, TryEnter will not block indefinitely waiting for the lock to be available.</span></span> <span data-ttu-id="7f98f-196">Ele será bloqueado até que o bloqueio está disponível ou até o `millisecondsTimeout` expirou.</span><span class="sxs-lookup"><span data-stu-id="7f98f-196">It will block until either the lock is available or until the `millisecondsTimeout` has expired.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7f98f-197">
            <paramref name="millisecondsTimeout" /> é um número negativo diferente de -1, que representa um tempo limite infinito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-197">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7f98f-198">O argumento <paramref name="lockTaken" /> deve ser inicializado como false antes de chamar TryEnter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-198">The <paramref name="lockTaken" /> argument must be initialized to false prior to calling TryEnter.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.LockRecursionException">
          <span data-ttu-id="7f98f-199">O acompanhamento de propriedade de thread está habilitado e o thread atual há adquiriu este bloqueio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-199">Thread ownership tracking is enabled, and the current thread has already acquired this lock.</span>
          </span>
        </exception>
        <related type="Article" href="http://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
          <span data-ttu-id="7f98f-200">SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-200">SpinLock</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
          <span data-ttu-id="7f98f-201">Como usar SpinLock para sincronização de baixo nível</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-201">How to: Use SpinLock for Low-Level Synchronization</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
          <span data-ttu-id="7f98f-202">Como habilitar o modo de controle de thread em SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-202">How to: Enable Thread-Tracking Mode in SpinLock</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public void TryEnter (TimeSpan timeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TryEnter(valuetype System.TimeSpan timeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.TryEnter(System.TimeSpan,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TryEnter (timeout As TimeSpan, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TryEnter(TimeSpan timeout, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="member this.TryEnter : TimeSpan *  -&gt; unit" Usage="spinLock.TryEnter (timeout, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="7f98f-203">Um <see cref="T:System.TimeSpan" /> que representa o número de milissegundos para aguardar ou um <see cref="T:System.TimeSpan" /> que representa -1 milissegundos para aguardar indefinidamente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-203">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <param name="lockTaken">
          <span data-ttu-id="7f98f-204">True se o bloqueio tiver sido adquirido; caso contrário, false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-204">True if the lock is acquired; otherwise, false.</span>
          </span>
          <span data-ttu-id="7f98f-205">
            <c>lockTaken</c> deve ser inicializado como false antes de chamar esse método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-205">
              <c>lockTaken</c> must be initialized to false prior to calling this method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f98f-206">Tenta adquirir o bloqueio de maneira confiável, de forma que mesmo se uma exceção ocorrer dentro da chamada de método, <paramref name="lockTaken" /> poderá ser examinado com confiança para determinar se o bloqueio foi adquirido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-206">Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f98f-207">Ao contrário de <xref:System.Threading.SpinLock.Enter%2A>, TryEnter não bloqueará indefinidamente, aguardando o bloqueio esteja disponível.</span><span class="sxs-lookup"><span data-stu-id="7f98f-207">Unlike <xref:System.Threading.SpinLock.Enter%2A>, TryEnter will not block indefinitely waiting for the lock to be available.</span></span> <span data-ttu-id="7f98f-208">Ele será bloqueado até que o bloqueio está disponível ou até o `timeout` expirou.</span><span class="sxs-lookup"><span data-stu-id="7f98f-208">It will block until either the lock is available or until the `timeout` has expired.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7f98f-209">
            <paramref name="timeout" /> é um número negativo diferente de -1 milissegundo, que representa um tempo limite infinito ou o tempo limite é maior que <see cref="F:System.Int32.MaxValue" /> milissegundos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-209">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7f98f-210">O argumento <paramref name="lockTaken" /> deve ser inicializado como false antes de chamar TryEnter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-210">The <paramref name="lockTaken" /> argument must be initialized to false prior to calling TryEnter.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.LockRecursionException">
          <span data-ttu-id="7f98f-211">O acompanhamento de propriedade de thread está habilitado e o thread atual há adquiriu este bloqueio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-211">Thread ownership tracking is enabled, and the current thread has already acquired this lock.</span>
          </span>
        </exception>
        <related type="Article" href="http://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
          <span data-ttu-id="7f98f-212">SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-212">SpinLock</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
          <span data-ttu-id="7f98f-213">Como usar SpinLock para sincronização de baixo nível</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-213">How to: Use SpinLock for Low-Level Synchronization</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
          <span data-ttu-id="7f98f-214">Como habilitar o modo de controle de thread em SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f98f-214">How to: Enable Thread-Tracking Mode in SpinLock</span>
          </span>
        </related>
      </Docs>
    </Member>
  </Members>
</Type>