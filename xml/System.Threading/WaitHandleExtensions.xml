<Type Name="WaitHandleExtensions" FullName="System.Threading.WaitHandleExtensions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c6e7b7df9df016a036c5ed42becd0ee4f3dee0bf" /><Meta Name="ms.sourcegitcommit" Value="3f21796619d6e69ad383c958cc013ce44c0678de" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="02/11/2019" /><Meta Name="ms.locfileid" Value="56057564" /></Metadata><TypeSignature Language="C#" Value="public static class WaitHandleExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit WaitHandleExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.WaitHandleExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module WaitHandleExtensions" />
  <TypeSignature Language="C++ CLI" Value="public ref class WaitHandleExtensions abstract sealed" />
  <TypeSignature Language="F#" Value="type WaitHandleExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Handles</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="e42ec-101">Fornece métodos de conveniência para trabalhar com um identificador seguro para um identificador de espera.</span><span class="sxs-lookup"><span data-stu-id="e42ec-101">Provides convenience methods to for working with a safe handle for a wait handle.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e42ec-102">O <xref:System.Threading.WaitHandleExtensions> classe inclui dois métodos de extensão que permitem que você criar um identificador seguro para um identificador de espera de e para recuperar o identificador de sistema operacional nativo de um identificador seguro.</span><span class="sxs-lookup"><span data-stu-id="e42ec-102">The <xref:System.Threading.WaitHandleExtensions> class includes two extension methods that allow you to create a safe handle for a wait handle and to retrieve the native operating system handle from a safe handle.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetSafeWaitHandle">
      <MemberSignature Language="C#" Value="public static Microsoft.Win32.SafeHandles.SafeWaitHandle GetSafeWaitHandle (this System.Threading.WaitHandle waitHandle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Win32.SafeHandles.SafeWaitHandle GetSafeWaitHandle(class System.Threading.WaitHandle waitHandle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandleExtensions.GetSafeWaitHandle(System.Threading.WaitHandle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Win32::SafeHandles::SafeWaitHandle ^ GetSafeWaitHandle(System::Threading::WaitHandle ^ waitHandle);" />
      <MemberSignature Language="F#" Value="static member GetSafeWaitHandle : System.Threading.WaitHandle -&gt; Microsoft.Win32.SafeHandles.SafeWaitHandle" Usage="System.Threading.WaitHandleExtensions.GetSafeWaitHandle waitHandle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.SafeHandles.SafeWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandle" Type="System.Threading.WaitHandle" RefType="this" />
      </Parameters>
      <Docs>
        <param name="waitHandle"><span data-ttu-id="e42ec-103">Um identificador nativo do sistema operacional.</span><span class="sxs-lookup"><span data-stu-id="e42ec-103">A native operating system handle.</span></span></param>
        <summary><span data-ttu-id="e42ec-104">Obtém o identificador seguro para um identificador de espera nativo do sistema operacional.</span><span class="sxs-lookup"><span data-stu-id="e42ec-104">Gets the safe handle for a native operating system wait handle.</span></span></summary>
        <returns><span data-ttu-id="e42ec-105">Identificador de espera segura que encapsula o identificador de espera do sistema operacional nativo.</span><span class="sxs-lookup"><span data-stu-id="e42ec-105">The safe wait handle that wraps the native operating system wait handle.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e42ec-106"><xref:System.Threading.WaitHandleExtensions.GetSafeWaitHandle%2A> é um método de extensão que é equivalente a recuperar o valor da <xref:System.Threading.WaitHandle.SafeWaitHandle%2A?displayProperty=nameWithType> propriedade.</span><span class="sxs-lookup"><span data-stu-id="e42ec-106"><xref:System.Threading.WaitHandleExtensions.GetSafeWaitHandle%2A> is an extension method that is equivalent to retrieving the value of the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A?displayProperty=nameWithType> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e42ec-107"><paramref name="waitHandle" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e42ec-107"><paramref name="waitHandle" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SetSafeWaitHandle">
      <MemberSignature Language="C#" Value="public static void SetSafeWaitHandle (this System.Threading.WaitHandle waitHandle, Microsoft.Win32.SafeHandles.SafeWaitHandle value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetSafeWaitHandle(class System.Threading.WaitHandle waitHandle, class Microsoft.Win32.SafeHandles.SafeWaitHandle value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandleExtensions.SetSafeWaitHandle(System.Threading.WaitHandle,Microsoft.Win32.SafeHandles.SafeWaitHandle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetSafeWaitHandle(System::Threading::WaitHandle ^ waitHandle, Microsoft::Win32::SafeHandles::SafeWaitHandle ^ value);" />
      <MemberSignature Language="F#" Value="static member SetSafeWaitHandle : System.Threading.WaitHandle * Microsoft.Win32.SafeHandles.SafeWaitHandle -&gt; unit" Usage="System.Threading.WaitHandleExtensions.SetSafeWaitHandle (waitHandle, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandle" Type="System.Threading.WaitHandle" RefType="this" />
        <Parameter Name="value" Type="Microsoft.Win32.SafeHandles.SafeWaitHandle" />
      </Parameters>
      <Docs>
        <param name="waitHandle"><span data-ttu-id="e42ec-108">Um identificador de espera que encapsula um objeto específico do sistema operacional que espera o acesso exclusivo a um recurso compartilhado.</span><span class="sxs-lookup"><span data-stu-id="e42ec-108">A wait handle that encapsulates an operating system-specific object that waits for exclusive access to a shared resource.</span></span></param>
        <param name="value"><span data-ttu-id="e42ec-109">O identificador seguro para encapsular o identificador do sistema operacional.</span><span class="sxs-lookup"><span data-stu-id="e42ec-109">The safe handle to wrap the operating system handle.</span></span></param>
        <summary><span data-ttu-id="e42ec-110">Define um identificador seguro para um identificador de espera do sistema operacional nativo.</span><span class="sxs-lookup"><span data-stu-id="e42ec-110">Sets a safe handle for a native operating system wait handle.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e42ec-111"><xref:System.Threading.WaitHandleExtensions.SetSafeWaitHandle%2A> é um método de extensão que é equivalente ao atribuir um valor para o <xref:System.Threading.WaitHandle.SafeWaitHandle%2A?displayProperty=nameWithType> propriedade.</span><span class="sxs-lookup"><span data-stu-id="e42ec-111"><xref:System.Threading.WaitHandleExtensions.SetSafeWaitHandle%2A> is an extension method that is equivalent to assigning a value to the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A?displayProperty=nameWithType> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e42ec-112"><paramref name="waitHandle" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e42ec-112"><paramref name="waitHandle" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>