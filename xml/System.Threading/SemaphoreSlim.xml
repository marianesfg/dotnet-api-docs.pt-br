<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="SemaphoreSlim.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5dee33601bd502ad844bb3b40648b3e6cd325dcfb.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dee33601bd502ad844bb3b40648b3e6cd325dcfb</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.SemaphoreSlim">
          <source>Represents a lightweight alternative to <ph id="ph1">&lt;see cref="T:System.Threading.Semaphore" /&gt;</ph> that limits the number of threads that can access a resource or pool of resources concurrently.</source>
          <target state="translated">Representa uma alternativa leve para <ph id="ph1">&lt;see cref="T:System.Threading.Semaphore" /&gt;</ph> que limita o número de threads que podem acessar um recurso ou um pool de recursos simultaneamente.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>Semaphores are of two types: local semaphores and named system semaphores.</source>
          <target state="translated">São sinais de dois tipos: locais semáforos e semáforos sistema nomeado.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>The former is local to an app.</source>
          <target state="translated">O primeiro é local para um aplicativo.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>The latter is visible throughout the operating system and is suitable for inter-process synchronization.</source>
          <target state="translated">O último é visível em todo o sistema operacional e é adequado para a sincronização entre processos.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>The <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> is a lightweight alternative to the <ph id="ph2">&lt;xref:System.Threading.Semaphore&gt;</ph> class that doesn't use Windows kernel semaphores.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> é uma alternativa leve para a <ph id="ph2">&lt;xref:System.Threading.Semaphore&gt;</ph> classe que não usa semáforos de kernel do Windows.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>Unlike the <ph id="ph1">&lt;xref:System.Threading.Semaphore&gt;</ph> class, the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> class doesn't support named system semaphores.</source>
          <target state="translated">Ao contrário de <ph id="ph1">&lt;xref:System.Threading.Semaphore&gt;</ph> classe, o <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> classe não oferece suporte para o sistema nomeado semáforos.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>You can use it as a local semaphore only.</source>
          <target state="translated">Você pode usá-lo como um semáforo local apenas.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>The <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> class is the recommended semaphore for synchronization within a single app.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> classe é o sinal recomendado para a sincronização em um único aplicativo.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>A lightweight semaphore controls access to a pool of resources that is local to your application.</source>
          <target state="translated">Um semáforo leve controla o acesso a um pool de recursos que é local para seu aplicativo.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>When you instantiate a semaphore, you can specify the maximum number of threads that can enter the semaphore concurrently.</source>
          <target state="translated">Quando você cria uma instância de um sinal, você pode especificar o número máximo de threads que podem entrar no sinal simultaneamente.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>You also specify the initial number of threads that can enter the semaphore concurrently.</source>
          <target state="translated">Você também pode especificar o número inicial de threads que podem entrar no sinal simultaneamente.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>This defines the semaphore's count.</source>
          <target state="translated">Isso define a contagem do sinal.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>The count is decremented each time a thread enters the semaphore, and incremented each time a thread releases the semaphore.</source>
          <target state="translated">A contagem é decrementada cada vez que um thread entra o semáforo e incrementado toda vez que um thread libera o sinal.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>To enter the semaphore, a thread calls one of the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph> overloads.</source>
          <target state="translated">Para inserir o sinal, um thread chama uma da <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph> ou <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph> sobrecargas.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>To release the semaphore, it calls one of the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Release%2A&gt;</ph> overloads.</source>
          <target state="translated">Para liberar o semáforo, ele chama uma da <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Release%2A&gt;</ph> sobrecargas.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>When the count reaches zero, subsequent calls to one of the <ph id="ph1">`Wait`</ph> methods block until other threads release the semaphore.</source>
          <target state="translated">Quando a contagem atinge zero, as chamadas subsequentes para uma da <ph id="ph1">`Wait`</ph> métodos bloqueiam até que outros threads de liberar o semáforo.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>If multiple threads are blocked, there is no guaranteed order, such as FIFO or LIFO, that controls when threads enter the semaphore.</source>
          <target state="translated">Se vários threads são bloqueados, não há nenhuma garantia de ordem, como PEPS ou UEPS, que controla quando threads insere o sinal.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>The basic structure for code that uses a semaphore to protect resources is:</source>
          <target state="translated">A estrutura básica de código que usa um sinal para proteger recursos é:</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>When all threads have released the semaphore, the count is at the maximum value specified when the semaphore was created.</source>
          <target state="translated">Depois que todos os threads libera o sinal, a contagem é o valor máximo especificada quando o semáforo foi criado.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>The semaphore's count is available from the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property.</source>
          <target state="translated">Contagem de semáforo está disponível a partir do <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>The <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> class doesn't enforce thread or task identity on calls to the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Threading.SemaphoreSlim.Release%2A&gt;</ph> methods.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> classe não impõe a identidade do thread ou tarefa em chamadas para o <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph>, e <ph id="ph4">&lt;xref:System.Threading.SemaphoreSlim.Release%2A&gt;</ph> métodos.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>In addition, if the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.%23ctor%28System.Int32%29&gt;</ph> constructor is used to instantiate the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> object, the <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property can increase beyond the value set by the constructor.</source>
          <target state="translated">Além disso, se o <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.%23ctor%28System.Int32%29&gt;</ph> construtor é usado para instanciar o <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> objeto, o <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> propriedade pode aumentar além do valor definido pelo construtor.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>It is the programmer's responsibility to ensure that calls to <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph> methods are appropriately paired with calls to <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.Release%2A&gt;</ph> methods.</source>
          <target state="translated">É responsabilidade do programador para garantir que as chamadas para <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph> ou <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph> métodos adequadamente são emparelhados com chamadas para <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.Release%2A&gt;</ph> métodos.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>The following example creates a semaphore with a maximum count of three threads and an initial count of zero threads.</source>
          <target state="translated">O exemplo a seguir cria um semáforo com uma contagem máxima de três threads e uma contagem inicial de zero threads.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>The example starts five tasks, all of which block waiting for the semaphore.</source>
          <target state="translated">O exemplo inicia cinco tarefas, que bloqueado aguardando o sinal.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>The main thread calls the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Release%28System.Int32%29&gt;</ph> overload to increase the semaphore count to its maximum, which allows three tasks to enter the semaphore.</source>
          <target state="translated">As chamadas do thread principal de <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Release%28System.Int32%29&gt;</ph> sobrecarga para aumentar a contagem de semáforo ao seu máximo, o que permite que as três tarefas entrar no sinal.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>Each time the semaphore is released, the previous semaphore count is displayed.</source>
          <target state="translated">Cada vez que o sinal é liberado, a contagem de semáforo anterior é exibida.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>Console messages track semaphore use.</source>
          <target state="translated">Console mensagens controlar o uso do sinal.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>The simulated work interval is increased slightly for each thread to make the output easier to read.</source>
          <target state="translated">O intervalo de trabalho simulada aumenta um pouco para cada thread facilitar a leitura de saída.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>All public and protected members of <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> are thread-safe and may be used concurrently from multiple threads, with the exception of <ph id="ph2">&lt;see cref="M:System.Threading.SemaphoreSlim.Dispose" /&gt;</ph>, which must be used only when all other operations on the <ph id="ph3">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> have completed.</source>
          <target state="translated">Todos os membros protegidos e públicos da <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> são thread-safe e podem ser usados simultaneamente em vários segmentos, com exceção de <ph id="ph2">&lt;see cref="M:System.Threading.SemaphoreSlim.Dispose" /&gt;</ph>, que deve ser usado somente quando todas as outras operações no <ph id="ph3">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> concluiu.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="T:System.Threading.SemaphoreSlim">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> class.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.#ctor(System.Int32)">
          <source>The initial number of requests for the semaphore that can be granted concurrently.</source>
          <target state="translated">O número inicial de solicitações para o semáforo que podem ser concedidas ao mesmo tempo.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.#ctor(System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> class, specifying the initial number of requests that can be granted concurrently.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, especificando o número inicial de solicitações que podem ser concedidas simultaneamente.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.#ctor(System.Int32)">
          <source>The <ph id="ph1">`initialCount`</ph> parameter defines the number of concurrent requests to enter the semaphore that can be granted.</source>
          <target state="translated">O <ph id="ph1">`initialCount`</ph> parâmetro define o número de solicitações simultâneas para inserir o semáforo que pode ser concedido.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.#ctor(System.Int32)">
          <source>However, it doesn't define the maximum number of requests that can be granted concurrently.</source>
          <target state="translated">No entanto, ele não define o número máximo de solicitações que podem ser concedidas ao mesmo tempo.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.#ctor(System.Int32)">
          <source>A   <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> object instantiated by calling this constructor doesn't throw a <ph id="ph2">&lt;xref:System.Threading.SemaphoreFullException&gt;</ph> exception if a call to the <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.Release%2A&gt;</ph> method increases the value of the <ph id="ph4">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property beyond <ph id="ph5">`initialCount`</ph>.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> objeto instanciado chamando este construtor não lançar uma <ph id="ph2">&lt;xref:System.Threading.SemaphoreFullException&gt;</ph> exceção se uma chamada para o <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.Release%2A&gt;</ph> método aumenta o valor da <ph id="ph4">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> propriedade além <ph id="ph5">`initialCount`</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.#ctor(System.Int32)">
          <source>This occurs if there are more calls to <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Release%2A&gt;</ph> methods than there are to <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph> methods.</source>
          <target state="translated">Isso ocorre se houver mais chamadas para <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Release%2A&gt;</ph> métodos que são para <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph> ou <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph> métodos.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.#ctor(System.Int32)">
          <source>To set the maximum number of concurrent requests to enter the semaphore that can be granted, call the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.%23ctor%28System.Int32%2CSystem.Int32%29&gt;</ph> constructor.</source>
          <target state="translated">Para definir o número máximo de solicitações simultâneas para inserir o semáforo que pode ser concedido, chame o <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.%23ctor%28System.Int32%2CSystem.Int32%29&gt;</ph> construtor.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.#ctor(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="initialCount" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="initialCount" /&gt;</ph> é menor que 0.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.#ctor(System.Int32,System.Int32)">
          <source>The initial number of requests for the semaphore that can be granted concurrently.</source>
          <target state="translated">O número inicial de solicitações para o semáforo que podem ser concedidas ao mesmo tempo.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.#ctor(System.Int32,System.Int32)">
          <source>The maximum number of requests for the semaphore that can be granted concurrently.</source>
          <target state="translated">O número máximo de solicitações para o semáforo que podem ser concedidas ao mesmo tempo.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.#ctor(System.Int32,System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> class, specifying the initial and maximum number of requests that can be granted concurrently.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, especificando o número inicial e o máximo de solicitações que podem ser concedidas simultaneamente.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.#ctor(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="initialCount" /&gt;</ph> is less than 0, or <ph id="ph2">&lt;paramref name="initialCount" /&gt;</ph> is greater than <ph id="ph3">&lt;paramref name="maxCount" /&gt;</ph>, or <ph id="ph4">&lt;paramref name="maxCount" /&gt;</ph> is equal to or less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="initialCount" /&gt;</ph> é menor que 0, <ph id="ph2">&lt;paramref name="initialCount" /&gt;</ph> é maior que <ph id="ph3">&lt;paramref name="maxCount" /&gt;</ph> ou <ph id="ph4">&lt;paramref name="maxCount" /&gt;</ph> é igual ou menor que 0.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="P:System.Threading.SemaphoreSlim.AvailableWaitHandle">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> that can be used to wait on the semaphore.</source>
          <target state="translated">Retorna um <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> que pode ser usado para aguardar o semáforo.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.SemaphoreSlim.AvailableWaitHandle">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> that can be used to wait on the semaphore.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> que pode ser usado para aguardar o semáforo.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.SemaphoreSlim.AvailableWaitHandle">
          <source>Use this property only when you must wait on a SemaphoreSlim together with other kernel-based synchronization objects with the same wait handle.</source>
          <target state="translated">Use essa propriedade somente quando você deve aguardar um SemaphoreSlim junto com outros objetos de sincronização baseado em kernel com o mesmo identificador de espera.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.SemaphoreSlim.AvailableWaitHandle">
          <source>A successful wait on the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.AvailableWaitHandle%2A&gt;</ph> does not imply a successful wait on the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> itself, nor does it decrement the semaphore's count.</source>
          <target state="translated">Uma espera bem-sucedida no <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.AvailableWaitHandle%2A&gt;</ph> não implica uma espera bem-sucedida no <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> em si, nem-diminuir a contagem do sinal.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.SemaphoreSlim.AvailableWaitHandle">
          <source>After the available wait handle is signaled, you should wait on the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> specifically.</source>
          <target state="translated">Depois que o identificador de espera disponível é sinalizado, você deve aguardar o <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> especificamente.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="P:System.Threading.SemaphoreSlim.AvailableWaitHandle">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> has been disposed.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> foi descartado.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="P:System.Threading.SemaphoreSlim.CurrentCount">
          <source>Gets the number of remaining threads that can enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> object.</source>
          <target state="translated">Obtém o número de threads restantes que podem inserir o objeto <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.SemaphoreSlim.CurrentCount">
          <source>The number of remaining threads that can enter the semaphore.</source>
          <target state="translated">O número de threads restantes que podem inserir o semáforo.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.SemaphoreSlim.CurrentCount">
          <source>The initial value of the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property is set by the call to the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.%23ctor%2A&gt;</ph> class constructor.</source>
          <target state="translated">O valor inicial de <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> propriedade é definida pela chamada para o <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.%23ctor%2A&gt;</ph> construtor da classe.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.SemaphoreSlim.CurrentCount">
          <source>It is decremented by each call to the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph> method, and incremented by each call to the <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.Release%2A&gt;</ph> method.</source>
          <target state="translated">É diminuído em cada chamada para o <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph> ou <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph> método e incrementado em cada chamada para o <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.Release%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="T:System.Threading.SemaphoreSlim">
          <source>Releases resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> class.</source>
          <target state="translated">Libera os recursos usados pela instância atual da classe <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Dispose">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> class.</source>
          <target state="translated">Libera todos os recursos usados pela instância atual da classe <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Dispose">
          <source>Call <ph id="ph1">`Dispose`</ph> when you are finished using the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph>.</source>
          <target state="translated">Chamar <ph id="ph1">`Dispose`</ph> quando tiver terminado de usar o <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Dispose">
          <source>The <ph id="ph1">`Dispose`</ph> method leaves the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> in an unusable state.</source>
          <target state="translated">O <ph id="ph1">`Dispose`</ph> método deixa o <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> em um estado inutilizável.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Dispose">
          <source>After calling <ph id="ph1">`Dispose`</ph>, you must release all references to the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> so the garbage collector can reclaim the memory that the <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> was occupying.</source>
          <target state="translated">Depois de chamar <ph id="ph1">`Dispose`</ph>, você deve liberar todas as referências para o <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> para o coletor de lixo possa recuperar a memória que o <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> estava ocupando.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Dispose">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">Para obter mais informações, consulte <bpt id="p1">[</bpt>limpeza de recursos não gerenciados<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> e <bpt id="p2">[</bpt>implementar um método Dispose<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Dispose">
          <source>Always call <ph id="ph1">`Dispose`</ph> before you release your last reference to the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph>.</source>
          <target state="translated">Sempre chamar <ph id="ph1">`Dispose`</ph> antes de liberar sua última referência para o <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Dispose">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> object's <ph id="ph2">`Finalize`</ph> method.</source>
          <target state="translated">Caso contrário, os recursos que está usando não serão liberados até que o coletor de lixo chame o <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> do objeto <ph id="ph2">`Finalize`</ph> método.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> para liberar recursos gerenciados e não gerenciados; <ph id="ph2">&lt;see langword="false" /&gt;</ph> para liberar apenas recursos não gerenciados.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, and optionally releases the managed resources.</source>
          <target state="translated">Libera os recursos não gerenciados usados pelo <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> e opcionalmente libera os recursos gerenciados.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Dispose(System.Boolean)">
          <source>Unlike most of the members of <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Dispose%2A&gt;</ph> is not thread-safe and may not be used concurrently with other members of this instance.</source>
          <target state="translated">Ao contrário da maioria dos membros de <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Dispose%2A&gt;</ph> não é thread-safe e não podem ser usadas simultaneamente com outros membros desta instância.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="T:System.Threading.SemaphoreSlim">
          <source>Releases the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> object.</source>
          <target state="translated">Libera o objeto <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Release">
          <source>Releases the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> object once.</source>
          <target state="translated">Libera o objeto <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> uma única vez.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Release">
          <source>The previous count of the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>.</source>
          <target state="translated">A contagem anterior do <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Release">
          <source>A call to the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Release&gt;</ph> method increments the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property by one.</source>
          <target state="translated">Uma chamada para o <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Release&gt;</ph> incrementos de método de <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> propriedade por um.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Release">
          <source>If the value of the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property is zero before this method is called, the method also allows one thread or task blocked by a call to the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph> method to enter the semaphore.</source>
          <target state="translated">Se o valor da <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> é zero antes que este método é chamado, o método também permite que um thread ou tarefa bloqueado por uma chamada para o <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph> ou <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph> método para entrar no sinal.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Release">
          <source>The current instance has already been disposed.</source>
          <target state="translated">A instância atual já foi descartada.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Release">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> has already reached its maximum size.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> já atingiu seu tamanho máximo.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Release(System.Int32)">
          <source>The number of times to exit the semaphore.</source>
          <target state="translated">O número de vezes para sair do sinal.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Release(System.Int32)">
          <source>Releases the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> object a specified number of times.</source>
          <target state="translated">Libera o objeto <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> um número de vezes especificado.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Release(System.Int32)">
          <source>The previous count of the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>.</source>
          <target state="translated">A contagem anterior do <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Release(System.Int32)">
          <source>A call to the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Release%28System.Int32%29&gt;</ph> method increments the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property by <ph id="ph3">`releaseCount`</ph>.</source>
          <target state="translated">Uma chamada para o <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Release%28System.Int32%29&gt;</ph> incrementos de método de <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> propriedade <ph id="ph3">`releaseCount`</ph>.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Release(System.Int32)">
          <source>If the value of the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property is zero before this method is called, the method also allows <ph id="ph2">`releaseCount`</ph> threads or tasks blocked by a call to the <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph> method to enter the semaphore.</source>
          <target state="translated">Se o valor da <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> propriedade é zero antes que este método é chamado, o método também permite <ph id="ph2">`releaseCount`</ph> threads ou tarefas bloqueadas por uma chamada para o <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph> ou <ph id="ph4">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph> método para entrar no sinal.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Release(System.Int32)">
          <source>The current instance has already been disposed.</source>
          <target state="translated">A instância atual já foi descartada.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Release(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="releaseCount" /&gt;</ph> is less than 1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="releaseCount" /&gt;</ph> é menor que 1.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Release(System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> has already reached its maximum size.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> já atingiu seu tamanho máximo.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="T:System.Threading.SemaphoreSlim">
          <source>Blocks the current thread until it can enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>.</source>
          <target state="translated">Bloqueia o thread atual até que o <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> possa ser inserido.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait">
          <source>Blocks the current thread until it can enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>.</source>
          <target state="translated">Bloqueia o thread atual até que o <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> possa ser inserido.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait">
          <source>If a thread or task is able to enter the semaphore, it decrements the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property by one.</source>
          <target state="translated">Se um thread ou uma tarefa é capaz de entrar no sinal, ele diminui a <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> propriedade por um.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait">
          <source>The current instance has already been disposed.</source>
          <target state="translated">A instância atual já foi descartada.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32)">
          <source>The number of milliseconds to wait, <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>(-1) to wait indefinitely, or zero to test the state of the wait handle and return immediately.</source>
          <target state="translated">O número de milissegundos de espera, <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>(-1) de espera indefinidamente ou zero para testar o estado do identificador de espera e retornar imediatamente.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32)">
          <source>Blocks the current thread until it can enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, using a 32-bit signed integer that specifies the timeout.</source>
          <target state="translated">Bloqueia o thread atual até que ele possa inserir o <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, usando um inteiro com sinal de 32 bits que especifica o tempo limite.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current thread successfully entered the <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se o thread atual inseriu o <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> com êxito; caso contrário, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32)">
          <source>If the timeout is set to -1 milliseconds, the method waits indefinitely.</source>
          <target state="translated">Se o tempo limite é definido como-1 milissegundos, o método aguarda indefinidamente.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32)">
          <source>If the timeout is set to zero milliseconds, the method doesn't block.</source>
          <target state="translated">Se o tempo limite é definido como zero milissegundos, o método não bloquear.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32)">
          <source>It tests the state of the wait handle and returns immediately.</source>
          <target state="translated">Ele testa o estado do identificador de espera e retorna imediatamente.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32)">
          <source>If a thread or task is able to enter the semaphore, it decrements the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property by one.</source>
          <target state="translated">Se um thread ou uma tarefa é capaz de entrar no sinal, ele diminui a <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> propriedade por um.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32)">
          <source>If a thread or task is blocked when calling <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Wait%28System.Int32%29&gt;</ph> and the timeout interval specified by <ph id="ph2">`millisecondsTimeout`</ph> expires:</source>
          <target state="translated">Se um thread ou uma tarefa é bloqueada durante a chamada <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Wait%28System.Int32%29&gt;</ph> e o intervalo de tempo limite especificado pelo <ph id="ph2">`millisecondsTimeout`</ph> expirar:</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32)">
          <source>The thread or task doesn't enter the semaphore.</source>
          <target state="translated">O thread ou a tarefa não insira o sinal.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property isn't decremented.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> propriedade não é reduzida.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> é um número negativo diferente de -1, que representa um tempo limite infinito ou o tempo limite é maior que <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> token to observe.</source>
          <target state="translated">O token <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> a ser observado.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)">
          <source>Blocks the current thread until it can enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, while observing a <ph id="ph2">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</source>
          <target state="translated">Bloqueia o thread atual até que ele possa inserir o <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, enquanto observar uma <ph id="ph2">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)">
          <source>If a thread or task is able to enter the semaphore, it decrements the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property by one.</source>
          <target state="translated">Se um thread ou uma tarefa é capaz de entrar no sinal, ele diminui a <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> propriedade por um.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)">
          <source>If <ph id="ph1">`cancellationToken`</ph> is cancelled, the thread or task doesn't enter the semaphore, and the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property isn't decremented.</source>
          <target state="translated">Se <ph id="ph1">`cancellationToken`</ph> é cancelado, a tarefa ou o thread não insira o sinal e o <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> propriedade não é reduzida.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)">
          <source>Instead, the method throws an <ph id="ph1">&lt;xref:System.OperationCanceledException&gt;</ph> exception.</source>
          <target state="translated">Em vez disso, o método gera uma <ph id="ph1">&lt;xref:System.OperationCanceledException&gt;</ph> exceção.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> was canceled.</source>
          <target state="translated">O <ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> foi cancelado.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)">
          <source>The current instance has already been disposed.</source>
          <target state="translated">A instância atual já foi descartada.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> que criou <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> já foi descartado.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)">
          <source>A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents the number of milliseconds to wait, a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents -1 milliseconds to wait indefinitely, or a <ph id="ph3">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents 0 milliseconds to test the wait handle and return immediately.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> que representa o número de milissegundos de espera, um <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> que representa -1 milissegundo de espera indefinidamente ou um <ph id="ph3">&lt;see cref="T:System.TimeSpan" /&gt;</ph> que representa 0 milissegundo para testar o identificador de espera e retornar imediatamente.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)">
          <source>Blocks the current thread until it can enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, using a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> to specify the timeout.</source>
          <target state="translated">Bloqueia o thread atual até que ele possa inserir o <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, usando um <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> para especificar o tempo limite.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current thread successfully entered the <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se o thread atual inseriu o <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> com êxito; caso contrário, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)">
          <source>If the timeout is set to -1 milliseconds, the method waits indefinitely.</source>
          <target state="translated">Se o tempo limite é definido como-1 milissegundos, o método aguarda indefinidamente.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)">
          <source>If the timeout is set to zero milliseconds, the method doesn't block.</source>
          <target state="translated">Se o tempo limite é definido como zero milissegundos, o método não bloquear.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)">
          <source>It tests the state of the wait handle and returns immediately.</source>
          <target state="translated">Ele testa o estado do identificador de espera e retorna imediatamente.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)">
          <source>If a thread or task is able to enter the semaphore, it decrements the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property by one.</source>
          <target state="translated">Se um thread ou uma tarefa é capaz de entrar no sinal, ele diminui a <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> propriedade por um.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)">
          <source>If a thread or task is blocked when calling <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Wait%28System.TimeSpan%29&gt;</ph> and the timeout interval specified by <ph id="ph2">`millisecondsTimeout`</ph> expires:</source>
          <target state="translated">Se um thread ou uma tarefa é bloqueada durante a chamada <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Wait%28System.TimeSpan%29&gt;</ph> e o intervalo de tempo limite especificado pelo <ph id="ph2">`millisecondsTimeout`</ph> expirar:</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)">
          <source>The thread or task doesn't enter the semaphore.</source>
          <target state="translated">O thread ou a tarefa não insira o sinal.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property isn't decremented.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> propriedade não é reduzida.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> é um número negativo diferente de -1, que representa um tempo limite infinito ou o tempo limite é maior que <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)">
          <source>The semaphoreSlim instance has been disposed <ph id="ph1">&lt;paramref name="." /&gt;</ph></source>
          <target state="translated">A instância semaphoreSlim foi descartada <ph id="ph1">&lt;paramref name="." /&gt;</ph></target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>The number of milliseconds to wait, <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>(-1) to wait indefinitely, or zero to test the state of the wait handle and return immediately.</source>
          <target state="translated">O número de milissegundos de espera, <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>(-1) de espera indefinidamente ou zero para testar o estado do identificador de espera e retornar imediatamente.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> to observe.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> a ser observado.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>Blocks the current thread until it can enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, using a 32-bit signed integer that specifies the timeout, while observing a <ph id="ph2">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</source>
          <target state="translated">Bloqueia o thread atual até que ele possa inserir o <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, usando um inteiro com sinal de 32 bits que especifica o tempo limite, observando simultaneamente um <ph id="ph2">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current thread successfully entered the <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se o thread atual inseriu o <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> com êxito; caso contrário, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>If the timeout is set to -1 milliseconds, the method waits indefinitely.</source>
          <target state="translated">Se o tempo limite é definido como-1 milissegundos, o método aguarda indefinidamente.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>If the timeout is set to zero milliseconds, the method doesn't block.</source>
          <target state="translated">Se o tempo limite é definido como zero milissegundos, o método não bloquear.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>It tests the state of the wait handle and returns immediately.</source>
          <target state="translated">Ele testa o estado do identificador de espera e retorna imediatamente.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>If a thread or task is able to enter the semaphore, it decrements the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property by one.</source>
          <target state="translated">Se um thread ou uma tarefa é capaz de entrar no sinal, ele diminui a <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> propriedade por um.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>If <ph id="ph1">`cancellationToken`</ph> is cancelled, or if a thread or task is blocked when calling <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29&gt;</ph> and the timeout interval specified by <ph id="ph3">`millisecondsTimeout`</ph> expires:</source>
          <target state="translated">Se <ph id="ph1">`cancellationToken`</ph> é cancelado, ou se um thread ou uma tarefa é bloqueada durante a chamada <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29&gt;</ph> e o intervalo de tempo limite especificado pelo <ph id="ph3">`millisecondsTimeout`</ph> expirar:</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>The thread or task doesn't enter the semaphore.</source>
          <target state="translated">O thread ou a tarefa não insira o sinal.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property isn't decremented.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> propriedade não é reduzida.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>If <ph id="ph1">`cancellationToken`</ph> is cancelled, the method throws an   <ph id="ph2">&lt;xref:System.OperationCanceledException&gt;</ph> exception.</source>
          <target state="translated">Se <ph id="ph1">`cancellationToken`</ph> é cancelado, o método gera uma <ph id="ph2">&lt;xref:System.OperationCanceledException&gt;</ph> exceção.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> was canceled.</source>
          <target state="translated">O <ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> foi cancelado.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> é um número negativo diferente de -1, que representa um tempo limite infinito ou o tempo limite é maior que <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> instance has been disposed, or the <ph id="ph2">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created <ph id="ph3">&lt;paramref name="cancellationToken" /&gt;</ph> has been disposed.</source>
          <target state="translated">A instância de <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> foi descartada ou o <ph id="ph2">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> que criou <ph id="ph3">&lt;paramref name="cancellationToken" /&gt;</ph> foi descartado.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents the number of milliseconds to wait, a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents -1 milliseconds to wait indefinitely, or a <ph id="ph3">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents 0 milliseconds to test the wait handle and return immediately.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> que representa o número de milissegundos de espera, um <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> que representa -1 milissegundo de espera indefinidamente ou um <ph id="ph3">&lt;see cref="T:System.TimeSpan" /&gt;</ph> que representa 0 milissegundo para testar o identificador de espera e retornar imediatamente.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> to observe.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> a ser observado.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>Blocks the current thread until it can enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, using a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that specifies the timeout, while observing a <ph id="ph3">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</source>
          <target state="translated">Bloqueia o thread atual até que ele possa inserir o <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, usando um <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> que especifica o tempo limite, observando simultaneamente um <ph id="ph3">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current thread successfully entered the <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se o thread atual inseriu o <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> com êxito; caso contrário, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>If the timeout is set to -1 milliseconds, the method waits indefinitely.</source>
          <target state="translated">Se o tempo limite é definido como-1 milissegundos, o método aguarda indefinidamente.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>If the timeout is set to zero milliseconds, the method doesn't block.</source>
          <target state="translated">Se o tempo limite é definido como zero milissegundos, o método não bloquear.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>It tests the state of the wait handle and returns immediately.</source>
          <target state="translated">Ele testa o estado do identificador de espera e retorna imediatamente.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>If a thread or task is able to enter the semaphore, it decrements the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property by one.</source>
          <target state="translated">Se um thread ou uma tarefa é capaz de entrar no sinal, ele diminui a <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> propriedade por um.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>If <ph id="ph1">`cancellationToken`</ph> is cancelled, or if a thread or task is blocked when calling <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Wait%28System.TimeSpan%2CSystem.Threading.CancellationToken%29&gt;</ph> and the timeout interval specified by <ph id="ph3">`millisecondsTimeout`</ph> expires:</source>
          <target state="translated">Se <ph id="ph1">`cancellationToken`</ph> é cancelado, ou se um thread ou uma tarefa é bloqueada durante a chamada <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Wait%28System.TimeSpan%2CSystem.Threading.CancellationToken%29&gt;</ph> e o intervalo de tempo limite especificado pelo <ph id="ph3">`millisecondsTimeout`</ph> expirar:</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>The thread or task doesn't enter the semaphore.</source>
          <target state="translated">O thread ou a tarefa não insira o sinal.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property isn't decremented.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> propriedade não é reduzida.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>If <ph id="ph1">`cancellationToken`</ph> is cancelled, the method throws an <ph id="ph2">&lt;xref:System.OperationCanceledException&gt;</ph> exception.</source>
          <target state="translated">Se <ph id="ph1">`cancellationToken`</ph> é cancelado, o método gera uma <ph id="ph2">&lt;xref:System.OperationCanceledException&gt;</ph> exceção.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> was canceled.</source>
          <target state="translated">O <ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> foi cancelado.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> é um número negativo diferente de -1, que representa um tempo limite infinito ou o tempo limite é maior que <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>The semaphoreSlim instance has been disposed <ph id="ph1">&lt;paramref name="." /&gt;</ph><ph id="ph2">&lt;paramref name="-or-" /&gt;</ph></source>
          <target state="translated">A instância semaphoreSlim foi descartada <ph id="ph1">&lt;paramref name="." /&gt;</ph><ph id="ph2">&lt;paramref name="-or-" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> que criou <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> já foi descartado.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="T:System.Threading.SemaphoreSlim">
          <source>Asynchronously waits to enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>.</source>
          <target state="translated">Espera assincronamente para inserir o <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync">
          <source>Asynchronously waits to enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>.</source>
          <target state="translated">Espera assincronamente para inserir o <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync">
          <source>A task that will complete when the semaphore has been entered.</source>
          <target state="translated">Uma tarefa que será concluída quando o semáforo for inserido.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32)">
          <source>The number of milliseconds to wait, <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (-1) to wait indefinitely, or zero to test the state of the wait handle and return immediately.</source>
          <target state="translated">O número de milissegundos de espera, <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (-1) de espera indefinidamente ou zero para testar o estado do identificador de espera e retornar imediatamente.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32)">
          <source>Asynchronously waits to enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, using a 32-bit signed integer to measure the time interval.</source>
          <target state="translated">Aguarda de forma assíncrona para inserir o <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, usando um inteiro com sinal de 32 bits para medir o intervalo de tempo.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32)">
          <source>A task that will complete with a result of <ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current thread successfully entered the <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, otherwise with a result of <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Uma tarefa será concluída com um resultado de <ph id="ph1">&lt;see langword="true" /&gt;</ph> se o thread atual tiver inserido com êxito o <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, caso contrário, com um resultado de <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32)">
          <source>If the timeout is set to -1 milliseconds, the method waits indefinitely.</source>
          <target state="translated">Se o tempo limite é definido como-1 milissegundos, o método aguarda indefinidamente.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32)">
          <source>If the timeout is set to zero milliseconds, the method doesn't block.</source>
          <target state="translated">Se o tempo limite é definido como zero milissegundos, o método não bloquear.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32)">
          <source>It tests the state of the wait handle and returns immediately.</source>
          <target state="translated">Ele testa o estado do identificador de espera e retorna imediatamente.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32)">
          <source>The current instance has already been disposed.</source>
          <target state="translated">A instância atual já foi descartada.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> é um número negativo diferente de -1, que representa um tempo limite infinito ou o tempo limite é maior que <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> token to observe.</source>
          <target state="translated">O token <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> a ser observado.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Threading.CancellationToken)">
          <source>Asynchronously waits to enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, while observing a <ph id="ph2">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</source>
          <target state="translated">Espera assincronamente para inserir o <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, ao observar um <ph id="ph2">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Threading.CancellationToken)">
          <source>A task that will complete when the semaphore has been entered.</source>
          <target state="translated">Uma tarefa que será concluída quando o semáforo for inserido.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Threading.CancellationToken)">
          <source>The current instance has already been disposed.</source>
          <target state="translated">A instância atual já foi descartada.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> was canceled.</source>
          <target state="translated">O <ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> foi cancelado.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)">
          <source>A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents the number of milliseconds to wait, a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents -1 milliseconds to wait indefinitely, or a <ph id="ph3">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents 0 milliseconds to test the wait handle and return immediately.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> que representa o número de milissegundos de espera, um <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> que representa -1 milissegundo de espera indefinidamente ou um <ph id="ph3">&lt;see cref="T:System.TimeSpan" /&gt;</ph> que representa 0 milissegundo para testar o identificador de espera e retornar imediatamente.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)">
          <source>Asynchronously waits to enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, using a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> to measure the time interval.</source>
          <target state="translated">Espera assincronamente para inserir o <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, usando um <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> para medir o intervalo de tempo.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)">
          <source>A task that will complete with a result of <ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current thread successfully entered the <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, otherwise with a result of <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Uma tarefa será concluída com um resultado de <ph id="ph1">&lt;see langword="true" /&gt;</ph> se o thread atual tiver inserido com êxito o <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, caso contrário, com um resultado de <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)">
          <source>If the timeout is set to -1 milliseconds, the method waits indefinitely.</source>
          <target state="translated">Se o tempo limite é definido como-1 milissegundos, o método aguarda indefinidamente.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)">
          <source>If the timeout is set to zero milliseconds, the method doesn't block.</source>
          <target state="translated">Se o tempo limite é definido como zero milissegundos, o método não bloquear.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)">
          <source>It tests the state of the wait handle and returns immediately.</source>
          <target state="translated">Ele testa o estado do identificador de espera e retorna imediatamente.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)">
          <source>The current instance has already been disposed.</source>
          <target state="translated">A instância atual já foi descartada.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> é um número negativo diferente de -1, que representa um tempo limite infinito ou o tempo limite é maior que <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)">
          <source>The number of milliseconds to wait, <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (-1) to wait indefinitely, or zero to test the state of the wait handle and return immediately.</source>
          <target state="translated">O número de milissegundos de espera, <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (-1) de espera indefinidamente ou zero para testar o estado do identificador de espera e retornar imediatamente.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> to observe.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> a ser observado.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)">
          <source>Asynchronously waits to enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, using a 32-bit signed integer to measure the time interval, while observing a <ph id="ph2">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</source>
          <target state="translated">Espera assincronamente para inserir o <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, usando um inteiro com sinal de 32 bits para medir o intervalo de tempo, enquanto observa um <ph id="ph2">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)">
          <source>A task that will complete with a result of <ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current thread successfully entered the <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, otherwise with a result of <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Uma tarefa será concluída com um resultado de <ph id="ph1">&lt;see langword="true" /&gt;</ph> se o thread atual tiver inserido com êxito o <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, caso contrário, com um resultado de <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)">
          <source>If the timeout is set to -1 milliseconds, the method waits indefinitely.</source>
          <target state="translated">Se o tempo limite é definido como-1 milissegundos, o método aguarda indefinidamente.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)">
          <source>If the timeout is set to zero milliseconds, the method doesn't block.</source>
          <target state="translated">Se o tempo limite é definido como zero milissegundos, o método não bloquear.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)">
          <source>It tests the state of the wait handle and returns immediately.</source>
          <target state="translated">Ele testa o estado do identificador de espera e retorna imediatamente.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> is a number other than -1, which represents an infinite timeout -or- timeout is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> é um número diferente de -1, que representa um tempo limite infinito ou o tempo limite é maior que <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)">
          <source>The current instance has already been disposed.</source>
          <target state="translated">A instância atual já foi descartada.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> was canceled.</source>
          <target state="translated">O <ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> foi cancelado.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)">
          <source>A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents the number of milliseconds to wait, a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents -1 milliseconds to wait indefinitely, or a <ph id="ph3">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents 0 milliseconds to test the wait handle and return immediately.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> que representa o número de milissegundos de espera, um <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> que representa -1 milissegundo de espera indefinidamente ou um <ph id="ph3">&lt;see cref="T:System.TimeSpan" /&gt;</ph> que representa 0 milissegundo para testar o identificador de espera e retornar imediatamente.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> token to observe.</source>
          <target state="translated">O token <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> a ser observado.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)">
          <source>Asynchronously waits to enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, using a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> to measure the time interval, while observing a <ph id="ph3">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</source>
          <target state="translated">Espera assincronamente para inserir o <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, usando um <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> para medir o intervalo de tempo, enquanto observa um <ph id="ph3">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)">
          <source>A task that will complete with a result of <ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current thread successfully entered the <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, otherwise with a result of <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Uma tarefa será concluída com um resultado de <ph id="ph1">&lt;see langword="true" /&gt;</ph> se o thread atual tiver inserido com êxito o <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, caso contrário, com um resultado de <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)">
          <source>If the timeout is set to -1 milliseconds, the method waits indefinitely.</source>
          <target state="translated">Se o tempo limite é definido como-1 milissegundos, o método aguarda indefinidamente.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)">
          <source>If the timeout is set to zero milliseconds, the method doesn't block.</source>
          <target state="translated">Se o tempo limite é definido como zero milissegundos, o método não bloquear.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)">
          <source>It tests the state of the wait handle and returns immediately.</source>
          <target state="translated">Ele testa o estado do identificador de espera e retorna imediatamente.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> é um número negativo diferente de -1, que representa um tempo limite infinito ou o tempo limite é maior que <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> was canceled.</source>
          <target state="translated">O <ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> foi cancelado.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>