<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="CompositionContainer.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5531be8b9445e82ab2acefc549474a24be1a166d3.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">531be8b9445e82ab2acefc549474a24be1a166d3</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.Composition.Hosting.CompositionContainer">
          <source>Manages the composition of parts.</source>
          <target state="translated">Gerencia a composição de partes.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Composition.Hosting.CompositionContainer">
          <source>A <ph id="ph1">&lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer&gt;</ph> object serves two major purposes in an application.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer&gt;</ph> objeto atende a dois objetivos principais em um aplicativo.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Composition.Hosting.CompositionContainer">
          <source>First, it keeps track of which parts are available for composition and what their dependencies are, and performs composition whenever the set of available parts changes.</source>
          <target state="translated">Primeiro, ele mantém o controle de quais partes estão disponíveis para composição e quais são suas dependências e executa a composição sempre que o conjunto de disponíveis partes alterações.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Composition.Hosting.CompositionContainer">
          <source>Second, it provides the methods by which the application gets instances of composed parts or fills the dependencies of a composable part.</source>
          <target state="translated">Em segundo lugar, ele fornece os métodos pelos quais o aplicativo obtém as instâncias de partes compostos ou preenche as dependências de uma parte de composição.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Composition.Hosting.CompositionContainer">
          <source>This type implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
          <target state="translated">Este tipo implementa o <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Composition.Hosting.CompositionContainer">
          <source>When you have finished using the type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">Quando você terminar de usar o tipo, descarte-direta ou indiretamente.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Composition.Hosting.CompositionContainer">
          <source>To dispose of the type directly, call its <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`catch`</ph> block.</source>
          <target state="translated">Para descartar o tipo diretamente, chame seu <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> método em um <ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`catch`</ph> bloco.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Composition.Hosting.CompositionContainer">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">Para descartar indiretamente dele, use uma construção de linguagem, como <ph id="ph1">`using`</ph> (em c#) ou <ph id="ph2">`Using`</ph> (no Visual Basic).</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Composition.Hosting.CompositionContainer">
          <source>For more information, see the "Using an Object that Implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface topic.</source>
          <target state="translated">Para obter mais informações, consulte a seção "Usando um objeto que implementa IDisposable" o <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> tópico de interface.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Composition.Hosting.CompositionContainer">
          <source>Parts can be made available to the container either directly or through the <ph id="ph1">&lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer.Catalog%2A&gt;</ph> property.</source>
          <target state="translated">Partes podem ser disponibilizadas para o contêiner seja diretamente ou por meio de <ph id="ph1">&lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer.Catalog%2A&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Composition.Hosting.CompositionContainer">
          <source>All the parts discoverable in this <ph id="ph1">&lt;xref:System.ComponentModel.Composition.Primitives.ComposablePartCatalog&gt;</ph> are available to the container to fulfill imports, along with any parts added directly.</source>
          <target state="translated">Todas as partes detectáveis neste <ph id="ph1">&lt;xref:System.ComponentModel.Composition.Primitives.ComposablePartCatalog&gt;</ph> estão disponíveis para o contêiner para atender as importações, juntamente com quaisquer partes adicionados diretamente.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Composition.Hosting.CompositionContainer">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer.Compose%2A&gt;</ph> method allows instantiated parts to be added to an existing container.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer.Compose%2A&gt;</ph> método permite que partes instanciadas a ser adicionado a um contêiner existente.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Composition.Hosting.CompositionContainer">
          <source>Assuming composition is successful, these parts will have their imports filled with parts retrieved from the container, and their exports will be available to other parts.</source>
          <target state="translated">Supondo que composição for bem-sucedida, essas partes terão suas importações preenchidas com partes recuperadas do contêiner e suas exportações estará disponíveis para outras partes.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Composition.Hosting.CompositionContainer">
          <source>Imports marked as recomposable will be registered for recomposition.</source>
          <target state="translated">Importações marcadas como pode ser recomposta serão registradas para recomposition.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Composition.Hosting.CompositionContainer">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer.SatisfyImportsOnce%2A&gt;</ph> method allows a part to have its imports filled without being added to the container.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer.SatisfyImportsOnce%2A&gt;</ph> método permite que uma parte ter suas importações preenchidas sem que está sendo adicionado ao contêiner.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Composition.Hosting.CompositionContainer">
          <source>If the composition is successful, the part's imports will be filled, but the part's exports will not be available to other parts and no imports will be registered for recomposition.</source>
          <target state="translated">Se a composição for bem-sucedida, importações da parte serão preenchidas, mas exportações da parte não estará disponíveis para outras partes e nenhum importações serão registradas para recomposition.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Composition.Hosting.CompositionContainer">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer&gt;</ph> objects should always be disposed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer&gt;</ph> objetos sempre devem ser descartados.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Composition.Hosting.CompositionContainer">
          <source>When the <ph id="ph1">&lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer.Dispose%2A&gt;</ph> method is called, the <ph id="ph2">&lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer&gt;</ph> object also disposes all the parts that it has created.</source>
          <target state="translated">Quando o <ph id="ph1">&lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer.Dispose%2A&gt;</ph> método é chamado, o <ph id="ph2">&lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer&gt;</ph> objeto também remove todas as partes que ele foi criado.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Composition.Hosting.CompositionContainer">
          <source>A <ph id="ph1">&lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer&gt;</ph> object that can be accessed from multiple threads must be constructed with the <ph id="ph2">`isThreadSafe`</ph> parameter set to <ph id="ph3">`true`</ph>, using the <ph id="ph4">&lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer.%23ctor%28System.ComponentModel.Composition.Primitives.ComposablePartCatalog%2CSystem.Boolean%2CSystem.ComponentModel.Composition.Hosting.ExportProvider%5B%5D%29&gt;</ph> constructor.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer&gt;</ph> objeto que pode ser acessado por vários threads deve ser construído com o <ph id="ph2">`isThreadSafe`</ph> parâmetro definido como <ph id="ph3">`true`</ph>, usando o <ph id="ph4">&lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer.%23ctor%28System.ComponentModel.Composition.Primitives.ComposablePartCatalog%2CSystem.Boolean%2CSystem.ComponentModel.Composition.Hosting.ExportProvider%5B%5D%29&gt;</ph> construtor.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Composition.Hosting.CompositionContainer">
          <source>Performance will be slightly slower when <ph id="ph1">`isThreadSafe`</ph> is <ph id="ph2">`true`</ph>, so we recommend that you set this parameter to <ph id="ph3">`false`</ph> in single-threaded scenarios.</source>
          <target state="translated">O desempenho será um pouco mais lento quando <ph id="ph1">`isThreadSafe`</ph> é <ph id="ph2">`true`</ph>, portanto, é recomendável que você defina esse parâmetro para <ph id="ph3">`false`</ph> em cenários de thread único.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Composition.Hosting.CompositionContainer">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
          <target state="translated">O padrão é <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Composition.Hosting.CompositionContainer">
          <source>A <ph id="ph1">&lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer&gt;</ph> should never import itself, or a part that has a reference to it.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer&gt;</ph> nunca deve importar a mesmo, ou uma parte que tem uma referência a ele.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Composition.Hosting.CompositionContainer">
          <source>Such a reference could allow an untrusted part to gain access all the parts in the container.</source>
          <target state="translated">Tal referência pode permitir que uma parte não confiável acessar todas as partes no contêiner.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Composition.Hosting.CompositionContainer">
          <source>In the following example, a <ph id="ph1">&lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer&gt;</ph> object is initialized with a catalog and is used to fill the imports of a part.</source>
          <target state="translated">No exemplo a seguir, um <ph id="ph1">&lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer&gt;</ph> objeto é inicializado com um catálogo e é usado para preencher as importações de uma parte.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Composition.Hosting.CompositionContainer">
          <source>This example uses the Attributed Programming Model.</source>
          <target state="translated">Este exemplo usa o modelo de programação atribuído.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.Composition.Hosting.CompositionContainer">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /&gt;</ph> class.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /&gt;</ph> class.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Hosting.ExportProvider[])">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /&gt;</ph> objects that provide the <ph id="ph2">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /&gt;</ph> access to <ph id="ph3">&lt;see cref="T:System.ComponentModel.Composition.Primitives.Export" /&gt;</ph> objects, or <ph id="ph4">&lt;see langword="null" /&gt;</ph> to set <ph id="ph5">&lt;see cref="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers" /&gt;</ph> to an empty <ph id="ph6">&lt;see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /&gt;</ph>.</source>
          <target state="translated">Uma matriz de objetos <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /&gt;</ph> que fornecem o acesso <ph id="ph2">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /&gt;</ph> a objetos <ph id="ph3">&lt;see cref="T:System.ComponentModel.Composition.Primitives.Export" /&gt;</ph> ou <ph id="ph4">&lt;see langword="null" /&gt;</ph> para definir <ph id="ph5">&lt;see cref="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers" /&gt;</ph> como um <ph id="ph6">&lt;see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /&gt;</ph> vazio.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Hosting.ExportProvider[])">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /&gt;</ph> class with the specified export providers.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /&gt;</ph> com os provedores de exportação especificados.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Hosting.ExportProvider[])">
          <source><ph id="ph1">&lt;paramref name="providers" /&gt;</ph> contains an element that is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="providers" /&gt;</ph> contém um elemento que é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Hosting.CompositionOptions,System.ComponentModel.Composition.Hosting.ExportProvider[])">
          <source>An object that specifies the behavior of this container.</source>
          <target state="translated">Um objeto que especifica o comportamento desse contêiner.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Hosting.CompositionOptions,System.ComponentModel.Composition.Hosting.ExportProvider[])">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /&gt;</ph> objects that provide the <ph id="ph2">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /&gt;</ph> access to <ph id="ph3">&lt;see cref="T:System.ComponentModel.Composition.Primitives.Export" /&gt;</ph> objects, or <ph id="ph4">&lt;see langword="null" /&gt;</ph> to set <ph id="ph5">&lt;see cref="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers" /&gt;</ph> to an empty <ph id="ph6">&lt;see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /&gt;</ph>.</source>
          <target state="translated">Uma matriz de objetos <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /&gt;</ph> que fornecem o acesso <ph id="ph2">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /&gt;</ph> a objetos <ph id="ph3">&lt;see cref="T:System.ComponentModel.Composition.Primitives.Export" /&gt;</ph> ou <ph id="ph4">&lt;see langword="null" /&gt;</ph> para definir <ph id="ph5">&lt;see cref="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers" /&gt;</ph> como um <ph id="ph6">&lt;see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /&gt;</ph> vazio.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Hosting.CompositionOptions,System.ComponentModel.Composition.Hosting.ExportProvider[])">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /&gt;</ph> class with the specified export providers and options.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /&gt;</ph> com as opções e os provedores de exportação especificados.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Hosting.CompositionOptions,System.ComponentModel.Composition.Hosting.ExportProvider[])">
          <source><ph id="ph1">&lt;paramref name="providers" /&gt;</ph> contains an element that is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="providers" /&gt;</ph> contém um elemento que é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.ComponentModel.Composition.Hosting.ExportProvider[])">
          <source>A catalog that provides <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Primitives.Export" /&gt;</ph> objects to the <ph id="ph2">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /&gt;</ph>.</source>
          <target state="translated">Um catálogo que fornece objetos <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Primitives.Export" /&gt;</ph> para o <ph id="ph2">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.ComponentModel.Composition.Hosting.ExportProvider[])">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /&gt;</ph> objects that provide the <ph id="ph2">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /&gt;</ph> access to <ph id="ph3">&lt;see cref="T:System.ComponentModel.Composition.Primitives.Export" /&gt;</ph> objects, or <ph id="ph4">&lt;see langword="null" /&gt;</ph> to set <ph id="ph5">&lt;see cref="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers" /&gt;</ph> to an empty <ph id="ph6">&lt;see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /&gt;</ph>.</source>
          <target state="translated">Uma matriz de objetos <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /&gt;</ph> que fornecem o acesso <ph id="ph2">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /&gt;</ph> a objetos <ph id="ph3">&lt;see cref="T:System.ComponentModel.Composition.Primitives.Export" /&gt;</ph> ou <ph id="ph4">&lt;see langword="null" /&gt;</ph> para definir <ph id="ph5">&lt;see cref="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers" /&gt;</ph> como um <ph id="ph6">&lt;see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /&gt;</ph> vazio.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.ComponentModel.Composition.Hosting.ExportProvider[])">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /&gt;</ph> class with the specified catalog and export providers.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /&gt;</ph> com os provedores de exportação e de catálogo especificados.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.ComponentModel.Composition.Hosting.ExportProvider[])">
          <source><ph id="ph1">&lt;paramref name="providers" /&gt;</ph> contains an element that is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="providers" /&gt;</ph> contém um elemento que é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Boolean,System.ComponentModel.Composition.Hosting.ExportProvider[])">
          <source>A catalog that provides <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Primitives.Export" /&gt;</ph> objects to the <ph id="ph2">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /&gt;</ph>.</source>
          <target state="translated">Um catálogo que fornece objetos <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Primitives.Export" /&gt;</ph> para o <ph id="ph2">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Boolean,System.ComponentModel.Composition.Hosting.ExportProvider[])">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /&gt;</ph> object must be thread-safe; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se este objeto <ph id="ph2">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /&gt;</ph> deve ser thread-safe; caso contrário, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Boolean,System.ComponentModel.Composition.Hosting.ExportProvider[])">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /&gt;</ph> objects that provide the <ph id="ph2">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /&gt;</ph> access to <ph id="ph3">&lt;see cref="T:System.ComponentModel.Composition.Primitives.Export" /&gt;</ph> objects, or <ph id="ph4">&lt;see langword="null" /&gt;</ph> to set the <ph id="ph5">&lt;see cref="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers" /&gt;</ph> property to an empty <ph id="ph6">&lt;see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /&gt;</ph>.</source>
          <target state="translated">Uma matriz de objetos <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /&gt;</ph> que fornecem o acesso <ph id="ph2">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /&gt;</ph> a objetos <ph id="ph3">&lt;see cref="T:System.ComponentModel.Composition.Primitives.Export" /&gt;</ph> ou <ph id="ph4">&lt;see langword="null" /&gt;</ph> para definir a propriedade <ph id="ph5">&lt;see cref="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers" /&gt;</ph> para um <ph id="ph6">&lt;see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /&gt;</ph> vazio.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Boolean,System.ComponentModel.Composition.Hosting.ExportProvider[])">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /&gt;</ph> class with the specified catalog, thread-safe mode, and export providers.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /&gt;</ph> com o catálogo, modo thread-safe e provedores de exportação especificados.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Boolean,System.ComponentModel.Composition.Hosting.ExportProvider[])">
          <source>A <ph id="ph1">&lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer&gt;</ph> object that can be accessed from multiple threads must set the <ph id="ph2">`isThreadSafe`</ph> parameter to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer&gt;</ph> objeto que pode ser acessado por vários threads deve definir o <ph id="ph2">`isThreadSafe`</ph> parâmetro <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Boolean,System.ComponentModel.Composition.Hosting.ExportProvider[])">
          <source>Performance will be slightly slower when <ph id="ph1">`isThreadSafe`</ph> is <ph id="ph2">`true`</ph>, so we recommend that you set this parameter to <ph id="ph3">`false`</ph> in single-threaded scenarios.</source>
          <target state="translated">O desempenho será um pouco mais lento quando <ph id="ph1">`isThreadSafe`</ph> é <ph id="ph2">`true`</ph>, portanto, é recomendável que você defina esse parâmetro para <ph id="ph3">`false`</ph> em cenários de thread único.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Boolean,System.ComponentModel.Composition.Hosting.ExportProvider[])">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
          <target state="translated">O padrão é <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Boolean,System.ComponentModel.Composition.Hosting.ExportProvider[])">
          <source>One or more elements of <ph id="ph1">&lt;paramref name="providers" /&gt;</ph> are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um ou mais elementos de <ph id="ph1">&lt;paramref name="providers" /&gt;</ph> são <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.ComponentModel.Composition.Hosting.CompositionOptions,System.ComponentModel.Composition.Hosting.ExportProvider[])">
          <source>A catalog that provides <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Primitives.Export" /&gt;</ph> objects to the <ph id="ph2">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /&gt;</ph>.</source>
          <target state="translated">Um catálogo que fornece objetos <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Primitives.Export" /&gt;</ph> para o <ph id="ph2">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.ComponentModel.Composition.Hosting.CompositionOptions,System.ComponentModel.Composition.Hosting.ExportProvider[])">
          <source>An object that specifies options that affect the behavior of the container.</source>
          <target state="translated">Um objeto que especifica opções que afetam o comportamento do contêiner.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.ComponentModel.Composition.Hosting.CompositionOptions,System.ComponentModel.Composition.Hosting.ExportProvider[])">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /&gt;</ph> objects that provide the <ph id="ph2">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /&gt;</ph> access to <ph id="ph3">&lt;see cref="T:System.ComponentModel.Composition.Primitives.Export" /&gt;</ph> objects, or <ph id="ph4">&lt;see langword="null" /&gt;</ph> to set <ph id="ph5">&lt;see cref="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers" /&gt;</ph> to an empty <ph id="ph6">&lt;see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /&gt;</ph>.</source>
          <target state="translated">Uma matriz de objetos <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /&gt;</ph> que fornecem o acesso <ph id="ph2">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /&gt;</ph> a objetos <ph id="ph3">&lt;see cref="T:System.ComponentModel.Composition.Primitives.Export" /&gt;</ph> ou <ph id="ph4">&lt;see langword="null" /&gt;</ph> para definir <ph id="ph5">&lt;see cref="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers" /&gt;</ph> como um <ph id="ph6">&lt;see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /&gt;</ph> vazio.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.ComponentModel.Composition.Hosting.CompositionOptions,System.ComponentModel.Composition.Hosting.ExportProvider[])">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /&gt;</ph> class with the specified catalog, options, and export providers.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /&gt;</ph> com os provedores de exportação, de opções e de catálogo especificados.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.ComponentModel.Composition.Hosting.CompositionOptions,System.ComponentModel.Composition.Hosting.ExportProvider[])">
          <source><ph id="ph1">&lt;paramref name="providers" /&gt;</ph> contains an element that is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="providers" /&gt;</ph> contém um elemento que é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Catalog">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /&gt;</ph> that provides the container access to <ph id="ph2">&lt;see cref="T:System.ComponentModel.Composition.Primitives.Export" /&gt;</ph> objects.</source>
          <target state="translated">Obtém o <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /&gt;</ph> que fornece ao contêiner acesso a objetos <ph id="ph2">&lt;see cref="T:System.ComponentModel.Composition.Primitives.Export" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Catalog">
          <source>The catalog that provides the <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /&gt;</ph> access to exports produced from <ph id="ph2">&lt;see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /&gt;</ph> objects.</source>
          <target state="translated">O catálogo que fornece o <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /&gt;</ph> acesso para exportações produzidos de <ph id="ph2">&lt;see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /&gt;</ph> objetos.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Catalog">
          <source>The default is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O padrão é <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Catalog">
          <source>The <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /&gt;</ph> object has been disposed of.</source>
          <target state="translated">O objeto <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /&gt;</ph> foi descartado.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Compose(System.ComponentModel.Composition.Hosting.CompositionBatch)">
          <source>Changes to the <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /&gt;</ph> to include during the composition.</source>
          <target state="translated">Altera para o <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /&gt;</ph> para inclusão durante a composição.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Compose(System.ComponentModel.Composition.Hosting.CompositionBatch)">
          <source>Adds or removes the parts in the specified <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionBatch" /&gt;</ph> from the container and executes composition.</source>
          <target state="translated">Adiciona ou remove as partes no <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionBatch" /&gt;</ph> especificado do contêiner e executa a composição.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Compose(System.ComponentModel.Composition.Hosting.CompositionBatch)">
          <source>This method is the primary way of directly adding or removing parts from the container.</source>
          <target state="translated">Esse método é a principal maneira de adicionar ou remover partes do contêiner de diretamente.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Compose(System.ComponentModel.Composition.Hosting.CompositionBatch)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer&gt;</ph> will always maintain a stable, composed state.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer&gt;</ph> sempre mantém um estado estável, composto.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Compose(System.ComponentModel.Composition.Hosting.CompositionBatch)">
          <source>Therefore, calling <ph id="ph1">&lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer.Compose%2A&gt;</ph> with an empty <ph id="ph2">&lt;xref:System.ComponentModel.Composition.Hosting.CompositionBatch&gt;</ph> is never necessary to start composition.</source>
          <target state="translated">Portanto, ao chamar <ph id="ph1">&lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer.Compose%2A&gt;</ph> com vazio <ph id="ph2">&lt;xref:System.ComponentModel.Composition.Hosting.CompositionBatch&gt;</ph> nunca é necessária para iniciar a composição.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Compose(System.ComponentModel.Composition.Hosting.CompositionBatch)">
          <source>Instead, call the <ph id="ph1">&lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer.Compose%2A&gt;</ph> method whenever you need to make changes to the parts available to the <ph id="ph2">&lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer&gt;</ph>.</source>
          <target state="translated">Em vez disso, chame o <ph id="ph1">&lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer.Compose%2A&gt;</ph> método sempre que você precisa fazer alterações às partes disponíveis para o <ph id="ph2">&lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Compose(System.ComponentModel.Composition.Hosting.CompositionBatch)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.Composition.Hosting.CompositionBatch&gt;</ph> can contain both parts to be added and parts to be removed.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.ComponentModel.Composition.Hosting.CompositionBatch&gt;</ph> pode conter partes a serem adicionados e partes a ser removido.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Compose(System.ComponentModel.Composition.Hosting.CompositionBatch)">
          <source>Recomposition will take place only once for each call to <ph id="ph1">&lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer.Compose%2A&gt;</ph>.</source>
          <target state="translated">Recomposition ocorrerá apenas uma vez para cada chamada para <ph id="ph1">&lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer.Compose%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Compose(System.ComponentModel.Composition.Hosting.CompositionBatch)">
          <source>In this simple example, three parts are created and added to the <ph id="ph1">&lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer&gt;</ph>, and one part is retrieved to show that all imports have been filled.</source>
          <target state="translated">Neste exemplo simples, três partes são criados e adicionados para o <ph id="ph1">&lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer&gt;</ph>, e uma parte é recuperada para mostrar todas as importações foram preenchidas.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Compose(System.ComponentModel.Composition.Hosting.CompositionBatch)">
          <source>This example uses the Attributed Programming Model.</source>
          <target state="translated">Este exemplo usa o modelo de programação atribuído.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.Composition.Hosting.CompositionContainer">
          <source>Releases the resources used by the <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /&gt;</ph>.</source>
          <target state="translated">Libera os recursos usados pelo <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Dispose">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /&gt;</ph> class.</source>
          <target state="translated">Libera todos os recursos usados pela instância atual da classe <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Dispose">
          <source>Call <ph id="ph1">`Dispose`</ph> when you are finished using the <ph id="ph2">&lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer&gt;</ph>.</source>
          <target state="translated">Chamar <ph id="ph1">`Dispose`</ph> quando tiver terminado de usar o <ph id="ph2">&lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Dispose">
          <source>The <ph id="ph1">`Dispose`</ph> method leaves the <ph id="ph2">&lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer&gt;</ph> in an unusable state.</source>
          <target state="translated">O <ph id="ph1">`Dispose`</ph> método deixa o <ph id="ph2">&lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer&gt;</ph> em um estado inutilizável.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Dispose">
          <source>After calling <ph id="ph1">`Dispose`</ph>, you must release all references to the <ph id="ph2">&lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer&gt;</ph> so the garbage collector can reclaim the memory that the <ph id="ph3">&lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer&gt;</ph> was occupying.</source>
          <target state="translated">Depois de chamar <ph id="ph1">`Dispose`</ph>, você deve liberar todas as referências para o <ph id="ph2">&lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer&gt;</ph> para o coletor de lixo possa recuperar a memória que o <ph id="ph3">&lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer&gt;</ph> estava ocupando.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Dispose">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">Para obter mais informações, consulte <bpt id="p1">[</bpt>limpeza de recursos não gerenciados<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> e <bpt id="p2">[</bpt>implementar um método Dispose<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Dispose">
          <source>Always call <ph id="ph1">`Dispose`</ph> before you release your last reference to the <ph id="ph2">&lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer&gt;</ph>.</source>
          <target state="translated">Sempre chamar <ph id="ph1">`Dispose`</ph> antes de liberar sua última referência para o <ph id="ph2">&lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Dispose">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id="ph1">&lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer&gt;</ph> object's <ph id="ph2">`Finalize`</ph> method.</source>
          <target state="translated">Caso contrário, os recursos que está usando não serão liberados até que o coletor de lixo chame o <ph id="ph1">&lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer&gt;</ph> do objeto <ph id="ph2">`Finalize`</ph> método.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> para liberar recursos gerenciados e não gerenciados; <ph id="ph2">&lt;see langword="false" /&gt;</ph> para liberar apenas recursos não gerenciados.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /&gt;</ph> and optionally releases the managed resources.</source>
          <target state="translated">Libera os recursos não gerenciados usados pelo <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /&gt;</ph> e opcionalmente libera os recursos gerenciados.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)">
          <source>The object that defines the conditions of the <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Primitives.Export" /&gt;</ph> objects to get.</source>
          <target state="translated">O objeto que define as condições dos objetos <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Primitives.Export" /&gt;</ph> a serem obtidas.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)">
          <source>The composition transaction to use, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> to disable transactional composition.</source>
          <target state="translated">A transação de composição a ser usada ou <ph id="ph1">&lt;see langword="null" /&gt;</ph> para desabilitar a composição transacional.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)">
          <source>Returns a collection of all exports that match the conditions in the specified <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /&gt;</ph> object.</source>
          <target state="translated">Retorna uma coleção de todas as exportações que correspondem às condições no objeto <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /&gt;</ph> especificado.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)">
          <source>A collection of all the <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Primitives.Export" /&gt;</ph> objects in this <ph id="ph2">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /&gt;</ph> object that match the conditions specified by <ph id="ph3">&lt;paramref name="definition" /&gt;</ph>.</source>
          <target state="translated">Uma coleção de todos os objetos <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Primitives.Export" /&gt;</ph> neste objeto <ph id="ph2">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /&gt;</ph> que correspondem às condições especificadas pelo <ph id="ph3">&lt;paramref name="definition" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)">
          <source>Implementations should not treat cardinality-related mismatches as errors and should not throw exceptions for cardinality-related mismatches.</source>
          <target state="translated">Implementações não devem tratar incompatibilidades de cardinalidade como erros e não devem lançar exceções para incompatibilidades de cardinalidade.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)">
          <source>For example, if the import requests exactly one export and the provider has either no matching exports or more than one, the <ph id="ph1">&lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer.GetExportsCore%2A&gt;</ph> method should return an empty <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> collection of <ph id="ph3">&lt;xref:System.ComponentModel.Composition.Primitives.Export&gt;</ph> objects.</source>
          <target state="translated">Por exemplo, se a importação solicita exatamente uma exportação e o provedor tem nenhum exportações de correspondência ou em mais de um, o <ph id="ph1">&lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer.GetExportsCore%2A&gt;</ph> método deve retornar vazio <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> coleção de <ph id="ph3">&lt;xref:System.ComponentModel.Composition.Primitives.Export&gt;</ph> objetos.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers">
          <source>Gets the export providers that provide the container access to additional <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /&gt;</ph> objects.</source>
          <target state="translated">Obtém os provedores de exportação que fornecem ao contêiner acesso a objetos <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /&gt;</ph> adicionais.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers">
          <source>A collection of <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /&gt;</ph> objects that provide the <ph id="ph2">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /&gt;</ph> access to additional <ph id="ph3">&lt;see cref="T:System.ComponentModel.Composition.Primitives.Export" /&gt;</ph> objects.</source>
          <target state="translated">Uma coleção de <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /&gt;</ph> objetos que fornecem o <ph id="ph2">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /&gt;</ph> acesso a mais <ph id="ph3">&lt;see cref="T:System.ComponentModel.Composition.Primitives.Export" /&gt;</ph> objetos.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers">
          <source>The default is an empty <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /&gt;</ph>.</source>
          <target state="translated">O padrão é um <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /&gt;</ph> vazio.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers">
          <source>The <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /&gt;</ph> has been disposed of.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /&gt;</ph> foi descartado.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExport(System.ComponentModel.Composition.Primitives.Export)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Primitives.Export" /&gt;</ph> that needs to be released.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Primitives.Export" /&gt;</ph> que precisa ser liberado.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExport(System.ComponentModel.Composition.Primitives.Export)">
          <source>Releases the specified <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Primitives.Export" /&gt;</ph> object from the <ph id="ph2">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /&gt;</ph>.</source>
          <target state="translated">Libera o objeto <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Primitives.Export" /&gt;</ph> especificado do <ph id="ph2">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExport(System.ComponentModel.Composition.Primitives.Export)">
          <source>The behavior of this method may vary depending on the implementation of the <ph id="ph1">&lt;xref:System.ComponentModel.Composition.Hosting.ExportProvider&gt;</ph> that produced the <ph id="ph2">&lt;xref:System.ComponentModel.Composition.Primitives.Export&gt;</ph> instance.</source>
          <target state="translated">O comportamento desse método pode variar dependendo da implementação do <ph id="ph1">&lt;xref:System.ComponentModel.Composition.Hosting.ExportProvider&gt;</ph> que produziu o <ph id="ph2">&lt;xref:System.ComponentModel.Composition.Primitives.Export&gt;</ph> instância.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExport(System.ComponentModel.Composition.Primitives.Export)">
          <source>As a rule, non-shared exports should be detached from the container.</source>
          <target state="translated">Como regra, exportações não compartilhado devem ser desanexadas do contêiner.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExport(System.ComponentModel.Composition.Primitives.Export)">
          <source>For example, the <ph id="ph1">&lt;xref:System.ComponentModel.Composition.Hosting.CatalogExportProvider&gt;</ph> will only release an <ph id="ph2">&lt;xref:System.ComponentModel.Composition.Primitives.Export&gt;</ph> if it comes from a <ph id="ph3">&lt;xref:System.ComponentModel.Composition.Primitives.ComposablePart&gt;</ph> that was constructed under a <ph id="ph4">&lt;xref:System.ComponentModel.Composition.CreationPolicy.NonShared&gt;</ph> context.</source>
          <target state="translated">Por exemplo, o <ph id="ph1">&lt;xref:System.ComponentModel.Composition.Hosting.CatalogExportProvider&gt;</ph> será apenas a versão um <ph id="ph2">&lt;xref:System.ComponentModel.Composition.Primitives.Export&gt;</ph> se se trata de um <ph id="ph3">&lt;xref:System.ComponentModel.Composition.Primitives.ComposablePart&gt;</ph> que foi construída em uma <ph id="ph4">&lt;xref:System.ComponentModel.Composition.CreationPolicy.NonShared&gt;</ph> contexto.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExport(System.ComponentModel.Composition.Primitives.Export)">
          <source>Release in this context means walking the dependency chain of the <ph id="ph1">&lt;xref:System.ComponentModel.Composition.Primitives.Export&gt;</ph> objects, detaching references from the container and calling <ph id="ph2">`Dispose`</ph> on the <ph id="ph3">&lt;xref:System.ComponentModel.Composition.Primitives.ComposablePart&gt;</ph> objects as needed.</source>
          <target state="translated">Versão neste contexto significa percorrer a cadeia de dependência da <ph id="ph1">&lt;xref:System.ComponentModel.Composition.Primitives.Export&gt;</ph> objetos, referências do contêiner e chamar a desanexação <ph id="ph2">`Dispose`</ph> no <ph id="ph3">&lt;xref:System.ComponentModel.Composition.Primitives.ComposablePart&gt;</ph> objetos conforme necessário.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExport(System.ComponentModel.Composition.Primitives.Export)">
          <source>If the <ph id="ph1">&lt;xref:System.ComponentModel.Composition.Primitives.Export&gt;</ph> was constructed under a <ph id="ph2">&lt;xref:System.ComponentModel.Composition.CreationPolicy.Shared&gt;</ph> context the <ph id="ph3">&lt;xref:System.ComponentModel.Composition.Hosting.CatalogExportProvider&gt;</ph> will do nothing, as the specified <ph id="ph4">&lt;xref:System.ComponentModel.Composition.Primitives.Export&gt;</ph> may being used by other requestors.</source>
          <target state="translated">Se o <ph id="ph1">&lt;xref:System.ComponentModel.Composition.Primitives.Export&gt;</ph> foi construído em uma <ph id="ph2">&lt;xref:System.ComponentModel.Composition.CreationPolicy.Shared&gt;</ph> contexto a <ph id="ph3">&lt;xref:System.ComponentModel.Composition.Hosting.CatalogExportProvider&gt;</ph> não fará nada, como especificado <ph id="ph4">&lt;xref:System.ComponentModel.Composition.Primitives.Export&gt;</ph> que está sendo usado por outros solicitantes de maio.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExport(System.ComponentModel.Composition.Primitives.Export)">
          <source>Those will only be detached when the container is itself disposed.</source>
          <target state="translated">Aqueles só serão desanexados quando o contêiner é descartado.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExport(System.ComponentModel.Composition.Primitives.Export)">
          <source><ph id="ph1">&lt;paramref name="export" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="export" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExport``1(System.Lazy{``0})">
          <source>The type of the export.</source>
          <target state="translated">O tipo de exportação.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExport``1(System.Lazy{``0})">
          <source>An indirect reference to the export to remove.</source>
          <target state="translated">Uma referência indireta à exportação a ser removida.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExport``1(System.Lazy{``0})">
          <source>Removes the specified export from composition and releases its resources if possible.</source>
          <target state="translated">Remove a exportação especificada de composição e libera seus recursos, se possível.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.Export})">
          <source>A collection of <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Primitives.Export" /&gt;</ph> objects to be released.</source>
          <target state="translated">Uma coleção de objetos <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Primitives.Export" /&gt;</ph> a serem liberados.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.Export})">
          <source>Releases a set of <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Primitives.Export" /&gt;</ph> objects from the <ph id="ph2">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /&gt;</ph>.</source>
          <target state="translated">Libera um conjunto de objetos <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Primitives.Export" /&gt;</ph> do <ph id="ph2">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.Export})">
          <source>The behavior of this method may vary depending on the context in which the <ph id="ph1">&lt;xref:System.ComponentModel.Composition.Primitives.Export&gt;</ph> was constructed.</source>
          <target state="translated">O comportamento desse método pode variar dependendo do contexto no qual o <ph id="ph1">&lt;xref:System.ComponentModel.Composition.Primitives.Export&gt;</ph> foi construído.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.Export})">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExport%2A&gt;</ph> method.</source>
          <target state="translated">Para obter mais informações, consulte o método <ph id="ph1">&lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExport%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.Export})">
          <source><ph id="ph1">&lt;paramref name="exports" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="exports" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.Export})">
          <source><ph id="ph1">&lt;paramref name="exports" /&gt;</ph> contains an element that is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="exports" /&gt;</ph> contém um elemento que é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports``1(System.Collections.Generic.IEnumerable{System.Lazy{``0}})">
          <source>The type of the exports.</source>
          <target state="translated">O tipo de exportação.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports``1(System.Collections.Generic.IEnumerable{System.Lazy{``0}})">
          <source>A collection of indirect references to the exports to be removed.</source>
          <target state="translated">Uma coleção de referências indiretas às exportações a serem removidas.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports``1(System.Collections.Generic.IEnumerable{System.Lazy{``0}})">
          <source>Removes a collection of exports from composition and releases their resources if possible.</source>
          <target state="translated">Remove uma coleção de exportações da composição e libera seus recursos, se possível.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports``2(System.Collections.Generic.IEnumerable{System.Lazy{``0,``1}})">
          <source>The type of the exports.</source>
          <target state="translated">O tipo de exportação.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports``2(System.Collections.Generic.IEnumerable{System.Lazy{``0,``1}})">
          <source>The type of the exports' metadata view.</source>
          <target state="translated">O tipo de exibição de metadados as exportações.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports``2(System.Collections.Generic.IEnumerable{System.Lazy{``0,``1}})">
          <source>A collection of indirect references to the exports to be removed and their metadata.</source>
          <target state="translated">Uma coleção de referências indiretas às exportações a serem removidas e seus metadados.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports``2(System.Collections.Generic.IEnumerable{System.Lazy{``0,``1}})">
          <source>Removes a collection of exports from composition and releases their resources if possible.</source>
          <target state="translated">Remove uma coleção de exportações da composição e libera seus recursos, se possível.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.SatisfyImportsOnce(System.ComponentModel.Composition.Primitives.ComposablePart)">
          <source>The part to satisfy the imports of.</source>
          <target state="translated">A parte da qual satisfazer as importações.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.SatisfyImportsOnce(System.ComponentModel.Composition.Primitives.ComposablePart)">
          <source>Satisfies the imports of the specified <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /&gt;</ph> object without registering it for recomposition.</source>
          <target state="translated">Satisfaz as importações do objeto <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /&gt;</ph> especificado sem registrá-lo para recomposição.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.SatisfyImportsOnce(System.ComponentModel.Composition.Primitives.ComposablePart)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /&gt;</ph> object has been disposed of.</source>
          <target state="translated">O objeto <ph id="ph1">&lt;see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /&gt;</ph> foi descartado.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.SatisfyImportsOnce(System.ComponentModel.Composition.Primitives.ComposablePart)">
          <source><ph id="ph1">&lt;paramref name="part" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="part" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.SatisfyImportsOnce(System.ComponentModel.Composition.Primitives.ComposablePart)">
          <source>An error occurred during composition.</source>
          <target state="translated">Ocorreu um erro durante a composição.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Composition.Hosting.CompositionContainer.SatisfyImportsOnce(System.ComponentModel.Composition.Primitives.ComposablePart)">
          <source><ph id="ph1">&lt;see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /&gt;</ph> will contain a collection of the errors that occurred.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /&gt;</ph> conterá uma coleção dos erros ocorridos.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>