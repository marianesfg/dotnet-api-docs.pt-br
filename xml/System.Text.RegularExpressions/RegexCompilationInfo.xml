<Type Name="RegexCompilationInfo" FullName="System.Text.RegularExpressions.RegexCompilationInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f164cfc9abe8e849fb31f3e1ac69fd860eddbf89" />
    <Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="11/27/2018" />
    <Meta Name="ms.locfileid" Value="52371114" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class RegexCompilationInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit RegexCompilationInfo extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.RegexCompilationInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class RegexCompilationInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class RegexCompilationInfo" />
  <TypeSignature Language="F#" Value="type RegexCompilationInfo = class" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fornece informações sobre uma expressão regular usada para compilar uma expressão regular para um assembly autônomo.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uma matriz de <xref:System.Text.RegularExpressions.RegexCompilationInfo> objetos é passada para o <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> método para fornecer informações sobre cada expressão regular a ser incluído no assembly. Cada expressão regular compilada que está incluído no assembly é representada como uma classe derivada de <xref:System.Text.RegularExpressions.Regex>. As propriedades do <xref:System.Text.RegularExpressions.RegexCompilationInfo> nome da classe da expressão regular, seu nome totalmente qualificado (isto é, seu nome de tipo e seu namespace), o padrão de expressão regular, quaisquer opções adicionais (como se a expressão regular é a definição de tipo diferencia maiusculas de minúsculas) e um intervalo de tempo limite que especifica quanto tempo o mecanismo de expressões regulares deve procurar uma correspondência.  
  
 Você pode instanciar um <xref:System.Text.RegularExpressions.RegexCompilationInfo> objeto chamando seu construtor de classe sobrecarregados.  
  
 ]]></format>
    </remarks>
    <altmember cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />
    <related type="Article" href="~/docs/standard/base-types/compilation-and-reuse-in-regular-expressions.md">Compilação e reutilização</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" />.</summary>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">Elementos de linguagem de expressão regular</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegexCompilationInfo (string pattern, System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (pattern As String, options As RegexOptions, name As String, fullnamespace As String, ispublic As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegexCompilationInfo(System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options, System::String ^ name, System::String ^ fullnamespace, bool ispublic);" />
      <MemberSignature Language="F#" Value="new System.Text.RegularExpressions.RegexCompilationInfo : string * System.Text.RegularExpressions.RegexOptions * string * string * bool -&gt; System.Text.RegularExpressions.RegexCompilationInfo" Usage="new System.Text.RegularExpressions.RegexCompilationInfo (pattern, options, name, fullnamespace, ispublic)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="fullnamespace" Type="System.String" />
        <Parameter Name="ispublic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="pattern">A expressão regular a ser compilada.</param>
        <param name="options">As opções de expressão regular a serem usadas ao compilar a expressão regular.</param>
        <param name="name">O nome do tipo que representa a expressão regular compilada.</param>
        <param name="fullnamespace">O namespace ao qual o novo tipo pertence.</param>
        <param name="ispublic">
          <see langword="true" /> para tornar a expressão regular compilada publicamente visível; caso contrário, <see langword="false" />.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> que contém informações sobre uma expressão regular a ser incluída em um assembly.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cada parâmetro do <xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> construtor corresponde diretamente a uma propriedade do <xref:System.Text.RegularExpressions.RegexCompilationInfo> classe. Como todas as propriedades são de leitura/gravação, seus valores também podem ser atribuídos diretamente.  
  
 O <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> método gera um assembly que contém expressões regulares compiladas. Portanto, você não deve especificar <xref:System.Text.RegularExpressions.RegexOptions.Compiled> como um dos valores de `options`.  
  
 Se `ispublic` é `true`, a classe de expressão regular compilada tem acessibilidade pública. Ou seja, podem ser instanciado do código que é executado em qualquer assembly. Se `ispublic` está `false`, a classe de expressão regular compilada é dada `internal` (em c#) ou `Friend` (no Visual Basic) acessibilidade. Ou seja, ele pode ser instanciado somente de código que é executado no mesmo assembly como a classe de expressão regular.  
  
   
  
## Examples  
 O exemplo a seguir cria e usa uma expressão regular compilada em duas etapas.  
  
 Na primeira etapa, compile e execute o exemplo de código a seguir. O <xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%2A> construtor no exemplo de código define uma expressão regular compilada. O resultado da execução do código é um assembly denominado FishRegex.dll que contém um tipo de expressão regular compilada chamado `FishRegex`.  
  
 [!code-csharp[sys.txt.rgxCompInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.txt.rgxCompInfo/cs/genFishRegex.cs#1)]
 [!code-vb[sys.txt.rgxCompInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.txt.rgxCompInfo/vb/genFishRegex.vb#1)]  
  
 Na segunda etapa, compile o exemplo de código usando uma referência a FishRegex.dll e, em seguida, execute o arquivo executável resultante. O arquivo executável corresponde a uma cadeia de caracteres de destino usando o `FishRegex` digite e exibe a correspondência, grupo, grupo de captura e a posição de índice de correspondências na cadeia de caracteres de destino.  
  
 [!code-csharp[sys.txt.rgxCompInfo#2](~/samples/snippets/csharp/VS_Snippets_CLR/sys.txt.rgxCompInfo/cs/useFishRegex.cs#2)]
 [!code-vb[sys.txt.rgxCompInfo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.txt.rgxCompInfo/vb/useFishRegex.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> é <see cref="F:System.String.Empty" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pattern" /> é <see langword="null" />.  
  
- ou - 
 <paramref name="name" /> é <see langword="null" />.  
  
- ou - 
 <paramref name="fullnamespace" /> é <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>Este construtor cria uma expressão regular compilada que usa o valor de tempo limite padrão do domínio do aplicativo no qual ele é criado. Se um valor de tempo limite é definido para o domínio do aplicativo, a expressão regular compilada usa o valor <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, que impede que uma operação de correspondência de padrões de tempo limite. O construtor recomendado para a criação de uma expressão regular compilada é <see cref="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean,System.TimeSpan)" />, que permite que você definir o intervalo de tempo limite.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegexCompilationInfo (string pattern, System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (pattern As String, options As RegexOptions, name As String, fullnamespace As String, ispublic As Boolean, matchTimeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegexCompilationInfo(System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options, System::String ^ name, System::String ^ fullnamespace, bool ispublic, TimeSpan matchTimeout);" />
      <MemberSignature Language="F#" Value="new System.Text.RegularExpressions.RegexCompilationInfo : string * System.Text.RegularExpressions.RegexOptions * string * string * bool * TimeSpan -&gt; System.Text.RegularExpressions.RegexCompilationInfo" Usage="new System.Text.RegularExpressions.RegexCompilationInfo (pattern, options, name, fullnamespace, ispublic, matchTimeout)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="fullnamespace" Type="System.String" />
        <Parameter Name="ispublic" Type="System.Boolean" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="pattern">A expressão regular a ser compilada.</param>
        <param name="options">As opções de expressão regular a serem usadas ao compilar a expressão regular.</param>
        <param name="name">O nome do tipo que representa a expressão regular compilada.</param>
        <param name="fullnamespace">O namespace ao qual o novo tipo pertence.</param>
        <param name="ispublic">
          <see langword="true" /> para tornar a expressão regular compilada publicamente visível; caso contrário, <see langword="false" />.</param>
        <param name="matchTimeout">O intervalo de tempo limite padrão para a expressão regular.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> que contém informações sobre uma expressão regular com um valor de tempo limite especificado a ser incluído em um assembly.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cada parâmetro do <xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> construtor corresponde diretamente a uma propriedade do <xref:System.Text.RegularExpressions.RegexCompilationInfo> classe. Como todas as propriedades são de leitura/gravação, seus valores também podem ser atribuídos diretamente.  
  
 O <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> método gera um assembly que contém expressões regulares compiladas. Portanto, você não deve especificar <xref:System.Text.RegularExpressions.RegexOptions.Compiled> como um dos valores de `options`.  
  
 Se `ispublic` é `true`, a classe de expressão regular compilada tem acessibilidade pública. Ou seja, podem ser instanciado do código que é executado em qualquer assembly. Se `ispublic` está `false`, a classe de expressão regular compilada é dada `internal` (em c#) ou `Friend` (no Visual Basic) acessibilidade. Ou seja, ele pode ser instanciado somente de código que é executado no mesmo assembly como a classe de expressão regular.  
  
 O `matchTimeout` parâmetro define o intervalo de tempo limite padrão para a expressão regular compilada. Esse valor representa a quantidade aproximada de hora em que um objeto de expressão regular compilada executará uma única operação correspondente antes da operação expirar e o mecanismo de expressões regulares gerará um <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exceção durante a próxima verificação de tempo . Para obter informações adicionais sobre o valor de tempo limite, consulte o <xref:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout%2A> propriedade.  
  
> [!IMPORTANT]
>  É recomendável que você sempre pode definir um valor de tempo limite padrão para uma expressão regular compilada. Os consumidores de sua biblioteca de expressões regulares podem substituir esse valor de tempo limite, passando um <xref:System.TimeSpan> valor que representa o novo intervalo de tempo limite para essa sobrecarga de construtor.  
  
   
  
## Examples  
 O exemplo a seguir define uma única expressão regular compilada chamada `DuplicateChars` que identifica duas ou mais ocorrências do mesmo caractere em uma cadeia de caracteres de entrada. A expressão regular compilada tem um tempo limite padrão de 2 segundos. Quando você executar o exemplo, ele cria uma biblioteca de classes chamada RegexLib.dll que contém a expressão regular compilada.  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1.vb#1)]  
  
 O padrão de expressão regular `(\w)\1+` é definido conforme mostrado na tabela a seguir.  
  
|Padrão|Descrição|  
|-------------|-----------------|  
|`(\w)`|Corresponde qualquer caractere de palavra e o atribui ao primeiro grupo de captura.|  
|`\1+`|Corresponde a uma ou mais ocorrências do valor do primeiro grupo capturado.|  
  
 O exemplo a seguir usa o `DuplicatedChars` expressão regular para identificar a caracteres duplicados em uma matriz de cadeia de caracteres. Quando ele chama o `DuplicatedChars` construtor, ele altera o intervalo de tempo limite para 0,5 segundo.  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1a.cs#2)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1a.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> é <see cref="F:System.String.Empty" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pattern" /> é <see langword="null" />.  
  
- ou - 
 <paramref name="name" /> é <see langword="null" />.  
  
- ou - 
 <paramref name="fullnamespace" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="matchTimeout" /> é negativo, zero ou maior que aproximadamente 24 dias.</exception>
        <altmember cref="P:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout" />
      </Docs>
    </Member>
    <Member MemberName="IsPublic">
      <MemberSignature Language="C#" Value="public bool IsPublic { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPublic" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.IsPublic" />
      <MemberSignature Language="VB.NET" Value="Public Property IsPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPublic { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsPublic : bool with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.IsPublic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define um valor que indica se a expressão regular compilada tem visibilidade pública.</summary>
        <value>
          <see langword="true" /> Se a expressão regular tem visibilidade pública; Caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se o <xref:System.Text.RegularExpressions.RegexCompilationInfo.IsPublic%2A> é de propriedade `false`, a classe de expressão regular definida pela instância atual pode ser instanciada somente pelo código que está em execução no assembly que contém a classe. No entanto, porque o <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A?displayProperty=nameWithType> método gera um assembly que contém somente expressões regulares compiladas e não permite código adicional a ser adicionado, em geral, não há nenhum motivo para atribuir essa propriedade um valor de `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MatchTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan MatchTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan MatchTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property MatchTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan MatchTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.MatchTimeout : TimeSpan with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o intervalo de tempo limite padrão da expressão regular.</summary>
        <value>O intervalo de tempo máximo padrão que pode decorrer em uma operação de correspondência antes de uma <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> é lançada, ou <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> se os tempos limite estão desabilitados.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout%2A> propriedade define o intervalo de tempo limite padrão para a expressão regular compilada. Esse valor representa o período de tempo aproximado que uma expressão regular compilada executará uma única operação correspondente antes da operação expirar e o mecanismo de expressões regulares gerará um <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exceção durante a próxima verificação de tempo.  
  
> [!IMPORTANT]
>  É recomendável que você sempre pode definir um valor de tempo limite padrão para uma expressão regular compilada. Os consumidores de sua biblioteca de expressões regulares podem substituir esse valor de tempo limite, passando um <xref:System.TimeSpan> valor que representa o novo intervalo de tempo limite para o construtor de classe da expressão regular compilada.  
  
 Você pode atribuir um valor de tempo limite padrão para um <xref:System.Text.RegularExpressions.RegexCompilationInfo> objeto em qualquer uma das seguintes maneiras:  
  
-   Chamando o <xref:System.AppDomain.SetData%2A?displayProperty=nameWithType> método e fornecer a representação de cadeia de caracteres de um <xref:System.TimeSpan> valor para a propriedade "REGEX_DEFAULT_MATCH_TIMEOUT".  
  
-   Chamando o <xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%2CSystem.TimeSpan%29> construtor e fornecer um valor para o `matchTimeout` parâmetro.  
  
-   Definindo o valor dessa propriedade.  
  
 Para definir um intervalo de tempo limite razoável, considere os seguintes fatores:  
  
-   O comprimento e a complexidade do padrão de expressão regular. Expressões regulares mais longas e complexas requerem mais tempo do que aqueles mais curtos e simples.  
  
-   A carga esperada máquina. Processamento leva mais tempo em sistemas com alta utilização de CPU e memória.  
  
   
  
## Examples  
 O exemplo a seguir define uma única expressão regular compilada chamada `DuplicateChars` que identifica duas ou mais ocorrências do mesmo caractere em uma cadeia de caracteres de entrada. A expressão regular compilada tem um tempo limite padrão de 2 segundos. Quando você executar o exemplo, ele cria uma biblioteca de classes chamada RegexLib.dll que contém a expressão regular compilada.  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1.vb#1)]  
  
 O padrão de expressão regular `(\w)\1+` é definido conforme mostrado na tabela a seguir.  
  
|Padrão|Descrição|  
|-------------|-----------------|  
|`(\w)`|Corresponde qualquer caractere de palavra e o atribui ao primeiro grupo de captura.|  
|`\1+`|Corresponde a uma ou mais ocorrências do valor do primeiro grupo capturado.|  
  
 O exemplo a seguir usa o `DuplicatedChars` expressão regular para identificar a caracteres duplicados em uma matriz de cadeia de caracteres. Quando ele chama o `DuplicatedChars` construtor, ele altera o intervalo de tempo limite para 0,5 segundo.  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1a.cs#2)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1a.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean,System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o nome do tipo que representa a expressão regular compilada.</summary>
        <value>O nome do novo tipo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Text.RegularExpressions.RegexCompilationInfo> classe é usada para definir uma expressão regular compilada, o que é representada como uma classe derivada de <xref:System.Text.RegularExpressions.Regex>. O <xref:System.Text.RegularExpressions.RegexCompilationInfo.Name%2A> propriedade define o nome da classe do tipo de expressão regular e o <xref:System.Text.RegularExpressions.RegexCompilationInfo.Namespace%2A> e <xref:System.Text.RegularExpressions.RegexCompilationInfo.Name%2A> propriedades juntas definem seu nome totalmente qualificado.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">O valor dessa propriedade é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">O valor dessa propriedade é uma cadeia de caracteres vazia.</exception>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o namespace ao qual o novo tipo pertence.</summary>
        <value>O namespace do novo tipo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Text.RegularExpressions.RegexCompilationInfo> classe é usada para definir uma expressão regular compilada, o que é representada como uma classe derivada de <xref:System.Text.RegularExpressions.Regex>. O <xref:System.Text.RegularExpressions.RegexCompilationInfo.Namespace%2A> propriedade define o namespace que contém o tipo de expressão regular compilada, e o <xref:System.Text.RegularExpressions.RegexCompilationInfo.Namespace%2A> e <xref:System.Text.RegularExpressions.RegexCompilationInfo.Name%2A> propriedades juntas definem seu nome totalmente qualificado.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">O valor dessa propriedade é <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.RegexOptions Options { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.RegularExpressions.RegexOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Options" />
      <MemberSignature Language="VB.NET" Value="Public Property Options As RegexOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::RegularExpressions::RegexOptions Options { System::Text::RegularExpressions::RegexOptions get(); void set(System::Text::RegularExpressions::RegexOptions value); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.Text.RegularExpressions.RegexOptions with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.RegexOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define as opções a serem usadas ao compilar a expressão regular.</summary>
        <value>Um combinação bit a bit dos valores de enumeração.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> método gera um assembly que contém expressões regulares compiladas. Portanto, você não precisará especificar <xref:System.Text.RegularExpressions.RegexOptions.Compiled> como um dos valores dessa propriedade. Se estiver presente, o <xref:System.Text.RegularExpressions.RegexOptions.Compiled> opção será ignorada.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pattern">
      <MemberSignature Language="C#" Value="public string Pattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Pattern" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Pattern" />
      <MemberSignature Language="VB.NET" Value="Public Property Pattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Pattern { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Pattern : string with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.Pattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define a expressão regular a ser compilada.</summary>
        <value>A expressão regular a ser compilada.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Text.RegularExpressions.RegexCompilationInfo.Pattern%2A> propriedade pode conter qualquer expressão regular válida. Se o valor da <xref:System.Text.RegularExpressions.RegexCompilationInfo.Pattern%2A> propriedade não é um padrão de expressão regular sintaticamente correto, a chamada para o <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> método lança um <xref:System.ArgumentException>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">O valor dessa propriedade é <see langword="null" />.</exception>
        <related type="Article" href="~/docs/standard/base-types/regular-expressions.md">Expressões regulares do .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">Elementos de linguagem de expressão regular</related>
      </Docs>
    </Member>
  </Members>
</Type>