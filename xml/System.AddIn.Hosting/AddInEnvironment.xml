<Type Name="AddInEnvironment" FullName="System.AddIn.Hosting.AddInEnvironment">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="131ec90e9b0deda4040c4db8058a5fd0abfe5d96" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39860366" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class AddInEnvironment" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AddInEnvironment extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.AddIn.Hosting.AddInEnvironment" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AddInEnvironment" />
  <TypeSignature Language="C++ CLI" Value="public ref class AddInEnvironment sealed" />
  <TypeSignature Language="F#" Value="type AddInEnvironment = class" />
  <AssemblyInfo>
    <AssemblyName>System.AddIn</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornece acesso ao domínio do aplicativo e o processo de um suplemento.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use esta classe para carregar suplementos em um ambiente desejado, que pode ser um dos seguintes:  
  
-   Um domínio de aplicativo existente para os quais você tem o <xref:System.AppDomain> objeto.  
  
-   Um domínio do aplicativo que foi gerado automaticamente para ativar um suplemento.  
  
-   Um processo externo existente.  
  
 Para obter o <xref:System.AddIn.Hosting.AddInEnvironment> do objeto para um suplemento, passe domínio do aplicativo do suplemento para o <xref:System.AddIn.Hosting.AddInEnvironment> construtor de classe. Como alternativa, você pode usar o <xref:System.AddIn.Hosting.AddInController.AddInEnvironment%2A> propriedade do <xref:System.AddIn.Hosting.AddInController> classe para obter o suplemento <xref:System.AddIn.Hosting.AddInEnvironment> objeto.  
  
 Depois que você obtiver o <xref:System.AddIn.Hosting.AddInEnvironment> do objeto, você pode fazer o seguinte:  
  
-   Passá-lo <xref:System.AddIn.Hosting.AddInEnvironment> objeto apropriado <xref:System.AddIn.Hosting.AddInToken.Activate%2A> sobrecarga de método. O suplemento será ativado no domínio de aplicativo e o processo que é representado pela <xref:System.AddIn.Hosting.AddInEnvironment> objeto.  
  
-   Use o <xref:System.AddIn.Hosting.AddInEnvironment.Process%2A> propriedade para obter um <xref:System.AddIn.Hosting.AddInProcess> objeto. Em seguida, passe esse objeto para apropriado <xref:System.AddIn.Hosting.AddInToken.Activate%2A> sobrecarga de método. O suplemento será ativado no processo que é representado pelo <xref:System.AddIn.Hosting.AddInProcess> objeto, mas em um novo domínio de aplicativo.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AddInEnvironment (AppDomain appDomain);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.AppDomain appDomain) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.AddInEnvironment.#ctor(System.AppDomain)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AddInEnvironment(AppDomain ^ appDomain);" />
      <MemberSignature Language="F#" Value="new System.AddIn.Hosting.AddInEnvironment : AppDomain -&gt; System.AddIn.Hosting.AddInEnvironment" Usage="new System.AddIn.Hosting.AddInEnvironment appDomain" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="appDomain" Type="System.AppDomain" />
      </Parameters>
      <Docs>
        <param name="appDomain">O domínio do aplicativo que contém o suplemento.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.AddIn.Hosting.AddInEnvironment" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se você tiver acesso ao domínio do aplicativo que contém o suplemento que você precisa, você pode usar esse construtor para obter o suplemento <xref:System.AddIn.Hosting.AddInEnvironment> objeto. Caso contrário, você pode usar o <xref:System.AddIn.Hosting.AddInController.AddInEnvironment%2A> propriedade do <xref:System.AddIn.Hosting.AddInController> classe para obter o <xref:System.AddIn.Hosting.AddInEnvironment> objeto.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="appDomain" /> é <see langword="null" />.</exception>
        <exception cref="T:System.Security.SecurityException">A permissão de confiança total é exigida. Um chamador na cadeia de chamadas não tem permissão suficiente.</exception>
      </Docs>
    </Member>
    <Member MemberName="Process">
      <MemberSignature Language="C#" Value="public System.AddIn.Hosting.AddInProcess Process { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.AddIn.Hosting.AddInProcess Process" />
      <MemberSignature Language="DocId" Value="P:System.AddIn.Hosting.AddInEnvironment.Process" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Process As AddInProcess" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::AddIn::Hosting::AddInProcess ^ Process { System::AddIn::Hosting::AddInProcess ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Process : System.AddIn.Hosting.AddInProcess" Usage="System.AddIn.Hosting.AddInEnvironment.Process" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.AddIn.Hosting.AddInProcess</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o objeto <see cref="T:System.AddIn.Hosting.AddInProcess" /> que representa o processo no qual o suplemento está sendo executado.</summary>
        <value>O processo no qual o suplemento está em execução.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você pode usar essa propriedade para ativar vários suplementos no mesmo processo, mas em diferentes domínios.  
  
 Passe o <xref:System.AddIn.Hosting.AddInProcess> objeto obtido com essa propriedade ao apropriado <xref:System.AddIn.Hosting.AddInToken.Activate%2A> sobrecarga de método.  
  
 Se você quiser ativá-los no mesmo domínio em um processo externo deve passar o <xref:System.AddIn.Hosting.AddInEnvironment> objeto diretamente para o <xref:System.AddIn.Hosting.AddInToken.Activate%60%601%28System.AddIn.Hosting.AddInEnvironment%29?displayProperty=nameWithType> sobrecarga de método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>