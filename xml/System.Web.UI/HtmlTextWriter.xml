<Type Name="HtmlTextWriter" FullName="System.Web.UI.HtmlTextWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2cc525d453709d2420e7f9c513d74bf3bb1aadeb" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57924272" /></Metadata><TypeSignature Language="C#" Value="public class HtmlTextWriter : System.IO.TextWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi HtmlTextWriter extends System.IO.TextWriter" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.HtmlTextWriter" />
  <TypeSignature Language="VB.NET" Value="Public Class HtmlTextWriter&#xA;Inherits TextWriter" />
  <TypeSignature Language="C++ CLI" Value="public ref class HtmlTextWriter : System::IO::TextWriter" />
  <TypeSignature Language="F#" Value="type HtmlTextWriter = class&#xA;    inherit TextWriter" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IO.TextWriter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Grava caracteres de marcação e texto em um fluxo de saída do controle de servidor ASP.NET. Essa classe fornece recursos de formatação que os controles de servidor ASP.NET usam ao renderizar a marcação para os clientes.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.HtmlTextWriter> classe é usada para renderizar HTML 4.0 em navegadores de desktop. O <xref:System.Web.UI.HtmlTextWriter> também é a classe base para todos os gravadores de marcação na <xref:System.Web.UI> namespace, incluindo o <xref:System.Web.UI.ChtmlTextWriter>, <xref:System.Web.UI.Html32TextWriter>, e <xref:System.Web.UI.XhtmlTextWriter> classes. Essas classes são usadas para gravar os elementos, atributos e as informações de layout e estilo para tipos diferentes de marcação. Além disso, essas classes são usadas pelas classes do adaptador de página e controle que estão associadas com cada linguagem de marcação.  
  
 Na maioria das circunstâncias, o ASP.NET usa automaticamente o gravador apropriado para o dispositivo solicitante. No entanto, se você criar um text writer personalizado ou se você quiser especificar um gravador específico para renderizar uma página de um dispositivo específico, você deve mapear o gravador para a página no `controlAdapters` seção do arquivo. browser do aplicativo.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como substituir a <xref:System.Web.UI.Control.Render%2A> método de um controle personalizado que deriva de <xref:System.Web.UI.Control> classe. O exemplo de código ilustra como usar vários <xref:System.Web.UI.HtmlTextWriter> métodos, propriedades e campos.  
  
 [!code-csharp[MarkupTextWriter_Samples1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Samples1/CS/markuptextwriter_samples1.cs#1)]
 [!code-vb[MarkupTextWriter_Samples1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Samples1/VB/markuptextwriter_samples1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.TextWriter" />
    <altmember cref="T:System.Web.UI.Control" />
    <altmember cref="T:System.Web.UI.Page" />
    <altmember cref="T:System.Web.UI.Adapters.ControlAdapter" />
    <altmember cref="T:System.Web.UI.Adapters.PageAdapter" />
    <altmember cref="T:System.Web.UI.ChtmlTextWriter" />
    <altmember cref="T:System.Web.UI.Html32TextWriter" />
    <altmember cref="T:System.Web.UI.XhtmlTextWriter" />
    <altmember cref="M:System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Web.UI.HtmlTextWriter" />.</summary>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" />
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HtmlTextWriter (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.#ctor(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HtmlTextWriter(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.HtmlTextWriter : System.IO.TextWriter -&gt; System.Web.UI.HtmlTextWriter" Usage="new System.Web.UI.HtmlTextWriter writer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">A instância de <see cref="T:System.IO.TextWriter" /> que renderiza o conteúdo de marcação.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Web.UI.HtmlTextWriter" /> que usa uma cadeia de caracteres de tabulação padrão.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.HtmlTextWriter.%23ctor%2A> sobrecarga da <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%29> construtor usa o <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> constante quando recuo de uma linha é necessário. Ele chama o <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%2CSystem.String%29> sobrecarga para inicializar a nova instância.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como usar o <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%29> construtor para criar um personalizado <xref:System.Web.UI.HtmlTextWriter> objeto denominado `StyledLabelHtmlWriter.` quando o `MyPage` classe personalizada, que é derivada do <xref:System.Web.UI.Page> de classe, é solicitado por um cliente navegador, ele usa o `StyledLabelHtmlWriter` classe para processar seu conteúdo no fluxo de saída.  
  
 [!code-cpp[HtmlTextWriter_Methods3#10](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#10)]
 [!code-csharp[HtmlTextWriter_Methods3#10](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#10)]
 [!code-vb[HtmlTextWriter_Methods3#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HtmlTextWriter (System.IO.TextWriter writer, string tabString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer, string tabString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.#ctor(System.IO.TextWriter,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter, tabString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HtmlTextWriter(System::IO::TextWriter ^ writer, System::String ^ tabString);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.HtmlTextWriter : System.IO.TextWriter * string -&gt; System.Web.UI.HtmlTextWriter" Usage="new System.Web.UI.HtmlTextWriter (writer, tabString)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="tabString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer">O <see cref="T:System.IO.TextWriter" /> que renderiza o conteúdo de marcação.</param>
        <param name="tabString">A cadeia de caracteres a ser usada para renderizar um recuo de linha.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Web.UI.HtmlTextWriter" /> com um caractere de cadeia de caracteres de tabulação especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.HtmlTextWriter.%23ctor%2A> sobrecarga da <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%2CSystem.String%29> usa o construtor `tabString` quando o recuo de uma linha é necessário. Ele chama o <xref:System.IO.TextWriter.%23ctor%28System.IFormatProvider%29?displayProperty=nameWithType> construtor base para inicializar a nova instância.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como usar o <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%29> construtor para criar um personalizado <xref:System.Web.UI.HtmlTextWriter> objeto denominado `StyledLabelHtmlWriter.` quando o `MyPage` classe personalizada, que é derivada do <xref:System.Web.UI.Page> de classe, é solicitado por um cliente navegador, ele usa o `StyledLabelHtmlWriter` classe para processar seu conteúdo no fluxo de saída.  
  
 [!code-cpp[HtmlTextWriter_Methods3#10](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#10)]
 [!code-csharp[HtmlTextWriter_Methods3#10](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#10)]
 [!code-vb[HtmlTextWriter_Methods3#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AddAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Adiciona o atributo e valor de marcação especificados à marca de abertura do elemento que o objeto <see cref="T:System.Web.UI.HtmlTextWriter" /> cria com uma chamada posterior ao método <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddAttribute (name As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddAttribute(System::String ^ name, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member AddAttribute : string * string -&gt; unit&#xA;override this.AddAttribute : string * string -&gt; unit" Usage="htmlTextWriter.AddAttribute (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Uma cadeia de caracteres que contém o nome do atributo a ser adicionado.</param>
        <param name="value">Uma cadeia de caracteres que contém o valor a ser atribuído ao atributo.</param>
        <summary>Adiciona o atributo e valor de marcação especificados à marca de abertura do elemento que o objeto <see cref="T:System.Web.UI.HtmlTextWriter" /> cria com uma chamada posterior ao método <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> sobrecarga da <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%29> método se o atributo não é um do <xref:System.Web.UI.HtmlTextWriterAttribute> valores, ou se o atributo não é conhecido até o tempo de execução.  
  
 Para uma instância de qualquer elemento de marcação especificado, o <xref:System.Web.UI.HtmlTextWriter> classe mantém uma lista de atributos desse elemento. Quando o <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> método é chamado, todos os atributos adicionados pelo <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> método são renderizados para a marca de abertura do elemento. A lista de atributos, em seguida, é limpo do <xref:System.Web.UI.HtmlTextWriter> objeto.  
  
 O padrão de codificação para a renderização de elementos de marcação é da seguinte maneira:  
  
-   Use o <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> método para adicionar todos os atributos para o elemento.  
  
-   Use o método <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>.  
  
-   Use outros métodos conforme necessário para renderizar o conteúdo encontrado entre o elemento marcas de abertura e fechamento.  
  
-   Use o método <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como chamar o <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> método antes de chamar o <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> método. O código chama duas sobrecargas diferentes do <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> e duas sobrecargas diferentes de <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> antes de chamar o <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> método para renderizar um `<span>` elemento no fluxo de saída. O <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%29> método é usado para definir o atributo personalizado chamado `CustomAttribute` e o valor personalizado denominado `CustomAttributeValue` para o `<span>` elemento que este código renderiza.  
  
 [!code-csharp[MarkupTextWriter_Samples1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Samples1/CS/markuptextwriter_samples1.cs#2)]
 [!code-vb[MarkupTextWriter_Samples1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Samples1/VB/markuptextwriter_samples1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (System.Web.UI.HtmlTextWriterAttribute key, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(valuetype System.Web.UI.HtmlTextWriterAttribute key, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.Web.UI.HtmlTextWriterAttribute,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddAttribute (key As HtmlTextWriterAttribute, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddAttribute(System::Web::UI::HtmlTextWriterAttribute key, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member AddAttribute : System.Web.UI.HtmlTextWriterAttribute * string -&gt; unit&#xA;override this.AddAttribute : System.Web.UI.HtmlTextWriterAttribute * string -&gt; unit" Usage="htmlTextWriter.AddAttribute (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Um <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> que representa o atributo de marcação a ser adicionado ao fluxo de saída.</param>
        <param name="value">Uma cadeia de caracteres que contém o valor a ser atribuído ao atributo.</param>
        <summary>Adiciona o atributo de marcação e o valor de atributo à marca de abertura do elemento que o objeto <see cref="T:System.Web.UI.HtmlTextWriter" /> cria com uma chamada posterior ao método <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> sobrecarga da <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%29> método para processar um atributo de marcação padrão.  
  
 Para uma instância de qualquer elemento de marcação especificado, o <xref:System.Web.UI.HtmlTextWriter> classe mantém uma lista de atributos desse elemento. Quando o <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> método é chamado, todos os atributos adicionados pelo <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> método são renderizados para a marca de abertura do elemento. A lista de atributos, em seguida, é limpo do <xref:System.Web.UI.HtmlTextWriter>.  
  
 O padrão de codificação para a renderização de elementos de marcação é da seguinte maneira:  
  
-   Use o <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> método para adicionar todos os atributos para o elemento.  
  
-   Use o método <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>.  
  
-   Use outros métodos conforme necessário para renderizar o conteúdo encontrado entre o elemento marcas de abertura e fechamento.  
  
-   Use o método <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como usar o <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> sobrecarga da <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%29> para adicionar um `Onclick` de atributo para um elemento de marcação e, em seguida, defina seu valor como o seguinte código ECMAScript:  
  
```  
alert('Hello');  
```  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#1](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#1)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#1)]
 [!code-vb[System.Web.UI.HtmlTextWriter#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (string name, string value, bool fEndode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(string name, string value, bool fEndode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddAttribute (name As String, value As String, fEndode As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddAttribute(System::String ^ name, System::String ^ value, bool fEndode);" />
      <MemberSignature Language="F#" Value="abstract member AddAttribute : string * string * bool -&gt; unit&#xA;override this.AddAttribute : string * string * bool -&gt; unit" Usage="htmlTextWriter.AddAttribute (name, value, fEndode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEndode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">Uma cadeia de caracteres que contém o nome do atributo a ser adicionado.</param>
        <param name="value">Uma cadeia de caracteres que contém o valor a ser atribuído ao atributo.</param>
        <param name="fEndode"><see langword="true" /> para codificar o atributo e seu valor; caso contrário, <see langword="false" />.</param>
        <summary>Adiciona o valor e o atributo de marcação especificados à marca de abertura do elemento que o objeto <see cref="T:System.Web.UI.HtmlTextWriter" /> cria com uma chamada subsequente ao método <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />, com codificação opcional.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> sobrecarga da <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> método se o atributo não é um do <xref:System.Web.UI.HtmlTextWriterAttribute> valores, ou se o atributo não é conhecido até o tempo de execução e a codificação é necessária.  
  
 Para uma instância de qualquer elemento de marcação especificado, o <xref:System.Web.UI.HtmlTextWriter> classe mantém uma lista de atributos desse elemento. Quando o <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> método é chamado, todos os atributos adicionados pelo <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> método são renderizados para a marca de abertura do elemento. A lista de atributos, em seguida, é limpo do <xref:System.Web.UI.HtmlTextWriter> objeto.  
  
 Use o <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> método com `fEncode` definido como `true`, se o atributo possivelmente pode conter uma marca de aspas ("), um sinal de menor que (<), ou um e comercial (&). A chamada de método codificará o atributo para cumprir os requisitos do dispositivo solicitante. Você pode definir `fEncode` para `false`, se você souber que nenhum desses caracteres será gerado, ou se você souber que o atributo já está codificado.  
 
Se for o tipo de atributo `Style`, o valor não codificado, mesmo que `fEndode` é `true`. Certifique-se de que o valor de estilo é compatível com CSS e não contém código mal-intencionado.
  
 O padrão de codificação para a renderização de elementos de marcação é da seguinte maneira:  
  
-   Use o <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> método para adicionar todos os atributos para o elemento.  
  
-   Use o método <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>.  
  
-   Use outros métodos conforme necessário para renderizar o conteúdo encontrado entre o elemento marcas de abertura e fechamento.  
  
-   Use o método <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como usar o <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> sobrecarga da <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> método para garantir que um atributo personalizado, chamado `myattribute`, e seu valor não são codificados para um `<img>` elemento.  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#3)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.HttpRequest" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="protected virtual void AddAttribute (string name, string value, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddAttribute(string name, string value, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub AddAttribute (name As String, value As String, key As HtmlTextWriterAttribute)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void AddAttribute(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberSignature Language="F#" Value="abstract member AddAttribute : string * string * System.Web.UI.HtmlTextWriterAttribute -&gt; unit&#xA;override this.AddAttribute : string * string * System.Web.UI.HtmlTextWriterAttribute -&gt; unit" Usage="htmlTextWriter.AddAttribute (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">Uma cadeia de caracteres que contém o nome do atributo a ser adicionado.</param>
        <param name="value">Uma cadeia de caracteres que contém o valor a ser atribuído ao atributo.</param>
        <param name="key">Um <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> que representa o atributo.</param>
        <summary>Adiciona o atributo e valor de marcação especificados, juntamente com um valor de enumeração <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />, à marca de abertura do elemento que o objeto <see cref="T:System.Web.UI.HtmlTextWriter" /> cria com uma chamada subsequente ao método <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> sobrecarga da <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%2CSystem.Web.UI.HtmlTextWriterAttribute%29> método apenas ao herdar do <xref:System.Web.UI.HtmlTextWriter> classe. Ele permite que você crie um novo `name` e `key` pares de atributos.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (System.Web.UI.HtmlTextWriterAttribute key, string value, bool fEncode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(valuetype System.Web.UI.HtmlTextWriterAttribute key, string value, bool fEncode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.Web.UI.HtmlTextWriterAttribute,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddAttribute (key As HtmlTextWriterAttribute, value As String, fEncode As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddAttribute(System::Web::UI::HtmlTextWriterAttribute key, System::String ^ value, bool fEncode);" />
      <MemberSignature Language="F#" Value="abstract member AddAttribute : System.Web.UI.HtmlTextWriterAttribute * string * bool -&gt; unit&#xA;override this.AddAttribute : System.Web.UI.HtmlTextWriterAttribute * string * bool -&gt; unit" Usage="htmlTextWriter.AddAttribute (key, value, fEncode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEncode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="key">Um <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> que representa o atributo de marcação a ser adicionado ao fluxo de saída.</param>
        <param name="value">Uma cadeia de caracteres que contém o valor a ser atribuído ao atributo.</param>
        <param name="fEncode"><see langword="true" /> para codificar o atributo e seu valor; caso contrário, <see langword="false" />.</param>
        <summary>Adiciona o atributo de marcação e o valor de atributo à marca de abertura do elemento criado pelo objeto <see cref="T:System.Web.UI.HtmlTextWriter" /> com uma chamada posterior ao método <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />, com codificação opcional.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> sobrecarga da <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%2CSystem.Boolean%29> método para renderizar um atributo de marcação padrão, com codificação opcional.  
  
 Para uma instância de qualquer elemento de marcação especificado, o <xref:System.Web.UI.HtmlTextWriter> classe mantém uma lista de atributos desse elemento. Quando o <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> método é chamado, todos os atributos adicionados pelo <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> são renderizados para a marca de abertura do elemento. A lista de atributos, em seguida, é limpo do <xref:System.Web.UI.HtmlTextWriter> objeto.  
  
 Use o <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%2CSystem.Boolean%29> método com `fEncode` definido como `true`, se o atributo possivelmente pode conter uma marca de aspas ("), um sinal de menor que (<), ou um e comercial (&). A chamada de método codificará o atributo para cumprir os requisitos do dispositivo solicitante. Você pode definir `fEncode` para `false`, se você souber que nenhum desses caracteres será gerado, ou se você souber que o atributo já está codificado.  
 
 Se for o tipo de atributo `Style`, o valor não codificado, mesmo que `fEncode` é `true`. Certifique-se de que o valor de estilo é compatível com CSS e não contém código mal-intencionado.

  
 O padrão de codificação para a renderização de elementos de marcação é da seguinte maneira:  
  
-   Use o <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> método para adicionar todos os atributos para o elemento.  
  
-   Use o método <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>.  
  
-   Use outros métodos conforme necessário para renderizar o conteúdo encontrado entre o elemento marcas de abertura e fechamento.  
  
-   Use o método <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como usar o <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%2CSystem.Boolean%29> método para garantir que o valor de cadeia de caracteres que é atribuído a uma `Alt` atributo para um `<img>` elemento é codificado para o dispositivo solicitante.  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#3)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.HttpRequest" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AddStyleAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Adiciona um atributo de estilo de marcação à marca de abertura do elemento que o objeto <see cref="T:System.Web.UI.HtmlTextWriter" /> cria com uma chamada subsequente ao método <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />.</summary>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </MemberGroup>
    <Member MemberName="AddStyleAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddStyleAttribute (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddStyleAttribute(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddStyleAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddStyleAttribute (name As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddStyleAttribute(System::String ^ name, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member AddStyleAttribute : string * string -&gt; unit&#xA;override this.AddStyleAttribute : string * string -&gt; unit" Usage="htmlTextWriter.AddStyleAttribute (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Uma cadeia de caracteres que contém o atributo de estilo para adicionar.</param>
        <param name="value">Uma cadeia de caracteres que contém o valor a ser atribuído ao atributo.</param>
        <summary>Adiciona o atributo de estilo de marcação especificado e o valor do atributo para a marcação de abertura criada por uma chamada subsequente para o método <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> sobrecarga da <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%28System.String%2CSystem.String%29> método quando o estilo não é um membro do <xref:System.Web.UI.HtmlTextWriterStyle> enumeração ou não é conhecido até o tempo de execução.  
  
 O <xref:System.Web.UI.HtmlTextWriter> classe mantém uma lista de estilos para que ele renderiza os elementos de marcação. Quando o <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> método é chamado, todos os estilos que são adicionados pelo <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> método são renderizados para a marca de abertura do elemento. A lista de estilos, em seguida, está desmarcada.  
  
 O padrão de codificação para a renderização de elementos de marcação é da seguinte maneira:  
  
-   Use o <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> atributos de método para adicionar qualquer estilo para o elemento.  
  
-   Use o método <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>.  
  
-   Use outros métodos conforme necessário para renderizar o conteúdo encontrado entre as marcas de fechamento e a abertura do elemento.  
  
-   Use o método <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como usar o <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> sobrecarga da <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%28System.String%2CSystem.String%29> método para renderizar `font-size` e `color` atributos de estilo em uma `<p>` elemento. Este exemplo de código usa o <xref:System.Web.UI.HtmlTextWriter> classe para renderizar o conteúdo do controle.  
  
 [!code-cpp[HtmlTextWriter_AddStyleAttribute#1](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_AddStyleAttribute/CPP/htmltextwriter_addstyleattribute.cpp#1)]
 [!code-csharp[HtmlTextWriter_AddStyleAttribute#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_AddStyleAttribute/CS/htmltextwriter_addstyleattribute.cs#1)]
 [!code-vb[HtmlTextWriter_AddStyleAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_AddStyleAttribute/VB/htmltextwriter_addstyleattribute.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="AddStyleAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddStyleAttribute (System.Web.UI.HtmlTextWriterStyle key, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddStyleAttribute(valuetype System.Web.UI.HtmlTextWriterStyle key, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddStyleAttribute(System.Web.UI.HtmlTextWriterStyle,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddStyleAttribute (key As HtmlTextWriterStyle, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddStyleAttribute(System::Web::UI::HtmlTextWriterStyle key, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member AddStyleAttribute : System.Web.UI.HtmlTextWriterStyle * string -&gt; unit&#xA;override this.AddStyleAttribute : System.Web.UI.HtmlTextWriterStyle * string -&gt; unit" Usage="htmlTextWriter.AddStyleAttribute (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Um <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> que representa o atributo de estilo a ser adicionado ao fluxo de saída.</param>
        <param name="value">Uma cadeia de caracteres que contém o valor a ser atribuído ao atributo.</param>
        <summary>Adiciona o atributo de estilo de marcação associado ao valor <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> especificado e o valor do atributo para a marcação de abertura criada por uma chamada subsequente para o método <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> sobrecarga da <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%28System.Web.UI.HtmlTextWriterStyle%2CSystem.String%29> método quando o estilo é um membro do <xref:System.Web.UI.HtmlTextWriterStyle> enumeração e é conhecido antes do tempo de execução.  
  
 O <xref:System.Web.UI.HtmlTextWriter> classe mantém uma lista de estilos para que ele renderiza os elementos de marcação. Quando o <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> método é chamado, qualquer estilo adicionado pelo <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> método são renderizados para a marca de abertura do elemento. A lista de estilos, em seguida, está desmarcada.  
  
 O padrão de codificação para a renderização de elementos de marcação é da seguinte maneira:  
  
-   Use o <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> atributos de método para adicionar qualquer estilo para o elemento.  
  
-   Use o método <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>.  
  
-   Use outros métodos conforme necessário para renderizar o conteúdo encontrado entre as marcas de fechamento e a abertura do elemento.  
  
-   Use o método <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como usar a parte de uma substituição do <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> método em uma classe derivada do <xref:System.Web.UI.HtmlTextWriter> classe. O código verifica se um `<Label>` elemento está sendo renderizado. Nesse caso, o <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%2A> método é chamado para verificar se um `Color` atributo de estilo foi definido para o `<Label>` elemento. Se um `Color` atributo não tiver sido definido, o código chama essa sobrecarga da <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> para adicionar o `Color` de atributo para o atributo de estilo e, em seguida, defina seu valor como `red`.  
  
 [!code-cpp[HtmlTextWriter_Methods3#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#4)]
 [!code-csharp[HtmlTextWriter_Methods3#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#4)]
 [!code-vb[HtmlTextWriter_Methods3#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="AddStyleAttribute">
      <MemberSignature Language="C#" Value="protected virtual void AddStyleAttribute (string name, string value, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddStyleAttribute(string name, string value, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddStyleAttribute(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub AddStyleAttribute (name As String, value As String, key As HtmlTextWriterStyle)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void AddStyleAttribute(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberSignature Language="F#" Value="abstract member AddStyleAttribute : string * string * System.Web.UI.HtmlTextWriterStyle -&gt; unit&#xA;override this.AddStyleAttribute : string * string * System.Web.UI.HtmlTextWriterStyle -&gt; unit" Usage="htmlTextWriter.AddStyleAttribute (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">Uma cadeia de caracteres que contém o atributo de estilo a adicionar.</param>
        <param name="value">Uma cadeia de caracteres que contém o valor a ser atribuído ao atributo.</param>
        <param name="key">Um <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> que representa o atributo de estilo a adicionar.</param>
        <summary>Adiciona o atributo de estilo de marcação especificado e o valor do atributo, juntamente com um valor de enumeração <see cref="T:System.Web.UI.HtmlTextWriterStyle" />, à marcação de abertura criada por uma chamada subsequente para o método <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> sobrecarga da <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%28System.String%2CSystem.String%2CSystem.Web.UI.HtmlTextWriterStyle%29> método apenas ao herdar do <xref:System.Web.UI.HtmlTextWriter> classe. Ele permite que você crie um novo `name` e `value` pares para <xref:System.Web.UI.HtmlTextWriterStyle> atributos.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
      </Docs>
    </Member>
    <Member MemberName="BeginRender">
      <MemberSignature Language="C#" Value="public virtual void BeginRender ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginRender() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.BeginRender" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub BeginRender ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginRender();" />
      <MemberSignature Language="F#" Value="abstract member BeginRender : unit -&gt; unit&#xA;override this.BeginRender : unit -&gt; unit" Usage="htmlTextWriter.BeginRender " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Notifica um objeto <see cref="T:System.Web.UI.HtmlTextWriter" /> ou um objeto de uma classe derivada de que um controle está prestes a ser renderizado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.HtmlTextWriter> implementação da classe a <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A> método não tem nenhuma funcionalidade. Você deve substituir a <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A> método em uma classe derivada de <xref:System.Web.UI.HtmlTextWriter> para fornecer sua própria funcionalidade de renderização. Por exemplo, em uma linguagem de marcação que pode exigir `<p>` elementos a ser renderizada imediatamente à frente de um controle, mas onde está a necessidade do `<p>` elemento é determinado anteriormente, você pode usar o <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A> substituir.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.Control" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="htmlTextWriter.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Fecha o objeto <see cref="T:System.Web.UI.HtmlTextWriter" /> e libera os recursos do sistema associados a ele.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa implementação do <xref:System.Web.UI.HtmlTextWriter.Close%2A> chamadas de método o <xref:System.IO.TextWriter.Close%2A?displayProperty=nameWithType> método de base.  
  
 Após uma chamada para o <xref:System.Web.UI.HtmlTextWriter.Close%2A> método, todas as operações no <xref:System.Web.UI.HtmlTextWriter> objeto pode lançar exceções porque todos os seus recursos foram lançados.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.IO.TextWriter.Close" />
        <altmember cref="M:System.IO.TextWriter.Dispose(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="DefaultTabString">
      <MemberSignature Language="C#" Value="public const string DefaultTabString;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string DefaultTabString" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.DefaultTabString" />
      <MemberSignature Language="VB.NET" Value="Public Const DefaultTabString As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ DefaultTabString;" />
      <MemberSignature Language="F#" Value="val mutable DefaultTabString : string" Usage="System.Web.UI.HtmlTextWriter.DefaultTabString" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Representa um único caractere de tabulação.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A única guia é representada pelo caractere ASCII 9.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como criar um construtor que usa um <xref:System.IO.TextWriter> objeto como um parâmetro e passa o <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> campo como um argumento de parâmetro para uma segunda versão do construtor. Quando esse construtor é chamado de código, o <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> campo define a política de recuo para a instância do gravador de marcação que é usado por uma página ou um adaptador.  
  
 [!code-csharp[MarkupTextWriter_Methods3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods3/CS/overriddenmarkup.cs#1)]
 [!code-vb[MarkupTextWriter_Methods3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods3/VB/overriddenmarkup.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="DoubleQuoteChar">
      <MemberSignature Language="C#" Value="public const char DoubleQuoteChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char DoubleQuoteChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.DoubleQuoteChar" />
      <MemberSignature Language="VB.NET" Value="Public Const DoubleQuoteChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char DoubleQuoteChar;" />
      <MemberSignature Language="F#" Value="val mutable DoubleQuoteChar : char" Usage="System.Web.UI.HtmlTextWriter.DoubleQuoteChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Representa o caractere de aspas (").</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.HtmlTextWriter.DoubleQuoteChar> campo é usado pelo <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> método para fechar um atributo.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como renderizar uma `border` de atributo para um `<table>` elemento. O código chama o <xref:System.Web.UI.HtmlTextWriter.Write%2A> método para processar o atributo e seu valor e usa o <xref:System.Web.UI.HtmlTextWriter.Write%2A> método para renderizar o <xref:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString> e <xref:System.Web.UI.HtmlTextWriter.DoubleQuoteChar> campos.  
  
 Este exemplo de código processa a marcação a seguir:  
  
 `border="1"`  
  
 [!code-csharp[MarkupTextWriter_Constants#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#6)]
 [!code-vb[MarkupTextWriter_Constants#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.Write" />
        <altmember cref="M:System.IO.TextWriter.Dispose(System.Boolean)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="EncodeAttributeValue">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Codifica o valor de atributo de marcação especificado com base nos requisitos do objeto <see cref="T:System.Web.HttpRequest" /> do contexto atual.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EncodeAttributeValue">
      <MemberSignature Language="C#" Value="protected string EncodeAttributeValue (string value, bool fEncode);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string EncodeAttributeValue(string value, bool fEncode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EncodeAttributeValue(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Function EncodeAttributeValue (value As String, fEncode As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ EncodeAttributeValue(System::String ^ value, bool fEncode);" />
      <MemberSignature Language="F#" Value="member this.EncodeAttributeValue : string * bool -&gt; string" Usage="htmlTextWriter.EncodeAttributeValue (value, fEncode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEncode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">Uma cadeia de caracteres que contém o valor de atributo a codificar.</param>
        <param name="fEncode"><see langword="true" /> para codificar o valor de atributo; caso contrário, <see langword="false" />.</param>
        <summary>Codifica o valor de atributo de marcação especificado com base nos requisitos do objeto <see cref="T:System.Web.HttpRequest" /> do contexto atual.</summary>
        <returns>Uma cadeia de caracteres que contém o valor do atributo codificado, <see langword="null" /> se <paramref name="value" /> está vazio, ou então o valor do atributo não codificado se <paramref name="fEncode" /> é <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%2A> sobrecarga da <xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%29> método se o atributo não é um <xref:System.Web.UI.HtmlTextWriterAttribute> valor de enumeração ou não é conhecido até o tempo de execução.  
  
 O <xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%2A> método Remove aspas duplas ("), e comercial (&) e menor que (<), portanto, as marcas que inválidas de sinais não são gerados, independentemente da entrada. A codificação real é executada pelo <xref:System.Web.HttpUtility.HtmlAttributeEncode%2A> método.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como chamar o <xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%2A> método como um parâmetro em uma <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> chamada de método e, em seguida, codifica uma `color:blue` valor do atributo de estilo.  
  
 [!code-cpp[HtmlTextWriter_Methods#5](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#5)]
 [!code-csharp[HtmlTextWriter_Methods#5](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#5)]
 [!code-vb[HtmlTextWriter_Methods#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String)" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="T:System.Web.HttpRequest" />
      </Docs>
    </Member>
    <Member MemberName="EncodeAttributeValue">
      <MemberSignature Language="C#" Value="protected virtual string EncodeAttributeValue (System.Web.UI.HtmlTextWriterAttribute attrKey, string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string EncodeAttributeValue(valuetype System.Web.UI.HtmlTextWriterAttribute attrKey, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EncodeAttributeValue(System.Web.UI.HtmlTextWriterAttribute,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function EncodeAttributeValue (attrKey As HtmlTextWriterAttribute, value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ EncodeAttributeValue(System::Web::UI::HtmlTextWriterAttribute attrKey, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member EncodeAttributeValue : System.Web.UI.HtmlTextWriterAttribute * string -&gt; string&#xA;override this.EncodeAttributeValue : System.Web.UI.HtmlTextWriterAttribute * string -&gt; string" Usage="htmlTextWriter.EncodeAttributeValue (attrKey, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attrKey" Type="System.Web.UI.HtmlTextWriterAttribute" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attrKey">Um <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> que representa o atributo de marcação.</param>
        <param name="value">Uma cadeia de caracteres que contém o valor de atributo a codificar.</param>
        <summary>Codifica o valor de atributo de marcação especificado com base nos requisitos do objeto <see cref="T:System.Web.HttpRequest" /> do contexto atual.</summary>
        <returns>Uma cadeia de caracteres que contém o valor de atributo codificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%2A> método Remove aspas duplas ("), e comercial (&) e menor que (<), portanto, as marcas que inválidas de sinais não são gerados, independentemente da entrada. A codificação real é executada pelo <xref:System.Web.HttpUtility.HtmlAttributeEncode%2A> método.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String)" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="T:System.Web.HttpRequest" />
      </Docs>
    </Member>
    <Member MemberName="EncodeUrl">
      <MemberSignature Language="C#" Value="protected string EncodeUrl (string url);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string EncodeUrl(string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EncodeUrl(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Function EncodeUrl (url As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ EncodeUrl(System::String ^ url);" />
      <MemberSignature Language="F#" Value="member this.EncodeUrl : string -&gt; string" Usage="htmlTextWriter.EncodeUrl url" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="url">Uma cadeia de caracteres contendo a URL a codificar.</param>
        <summary>Executa a codificação de URL mínima convertendo espaços existentes na URL especificada para a cadeia de caracteres "%20".</summary>
        <returns>Uma cadeia de caracteres que contém a URL codificada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Codificação de URL de um caractere consiste em um símbolo de porcentagem (%), seguido de dois dígitos representação hexadecimal (diferencia maiusculas de minúsculas) do ponto de código latino ISO para o caractere. A representação hexadecimal de um espaço é 20.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como chamar o <xref:System.Web.UI.HtmlTextWriter.EncodeUrl%2A> método para converter espaços na URL que é passado como um parâmetro em um <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> chamada de método.  
  
 [!code-cpp[HtmlTextWriter_Methods#6](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#6)]
 [!code-csharp[HtmlTextWriter_Methods#6](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#6)]
 [!code-vb[HtmlTextWriter_Methods#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.UrlPathEncode(System.String)" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddAttribute" />
        <altmember cref="T:System.Web.HttpRequest" />
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public override System.Text.Encoding Encoding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Encoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Text::Encoding ^ Encoding { System::Text::Encoding ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Encoding : System.Text.Encoding" Usage="System.Web.UI.HtmlTextWriter.Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém a codificação que o objeto <see cref="T:System.Web.UI.HtmlTextWriter" /> usa para gravar conteúdo na página.</summary>
        <value>O <see cref="T:System.Text.Encoding" /> segundo o qual a marcação é gravada na página.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.HtmlTextWriter.Encoding%2A> propriedade obtém seu valor de base de <xref:System.IO.TextWriter> objeto.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como usar o <xref:System.Web.UI.HtmlTextWriter.Encoding%2A> propriedade para gravar o tipo de codificação que um controle personalizado usa para renderizar o texto para a página que o contém.  
  
 [!code-cpp[HtmlTextWriter_Properties#2](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Properties/CPP/htmltextwriter_properties1.cpp#2)]
 [!code-csharp[HtmlTextWriter_Properties#2](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Properties/CS/htmltextwriter_properties1.cs#2)]
 [!code-vb[HtmlTextWriter_Properties#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Properties/VB/htmltextwriter_properties1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Text.Encoding" />
      </Docs>
    </Member>
    <Member MemberName="EndRender">
      <MemberSignature Language="C#" Value="public virtual void EndRender ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndRender() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EndRender" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndRender ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndRender();" />
      <MemberSignature Language="F#" Value="abstract member EndRender : unit -&gt; unit&#xA;override this.EndRender : unit -&gt; unit" Usage="htmlTextWriter.EndRender " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Notifica um objeto <see cref="T:System.Web.UI.HtmlTextWriter" /> ou um objeto de uma classe derivada de que a renderização de um controle foi concluída. Você pode usar esse método para fechar os elementos de marcação abertos no método <see cref="M:System.Web.UI.HtmlTextWriter.BeginRender" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.HtmlTextWriter> implementação da classe a <xref:System.Web.UI.HtmlTextWriter.EndRender%2A> método não tem nenhuma funcionalidade. Você deve substituir <xref:System.Web.UI.HtmlTextWriter.EndRender%2A> em uma classe que deriva de <xref:System.Web.UI.HtmlTextWriter> classe para fornecer sua própria funcionalidade de renderização.  
  
 Você pode usar o <xref:System.Web.UI.HtmlTextWriter.EndRender%2A> método para fechar os elementos de marcação abertos no <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A> método.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.BeginRender" />
      </Docs>
    </Member>
    <Member MemberName="EndTagLeftChars">
      <MemberSignature Language="C#" Value="public const string EndTagLeftChars;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string EndTagLeftChars" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.EndTagLeftChars" />
      <MemberSignature Language="VB.NET" Value="Public Const EndTagLeftChars As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ EndTagLeftChars;" />
      <MemberSignature Language="F#" Value="val mutable EndTagLeftChars : string" Usage="System.Web.UI.HtmlTextWriter.EndTagLeftChars" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Representa a marca de colchete angular esquerdo e barra (&lt;/) da marca de fechamento de um elemento de marcação.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.HtmlTextWriter.EndTagLeftChars> campo é usado pelo <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> método para construir as marcas de fim do elemento de marcação.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como renderizar a marca de fechamento de um `<table>` elemento de marcação usando o <xref:System.Web.UI.HtmlTextWriter.EndTagLeftChars> e o <xref:System.Web.UI.HtmlTextWriter.TagRightChar> campos como valores de parâmetro em chamadas para o <xref:System.Web.UI.HtmlTextWriter.Write%2A> método.  
  
 Este exemplo de código processa a marcação a seguir:  
  
 `</table>`  
  
 [!code-csharp[MarkupTextWriter_Constants#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#4)]
 [!code-vb[MarkupTextWriter_Constants#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <MemberGroup MemberName="EnterStyle">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Grava a marca de abertura de um elemento de marcação que contém atributos que implementam o layout e formatação de caracteres do estilo especificado.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EnterStyle">
      <MemberSignature Language="C#" Value="public virtual void EnterStyle (System.Web.UI.WebControls.Style style);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnterStyle(class System.Web.UI.WebControls.Style style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EnterStyle(System.Web.UI.WebControls.Style)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EnterStyle(System::Web::UI::WebControls::Style ^ style);" />
      <MemberSignature Language="F#" Value="abstract member EnterStyle : System.Web.UI.WebControls.Style -&gt; unit&#xA;override this.EnterStyle : System.Web.UI.WebControls.Style -&gt; unit" Usage="htmlTextWriter.EnterStyle style" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Web.UI.WebControls.Style" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="style">Um <see cref="T:System.Web.UI.WebControls.Style" /> que especifica o layout e formatação para começar a aplicar ao bloco de marcação.</param>
        <summary>Grava a marca de abertura de um elemento <see langword="&lt;span&gt;" /> que contém atributos que implementam o layout e formatação de caracteres do estilo especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> método para aplicar estilos, como largura de borda ou cor de plano de fundo, para um bloco de marcação.  
  
 O <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> e <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> métodos permitem que um adaptador de dispositivo ou o controle criar a marcação que usa a formatação de caractere do estilo especificado. Use o mesmo valor para `style` no <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> método que você usa nas correspondentes <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> método.  
  
 O <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> sobrecarga da <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%29> método renderiza a marca de abertura de um `<span>` elemento. Esse método, em seguida, adiciona os atributos necessários e os atributos de estilo para a marca de abertura do `<span>` elemento para exibir as configurações especificadas pelo <xref:System.Web.UI.WebControls.Style> objeto. Se você deseja renderizar um elemento de marcação diferentes para conter os atributos e os atributos de estilo, use o <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29> de sobrecarga.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como usar uma classe personalizada denominada `TextSample`, derivado do <xref:System.Web.UI.WebControls.WebControl> classe, que usa o <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> método para aplicar um <xref:System.Web.UI.WebControls.Style.ForeColor%2A> estilo a ser uma cadeia de caracteres de texto.  
  
 O <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> método renderiza o HTML `<span style="color:Navy;">`. O <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> chamada de método fecha o `<span>` elemento depois que o texto é processado.  
  
 [!code-vb[System.Web.UI.HtmlTextWriter_EnterStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter_EnterStyle/VB/styledtext.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.ExitStyle" />
      </Docs>
    </Member>
    <Member MemberName="EnterStyle">
      <MemberSignature Language="C#" Value="public virtual void EnterStyle (System.Web.UI.WebControls.Style style, System.Web.UI.HtmlTextWriterTag tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnterStyle(class System.Web.UI.WebControls.Style style, valuetype System.Web.UI.HtmlTextWriterTag tag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EnterStyle(System.Web.UI.WebControls.Style,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EnterStyle(System::Web::UI::WebControls::Style ^ style, System::Web::UI::HtmlTextWriterTag tag);" />
      <MemberSignature Language="F#" Value="abstract member EnterStyle : System.Web.UI.WebControls.Style * System.Web.UI.HtmlTextWriterTag -&gt; unit&#xA;override this.EnterStyle : System.Web.UI.WebControls.Style * System.Web.UI.HtmlTextWriterTag -&gt; unit" Usage="htmlTextWriter.EnterStyle (style, tag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Web.UI.WebControls.Style" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="tag" Type="System.Web.UI.HtmlTextWriterTag" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="style">Um <see cref="T:System.Web.UI.WebControls.Style" /> que especifica o layout e formatação para começar a aplicar ao bloco de marcação.</param>
        <param name="tag">Um <see cref="T:System.Web.UI.HtmlTextWriterTag" /> que especifica a marca de abertura do elemento de marcação que contém o objeto de estilo especificado em <paramref name="style" />.</param>
        <summary>Grava a marca de abertura de um elemento de marcação que contém atributos que implementam o layout e formatação de caracteres do estilo especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> método para aplicar estilos, como largura de borda ou cor de plano de fundo, para um bloco de marcação.  
  
 O <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> e <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> métodos permitem que um adaptador de dispositivo ou o controle criar a marcação que usa a formatação de caractere do estilo especificado. Use o mesmo valor para `style` no <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> método que você usa nas correspondentes <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> método.  
  
 O <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> sobrecarga da <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29> método renderiza a marca de abertura do elemento especificado pelo `tag` parâmetro. O <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29> método, em seguida, adiciona os atributos necessários e os atributos de estilo para a marca de abertura do elemento para exibir as configurações que é especificado pelo <xref:System.Web.UI.WebControls.Style> objeto. Use o <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%29> sobrecarga para renderizar a marca de abertura de um `<span>` elemento.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como usar uma classe personalizada denominada `TextSample`, derivado do <xref:System.Web.UI.WebControls.WebControl> classe, que usa o <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> método para aplicar um <xref:System.Web.UI.WebControls.Style.ForeColor%2A> estilo a ser uma cadeia de caracteres de texto.  
  
 O <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> método renderiza o HTML`<span style="color:Navy;">`. O <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> chamada de método fecha o `<span>` elemento depois que o texto é processado.  
  
 [!code-vb[System.Web.UI.HtmlTextWriter_EnterStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter_EnterStyle/VB/styledtext.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.ExitStyle" />
      </Docs>
    </Member>
    <Member MemberName="EqualsChar">
      <MemberSignature Language="C#" Value="public const char EqualsChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char EqualsChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.EqualsChar" />
      <MemberSignature Language="VB.NET" Value="Public Const EqualsChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char EqualsChar;" />
      <MemberSignature Language="F#" Value="val mutable EqualsChar : char" Usage="System.Web.UI.HtmlTextWriter.EqualsChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Representa o sinal de igual (<see langword="=" />).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você talvez queira usar o <xref:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString> campo, em vez do <xref:System.Web.UI.HtmlTextWriter.EqualsChar> ao construir o delimitador de abertura de um valor de atributo de campo.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como renderizar as `src` atributo e a parte de seu valor para um `<img>` elemento. O código usa o <xref:System.Web.UI.HtmlTextWriter.EqualsChar> campo em um <xref:System.Web.UI.HtmlTextWriter.Write%2A> chamada de método para processar o sinal de igual (=) entre o `src` atributo e seu valor.  
  
 Este exemplo de código processa a marcação a seguir:  
  
 `src="/images/`  
  
 [!code-csharp[MarkupTextWriter_Constants#10](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpleimage.cs#10)]
 [!code-vb[MarkupTextWriter_Constants#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpleimage.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString" />
      </Docs>
    </Member>
    <Member MemberName="EqualsDoubleQuoteString">
      <MemberSignature Language="C#" Value="public const string EqualsDoubleQuoteString;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string EqualsDoubleQuoteString" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString" />
      <MemberSignature Language="VB.NET" Value="Public Const EqualsDoubleQuoteString As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ EqualsDoubleQuoteString;" />
      <MemberSignature Language="F#" Value="val mutable EqualsDoubleQuoteString : string" Usage="System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Representa um sinal de igual (=) e aspas duplas (") juntos em uma cadeia de caracteres (=").</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString> campo é usado pelas <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> e <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> métodos para construir o delimitador de abertura de valores de atributo.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como renderizar uma `border` de atributo para um `<table>` elemento. O código chama o <xref:System.Web.UI.HtmlTextWriter.Write%2A> método para processar o atributo e seu valor e usa o <xref:System.Web.UI.HtmlTextWriter.Write%2A> método para renderizar o <xref:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString> e <xref:System.Web.UI.HtmlTextWriter.DoubleQuoteChar> campos.  
  
 Este exemplo de código processa a marcação a seguir:  
  
 `border="1"`  
  
 [!code-csharp[MarkupTextWriter_Constants#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#6)]
 [!code-vb[MarkupTextWriter_Constants#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.WriteAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ExitStyle">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Grava a marca de fechamento de um elemento de marcação para encerrar o layout e a formatação de caracteres especificados.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExitStyle">
      <MemberSignature Language="C#" Value="public virtual void ExitStyle (System.Web.UI.WebControls.Style style);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExitStyle(class System.Web.UI.WebControls.Style style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.ExitStyle(System.Web.UI.WebControls.Style)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ExitStyle(System::Web::UI::WebControls::Style ^ style);" />
      <MemberSignature Language="F#" Value="abstract member ExitStyle : System.Web.UI.WebControls.Style -&gt; unit&#xA;override this.ExitStyle : System.Web.UI.WebControls.Style -&gt; unit" Usage="htmlTextWriter.ExitStyle style" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Web.UI.WebControls.Style" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="style">Um <see cref="T:System.Web.UI.WebControls.Style" /> que especifica o layout e a formatação para fechar.</param>
        <summary>Grava a marca de fechamento de um elemento <see langword="&lt;span&gt;" /> para encerrar o layout e a formatação de caracteres especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> sobrecarga da <xref:System.Web.UI.HtmlTextWriter.ExitStyle%28System.Web.UI.WebControls.Style%29> método renderiza a marca de fechamento de uma `<span>` elemento após a marca de fechamento do controle, o elemento de fechamento aberto por correspondente <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> chamar.  
  
 O <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> e <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> métodos permitem que um adaptador de dispositivo ou o controle criar a marcação que começa e termina um bloco usando a formatação de caracteres do estilo especificado. Use o mesmo valor para `style` no <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> método que você usa nas correspondentes <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> método.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como usar uma classe personalizada denominada `TextSample`, derivado do <xref:System.Web.UI.WebControls.WebControl> classe, que usa o <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> método para aplicar um <xref:System.Web.UI.WebControls.Style.ForeColor%2A> estilo a ser uma cadeia de caracteres de texto.  
  
 O <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> método renderiza o HTML `<span style="color:Navy;">`. O <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> chamada de método fecha o `<span>` elemento depois que o texto é processado.  
  
 [!code-vb[System.Web.UI.HtmlTextWriter_EnterStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter_EnterStyle/VB/styledtext.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.EnterStyle" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
      </Docs>
    </Member>
    <Member MemberName="ExitStyle">
      <MemberSignature Language="C#" Value="public virtual void ExitStyle (System.Web.UI.WebControls.Style style, System.Web.UI.HtmlTextWriterTag tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExitStyle(class System.Web.UI.WebControls.Style style, valuetype System.Web.UI.HtmlTextWriterTag tag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.ExitStyle(System.Web.UI.WebControls.Style,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ExitStyle(System::Web::UI::WebControls::Style ^ style, System::Web::UI::HtmlTextWriterTag tag);" />
      <MemberSignature Language="F#" Value="abstract member ExitStyle : System.Web.UI.WebControls.Style * System.Web.UI.HtmlTextWriterTag -&gt; unit&#xA;override this.ExitStyle : System.Web.UI.WebControls.Style * System.Web.UI.HtmlTextWriterTag -&gt; unit" Usage="htmlTextWriter.ExitStyle (style, tag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Web.UI.WebControls.Style" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="tag" Type="System.Web.UI.HtmlTextWriterTag" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="style">Um <see cref="T:System.Web.UI.WebControls.Style" /> que especifica o layout e a formatação cuja aplicação ao texto de saída deve ser interrompida.</param>
        <param name="tag">Um <see cref="T:System.Web.UI.HtmlTextWriterTag" /> que especifica a marca de fechamento do elemento de marcação que continha os atributos que aplicaram o estilo especificado. Isso deve corresponder à chave passada na chamada <see cref="Overload:System.Web.UI.HtmlTextWriter.EnterStyle" /> correspondente.</param>
        <summary>Grava a marca de fechamento do elemento de marcação especificado para encerrar o layout e a formatação de caracteres especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> sobrecarga da <xref:System.Web.UI.HtmlTextWriter.ExitStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29> método renderiza a marca de fechamento do elemento especificado por `tag` após a marca de fechamento do controle, fechando o elemento que tenha sido aberto por correspondente <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29> chamada de método.  
  
 O <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> e <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> métodos permitem que um adaptador de dispositivo ou o controle criar a marcação que começa e termina um bloco usando a formatação de caracteres do estilo especificado. Use o mesmo valor para `style` no <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> método que você usa nas correspondentes <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> método.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como usar uma classe personalizada denominada `TextSample`, derivado do <xref:System.Web.UI.WebControls.WebControl> classe, que usa o <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> método para aplicar um <xref:System.Web.UI.WebControls.Style.ForeColor%2A> estilo a ser uma cadeia de caracteres de texto.  
  
 O <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> método renderiza o HTML `<span style="color:Navy;">`. O <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> chamada de método fecha o `<span>` elemento depois que o texto é processado.  
  
 [!code-vb[System.Web.UI.HtmlTextWriter_EnterStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter_EnterStyle/VB/styledtext.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.EnterStyle" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
      </Docs>
    </Member>
    <Member MemberName="FilterAttributes">
      <MemberSignature Language="C#" Value="protected virtual void FilterAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void FilterAttributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.FilterAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub FilterAttributes ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void FilterAttributes();" />
      <MemberSignature Language="F#" Value="abstract member FilterAttributes : unit -&gt; unit&#xA;override this.FilterAttributes : unit -&gt; unit" Usage="htmlTextWriter.FilterAttributes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Remove todos os atributos de estilo e marcação em todas as propriedades da página ou controle de servidor Web.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Antes de atributos são renderizados em um elemento de marcação, o <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> método é chamado. Por sua vez, o <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> chamadas de método de <xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A> e <xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A> métodos para cada atributo e um estilo para renderizar.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como usar uma classe personalizada, derivada de <xref:System.Web.UI.HtmlTextWriter> classe, que substitui o <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> método. Quando chamado, o <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> substituição verifica se o gravador de texto renderiza qualquer `<label>` ou `<a>` elementos:  
  
-   Se um `<label>` elemento está sendo processado, o <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> método verifica se um `style` atributo é renderizado no elemento e, se não estiver, cria um `style` de atributo e o configura para `color: blue`.  
  
-   Se um `<a>` é o elemento que está sendo processado, o <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> método determina se um `href` atributo está incluído e, se não estiver, adiciona um `href` para a URL http://www.cohowinery.com.  
  
 [!code-cpp[HtmlTextWriter_Methods#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#4)]
 [!code-csharp[HtmlTextWriter_Methods#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#4)]
 [!code-vb[HtmlTextWriter_Methods#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberSignature Language="F#" Value="override this.Flush : unit -&gt; unit" Usage="htmlTextWriter.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Limpa todos os buffers para o objeto <see cref="T:System.Web.UI.HtmlTextWriter" /> atual e faz com que todos os dados armazenados em buffer sejam gravados no fluxo de saída.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.HtmlTextWriter> implementação da classe do <xref:System.Web.UI.HtmlTextWriter.Flush%2A> método apenas chama o <xref:System.IO.TextWriter.Flush%2A> método de base.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="GetAttributeKey">
      <MemberSignature Language="C#" Value="protected System.Web.UI.HtmlTextWriterAttribute GetAttributeKey (string attrName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Web.UI.HtmlTextWriterAttribute GetAttributeKey(string attrName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetAttributeKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetAttributeKey (attrName As String) As HtmlTextWriterAttribute" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Web::UI::HtmlTextWriterAttribute GetAttributeKey(System::String ^ attrName);" />
      <MemberSignature Language="F#" Value="member this.GetAttributeKey : string -&gt; System.Web.UI.HtmlTextWriterAttribute" Usage="htmlTextWriter.GetAttributeKey attrName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attrName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attrName">Uma cadeia de caracteres que contém o atributo para o qual obter o <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />.</param>
        <summary>Obtém o valor de enumeração <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> correspondente para o atributo especificado.</summary>
        <returns>O valor de enumeração <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> para o atributo especificado; caso contrário, um valor <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> inválido se o atributo não é um membro da enumeração.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `attrName` está `null` ou uma cadeia de caracteres vazia (""), ou não foi encontrado na tabela de nomes de atributo, o valor -1, digitada para uma <xref:System.Web.UI.HtmlTextWriterAttribute> de objeto, será retornado.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como usar uma classe que deriva de <xref:System.Web.UI.HtmlTextWriter> classe, que substitui o <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> método. As verificações de substituição se `tagKey` é igual de <xref:System.Web.UI.HtmlTextWriterTag.Font> campo, que indica que um `<font>` elemento de marcação será renderizado. Se assim, a substituição chama o <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A> método para descobrir se o `<font>` elemento contém um <xref:System.Web.UI.HtmlTextWriterAttribute.Size> atributo. Se o <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A> retorna `false`, o <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> chamadas de método a <xref:System.Web.UI.HtmlTextWriter.GetAttributeKey%2A> método, que define os <xref:System.Web.UI.HtmlTextWriterAttribute.Size> e define seu valor como `30pt`.  
  
 [!code-cpp[HtmlTextWriter_Methods#3](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#3)]
 [!code-csharp[HtmlTextWriter_Methods#3](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#3)]
 [!code-vb[HtmlTextWriter_Methods#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.IsAttributeDefined" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetAttributeName">
      <MemberSignature Language="C#" Value="protected string GetAttributeName (System.Web.UI.HtmlTextWriterAttribute attrKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string GetAttributeName(valuetype System.Web.UI.HtmlTextWriterAttribute attrKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetAttributeName(System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetAttributeName (attrKey As HtmlTextWriterAttribute) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ GetAttributeName(System::Web::UI::HtmlTextWriterAttribute attrKey);" />
      <MemberSignature Language="F#" Value="member this.GetAttributeName : System.Web.UI.HtmlTextWriterAttribute -&gt; string" Usage="htmlTextWriter.GetAttributeName attrKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attrKey" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="attrKey">O <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> para o qual obter o nome de atributo de marcação.</param>
        <summary>Obtém o nome do atributo de marcação associado ao valor <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> especificado.</summary>
        <returns>Uma cadeia de caracteres que contém o nome do atributo de marcação.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.HtmlTextWriter.GetAttributeName%2A> método retorna uma cadeia de caracteres vazia (""), se `attrKey` não é válido <xref:System.Web.UI.HtmlTextWriterAttribute> valor.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como usar o <xref:System.Web.UI.HtmlTextWriter.GetAttributeName%2A> método para converter um <xref:System.Web.UI.HtmlTextWriterAttribute.Size> valor de enumeração para o seu nome de cadeia de caracteres.  
  
 [!code-cpp[HtmlTextWriter_Methods3#6](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#6)]
 [!code-csharp[HtmlTextWriter_Methods3#6](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#6)]
 [!code-vb[HtmlTextWriter_Methods3#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetStyleKey">
      <MemberSignature Language="C#" Value="protected System.Web.UI.HtmlTextWriterStyle GetStyleKey (string styleName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Web.UI.HtmlTextWriterStyle GetStyleKey(string styleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetStyleKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetStyleKey (styleName As String) As HtmlTextWriterStyle" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Web::UI::HtmlTextWriterStyle GetStyleKey(System::String ^ styleName);" />
      <MemberSignature Language="F#" Value="member this.GetStyleKey : string -&gt; System.Web.UI.HtmlTextWriterStyle" Usage="htmlTextWriter.GetStyleKey styleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterStyle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="styleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="styleName">O atributo de estilo para o qual obter o <see cref="T:System.Web.UI.HtmlTextWriterStyle" />.</param>
        <summary>Obtém o valor de enumeração <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> do estilo especificado.</summary>
        <returns>O valor de enumeração <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> correspondente a <paramref name="styleName" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.HtmlTextWriter.GetStyleKey%2A> método retorna o valor -1, digitado como um <xref:System.Web.UI.HtmlTextWriterStyle> valor, se `styleName` não corresponde a nenhum <xref:System.Web.UI.HtmlTextWriterStyle> valor de enumeração.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como substituir a <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> método em uma classe derivada do <xref:System.Web.UI.HtmlTextWriter> classe. O <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> substituição determina se um `<label>` marcação será renderizada e, em caso afirmativo, verifica se o elemento um <xref:System.Web.UI.HtmlTextWriterStyle.Color> atributo. Se um <xref:System.Web.UI.HtmlTextWriterStyle.Color> atributo não tiver sido definido, o <xref:System.Web.UI.HtmlTextWriter.GetStyleKey%2A> método é usado como o primeiro parâmetro em uma chamada para o <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> para adicionar um <xref:System.Web.UI.HtmlTextWriterStyle.Color> de atributo para um `<label>` elemento de marcação e o conjunto a <xref:System.Web.UI.HtmlTextWriterStyle.Color> de atributo para `red`.  
  
 [!code-cpp[HtmlTextWriter_Methods#1](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#1)]
 [!code-csharp[HtmlTextWriter_Methods#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#1)]
 [!code-vb[HtmlTextWriter_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetStyleName">
      <MemberSignature Language="C#" Value="protected string GetStyleName (System.Web.UI.HtmlTextWriterStyle styleKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string GetStyleName(valuetype System.Web.UI.HtmlTextWriterStyle styleKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetStyleName(System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetStyleName (styleKey As HtmlTextWriterStyle) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ GetStyleName(System::Web::UI::HtmlTextWriterStyle styleKey);" />
      <MemberSignature Language="F#" Value="member this.GetStyleName : System.Web.UI.HtmlTextWriterStyle -&gt; string" Usage="htmlTextWriter.GetStyleName styleKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="styleKey" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="styleKey">O <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> para o qual obter o nome de atributo de estilo.</param>
        <summary>Obtém o nome de atributo de estilo de marcação associado ao valor de enumeração <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> especificado.</summary>
        <returns>O nome do atributo de estilo associado ao valor de enumeração <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> especificado em <paramref name="styleKey" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `styleKey` não é válido <xref:System.Web.UI.HtmlTextWriterStyle> objeto, o <xref:System.Web.UI.HtmlTextWriter.GetStyleName%2A> método retorna uma cadeia de caracteres vazia ("").  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como verificar se um `<label>` elemento está sendo renderizado. Se assim, ele verifica se um <xref:System.Web.UI.HtmlTextWriterStyle.Color> atributo de estilo foi definido no elemento. Se o atributo não tiver sido definido, o <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> método é chamado e o <xref:System.Web.UI.HtmlTextWriter.GetStyleName%2A> método converte os <xref:System.Web.UI.HtmlTextWriterStyle.Color> membro de enumeração em sua representação de cadeia de caracteres para passar para o <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> método.  
  
 [!code-cpp[HtmlTextWriter_Methods3#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#4)]
 [!code-csharp[HtmlTextWriter_Methods3#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#4)]
 [!code-vb[HtmlTextWriter_Methods3#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetTagKey">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.HtmlTextWriterTag GetTagKey (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Web.UI.HtmlTextWriterTag GetTagKey(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetTagKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetTagKey (tagName As String) As HtmlTextWriterTag" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::HtmlTextWriterTag GetTagKey(System::String ^ tagName);" />
      <MemberSignature Language="F#" Value="abstract member GetTagKey : string -&gt; System.Web.UI.HtmlTextWriterTag&#xA;override this.GetTagKey : string -&gt; System.Web.UI.HtmlTextWriterTag" Usage="htmlTextWriter.GetTagKey tagName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterTag</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">O elemento de marcação para o qual obter o <see cref="T:System.Web.UI.HtmlTextWriterTag" />.</param>
        <summary>Obtém o valor de enumeração <see cref="T:System.Web.UI.HtmlTextWriterTag" /> associado ao elemento de marcação especificado.</summary>
        <returns>O valor de enumeração <see cref="T:System.Web.UI.HtmlTextWriterTag" />; caso contrário, se <paramref name="tagName" /> não está associado um valor <see cref="T:System.Web.UI.HtmlTextWriterTag" /> específico, <see cref="F:System.Web.UI.HtmlTextWriterTag.Unknown" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `tagName` está `null`, uma cadeia de caracteres vazia (""), ou não foi encontrado na tabela de nomes de marca de marcação, o <xref:System.Web.UI.HtmlTextWriter.GetTagKey%2A> método retorna o <xref:System.Web.UI.HtmlTextWriterTag.Unknown> campo.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como substituir a sobrecarga da <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> método que usa uma cadeia de caracteres como seu parâmetro. A cadeia de caracteres é passada para o <xref:System.Web.UI.HtmlTextWriter.GetTagKey%2A> método, que converte-o para os respectivos <xref:System.Web.UI.HtmlTextWriterTag> membro de enumeração e, em seguida, passa para o <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> sobrecarga que utiliza um <xref:System.Web.UI.HtmlTextWriterTag> valor de enumeração como um parâmetro.  
  
 [!code-cpp[HtmlTextWriter_Methods3#8](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#8)]
 [!code-csharp[HtmlTextWriter_Methods3#8](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#8)]
 [!code-vb[HtmlTextWriter_Methods3#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
      </Docs>
    </Member>
    <Member MemberName="GetTagName">
      <MemberSignature Language="C#" Value="protected virtual string GetTagName (System.Web.UI.HtmlTextWriterTag tagKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string GetTagName(valuetype System.Web.UI.HtmlTextWriterTag tagKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetTagName(System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetTagName (tagKey As HtmlTextWriterTag) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ GetTagName(System::Web::UI::HtmlTextWriterTag tagKey);" />
      <MemberSignature Language="F#" Value="abstract member GetTagName : System.Web.UI.HtmlTextWriterTag -&gt; string&#xA;override this.GetTagName : System.Web.UI.HtmlTextWriterTag -&gt; string" Usage="htmlTextWriter.GetTagName tagKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagKey" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="tagKey">O <see cref="T:System.Web.UI.HtmlTextWriterTag" /> para o qual obter o elemento de marcação.</param>
        <summary>Obtém o elemento de marcação associado ao valor de enumeração <see cref="T:System.Web.UI.HtmlTextWriterTag" /> especificado.</summary>
        <returns>Uma cadeia de caracteres que representa o elemento de marcação.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `tagKey` não é válido <xref:System.Web.UI.HtmlTextWriterTag> valor, o <xref:System.Web.UI.HtmlTextWriter.GetTagName%2A> método retorna uma cadeia de caracteres vazia ("").  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como fechar uma `<font>` elemento usando o <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> método. O <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> chamadas de método de <xref:System.Web.UI.HtmlTextWriter.GetTagName%2A> método para converter o <xref:System.Web.UI.HtmlTextWriterTag.Font> valor a ser uma cadeia de caracteres.  
  
 [!code-cpp[HtmlTextWriter_Methods3#7](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#7)]
 [!code-csharp[HtmlTextWriter_Methods3#7](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#7)]
 [!code-vb[HtmlTextWriter_Methods3#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
      </Docs>
    </Member>
    <Member MemberName="Indent">
      <MemberSignature Language="C#" Value="public int Indent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Indent" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.Indent" />
      <MemberSignature Language="VB.NET" Value="Public Property Indent As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Indent { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Indent : int with get, set" Usage="System.Web.UI.HtmlTextWriter.Indent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o número de posições de tabulação para recuar o início de cada linha de marcação.</summary>
        <value>O número de posições de tabulação para recuar cada linha.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Recuo é executado, escrevendo a cadeia de caracteres que é especificada pelo `tabString` parâmetro do <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%2CSystem.String%29> construtor o número de vezes que são especificados pelo <xref:System.Web.UI.HtmlTextWriter.Indent%2A> propriedade.  
  
 Se o <xref:System.Web.UI.HtmlTextWriter.Indent%2A> estiver definida como um valor negativo, ele é alterado para 0 antes de serem salvas.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como incrementar o valor que é atribuído para o <xref:System.Web.UI.HtmlTextWriter.Indent%2A> propriedade quando os atributos foram adicionados à marca de abertura de um `<span>` elemento e o <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> método foi chamado. Isso aumenta o recuo para qualquer marcação que é renderizado dentro de `<span>` elemento.  
  
 [!code-csharp[MarkupTextWriter_Samples1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Samples1/CS/markuptextwriter_samples1.cs#2)]
 [!code-vb[MarkupTextWriter_Samples1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Samples1/VB/markuptextwriter_samples1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.OutputTabs" />
      </Docs>
    </Member>
    <Member MemberName="InnerWriter">
      <MemberSignature Language="C#" Value="public System.IO.TextWriter InnerWriter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.TextWriter InnerWriter" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.InnerWriter" />
      <MemberSignature Language="VB.NET" Value="Public Property InnerWriter As TextWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::TextWriter ^ InnerWriter { System::IO::TextWriter ^ get(); void set(System::IO::TextWriter ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InnerWriter : System.IO.TextWriter with get, set" Usage="System.Web.UI.HtmlTextWriter.InnerWriter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.TextWriter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o gravador de texto que grava o conteúdo interno do elemento de marcação.</summary>
        <value>Um <see cref="T:System.IO.TextWriter" /> que grava o conteúdo de marcação interna.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Conteúdo de marcação interna é o texto encontrado entre as marcas de abertura e fechamento de um elemento de linguagem de marcação.  
  
 Se o <xref:System.Web.UI.HtmlTextWriter.InnerWriter%2A> estiver definida como uma <xref:System.IO.TextWriter> objeto é uma instância do <xref:System.Web.HttpWriter> esse fato é observado de classe, e uma referência separada é salvo.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como usar um controle de servidor Web personalizado, derivado de <xref:System.Web.UI.WebControls.WebControl> classe, que substitui o <xref:System.Web.UI.Control.Render%2A> método. Ele usa o <xref:System.Web.UI.HtmlTextWriter> classe para gravar um `<font>` elemento. Depois que ele grava a marca de abertura do elemento, ele usa o <xref:System.Web.UI.HtmlTextWriter.InnerWriter%2A> propriedade para gravar a cadeia de caracteres `"<br> The time on the server:"` e concatena essa cadeia de caracteres com o valor da <xref:System.DateTime.Now%2A?displayProperty=nameWithType> propriedade.  
  
 [!code-cpp[HtmlTextWriter_Properties#3](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Properties/CPP/htmltextwriter_properties1.cpp#3)]
 [!code-csharp[HtmlTextWriter_Properties#3](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Properties/CS/htmltextwriter_properties1.cs#3)]
 [!code-vb[HtmlTextWriter_Properties#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Properties/VB/htmltextwriter_properties1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.HttpWriter" />
        <altmember cref="T:System.Web.UI.WebControls.WebControl" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsAttributeDefined">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Determina se o atributo de marcação especificado e seu valor são renderizados durante a próxima chamada para o método <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsAttributeDefined">
      <MemberSignature Language="C#" Value="protected bool IsAttributeDefined (System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsAttributeDefined(valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsAttributeDefined(System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Function IsAttributeDefined (key As HtmlTextWriterAttribute) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool IsAttributeDefined(System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberSignature Language="F#" Value="member this.IsAttributeDefined : System.Web.UI.HtmlTextWriterAttribute -&gt; bool" Usage="htmlTextWriter.IsAttributeDefined key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="key">O <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> associado ao atributo de marcação.</param>
        <summary>Determina se o atributo de marcação especificado e seu valor são renderizados durante a próxima chamada para o método <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />.</summary>
        <returns><see langword="true" /> se o atributo é renderizado durante a próxima chamada para o método <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter o valor a ser atribuído para o <xref:System.Web.UI.HtmlTextWriterAttribute> do objeto, use o <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%40%29> de sobrecarga em vez disso.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como usar uma substituição do <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> método em uma classe que herda o <xref:System.Web.UI.HtmlTextWriter> classe. O <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> substituir verifica se um `<font>` elemento de marcação será renderizado. Se assim, a substituição chama o <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A> método para verificar se o `<font>` elemento contém um <xref:System.Web.UI.HtmlTextWriterAttribute.Size> atributo. Caso contrário, o <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> chamadas de método a <xref:System.Web.UI.HtmlTextWriter.GetAttributeKey%2A> método, que define o <xref:System.Web.UI.HtmlTextWriterAttribute.Size> de atributo e define seu valor como `30pt`.  
  
 [!code-cpp[HtmlTextWriter_Methods#3](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#3)]
 [!code-csharp[HtmlTextWriter_Methods#3](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#3)]
 [!code-vb[HtmlTextWriter_Methods#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="IsAttributeDefined">
      <MemberSignature Language="C#" Value="protected bool IsAttributeDefined (System.Web.UI.HtmlTextWriterAttribute key, out string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsAttributeDefined(valuetype System.Web.UI.HtmlTextWriterAttribute key, [out] string&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsAttributeDefined(System.Web.UI.HtmlTextWriterAttribute,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Protected Function IsAttributeDefined (key As HtmlTextWriterAttribute, ByRef value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool IsAttributeDefined(System::Web::UI::HtmlTextWriterAttribute key, [Runtime::InteropServices::Out] System::String ^ % value);" />
      <MemberSignature Language="F#" Value="member this.IsAttributeDefined : System.Web.UI.HtmlTextWriterAttribute *  -&gt; bool" Usage="htmlTextWriter.IsAttributeDefined (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
        <Parameter Name="value" Type="System.String" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key">O <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> associado ao atributo de marcação.</param>
        <param name="value">O valor atribuído ao atributo.</param>
        <summary>Determina se o atributo de marcação especificado e seu valor são renderizados durante a próxima chamada para o método <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />.</summary>
        <returns><see langword="true" /> se o atributo é renderizado durante a próxima chamada para o método <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se o <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A> método retorna `true`, o valor a ser atribuído para o <xref:System.Web.UI.HtmlTextWriterAttribute> objeto é retornado no `value` parâmetro.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsStyleAttributeDefined">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Determina se um atributo de estilo de marcação é renderizado durante a próxima chamada para o método <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsStyleAttributeDefined">
      <MemberSignature Language="C#" Value="protected bool IsStyleAttributeDefined (System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsStyleAttributeDefined(valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined(System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Function IsStyleAttributeDefined (key As HtmlTextWriterStyle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool IsStyleAttributeDefined(System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberSignature Language="F#" Value="member this.IsStyleAttributeDefined : System.Web.UI.HtmlTextWriterStyle -&gt; bool" Usage="htmlTextWriter.IsStyleAttributeDefined key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="key">O <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> associado ao atributo.</param>
        <summary>Determina se o atributo de estilo de marcação especificado é renderizado durante a próxima chamada para o método <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />.</summary>
        <returns><see langword="true" /> se o atributo será renderizado durante a próxima chamada para o método <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter o valor que será renderizado com o atributo de estilo especificado, use o <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%28System.Web.UI.HtmlTextWriterStyle%2CSystem.String%40%29> sobrecarga da <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%2A> método.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como verificar se um `<label>` elemento está sendo renderizado. Nesse caso, o <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%2A> método verifica se um <xref:System.Web.UI.HtmlTextWriterStyle.Color> atributo de estilo foi definido no elemento. Se o <xref:System.Web.UI.HtmlTextWriterStyle.Color> atributo não tiver sido definido, o <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> método define o <xref:System.Web.UI.HtmlTextWriterStyle.Color> de atributo e define seu valor como `red`.  
  
 [!code-cpp[HtmlTextWriter_Methods3#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#4)]
 [!code-csharp[HtmlTextWriter_Methods3#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#4)]
 [!code-vb[HtmlTextWriter_Methods3#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="IsStyleAttributeDefined">
      <MemberSignature Language="C#" Value="protected bool IsStyleAttributeDefined (System.Web.UI.HtmlTextWriterStyle key, out string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsStyleAttributeDefined(valuetype System.Web.UI.HtmlTextWriterStyle key, [out] string&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined(System.Web.UI.HtmlTextWriterStyle,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Protected Function IsStyleAttributeDefined (key As HtmlTextWriterStyle, ByRef value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool IsStyleAttributeDefined(System::Web::UI::HtmlTextWriterStyle key, [Runtime::InteropServices::Out] System::String ^ % value);" />
      <MemberSignature Language="F#" Value="member this.IsStyleAttributeDefined : System.Web.UI.HtmlTextWriterStyle *  -&gt; bool" Usage="htmlTextWriter.IsStyleAttributeDefined (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
        <Parameter Name="value" Type="System.String" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key">O <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> associado ao atributo.</param>
        <param name="value">O valor atribuído ao atributo de estilo.</param>
        <summary>Determina se o atributo de estilo de marcação especificado e seu valor são renderizados durante a próxima chamada para o método <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />.</summary>
        <returns><see langword="true" /> se o atributo e seu valor serão renderizados durante a próxima chamada para o método <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se o <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%2A> método retorna `true`, o valor a ser atribuído para o <xref:System.Web.UI.HtmlTextWriterStyle> atributo é retornado no `value` parâmetro.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="IsValidFormAttribute">
      <MemberSignature Language="C#" Value="public virtual bool IsValidFormAttribute (string attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsValidFormAttribute(string attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsValidFormAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsValidFormAttribute (attribute As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsValidFormAttribute(System::String ^ attribute);" />
      <MemberSignature Language="F#" Value="abstract member IsValidFormAttribute : string -&gt; bool&#xA;override this.IsValidFormAttribute : string -&gt; bool" Usage="htmlTextWriter.IsValidFormAttribute attribute" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="attribute">Uma cadeia de caracteres que contém o nome do atributo a verificar.</param>
        <summary>Verifica se um atributo para garantir que ele pode ser renderizado na marca de abertura de um elemento de marcação <see langword="&lt;form&gt;" />.</summary>
        <returns>Sempre <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.HtmlTextWriter> implementação da classe de <xref:System.Web.UI.HtmlTextWriter.IsValidFormAttribute%2A> retorno do método `true` para todos os atributos. Substituir a <xref:System.Web.UI.HtmlTextWriter.IsValidFormAttribute%2A> para limitar os atributos que podem ser renderizados na marca de abertura de um `<form>` elemento.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Substituir a <see cref="M:System.Web.UI.HtmlTextWriter.IsValidFormAttribute(System.String)" /> método para retornar <see langword="true" /> apenas para aqueles atributos que podem ser incluídos na <see langword="&lt;form&gt;" /> elemento da marcação para o qual a classe derivada do <see cref="T:System.Web.UI.HtmlTextWriter" /> classe destina-se.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="NewLine">
      <MemberSignature Language="C#" Value="public override string NewLine { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NewLine" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.NewLine" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property NewLine As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ NewLine { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NewLine : string with get, set" Usage="System.Web.UI.HtmlTextWriter.NewLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define a cadeia de caracteres de terminador de linha usada pelo objeto <see cref="T:System.Web.UI.HtmlTextWriter" />.</summary>
        <value>A cadeia de caracteres de terminador de linha usada pelo <see cref="T:System.Web.UI.HtmlTextWriter" /> atual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A cadeia de caracteres de terminador de linha padrão é um retorno de carro seguido por uma alimentação de linha ("\r\n").  
  
 A cadeia de caracteres de terminador de linha é gravada no fluxo de saída sempre que um do <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> métodos é chamado. Se o <xref:System.Web.UI.HtmlTextWriter.NewLine%2A> estiver definida como `null`, o caractere de nova linha padrão é usado.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como usar uma classe personalizada, derivada de <xref:System.Web.UI.HtmlTextWriter> classe, que substitui o <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> método. Quando chamado, o <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> substituição verifica se o gravador de texto renderiza qualquer `<label>` ou `<a>` elementos. Nesse caso, o <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> método determina se um atributo de estilo é definido para o rótulo. Se nenhum estilo estiver definido, o <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> método define o valor padrão para o `style:color` atributo para azul. O <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> , em seguida, usa o método de <xref:System.Web.UI.HtmlTextWriter.NewLine%2A> propriedade para inserir uma linha de quebra na marca de marcação e grava todos os outros atributos definidos.  
  
 [!code-cpp[HtmlTextWriter_Methods#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#4)]
 [!code-csharp[HtmlTextWriter_Methods#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#4)]
 [!code-vb[HtmlTextWriter_Methods#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.WriteLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="P:System.IO.TextWriter.NewLine" />
      </Docs>
    </Member>
    <Member MemberName="OnAttributeRender">
      <MemberSignature Language="C#" Value="protected virtual bool OnAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnAttributeRender (name As String, value As String, key As HtmlTextWriterAttribute) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberSignature Language="F#" Value="abstract member OnAttributeRender : string * string * System.Web.UI.HtmlTextWriterAttribute -&gt; bool&#xA;override this.OnAttributeRender : string * string * System.Web.UI.HtmlTextWriterAttribute -&gt; bool" Usage="htmlTextWriter.OnAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">Uma cadeia de caracteres que contém o nome do atributo a renderizar.</param>
        <param name="value">Uma cadeia de caracteres que contém o valor atribuído ao atributo.</param>
        <param name="key">O <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> associado ao atributo de marcação.</param>
        <summary>Determina se o atributo de marcação especificado e seu valor podem ser renderizados para o elemento atual da marcação.</summary>
        <returns>Sempre <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.HtmlTextWriter> implementação da classe de <xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A> método sempre retorna `true`. O <xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A> substituições podem determinar se um atributo será renderizado para a página.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como substituir o <xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A> método. Se um <xref:System.Web.UI.HtmlTextWriterAttribute.Size> atributo é renderizado, mas o <xref:System.Web.UI.HtmlTextWriterAttribute.Size> valor não é `30pt`, o <xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A> substitui as chamadas a <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> método para adicionar um <xref:System.Web.UI.HtmlTextWriterAttribute.Size> atributo e definir seu valor como `30pt`.  
  
 [!code-csharp[MarkupTextWriter_Methods3#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods3/CS/overriddenmarkup.cs#5)]
 [!code-vb[MarkupTextWriter_Methods3#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods3/VB/overriddenmarkup.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Se você herdar o <see cref="T:System.Web.UI.HtmlTextWriter" /> classe, você pode substituir o <see cref="M:System.Web.UI.HtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" /> método retorne <see langword="false" /> para impedir que um atributo que está sendo renderizado em todos os, que está sendo renderizado em um elemento específico ou está sendo processado para uma marcação específica. Por exemplo, se você não quiser que o objeto derivado de <see cref="T:System.Web.UI.HtmlTextWriter" /> para renderizar o <see langword="bgcolor" /> atributo <see langword="&lt;table&gt;" /> elementos, você pode substituir o <see cref="M:System.Web.UI.HtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" /> e retornar <see langword="false" /> quando <paramref name="name" /> passa <see langword="bgcolor" /> e o <see cref="P:System.Web.UI.HtmlTextWriter.TagName" /> é o valor da propriedade <see langword="table" />.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleAttributeRender">
      <MemberSignature Language="C#" Value="protected virtual bool OnStyleAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnStyleAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnStyleAttributeRender (name As String, value As String, key As HtmlTextWriterStyle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnStyleAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberSignature Language="F#" Value="abstract member OnStyleAttributeRender : string * string * System.Web.UI.HtmlTextWriterStyle -&gt; bool&#xA;override this.OnStyleAttributeRender : string * string * System.Web.UI.HtmlTextWriterStyle -&gt; bool" Usage="htmlTextWriter.OnStyleAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">Uma cadeia de caracteres que contém o atributo de estilo a ser renderizado.</param>
        <param name="value">Uma cadeia de caracteres que contém o valor atribuído ao atributo de estilo.</param>
        <param name="key">O <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> associado ao atributo de estilo.</param>
        <summary>Determina se o atributo de estilo de marcação especificado e seu valor podem ser renderizados para o elemento da marcação atual.</summary>
        <returns>Sempre <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.HtmlTextWriter> implementação da classe de <xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A> método sempre retorna `true`. O <xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A> substituições podem determinar se um atributo de estilo será renderizado para a página.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como substituir o <xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A> método. Se um <xref:System.Web.UI.HtmlTextWriterStyle.Color> atributo de estilo for renderizado, mas o <xref:System.Web.UI.HtmlTextWriterStyle.Color> valor não é `purple`, o <xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A> substituir usa o <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> método para definir o <xref:System.Web.UI.HtmlTextWriterStyle.Color> atributo `purple`.  
  
 [!code-csharp[MarkupTextWriter_Methods3#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods3/CS/overriddenmarkup.cs#6)]
 [!code-vb[MarkupTextWriter_Methods3#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods3/VB/overriddenmarkup.vb#6)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Se você herdar o <see cref="T:System.Web.UI.HtmlTextWriter" /> classe, você pode substituir o <see cref="M:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" /> método retorne <see langword="false" /> para impedir que um atributo de estilo que está sendo renderizado em todos os, que está sendo renderizado em um elemento específico ou está sendo processado para uma linguagem de marcação específica. Por exemplo, se você não quiser que o objeto que é derivado de <see cref="T:System.Web.UI.HtmlTextWriter" /> para renderizar o <see langword="color" /> atributo de estilo a um <see langword="&lt;p&gt;" /> elemento, você pode substituir o <see cref="M:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" /> e retornar <see langword="false" /> quando <paramref name="name" /> passa <see langword="color" />e o <see cref="P:System.Web.UI.HtmlTextWriter.TagName" /> é o valor da propriedade <see langword="p" />.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
      </Docs>
    </Member>
    <Member MemberName="OnTagRender">
      <MemberSignature Language="C#" Value="protected virtual bool OnTagRender (string name, System.Web.UI.HtmlTextWriterTag key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnTagRender(string name, valuetype System.Web.UI.HtmlTextWriterTag key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnTagRender (name As String, key As HtmlTextWriterTag) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnTagRender(System::String ^ name, System::Web::UI::HtmlTextWriterTag key);" />
      <MemberSignature Language="F#" Value="abstract member OnTagRender : string * System.Web.UI.HtmlTextWriterTag -&gt; bool&#xA;override this.OnTagRender : string * System.Web.UI.HtmlTextWriterTag -&gt; bool" Usage="htmlTextWriter.OnTagRender (name, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="name">Uma cadeia de caracteres que contém o nome do elemento a renderizar.</param>
        <param name="key">O <see cref="T:System.Web.UI.HtmlTextWriterTag" /> associado ao elemento.</param>
        <summary>Determina se o elemento de marcação especificado será renderizado para a página solicitante.</summary>
        <returns>Sempre <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.HtmlTextWriter> implementação da classe de <xref:System.Web.UI.HtmlTextWriter.OnTagRender%2A> método sempre retorna `true`. O <xref:System.Web.UI.HtmlTextWriter.OnTagRender%2A> substituições podem determinar se um elemento será renderizado para a página.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como substituir o <xref:System.Web.UI.HtmlTextWriter.OnTagRender%2A> método. Se um <xref:System.Web.UI.HtmlTextWriterTag.Font> é o elemento que está sendo processado, o <xref:System.Web.UI.HtmlTextWriter.OnTagRender%2A> substituir usa o <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A> método para determinar se um <xref:System.Web.UI.HtmlTextWriterAttribute.Size> atributo está sendo renderizado. Se não, ele usa o <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> método para criar um <xref:System.Web.UI.HtmlTextWriterAttribute.Size> do atributo e definir seu valor como `20pt`.  
  
 [!code-csharp[MarkupTextWriter_Methods3#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods3/CS/overriddenmarkup.cs#4)]
 [!code-vb[MarkupTextWriter_Methods3#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods3/VB/overriddenmarkup.vb#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Se você herdar o <see cref="T:System.Web.UI.HtmlTextWriter" /> classe, você pode substituir o <see cref="M:System.Web.UI.HtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" /> método retorne <see langword="false" /> para impedir que um elemento de marcação que está sendo renderizada todo ou para uma linguagem de marcação específica. Por exemplo, se você não quiser que o objeto que é derivado de <see cref="T:System.Web.UI.HtmlTextWriter" /> para renderizar o <see langword="&lt;font&gt;" /> elemento, você pode substituir o <see cref="M:System.Web.UI.HtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" /> método retorne <see langword="false" /> quando uma página é solicitada que contém um <see langword="&lt;font&gt;" /> elemento.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
      </Docs>
    </Member>
    <Member MemberName="OutputTabs">
      <MemberSignature Language="C#" Value="protected virtual void OutputTabs ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OutputTabs() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.OutputTabs" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OutputTabs ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OutputTabs();" />
      <MemberSignature Language="F#" Value="abstract member OutputTabs : unit -&gt; unit&#xA;override this.OutputTabs : unit -&gt; unit" Usage="htmlTextWriter.OutputTabs " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Grava uma série de cadeias de caracteres de guia que representam o nível de recuo de uma linha de caracteres de marcação.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.HtmlTextWriter.OutputTabs%2A> usa o <xref:System.Web.UI.HtmlTextWriter.Indent%2A> propriedade para determinar quantas cadeias de caracteres de guia para escrever obter o recuo desejado.  
  
 A cadeia de caracteres de guia é especificada com o <xref:System.Web.UI.HtmlTextWriter.%23ctor%2A> construtor. Se nenhuma cadeia de caracteres de tabulação for especificada, o <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> constante (`\t`) é usado.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como substituir a <xref:System.Web.UI.HtmlTextWriter.OutputTabs%2A> método em uma classe que deriva de <xref:System.Web.UI.HtmlTextWriter> classe. O <xref:System.Web.UI.HtmlTextWriter.OutputTabs%2A> substituir sempre usa o <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> constante para executar o recuo.  
  
 [!code-cpp[HtmlTextWriter_Methods#7](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#7)]
 [!code-csharp[HtmlTextWriter_Methods#7](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#7)]
 [!code-vb[HtmlTextWriter_Methods#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="P:System.Web.UI.HtmlTextWriter.Indent" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" />
      </Docs>
    </Member>
    <Member MemberName="PopEndTag">
      <MemberSignature Language="C#" Value="protected string PopEndTag ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string PopEndTag() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.PopEndTag" />
      <MemberSignature Language="VB.NET" Value="Protected Function PopEndTag () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ PopEndTag();" />
      <MemberSignature Language="F#" Value="member this.PopEndTag : unit -&gt; string" Usage="htmlTextWriter.PopEndTag " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Remove o elemento de marcação salvo mais recentemente na lista de elementos renderizados.</summary>
        <returns>Um <see cref="T:System.String" /> que contém o elemento de marcação renderizado mais recentemente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Os elementos são adicionados à lista de elementos de marcação renderizada pelo <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> método. O <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> método remove elementos de marcação da lista, chamando o <xref:System.Web.UI.HtmlTextWriter.PopEndTag%2A> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">A lista de elementos renderizados está vazia.</exception>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.PushEndTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="PushEndTag">
      <MemberSignature Language="C#" Value="protected void PushEndTag (string endTag);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void PushEndTag(string endTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.PushEndTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub PushEndTag (endTag As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void PushEndTag(System::String ^ endTag);" />
      <MemberSignature Language="F#" Value="member this.PushEndTag : string -&gt; unit" Usage="htmlTextWriter.PushEndTag endTag" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endTag" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="endTag">A marca de fechamento do elemento de marcação.</param>
        <summary>Salva o elemento de marcação especificado para uso posterior ao gerar a marca de fim de um elemento de marcação.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Os elementos são adicionados à lista de elementos de marcação renderizado quando o <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> chamadas de método a <xref:System.Web.UI.HtmlTextWriter.PushEndTag%2A> método. O <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> método Remove da lista de elementos de marcação depois que ele renderiza a marca de fim do elemento.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.PopEndTag" />
      </Docs>
    </Member>
    <Member MemberName="RegisterAttribute">
      <MemberSignature Language="C#" Value="protected static void RegisterAttribute (string name, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void RegisterAttribute(string name, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RegisterAttribute(System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Sub RegisterAttribute (name As String, key As HtmlTextWriterAttribute)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static void RegisterAttribute(System::String ^ name, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberSignature Language="F#" Value="static member RegisterAttribute : string * System.Web.UI.HtmlTextWriterAttribute -&gt; unit" Usage="System.Web.UI.HtmlTextWriter.RegisterAttribute (name, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">Uma cadeia de caracteres que contém o nome do atributo de marcação a registrar.</param>
        <param name="key">Um <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> que corresponde ao nome do atributo.</param>
        <summary>Registra os atributos de marcação, literais ou dinamicamente gerados, do arquivo de origem para que eles possam ser renderizados adequadamente para o cliente solicitante.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Atributos predefinidos da linguagem de marcação HTML são registrados por chamadas para o <xref:System.Web.UI.HtmlTextWriter.RegisterAttribute%2A> método quando o primeiro <xref:System.Web.UI.HtmlTextWriter> objeto é criado. Atributos dinâmicos podem ser registrados usando o <xref:System.Web.UI.HtmlTextWriter.RegisterAttribute%2A> método em outros momentos.  
  
 A tabela de registro usada pelo <xref:System.Web.UI.HtmlTextWriter.RegisterAttribute%2A> método for `static`, portanto, o registro de atributos se aplica a todos os <xref:System.Web.UI.HtmlTextWriter> objetos no computador host.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
      </Docs>
    </Member>
    <Member MemberName="RegisterStyle">
      <MemberSignature Language="C#" Value="protected static void RegisterStyle (string name, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void RegisterStyle(string name, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RegisterStyle(System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Sub RegisterStyle (name As String, key As HtmlTextWriterStyle)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static void RegisterStyle(System::String ^ name, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberSignature Language="F#" Value="static member RegisterStyle : string * System.Web.UI.HtmlTextWriterStyle -&gt; unit" Usage="System.Web.UI.HtmlTextWriter.RegisterStyle (name, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">A cadeia de caracteres passada do arquivo de origem especificando o nome do estilo.</param>
        <param name="key">O <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> que corresponde ao estilo especificado.</param>
        <summary>Registra as propriedades de estilo de marcação, literais ou dinamicamente geradas, do arquivo de origem para que eles possa ser renderizado adequadamente para o cliente solicitante.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Os atributos de (CSS) de folha de estilos em cascata predefinidos da linguagem de marcação HTML são registrados por chamadas para o <xref:System.Web.UI.HtmlTextWriter.RegisterStyle%2A> método quando o primeiro <xref:System.Web.UI.HtmlTextWriter> objeto é criado. Atributos de estilo dinâmico podem ser registrados usando o <xref:System.Web.UI.HtmlTextWriter.RegisterStyle%2A> método em outros momentos.  
  
 A tabela de registro usada pelo <xref:System.Web.UI.HtmlTextWriter.RegisterStyle%2A> método for `static`, portanto, o registro de atributos se aplica a todos os <xref:System.Web.UI.HtmlTextWriter> objetos no computador host.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
      </Docs>
    </Member>
    <Member MemberName="RegisterTag">
      <MemberSignature Language="C#" Value="protected static void RegisterTag (string name, System.Web.UI.HtmlTextWriterTag key);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void RegisterTag(string name, valuetype System.Web.UI.HtmlTextWriterTag key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RegisterTag(System.String,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Sub RegisterTag (name As String, key As HtmlTextWriterTag)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static void RegisterTag(System::String ^ name, System::Web::UI::HtmlTextWriterTag key);" />
      <MemberSignature Language="F#" Value="static member RegisterTag : string * System.Web.UI.HtmlTextWriterTag -&gt; unit" Usage="System.Web.UI.HtmlTextWriter.RegisterTag (name, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="name">Uma cadeia de caracteres que contém a marca HTML.</param>
        <param name="key">Um <see cref="T:System.Web.UI.HtmlTextWriterTag" /> que especifica qual elemento renderizar.</param>
        <summary>Registra marcas de marcação, literais ou dinamicamente geradas, do arquivo de origem para que elas possam ser renderizadas adequadamente para o cliente solicitante.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 As marcas de marcação predefinidos da linguagem HTML são registradas por chamadas para o <xref:System.Web.UI.HtmlTextWriter.RegisterTag%2A> método quando o primeiro <xref:System.Web.UI.HtmlTextWriter> objeto é criado. Marcas de marcação dinâmico podem ser registradas usando o <xref:System.Web.UI.HtmlTextWriter.RegisterTag%2A> método em outros momentos.  
  
 A tabela de registro usada pelo <xref:System.Web.UI.HtmlTextWriter.RegisterTag%2A> método for `static`, portanto, o registro de marcas se aplica a todos os <xref:System.Web.UI.HtmlTextWriter> objetos no computador host.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
      </Docs>
    </Member>
    <Member MemberName="RenderAfterContent">
      <MemberSignature Language="C#" Value="protected virtual string RenderAfterContent ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string RenderAfterContent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderAfterContent" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RenderAfterContent () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ RenderAfterContent();" />
      <MemberSignature Language="F#" Value="abstract member RenderAfterContent : unit -&gt; string&#xA;override this.RenderAfterContent : unit -&gt; string" Usage="htmlTextWriter.RenderAfterContent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Grava qualquer texto ou espaçamento que ocorre após o conteúdo e antes da marca de fechamento do elemento de marcação no fluxo de saída de marcação.</summary>
        <returns>Uma cadeia de caracteres que contém o espaçamento ou o texto a ser gravado após o conteúdo do elemento.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.HtmlTextWriter.RenderAfterContent%2A> método pode ser útil se você quiser inserir elementos filho do elemento de marcação atual.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como substituir a <xref:System.Web.UI.HtmlTextWriter.RenderAfterContent%2A> método em uma classe derivada do <xref:System.Web.UI.HtmlTextWriter> classe para determinar se um `<label>` elemento está sendo renderizado. Nesse caso, o <xref:System.Web.UI.HtmlTextWriter.RenderAfterContent%2A> substituição insere a marca de fechamento de uma `<font>` elemento imediatamente antes da marca de fechamento do `<label>` elemento. Se um elemento diferente de `<label>` está sendo processado, o <xref:System.Web.UI.HtmlTextWriter.RenderAfterContent%2A> método base é usado.  
  
 [!code-cpp[HtmlTextWriter_Methods1#3](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CPP/htw2.cpp#3)]
 [!code-csharp[HtmlTextWriter_Methods1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CS/htw2.cs#3)]
 [!code-vb[HtmlTextWriter_Methods1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods1/VB/htw2.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>O <see cref="T:System.Web.UI.HtmlTextWriter" /> implementação da classe de <see cref="M:System.Web.UI.HtmlTextWriter.RenderAfterContent" /> retorno do método <see langword="null" />. Substituir <see cref="M:System.Web.UI.HtmlTextWriter.RenderAfterContent" /> se você deseja gravar texto ou espaçamento depois do conteúdo de elemento, mas antes da marca de fechamento.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="RenderAfterTag">
      <MemberSignature Language="C#" Value="protected virtual string RenderAfterTag ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string RenderAfterTag() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderAfterTag" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RenderAfterTag () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ RenderAfterTag();" />
      <MemberSignature Language="F#" Value="abstract member RenderAfterTag : unit -&gt; string&#xA;override this.RenderAfterTag : unit -&gt; string" Usage="htmlTextWriter.RenderAfterTag " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Grava o espaçamento ou texto que ocorre após a marca de fechamento de um elemento de marcação.</summary>
        <returns>O espaçamento ou o texto a ser gravado após a marca de fechamento do elemento.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.HtmlTextWriter.RenderAfterTag%2A> método pode ser útil se você deseja processar marcas de fechamento adicional após a marca do elemento.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como substituir o <xref:System.Web.UI.HtmlTextWriter.RenderAfterTag%2A> método para determinar se uma classe derivada de <xref:System.Web.UI.HtmlTextWriter> classe estiver renderizando um `<label>` elemento. Nesse caso, o <xref:System.Web.UI.HtmlTextWriter.RenderAfterTag%2A> substituição insere a marca de fechamento de uma `<font>` elemento imediatamente após o `<label>` elemento. Se não for um `<label>` elemento, o <xref:System.Web.UI.HtmlTextWriter.RenderAfterTag%2A> método base é usado.  
  
 [!code-cpp[HtmlTextWriter_Methods4#2](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CPP/htmltextwriter_methods4.cpp#2)]
 [!code-csharp[HtmlTextWriter_Methods4#2](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CS/htmltextwriter_methods4.cs#2)]
 [!code-vb[HtmlTextWriter_Methods4#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods4/VB/htmltextwriter_methods4.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>O <see cref="T:System.Web.UI.HtmlTextWriter" /> implementação da classe de <see cref="M:System.Web.UI.HtmlTextWriter.RenderAfterTag" /> retorno do método <see langword="null" />. Substituir <see cref="M:System.Web.UI.HtmlTextWriter.RenderAfterTag" /> se você quiser escrever texto ou espaçamento depois do elemento de marca de fechamento.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="RenderBeforeContent">
      <MemberSignature Language="C#" Value="protected virtual string RenderBeforeContent ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string RenderBeforeContent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderBeforeContent" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RenderBeforeContent () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ RenderBeforeContent();" />
      <MemberSignature Language="F#" Value="abstract member RenderBeforeContent : unit -&gt; string&#xA;override this.RenderBeforeContent : unit -&gt; string" Usage="htmlTextWriter.RenderBeforeContent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Grava qualquer texto ou espaçamento antes do conteúdo e após a marca de abertura de um elemento de marcação.</summary>
        <returns>O texto ou espaçamento a gravar antes do conteúdo do elemento. Se não for substituído, <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeContent" /> retorna <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A> método pode ser útil se você quiser inserir elementos filho no elemento de marcação atual antes da marcação interna.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como substituir a <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A> método para determinar se uma classe derivada de <xref:System.Web.UI.HtmlTextWriter> classe está prestes a renderizar um `<label>` elemento. Nesse caso, o <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A> substituição insere a marca de abertura de um `<font>` elemento imediatamente após a marca de abertura do `<label>` elemento. Se não for um `<label>` elemento, o <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A> método base é usado.  
  
 [!code-cpp[HtmlTextWriter_Methods1#2](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CPP/htw2.cpp#2)]
 [!code-csharp[HtmlTextWriter_Methods1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CS/htw2.cs#2)]
 [!code-vb[HtmlTextWriter_Methods1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods1/VB/htw2.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>O <see cref="T:System.Web.UI.HtmlTextWriter" /> implementação da classe de <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeContent" /> retorno do método <see langword="null" />. Substituir <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeContent" /> se você deseja gravar texto ou espaçamento após a marca de abertura, mas antes do conteúdo do elemento.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="RenderBeforeTag">
      <MemberSignature Language="C#" Value="protected virtual string RenderBeforeTag ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string RenderBeforeTag() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderBeforeTag" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RenderBeforeTag () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ RenderBeforeTag();" />
      <MemberSignature Language="F#" Value="abstract member RenderBeforeTag : unit -&gt; string&#xA;override this.RenderBeforeTag : unit -&gt; string" Usage="htmlTextWriter.RenderBeforeTag " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Grava qualquer texto ou espaçamento que ocorre antes da marca de abertura de um elemento de marcação.</summary>
        <returns>O texto ou espaçamento para gravar antes da marca de abertura do elemento de marcação. Se não for substituído, será <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> método pode ser útil se você deseja processar marcas de abertura mais antes da marca de abertura do elemento desejado.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como substituir a <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> método para determinar se uma classe que deriva de <xref:System.Web.UI.HtmlTextWriter> classe está prestes a renderizar um `<label>` elemento. Nesse caso, o <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> substituição insere a marca de abertura de um `<font>` elemento imediatamente antes do `<label>` elemento. Se não estiver renderizando um `<label>` elemento, o <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> método base é usado.  
  
 [!code-cpp[HtmlTextWriter_Methods4#1](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CPP/htmltextwriter_methods4.cpp#1)]
 [!code-csharp[HtmlTextWriter_Methods4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CS/htmltextwriter_methods4.cs#1)]
 [!code-vb[HtmlTextWriter_Methods4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods4/VB/htmltextwriter_methods4.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>O <see cref="T:System.Web.UI.HtmlTextWriter" /> implementação da classe de <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeTag" /> retorno do método <see langword="null" />. Substituir <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeTag" /> se você quiser escrever texto ou espaçamento antes do elemento de marca de abertura.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RenderBeginTag">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Grava a marca de abertura de um elemento de marcação no fluxo de saída.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RenderBeginTag">
      <MemberSignature Language="C#" Value="public virtual void RenderBeginTag (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RenderBeginTag(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RenderBeginTag (tagName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RenderBeginTag(System::String ^ tagName);" />
      <MemberSignature Language="F#" Value="abstract member RenderBeginTag : string -&gt; unit&#xA;override this.RenderBeginTag : string -&gt; unit" Usage="htmlTextWriter.RenderBeginTag tagName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">Uma cadeia de caracteres que contém o nome do elemento de marcação para o qual a marca de abertura será renderizada.</param>
        <summary>Grava a marca de abertura do elemento de marcação especificado no fluxo de saída.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> substituir do <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%28System.String%29> método, se o elemento de marcação não é um do <xref:System.Web.UI.HtmlTextWriterTag> valores de enumeração.  
  
 Para gerar um elemento de marcação usando o <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> método, a primeira chamada a <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> e o <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> métodos, conforme necessário, para especificar atributos de elementos ou atributos de estilo que devem aparecer na marca de abertura do elemento. Depois de gerar a marcação interna, chame o <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> método para gerar a marca de fechamento.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como chamar o <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> método em um controle personalizado para renderizar a marca de abertura de um não-padrão `MyTag` elemento. O exemplo de código, em seguida, chama o <xref:System.Web.UI.HtmlTextWriter.Write%2A> método para renderizar a marcação interna e, em seguida, chama o <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> método para fechar o elemento.  
  
 Este exemplo de código gera a marcação a seguir:  
  
 `<MyTag>`  
  
 `Contents of MyTag`  
  
 `</MyTag>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#4)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#4)]
 [!code-vb[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
      </Docs>
    </Member>
    <Member MemberName="RenderBeginTag">
      <MemberSignature Language="C#" Value="public virtual void RenderBeginTag (System.Web.UI.HtmlTextWriterTag tagKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RenderBeginTag(valuetype System.Web.UI.HtmlTextWriterTag tagKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RenderBeginTag (tagKey As HtmlTextWriterTag)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RenderBeginTag(System::Web::UI::HtmlTextWriterTag tagKey);" />
      <MemberSignature Language="F#" Value="abstract member RenderBeginTag : System.Web.UI.HtmlTextWriterTag -&gt; unit&#xA;override this.RenderBeginTag : System.Web.UI.HtmlTextWriterTag -&gt; unit" Usage="htmlTextWriter.RenderBeginTag tagKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagKey" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="tagKey">Um dos valores <see cref="T:System.Web.UI.HtmlTextWriterTag" /> que definem a marca de abertura do elemento de marcação a ser renderizado.</param>
        <summary>Grava a marca de abertura do elemento de marcação associado ao valor de enumeração <see cref="T:System.Web.UI.HtmlTextWriterTag" /> especificado no fluxo de saída.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> sobrecarga da <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%28System.Web.UI.HtmlTextWriterTag%29> método se o elemento de marcação é de um tipo conhecido que é um do <xref:System.Web.UI.HtmlTextWriterTag> valores de enumeração.  
  
 Para gerar um elemento de marcação usando o <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> método, a primeira chamada a <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> e o <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> métodos, conforme necessário, para especificar atributos de elementos ou atributos de estilo que devem aparecer na marca de abertura do elemento. Depois de gerar a marcação interna, chame o <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> método para gerar a marca de fechamento.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como usar o <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> método para gerar a marca de abertura de um `<img>` elemento. Os atributos que são adicionados ao elemento, o <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> método estará na abertura `<img>` marca. O <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> método é usado para gerar a marca de fechamento.  
  
 Este exemplo de código gera a marcação a seguir:  
  
 `<img alt="Encoding &quot;Required&quot;" myattribute="No &quot;encoding&quot; required">`  
  
 `</img>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#3)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
      </Docs>
    </Member>
    <Member MemberName="RenderEndTag">
      <MemberSignature Language="C#" Value="public virtual void RenderEndTag ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RenderEndTag() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RenderEndTag ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RenderEndTag();" />
      <MemberSignature Language="F#" Value="abstract member RenderEndTag : unit -&gt; unit&#xA;override this.RenderEndTag : unit -&gt; unit" Usage="htmlTextWriter.RenderEndTag " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Grava a marca de fim de um elemento de marcação no fluxo de saída.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chame o <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> método após o <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> sobrecarga é chamada e depois que todo o conteúdo entre as marcas de abertura e fechamento (marcação interna) do elemento é processado.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como chamar o <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> método após ambos os <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> método que gera a marca de abertura e o <xref:System.Web.UI.HtmlTextWriter.Write%2A> método que renderiza a marcação interna entre as marcas de abertura e fechamento de personalizado `MyTag` elemento tiver sido chamado.  
  
 Este exemplo de código gera a marcação a seguir:  
  
 `<MyTag>`  
  
 `Contents of MyTag`  
  
 `</MyTag>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#4)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#4)]
 [!code-vb[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="SelfClosingChars">
      <MemberSignature Language="C#" Value="public const string SelfClosingChars;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string SelfClosingChars" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SelfClosingChars" />
      <MemberSignature Language="VB.NET" Value="Public Const SelfClosingChars As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ SelfClosingChars;" />
      <MemberSignature Language="F#" Value="val mutable SelfClosingChars : string" Usage="System.Web.UI.HtmlTextWriter.SelfClosingChars" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Representa um espaço e a marca de barra (/) de autofechamento de uma marca de marcação.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.HtmlTextWriter.SelfClosingChars> campo é usado em elementos de marcação que são Self-closed. Por exemplo:  
  
 `<input type="submit" value="go"  />`  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="SelfClosingTagEnd">
      <MemberSignature Language="C#" Value="public const string SelfClosingTagEnd;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string SelfClosingTagEnd" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd" />
      <MemberSignature Language="VB.NET" Value="Public Const SelfClosingTagEnd As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ SelfClosingTagEnd;" />
      <MemberSignature Language="F#" Value="val mutable SelfClosingTagEnd : string" Usage="System.Web.UI.HtmlTextWriter.SelfClosingTagEnd" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Representa a marca de barra de fechamento e o colchete angular direito (/&gt;) de um elemento de marcação de autofechamento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd> campo é usado pelo <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> método ao construir elementos de marcação de autofechamento.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como renderizar o valor de um personalizado `FileName` propriedade seguido por aspas e caracteres representados pela <xref:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd> campo. O exemplo de código chama o <xref:System.Web.UI.HtmlTextWriter.Write%2A> e passa o <xref:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd> campo como o argumento de parâmetro para fechar o elemento.  
  
 Este exemplo de código renderiza o `FileName` valor da propriedade e, em seguida, a marcação a seguir:  
  
 `" />`  
  
 [!code-csharp[MarkupTextWriter_Constants#11](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpleimage.cs#11)]
 [!code-vb[MarkupTextWriter_Constants#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpleimage.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="SemicolonChar">
      <MemberSignature Language="C#" Value="public const char SemicolonChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char SemicolonChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SemicolonChar" />
      <MemberSignature Language="VB.NET" Value="Public Const SemicolonChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char SemicolonChar;" />
      <MemberSignature Language="F#" Value="val mutable SemicolonChar : char" Usage="System.Web.UI.HtmlTextWriter.SemicolonChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Representa o ponto e vírgula (;).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Passe o <xref:System.Web.UI.HtmlTextWriter.SemicolonChar> campo como o argumento de parâmetro em um <xref:System.Web.UI.HtmlTextWriter.Write%2A> chamada de método quando quiser renderizar um ponto e vírgula de um controle personalizado ou um adaptador.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como processar manualmente uma série de estilos em um elemento de marcação. O exemplo de código usa o <xref:System.Web.UI.HtmlTextWriter.Write%2A> método para renderizar `font-size` e `border-style` atributos de estilo. O <xref:System.Web.UI.HtmlTextWriter.SemicolonChar> campo é usado como um parâmetro do <xref:System.Web.UI.HtmlTextWriter.Write%2A> método para separar o valor da `font-size` atributo desde o início do `border-style` atributo.  
  
 Este exemplo de código processa a marcação a seguir:  
  
 `style="font-size:12pt;border-style:ridge"`  
  
 [!code-csharp[MarkupTextWriter_Constants#7](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simplebutton.cs#7)]
 [!code-vb[MarkupTextWriter_Constants#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simplebutton.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.Write(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SingleQuoteChar">
      <MemberSignature Language="C#" Value="public const char SingleQuoteChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char SingleQuoteChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SingleQuoteChar" />
      <MemberSignature Language="VB.NET" Value="Public Const SingleQuoteChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char SingleQuoteChar;" />
      <MemberSignature Language="F#" Value="val mutable SingleQuoteChar : char" Usage="System.Web.UI.HtmlTextWriter.SingleQuoteChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Representa um apóstrofo (').</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Web.UI.HtmlTextWriter.SingleQuoteChar> campo quando for necessário renderizar um apóstrofo.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="SlashChar">
      <MemberSignature Language="C#" Value="public const char SlashChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char SlashChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SlashChar" />
      <MemberSignature Language="VB.NET" Value="Public Const SlashChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char SlashChar;" />
      <MemberSignature Language="F#" Value="val mutable SlashChar : char" Usage="System.Web.UI.HtmlTextWriter.SlashChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Representa a marca de barra (/).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Web.UI.HtmlTextWriter.SlashChar> marca de campo para renderizar a barra "/" quando você escreve uma URL. O <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> usa o <xref:System.Web.UI.HtmlTextWriter.SlashChar> campo ao gravar a marca de fechamento de um elemento de marcação.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como processar manualmente o `src` atributo de um `<img>` elemento. O exemplo de código usa o <xref:System.Web.UI.HtmlTextWriter.Write%2A> método com o <xref:System.Web.UI.HtmlTextWriter.SlashChar> marca de campo como seu parâmetro para renderizar a barra "/" no caminho que é aplicado para o `src` atributo.  
  
 Este exemplo de código processa a marcação a seguir:  
  
 `src="/images/`  
  
 [!code-csharp[MarkupTextWriter_Constants#10](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpleimage.cs#10)]
 [!code-vb[MarkupTextWriter_Constants#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpleimage.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SpaceChar">
      <MemberSignature Language="C#" Value="public const char SpaceChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char SpaceChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SpaceChar" />
      <MemberSignature Language="VB.NET" Value="Public Const SpaceChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char SpaceChar;" />
      <MemberSignature Language="F#" Value="val mutable SpaceChar : char" Usage="System.Web.UI.HtmlTextWriter.SpaceChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Representa um caractere de espaço ( ).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.HtmlTextWriter.SpaceChar> campo é usado pelas <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> e <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> métodos ao escrever separadores entre elementos e atributos.  
  
   
  
## Examples  
 Esta seção fornece dois exemplos de código. O primeiro deles demonstra como criar uma matriz de caracteres. Um segundo demonstra como usar a matriz.  
  
 Esses exemplos de código geram a marcação a seguir:  
  
 `<label>`  
  
 `hello world`  
  
 `</label>`  
  
 O exemplo de código a seguir mostra como criar uma <xref:System.Char> matriz que contém o <xref:System.Web.UI.HtmlTextWriter.SpaceChar> campo.  
  
 [!code-csharp[MarkupTextWriter_Methods2#13](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#13)]
 [!code-vb[MarkupTextWriter_Methods2#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#13)]  
  
 O exemplo de código a seguir mostra como usar a matriz que foi criada no exemplo de código anterior como um parâmetro ao chamar o <xref:System.Web.UI.HtmlTextWriter.Write%2A> método.  
  
 [!code-csharp[MarkupTextWriter_Methods2#12](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#12)]
 [!code-vb[MarkupTextWriter_Methods2#12](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.Web.UI.HtmlTextWriterTag)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="StyleEqualsChar">
      <MemberSignature Language="C#" Value="public const char StyleEqualsChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char StyleEqualsChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.StyleEqualsChar" />
      <MemberSignature Language="VB.NET" Value="Public Const StyleEqualsChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char StyleEqualsChar;" />
      <MemberSignature Language="F#" Value="val mutable StyleEqualsChar : char" Usage="System.Web.UI.HtmlTextWriter.StyleEqualsChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Representa o caractere de igual para estilo (<see langword=":" />) usado para definir atributos de estilo como iguais a determinados valores.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.HtmlTextWriter.StyleEqualsChar> campo é usado pelo <xref:System.Web.UI.HtmlTextWriter.WriteStyleAttribute%2A> método para delimitar valores e nomes de estilo.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como renderizar uma `FontWeight` atributo e valor de `bold` à marca de abertura de um elemento. O exemplo de código usa o <xref:System.Web.UI.HtmlTextWriter.Write%2A> método com o <xref:System.Web.UI.HtmlTextWriter.StyleEqualsChar> campo como o parâmetro para renderizar o caractere que define o valor de cada atributo de estilo.  
  
 Este exemplo de código processa a marcação a seguir:  
  
 `FontWeight:"bold"`  
  
 [!code-csharp[MarkupTextWriter_Constants#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#5)]
 [!code-vb[MarkupTextWriter_Constants#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteStyleAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TagKey">
      <MemberSignature Language="C#" Value="protected System.Web.UI.HtmlTextWriterTag TagKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.HtmlTextWriterTag TagKey" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.TagKey" />
      <MemberSignature Language="VB.NET" Value="Protected Property TagKey As HtmlTextWriterTag" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Web::UI::HtmlTextWriterTag TagKey { System::Web::UI::HtmlTextWriterTag get(); void set(System::Web::UI::HtmlTextWriterTag value); };" />
      <MemberSignature Language="F#" Value="member this.TagKey : System.Web.UI.HtmlTextWriterTag with get, set" Usage="System.Web.UI.HtmlTextWriter.TagKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterTag</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o valor <see cref="T:System.Web.UI.HtmlTextWriterTag" /> para o elemento de marcação especificado.</summary>
        <value>O elemento de marcação que está tendo sua marca de abertura renderizada.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.HtmlTextWriter.TagKey%2A> propriedade será usado somente para classes que herdam a <xref:System.Web.UI.HtmlTextWriter> classe. Você deve ler ou definir a <xref:System.Web.UI.HtmlTextWriter.TagKey%2A> propriedade somente em uma chamada para o <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> método; isso é a única vez em que ele é definido como um valor consistente.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra uma versão de substituição a <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A> método em uma classe que deriva de <xref:System.Web.UI.HtmlTextWriter> classe. Ele usa o valor da <xref:System.Web.UI.HtmlTextWriter.TagKey%2A> propriedade para determinar se um controle de servidor usando o personalizado <xref:System.Web.UI.HtmlTextWriter> objeto estiver renderizando um `<label>` elemento de marcação. Se for, um `<font>` elemento com um `color` atributo definido como `red` é retornado para modificar a formatação do `<label>` texto do elemento.  
  
 [!code-cpp[HtmlTextWriter_Methods1#2](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CPP/htw2.cpp#2)]
 [!code-csharp[HtmlTextWriter_Methods1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CS/htw2.cs#2)]
 [!code-vb[HtmlTextWriter_Methods1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods1/VB/htw2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">O valor da propriedade não pode ser definido.</exception>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="P:System.Web.UI.HtmlTextWriter.TagName" />
      </Docs>
    </Member>
    <Member MemberName="TagLeftChar">
      <MemberSignature Language="C#" Value="public const char TagLeftChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char TagLeftChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.TagLeftChar" />
      <MemberSignature Language="VB.NET" Value="Public Const TagLeftChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char TagLeftChar;" />
      <MemberSignature Language="F#" Value="val mutable TagLeftChar : char" Usage="System.Web.UI.HtmlTextWriter.TagLeftChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Representa o colchete angular de abertura (&lt;) de uma marca de marcação.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.HtmlTextWriter.TagLeftChar> campo é usado pelas <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>, <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A>, <xref:System.Web.UI.HtmlTextWriter.WriteFullBeginTag%2A>, e <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> métodos durante a gravação de marcas de marcação.  
  
   
  
## Examples  
 O exemplo de código a seguir processa o primeiro caractere da marca de abertura de um `<table>` elemento com o nome do elemento. O exemplo de código usa o <xref:System.Web.UI.HtmlTextWriter.Write%2A> método com o <xref:System.Web.UI.HtmlTextWriter.TagLeftChar> campo como um parâmetro.  
  
 Este exemplo de código processa a marcação a seguir:  
  
 `<table`  
  
 [!code-csharp[MarkupTextWriter_Constants#9](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#9)]
 [!code-vb[MarkupTextWriter_Constants#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.Web.UI.HtmlTextWriterTag)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteBeginTag(System.String)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteFullBeginTag(System.String)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TagName">
      <MemberSignature Language="C#" Value="protected string TagName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TagName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.TagName" />
      <MemberSignature Language="VB.NET" Value="Protected Property TagName As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::String ^ TagName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TagName : string with get, set" Usage="System.Web.UI.HtmlTextWriter.TagName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o nome da marca do elemento de marcação que está sendo renderizado.</summary>
        <value>O nome da marca do elemento de marcação que está sendo renderizado.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.HtmlTextWriter.TagName%2A> propriedade será usado somente para classes que herdam a <xref:System.Web.UI.HtmlTextWriter> classe. Você deve ler ou definir a <xref:System.Web.UI.HtmlTextWriter.TagName%2A> propriedade apenas no <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> chamadas de método; isso é a única vez em que ele é definido como um valor consistente.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra uma versão de substituição a <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> método em uma classe que deriva de <xref:System.Web.UI.HtmlTextWriter> classe. O exemplo de código verifica se o elemento para renderizar é um `<label>` elemento chamando o <xref:System.String.Compare%2A?displayProperty=nameWithType> método e, em seguida, passando a <xref:System.Web.UI.HtmlTextWriter.TagName%2A> o valor da propriedade e uma cadeia de caracteres, `"label"`, como os argumentos de parâmetro. Se um `<label>` elemento está prestes a ser renderizado, a marca de abertura de um `<font>` elemento, com um `color` atributo definido como `red`, é renderizada antes do `<label>` marcas de abertura do elemento. Se o elemento para renderizar não é um `<label>` elemento, a versão da classe base do <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> método é chamado.  
  
 [!code-cpp[HtmlTextWriter_Methods4#1](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CPP/htmltextwriter_methods4.cpp#1)]
 [!code-csharp[HtmlTextWriter_Methods4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CS/htmltextwriter_methods4.cs#1)]
 [!code-vb[HtmlTextWriter_Methods4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods4/VB/htmltextwriter_methods4.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="P:System.Web.UI.HtmlTextWriter.TagKey" />
      </Docs>
    </Member>
    <Member MemberName="TagRightChar">
      <MemberSignature Language="C#" Value="public const char TagRightChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char TagRightChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.TagRightChar" />
      <MemberSignature Language="VB.NET" Value="Public Const TagRightChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char TagRightChar;" />
      <MemberSignature Language="F#" Value="val mutable TagRightChar : char" Usage="System.Web.UI.HtmlTextWriter.TagRightChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Representa o colchete angular de fechamento (&gt;) de uma marca de marcação.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.HtmlTextWriter.TagRightChar> campo é usado pelas <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>, <xref:System.Web.UI.HtmlTextWriter.WriteFullBeginTag%2A>, e <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> métodos durante a gravação de marcas de marcação.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como renderizar a marca de fechamento de um `<table>` elemento por meio de chamadas para sobrecargas do <xref:System.Web.UI.HtmlTextWriter.Write%2A> método. Para renderizar o caractere final da marca, o exemplo de código usa o <xref:System.Web.UI.HtmlTextWriter.Write%2A> método com o <xref:System.Web.UI.HtmlTextWriter.TagRightChar> campo como um parâmetro.  
  
 Este exemplo de código processa a marcação a seguir:  
  
 `</table>`  
  
 [!code-csharp[MarkupTextWriter_Constants#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#4)]
 [!code-vb[MarkupTextWriter_Constants#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.Web.UI.HtmlTextWriterTag)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteFullBeginTag(System.String)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Write">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Grava o tipo de dados especificado no fluxo de saída, juntamente a qualquer espaçamento de tabulação pendente.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(bool value);" />
      <MemberSignature Language="F#" Value="override this.Write : bool -&gt; unit" Usage="htmlTextWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">O <see cref="T:System.Boolean" /> a gravar no fluxo de saída.</param>
        <summary>Grava a representação de texto de um valor booliano no fluxo de saída, juntamente com qualquer espaçamento de guia pendente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.HtmlTextWriter.Write%2A> método gera qualquer guias que estão pendentes e, em seguida, chama o <xref:System.IO.TextWriter.Write%2A> método de base.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(char value);" />
      <MemberSignature Language="F#" Value="override this.Write : char -&gt; unit" Usage="htmlTextWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">O caractere Unicode a gravar no fluxo de saída.</param>
        <summary>Grava a representação de texto de um caractere Unicode no fluxo de saída, juntamente com qualquer espaçamento de guia pendente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.HtmlTextWriter.Write%2A> método gera qualquer guias que estão pendentes e, em seguida, chama o <xref:System.IO.TextWriter.Write%2A> método de base.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como usar o <xref:System.Web.UI.HtmlTextWriter.Write%2A> método para encerrar a marca de abertura de um `<img>` elemento usando o <xref:System.Web.UI.HtmlTextWriter.TagRightChar> constante.  
  
 Este exemplo de código processa a marcação a seguir:  
  
 `<img alt="A custom image">`  
  
 `</img>`  
  
 [!code-csharp[MarkupTextWriter_Samples1#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Samples1/CS/markuptextwriter_samples1.cs#5)]
 [!code-vb[MarkupTextWriter_Samples1#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Samples1/VB/markuptextwriter_samples1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(char[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As Char())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;char&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="override this.Write : char[] -&gt; unit" Usage="htmlTextWriter.Write buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="buffer">A matriz de caracteres Unicode a gravar no fluxo de saída.</param>
        <summary>Grava a representação de texto de uma matriz de caracteres Unicode no fluxo de saída, juntamente com qualquer espaçamento de guia pendente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.HtmlTextWriter.Write%2A> método gera qualquer guias que estão pendentes e, em seguida, chama o <xref:System.IO.TextWriter.Write%2A> método de base.  
  
   
  
## Examples  
 Esta seção fornece dois exemplos de código. O primeiro deles demonstra como criar uma matriz de caracteres. Um segundo demonstra como usar a matriz.  
  
 Esses exemplos de código geram a marcação a seguir:  
  
 `<label>`  
  
 `hello world`  
  
 `</label>`  
  
 O exemplo de código a seguir demonstra como criar uma matriz de caracteres soletrar `hello world`. Incluída na matriz é o <xref:System.Web.UI.HtmlTextWriter.SpaceChar> campo, que cria um espaço entre as duas palavras.  
  
 [!code-csharp[MarkupTextWriter_Methods2#13](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#13)]
 [!code-vb[MarkupTextWriter_Methods2#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#13)]  
  
 O exemplo de código a seguir demonstra como usar o <xref:System.Web.UI.HtmlTextWriter.Write%2A> método para renderizar o `hello world` criado no exemplo de código anterior para uma página, quando o controle que contém esse código de exemplo é incluído em uma página de matriz de caracteres.  
  
 [!code-csharp[MarkupTextWriter_Methods2#12](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#12)]
 [!code-vb[MarkupTextWriter_Methods2#12](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(double value);" />
      <MemberSignature Language="F#" Value="override this.Write : double -&gt; unit" Usage="htmlTextWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">O número de ponto flutuante de precisão dupla para gravar no fluxo de saída.</param>
        <summary>Grava a representação de texto de um número de ponto flutuante de precisão dupla no fluxo de saída, juntamente com qualquer espaçamento de guia pendente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.HtmlTextWriter.Write%2A> método gera qualquer guias que estão pendentes e, em seguida, chama o <xref:System.IO.TextWriter.Write%2A> método de base.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como usar o <xref:System.Web.UI.HtmlTextWriter.Write%2A> método para renderizar o valor da <xref:System.Double.MaxValue?displayProperty=nameWithType> campo.  
  
 Este exemplo de código gera a marcação a seguir:  
  
 `<label>`  
  
 `1.79769313486232E+308`  
  
 `</label>`  
  
 [!code-csharp[MarkupTextWriter_Methods1#7](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#7)]
 [!code-vb[MarkupTextWriter_Methods1#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(int value);" />
      <MemberSignature Language="F#" Value="override this.Write : int -&gt; unit" Usage="htmlTextWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">O inteiro com sinal de 32 bytes a gravar no fluxo de saída.</param>
        <summary>Grava a representação de texto de um inteiro com sinal de 32 bytes no fluxo de saída, juntamente com qualquer espaçamento de guia pendente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.HtmlTextWriter.Write%2A> método gera qualquer guias que estão pendentes e, em seguida, chama o <xref:System.IO.TextWriter.Write%2A> método de base.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(long value);" />
      <MemberSignature Language="F#" Value="override this.Write : int64 -&gt; unit" Usage="htmlTextWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">O inteiro com sinal de 64 bytes a gravar no fluxo de saída.</param>
        <summary>Grava a representação de texto de um inteiro com sinal de 64 bytes no fluxo de saída, juntamente com qualquer espaçamento de guia pendente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.HtmlTextWriter.Write%2A> método gera qualquer guias que estão pendentes e, em seguida, chama o <xref:System.IO.TextWriter.Write%2A> método de base.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Write : obj -&gt; unit" Usage="htmlTextWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">O objeto a ser gravado no fluxo de saída.</param>
        <summary>Grava a representação de texto de um objeto no fluxo de saída, juntamente com qualquer espaçamento de guia pendente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.HtmlTextWriter.Write%2A> método gera qualquer guias que estão pendentes e, em seguida, chama o <xref:System.IO.TextWriter.Write%2A> método de base.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como usar o <xref:System.Web.UI.HtmlTextWriter.Write%2A> método para renderizar o valor da <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> propriedade.  
  
 Este exemplo de código gera a marcação a seguir:  
  
 `This is a rendered CultureInfo object.`  
  
 `<bold>`  
  
 O valor da <xref:System.Globalization.CultureInfo.CurrentCulture%2A> propriedade:  
  
 `</bold>`  
  
 [!code-csharp[MarkupTextWriter_Methods1#8](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#8)]
 [!code-vb[MarkupTextWriter_Methods1#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(float value);" />
      <MemberSignature Language="F#" Value="override this.Write : single -&gt; unit" Usage="htmlTextWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">O número de ponto flutuante de precisão simples para gravar no fluxo de saída.</param>
        <summary>Grava a representação de texto de um número de ponto flutuante de precisão simples no fluxo de saída, juntamente com qualquer espaçamento de guia pendente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.HtmlTextWriter.Write%2A> método gera qualquer guias que estão pendentes e, em seguida, chama o <xref:System.IO.TextWriter.Write%2A> método de base.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como usar o <xref:System.Web.UI.HtmlTextWriter.Write%2A> método para renderizar o valor da <xref:System.Single.Epsilon?displayProperty=nameWithType> campo, que é o menor valor possível do <xref:System.Single> estrutura.  
  
 Este exemplo de código gera a marcação a seguir:  
  
 `<b>`  
  
 `1.401298E-45`  
  
 `</b>`  
  
 [!code-csharp[MarkupTextWriter_Methods1#10](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#10)]
 [!code-vb[MarkupTextWriter_Methods1#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (s As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ s);" />
      <MemberSignature Language="F#" Value="override this.Write : string -&gt; unit" Usage="htmlTextWriter.Write s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">A cadeia de caracteres a ser gravada no fluxo de saída.</param>
        <summary>Grava a cadeia de caracteres especificada no fluxo de saída, juntamente a qualquer espaçamento de tabulação pendente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.HtmlTextWriter.Write%2A> método gera qualquer guias que estão pendentes e, em seguida, chama o <xref:System.IO.TextWriter.Write%2A> método de base.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como usar o <xref:System.Web.UI.HtmlTextWriter.Write%2A> método para processar uma cadeia de caracteres entre as marcas de abertura e fechamento de um elemento de marcação personalizada.  
  
 Este exemplo de código gera a marcação a seguir:  
  
 `<MyTag>`  
  
 `Contents of MyTag`  
  
 `</MyTag>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#4)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#4)]
 [!code-vb[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (format As String, arg0 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ format, System::Object ^ arg0);" />
      <MemberSignature Language="F#" Value="override this.Write : string * obj -&gt; unit" Usage="htmlTextWriter.Write (format, arg0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Uma cadeia de caracteres que contém zero ou mais itens de formato.</param>
        <param name="arg0">Um objeto a ser formatado.</param>
        <summary>Grava uma cadeia de caracteres de guia e uma cadeia de caracteres formatada no fluxo de saída, usando a mesma semântica do método <see cref="M:System.String.Format(System.String,System.Object)" />, juntamente com qualquer espaçamento de guia pendente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.HtmlTextWriter.Write%2A> método gera qualquer guias que estão pendentes e, em seguida, chama o <xref:System.IO.TextWriter.Write%2A> método de base.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como usar o <xref:System.Web.UI.HtmlTextWriter.Write%2A> método para processar uma cadeia de caracteres formatada com o valor da <xref:System.Globalization.CultureInfo.CurrentCulture%2A> propriedade.  
  
 [!code-csharp[MarkupTextWriter_Methods1#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#5)]
 [!code-vb[MarkupTextWriter_Methods1#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.String.Format(System.String,System.Object)" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string format, params object[] arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string format, object[] arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (format As String, ParamArray arg As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ arg);" />
      <MemberSignature Language="F#" Value="override this.Write : string * obj[] -&gt; unit" Usage="htmlTextWriter.Write (format, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-1.1">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">Uma cadeia de caracteres que contém zero ou mais itens de formato.</param>
        <param name="arg">Uma matriz de objeto a ser formatada.</param>
        <summary>Grava uma cadeia de caracteres formatada que contém a representação de texto de uma matriz de objeto para o fluxo de saída, juntamente com qualquer espaçamento de guia pendente. Esse método usa a mesma semântica do método <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.HtmlTextWriter.Write%2A> método gera qualquer guias que estão pendentes e, em seguida, chama o <xref:System.IO.TextWriter.Write%2A> método de base.  
  
   
  
## Examples  
 Esta seção contém dois exemplos de código. O primeiro deles demonstra como renderizar uma cadeia de caracteres formatada e o conteúdo de uma matriz. Um segundo demonstra como declarar a matriz.  
  
 O exemplo de código a seguir mostra como usar o <xref:System.Web.UI.HtmlTextWriter.Write%2A> método para processar uma cadeia de caracteres formatada e o conteúdo de uma matriz de objetos, chamado `curPriceTime`. A chamada de método renderiza o segundo membro da matriz antes que ele processa o primeiro membro.  
  
 [!code-csharp[MarkupTextWriter_Methods2#9](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#9)]
 [!code-vb[MarkupTextWriter_Methods2#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#9)]  
  
 O exemplo de código a seguir demonstra a declarar a `curPriceTime` matriz de objetos.  
  
 [!code-csharp[MarkupTextWriter_Methods2#14](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#14)]
 [!code-vb[MarkupTextWriter_Methods2#14](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.String.Format(System.String,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.Write : char[] * int * int -&gt; unit" Usage="htmlTextWriter.Write (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">A matriz de caracteres da qual gravar texto no fluxo de saída.</param>
        <param name="index">O local do índice na matriz no qual a leitura começa.</param>
        <param name="count">O número de caracteres a gravar no fluxo de saída.</param>
        <summary>Grava a representação de texto de uma submatriz de caracteres Unicode no fluxo de saída, juntamente com qualquer espaçamento de guia pendente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.HtmlTextWriter.Write%2A> método gera qualquer guias que estão pendentes e, em seguida, chama o <xref:System.IO.TextWriter.Write%2A> método de base.  
  
   
  
## Examples  
 Esta seção fornece dois exemplos de código. O primeiro deles demonstra como criar uma matriz de caracteres. Um segundo demonstra como usar a matriz.  
  
 Esses exemplos de código geram a marcação a seguir:  
  
 `<label>`  
  
 `hello`  
  
 `</label>`  
  
 O exemplo de código a seguir mostra como criar uma matriz de caracteres soletrar `hello world`. Incluída na matriz é o <xref:System.Web.UI.HtmlTextWriter.SpaceChar> campo, que cria um espaço entre as duas palavras.  
  
 [!code-csharp[MarkupTextWriter_Methods2#13](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#13)]
 [!code-vb[MarkupTextWriter_Methods2#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#13)]  
  
 A seguinte parte do exemplo de código usa o `index` e `count` parâmetros do <xref:System.Web.UI.HtmlTextWriter.Write%2A> método para renderizar os primeiros cinco caracteres da matriz criada no exemplo anterior.  
  
 [!code-csharp[MarkupTextWriter_Methods2#11](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#11)]
 [!code-vb[MarkupTextWriter_Methods2#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (format As String, arg0 As Object, arg1 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberSignature Language="F#" Value="override this.Write : string * obj * obj -&gt; unit" Usage="htmlTextWriter.Write (format, arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Uma cadeia de caracteres que contém zero ou mais itens de formato.</param>
        <param name="arg0">Um objeto a ser formatado.</param>
        <param name="arg1">Um objeto a ser formatado.</param>
        <summary>Grava uma cadeia de caracteres formatada que contém a representação de texto de dois objetos no fluxo de saída, juntamente com qualquer espaçamento de guia pendente. Esse método usa a mesma semântica do método <see cref="M:System.String.Format(System.String,System.Object,System.Object)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.HtmlTextWriter.Write%2A> método gera qualquer guias que estão pendentes e, em seguida, chama o <xref:System.IO.TextWriter.Write%2A> método de base.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como usar o <xref:System.Web.UI.HtmlTextWriter.Write%2A> método para processar uma cadeia de caracteres formatada e os valores da <xref:System.Globalization.CultureInfo.CurrentCulture%2A> e <xref:System.DateTime.Today%2A> propriedades.  
  
 [!code-csharp[MarkupTextWriter_Methods1#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#6)]
 [!code-vb[MarkupTextWriter_Methods1#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.String.Format(System.String,System.Object,System.Object)" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Grava um atributo de marcação e seu valor no fluxo de saída.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteAttribute">
      <MemberSignature Language="C#" Value="public virtual void WriteAttribute (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteAttribute(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteAttribute (name As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteAttribute(System::String ^ name, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member WriteAttribute : string * string -&gt; unit&#xA;override this.WriteAttribute : string * string -&gt; unit" Usage="htmlTextWriter.WriteAttribute (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">O atributo a ser gravado no fluxo de saída.</param>
        <param name="value">O valor atribuído ao atributo.</param>
        <summary>Grava o atributo de marcação e o valor especificados no fluxo de saída.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> método para gravar atributos de marcação e seus valores sem codificação. O <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> método grava o valor do atributo entre aspas duplas ("). Se `value` está `null`, o <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> método grava apenas o nome do atributo.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra a renderização de um `<img>` elemento no quais ambas as sobrecargas do <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> são chamadas de método. O exemplo de código usa o seguinte processo:  
  
-   Chamadas a <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> método, que renderiza os caracteres de abertura do elemento.  
  
-   Chamadas a <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%29> sobrecarregar, que grava um `alt` atributo e seu valor para o `<img>` elemento.  
  
-   Chamadas a <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> sobrecarga para renderizar um personalizado `myattribute` atributo, com um valor de `No "encoding" required`e, em seguida, define `fEncode` para `false`.  
  
-   Fecha a marca de abertura do elemento e, em seguida, chama o <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> método para fechar o `<img>` elemento.  
  
 Este exemplo de código gera a marcação a seguir:  
  
 `<img alt="AtlValue" myattribute="No &quot;encoding&quot; required">`  
  
 `</img>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#5)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Em classes derivadas, você pode substituir o <see cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String)" /> método para definir regras personalizadas para gravar atributos e seus valores. Por exemplo, você pode escrever código que é permitido o <see cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String)" /> método para gravar um atributo com um valor vazio.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="WriteAttribute">
      <MemberSignature Language="C#" Value="public virtual void WriteAttribute (string name, string value, bool fEncode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteAttribute(string name, string value, bool fEncode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteAttribute (name As String, value As String, fEncode As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteAttribute(System::String ^ name, System::String ^ value, bool fEncode);" />
      <MemberSignature Language="F#" Value="abstract member WriteAttribute : string * string * bool -&gt; unit&#xA;override this.WriteAttribute : string * string * bool -&gt; unit" Usage="htmlTextWriter.WriteAttribute (name, value, fEncode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEncode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">O atributo de marcação a gravar no fluxo de saída.</param>
        <param name="value">O valor atribuído ao atributo.</param>
        <param name="fEncode"><see langword="true" /> para codificar o atributo e seu valor atribuído; caso contrário, <see langword="false" />.</param>
        <summary>Grava o atributo de marcação e o valor especificados no fluxo de saída e, se especificado, grava o valor codificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> método para gravar atributos de marcação e seus valores, com ou sem codificação. O <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> usa o <xref:System.Web.HttpUtility.HtmlAttributeEncode%2A> método para fazer a codificação.  
  
 O <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> método grava o valor do atributo entre aspas duplas ("). Se `value` está `null`, o <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> método grava apenas o nome do atributo.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra a renderização de um `<img>` elemento no quais ambas as sobrecargas do <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> são chamadas de método. O exemplo de código usa o seguinte processo:  
  
-   Chamadas a <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> método, que renderiza os caracteres de abertura do elemento.  
  
-   Chamadas a <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%29> sobrecarregar, que grava um `alt` atributo e seu valor para o `<img>` elemento.  
  
-   Chamadas a <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> sobrecarga para renderizar um personalizado `myattribute` atributo, com um valor de `No "encoding" required`e, em seguida, define `fEncode` para `false`.  
  
-   Fecha a marca de abertura do elemento e, em seguida, chama o <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> método para fechar o `<img>` elemento.  
  
 Este exemplo de código gera a marcação a seguir:  
  
 `<img alt="AtlValue" myattribute="No &quot;encoding&quot; required">`  
  
 `</img>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#5)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Em classes derivadas, você pode substituir o <see cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String,System.Boolean)" /> método para definir regras personalizadas para gravar atributos e seus valores. Por exemplo, você pode escrever código que é permitido o <see cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String,System.Boolean)" /> método para gravar um atributo com um valor vazio.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="WriteBeginTag">
      <MemberSignature Language="C#" Value="public virtual void WriteBeginTag (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteBeginTag(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteBeginTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteBeginTag (tagName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteBeginTag(System::String ^ tagName);" />
      <MemberSignature Language="F#" Value="abstract member WriteBeginTag : string -&gt; unit&#xA;override this.WriteBeginTag : string -&gt; unit" Usage="htmlTextWriter.WriteBeginTag tagName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">O elemento de marcação do qual gravar a marca de abertura.</param>
        <summary>Grava qualquer espaçamento de tabulação e a marca de abertura do elemento de marcação especificado no fluxo de saída.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> método não gravará o colchete angular de fechamento (>) da marca de abertura do elemento de marcação. Isso permite que a gravação de atributos de marcação à marca de abertura do elemento. Use o <xref:System.Web.UI.HtmlTextWriter.TagRightChar> constante para fechar a marca de abertura, ao chamar o <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> método. Use o <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> método com o <xref:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd> constante quando você grava os elementos de marcação autofechamento.  
  
 O <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> método é usado por controles de servidor personalizado que não permite o mapeamento de atributo ou marca e renderizar elementos de marcação da mesma forma para cada solicitação.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra a renderização de um `<img>` elemento no quais ambas as sobrecargas do <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> são chamadas de método. O exemplo de código usa o seguinte processo:  
  
-   Chamadas a <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> método, que renderiza os caracteres de abertura do elemento.  
  
-   Chamadas a <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%29> sobrecarregar, que grava um `alt` atributo e seu valor para o `<img>` elemento.  
  
-   Chamadas a <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> sobrecarga para renderizar um personalizado `myattribute` atributo, com um valor de `No "encoding" required`e, em seguida, define `fEncode` para `false`.  
  
-   Fecha a marca de abertura do elemento e, em seguida, chama o <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> método para fechar o `<img>` elemento.  
  
 Este exemplo de código gera a marcação a seguir:  
  
 `<img alt="AtlValue" myattribute="No &quot;encoding&quot; required">`  
  
 `</img>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#5)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.WriteAttribute" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.TagRightChar" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteBreak">
      <MemberSignature Language="C#" Value="public virtual void WriteBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteBreak() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteBreak" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteBreak ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteBreak();" />
      <MemberSignature Language="F#" Value="abstract member WriteBreak : unit -&gt; unit&#xA;override this.WriteBreak : unit -&gt; unit" Usage="htmlTextWriter.WriteBreak " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Grava um elemento de marcação <see langword="&lt;br /&gt;" /> no fluxo de saída.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Web.UI.HtmlTextWriter.WriteBreak%2A> método para renderizar a linha de quebra na marcação de controle ou o adaptador personalizada. O <xref:System.Web.UI.HtmlTextWriter.WriteBreak%2A> método grava um espaço entre o `br` e `/` para maior compatibilidade HTML.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como chamar o <xref:System.Web.UI.HtmlTextWriter.WriteBreak%2A> método para gravar uma `<br />` elemento para o navegador solicitante após o <xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A> método grava codificada `&lt;custID&gt; &amp; &lt;invoice#&gt;` marcação.  
  
 [!code-csharp[System.Web.UI.MarkupTextWriter_Samples1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/CS/stringencoder.cs#2)]
 [!code-vb[System.Web.UI.MarkupTextWriter_Samples1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/VB/stringencoder.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEncodedText(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteEncodedText">
      <MemberSignature Language="C#" Value="public virtual void WriteEncodedText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEncodedText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteEncodedText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteEncodedText (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteEncodedText(System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member WriteEncodedText : string -&gt; unit&#xA;override this.WriteEncodedText : string -&gt; unit" Usage="htmlTextWriter.WriteEncodedText text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="text">A cadeia de caracteres de texto a ser codificada e gravada no fluxo de saída.</param>
        <summary>Codifica o texto especificado para o dispositivo solicitante e, em seguida, grava-o no fluxo de saída.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A> método quando uma cadeia de caracteres contém colchetes angulares (\< ou >) ou um e comercial (&).  
  
 O <xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A> usa o <xref:System.Web.HttpUtility.HtmlEncode%2A> método para executar a codificação e também converte o caractere Unicode `00A0` para `&nbsp;`.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como usar o <xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A> método para gravar a marcação codificada `&lt;custID&gt; &amp; &lt;invoice#&gt;` no fluxo de saída. O <xref:System.Web.UI.HtmlTextWriter.WriteBreak%2A> gravações do método `<br />`.  
  
 [!code-csharp[System.Web.UI.MarkupTextWriter_Samples1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/CS/stringencoder.cs#2)]
 [!code-vb[System.Web.UI.MarkupTextWriter_Samples1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/VB/stringencoder.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="text" /> é <see langword="null" />.</exception>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.HtmlEncode(System.String,System.IO.TextWriter)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteBreak" />
      </Docs>
    </Member>
    <Member MemberName="WriteEncodedUrl">
      <MemberSignature Language="C#" Value="public virtual void WriteEncodedUrl (string url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEncodedUrl(string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteEncodedUrl(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteEncodedUrl (url As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteEncodedUrl(System::String ^ url);" />
      <MemberSignature Language="F#" Value="abstract member WriteEncodedUrl : string -&gt; unit&#xA;override this.WriteEncodedUrl : string -&gt; unit" Usage="htmlTextWriter.WriteEncodedUrl url" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="url">A cadeia de caracteres de URL a codificar e a gravar no fluxo de saída.</param>
        <summary>Codifica a URL especificada e grava-a no fluxo de saída. A URL pode incluir parâmetros.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrl%2A> método codifica a cadeia de caracteres no `url` parâmetro de acordo com a especificação de codificação de URL. Os parâmetros que seguem o delimitador de ponto de interrogação (?) não são codificados.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como usar o <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrl%2A> método, que gera a saída a seguir:  
  
 `http://localhost/Sample%20Folder/Sample%20%2b%20File.txt`  
  
 [!code-csharp[System.Web.UI.MarkupTextWriter_Samples1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/CS/stringencoder.cs#3)]
 [!code-vb[System.Web.UI.MarkupTextWriter_Samples1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/VB/stringencoder.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="WriteEncodedUrlParameter">
      <MemberSignature Language="C#" Value="public virtual void WriteEncodedUrlParameter (string urlText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEncodedUrlParameter(string urlText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteEncodedUrlParameter(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteEncodedUrlParameter (urlText As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteEncodedUrlParameter(System::String ^ urlText);" />
      <MemberSignature Language="F#" Value="abstract member WriteEncodedUrlParameter : string -&gt; unit&#xA;override this.WriteEncodedUrlParameter : string -&gt; unit" Usage="htmlTextWriter.WriteEncodedUrlParameter urlText" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="urlText" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="urlText">A cadeia de caracteres de parâmetro de URL a codificar e a gravar no fluxo de saída.</param>
        <summary>Codifica o parâmetro de URL especificado para o dispositivo solicitante e, em seguida, grava-o no fluxo de saída.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Espaços na parte do parâmetro de URL são codificados como sinais de adição (+) e sinais de igual (=) são codificados como `%3d`.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como usar o <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrlParameter%2A> método, que gera a saída a seguir:  
  
 `ID%3dCity+State`  
  
 [!code-csharp[System.Web.UI.MarkupTextWriter_Samples1#4](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/CS/stringencoder.cs#4)]
 [!code-vb[System.Web.UI.MarkupTextWriter_Samples1#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/VB/stringencoder.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteUrlEncodedString(System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="WriteEndTag">
      <MemberSignature Language="C#" Value="public virtual void WriteEndTag (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEndTag(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteEndTag (tagName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteEndTag(System::String ^ tagName);" />
      <MemberSignature Language="F#" Value="abstract member WriteEndTag : string -&gt; unit&#xA;override this.WriteEndTag : string -&gt; unit" Usage="htmlTextWriter.WriteEndTag tagName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">O elemento para o qual gravar a marca de fechamento.</param>
        <summary>Grava qualquer espaçamento de tabulação e a marca de fechamento do elemento de marcação especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ao contrário do <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> método, o <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> método não tem lógica para fazer com que a marca de fim de elemento corresponder a marca de abertura correspondente.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra a renderização de um `<img>` elemento. O exemplo de código usa o seguinte processo:  
  
-   Chamadas a <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> método para renderizar os caracteres de abertura do elemento.  
  
-   Chama duas sobrecargas do <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> método para gravar atributos para o `<img>` elemento.  
  
-   Chamadas a <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> método para fechar o `<img>` elemento.  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#5)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteBeginTag(System.String)" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.WriteAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteFullBeginTag">
      <MemberSignature Language="C#" Value="public virtual void WriteFullBeginTag (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteFullBeginTag(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteFullBeginTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteFullBeginTag (tagName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteFullBeginTag(System::String ^ tagName);" />
      <MemberSignature Language="F#" Value="abstract member WriteFullBeginTag : string -&gt; unit&#xA;override this.WriteFullBeginTag : string -&gt; unit" Usage="htmlTextWriter.WriteFullBeginTag tagName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">O elemento a gravar no fluxo de saída.</param>
        <summary>Grava qualquer espaçamento de tabulação e a marca de abertura do elemento de marcação especificado no fluxo de saída.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.HtmlTextWriter.WriteFullBeginTag%2A> método gravará automaticamente o colchete angular de fechamento (>) da marca de abertura do elemento, ao contrário de <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> método, que não gravará o colchete angular de fechamento. Use <xref:System.Web.UI.HtmlTextWriter.WriteFullBeginTag%2A> para elementos de marcação que não têm atributos.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteBeginTag(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteLine">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Grava dados em um fluxo de saída <see cref="T:System.Web.UI.HtmlTextWriter" />, conforme especificado pelos parâmetros sobrecarregados, seguidos por uma cadeia de caracteres de terminador de linha. Todas as versões desse método gravam qualquer espaçamento de guia pendente no fluxo de saída.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A cadeia de caracteres de terminador de linha padrão é um retorno de carro seguido por uma linha de alimentação ("\r\n"). O <xref:System.IO.TextWriter.WriteLine%2A> método base é usado para gravar o `value` parâmetro.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine();" />
      <MemberSignature Language="F#" Value="override this.WriteLine : unit -&gt; unit" Usage="htmlTextWriter.WriteLine " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Grava uma cadeia de caracteres de terminador de linha no fluxo de saída.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A cadeia de caracteres de terminador de linha padrão é um retorno de carro seguido por uma linha de alimentação ("\r\n"). Para obter mais informações, consulte <xref:System.IO.TextWriter.WriteLine%2A>.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como usar o <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> método para inserir uma linha após um `<img>` elemento é renderizado.  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#3)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(bool value);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : bool -&gt; unit" Usage="htmlTextWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">O booliano para gravar no fluxo de saída.</param>
        <summary>Grava qualquer espaçamento de guia pendente e a representação de texto de um valor booliano, seguidos por uma cadeia de caracteres de terminador de linha, no fluxo de saída.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A cadeia de caracteres de terminador de linha padrão é um retorno de carro seguido por uma linha de alimentação ("\r\n"). O <xref:System.IO.TextWriter.WriteLine%2A> método base é usado para gravar o `value` parâmetro.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(char value);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : char -&gt; unit" Usage="htmlTextWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">O caractere a gravar no fluxo de saída.</param>
        <summary>Grava qualquer espaçamento de guia pendente e um caractere Unicode, seguidos por uma cadeia de caracteres de terminador de linha, no fluxo de saída.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A cadeia de caracteres de terminador de linha padrão é um retorno de carro seguido por uma linha de alimentação ("\r\n"). O <xref:System.IO.TextWriter.WriteLine%2A> método base é usado para gravar o `value` parâmetro.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(char[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (buffer As Char())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(cli::array &lt;char&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : char[] -&gt; unit" Usage="htmlTextWriter.WriteLine buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="buffer">A matriz de caracteres a gravar no fluxo de saída.</param>
        <summary>Grava qualquer espaçamento de guia pendente e uma matriz de caracteres Unicode, seguidos por uma cadeia de caracteres de terminador de linha, no fluxo de saída.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A cadeia de caracteres de terminador de linha padrão é um retorno de carro seguido por uma linha de alimentação ("\r\n"). O <xref:System.IO.TextWriter.WriteLine%2A> método base é usado para gravar o `value` parâmetro.  
  
   
  
## Examples  
 Esta seção fornece dois exemplos de código. O primeiro deles demonstra como criar uma matriz. Um segundo demonstra como usar essa matriz.  
  
 Esses exemplos de código geram a marcação a seguir:  
  
 `<label>`  
  
 `hello world`  
  
 `</label>`  
  
 O exemplo de código a seguir mostra como criar uma matriz de caracteres soletrar `hello world`. Incluída na matriz é o <xref:System.Web.UI.HtmlTextWriter.SpaceChar> campo, que cria um espaço entre as duas palavras.  
  
 [!code-csharp[MarkupTextWriter_Methods2#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#6)]
 [!code-vb[MarkupTextWriter_Methods2#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#6)]  
  
 O código a seguir exemplo processa os `hello world` matriz de caracteres que foi criado no exemplo anterior usando o <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> método.  
  
 [!code-csharp[MarkupTextWriter_Methods2#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#5)]
 [!code-vb[MarkupTextWriter_Methods2#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(double value);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : double -&gt; unit" Usage="htmlTextWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">O número de ponto flutuante de precisão dupla para gravar no fluxo de saída.</param>
        <summary>Grava qualquer espaçamento de guia pendente e a representação de texto de um número de ponto flutuante de precisão dupla, seguidos por uma cadeia de caracteres de terminador de linha, no fluxo de saída.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A cadeia de caracteres de terminador de linha padrão é um retorno de carro seguido por uma linha de alimentação ("\r\n"). O <xref:System.IO.TextWriter.WriteLine%2A> método base é usado para gravar o `value` parâmetro.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como usar o <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> método para renderizar o valor da <xref:System.Double.MaxValue?displayProperty=nameWithType> campo.  
  
 Este exemplo de código gera a marcação a seguir:  
  
 `<label>`  
  
 `1.79769313486232E+308`  
  
 `</label>`  
  
 [!code-csharp[MarkupTextWriter_Methods1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#3)]
 [!code-vb[MarkupTextWriter_Methods1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(int value);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : int -&gt; unit" Usage="htmlTextWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">O inteiro com sinal de 32 bytes a gravar no fluxo de saída.</param>
        <summary>Grava qualquer espaçamento de guia pendente e a representação de texto de um inteiro com sinal de 32 bytes, seguidos por uma cadeia de caracteres de terminador de linha, no fluxo de saída.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A cadeia de caracteres de terminador de linha padrão é um retorno de carro seguido por uma linha de alimentação ("\r\n"). O <xref:System.IO.TextWriter.WriteLine%2A> método base é usado para gravar o `value` parâmetro.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(long value);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : int64 -&gt; unit" Usage="htmlTextWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">O inteiro com sinal de 64 bytes a gravar no fluxo de saída.</param>
        <summary>Grava qualquer espaçamento de guia pendente e a representação de texto de um inteiro com sinal de 64 bytes, seguidos por uma cadeia de caracteres de terminador de linha, no fluxo de saída.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A cadeia de caracteres de terminador de linha padrão é um retorno de carro seguido por uma linha de alimentação ("\r\n"). O <xref:System.IO.TextWriter.WriteLine%2A> método base é usado para gravar o `value` parâmetro.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : obj -&gt; unit" Usage="htmlTextWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">O objeto a ser gravado no fluxo de saída.</param>
        <summary>Grava qualquer espaçamento de guia pendente e a representação de texto de um objeto, seguidos por uma cadeia de caracteres de terminador de linha, no fluxo de saída.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A cadeia de caracteres de terminador de linha padrão é um retorno de carro seguido por uma linha de alimentação ("\r\n"). O <xref:System.IO.TextWriter.WriteLine%2A> método base é usado para gravar o `value` parâmetro.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como usar o <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> método para renderizar o valor da <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> propriedade a um controle.  
  
 [!code-csharp[MarkupTextWriter_Methods1#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#4)]
 [!code-vb[MarkupTextWriter_Methods1#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(float value);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : single -&gt; unit" Usage="htmlTextWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">O número de ponto flutuante de precisão simples para gravar no fluxo de saída.</param>
        <summary>Grava qualquer espaçamento de guia pendente e a representação de texto de um número de ponto flutuante de precisão simples, seguidos por uma cadeia de caracteres de terminador de linha, no fluxo de saída.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A cadeia de caracteres de terminador de linha padrão é um retorno de carro seguido por uma linha de alimentação ("\r\n"). O <xref:System.IO.TextWriter.WriteLine%2A> método base é usado para gravar o `value` parâmetro.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como usar o <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> método para renderizar o valor da <xref:System.Single.Epsilon?displayProperty=nameWithType> campo, que é o menor valor possível do <xref:System.Single> estrutura.  
  
 Este exemplo de código gera a marcação a seguir:  
  
 `<b>`  
  
 `1.401298E-45`  
  
 `</b>`  
  
 [!code-csharp[MarkupTextWriter_Methods1#9](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#9)]
 [!code-vb[MarkupTextWriter_Methods1#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (s As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ s);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : string -&gt; unit" Usage="htmlTextWriter.WriteLine s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">A cadeia de caracteres a ser gravada no fluxo de saída.</param>
        <summary>Grava qualquer espaçamento de guia pendente e uma cadeia de caracteres de texto, seguidos por uma cadeia de caracteres de terminador de linha, no fluxo de saída.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A cadeia de caracteres de terminador de linha padrão é um retorno de carro seguido por uma linha de alimentação ("\r\n"). O <xref:System.IO.TextWriter.WriteLine%2A> método base é usado para gravar o `value` parâmetro.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : uint32 -&gt; unit" Usage="htmlTextWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">O inteiro sem sinal de 4 bytes a gravar no fluxo de saída.</param>
        <summary>Grava qualquer espaçamento de guia pendente e a representação de texto de um inteiro sem sinal de 4 bytes, seguidos por uma cadeia de caracteres de terminador de linha, no fluxo de saída.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A cadeia de caracteres de terminador de linha padrão é um retorno de carro seguido por uma linha de alimentação ("\r\n"). O <xref:System.IO.TextWriter.WriteLine%2A> método base é usado para gravar o `value` parâmetro.  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Int64)" />
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (format As String, arg0 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ format, System::Object ^ arg0);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : string * obj -&gt; unit" Usage="htmlTextWriter.WriteLine (format, arg0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Uma cadeia de caracteres que contém zero ou mais itens de formato.</param>
        <param name="arg0">Um objeto a ser formatado.</param>
        <summary>Grava qualquer espaçamento de guia pendente e uma cadeia de caracteres formatada contendo a representação de texto de um objeto, seguidos por uma cadeia de caracteres de terminador de linha, no fluxo de saída.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A cadeia de caracteres de terminador de linha padrão é um retorno de carro seguido por uma linha de alimentação ("\r\n"). O <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> método usa a mesma semântica que o <xref:System.String.Format%28System.String%2CSystem.Object%29> método. O <xref:System.IO.TextWriter.WriteLine%2A> método base é usado para gravar o `value` parâmetro.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como usar o <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> método para processar uma cadeia de caracteres formatada com o valor da <xref:System.Globalization.CultureInfo.CurrentCulture%2A> propriedade.  
  
 [!code-csharp[MarkupTextWriter_Methods1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#1)]
 [!code-vb[MarkupTextWriter_Methods1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string format, params object[] arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string format, object[] arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (format As String, ParamArray arg As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ arg);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : string * obj[] -&gt; unit" Usage="htmlTextWriter.WriteLine (format, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-1.1">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">Uma cadeia de caracteres que contém zero ou mais itens de formato.</param>
        <param name="arg">Uma matriz de objeto a ser formatada.</param>
        <summary>Grava qualquer espaçamento de guia pendente e uma cadeia de caracteres formatada contendo a representação de texto de uma matriz de objetos, seguidos por uma cadeia de caracteres de terminador de linha, no fluxo de saída.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A cadeia de caracteres de terminador de linha padrão é um retorno de carro seguido por uma linha de alimentação ("\r\n"). O <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> método usa a mesma semântica que o <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29> método. O <xref:System.IO.TextWriter.WriteLine%2A> método base é usado para gravar o `value` método.  
  
   
  
## Examples  
 Esta seção contém dois exemplos de código. O primeiro deles demonstra como renderizar uma cadeia de caracteres e uma matriz ao fluxo de saída. O segundo mostra como declarar a matriz.  
  
 O exemplo de código a seguir demonstra como usar o <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> método para processar uma cadeia de caracteres formatada e o conteúdo de uma matriz de objetos no fluxo de saída.  
  
 [!code-csharp[MarkupTextWriter_Methods2#2](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#2)]
 [!code-vb[MarkupTextWriter_Methods2#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#2)]  
  
 O exemplo de código a seguir mostra como declarar a matriz de objetos que foi processada no exemplo de código anterior.  
  
 [!code-csharp[MarkupTextWriter_Methods2#7](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#7)]
 [!code-vb[MarkupTextWriter_Methods2#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : char[] * int * int -&gt; unit" Usage="htmlTextWriter.WriteLine (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">A matriz de caracteres da qual gravar texto no fluxo de saída.</param>
        <param name="index">A localização na matriz de caracteres em que a gravação começa.</param>
        <param name="count">O número de caracteres na matriz a gravar no fluxo de saída.</param>
        <summary>Grava qualquer espaçamento de guia pendente e uma submatriz de caracteres Unicode, seguidos por uma cadeia de caracteres de terminador de linha, no fluxo de saída.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A cadeia de caracteres de terminador de linha padrão é um retorno de carro seguido por uma linha de alimentação ("\r\n"). O <xref:System.IO.TextWriter.WriteLine%2A> método base é usado para gravar o `value` parâmetro.  
  
   
  
## Examples  
 Esta seção contém dois exemplos de código. O primeiro deles demonstra como criar uma matriz de caracteres. Um segundo demonstra como usar a matriz.  
  
 Esses exemplos de código geram a marcação a seguir:  
  
 `<label>`  
  
 `hello`  
  
 `</label>`  
  
 O exemplo de código a seguir demonstra como criar uma matriz de caracteres soletrar `hello world`. Incluída na matriz é o <xref:System.Web.UI.HtmlTextWriter.SpaceChar> campo, que cria um espaço entre as duas palavras.  
  
 [!code-csharp[MarkupTextWriter_Methods2#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#6)]
 [!code-vb[MarkupTextWriter_Methods2#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#6)]  
  
 O seguinte exemplo de código usa o `index` e `count` parâmetros do <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> método para renderizar os primeiros cinco caracteres da matriz criada no exemplo de código anterior.  
  
 [!code-csharp[MarkupTextWriter_Methods2#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#4)]
 [!code-vb[MarkupTextWriter_Methods2#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (format As String, arg0 As Object, arg1 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : string * obj * obj -&gt; unit" Usage="htmlTextWriter.WriteLine (format, arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Uma cadeia de caracteres que contém zero ou mais itens de formato.</param>
        <param name="arg0">Um objeto a ser formatado.</param>
        <param name="arg1">Um objeto a ser formatado.</param>
        <summary>Grava qualquer espaçamento de guia pendente e uma cadeia de caracteres formatada contendo a representação de texto de dois objetos, seguidos por uma cadeia de caracteres de terminador de linha, no fluxo de saída.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A cadeia de caracteres de terminador de linha padrão é um retorno de carro seguido por uma linha de alimentação ("\r\n"). O <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> método usa a mesma semântica que o <xref:System.String.Format%28System.String%2CSystem.Object%2CSystem.Object%29> método. O <xref:System.IO.TextWriter.WriteLine%2A> método base é usado para gravar o `value` parâmetro.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como usar o <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> método para processar uma cadeia de caracteres formatada e os valores da <xref:System.Globalization.CultureInfo.CurrentCulture%2A> propriedade e o <xref:System.DateTime.Today%2A> propriedade.  
  
 [!code-csharp[MarkupTextWriter_Methods1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#2)]
 [!code-vb[MarkupTextWriter_Methods1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineNoTabs">
      <MemberSignature Language="C#" Value="public void WriteLineNoTabs (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteLineNoTabs(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLineNoTabs(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteLineNoTabs (s As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteLineNoTabs(System::String ^ s);" />
      <MemberSignature Language="F#" Value="member this.WriteLineNoTabs : string -&gt; unit" Usage="htmlTextWriter.WriteLineNoTabs s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">A cadeia de caracteres a ser gravada no fluxo de saída.</param>
        <summary>Grava uma cadeia de caracteres seguida por uma cadeia de caracteres de terminador de linha, no fluxo de saída. Este método ignora qualquer espaçamento de tabulação especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Web.UI.HtmlTextWriter.WriteLineNoTabs%2A> método em vez de <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> método quando você não deseja renderizar qualquer espaçamento de tabulação à frente a cadeia de caracteres renderizado `s`.  
  
 A cadeia de caracteres de terminador de linha padrão é um retorno de carro seguido por uma linha de alimentação ("\r\n"). O <xref:System.IO.TextWriter.WriteLine%2A> método base é usado para gravar o `value` parâmetro.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteStyleAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Grava um atributo de estilo e seu valor no fluxo de saída.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteStyleAttribute">
      <MemberSignature Language="C#" Value="public virtual void WriteStyleAttribute (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStyleAttribute(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteStyleAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteStyleAttribute (name As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteStyleAttribute(System::String ^ name, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member WriteStyleAttribute : string * string -&gt; unit&#xA;override this.WriteStyleAttribute : string * string -&gt; unit" Usage="htmlTextWriter.WriteStyleAttribute (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">O atributo de estilo a gravar no fluxo de saída.</param>
        <param name="value">O valor atribuído ao atributo de estilo.</param>
        <summary>Grava o atributo de estilo especificado no fluxo de saída.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.HtmlTextWriter.WriteStyleAttribute%2A> método grava o atributo de estilo da seguinte forma:  
  
 `name` `=` `value` `;`  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.Write" />
      </Docs>
    </Member>
    <Member MemberName="WriteStyleAttribute">
      <MemberSignature Language="C#" Value="public virtual void WriteStyleAttribute (string name, string value, bool fEncode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStyleAttribute(string name, string value, bool fEncode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteStyleAttribute(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteStyleAttribute (name As String, value As String, fEncode As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteStyleAttribute(System::String ^ name, System::String ^ value, bool fEncode);" />
      <MemberSignature Language="F#" Value="abstract member WriteStyleAttribute : string * string * bool -&gt; unit&#xA;override this.WriteStyleAttribute : string * string * bool -&gt; unit" Usage="htmlTextWriter.WriteStyleAttribute (name, value, fEncode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEncode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">O atributo de estilo a gravar no fluxo de saída.</param>
        <param name="value">O valor atribuído ao atributo de estilo.</param>
        <param name="fEncode"><see langword="true" /> para codificar o atributo de estilo e seu valor atribuído; caso contrário, <see langword="false" />.</param>
        <summary>Grava o atributo de estilo e o valor especificados no fluxo de saída e, se especificado, codifica o valor.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.HtmlTextWriter.WriteStyleAttribute%2A> método grava o atributo de estilo da seguinte forma:  
  
 `name` `=` `value` `;`  
  
 O <xref:System.Web.HttpUtility.HtmlAttributeEncode%2A> método é usado para codificar o `value` parâmetro.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.Write" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="WriteUrlEncodedString">
      <MemberSignature Language="C#" Value="protected void WriteUrlEncodedString (string text, bool argument);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void WriteUrlEncodedString(string text, bool argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteUrlEncodedString(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub WriteUrlEncodedString (text As String, argument As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void WriteUrlEncodedString(System::String ^ text, bool argument);" />
      <MemberSignature Language="F#" Value="member this.WriteUrlEncodedString : string * bool -&gt; unit" Usage="htmlTextWriter.WriteUrlEncodedString (text, argument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="argument" Type="System.Boolean" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="text">A cadeia de caracteres de texto a ser codificada e gravada no fluxo de saída.</param>
        <param name="argument"><see langword="true" /> para codificar a cadeia de caracteres como parte da seção de parâmetro da URL; <see langword="false" /> para codificar a cadeia de caracteres como parte da seção do caminho da URL.</param>
        <summary>Grava a cadeia de caracteres especificada, codificando-a de acordo com os requisitos de URL.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.HtmlTextWriter.WriteUrlEncodedString%2A> método codifica caracteres poderia ser considerados como delimitadores de URL (dependente da configuração da `argument`) em cadeias de caracteres do formulário `%xx`, se o código ASCII é menor que 128; caso contrário, `%uxxxx`, onde `x` é um dígito hexadecimal.  
  
 O <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrl%2A> e <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrlParameter%2A> métodos usam o <xref:System.Web.UI.HtmlTextWriter.WriteUrlEncodedString%2A> método como um método de utilitário.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEncodedUrl(System.String)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEncodedUrlParameter(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>