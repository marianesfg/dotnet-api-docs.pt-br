<Type Name="XhtmlTextWriter" FullName="System.Web.UI.XhtmlTextWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7bcb9939e2311a341a254dd5ee361eb8b50dc72c" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51862911" /></Metadata><TypeSignature Language="C#" Value="public class XhtmlTextWriter : System.Web.UI.HtmlTextWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XhtmlTextWriter extends System.Web.UI.HtmlTextWriter" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.XhtmlTextWriter" />
  <TypeSignature Language="VB.NET" Value="Public Class XhtmlTextWriter&#xA;Inherits HtmlTextWriter" />
  <TypeSignature Language="C++ CLI" Value="public ref class XhtmlTextWriter : System::Web::UI::HtmlTextWriter" />
  <TypeSignature Language="F#" Value="type XhtmlTextWriter = class&#xA;    inherit HtmlTextWriter" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.HtmlTextWriter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Grava caracteres específicos de XHTML (Extensible HTML), incluindo todas as variações dos módulos XHTML que derivam do XTHML, o fluxo de saída para um controle de servidor ASP.NET para dispositivos móveis. Substitua a classe <see cref="T:System.Web.UI.XhtmlTextWriter" /> para fornecer renderização de XHTML personalizada para controles de servidor e páginas ASP.NET.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O XHTML é uma linguagem de marcação compatível com XML, com base em HTML 4.1, que permite que você crie sites da Web que são adequadas para vários tipos de dispositivos. Ela mescla a facilidade de uso fornecida pela HTML com as diretrizes de elemento estrito fornecidas pelo XML para produzir uma linguagem de marcação com uma ampla variedade de opções de estilo e formato e com a ambiguidade de marca de marcação reduzido. O <xref:System.Web.UI.XhtmlTextWriter> classe fornece funcionalidades de formatação que controles de servidor ASP.NET usam ao renderizar o conteúdo do XHTML para clientes. Você pode usar o <xref:System.Web.UI.XhtmlTextWriter.SetDocType%2A> método para especificar qual tipo de XHTML o gravador de texto é renderizado. Tipos de documento com suporte são definidos na <xref:System.Web.UI.XhtmlMobileDocType> enumeração.  
  
 O <xref:System.Web.UI.XhtmlTextWriter> classe processa dois conjuntos de atributos para elementos. Um conjunto é uma coleção de atributos comuns, conforme referenciado no <xref:System.Web.UI.XhtmlTextWriter.CommonAttributes%2A> propriedade. O segundo conjunto é uma coleção de atributos específicos do elemento, conforme referenciado no <xref:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes%2A> propriedade. Para obter mais informações sobre os elementos e os estilos que são processados, consulte a especificação de modularização XHTML na [World Wide Web Consortium (W3C) Web site](https://go.microsoft.com/fwlink/?linkid=37125).  
  
 Você pode usar os membros de <xref:System.Web.UI.XhtmlTextWriter> classe e quaisquer classes derivadas para criar gravadores de texto personalizado para usar em XHTML personalizada página adaptadores ou classe. Você também pode criar classes derivadas que substituem o comportamento padrão da <xref:System.Web.UI.XhtmlTextWriter> classe.  
  
 Por padrão, quando você estiver trabalhando com navegadores que oferecem suporte a HTML 4.0, páginas e controles ASP.NET renderizam marcação que é compatível com o padrão XHTML 1.1. Para obter mais informações, consulte [padrões XHTML no Visual Studio e o ASP.NET](https://msdn.microsoft.com/library/1b78d416-66bb-43a5-ac77-c703aab55b97).  
  
 O <xref:System.Web.UI.HtmlTextWriter> gera XHTML, a menos que você configura o ASP.NET especificamente para não processar marcação XHTML. Para obter mais informações, consulte [NIB: como: configurar a renderização de XHTML em Sites da Web do ASP.NET](https://msdn.microsoft.com/library/42483a54-f1ae-44e1-88e6-4370f8690149).  
  
   
  
## Examples  
 O exemplo de código nesta seção contém quatro partes. O primeiro exemplo demonstra como criar uma classe derivada. O segundo exemplo de código demonstra como criar um controle personalizado. O terceiro exemplo de código demonstra como usar o controle personalizado. O quarto exemplo de código fornece o código que é necessário para executar o controle personalizado.  
  
 O exemplo de código a seguir demonstra como criar uma classe personalizada que é derivada de <xref:System.Web.UI.XhtmlTextWriter> classe. Ele tem dois construtores, que é o padrão para todas as classes que herdam direta ou indiretamente a <xref:System.Web.UI.HtmlTextWriter> classe. O primeiro construtor usa um <xref:System.IO.TextWriter> objeto como um parâmetro e chama o segundo construtor, passando dois valores de parâmetro a seguir:  
  
-   A instância <xref:System.IO.TextWriter>.  
  
-   O valor da <xref:System.Web.UI.HtmlTextWriter.DefaultTabString?displayProperty=nameWithType> propriedade, que define o recuo de linha padrão que é usado pelo gravador de texto de XHTML.  
  
 Este exemplo de código também mostra como substituir a <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> e <xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A> métodos para filtrar por texto de tamanho e cor de estilo, respectivamente. Além disso, ele substitui o <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A> e <xref:System.Web.UI.HtmlTextWriter.EndRender%2A> métodos para gravar um texto cadeia de caracteres antes e depois que um controle tenha processado.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#1)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#1)]  
  
 O exemplo de código a seguir demonstra como criar um personalizado <xref:System.Web.UI.WebControls.Label> controle chamado `TestLabel` e um adaptador personalizado chamado `XhtmlTestLabelAdapter` que renderiza o conteúdo do controle como XHTML.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/cs/xhtmltextlabel.cs#1)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/VB/xhtmltestlabel.vb#1)]  
  
 O exemplo de código a seguir demonstra como usar o controle personalizado `TestLabel` em uma página da Web do ASP.NET.  
  
 [!code-aspx-csharp[System.Web.UI.XhtmlTextWriter_Sample1#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/cs/xhtmltextlabel.aspx#4)]
 [!code-aspx-vb[System.Web.UI.XhtmlTextWriter_Sample1#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/VB/xhtmltestlabel.aspx#4)]  
  
 Para usar o controle personalizado no exemplo de código anterior, adicione o seguinte `<controlAdapters>` elemento para um dos dois arquivos. Você pode adicioná-lo para o arquivo de todo o computador apropriado no subdiretório de um navegador específico, como uma subpasta da pasta de configuração do .NET Framework. Como alternativa, você pode adicioná-lo em um arquivo de navegador personalizado na pasta App_Browsers na raiz do aplicativo Web.  
  
```  
<controlAdapters>  
   <adapter controlType="AspNet.Samples.TestLabel"  
   adapterType="AspNet.Samples.XhtmlTestLabelAdapter" />  
</controlAdapters>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.ChtmlTextWriter" />
    <related type="Article" href="https://msdn.microsoft.com/library/1b78d416-66bb-43a5-ac77-c703aab55b97">ASP.NET e compatibilidade com XHTML</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Web.UI.XhtmlTextWriter" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XhtmlTextWriter (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.#ctor(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XhtmlTextWriter(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.XhtmlTextWriter : System.IO.TextWriter -&gt; System.Web.UI.XhtmlTextWriter" Usage="new System.Web.UI.XhtmlTextWriter writer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Uma instância <see cref="T:System.IO.TextWriter" /> que renderiza o conteúdo XHTML.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Web.UI.XhtmlTextWriter" /> que usa o recuo de linha especificado no campo <see cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" />. Use o construtor <see cref="M:System.Web.UI.XhtmlTextWriter.#ctor(System.IO.TextWriter)" /> se você não deseja alterar o recuo de linha padrão.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.XhtmlTextWriter.%23ctor%2A> construtor que usa um <xref:System.IO.TextWriter> como o segundo construtor, passando dois valores de parâmetro de chamadas de um parâmetro de objeto:  
  
-   A instância <xref:System.IO.TextWriter>.  
  
-   O valor de cadeia de caracteres que é especificado no <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> campo, que define o espaçamento de guia é usado pelo gravador de texto de XHTML.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como criar os dois construtores, que é o padrão para todas as classes que derivam direta ou indiretamente o <xref:System.Web.UI.HtmlTextWriter> classe, para uma classe personalizada derivada do <xref:System.Web.UI.XhtmlTextWriter> classe.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#5](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XhtmlTextWriter (System.IO.TextWriter writer, string tabString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer, string tabString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.#ctor(System.IO.TextWriter,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter, tabString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XhtmlTextWriter(System::IO::TextWriter ^ writer, System::String ^ tabString);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.XhtmlTextWriter : System.IO.TextWriter * string -&gt; System.Web.UI.XhtmlTextWriter" Usage="new System.Web.UI.XhtmlTextWriter (writer, tabString)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="tabString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer">Uma instância <see cref="T:System.IO.TextWriter" /> que renderiza o conteúdo XHTML.</param>
        <param name="tabString">A cadeia de caracteres usada para renderizar um recuo de linha.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Web.UI.XhtmlTextWriter" /> com o recuo de linha especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo de código a seguir demonstra como criar os dois construtores, que é o padrão para todas as classes que derivam direta ou indiretamente o <xref:System.Web.UI.HtmlTextWriter> classe, para uma classe personalizada derivada do <xref:System.Web.UI.XhtmlTextWriter> classe.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#5](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRecognizedAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddRecognizedAttribute (string elementName, string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddRecognizedAttribute(string elementName, string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddRecognizedAttribute (elementName As String, attributeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddRecognizedAttribute(System::String ^ elementName, System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="abstract member AddRecognizedAttribute : string * string -&gt; unit&#xA;override this.AddRecognizedAttribute : string * string -&gt; unit" Usage="xhtmlTextWriter.AddRecognizedAttribute (elementName, attributeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">O elemento XHTML ao qual o atributo será adicionado.</param>
        <param name="attributeName">O atributo a ser adicionado.</param>
        <summary>Adiciona um atributo a um elemento XHTML. A coleção de atributos específicos do elemento para o objeto <see cref="T:System.Web.UI.XhtmlTextWriter" /> é referenciado pela propriedade <see cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute%2A> método para adicionar um atributo a um elemento XHTML. O atributo adicionado pode ser reconhecido e processado pelo <xref:System.Web.UI.XhtmlTextWriter> objeto. Para impedir que o gravador de renderização de um atributo comum de um elemento XHTML, use o <xref:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute%2A> método.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CommonAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable CommonAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable CommonAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property CommonAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ CommonAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CommonAttributes : System.Collections.Hashtable" Usage="System.Web.UI.XhtmlTextWriter.CommonAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um objeto <see cref="T:System.Collections.Hashtable" /> que contém atributos comuns das marcas de marcação para o objeto <see cref="T:System.Web.UI.XhtmlTextWriter" />.</summary>
        <value>Um <see cref="T:System.Collections.Hashtable" /> objeto que contém atributos comuns.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.XhtmlTextWriter.CommonAttributes%2A> coleção contém atributos que são permitidos em elementos XHTML e que não são suprimidas o <xref:System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes%2A> propriedade. Para obter mais informações sobre atributos comuns, consulte a [World Wide Web Consortium (W3C) Web site](https://go.microsoft.com/fwlink/?linkid=37125).  
  
 Quando uma nova instância do <xref:System.Web.UI.XhtmlTextWriter> classe é criada, os atributos comuns que são inicializados são:  
  
-   `class`  
  
-   `id`  
  
-   `title`  
  
-   `xml:lang`  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes" />
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
      </Docs>
    </Member>
    <Member MemberName="ElementSpecificAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable ElementSpecificAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable ElementSpecificAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ElementSpecificAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ ElementSpecificAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ElementSpecificAttributes : System.Collections.Hashtable" Usage="System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um objeto <see cref="T:System.Collections.Hashtable" /> que contém atributos específicos do elemento.</summary>
        <value>Um <see cref="T:System.Collections.Hashtable" /> objeto que contém atributos específicos do elemento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute%2A> atributos de método para adicionar reconhecido a um elemento XHTML. Para remover atributos comuns em um elemento XHTML, use o <xref:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute%2A> método.  
  
 Quando uma nova instância dos <xref:System.Web.UI.XhtmlTextWriter> classe é criada, o <xref:System.Collections.Hashtable> objeto de atributos específicos do elemento é preenchido com os atributos mostrados na tabela a seguir.  
  
|Elemento|Atributos|  
|-------------|----------------|  
|`<a>`|`accesskey`, `href`, `charset`, `hreflang`, `rel`, `type`, `rev`, `title`, `tabindex`|  
|`<base>`|`href`|  
|`<blockquote>`|`cite`|  
|`<br>`|`id`, `class`, `title`|  
|`<form>`|`action`, `method`, `enctype`|  
|`<head>`|`xml:lang`|  
|`<html>`|`version`, `xml:lang`, `xmlns`|  
|`<img>`|`src`, `alt`, `width`, `longdesc`, `height`|  
|`<input>`|`size`, `accesskey`, `title`, `name`, `type`, `disabled`, `value`, `src`, `checked`, `maxlength`, `tabindex`|  
|`<label>`|`accesskey`, `for`|  
|`<li>`|`value`|  
|`<link>`|`hreflang`, `rev`, `type`, `charset`, `rel`, `href`, `media`|  
|`<meta>`|`content`, `name`, `xml:lang`, `http-equiv`, `scheme`|  
|`<object>`|`codebase`, `classid`, `data`, `standby`, `name`, `type`, `height`, `archive`, `declare`, `width`, `tabindex`, `codetype`|  
|`<ol>`|`start`|  
|`<optgroup>`|`label`, `disabled`|  
|`<option>`|`selected`, `value`|  
|`<param>`|`id`, `name`, `valuetype`, `value`, `type`|  
|`<pre>`|`xml:space`|  
|`<q>`|`cite`|  
|`<select>`|`name`, `tabindex`, `disabled`, `multiple`, `size`|  
|`<style>`|`xml:lang`, `xml:space`, `type`, `title`, `media`|  
|`<table>`|`width`, `summary`|  
|`<textarea>`|`name`, `cols`, `accesskey`, `tabindex`, `rows`|  
|`<td>`|`headers`, `align`, `rowspan`, `colspan`, `axis`, `scope`, `abbr`, `valign`|  
|`<th>`|`headers`, `align`, `rowspan`, `colspan`, `axis`, `scope`, `abbr`, `valign`|  
|`<title>`|`xml:lang`|  
|`<tr>`|`align`, `valign`|  
  
 Para obter mais informações sobre os elementos e os estilos que são processados, consulte a especificação de modularização XHTML na [World Wide Web Consortium (W3C) Web site](https://go.microsoft.com/fwlink/?linkid=37125).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" />
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes" />
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IsValidFormAttribute">
      <MemberSignature Language="C#" Value="public override bool IsValidFormAttribute (string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsValidFormAttribute(string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.IsValidFormAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsValidFormAttribute (attributeName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsValidFormAttribute(System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="override this.IsValidFormAttribute : string -&gt; bool" Usage="xhtmlTextWriter.IsValidFormAttribute attributeName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attributeName">O nome de atributo a ser verificado.</param>
        <summary>Verifica se um atributo XHTML para garantir que ele pode ser renderizado na marca de abertura de um elemento <see langword="&lt;form&gt;" />.</summary>
        <returns><see langword="true" /> se o atributo puder ser aplicado a um elemento <see langword="&lt;form&gt;" />; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método é útil para renderizar condicionalmente um atributo, dependendo se ele tem suporte pelo tipo de documento XHTML no dispositivo solicitante.  
  
   
  
## Examples  
 O exemplo de código a seguir faz parte de um exemplo maior que cria um personalizado <xref:System.Web.UI.WebControls.Label> controle e um adaptador que renderiza o conteúdo do controle como XHTML.  
  
 Este exemplo de código demonstra como criar uma variável booliana chamada `attTest` e defina-o como o valor de retorno que é o resultado de chamar o <xref:System.Web.UI.XhtmlTextWriter.IsValidFormAttribute%2A> método com o valor do parâmetro "style". Se o <xref:System.Web.UI.XhtmlTextWriter.IsValidFormAttribute%2A> retorn `true`, os estilos que estão associados com o controle são renderizados usando o <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A?displayProperty=nameWithType> e <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A?displayProperty=nameWithType> métodos. Se o `attTest` valor é `false`, os estilos não são renderizados. Em vez disso, a página exibe o texto para o controle, um `<br/>` elemento que é processado pelo <xref:System.Web.UI.XhtmlTextWriter.WriteBreak%2A> método e uma cadeia de caracteres de texto informando ao usuário que o conteúdo XHTML do controle tenha processado condicionalmente.  
  
 Este exemplo de código é parte de um exemplo maior fornecido para o <xref:System.Web.UI.XhtmlTextWriter> classe.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/cs/xhtmltextlabel.cs#3)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/VB/xhtmltestlabel.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAttributeRender">
      <MemberSignature Language="C#" Value="protected override bool OnAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnAttributeRender (name As String, value As String, key As HtmlTextWriterAttribute) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberSignature Language="F#" Value="override this.OnAttributeRender : string * string * System.Web.UI.HtmlTextWriterAttribute -&gt; bool" Usage="xhtmlTextWriter.OnAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">O atributo XHTML a ser renderizado.</param>
        <param name="value">O valor atribuído ao atributo XHTML.</param>
        <param name="key">O valor da enumeração <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> associado ao atributo XHTML.</param>
        <summary>Determina se o atributo XHTML especificado e seu valor podem ser renderizados para o elemento atual da marcação.</summary>
        <returns><see langword="true" /> se o atributo é renderizado para a página; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo de código a seguir demonstra como substituir a <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> método para verificar se um `size` atributo é renderizado para qualquer um dos elementos que são processados por este gravador de texto. Se um `size` atributo é renderizado, o código verifica se o seu valor é 8 pontos. Nesse caso, o <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> método retorna `true`, permitindo que o atributo e seu valor para renderizar. Se o valor for diferente de 8 pontos, o <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> método retorna `false`, e o atributo e seu valor não são renderizados. Se o parâmetro de chave do <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> método não coincide com o <xref:System.Web.UI.HtmlTextWriterAttribute.Size> do atributo, a funcionalidade básica do <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> método é chamado, conforme definido no <xref:System.Web.UI.XhtmlTextWriter> classe.  
  
 Este exemplo de código é parte de um exemplo maior fornecido para o <xref:System.Web.UI.XhtmlTextWriter> classe.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#2)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleAttributeRender">
      <MemberSignature Language="C#" Value="protected override bool OnStyleAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnStyleAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnStyleAttributeRender (name As String, value As String, key As HtmlTextWriterStyle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnStyleAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberSignature Language="F#" Value="override this.OnStyleAttributeRender : string * string * System.Web.UI.HtmlTextWriterStyle -&gt; bool" Usage="xhtmlTextWriter.OnStyleAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">O atributo de estilo XHTML a ser renderizado.</param>
        <param name="value">O valor atribuído ao atributo de estilo XHTML.</param>
        <param name="key">O valor da enumeração <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> associado ao atributo de estilo XHTML.</param>
        <summary>Determina se o atributo de estilo XHTML especificado e seu valor podem ser renderizados para o elemento da marcação atual.</summary>
        <returns><see langword="true" /> se o atributo de estilo for renderizado; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo de código a seguir demonstra como substituir a <xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A> método para verificar se um <xref:System.Web.UI.HtmlTextWriterStyle.Color> atributo está sendo processado por qualquer um dos elementos que são processados por este gravador de texto. Se um <xref:System.Web.UI.HtmlTextWriterStyle.Color> atributo é renderizado, o código verifica se seu valor está em roxo. Se o valor está em roxo, o <xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A> retorno do método `false` e o atributo e seu valor não são renderizados. Se o <xref:System.Web.UI.HtmlTextWriterStyle.Color> atributo é definido como qualquer outro valor, o <xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A> retorno do método `true` e o atributo e seu valor são renderizados. Se o parâmetro de chave do <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> método não coincide com o <xref:System.Web.UI.HtmlTextWriterStyle.Color> do atributo, a funcionalidade básica do <xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A> método é chamado, conforme definido no <xref:System.Web.UI.XhtmlTextWriter> classe.  
  
 Este exemplo de código é parte de um exemplo maior fornecido para o <xref:System.Web.UI.XhtmlTextWriter> classe.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#3](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveRecognizedAttribute">
      <MemberSignature Language="C#" Value="public virtual void RemoveRecognizedAttribute (string elementName, string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveRecognizedAttribute(string elementName, string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveRecognizedAttribute (elementName As String, attributeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveRecognizedAttribute(System::String ^ elementName, System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="abstract member RemoveRecognizedAttribute : string * string -&gt; unit&#xA;override this.RemoveRecognizedAttribute : string * string -&gt; unit" Usage="xhtmlTextWriter.RemoveRecognizedAttribute (elementName, attributeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">O elemento XHTML do qual um atributo será removido.</param>
        <param name="attributeName">O atributo a ser removido do elemento XHTML especificado.</param>
        <summary>Remove um atributo da coleção <see cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" /> de um elemento.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SetDocType">
      <MemberSignature Language="C#" Value="public virtual void SetDocType (System.Web.UI.XhtmlMobileDocType docType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDocType(valuetype System.Web.UI.XhtmlMobileDocType docType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.SetDocType(System.Web.UI.XhtmlMobileDocType)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetDocType (docType As XhtmlMobileDocType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetDocType(System::Web::UI::XhtmlMobileDocType docType);" />
      <MemberSignature Language="F#" Value="abstract member SetDocType : System.Web.UI.XhtmlMobileDocType -&gt; unit&#xA;override this.SetDocType : System.Web.UI.XhtmlMobileDocType -&gt; unit" Usage="xhtmlTextWriter.SetDocType docType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="docType" Type="System.Web.UI.XhtmlMobileDocType" />
      </Parameters>
      <Docs>
        <param name="docType">Um dos valores de enumeração <see cref="T:System.Web.UI.XhtmlMobileDocType" />.</param>
        <summary>Especifica o tipo de documento XHTML para o text writer renderizar na página ou no controle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Web.UI.XhtmlTextWriter.SetDocType%2A> método em um adaptador de página personalizada para definir o tipo de XHTML que você deseja processar para o dispositivo solicitante. Tipos de documento com suporte são definidos na <xref:System.Web.UI.XhtmlMobileDocType> enumeração.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.XhtmlMobileDocType" />
      </Docs>
    </Member>
    <Member MemberName="SuppressCommonAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable SuppressCommonAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable SuppressCommonAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property SuppressCommonAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ SuppressCommonAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SuppressCommonAttributes : System.Collections.Hashtable" Usage="System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um objeto <see cref="T:System.Collections.Hashtable" /> de elementos para os quais os atributos <see cref="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" /> são suprimidos.</summary>
        <value>Um <see cref="T:System.Collections.Hashtable" /> de elementos que contém uma coleção de <see cref="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" /> que não são renderizados.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A coleção de atributos suprimidos inclui uma lista de elementos XHTML para o qual <xref:System.Web.UI.XhtmlTextWriter.CommonAttributes%2A> atributos não são renderizados.  
  
 Quando uma nova instância dos <xref:System.Web.UI.XhtmlTextWriter> classe é criada, o <xref:System.Collections.Hashtable> objeto de elementos para os quais <xref:System.Web.UI.XhtmlTextWriter.CommonAttributes%2A> atributos são suprimidos inclui:  
  
-   `base`  
  
-   `meta`  
  
-   `br`  
  
-   `head`  
  
-   `title`  
  
-   `html`  
  
-   `style`  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" />
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
      </Docs>
    </Member>
    <Member MemberName="WriteBreak">
      <MemberSignature Language="C#" Value="public override void WriteBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteBreak() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.WriteBreak" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteBreak ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteBreak();" />
      <MemberSignature Language="F#" Value="override this.WriteBreak : unit -&gt; unit" Usage="xhtmlTextWriter.WriteBreak " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Grava um elemento <see langword="&lt;br/&gt;" /> no fluxo de saída para XHTML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo de código a seguir demonstra como substituir o herdadas <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A?displayProperty=nameWithType> método para gravar uma cadeia de caracteres de texto com o <xref:System.Web.UI.HtmlTextWriter.Write%2A?displayProperty=nameWithType> método e uma `<br/>` elemento com o <xref:System.Web.UI.XhtmlTextWriter.WriteBreak%2A> método.  
  
 [!code-csharp[system.web.ui.xhtmltextwriter_sample2#4](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#4)]
 [!code-vb[system.web.ui.xhtmltextwriter_sample2#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>