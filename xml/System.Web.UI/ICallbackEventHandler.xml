<Type Name="ICallbackEventHandler" FullName="System.Web.UI.ICallbackEventHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9fd0e63154b3f5a2354970a96bf74345816e7be7" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51901507" /></Metadata><TypeSignature Language="C#" Value="public interface ICallbackEventHandler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICallbackEventHandler" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ICallbackEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICallbackEventHandler" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICallbackEventHandler" />
  <TypeSignature Language="F#" Value="type ICallbackEventHandler = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Usado para indicar que um controle pode ser o destino de um evento de retorno de chamada no servidor.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementar o <xref:System.Web.UI.ICallbackEventHandler> interface para qualquer controle personalizado que precisa para receber eventos de retorno de chamada. Para obter mais informações, consulte [implementando retornos de chamada de cliente sem Postbacks](https://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185).  
  
 Exemplos de controles que implementam o <xref:System.Web.UI.ICallbackEventHandler> interface incluem o <xref:System.Web.UI.WebControls.GridView>, <xref:System.Web.UI.WebControls.DetailsView>, e <xref:System.Web.UI.WebControls.TreeView> controles. Quando um evento de retorno de chamada se destina a um controle que implementa o <xref:System.Web.UI.ICallbackEventHandler> interface, o <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> método é chamado para manipular o evento, passando o argumento do evento como um parâmetro e o <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> método retorna o resultado de retorno de chamada.  
  
 Controles que recuperam dados de um controle de fonte de dados durante o retorno de chamada podem ser feito de forma síncrona ou assíncrona. Controles ASP.NET, como <xref:System.Web.UI.WebControls.GridView>, <xref:System.Web.UI.WebControls.DetailsView>, e <xref:System.Web.UI.WebControls.TreeView> são implementadas de forma síncrona. Retornos de chamada síncronos não impedem que o usuário trabalhando no navegador. No modo síncrono, apenas um retorno de chamada por vez pode ser executados, com o retorno de chamada último tendo precedência. Quando um controle da Web é implementado para dar suporte ao comportamento assíncrono, vários retornos de chamada podem ser gerados simultaneamente. Para obter detalhes sobre a programação assíncrona, consulte [padrão assíncrono baseado em evento (EAP)](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-eap.md).  
  
 Você pode especificar se os eventos de retorno de chamada provenientes de interface do usuário renderizados por um controle que implementa o <xref:System.Web.UI.ICallbackEventHandler> interface são validados. Validação de eventos é uma boa prática de segurança. No entanto, por motivos de desempenho você pode desabilitá-lo. Para controlar se eventos de validação é executado em eventos de retorno de chamada, defina as `enableEventValidation` atributo do [@ Page](https://msdn.microsoft.com/library/f06cf9e5-22bb-461d-8b8f-549e53ff40a4) diretiva ou o `enableEventValidation` atributo do [páginas Element (ASP.NET Settings Schema)](https://msdn.microsoft.com/library/4123bb66-3fe4-4d62-b70e-33758656b458) do arquivo Web. config. Se você definir a <xref:System.Web.UI.Page.EnableEventValidation%2A> propriedade no código, defina-a `Page_Init` fase do processamento da página. Para obter mais informações sobre o balanceamento do benefício da segurança do evento de validação com seu custo de desempenho, consulte [visão geral de desempenho do ASP.NET](https://msdn.microsoft.com/library/f882bf1b-a009-4312-ac06-74370ffabc0b).  
  
 ]]></format>
    </remarks>
    <altmember cref="Overload:System.Web.UI.ClientScriptManager.GetCallbackEventReference" />
    <altmember cref="M:System.Web.UI.WebControls.DetailsView.System#Web#UI#ICallbackEventHandler#RaiseCallbackEvent(System.String)" />
    <altmember cref="M:System.Web.UI.WebControls.GridView.System#Web#UI#ICallbackEventHandler#RaiseCallbackEvent(System.String)" />
    <altmember cref="M:System.Web.UI.WebControls.TreeView.System#Web#UI#ICallbackEventHandler#RaiseCallbackEvent(System.String)" />
  </Docs>
  <Members>
    <Member MemberName="GetCallbackResult">
      <MemberSignature Language="C#" Value="public string GetCallbackResult ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetCallbackResult() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ICallbackEventHandler.GetCallbackResult" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCallbackResult () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetCallbackResult();" />
      <MemberSignature Language="F#" Value="abstract member GetCallbackResult : unit -&gt; string" Usage="iCallbackEventHandler.GetCallbackResult " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retorna os resultados de um evento de retorno de chamada que segmenta um controle.</summary>
        <returns>O resultado do retorno de chamada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exceções geradas em <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> não impedirá que <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> do que está sendo chamada e retornar um resultado. Para evitar <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> retornem um resultado, definir um sinalizador, quando uma exceção é lançada <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> e retornar uma cadeia de caracteres vazia do <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" />
        <altmember cref="M:System.Web.UI.WebControls.GridView.GetCallbackResult" />
        <altmember cref="M:System.Web.UI.WebControls.DetailsView.GetCallbackResult" />
        <altmember cref="M:System.Web.UI.WebControls.TreeView.GetCallbackResult" />
      </Docs>
    </Member>
    <Member MemberName="RaiseCallbackEvent">
      <MemberSignature Language="C#" Value="public void RaiseCallbackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RaiseCallbackEvent(string eventArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RaiseCallbackEvent (eventArgument As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RaiseCallbackEvent(System::String ^ eventArgument);" />
      <MemberSignature Language="F#" Value="abstract member RaiseCallbackEvent : string -&gt; unit" Usage="iCallbackEventHandler.RaiseCallbackEvent eventArgument" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">Uma cadeia de caracteres que representa um argumento do evento a ser passado para o manipulador de eventos.</param>
        <summary>Processa um evento de retorno de chamada que segmenta um controle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando `null` é usado como o parâmetro de argumento de evento, a cadeia de caracteres é serializada como "null" e enviados novamente para o servidor. Porque não há nenhuma maneira de distinguir `null` e "null", você deve evitar usar `null` parâmetros de argumento com retornos de chamada.  
  
 Exceções geradas em <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> não impedirá que <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> do que está sendo chamada e retornar um resultado. Para evitar <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> retornem um resultado, definir um sinalizador, quando uma exceção é lançada <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> e retornar uma cadeia de caracteres vazia do <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.GetCallbackEventReference" />
        <altmember cref="M:System.Web.UI.WebControls.GridView.System#Web#UI#ICallbackEventHandler#RaiseCallbackEvent(System.String)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeView.System#Web#UI#ICallbackEventHandler#RaiseCallbackEvent(System.String)" />
        <altmember cref="M:System.Web.UI.ICallbackEventHandler.GetCallbackResult" />
      </Docs>
    </Member>
  </Members>
</Type>