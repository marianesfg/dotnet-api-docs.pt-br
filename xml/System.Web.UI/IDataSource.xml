<Type Name="IDataSource" FullName="System.Web.UI.IDataSource">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8bd9799a83592c123c572fa408e6f968b54e2249" /><Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="09/22/2018" /><Meta Name="ms.locfileid" Value="46676696" /></Metadata><TypeSignature Language="C#" Value="public interface IDataSource" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataSource" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.IDataSource" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDataSource" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDataSource" />
  <TypeSignature Language="F#" Value="type IDataSource = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Representa uma fonte de dados abstrata à qual os controles ligados a dados são associados.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET oferece suporte a uma arquitetura de vinculação de dados de controle que permite que os controles de servidor Web associar aos dados de uma maneira consistente. Controles de servidor Web que se associam a dados são denominados controles ligados a dados e as classes que facilitam que associação são chamados de controles de fonte de dados. Controles de fonte de dados podem representar qualquer fonte de dados: um banco de dados relacional, um arquivo, um fluxo, um objeto comercial e assim por diante. Fonte de dados controla apresentar dados de maneira consistente para controles ligados a dados, independentemente do código-fonte ou o formato dos dados subjacentes.  
  
 Você implementa o <xref:System.Web.UI.IDataSource> interface quando você deseja implementar seu próprio controle de fonte de dados personalizado do ASP.NET.  
  
 Qualquer classe que implementa o <xref:System.Web.UI.IDataSource> interface é um controle de fonte de dados. O <xref:System.Web.UI.IDataSource> interface serve como a base para a fonte de dados ASP.NET todos os controles e define um dos conceitos fundamentais de arquitetura de vinculação de dados com seus dois métodos: o <xref:System.Web.UI.IDataSource.GetView%2A> método e o <xref:System.Web.UI.IDataSource.GetViewNames%2A> método. Esse conceito é que todos os controles de fonte de dados oferecer suporte a uma ou mais exibições nomeadas em seus dados. O objeto de exibição de fonte de dados é semelhante ao <xref:System.Data.DataView> abstração no <xref:System.Data> namespace: uma ligação de dados, de exibição dos dados para classificação, filtragem e outras operações de dados que define o modo de exibição personalizado. Em sua essência, uma fonte de dados de controle não faz nada mais do que recuperar os modos de exibição nos dados.  
  
 Um controle de fonte de dados pode ter um ou mais objetos de exibição de fonte de dados associado. Alguns dados de controles, incluindo aqueles que representam os bancos de dados relacionais, como de fonte <xref:System.Web.UI.WebControls.SqlDataSource> e <xref:System.Web.UI.WebControls.AccessDataSource>, dar suporte a apenas uma exibição. Controles, incluindo controles de fonte de dados hierárquicos, como de fonte de outros dados <xref:System.Web.UI.WebControls.SiteMapDataSource>, dar suporte a vários modos de exibição. A exibição da fonte de dados define os recursos de uma fonte de dados e as operações que ele suporta.  
  
 Em resumo, os controles de fonte de dados implementam o <xref:System.Web.UI.IDataSource> da interface, dar suporte a um ou mais nomeados exibições nos dados que eles representam e ofereçam suporte à recuperação de dados da fonte de dados que eles representam. Controles de fonte de dados sempre recuperam dados sob demanda, por exemplo, quando `DataBind` é chamado em um controle ligado a dados.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como uma classe pode implementar os métodos definidos pelo <xref:System.Web.UI.IDataSource> interface para fornecer dados a controles ligados a dados. O controle de fonte de dados neste exemplo age como uma fonte de dados em um arquivo de valores separados por vírgula e pode ser usado por qualquer controle ligado a dados para exibir dados de arquivos separados por vírgulas. Este exemplo de código é parte de um exemplo maior fornecido para o <xref:System.Web.UI.DataSourceControl> classe.  
  
 [!code-csharp[Urtue.Samples.Alexkr.CsvDataSource_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Urtue.Samples.Alexkr.CsvDataSource_1/CS/csvdatasource.cs#1)]
 [!code-vb[Urtue.Samples.Alexkr.CsvDataSource_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Urtue.Samples.Alexkr.CsvDataSource_1/VB/csvdatasource.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.IDataSource" />
    <altmember cref="T:System.Web.UI.DataSourceView" />
    <altmember cref="T:System.Web.UI.HierarchicalDataSourceControl" />
  </Docs>
  <Members>
    <Member MemberName="DataSourceChanged">
      <MemberSignature Language="C#" Value="event EventHandler DataSourceChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DataSourceChanged" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.IDataSource.DataSourceChanged" />
      <MemberSignature Language="VB.NET" Value="Event DataSourceChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ DataSourceChanged;" />
      <MemberSignature Language="F#" Value="member this.DataSourceChanged : EventHandler " Usage="member this.DataSourceChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando um controle de fonte de dados foi alterado de alguma forma que afeta controles associados a dados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.IDataSource.DataSourceChanged> é gerado quando as propriedades de um controle associado a dados ou os dados subjacentes foi alterada de alguma forma que afeta as associações de dados entre um controle associado a dados e seus dados. Por exemplo, o evento é gerado se um arquivo de nome de propriedade, como o <xref:System.Web.UI.WebControls.AccessDataSource.DataFile%2A> propriedade, é alterado em um controle de fonte de dados com base em arquivo.  
  
 Para obter mais informações sobre como manipular eventos, consulte [tratando e gerando eventos](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetView">
      <MemberSignature Language="C#" Value="public System.Web.UI.DataSourceView GetView (string viewName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.DataSourceView GetView(string viewName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.IDataSource.GetView(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetView (viewName As String) As DataSourceView" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::UI::DataSourceView ^ GetView(System::String ^ viewName);" />
      <MemberSignature Language="F#" Value="abstract member GetView : string -&gt; System.Web.UI.DataSourceView" Usage="iDataSource.GetView viewName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="viewName">O nome da exibição a ser recuperada.</param>
        <summary>Obtém a exibição de fonte de dados nomeada associada ao controle de fonte de dados.</summary>
        <returns>Retorna o <see cref="T:System.Web.UI.DataSourceView" /> nomeado associado a <see cref="T:System.Web.UI.IDataSource" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Classes de controle de fonte de dados podem dar suporte a uma ou mais exibições sobre seus dados subjacentes. Essas exibições são representadas por instâncias da <xref:System.Web.UI.DataSourceView> classe. A exibição da fonte de dados define os recursos de um controle de fonte de dados e executa todo o trabalho necessário para recuperar dados do armazenamento de dados subjacente e realizar operações como classificação, inserção, exclusão e atualização.  
  
 Classes de controle de fonte de dados que implementam o <xref:System.Web.UI.IDataSource> implementar interface o <xref:System.Web.UI.IDataSource.GetView%2A> método retorne com rigidez de tipos exibir objetos associados à classe.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como uma classe de controle de fonte de dados que implementa o <xref:System.Web.UI.IDataSource> interface implementa o <xref:System.Web.UI.IDataSource.GetView%2A> método, retornando uma instância fortemente tipada do <xref:System.Web.UI.DataSourceView> classe. Como o controle de fonte de dados oferece suporte a apenas uma exibição, ele ignora o nome e retorna uma exibição nomeada com o nome de exibição padrão. Este exemplo de código é parte de um exemplo maior fornecido para o <xref:System.Web.UI.DataSourceControl> classe.  
  
 [!code-csharp[Urtue.Samples.Alexkr.CsvDataSource_1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/Urtue.Samples.Alexkr.CsvDataSource_1/CS/csvdatasource.cs#3)]
 [!code-vb[Urtue.Samples.Alexkr.CsvDataSource_1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Urtue.Samples.Alexkr.CsvDataSource_1/VB/csvdatasource.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.IDataSource.GetViewNames" />
        <altmember cref="T:System.Web.UI.DataSourceView" />
      </Docs>
    </Member>
    <Member MemberName="GetViewNames">
      <MemberSignature Language="C#" Value="public System.Collections.ICollection GetViewNames ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.ICollection GetViewNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.IDataSource.GetViewNames" />
      <MemberSignature Language="VB.NET" Value="Public Function GetViewNames () As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ICollection ^ GetViewNames();" />
      <MemberSignature Language="F#" Value="abstract member GetViewNames : unit -&gt; System.Collections.ICollection" Usage="iDataSource.GetViewNames " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtém uma coleção de nomes que representa a lista de objetos de exibição associados à interface <see cref="T:System.Web.UI.IDataSource" />.</summary>
        <returns>Uma <see cref="T:System.Collections.ICollection" /> que contém os nomes das exibições associadas à <see cref="T:System.Web.UI.IDataSource" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Classes de controle de fonte de dados podem dar suporte a uma ou mais exibições nomeadas em seus dados subjacentes. O <xref:System.Web.UI.IDataSource.GetViewNames%2A> método retorna uma coleção de nomes de exibição associada atualmente com a instância de controle de fonte de dados. Os chamadores podem iterar pela coleção de nomes de exibição e recuperar individuais <xref:System.Web.UI.DataSourceView> objetos com o <xref:System.Web.UI.IDataSource.GetView%2A> método.  
  
 Classes de controle de fonte de dados que implementam o <xref:System.Web.UI.IDataSource> implementar interface o <xref:System.Web.UI.IDataSource.GetViewNames%2A> método para retornar uma coleção de nomes que representa a fonte de dados exibir objetos associados a classe de controle de fonte de dados.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como um controle de fonte de dados que implementa o <xref:System.Web.UI.IDataSource> interface implementa o <xref:System.Web.UI.IDataSource.GetViewNames%2A> método, retornando um <xref:System.Collections.ICollection> coleção de nomes. Como a fonte de dados oferece suporte a apenas uma exibição, o método retorna uma coleção de um elemento usando o nome padrão para o modo de exibição. Este exemplo de código é parte de um exemplo maior fornecido para o <xref:System.Web.UI.DataSourceControl> classe.  
  
 [!code-csharp[Urtue.Samples.Alexkr.CsvDataSource_1#4](~/samples/snippets/csharp/VS_Snippets_WebNet/Urtue.Samples.Alexkr.CsvDataSource_1/CS/csvdatasource.cs#4)]
 [!code-vb[Urtue.Samples.Alexkr.CsvDataSource_1#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Urtue.Samples.Alexkr.CsvDataSource_1/VB/csvdatasource.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.DataSourceControl.GetView(System.String)" />
        <altmember cref="T:System.Web.UI.DataSourceView" />
      </Docs>
    </Member>
  </Members>
</Type>