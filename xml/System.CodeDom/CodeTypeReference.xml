<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="CodeTypeReference.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac52455b43fddb32549a443564aec8b89bb01619d72.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2455b43fddb32549a443564aec8b89bb01619d72</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.CodeDom.CodeTypeReference">
          <source>Represents a reference to a type.</source>
          <target state="translated">Representa uma referência a um tipo.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeReference">
          <source>A <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> object is used to represent a type for CodeDOM objects.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> objeto é usado para representar um tipo para objetos de CodeDOM.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeReference">
          <source>When CodeDOM types have a <ph id="ph1">`Type`</ph> property, it is of type <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph>.</source>
          <target state="translated">Quando tipos de CodeDOM tem um <ph id="ph1">`Type`</ph> propriedade, ela é do tipo <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeReference">
          <source>For example, the <ph id="ph1">&lt;xref:System.CodeDom.CodeMemberField.Type%2A?displayProperty=nameWithType&gt;</ph> property is a <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> that represents a field's data type.</source>
          <target state="translated">Por exemplo, o <ph id="ph1">&lt;xref:System.CodeDom.CodeMemberField.Type%2A?displayProperty=nameWithType&gt;</ph> propriedade é um <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> que representa o tipo de dados do campo.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeReference">
          <source>A <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> can be initialized with a <ph id="ph2">&lt;xref:System.Type&gt;</ph> object or a string.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> pode ser inicializado com um <ph id="ph2">&lt;xref:System.Type&gt;</ph> objeto ou uma cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeReference">
          <source>It is generally recommended to use a <ph id="ph1">&lt;xref:System.Type&gt;</ph> to do this, although it may not always be possible.</source>
          <target state="translated">Geralmente é recomendável usar um <ph id="ph1">&lt;xref:System.Type&gt;</ph> para fazer isso, embora não seja sempre possível.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeReference">
          <source>If initializing an instance of this class with a string, it is strongly recommended to always use fully qualified types, such as "System.Console" instead of just "Console", because not all languages support importing namespaces.</source>
          <target state="translated">Se a inicialização de uma instância dessa classe com uma cadeia de caracteres, ele é altamente recomendável sempre usar tipos totalmente qualificados, como "System" em vez de apenas "Console", porque nem todos os idiomas oferecem suporte a namespaces de importação.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeReference">
          <source>Array types can be specified by either passing in a type object for an array or using one of the constructors that accept rank as a parameter.</source>
          <target state="translated">Tipos de matriz podem ser especificados passando um objeto de tipo para uma matriz ou usando um dos construtores que aceitem classificação como um parâmetro.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeReference">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</ph> property specifies the name of the type to reference.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</ph> propriedade especifica o nome do tipo de referência.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeReference">
          <source>For references to array types, the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.ArrayElementType%2A&gt;</ph> property indicates the type of the elements of the array, and the <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference.ArrayRank%2A&gt;</ph> property indicates the number of dimensions in the array.</source>
          <target state="translated">Para as referências aos tipos de matriz, o <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.ArrayElementType%2A&gt;</ph> propriedade indica o tipo dos elementos da matriz e o <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference.ArrayRank%2A&gt;</ph> propriedade indica o número de dimensões da matriz.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeReference">
          <source>The following example demonstrates use of a <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> to represent a reference to a type.</source>
          <target state="translated">O exemplo a seguir demonstra o uso de um <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> representar uma referência a um tipo.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="T:System.CodeDom.CodeTypeReference">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> class using the specified type.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> usando o tipo especificado.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> class.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.CodeTypeReference.#ctor">
          <source>This constructor creates an empty <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> object.</source>
          <target state="translated">Este construtor cria vazio <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.CodeTypeReference.#ctor">
          <source>If you use this constructor, set properties to establish the type reference.</source>
          <target state="translated">Se você usar esse construtor, defina propriedades para estabelecer a referência de tipo.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeParameter)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeParameter" /&gt;</ph> that represents the type of the type parameter.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeParameter" /&gt;</ph> que representa o tipo do parâmetro de tipo.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeParameter)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> class using the specified code type parameter.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> usando o parâmetro de tipo de código especificado.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.String)">
          <source>The name of the type to reference.</source>
          <target state="translated">O nome do tipo a referenciar.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> class using the specified type name.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> usando o nome do tipo especificado.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.String)">
          <source>If the <ph id="ph1">`typeName`</ph> parameter references a generic type, it must follow the syntax conventions for generic types.</source>
          <target state="translated">Se o <ph id="ph1">`typeName`</ph> parâmetro faz referência a um tipo genérico, ela deve seguir as convenções de sintaxe para tipos genéricos.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.String)">
          <source>For example, the reflection signature for a <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> type, where <ph id="ph2">`K`</ph> is a string and <ph id="ph3">`V`</ph> is a <ph id="ph4">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of integers, is represented by reflection as the following (with the assembly information removed): <ph id="ph5">``System.Collections.Generic.Dictionary`2[[System.String], [System.Collections.Generic.List`1[[System.Int32]]]]``</ph>.</source>
          <target state="translated">Por exemplo, a assinatura de reflexão para um <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> tipo, onde <ph id="ph2">`K`</ph> é uma cadeia de caracteres e <ph id="ph3">`V`</ph> é um <ph id="ph4">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de inteiros, é representado por reflexão como o seguinte (com as informações de assembly removidas): <ph id="ph5">``System.Collections.Generic.Dictionary`2[[System.String], [System.Collections.Generic.List`1[[System.Int32]]]]``</ph>.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.String)">
          <source>You must use square brackets ([]) and not the C# angle brackets (&lt;&gt;) to delimit generic parameters.</source>
          <target state="translated">Você deve usar colchetes ([]) e não os c# colchetes angulares (&lt;&gt;) para delimitar os parâmetros genéricos.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.String)">
          <source>To avoid the possibility of making a mistake in specifying the syntax, consider using the constructor that takes a type as a parameter instead of a string.</source>
          <target state="translated">Para evitar a possibilidade de cometer um erro de sintaxe para especificar, considere o uso de construtor que usa um tipo como um parâmetro em vez de uma cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.Type)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> to reference.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> a referenciar.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.Type)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> class using the specified type.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> usando o tipo especificado.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.Type)">
          <source><ph id="ph1">&lt;paramref name="type" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="type" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeReference,System.Int32)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> that indicates the type of the array.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> que indica o tipo da matriz.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeReference,System.Int32)">
          <source>The number of dimensions in the array.</source>
          <target state="translated">O número de dimensões na matriz.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeReference,System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> class using the specified array type and rank.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> usando a classificação e o tipo de matriz especificados.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeReference,System.Int32)">
          <source>This constructor can be used to construct arrays of arrays by nesting <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> objects.</source>
          <target state="translated">Este construtor pode ser usado para construir a matrizes de matrizes aninhando <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> objetos.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReference[])">
          <source>The name of the type to reference.</source>
          <target state="translated">O nome do tipo a referenciar.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReference[])">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> values.</source>
          <target state="translated">Uma matriz de valores <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReference[])">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> class using the specified type name and type arguments.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> usando o nome do tipo e os argumentos de tipo especificados.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReferenceOptions)">
          <source>The name of the type to reference.</source>
          <target state="translated">O nome do tipo a referenciar.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReferenceOptions)">
          <source>The code type reference option, one of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReferenceOptions" /&gt;</ph> values.</source>
          <target state="translated">A opção de referência de tipo de código, um dos valores de <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReferenceOptions" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReferenceOptions)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> class using the specified type name and code type reference option.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> usando o nome do tipo e a opção de referência de tipo de código especificados.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.Int32)">
          <source>The name of the type of the elements of the array.</source>
          <target state="translated">O nome do tipo dos elementos da matriz.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.Int32)">
          <source>The number of dimensions of the array.</source>
          <target state="translated">O número de dimensões da matriz.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> class using the specified array type name and rank.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> usando a classificação, o nome e o tipo de matriz especificados.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.Type,System.CodeDom.CodeTypeReferenceOptions)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> to reference.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> a referenciar.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.Type,System.CodeDom.CodeTypeReferenceOptions)">
          <source>The code type reference option, one of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReferenceOptions" /&gt;</ph> values.</source>
          <target state="translated">A opção de referência de tipo de código, um dos valores de <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReferenceOptions" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.Type,System.CodeDom.CodeTypeReferenceOptions)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> class using the specified type and code type reference.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> usando a referência de tipo de código e o tipo especificados.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeReference.ArrayElementType">
          <source>Gets or sets the type of the elements in the array.</source>
          <target state="translated">Obtém ou define tipo dos elementos na matriz.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.ArrayElementType">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> that indicates the type of the array elements.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> que indica o tipo dos elementos da matriz.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.ArrayElementType">
          <source>This is disregarded unless the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.ArrayRank%2A&gt;</ph> property is greater than or equal to 1.</source>
          <target state="translated">Isso é ignorado, a menos que o <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.ArrayRank%2A&gt;</ph> propriedade é maior que ou igual a 1.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeReference.ArrayRank">
          <source>Gets or sets the array rank of the array.</source>
          <target state="translated">Obtém ou define a classificação da matriz.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.ArrayRank">
          <source>The number of dimensions of the array.</source>
          <target state="translated">O número de dimensões da matriz.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>Gets or sets the name of the type being referenced.</source>
          <target state="translated">Obtém ou define o nome do tipo sendo referenciado.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>The name of the type being referenced.</source>
          <target state="translated">O nome do tipo que está sendo referenciado.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>This property contains the name of the type unless it is an array type, in which case it is the array element type.</source>
          <target state="translated">Esta propriedade contém o nome do tipo, a menos que ele seja um tipo de matriz, caso em que é o tipo de elemento de matriz.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>The name of the property may be misleading.</source>
          <target state="translated">O nome da propriedade pode ser enganoso.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>This property contains just the type name with any array adornments or generic type arguments removed, not the base or parent type as might be expected.</source>
          <target state="translated">Esta propriedade contém apenas o nome de tipo com ornamentos qualquer matriz ou argumentos de tipo genérico removido, não do tipo base ou pai como pode ser esperado.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>For example, the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</ph> value for <ph id="ph2">``System.Collections.Generic.Dictionary`2[[System.String], [System.Collections.Generic.List`1[[System.Int32]]]]``</ph> is <ph id="ph3">``System.Collections.Generic.Dictionary`2``</ph>.</source>
          <target state="translated">Por exemplo, o <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</ph> valor para <ph id="ph2">``System.Collections.Generic.Dictionary`2[[System.String], [System.Collections.Generic.List`1[[System.Int32]]]]``</ph> é <ph id="ph3">``System.Collections.Generic.Dictionary`2``</ph>.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>Representation of Generic Types</source>
          <target state="translated">Representação de tipos genéricos</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>The information in this section is intended for CodeDom provider developers and only applies to CLS-compliant languages.</source>
          <target state="translated">As informações desta seção são destinadas a desenvolvedores de provedor de CodeDom e só se aplica a linguagens compatíveis com CLS.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>The return value can contain generic types.</source>
          <target state="translated">O valor de retorno pode conter tipos genéricos.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>Generic types are formatted with the name of the type followed by a grave accent ("`") followed by a count of the generic type arguments.</source>
          <target state="translated">Tipos genéricos são formatados com o nome do tipo seguido por um acento grave ("'") seguido por uma contagem de argumentos de tipo genérico.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>The generic type arguments can be found in the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReferenceCollection&gt;</ph> returned by the <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt;</ph> property.</source>
          <target state="translated">Os argumentos de tipo genérico podem ser encontrados no <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReferenceCollection&gt;</ph> retornado pelo <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>The values returned by <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</ph> and the associated <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt;</ph> contain the same content as the value of the type returned by reflection.</source>
          <target state="translated">Os valores retornados por <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</ph> e associado <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt;</ph> contêm o mesmo conteúdo, como o valor do tipo retornado por reflexão.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>For example, a constructed <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> where <ph id="ph2">`K`</ph> is a string and <ph id="ph3">`V`</ph> is a constructed <ph id="ph4">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of integers is represented by reflection as the following (with the assembly information removed):</source>
          <target state="translated">Por exemplo, um construído <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> onde <ph id="ph2">`K`</ph> é uma cadeia de caracteres e <ph id="ph3">`V`</ph> é um construído <ph id="ph4">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de inteiros é representado por reflexão como o seguinte (com as informações de assembly removidas):</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>Recursively parsing the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</ph> property from the <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> for <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> yields the same strings as the reflection representation above:</source>
          <target state="translated">Análise recursivamente a <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</ph> propriedade o <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> para <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> produz as mesmo cadeias de caracteres como a representação de reflexão acima:</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</ph> property for the parent <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> returns the following:</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</ph> propriedade pai <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> retorna o seguinte:</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</ph> property for the first <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> object in the <ph id="ph3">&lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt;</ph> collection returns the following:</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</ph> propriedade para a primeira <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> objeto o <ph id="ph3">&lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt;</ph> coleção retorna o seguinte:</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</ph> property for the second <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> object in the <ph id="ph3">&lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt;</ph> collection returns the following:</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</ph> propriedade para a segunda <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> objeto o <ph id="ph3">&lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt;</ph> coleção retorna o seguinte:</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt;</ph> property in the <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> object for <ph id="ph3">``System.Collections.Generic.List`1``</ph> returns the following:</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt;</ph> propriedade o <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> de objeto para <ph id="ph3">``System.Collections.Generic.List`1``</ph> retorna o seguinte:</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>The type argument count should be used when parsing the associated <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt;</ph> values.</source>
          <target state="translated">A contagem de argumento de tipo deve ser usada durante a análise associado <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>The common practice is to remove the type argument count from the generated code, but the practice is compiler specific.</source>
          <target state="translated">A prática comum é remover a contagem de argumento de tipo de código gerado, mas a prática é específico do compilador.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>It is important to note that the type argument count can be found within a nested type name, in which case it is followed by a plus sign ("+").</source>
          <target state="translated">É importante observar que a contagem de argumentos de tipo pode ser encontrada em um nome de tipo aninhado, caso em que ele seja seguido por um sinal de adição ("+").</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>When creating a generic <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph>, the recommended practice is to specify the type arguments as <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> objects or use the constructor that takes a <ph id="ph3">&lt;xref:System.Type&gt;</ph>.</source>
          <target state="translated">Ao criar um genérico <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph>, a prática recomendada é especificar os argumentos de tipo como <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> objetos ou use o construtor que assume um <ph id="ph3">&lt;xref:System.Type&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>Use of the constructor that creates a <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> from a string can lead to undiscoverable type-argument errors.</source>
          <target state="translated">Use o construtor que cria um <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> de uma cadeia de caracteres pode levar a erros de argumento de tipo undiscoverable.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeReference.Options">
          <source>Gets or sets the code type reference option.</source>
          <target state="translated">Obtém ou define opção de referência de tipo de código.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.Options">
          <source>A bitwise combination of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReferenceOptions" /&gt;</ph> values.</source>
          <target state="translated">Uma combinação bit a bit dos valores <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReferenceOptions" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeReference.TypeArguments">
          <source>Gets the type arguments for the current generic type reference.</source>
          <target state="translated">Obtém os argumentos de tipo para a referência de tipo genérico atual.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.TypeArguments">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReferenceCollection" /&gt;</ph> containing the type arguments for the current <ph id="ph2">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> object.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReferenceCollection" /&gt;</ph> que contém os argumentos de tipo atual <ph id="ph2">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.TypeArguments">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt;</ph> property is a collection of type references to be substituted for the type parameter references of the current generic type.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt;</ph> propriedade é uma coleção de referências de tipo a ser substituído para as referências de parâmetro de tipo do tipo genérico atual.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.TypeArguments">
          <source>The collection contains all the type arguments for all nested types.</source>
          <target state="translated">A coleção contém todos os argumentos de tipo para todos os tipos aninhados.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.TypeArguments">
          <source>For an example, see the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</ph> property.</source>
          <target state="translated">Para obter um exemplo, consulte o <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</ph> propriedade.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>