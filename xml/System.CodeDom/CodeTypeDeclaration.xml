<Type Name="CodeTypeDeclaration" FullName="System.CodeDom.CodeTypeDeclaration">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3bb3c3208001b092ec6600362ff2df6daa55be04" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37702956" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CodeTypeDeclaration : System.CodeDom.CodeTypeMember" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CodeTypeDeclaration extends System.CodeDom.CodeTypeMember" />
  <TypeSignature Language="DocId" Value="T:System.CodeDom.CodeTypeDeclaration" />
  <TypeSignature Language="VB.NET" Value="Public Class CodeTypeDeclaration&#xA;Inherits CodeTypeMember" />
  <TypeSignature Language="C++ CLI" Value="public ref class CodeTypeDeclaration : System::CodeDom::CodeTypeMember" />
  <TypeSignature Language="F#" Value="type CodeTypeDeclaration = class&#xA;    inherit CodeTypeMember" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.CodeDom</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.CodeDom.CodeTypeMember</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="ad980-101">Representa uma declaração de tipo de uma classe, estrutura, interface ou enumeração.</span>
      <span class="sxs-lookup">
        <span data-stu-id="ad980-101">Represents a type declaration for a class, structure, interface, or enumeration.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad980-102"><xref:System.CodeDom.CodeTypeDeclaration> pode ser usado para representar o código que declara uma classe, estrutura, interface ou enumeração.</span><span class="sxs-lookup"><span data-stu-id="ad980-102"><xref:System.CodeDom.CodeTypeDeclaration> can be used to represent code that declares a class, structure, interface, or enumeration.</span></span> <span data-ttu-id="ad980-103"><xref:System.CodeDom.CodeTypeDeclaration> pode ser usado para declarar um tipo que está aninhado dentro de outro tipo.</span><span class="sxs-lookup"><span data-stu-id="ad980-103"><xref:System.CodeDom.CodeTypeDeclaration> can be used to declare a type that is nested within another type.</span></span>  
  
 <span data-ttu-id="ad980-104">O <xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A> propriedade especifica o tipo base ou tipos base do tipo que está sendo declarado.</span><span class="sxs-lookup"><span data-stu-id="ad980-104">The <xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A> property specifies the base type or base types of the type being declared.</span></span> <span data-ttu-id="ad980-105">O <xref:System.CodeDom.CodeTypeDeclaration.Members%2A> propriedade contém os membros de tipo, que podem incluir métodos, campos, propriedades, comentários e outros tipos.</span><span class="sxs-lookup"><span data-stu-id="ad980-105">The <xref:System.CodeDom.CodeTypeDeclaration.Members%2A> property contains the type members, which can include methods, fields, properties, comments and other types.</span></span> <span data-ttu-id="ad980-106">O <xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A> propriedade indica a <xref:System.Reflection.TypeAttributes> valores para a declaração de tipo, que indicam a categoria de tipo do tipo.</span><span class="sxs-lookup"><span data-stu-id="ad980-106">The <xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A> property indicates the <xref:System.Reflection.TypeAttributes> values for the type declaration, which indicate the type category of the type.</span></span> <span data-ttu-id="ad980-107">O <xref:System.CodeDom.CodeTypeDeclaration.IsClass%2A>, <xref:System.CodeDom.CodeTypeDeclaration.IsStruct%2A>, <xref:System.CodeDom.CodeTypeDeclaration.IsEnum%2A>, e <xref:System.CodeDom.CodeTypeDeclaration.IsInterface%2A> métodos indicam se o tipo é uma classe, estrutura, enumeração ou tipo de interface, respectivamente.</span><span class="sxs-lookup"><span data-stu-id="ad980-107">The <xref:System.CodeDom.CodeTypeDeclaration.IsClass%2A>, <xref:System.CodeDom.CodeTypeDeclaration.IsStruct%2A>, <xref:System.CodeDom.CodeTypeDeclaration.IsEnum%2A>, and <xref:System.CodeDom.CodeTypeDeclaration.IsInterface%2A> methods indicate whether the type is a class, structure, enumeration, or interface type, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ad980-108">Algumas linguagens de programação dão suporte apenas a declaração de tipos de referência ou classes.</span><span class="sxs-lookup"><span data-stu-id="ad980-108">Some programming languages only support the declaration of reference types, or classes.</span></span> <span data-ttu-id="ad980-109">Para verificar um gerador de código CodeDOM específicas de idioma para o suporte para declarar interfaces, enumerações ou tipos de valor, chame o <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> método para testar a apropriado <xref:System.CodeDom.Compiler.GeneratorSupport> sinalizadores.</span><span class="sxs-lookup"><span data-stu-id="ad980-109">To check a language-specific CodeDOM code generator for support for declaring interfaces, enumerations, or value types, call the <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> method to test for the appropriate <xref:System.CodeDom.Compiler.GeneratorSupport> flags.</span></span> <span data-ttu-id="ad980-110"><xref:System.CodeDom.Compiler.GeneratorSupport.DeclareInterfaces> indica que há suporte para interfaces, <xref:System.CodeDom.Compiler.GeneratorSupport.DeclareEnums> indica que há suporte para enumerações, e <xref:System.CodeDom.Compiler.GeneratorSupport.DeclareValueTypes> indica que há suporte para tipos de valor, como estruturas.</span><span class="sxs-lookup"><span data-stu-id="ad980-110"><xref:System.CodeDom.Compiler.GeneratorSupport.DeclareInterfaces> indicates support for interfaces, <xref:System.CodeDom.Compiler.GeneratorSupport.DeclareEnums> indicates support for enumerations, and <xref:System.CodeDom.Compiler.GeneratorSupport.DeclareValueTypes> indicates support for value types such as structures.</span></span>  
  
 <span data-ttu-id="ad980-111">Você pode criar uma classe ou uma implementação de estrutura em uma declaração completa ou distribuir a implementação entre várias declarações.</span><span class="sxs-lookup"><span data-stu-id="ad980-111">You can build a class or a structure implementation in one complete declaration, or spread the implementation across multiple declarations.</span></span> <span data-ttu-id="ad980-112">O <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> propriedade indica se a declaração de tipo é completa ou parcial.</span><span class="sxs-lookup"><span data-stu-id="ad980-112">The <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> property indicates whether the type declaration is complete or partial.</span></span> <span data-ttu-id="ad980-113">Nem todos os geradores de código dão suporte a declarações de tipo parcial, portanto, você deve testar esse suporte por meio da chamada a <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> método com o sinalizador <xref:System.CodeDom.Compiler.GeneratorSupport.PartialTypes>.</span><span class="sxs-lookup"><span data-stu-id="ad980-113">Not all code generators support partial type declarations, so you should test for this support by calling the <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> method with the flag <xref:System.CodeDom.Compiler.GeneratorSupport.PartialTypes>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad980-114">Este exemplo demonstra como usar um <xref:System.CodeDom.CodeTypeDeclaration> para declarar um tipo.</span><span class="sxs-lookup"><span data-stu-id="ad980-114">This example demonstrates using a <xref:System.CodeDom.CodeTypeDeclaration> to declare a type.</span></span>  
  
 [!code-cpp[CodeTypeDeclarationExample#2](~/samples/snippets/cpp/VS_Snippets_CLR/CodeTypeDeclarationExample/CPP/codetypedeclarationexample.cpp#2)]
 [!code-csharp[CodeTypeDeclarationExample#2](~/samples/snippets/csharp/VS_Snippets_CLR/CodeTypeDeclarationExample/CS/codetypedeclarationexample.cs#2)]
 [!code-vb[CodeTypeDeclarationExample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeTypeDeclarationExample/VB/codetypedeclarationexample.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.CodeDom.CodeTypeDeclarationCollection" />
    <altmember cref="T:System.CodeDom.Compiler.GeneratorSupport" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ad980-115">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeDeclaration" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad980-115">Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeDeclaration" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeTypeDeclaration ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeTypeDeclaration.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeTypeDeclaration();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ad980-116">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeDeclaration" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad980-116">Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeDeclaration" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeTypeDeclaration (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeTypeDeclaration.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeTypeDeclaration(System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.CodeDom.CodeTypeDeclaration : string -&gt; System.CodeDom.CodeTypeDeclaration" Usage="new System.CodeDom.CodeTypeDeclaration name" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="ad980-117">O nome do novo tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad980-117">The name for the new type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ad980-118">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeDeclaration" /> com o nome especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad980-118">Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeDeclaration" /> class with the specified name.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseTypes">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeReferenceCollection BaseTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeTypeReferenceCollection BaseTypes" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseTypes As CodeTypeReferenceCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeTypeReferenceCollection ^ BaseTypes { System::CodeDom::CodeTypeReferenceCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseTypes : System.CodeDom.CodeTypeReferenceCollection" Usage="System.CodeDom.CodeTypeDeclaration.BaseTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeReferenceCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ad980-119">Obtém os tipos base do tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad980-119">Gets the base types of the type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ad980-120">Um objeto <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> que indica os tipos base do tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad980-120">A <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> object that indicates the base types of the type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad980-121">Para gerar uma classe no Visual Basic que não herda de um tipo base, mas que implementam uma ou mais interfaces, você deve incluir <xref:System.Object> como o primeiro item a <xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A> coleção.</span><span class="sxs-lookup"><span data-stu-id="ad980-121">To generate a class in Visual Basic that does not inherit from a base type, but that does implement one or more interfaces, you must include <xref:System.Object> as the first item in the <xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A> collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ad980-122">No .NET Framework versão 2.0 não é necessário o <xref:System.CodeDom.CodeTypeReference> para <xref:System.Object> se a interface que você estiver implementando já existe e se você estiver fazendo referência a ele por tipo.</span><span class="sxs-lookup"><span data-stu-id="ad980-122">In the .NET Framework version 2.0 you do not need the <xref:System.CodeDom.CodeTypeReference> for <xref:System.Object> if the interface you are implementing already exists and you are referring to it by type.</span></span> <span data-ttu-id="ad980-123">Por exemplo, se você estiver implementando o <xref:System.Collections.ICollection> da interface e adicioná-lo à coleção com esta instrução `ctd.BaseTypes.Add(New CodeTypeReference(typeof(ICollection)))`, você não precisa anterior `ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))` instrução.</span><span class="sxs-lookup"><span data-stu-id="ad980-123">For example, if you are implementing the <xref:System.Collections.ICollection> interface and add it to the collection with this statement, `ctd.BaseTypes.Add(New CodeTypeReference(typeof(ICollection)))`, you do not need the preceding `ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))` statement.</span></span>  
  
 <span data-ttu-id="ad980-124">O código a seguir ilustra a adição de um <xref:System.CodeDom.CodeTypeReference> à coleção que se refere a <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="ad980-124">The following code illustrates the addition of a <xref:System.CodeDom.CodeTypeReference> to the collection that refers to <xref:System.Object>.</span></span>  
  
```vb  
Dim ctd As New CodeTypeDeclaration("Class1")  
ctd.IsClass = True  
ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))  
ctd.BaseTypes.Add(New CodeTypeReference("Interface1"))  
```  
  
```csharp  
CodeTypeDeclaration ctd = new CodeTypeDeclaration("Class1");  
ctd.IsClass = true;  
ctd.BaseTypes.Add(new CodeTypeReference(typeof(Object)));  
ctd.BaseTypes.Add(new CodeTypeReference("Interface1"));  
```  
  
 <span data-ttu-id="ad980-125">O código anterior gera o equivalente do código do Visual Basic a seguir.</span><span class="sxs-lookup"><span data-stu-id="ad980-125">The preceding code generates the equivalent of the following Visual Basic code.</span></span>  
  
```vb  
Public Class Class1  
Implements Interface1  
```  
  
 <span data-ttu-id="ad980-126">No entanto, o código do Visual Basic gerado, na verdade, é o seguinte.</span><span class="sxs-lookup"><span data-stu-id="ad980-126">However, the Visual Basic code actually generated is the following.</span></span>  
  
```vb  
Public Class Class1  
Inherits Object  
Implements Interface1  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.CodeTypeReferenceCollection" />
      </Docs>
    </Member>
    <Member MemberName="IsClass">
      <MemberSignature Language="C#" Value="public bool IsClass { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClass" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.IsClass" />
      <MemberSignature Language="VB.NET" Value="Public Property IsClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsClass { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsClass : bool with get, set" Usage="System.CodeDom.CodeTypeDeclaration.IsClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ad980-127">Obtém ou define um valor que indica se o tipo é um tipo de classe ou de referência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad980-127">Gets or sets a value indicating whether the type is a class or reference type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ad980-128">
            <see langword="true" /> Se o tipo for um tipo de classe ou de referência; Caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad980-128">
              <see langword="true" /> if the type is a class or reference type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnum">
      <MemberSignature Language="C#" Value="public bool IsEnum { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnum" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.IsEnum" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnum As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnum { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsEnum : bool with get, set" Usage="System.CodeDom.CodeTypeDeclaration.IsEnum" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ad980-129">Obtém ou define um valor que indica se o tipo é uma enumeração.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad980-129">Gets or sets a value indicating whether the type is an enumeration.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ad980-130">
            <see langword="true" /> Se o tipo é uma enumeração; Caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad980-130">
              <see langword="true" /> if the type is an enumeration; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInterface">
      <MemberSignature Language="C#" Value="public bool IsInterface { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInterface" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.IsInterface" />
      <MemberSignature Language="VB.NET" Value="Public Property IsInterface As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInterface { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsInterface : bool with get, set" Usage="System.CodeDom.CodeTypeDeclaration.IsInterface" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ad980-131">Obtém ou define um valor que indica se o tipo é uma interface.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad980-131">Gets or sets a value indicating whether the type is an interface.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ad980-132">
            <see langword="true" /> Se o tipo é uma interface; Caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad980-132">
              <see langword="true" /> if the type is an interface; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPartial">
      <MemberSignature Language="C#" Value="public bool IsPartial { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPartial" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.IsPartial" />
      <MemberSignature Language="VB.NET" Value="Public Property IsPartial As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPartial { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsPartial : bool with get, set" Usage="System.CodeDom.CodeTypeDeclaration.IsPartial" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ad980-133">Obtém ou define um valor que indica se a declaração de tipo é completa ou parcial.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad980-133">Gets or sets a value indicating whether the type declaration is complete or partial.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ad980-134">
            <see langword="true" /> Se a declaração de classe ou estrutura é uma representação parcial da implementação; <see langword="false" /> se a declaração é uma implementação completa da classe ou estrutura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad980-134">
              <see langword="true" /> if the class or structure declaration is a partial representation of the implementation; <see langword="false" /> if the declaration is a complete implementation of the class or structure.</span>
          </span>
          <span data-ttu-id="ad980-135">O padrão é <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad980-135">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad980-136">Você pode criar uma implementação de classe ou estrutura em uma declaração completa ou distribuir a implementação entre várias declarações.</span><span class="sxs-lookup"><span data-stu-id="ad980-136">You can build a class or structure implementation in one complete declaration, or spread the implementation across multiple declarations.</span></span> <span data-ttu-id="ad980-137">As implementações normalmente são fornecidas na declaração de um tipo completo.</span><span class="sxs-lookup"><span data-stu-id="ad980-137">Implementations are commonly supplied in one complete type declaration.</span></span> <span data-ttu-id="ad980-138">Nesse caso, defina o tipo de declaração <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> propriedade para `false`, que indica que o tipo de declaração representa todos os detalhes para a implementação de classe ou estrutura.</span><span class="sxs-lookup"><span data-stu-id="ad980-138">In this case, set the type declaration <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> property to `false`, which indicates that the type declaration represents all details for the class or structure implementation.</span></span>  
  
 <span data-ttu-id="ad980-139">Uma declaração de tipo parcial torna mais fácil criar diferentes partes de uma implementação de classe ou estrutura em módulos diferentes do seu aplicativo.</span><span class="sxs-lookup"><span data-stu-id="ad980-139">A partial type declaration makes it easier to build different portions of a class or structure implementation in different modules of your application.</span></span> <span data-ttu-id="ad980-140">As declarações de tipo parcial podem ser armazenadas em um arquivo de origem, ou distribuídas em vários arquivos de origem que eventualmente são compilados juntos para formar a implementação do tipo combinado.</span><span class="sxs-lookup"><span data-stu-id="ad980-140">The partial type declarations can be stored in one source file, or spread across multiple source files that are eventually compiled together to form the combined type implementation.</span></span>  
  
 <span data-ttu-id="ad980-141">A linguagem c# é compatível com declarações de tipo parcial de classes e estruturas por meio de `partial` palavra-chave.</span><span class="sxs-lookup"><span data-stu-id="ad980-141">The C# language supports partial type declarations of classes and structures through the `partial` keyword.</span></span> <span data-ttu-id="ad980-142">Visual Basic é compatível com declarações de tipo parcial de classes e estruturas com o `Partial` palavra-chave.</span><span class="sxs-lookup"><span data-stu-id="ad980-142">Visual Basic supports partial type declarations of classes and structures with the `Partial` keyword.</span></span> <span data-ttu-id="ad980-143">Nem todos os geradores de código dão suporte a declarações de tipo parcial, portanto, você deve testar esse suporte por meio da chamada a <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> método com o sinalizador <xref:System.CodeDom.Compiler.GeneratorSupport.PartialTypes>.</span><span class="sxs-lookup"><span data-stu-id="ad980-143">Not all code generators support partial type declarations, so you should test for this support by calling the <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> method with the flag <xref:System.CodeDom.Compiler.GeneratorSupport.PartialTypes>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ad980-144">Declarações de tipo parcial têm suporte para classes e estruturas.</span><span class="sxs-lookup"><span data-stu-id="ad980-144">Partial type declarations are supported for classes and structures.</span></span> <span data-ttu-id="ad980-145">Se você especificar uma declaração de tipo parcial para uma interface ou enumeração, o código gerado produz erros do compilador.</span><span class="sxs-lookup"><span data-stu-id="ad980-145">If you specify a partial type declaration for an enumeration or interface, the generated code produces compiler errors.</span></span>  
  
 <span data-ttu-id="ad980-146">Ao fornecer uma implementação de classe ou estrutura entre várias declarações, defina as <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> propriedade para `true` para a declaração inicial e todas as declarações complementares.</span><span class="sxs-lookup"><span data-stu-id="ad980-146">When supplying a class or structure implementation across multiple declarations, set the <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> property to `true` for the initial declaration and all supplemental declarations.</span></span> <span data-ttu-id="ad980-147">A declaração inicial deve especificar completamente o tipo de assinatura, incluindo modificadores de acesso, herdados de tipos e interfaces implementadas.</span><span class="sxs-lookup"><span data-stu-id="ad980-147">The initial declaration must fully specify the type signature, including access modifiers, inherited types, and implemented interfaces.</span></span> <span data-ttu-id="ad980-148">As declarações de suplementares é preciso especificar novamente a assinatura de tipo.</span><span class="sxs-lookup"><span data-stu-id="ad980-148">The supplementary declarations do not need to re-specify the type signature.</span></span> <span data-ttu-id="ad980-149">Normalmente, um erro do compilador resulta se você redefinir a assinatura de tipo em uma declaração de suplementar.</span><span class="sxs-lookup"><span data-stu-id="ad980-149">A compiler error typically results if you redefine the type signature in a supplementary declaration.</span></span>  
  
 <span data-ttu-id="ad980-150">Visual Studio 2005 usa tipos parciais para separar o código gerado pelo usuário do código do designer.</span><span class="sxs-lookup"><span data-stu-id="ad980-150">Visual Studio 2005 uses partial types to separate user-generated code from designer code.</span></span> <span data-ttu-id="ad980-151">Em projetos de aplicativo do Windows Visual Basic, o código do usuário é colocado em uma classe parcial que não está qualificada pelo `Partial` palavra-chave; o designer fornecido pelo código aparece na classe parcial que tem o `Partial` palavra-chave.</span><span class="sxs-lookup"><span data-stu-id="ad980-151">In Visual Basic Windows Application projects, the user code is placed in a partial class that is not qualified by the `Partial` keyword; the designer-provided code appears in the partial class that has the `Partial` keyword.</span></span> <span data-ttu-id="ad980-152">No c#, o código do usuário e o código do designer são exibidos em classes parciais, identificadas pelo `partial` palavra-chave.</span><span class="sxs-lookup"><span data-stu-id="ad980-152">In C#, both the user code and designer code appear in partial classes identified by the `partial` keyword.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad980-153">Este exemplo demonstra como usar um <xref:System.CodeDom.CodeTypeDeclaration> para fornecer uma implementação de classe entre várias declarações.</span><span class="sxs-lookup"><span data-stu-id="ad980-153">This example demonstrates using a <xref:System.CodeDom.CodeTypeDeclaration> to supply a class implementation across multiple declarations.</span></span> <span data-ttu-id="ad980-154">O exemplo compila a instrução de declaração de classe inicial e define o <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> propriedade para `true`.</span><span class="sxs-lookup"><span data-stu-id="ad980-154">The example builds the initial class declaration statement and sets the <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> property to `true`.</span></span>  
  
 [!code-cpp[CodeDomPartialTypeExample#3](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDomPartialTypeExample/CPP/source.cpp#3)]
 [!code-csharp[CodeDomPartialTypeExample#3](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDomPartialTypeExample/CS/source.cs#3)]
 [!code-vb[CodeDomPartialTypeExample#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomPartialTypeExample/VB/source.vb#3)]  
  
 <span data-ttu-id="ad980-155">Um método diferente no exemplo estende a implementação da classe.</span><span class="sxs-lookup"><span data-stu-id="ad980-155">A different method in the example extends the class implementation.</span></span> <span data-ttu-id="ad980-156">Esse método cria uma nova instrução de declaração de tipo para a classe existente e conjuntos de <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> propriedade para `true`.</span><span class="sxs-lookup"><span data-stu-id="ad980-156">This method builds a new type declaration statement for the existing class and sets the <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> property to `true`.</span></span> <span data-ttu-id="ad980-157">O compilador combina as duas declarações de tipo parcial em conjunto para a implementação de classe completo.</span><span class="sxs-lookup"><span data-stu-id="ad980-157">The compiler combines the two partial type declarations together for the complete class implementation.</span></span>  
  
 [!code-cpp[CodeDomPartialTypeExample#7](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDomPartialTypeExample/CPP/source.cpp#7)]
 [!code-csharp[CodeDomPartialTypeExample#7](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDomPartialTypeExample/CS/source.cs#7)]
 [!code-vb[CodeDomPartialTypeExample#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomPartialTypeExample/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.CodeDom.Compiler.GeneratorSupport.PartialTypes" />
      </Docs>
    </Member>
    <Member MemberName="IsStruct">
      <MemberSignature Language="C#" Value="public bool IsStruct { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStruct" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.IsStruct" />
      <MemberSignature Language="VB.NET" Value="Public Property IsStruct As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStruct { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsStruct : bool with get, set" Usage="System.CodeDom.CodeTypeDeclaration.IsStruct" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ad980-158">Obtém ou define um valor que indica se o tipo é um tipo de valor (struct).</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad980-158">Gets or sets a value indicating whether the type is a value type (struct).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ad980-159">
            <see langword="true" /> se o tipo é um tipo de valor; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad980-159">
              <see langword="true" /> if the type is a value type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Members">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeMemberCollection Members { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeTypeMemberCollection Members" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.Members" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Members As CodeTypeMemberCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeTypeMemberCollection ^ Members { System::CodeDom::CodeTypeMemberCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Members : System.CodeDom.CodeTypeMemberCollection" Usage="System.CodeDom.CodeTypeDeclaration.Members" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeMemberCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ad980-160">Obtém a coleção de membros de classe para o tipo representado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad980-160">Gets the collection of class members for the represented type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ad980-161">Um <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> objeto que indica os membros da classe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad980-161">A <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> object that indicates the class members.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeTypeMemberCollection" />
      </Docs>
    </Member>
    <Member MemberName="PopulateBaseTypes">
      <MemberSignature Language="C#" Value="public event EventHandler PopulateBaseTypes;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PopulateBaseTypes" />
      <MemberSignature Language="DocId" Value="E:System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PopulateBaseTypes As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ PopulateBaseTypes;" />
      <MemberSignature Language="F#" Value="member this.PopulateBaseTypes : EventHandler " Usage="member this.PopulateBaseTypes : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ad980-162">Ocorre quando a coleção <see cref="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" /> é acessada pela primeira vez.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad980-162">Occurs when the <see cref="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" /> collection is accessed for the first time.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PopulateMembers">
      <MemberSignature Language="C#" Value="public event EventHandler PopulateMembers;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PopulateMembers" />
      <MemberSignature Language="DocId" Value="E:System.CodeDom.CodeTypeDeclaration.PopulateMembers" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PopulateMembers As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ PopulateMembers;" />
      <MemberSignature Language="F#" Value="member this.PopulateMembers : EventHandler " Usage="member this.PopulateMembers : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ad980-163">Ocorre quando a coleção <see cref="P:System.CodeDom.CodeTypeDeclaration.Members" /> é acessada pela primeira vez.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad980-163">Occurs when the <see cref="P:System.CodeDom.CodeTypeDeclaration.Members" /> collection is accessed for the first time.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeAttributes">
      <MemberSignature Language="C#" Value="public System.Reflection.TypeAttributes TypeAttributes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.TypeAttributes TypeAttributes" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Property TypeAttributes As TypeAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::TypeAttributes TypeAttributes { System::Reflection::TypeAttributes get(); void set(System::Reflection::TypeAttributes value); };" />
      <MemberSignature Language="F#" Value="member this.TypeAttributes : System.Reflection.TypeAttributes with get, set" Usage="System.CodeDom.CodeTypeDeclaration.TypeAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ad980-164">Obtém ou define os atributos do tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad980-164">Gets or sets the attributes of the type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ad980-165">Um objeto <see cref="T:System.Reflection.TypeAttributes" /> que indica os atributos do tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad980-165">A <see cref="T:System.Reflection.TypeAttributes" /> object that indicates the attributes of the type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad980-166">O <xref:System.Reflection.TypeAttributes> propriedade contém o mesmo tipo de valores usados pelo <xref:System.Reflection> ao investigar um tipo em tempo de execução.</span><span class="sxs-lookup"><span data-stu-id="ad980-166">The <xref:System.Reflection.TypeAttributes> property contains the same type of values used by <xref:System.Reflection> when investigating a type at run time.</span></span> <span data-ttu-id="ad980-167">Muitos desses sinalizadores não correspondem a sintaxe de declaração de tipo para alguns idiomas.</span><span class="sxs-lookup"><span data-stu-id="ad980-167">Many of these flags do not correspond to the type declaration syntax for some languages.</span></span> <span data-ttu-id="ad980-168">Como resultado, apenas os sinalizadores a seguir são significativos para <xref:System.CodeDom.CodeTypeDeclaration> : <xref:System.Reflection.TypeAttributes.Class>, <xref:System.Reflection.TypeAttributes.Interface>, <xref:System.Reflection.TypeAttributes.Abstract>, <xref:System.Reflection.TypeAttributes.Sealed>, <xref:System.Reflection.TypeAttributes.Public>, <xref:System.Reflection.TypeAttributes.NotPublic>, <xref:System.Reflection.TypeAttributes.NestedPublic>, e <xref:System.Reflection.TypeAttributes.NestedPrivate>.</span><span class="sxs-lookup"><span data-stu-id="ad980-168">As a result, only the following flags are significant to <xref:System.CodeDom.CodeTypeDeclaration> : <xref:System.Reflection.TypeAttributes.Class>, <xref:System.Reflection.TypeAttributes.Interface>, <xref:System.Reflection.TypeAttributes.Abstract>, <xref:System.Reflection.TypeAttributes.Sealed>, <xref:System.Reflection.TypeAttributes.Public>, <xref:System.Reflection.TypeAttributes.NotPublic>, <xref:System.Reflection.TypeAttributes.NestedPublic>, and <xref:System.Reflection.TypeAttributes.NestedPrivate>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ad980-169">Alguns dos sinalizadores, como <xref:System.Reflection.TypeAttributes.Abstract> sobrepor o significado dos sinalizadores em de <xref:System.CodeDom.CodeTypeMember.Attributes%2A> propriedade de <xref:System.CodeDom.CodeTypeDeclaration> que é herdada do <xref:System.CodeDom.CodeTypeMember>.</span><span class="sxs-lookup"><span data-stu-id="ad980-169">Some of the flags such as <xref:System.Reflection.TypeAttributes.Abstract> overlap with the meaning of flags in the <xref:System.CodeDom.CodeTypeMember.Attributes%2A> property of <xref:System.CodeDom.CodeTypeDeclaration> that is inherited from <xref:System.CodeDom.CodeTypeMember>.</span></span> <span data-ttu-id="ad980-170">O <xref:System.CodeDom.CodeTypeMember.Attributes%2A> propriedade é um efeito colateral o <xref:System.CodeDom.CodeTypeDeclaration> classe herdeira de <xref:System.CodeDom.CodeTypeMember> , de modo que as classes podem ser aninhadas.</span><span class="sxs-lookup"><span data-stu-id="ad980-170">The <xref:System.CodeDom.CodeTypeMember.Attributes%2A> property is a side effect of the <xref:System.CodeDom.CodeTypeDeclaration> class inheriting from <xref:System.CodeDom.CodeTypeMember> so that classes can be nested.</span></span> <span data-ttu-id="ad980-171">Os sinalizadores na <xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A> propriedade deve ser usada em vez dos sinalizadores no <xref:System.CodeDom.CodeTypeMember.Attributes%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="ad980-171">The flags in the <xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A> property should be used instead of the flags in the <xref:System.CodeDom.CodeTypeMember.Attributes%2A> property.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ad980-172">O padrão para definir os sinalizadores de visibilidade (sinalizadores que contêm as palavras `Public` ou `Nested`) é para mascarar a visibilidade de todos os sinalizadores de usando o <xref:System.Reflection.TypeAttributes.VisibilityMask> e, em seguida, defina o sinalizador de visibilidade desejado.</span><span class="sxs-lookup"><span data-stu-id="ad980-172">The pattern for setting the visibility flags (flags containing the words `Public` or `Nested`) is to mask out all visibility flags using the <xref:System.Reflection.TypeAttributes.VisibilityMask> and then set the desired visibility flag.</span></span> <span data-ttu-id="ad980-173">Por exemplo, a código instrução c# para identificar o <xref:System.CodeDom.CodeTypeDeclaration> (chamado `cd`) como uma classe interna é `cd.TypeAttributes = (cd.TypeAttributes & ~TypeAttributes.VisibilityMask) | TypeAttributes.NotPublic;`.</span><span class="sxs-lookup"><span data-stu-id="ad980-173">For example, the C# code statement to identify the <xref:System.CodeDom.CodeTypeDeclaration> (named `cd`) as an internal class is `cd.TypeAttributes = (cd.TypeAttributes & ~TypeAttributes.VisibilityMask) | TypeAttributes.NotPublic;`.</span></span>  <span data-ttu-id="ad980-174">O código para definir o mesmo valor no Visual Basic é `cd.TypeAttributes = (cd.TypeAttributes And (TypeAttributes.VisibilityMask Xor -1)) Or TypeAttributes.NotPublic`.</span><span class="sxs-lookup"><span data-stu-id="ad980-174">The code to set the same value in Visual Basic is `cd.TypeAttributes = (cd.TypeAttributes And (TypeAttributes.VisibilityMask Xor -1)) Or TypeAttributes.NotPublic`.</span></span> <span data-ttu-id="ad980-175">Definindo o <xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A> propriedade diretamente como um sinalizador de visibilidade (`cd.TypeAttributes = TypeAttributes.NotPublic;`) apaga todos os outros sinalizadores que podem ser definidos.</span><span class="sxs-lookup"><span data-stu-id="ad980-175">Setting the <xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A> property directly to a visibility flag (`cd.TypeAttributes = TypeAttributes.NotPublic;`) erases all other flags that might be set.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="TypeParameters">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeParameterCollection TypeParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeTypeParameterCollection TypeParameters" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.TypeParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeParameters As CodeTypeParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeTypeParameterCollection ^ TypeParameters { System::CodeDom::CodeTypeParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeParameters : System.CodeDom.CodeTypeParameterCollection" Usage="System.CodeDom.CodeTypeDeclaration.TypeParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ad980-176">Obtém os parâmetros de tipo para a declaração de tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad980-176">Gets the type parameters for the type declaration.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ad980-177">Um <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> que contém os parâmetros de tipo para o tipo de declaração.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad980-177">A <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> that contains the type parameters for the type declaration.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad980-178">Uma declaração de tipo genérico contém um ou mais tipos conhecidos como parâmetros de tipo não for especificado.</span><span class="sxs-lookup"><span data-stu-id="ad980-178">A generic type declaration contains one or more unspecified types known as type parameters.</span></span> <span data-ttu-id="ad980-179">Um nome de parâmetro de tipo representa o tipo dentro do corpo da declaração genérica.</span><span class="sxs-lookup"><span data-stu-id="ad980-179">A type parameter name stands for the type within the body of the generic declaration.</span></span> <span data-ttu-id="ad980-180">Por exemplo, a declaração genérica para o <xref:System.Collections.Generic.List%601> classe contém o parâmetro de tipo `T`.</span><span class="sxs-lookup"><span data-stu-id="ad980-180">For example, the generic declaration for the <xref:System.Collections.Generic.List%601> class contains the type parameter `T`.</span></span>  
  
 <span data-ttu-id="ad980-181">Para obter mais informações sobre os genéricos, consulte [genéricos na biblioteca de classes .NET Framework](~/docs/csharp/programming-guide/generics/generics-in-the-net-framework-class-library.md).</span><span class="sxs-lookup"><span data-stu-id="ad980-181">For more information on generics, see [Generics in the .NET Framework Class Library](~/docs/csharp/programming-guide/generics/generics-in-the-net-framework-class-library.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.CodeTypeParameterCollection" />
        <altmember cref="T:System.CodeDom.CodeTypeParameter" />
      </Docs>
    </Member>
  </Members>
</Type>