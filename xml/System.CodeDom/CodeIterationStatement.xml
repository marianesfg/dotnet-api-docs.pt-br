<Type Name="CodeIterationStatement" FullName="System.CodeDom.CodeIterationStatement">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d6f18095836a43af0c77b3c67029d9a4ecafe787" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36714359" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CodeIterationStatement : System.CodeDom.CodeStatement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CodeIterationStatement extends System.CodeDom.CodeStatement" />
  <TypeSignature Language="DocId" Value="T:System.CodeDom.CodeIterationStatement" />
  <TypeSignature Language="VB.NET" Value="Public Class CodeIterationStatement&#xA;Inherits CodeStatement" />
  <TypeSignature Language="C++ CLI" Value="public ref class CodeIterationStatement : System::CodeDom::CodeStatement" />
  <TypeSignature Language="F#" Value="type CodeIterationStatement = class&#xA;    inherit CodeStatement" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.CodeDom</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.CodeDom.CodeStatement</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="0c370-101">Representa uma instrução <see langword="for" /> ou um loop em um bloco de instruções, usando uma expressão de teste como uma condição para continuar executando o loop.</span>
      <span class="sxs-lookup">
        <span data-stu-id="0c370-101">Represents a <see langword="for" /> statement, or a loop through a block of statements, using a test expression as a condition for continuing to loop.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c370-102">Um <xref:System.CodeDom.CodeIterationStatement> pode representar um `for` loop ou `while` loop.</span><span class="sxs-lookup"><span data-stu-id="0c370-102">A <xref:System.CodeDom.CodeIterationStatement> can represent a `for` loop or `while` loop.</span></span>  
  
 <span data-ttu-id="0c370-103">O <xref:System.CodeDom.CodeIterationStatement.InitStatement%2A> propriedade especifica a instrução a ser executada antes da primeira iteração do loop.</span><span class="sxs-lookup"><span data-stu-id="0c370-103">The <xref:System.CodeDom.CodeIterationStatement.InitStatement%2A> property specifies the statement to execute before the first loop iteration.</span></span> <span data-ttu-id="0c370-104">O <xref:System.CodeDom.CodeIterationStatement.TestExpression%2A> propriedade especifica a expressão de continuação do loop, que deve ser avaliada como `true` no final de cada iteração do loop para outra iteração começar.</span><span class="sxs-lookup"><span data-stu-id="0c370-104">The <xref:System.CodeDom.CodeIterationStatement.TestExpression%2A> property specifies the loop continuation expression, which must evaluate to `true` at the end of each loop iteration for another iteration to begin.</span></span> <span data-ttu-id="0c370-105">O <xref:System.CodeDom.CodeIterationStatement.IncrementStatement%2A> propriedade especifica a instrução a ser executada no final de cada iteração do loop.</span><span class="sxs-lookup"><span data-stu-id="0c370-105">The <xref:System.CodeDom.CodeIterationStatement.IncrementStatement%2A> property specifies the statement to execute at the end of each loop iteration.</span></span> <span data-ttu-id="0c370-106">O <xref:System.CodeDom.CodeIterationStatement.Statements%2A> propriedade especifica a coleção de instruções a serem executadas dentro do loop.</span><span class="sxs-lookup"><span data-stu-id="0c370-106">The <xref:System.CodeDom.CodeIterationStatement.Statements%2A> property specifies the collection of statements to execute within the loop.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c370-107">Este exemplo demonstra como usar um <xref:System.CodeDom.CodeIterationStatement> representar um `for` loop.</span><span class="sxs-lookup"><span data-stu-id="0c370-107">This example demonstrates using a <xref:System.CodeDom.CodeIterationStatement> to represent a `for` loop.</span></span>  
  
 [!code-cpp[CodeIterationStatementExample#2](~/samples/snippets/cpp/VS_Snippets_CLR/CodeIterationStatementExample/CPP/codeiterationstatementexample.cpp#2)]
 [!code-csharp[CodeIterationStatementExample#2](~/samples/snippets/csharp/VS_Snippets_CLR/CodeIterationStatementExample/CS/codeiterationstatementexample.cs#2)]
 [!code-vb[CodeIterationStatementExample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeIterationStatementExample/VB/codeiterationstatementexample.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0c370-108">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeIterationStatement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c370-108">Initializes a new instance of the <see cref="T:System.CodeDom.CodeIterationStatement" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeIterationStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeIterationStatement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeIterationStatement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="0c370-109">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeIterationStatement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c370-109">Initializes a new instance of the <see cref="T:System.CodeDom.CodeIterationStatement" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeIterationStatement (System.CodeDom.CodeStatement initStatement, System.CodeDom.CodeExpression testExpression, System.CodeDom.CodeStatement incrementStatement, params System.CodeDom.CodeStatement[] statements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.CodeDom.CodeStatement initStatement, class System.CodeDom.CodeExpression testExpression, class System.CodeDom.CodeStatement incrementStatement, class System.CodeDom.CodeStatement[] statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeIterationStatement.#ctor(System.CodeDom.CodeStatement,System.CodeDom.CodeExpression,System.CodeDom.CodeStatement,System.CodeDom.CodeStatement[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initStatement As CodeStatement, testExpression As CodeExpression, incrementStatement As CodeStatement, ParamArray statements As CodeStatement())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeIterationStatement(System::CodeDom::CodeStatement ^ initStatement, System::CodeDom::CodeExpression ^ testExpression, System::CodeDom::CodeStatement ^ incrementStatement, ... cli::array &lt;System::CodeDom::CodeStatement ^&gt; ^ statements);" />
      <MemberSignature Language="F#" Value="new System.CodeDom.CodeIterationStatement : System.CodeDom.CodeStatement * System.CodeDom.CodeExpression * System.CodeDom.CodeStatement * System.CodeDom.CodeStatement[] -&gt; System.CodeDom.CodeIterationStatement" Usage="new System.CodeDom.CodeIterationStatement (initStatement, testExpression, incrementStatement, statements)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initStatement" Type="System.CodeDom.CodeStatement" />
        <Parameter Name="testExpression" Type="System.CodeDom.CodeExpression" />
        <Parameter Name="incrementStatement" Type="System.CodeDom.CodeStatement" />
        <Parameter Name="statements" Type="System.CodeDom.CodeStatement[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="initStatement">
          <span data-ttu-id="0c370-110">Um <see cref="T:System.CodeDom.CodeStatement" /> que contém a instrução de inicialização de loop.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c370-110">A <see cref="T:System.CodeDom.CodeStatement" /> containing the loop initialization statement.</span>
          </span>
        </param>
        <param name="testExpression">
          <span data-ttu-id="0c370-111">Um <see cref="T:System.CodeDom.CodeExpression" /> que contém a expressão para testar quanto à condição de saída.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c370-111">A <see cref="T:System.CodeDom.CodeExpression" /> containing the expression to test for exit condition.</span>
          </span>
        </param>
        <param name="incrementStatement">
          <span data-ttu-id="0c370-112">Um <see cref="T:System.CodeDom.CodeStatement" /> que contém a instrução de incremento por ciclo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c370-112">A <see cref="T:System.CodeDom.CodeStatement" /> containing the per-cycle increment statement.</span>
          </span>
        </param>
        <param name="statements">
          <span data-ttu-id="0c370-113">Uma matriz do tipo <see cref="T:System.CodeDom.CodeStatement" /> contendo as instruções dentro do loop.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c370-113">An array of type <see cref="T:System.CodeDom.CodeStatement" /> containing the statements within the loop.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c370-114">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeIterationStatement" /> usando os parâmetros especificados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c370-114">Initializes a new instance of the <see cref="T:System.CodeDom.CodeIterationStatement" /> class using the specified parameters.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeStatement" />
        <altmember cref="T:System.CodeDom.CodeExpression" />
      </Docs>
    </Member>
    <Member MemberName="IncrementStatement">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeStatement IncrementStatement { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeStatement IncrementStatement" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeIterationStatement.IncrementStatement" />
      <MemberSignature Language="VB.NET" Value="Public Property IncrementStatement As CodeStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeStatement ^ IncrementStatement { System::CodeDom::CodeStatement ^ get(); void set(System::CodeDom::CodeStatement ^ value); };" />
      <MemberSignature Language="F#" Value="member this.IncrementStatement : System.CodeDom.CodeStatement with get, set" Usage="System.CodeDom.CodeIterationStatement.IncrementStatement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeStatement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0c370-115">Obtém ou define a instrução que é chamada após cada ciclo de loop.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c370-115">Gets or sets the statement that is called after each loop cycle.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0c370-116">Um <see cref="T:System.CodeDom.CodeStatement" /> que indica o por instrução de incremento de ciclo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c370-116">A <see cref="T:System.CodeDom.CodeStatement" /> that indicates the per cycle increment statement.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c370-117">Essa instrução é chamada após cada iteração.</span><span class="sxs-lookup"><span data-stu-id="0c370-117">This statement is called after each iteration.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.CodeStatement" />
      </Docs>
    </Member>
    <Member MemberName="InitStatement">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeStatement InitStatement { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeStatement InitStatement" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeIterationStatement.InitStatement" />
      <MemberSignature Language="VB.NET" Value="Public Property InitStatement As CodeStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeStatement ^ InitStatement { System::CodeDom::CodeStatement ^ get(); void set(System::CodeDom::CodeStatement ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InitStatement : System.CodeDom.CodeStatement with get, set" Usage="System.CodeDom.CodeIterationStatement.InitStatement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeStatement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0c370-118">Obtém ou define a instrução de inicialização de loop.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c370-118">Gets or sets the loop initialization statement.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0c370-119">Um <see cref="T:System.CodeDom.CodeStatement" /> que indica a instrução de inicialização de loop.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c370-119">A <see cref="T:System.CodeDom.CodeStatement" /> that indicates the loop initialization statement.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c370-120">Você pode especificar uma instrução vazia inicialização definindo essa propriedade como um <xref:System.CodeDom.CodeExpressionStatement> que contém um <xref:System.CodeDom.CodeSnippetExpression> que contém uma cadeia de caracteres vazia.</span><span class="sxs-lookup"><span data-stu-id="0c370-120">You can specify an empty initialization statement by setting this property to a <xref:System.CodeDom.CodeExpressionStatement> that contains a <xref:System.CodeDom.CodeSnippetExpression> that contains an empty string.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Statements">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeStatementCollection Statements { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeStatementCollection Statements" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeIterationStatement.Statements" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Statements As CodeStatementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeStatementCollection ^ Statements { System::CodeDom::CodeStatementCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Statements : System.CodeDom.CodeStatementCollection" Usage="System.CodeDom.CodeIterationStatement.Statements" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeStatementCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0c370-121">Obtém a coleção de instruções a serem executadas dentro do loop.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c370-121">Gets the collection of statements to be executed within the loop.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0c370-122">Uma matriz do tipo <see cref="T:System.CodeDom.CodeStatement" /> que indica as instruções dentro do loop.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c370-122">An array of type <see cref="T:System.CodeDom.CodeStatement" /> that indicates the statements within the loop.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeStatement" />
      </Docs>
    </Member>
    <Member MemberName="TestExpression">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeExpression TestExpression { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeExpression TestExpression" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeIterationStatement.TestExpression" />
      <MemberSignature Language="VB.NET" Value="Public Property TestExpression As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeExpression ^ TestExpression { System::CodeDom::CodeExpression ^ get(); void set(System::CodeDom::CodeExpression ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TestExpression : System.CodeDom.CodeExpression with get, set" Usage="System.CodeDom.CodeIterationStatement.TestExpression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0c370-123">Obtém ou define a expressão para testar como a condição que continua o loop.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c370-123">Gets or sets the expression to test as the condition that continues the loop.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0c370-124">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica a expressão de teste.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c370-124">A <see cref="T:System.CodeDom.CodeExpression" /> that indicates the expression to test.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c370-125">Se essa expressão é resolvida como `true`, o loop continuará.</span><span class="sxs-lookup"><span data-stu-id="0c370-125">If this expression resolves to `true`, the loop will continue.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.CodeExpression" />
      </Docs>
    </Member>
  </Members>
</Type>