<Type Name="HttpListenerElement" FullName="System.Net.Configuration.HttpListenerElement">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9334fa00cbf6f8bf999f13851ac60b53ce6a5fd5" /><Meta Name="ms.sourcegitcommit" Value="b0551d7828f015124aca601dbb64bd913cc5067d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="12/13/2018" /><Meta Name="ms.locfileid" Value="53331210" /></Metadata><TypeSignature Language="C#" Value="public sealed class HttpListenerElement : System.Configuration.ConfigurationElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed HttpListenerElement extends System.Configuration.ConfigurationElement" />
  <TypeSignature Language="DocId" Value="T:System.Net.Configuration.HttpListenerElement" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HttpListenerElement&#xA;Inherits ConfigurationElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpListenerElement sealed : System::Configuration::ConfigurationElement" />
  <TypeSignature Language="F#" Value="type HttpListenerElement = class&#xA;    inherit ConfigurationElement" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.ConfigurationElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Representa o elemento HttpListener no arquivo de configuração. Essa classe não pode ser herdada.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta classe corresponde à \<httpListener > elemento de configuração (configurações de rede). Essa classe fornece acesso programático a informações que podem ser armazenados em arquivos de configuração.  
  
 O <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A> propriedade indica se <xref:System.Net.HttpListener> usa o URI sem escape bruto em vez do URI convertido em que todos os valores codificados por porcentagem são convertidos e outras etapas de normalização são obtidas.  
  
 Quando um <xref:System.Net.HttpListener> instância recebe uma solicitação por meio de `http.sys` serviço, ele cria uma instância da cadeia de caracteres URI fornecida pelo `http.sys`e o expõe como o <xref:System.Net.HttpListenerRequest.Url%2A?displayProperty=nameWithType> propriedade.  
  
 O `http.sys` serviço expõe duas cadeias de caracteres URI de solicitação:  
  
-   URI bruto  
  
-   URI convertido  
  
 O URI bruto é o <xref:System.Uri?displayProperty=nameWithType> fornecido na linha de solicitação de uma solicitação HTTP:  
  
 `GET /path/`  
  
 `Host: www.contoso.com`  
  
 O URI bruto fornecido pelo `http.sys` para a solicitação mencionada acima, é "/ caminho /". Isso representa a cadeia de caracteres após o verbo HTTP, como ele foi enviado pela rede.  
  
 O `http.sys` serviço cria um URI convertido das informações fornecidas na solicitação usando o URI fornecido na linha da solicitação HTTP e o cabeçalho de Host para determinar o servidor de origem da solicitação deve ser encaminhado. Isso é feito comparando as informações da solicitação com um conjunto de prefixos URI registrados. A documentação do SDK do servidor HTTP se refere a esse URI convertido como o [HTTP_COOKED_URL](https://go.microsoft.com/fwlink/?LinkID=166108) estrutura.  
  
 Para poder comparar a solicitação com prefixos URI registrados, alguns normalização para a solicitação precisa ser feito. Para o exemplo acima do URI convertido seria da seguinte maneira:  
  
 `http://www.contoso.com/path/`  
  
 O `http.sys` serviço combina o <xref:System.Uri.Host%2A?displayProperty=nameWithType> valor da propriedade e a cadeia de caracteres na linha da solicitação para criar um URI convertido. Além disso, `http.sys` e o <xref:System.Uri?displayProperty=nameWithType> classe também faça o seguinte:  
  
-   Un-escapa o percentual de todos os valores codificados.  
  
-   Caracteres não ASCII de converte codificados por porcentagem em uma representação de caractere UTF-16. Observe que há suporte para caracteres UTF-8 e ANSI DBCS, bem como caracteres Unicode (codificação Unicode usando o formato de uXXXX %).  
  
-   Executa outras etapas de normalização, como a compactação de caminho.  
  
 Uma vez que a solicitação não contém todas as informações sobre a codificação usada para valores codificados por percentual, não é possível determinar a codificação correta apenas analisando os valores codificados por porcentagem.  
  
 Portanto `http.sys` fornece duas chaves de registro para modificar o processo:  
  
|Chave do Registro|Valor padrão|Descrição|  
|------------------|-------------------|-----------------|  
|EnableNonUTF8|1|Se for zero, `http.sys` aceita apenas as URLs codificado em UTF-8.<br /><br /> Se diferente de zero, `http.sys` também aceita codificado em ANSI ou DBCS codificado URLs nas solicitações.|  
|FavorUTF8|1|Se diferente de zero, `http.sys` sempre tentará decodificar uma URL como UTF-8 primeiro; se essa conversão falhar e EnableNonUTF8 for diferente de zero, o HTTP. sys e tenta decodificá-lo como ANSI ou DBCS.<br /><br /> Se for zero (e EnableNonUTF8 for diferente de zero), `http.sys` tenta decodificá-lo como ANSI ou DBCS; se isso não for bem-sucedida, ele tenta uma conversão de UTF-8.|  
  
 Quando <xref:System.Net.HttpListener> recebe uma solicitação, ele usa o URI convertido de `http.sys` como entrada para o <xref:System.Net.HttpListenerRequest.Url%2A> propriedade.  
  
 É necessário para dar suporte a caracteres além de caracteres e números em URIs. Um exemplo é o seguinte URI é usado para recuperar informações do cliente para cliente número "1/3812":  
  
 `http://www.contoso.com/Customer('1%2F3812')/`  
  
 Observe a barra codificados por porcentagem no Uri (% 2F). Isso é necessário, já que nesse caso, o caractere de barra "/" representa os dados e não um delimitador de caminho.  
  
 Passando a cadeia de caracteres para o construtor de Uri levará para o seguinte URI:  
  
 `http://www.contoso.com/Customer('1/3812')/`  
  
 Dividindo o caminho em seus segmentos resultaria nos seguintes elementos:  
  
 `Customer('1`  
  
 `3812')`  
  
 Isso não é a intenção do remetente da solicitação.  
  
 Se o <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A> estiver definida como false, em seguida, quando o <xref:System.Net.HttpListener> recebe uma solicitação, ele usa o URI bruto em vez do URI convertido da `http.sys` como entrada para o <xref:System.Net.HttpListenerRequest.Url%2A> propriedade.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Net.HttpListener" />
    <altmember cref="P:System.Net.HttpListenerRequest.Url" />
    <related type="Article" href="~/docs/framework/configure-apps/file-schema/network/index.md">Esquema de configurações de rede</related>
    <related type="Article" href="https://msdn.microsoft.com/library/62f121fd-3f2e-4033-bb39-48ae996bfbd9">&lt;httpListener&gt; (configurações de rede)</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpListenerElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Configuration.HttpListenerElement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpListenerElement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Net.Configuration.HttpListenerElement" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="protected override System.Configuration.ConfigurationPropertyCollection Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Configuration.ConfigurationPropertyCollection Properties" />
      <MemberSignature Language="DocId" Value="P:System.Net.Configuration.HttpListenerElement.Properties" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property Properties As ConfigurationPropertyCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Configuration::ConfigurationPropertyCollection ^ Properties { System::Configuration::ConfigurationPropertyCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Properties : System.Configuration.ConfigurationPropertyCollection" Usage="System.Net.Configuration.HttpListenerElement.Properties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Configuration.ConfigurationPropertyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Timeouts">
      <MemberSignature Language="C#" Value="public System.Net.Configuration.HttpListenerTimeoutsElement Timeouts { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Configuration.HttpListenerTimeoutsElement Timeouts" />
      <MemberSignature Language="DocId" Value="P:System.Net.Configuration.HttpListenerElement.Timeouts" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Timeouts As HttpListenerTimeoutsElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Configuration::HttpListenerTimeoutsElement ^ Timeouts { System::Net::Configuration::HttpListenerTimeoutsElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Timeouts : System.Net.Configuration.HttpListenerTimeoutsElement" Usage="System.Net.Configuration.HttpListenerElement.Timeouts" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Configuration.ConfigurationProperty("timeouts")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Configuration.HttpListenerTimeoutsElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém os elementos de tempo limite padrão usados para um objeto <see cref="T:System.Net.HttpListener" />.</summary>
        <value>Os elementos de tempo limite usados para um <see cref="T:System.Net.HttpListener" /> objeto.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerTimeoutManager" />
        <altmember cref="T:System.Net.Configuration.HttpListenerTimeoutsElement" />
      </Docs>
    </Member>
    <Member MemberName="UnescapeRequestUrl">
      <MemberSignature Language="C#" Value="public bool UnescapeRequestUrl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UnescapeRequestUrl" />
      <MemberSignature Language="DocId" Value="P:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UnescapeRequestUrl As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UnescapeRequestUrl { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.UnescapeRequestUrl : bool" Usage="System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Configuration.ConfigurationProperty("unescapeRequestUrl", DefaultValue=Mono.Cecil.CustomAttributeArgument, IsRequired=false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que indica se <see cref="T:System.Net.HttpListener" /> usa o URI sem escape bruto em vez do URI convertido.</summary>
        <value>Um valor booliano que indica se <see cref="T:System.Net.HttpListener" /> usa o URI sem escape bruto em vez do URI convertido.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A> propriedade indica se <xref:System.Net.HttpListener> usa o URI sem escape bruto em vez do URI convertido em que todos os valores codificados por porcentagem são convertidos e outras etapas de normalização são obtidas.  
  
 Quando um <xref:System.Net.HttpListener> instância recebe uma solicitação por meio de `http.sys` serviço, ele cria uma instância da cadeia de caracteres URI fornecida pelo `http.sys`e o expõe como o <xref:System.Net.HttpListenerRequest.Url%2A?displayProperty=nameWithType> propriedade.  
  
 O `http.sys` serviço expõe duas cadeias de caracteres URI de solicitação:  
  
-   URI bruto  
  
-   URI convertido  
  
 O URI bruto é o <xref:System.Uri?displayProperty=nameWithType> fornecido na linha de solicitação de uma solicitação HTTP:  
  
 `GET /path/`  
  
 `Host: www.contoso.com`  
  
 O URI bruto fornecido pelo `http.sys` para a solicitação mencionada acima, é "/ caminho /". Isso representa a cadeia de caracteres após o verbo HTTP, como ele foi enviado pela rede.  
  
 O `http.sys` serviço cria um URI convertido das informações fornecidas na solicitação usando o URI fornecido na linha da solicitação HTTP e o cabeçalho de Host para determinar o servidor de origem da solicitação deve ser encaminhado. Isso é feito comparando as informações da solicitação com um conjunto de prefixos URI registrados. A documentação do SDK do servidor HTTP se refere a esse URI convertido como o [HTTP_COOKED_URL](https://go.microsoft.com/fwlink/?LinkID=166108) estrutura.  
  
 Para poder comparar a solicitação com prefixos URI registrados, alguns normalização para a solicitação precisa ser feito. Para o exemplo acima do URI convertido seria da seguinte maneira:  
  
 `http://www.contoso.com/path/`  
  
 O `http.sys` serviço combina o <xref:System.Uri.Host%2A?displayProperty=nameWithType> valor da propriedade e a cadeia de caracteres na linha da solicitação para criar um URI convertido. Além disso, `http.sys` e o <xref:System.Uri?displayProperty=nameWithType> classe também faça o seguinte:  
  
-   Un-escapa o percentual de todos os valores codificados.  
  
-   Caracteres não ASCII de converte codificados por porcentagem em uma representação de caractere UTF-16. Observe que há suporte para caracteres UTF-8 e ANSI DBCS, bem como caracteres Unicode (codificação Unicode usando o formato de uXXXX %).  
  
-   Executa outras etapas de normalização, como a compactação de caminho.  
  
 Uma vez que a solicitação não contém todas as informações sobre a codificação usada para valores codificados por percentual, não é possível determinar a codificação correta apenas analisando os valores codificados por porcentagem.  
  
 Portanto `http.sys` fornece duas chaves de registro para modificar o processo:  
  
|Chave do Registro|Valor padrão|Descrição|  
|------------------|-------------------|-----------------|  
|EnableNonUTF8|1|Se for zero, `http.sys` aceita apenas as URLs codificado em UTF-8.<br /><br /> Se diferente de zero, `http.sys` também aceita codificado em ANSI ou DBCS codificado URLs nas solicitações.|  
|FavorUTF8|1|Se diferente de zero, `http.sys` sempre tentará decodificar uma URL como UTF-8 primeiro; se essa conversão falhar e EnableNonUTF8 for diferente de zero, o HTTP. sys e tenta decodificá-lo como ANSI ou DBCS.<br /><br /> Se for zero (e EnableNonUTF8 for diferente de zero), `http.sys` tenta decodificá-lo como ANSI ou DBCS; se isso não for bem-sucedida, ele tenta uma conversão de UTF-8.|  
  
 Quando <xref:System.Net.HttpListener> recebe uma solicitação, ele usa o URI convertido de `http.sys` como entrada para o <xref:System.Net.HttpListenerRequest.Url%2A> propriedade.  
  
 É necessário para dar suporte a caracteres além de caracteres e números em URIs. Um exemplo é o seguinte URI é usado para recuperar informações do cliente para cliente número "1/3812":  
  
 `http://www.contoso.com/Customer('1%2F3812')/`  
  
 Observe a barra codificados por porcentagem no Uri (% 2F). Isso é necessário, já que nesse caso, o caractere de barra "/" representa os dados e não um delimitador de caminho.  
  
 Passando a cadeia de caracteres para o construtor de Uri levará para o seguinte URI:  
  
 `http://www.contoso.com/Customer('1/3812')/`  
  
 Dividindo o caminho em seus segmentos resultaria nos seguintes elementos:  
  
 `Customer('1`  
  
 `3812')`  
  
 Isso não é a intenção do remetente da solicitação.  
  
 Se o <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A> estiver definida como false, em seguida, quando o <xref:System.Net.HttpListener> recebe uma solicitação, ele usa o URI bruto em vez do URI convertido da `http.sys` como entrada para o <xref:System.Net.HttpListenerRequest.Url%2A> propriedade.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="P:System.Net.HttpListenerRequest.Url" />
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/network/index.md">Esquema de configurações de rede</related>
        <related type="Article" href="https://msdn.microsoft.com/library/62f121fd-3f2e-4033-bb39-48ae996bfbd9">&lt;httpListener&gt; (configurações de rede)</related>
      </Docs>
    </Member>
  </Members>
</Type>