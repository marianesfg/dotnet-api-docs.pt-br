<Type Name="XDocument" FullName="System.Xml.Linq.XDocument">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="811c63ba3a9857cd16f108ae4d74df3d7f3d5847" />
    <Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="09/22/2018" />
    <Meta Name="ms.locfileid" Value="46628609" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XDocument : System.Xml.Linq.XContainer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XDocument extends System.Xml.Linq.XContainer" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Linq.XDocument" />
  <TypeSignature Language="VB.NET" Value="Public Class XDocument&#xA;Inherits XContainer" />
  <TypeSignature Language="C++ CLI" Value="public ref class XDocument : System::Xml::Linq::XContainer" />
  <TypeSignature Language="F#" Value="type XDocument = class&#xA;    inherit XContainer" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XDocument</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Linq</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xml.Linq.XContainer</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="edf68-101">Representa um documento XML.</span>
      <span class="sxs-lookup">
        <span data-stu-id="edf68-101">Represents an XML document.</span>
      </span>
      <span data-ttu-id="edf68-102">Para saber mais sobre os componentes e o uso de um objeto <see cref="T:System.Xml.Linq.XDocument" />, consulte <see href="http://msdn.microsoft.com/library/90f78331-1be8-42fb-93e7-bd1325826467">Visão geral da classe XDocument</see>.</span>
      <span class="sxs-lookup">
        <span data-stu-id="edf68-102">For the components and usage of an <see cref="T:System.Xml.Linq.XDocument" /> object, see <see href="http://msdn.microsoft.com/library/90f78331-1be8-42fb-93e7-bd1325826467">XDocument Class Overview</see>.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="edf68-103">Para obter detalhes sobre o conteúdo válido de um <xref:System.Xml.Linq.XDocument>, consulte [válido conteúdo de objetos XElement e XDocument](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="edf68-103">For details about the valid content of an <xref:System.Xml.Linq.XDocument>, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="edf68-104">O exemplo a seguir cria um documento e, em seguida, adiciona um comentário e um elemento a ela.</span><span class="sxs-lookup"><span data-stu-id="edf68-104">The following example creates a document, and then adds a comment and an element to it.</span></span> <span data-ttu-id="edf68-105">Ele compõe, em seguida, usar os resultados de uma consulta de outro documento.</span><span class="sxs-lookup"><span data-stu-id="edf68-105">It then composes another document using the results of a query.</span></span>  
  
```csharp  
XDocument srcTree = new XDocument(  
    new XComment("This is a comment"),  
    new XElement("Root",  
        new XElement("Child1", "data1"),  
        new XElement("Child2", "data2"),  
        new XElement("Child3", "data3"),  
        new XElement("Child2", "data4"),  
        new XElement("Info5", "info5"),  
        new XElement("Info6", "info6"),  
        new XElement("Info7", "info7"),  
        new XElement("Info8", "info8")  
    )  
);  
  
XDocument doc = new XDocument(  
    new XComment("This is a comment"),  
    new XElement("Root",  
        from el in srcTree.Element("Root").Elements()  
        where ((string)el).StartsWith("data")  
        select el  
    )  
);  
Console.WriteLine(doc);  
```  
  
```vb  
Dim srcTree As XDocument = _   
    <?xml version="1.0" encoding="utf-8" standalone="yes"?>  
        <!--This is a comment-->  
        <Root>  
            <Child1>data1</Child1>  
            <Child2>data2</Child2>  
            <Child3>data3</Child3>  
            <Child2>data4</Child2>  
            <Info5>info5</Info5>  
            <Info6>info6</Info6>  
            <Info7>info7</Info7>  
            <Info8>info8</Info8>  
        </Root>  
Dim doc As XDocument = _   
    <?xml version="1.0" encoding="utf-8" standalone="yes"?>  
        <!--This is a comment-->  
        <Root>  
            <%= From el In srcTree.<Root>.Elements _  
                Where CStr(el).StartsWith("data") _  
                Select el %>  
        </Root>  
Console.WriteLine(doc)  
```  
  
 <span data-ttu-id="edf68-106">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="edf68-106">This example produces the following output:</span></span>  
  
```xml  
<!--This is a comment-->  
<Root>  
  <Child1>data1</Child1>  
  <Child2>data2</Child2>  
  <Child3>data3</Child3>  
  <Child2>data4</Child2>  
</Root>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xml.Linq.XNamespace" />
    <altmember cref="T:System.Xml.Linq.XDeclaration" />
    <altmember cref="T:System.Xml.Linq.XElement" />
    <altmember cref="T:System.Xml.Linq.XNode" />
    <related type="Article" href="http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
      <span data-ttu-id="edf68-107">LINQ to XML</span>
      <span class="sxs-lookup">
        <span data-stu-id="edf68-107">LINQ to XML</span>
      </span>
    </related>
    <related type="Article" href="http://msdn.microsoft.com/library/90f78331-1be8-42fb-93e7-bd1325826467">
      <span data-ttu-id="edf68-108">Visão geral da classe XDocument</span>
      <span class="sxs-lookup">
        <span data-stu-id="edf68-108">XDocument Class Overview</span>
      </span>
    </related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="edf68-109">Inicializa uma nova instância da classe <see cref="T:System.Xml.Linq.XDocument" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-109">Initializes a new instance of the <see cref="T:System.Xml.Linq.XDocument" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="edf68-110">Construtores sobrecarregados que você possa criar um novo vazio <xref:System.Xml.Linq.XDocument>; para criar um <xref:System.Xml.Linq.XDocument> com algum conteúdo inicial especificado; e para criar um <xref:System.Xml.Linq.XDocument> como uma cópia de outro <xref:System.Xml.Linq.XDocument> objeto.</span><span class="sxs-lookup"><span data-stu-id="edf68-110">Overloaded constructors enable you to create a new empty <xref:System.Xml.Linq.XDocument>; to create an <xref:System.Xml.Linq.XDocument> with some specified initial content; and to create an <xref:System.Xml.Linq.XDocument> as a copy of another <xref:System.Xml.Linq.XDocument> object.</span></span>  
  
 <span data-ttu-id="edf68-111">Não há muitos cenários que exijam a criação de um <xref:System.Xml.Linq.XDocument>.</span><span class="sxs-lookup"><span data-stu-id="edf68-111">There are not many scenarios that require you to create an <xref:System.Xml.Linq.XDocument>.</span></span> <span data-ttu-id="edf68-112">Em vez disso, você normalmente pode criar suas árvores XML com um nó raiz de <xref:System.Xml.Linq.XElement>.</span><span class="sxs-lookup"><span data-stu-id="edf68-112">Instead, you can usually create your XML trees with an <xref:System.Xml.Linq.XElement> root node.</span></span> <span data-ttu-id="edf68-113">A menos que você tenha um requisito específico para criar um documento (por exemplo, porque você precisa criar instruções de processamento e comentários no nível superior ou precisa dar suporte a tipos de documento), geralmente é mais conveniente usar <xref:System.Xml.Linq.XElement> como o nó raiz.</span><span class="sxs-lookup"><span data-stu-id="edf68-113">Unless you have a specific requirement to create a document (for example, because you have to create processing instructions and comments at the top level, or you have to support document types), it is often more convenient to use <xref:System.Xml.Linq.XElement> as your root node.</span></span>  
  
 <span data-ttu-id="edf68-114">Para obter detalhes sobre o conteúdo válido de um <xref:System.Xml.Linq.XDocument>, consulte [válido conteúdo de objetos XElement e XDocument](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="edf68-114">For details about the valid content of an <xref:System.Xml.Linq.XDocument>, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="edf68-115">O exemplo a seguir cria um documento e, em seguida, adiciona um comentário e um elemento a ela.</span><span class="sxs-lookup"><span data-stu-id="edf68-115">The following example creates a document, and then adds a comment and an element to it.</span></span> <span data-ttu-id="edf68-116">Ele compõe, em seguida, usar os resultados de uma consulta de outro documento.</span><span class="sxs-lookup"><span data-stu-id="edf68-116">It then composes another document using the results of a query.</span></span>  
  
```csharp  
XDocument srcTree = new XDocument(  
    new XComment("This is a comment"),  
    new XElement("Root",  
        new XElement("Child1", "data1"),  
        new XElement("Child2", "data2"),  
        new XElement("Child3", "data3"),  
        new XElement("Child2", "data4"),  
        new XElement("Info5", "info5"),  
        new XElement("Info6", "info6"),  
        new XElement("Info7", "info7"),  
        new XElement("Info8", "info8")  
    )  
);  
  
XDocument doc = new XDocument(  
    new XComment("This is a comment"),  
    new XElement("Root",  
        from el in srcTree.Element("Root").Elements()  
        where ((string)el).StartsWith("data")  
        select el  
    )  
);  
Console.WriteLine(doc);  
```  
  
```vb  
Dim srcTree As XDocument = _   
    <?xml version="1.0" encoding="utf-8" standalone="yes"?>  
        <!--This is a comment-->  
        <Root>  
            <Child1>data1</Child1>  
            <Child2>data2</Child2>  
            <Child3>data3</Child3>  
            <Child2>data4</Child2>  
            <Info5>info5</Info5>  
            <Info6>info6</Info6>  
            <Info7>info7</Info7>  
            <Info8>info8</Info8>  
        </Root>  
Dim doc As XDocument = _   
    <?xml version="1.0" encoding="utf-8" standalone="yes"?>  
        <!--This is a comment-->  
        <Root>  
            <%= From el In srcTree.<Root>.Elements _  
                Where CStr(el).StartsWith("data") _  
                Select el %>  
        </Root>  
Console.WriteLine(doc)  
```  
  
 <span data-ttu-id="edf68-117">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="edf68-117">This example produces the following output:</span></span>  
  
```xml  
<!--This is a comment-->  
<Root>  
  <Child1>data1</Child1>  
  <Child2>data2</Child2>  
  <Child3>data3</Child3>  
  <Child2>data4</Child2>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <related type="Article" href="http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="edf68-118">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-118">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/90f78331-1be8-42fb-93e7-bd1325826467">
          <span data-ttu-id="edf68-119">Visão geral da classe XDocument</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-119">XDocument Class Overview</span>
          </span>
        </related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XDocument();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="edf68-120">Inicializa uma nova instância da classe <see cref="T:System.Xml.Linq.XDocument" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-120">Initializes a new instance of the <see cref="T:System.Xml.Linq.XDocument" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="edf68-121">Não há muitos cenários que exijam a criação de um <xref:System.Xml.Linq.XDocument>.</span><span class="sxs-lookup"><span data-stu-id="edf68-121">There are not many scenarios that require you to create an <xref:System.Xml.Linq.XDocument>.</span></span> <span data-ttu-id="edf68-122">Em vez disso, você normalmente pode criar suas árvores XML com um nó raiz de <xref:System.Xml.Linq.XElement>.</span><span class="sxs-lookup"><span data-stu-id="edf68-122">Instead, you can usually create your XML trees with an <xref:System.Xml.Linq.XElement> root node.</span></span> <span data-ttu-id="edf68-123">A menos que você tenha um requisito específico para criar um documento (por exemplo, porque você precisa criar instruções de processamento e comentários no nível superior ou precisa dar suporte a tipos de documento), geralmente é mais conveniente usar <xref:System.Xml.Linq.XElement> como o nó raiz.</span><span class="sxs-lookup"><span data-stu-id="edf68-123">Unless you have a specific requirement to create a document (for example, because you have to create processing instructions and comments at the top level, or you have to support document types), it is often more convenient to use <xref:System.Xml.Linq.XElement> as your root node.</span></span>  
  
 <span data-ttu-id="edf68-124">Para obter detalhes sobre o conteúdo válido de um <xref:System.Xml.Linq.XDocument>, consulte [válido conteúdo de objetos XElement e XDocument](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="edf68-124">For details about the valid content of an <xref:System.Xml.Linq.XDocument>, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="edf68-125">O exemplo a seguir cria um novo documento e, em seguida, adiciona um comentário e um elemento a ela.</span><span class="sxs-lookup"><span data-stu-id="edf68-125">The following example creates a new document, and then adds a comment and an element to it.</span></span>  
  
```csharp  
XDocument doc = new XDocument();  
doc.Add(new XComment("This is a comment"));  
doc.Add(new XElement("Root", "content"));  
Console.WriteLine(doc);  
```  
  
```vb  
Dim doc As XDocument = New XDocument()  
doc.Add(<!--This is a comment-->)  
doc.Add(<Root>content</Root>)  
Console.WriteLine(doc)  
```  
  
 <span data-ttu-id="edf68-126">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="edf68-126">This example produces the following output:</span></span>  
  
```xml  
<!--This is a comment-->  
<Root>content</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <related type="Article" href="http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="edf68-127">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-127">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/90f78331-1be8-42fb-93e7-bd1325826467">
          <span data-ttu-id="edf68-128">Visão geral da classe XDocument</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-128">XDocument Class Overview</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XDocument (params object[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.#ctor(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ParamArray content As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XDocument(... cli::array &lt;System::Object ^&gt; ^ content);" />
      <MemberSignature Language="F#" Value="new System.Xml.Linq.XDocument : obj[] -&gt; System.Xml.Linq.XDocument" Usage="new System.Xml.Linq.XDocument content" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="content" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="content">
          <span data-ttu-id="edf68-129">Uma lista de parâmetros de objetos de conteúdo para adicionar a este documento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-129">A parameter list of content objects to add to this document.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="edf68-130">Inicializa uma nova instância da classe <see cref="T:System.Xml.Linq.XDocument" /> com o conteúdo especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-130">Initializes a new instance of the <see cref="T:System.Xml.Linq.XDocument" /> class with the specified content.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="edf68-131">Não há muitos cenários que exijam a criação de um <xref:System.Xml.Linq.XDocument>.</span><span class="sxs-lookup"><span data-stu-id="edf68-131">There are not many scenarios that require you to create an <xref:System.Xml.Linq.XDocument>.</span></span> <span data-ttu-id="edf68-132">Em vez disso, você normalmente pode criar suas árvores XML com um nó raiz de <xref:System.Xml.Linq.XElement>.</span><span class="sxs-lookup"><span data-stu-id="edf68-132">Instead, you can usually create your XML trees with an <xref:System.Xml.Linq.XElement> root node.</span></span> <span data-ttu-id="edf68-133">A menos que você tenha um requisito específico para criar um documento (por exemplo, porque você precisa criar instruções de processamento e comentários no nível superior ou precisa dar suporte a tipos de documento), geralmente é mais conveniente usar <xref:System.Xml.Linq.XElement> como o nó raiz.</span><span class="sxs-lookup"><span data-stu-id="edf68-133">Unless you have a specific requirement to create a document (for example, because you have to create processing instructions and comments at the top level, or you have to support document types), it is often more convenient to use <xref:System.Xml.Linq.XElement> as your root node.</span></span>  
  
 <span data-ttu-id="edf68-134">Para obter detalhes sobre o conteúdo válido de um <xref:System.Xml.Linq.XDocument>, consulte [válido conteúdo de objetos XElement e XDocument](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="edf68-134">For details about the valid content of an <xref:System.Xml.Linq.XDocument>, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="edf68-135">O exemplo a seguir cria um documento e, em seguida, adiciona um comentário e um elemento a ela.</span><span class="sxs-lookup"><span data-stu-id="edf68-135">The following example creates a document, and then adds a comment and an element to it.</span></span> <span data-ttu-id="edf68-136">Ele compõe, em seguida, usar os resultados de uma consulta de outro documento.</span><span class="sxs-lookup"><span data-stu-id="edf68-136">It then composes another document using the results of a query.</span></span>  
  
```csharp  
XDocument srcTree = new XDocument(  
    new XComment("This is a comment"),  
    new XElement("Root",  
        new XElement("Child1", "data1"),  
        new XElement("Child2", "data2"),  
        new XElement("Child3", "data3"),  
        new XElement("Child2", "data4"),  
        new XElement("Info5", "info5"),  
        new XElement("Info6", "info6"),  
        new XElement("Info7", "info7"),  
        new XElement("Info8", "info8")  
    )  
);  
  
XDocument doc = new XDocument(  
    new XComment("This is a comment"),  
    new XElement("Root",  
        from el in srcTree.Element("Root").Elements()  
        where ((string)el).StartsWith("data")  
        select el  
    )  
);  
Console.WriteLine(doc);  
```  
  
```vb  
Dim srcTree As XDocument = _  
    <?xml version="1.0" encoding="utf-8" standalone="yes"?>  
        <!--This is a comment-->  
        <Root>  
            <Child1>data1</Child1>  
            <Child2>data2</Child2>  
            <Child3>data3</Child3>  
            <Child2>data4</Child2>  
            <Info5>info5</Info5>  
            <Info6>info6</Info6>  
            <Info7>info7</Info7>  
            <Info8>info8</Info8>  
        </Root>  
Dim doc As XDocument = _   
    <?xml version="1.0" encoding="utf-8" standalone="yes"?>  
        <!--This is a comment-->  
        <Root>  
            <%= From el In srcTree.<Root>.Elements _  
                Where CStr(el).StartsWith("data") _  
                Select el %>  
        </Root>  
Console.WriteLine(doc)  
```  
  
 <span data-ttu-id="edf68-137">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="edf68-137">This example produces the following output:</span></span>  
  
```xml  
<!--This is a comment-->  
<Root>  
  <Child1>data1</Child1>  
  <Child2>data2</Child2>  
  <Child3>data3</Child3>  
  <Child2>data4</Child2>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <related type="Article" href="http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="edf68-138">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-138">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/90f78331-1be8-42fb-93e7-bd1325826467">
          <span data-ttu-id="edf68-139">Visão geral da classe XDocument</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-139">XDocument Class Overview</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XDocument (System.Xml.Linq.XDocument other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.Linq.XDocument other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDocument)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (other As XDocument)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XDocument(System::Xml::Linq::XDocument ^ other);" />
      <MemberSignature Language="F#" Value="new System.Xml.Linq.XDocument : System.Xml.Linq.XDocument -&gt; System.Xml.Linq.XDocument" Usage="new System.Xml.Linq.XDocument other" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="other" Type="System.Xml.Linq.XDocument" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="edf68-140">O objeto <see cref="T:System.Xml.Linq.XDocument" /> que será copiado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-140">The <see cref="T:System.Xml.Linq.XDocument" /> object that will be copied.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="edf68-141">Inicializa uma nova instância da classe <see cref="T:System.Xml.Linq.XDocument" /> de um objeto <see cref="T:System.Xml.Linq.XDocument" /> existente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-141">Initializes a new instance of the <see cref="T:System.Xml.Linq.XDocument" /> class from an existing <see cref="T:System.Xml.Linq.XDocument" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="edf68-142">Usar esse construtor para fazer uma cópia em profundidade de um <xref:System.Xml.Linq.XDocument>.</span><span class="sxs-lookup"><span data-stu-id="edf68-142">You use this constructor to make a deep copy of an <xref:System.Xml.Linq.XDocument>.</span></span>  
  
 <span data-ttu-id="edf68-143">Este construtor percorre todos os nós e atributos no documento especificado na `other` parâmetro e cria cópias de todos os nós conforme ele reúne recentemente inicializado <xref:System.Xml.Linq.XDocument>.</span><span class="sxs-lookup"><span data-stu-id="edf68-143">This constructor traverses all nodes and attributes in the document specified in the `other` parameter, and creates copies of all nodes as it assembles the newly initialized <xref:System.Xml.Linq.XDocument>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <related type="Article" href="http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="edf68-144">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-144">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/90f78331-1be8-42fb-93e7-bd1325826467">
          <span data-ttu-id="edf68-145">Visão geral da classe XDocument</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-145">XDocument Class Overview</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XDocument (System.Xml.Linq.XDeclaration declaration, params object[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.Linq.XDeclaration declaration, object[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDeclaration,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (declaration As XDeclaration, ParamArray content As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XDocument(System::Xml::Linq::XDeclaration ^ declaration, ... cli::array &lt;System::Object ^&gt; ^ content);" />
      <MemberSignature Language="F#" Value="new System.Xml.Linq.XDocument : System.Xml.Linq.XDeclaration * obj[] -&gt; System.Xml.Linq.XDocument" Usage="new System.Xml.Linq.XDocument (declaration, content)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="declaration" Type="System.Xml.Linq.XDeclaration" />
        <Parameter Name="content" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="declaration">
          <span data-ttu-id="edf68-146">O <see cref="T:System.Xml.Linq.XDeclaration" /> para o documento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-146">An <see cref="T:System.Xml.Linq.XDeclaration" /> for the document.</span>
          </span>
        </param>
        <param name="content">
          <span data-ttu-id="edf68-147">O conteúdo do documento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-147">The content of the document.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="edf68-148">Inicializa uma nova instância da classe <see cref="T:System.Xml.Linq.XDocument" /> com o <see cref="T:System.Xml.Linq.XDeclaration" /> e conteúdo especificados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-148">Initializes a new instance of the <see cref="T:System.Xml.Linq.XDocument" /> class with the specified <see cref="T:System.Xml.Linq.XDeclaration" /> and content.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="edf68-149">Não há muitos cenários que exijam a criação de um <xref:System.Xml.Linq.XDocument>.</span><span class="sxs-lookup"><span data-stu-id="edf68-149">There are not many scenarios that require you to create an <xref:System.Xml.Linq.XDocument>.</span></span> <span data-ttu-id="edf68-150">Em vez disso, você normalmente pode criar suas árvores XML com um nó raiz de <xref:System.Xml.Linq.XElement>.</span><span class="sxs-lookup"><span data-stu-id="edf68-150">Instead, you can usually create your XML trees with an <xref:System.Xml.Linq.XElement> root node.</span></span> <span data-ttu-id="edf68-151">A menos que você tenha um requisito específico para criar um documento (por exemplo, porque você precisa criar instruções de processamento e comentários no nível superior ou precisa dar suporte a tipos de documento), geralmente é mais conveniente usar <xref:System.Xml.Linq.XElement> como o nó raiz.</span><span class="sxs-lookup"><span data-stu-id="edf68-151">Unless you have a specific requirement to create a document (for example, because you have to create processing instructions and comments at the top level, or you have to support document types), it is often more convenient to use <xref:System.Xml.Linq.XElement> as your root node.</span></span>  
  
 <span data-ttu-id="edf68-152">Para obter detalhes sobre o conteúdo válido de um <xref:System.Xml.Linq.XDocument>, consulte [válido conteúdo de objetos XElement e XDocument](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="edf68-152">For details about the valid content of an <xref:System.Xml.Linq.XDocument>, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="edf68-153">O exemplo a seguir usa esse construtor para criar um documento.</span><span class="sxs-lookup"><span data-stu-id="edf68-153">The following example uses this constructor to create a document.</span></span>  
  
```csharp  
XDocument srcTree = new XDocument(  
    new XComment("This is a comment"),  
    new XElement("Root",  
        new XElement("Child1", "data1"),  
        new XElement("Child2", "data2"),  
        new XElement("Child3", "data3"),  
        new XElement("Child2", "data4"),  
        new XElement("Info5", "info5"),  
        new XElement("Info6", "info6"),  
        new XElement("Info7", "info7"),  
        new XElement("Info8", "info8")  
    )  
);  
  
XDocument doc = new XDocument(  
    new XDeclaration("1.0", "utf-8", "yes"),  
    new XComment("This is a new comment"),  
    new XElement("Root",  
        from el in srcTree.Element("Root").Elements()  
        where ((string)el).StartsWith("data")  
        select el  
    )  
);  
doc.Save("Test.xml");  
Console.WriteLine(File.ReadAllText("Test.xml"));  
```  
  
```vb  
Dim srcTree As XDocument = _   
    <?xml version="1.0" encoding="utf-8" standalone="yes"?>  
        <!--This is a comment-->  
        <Root>  
            <Child1>data1</Child1>  
            <Child2>data2</Child2>  
            <Child3>data3</Child3>  
            <Child2>data4</Child2>  
            <Info5>info5</Info5>  
            <Info6>info6</Info6>  
            <Info7>info7</Info7>  
            <Info8>info8</Info8>  
        </Root>  
Dim doc As XDocument = _   
    <?xml version="1.0" encoding="utf-8" standalone="yes"?>  
        <!--This is a new comment-->  
        <Root>  
            <%= From el In srcTree.<Root>.Elements _  
                Where CStr(el).StartsWith("data") _  
                Select el %>  
        </Root>  
doc.Save("Test.xml")  
Console.WriteLine(File.ReadAllText("Test.xml"))  
```  
  
 <span data-ttu-id="edf68-154">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="edf68-154">This example produces the following output:</span></span>  
  
```xml  
<?xml version="1.0" encoding="utf-8" standalone="yes"?>  
<!--This is a new comment-->  
<Root>  
  <Child1>data1</Child1>  
  <Child2>data2</Child2>  
  <Child3>data3</Child3>  
  <Child2>data4</Child2>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <related type="Article" href="http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="edf68-155">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-155">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/90f78331-1be8-42fb-93e7-bd1325826467">
          <span data-ttu-id="edf68-156">Visão geral da classe XDocument</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-156">XDocument Class Overview</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Declaration">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XDeclaration Declaration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XDeclaration Declaration" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XDocument.Declaration" />
      <MemberSignature Language="VB.NET" Value="Public Property Declaration As XDeclaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XDeclaration ^ Declaration { System::Xml::Linq::XDeclaration ^ get(); void set(System::Xml::Linq::XDeclaration ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Declaration : System.Xml.Linq.XDeclaration with get, set" Usage="System.Xml.Linq.XDocument.Declaration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XDeclaration</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="edf68-157">Obtém ou define a declaração XML para este documento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-157">Gets or sets the XML declaration for this document.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="edf68-158">Um <see cref="T:System.Xml.Linq.XDeclaration" /> que contém a declaração XML para este documento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-158">An <see cref="T:System.Xml.Linq.XDeclaration" /> that contains the XML declaration for this document.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="edf68-159">Às vezes, você precisará criar uma declaração XML para um documento.</span><span class="sxs-lookup"><span data-stu-id="edf68-159">Sometimes you have to create an XML declaration for a document.</span></span> <span data-ttu-id="edf68-160">Se você deseja indicar que um documento é autônomo, você deve usar essa propriedade.</span><span class="sxs-lookup"><span data-stu-id="edf68-160">If you want to indicate that a document is standalone, you must use this property.</span></span> <span data-ttu-id="edf68-161">Se você quiser codificar seu documento com uma codificação diferente de utf-8, você pode especificar uma codificação por meio de <xref:System.Xml.Linq.XDeclaration>.</span><span class="sxs-lookup"><span data-stu-id="edf68-161">If you want to encode your document with an encoding other than utf-8, you can specify an encoding through the <xref:System.Xml.Linq.XDeclaration>.</span></span> <span data-ttu-id="edf68-162">Outra abordagem para codificação de um documento é especificar a codificação em um <xref:System.Xml.XmlWriter> que você passe a LINQ to XML para gravação.</span><span class="sxs-lookup"><span data-stu-id="edf68-162">Another approach for encoding a document is to specify the encoding on an <xref:System.Xml.XmlWriter> that you pass to LINQ to XML for writing.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="edf68-163">O exemplo a seguir usa essa propriedade para recuperar a declaração XML de um documento.</span><span class="sxs-lookup"><span data-stu-id="edf68-163">The following example uses this property to retrieve the XML declaration of a document.</span></span>  
  
```csharp  
XDocument doc = new XDocument(  
    new XDeclaration("1.0", "utf-8", "yes"),  
    new XComment("This is a comment"),  
    new XElement("Root", "content")  
);  
  
Console.WriteLine(doc.Declaration);  
```  
  
```vb  
Dim doc As XDocument = _  
    <?xml version="1.0" encoding="utf-8" standalone="yes"?>  
        <!--This is a comment-->  
        <Root>content</Root>  
  
Console.WriteLine(doc.Declaration)  
```  
  
 <span data-ttu-id="edf68-164">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="edf68-164">This example produces the following output:</span></span>  
  
```  
<?xml version="1.0" encoding="utf-8" standalone="yes"?>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Linq.XDeclaration" />
        <related type="Article" href="http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="edf68-165">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-165">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/215bcf5b-284b-4d7e-a95a-8d8e241341a9">
          <span data-ttu-id="edf68-166">Como ler e escrever um documento codificado</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-166">How to: Read and Write an Encoded Document</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="DocumentType">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XDocumentType DocumentType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XDocumentType DocumentType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XDocument.DocumentType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DocumentType As XDocumentType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XDocumentType ^ DocumentType { System::Xml::Linq::XDocumentType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DocumentType : System.Xml.Linq.XDocumentType" Usage="System.Xml.Linq.XDocument.DocumentType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XDocumentType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="edf68-167">Obtém a DTD (Definição de Tipo de Documento) desse documento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-167">Gets the Document Type Definition (DTD) for this document.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="edf68-168">Um <see cref="T:System.Xml.Linq.XDocumentType" /> que contém a DTD deste documento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-168">A <see cref="T:System.Xml.Linq.XDocumentType" /> that contains the DTD for this document.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] <span data-ttu-id="edf68-169">fornece suporte limitado para DTDs.</span><span class="sxs-lookup"><span data-stu-id="edf68-169"> provides limited support for DTDs.</span></span>  
  
 <span data-ttu-id="edf68-170">Você pode preencher uma árvore XML com um documento XML que contém um DTD.</span><span class="sxs-lookup"><span data-stu-id="edf68-170">You can populate an XML tree with an XML document that contains a DTD.</span></span> <span data-ttu-id="edf68-171">A árvore XML, em seguida, conterá um <xref:System.Xml.Linq.XDocument.DocumentType%2A> nó.</span><span class="sxs-lookup"><span data-stu-id="edf68-171">The XML tree will then contain a <xref:System.Xml.Linq.XDocument.DocumentType%2A> node.</span></span> <span data-ttu-id="edf68-172">Ao serializar ou salvar a árvore, o DTD também poderão ser serializado.</span><span class="sxs-lookup"><span data-stu-id="edf68-172">When you serialize or save the tree, the DTD will also be serialized.</span></span> [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] <span data-ttu-id="edf68-173">expandirá quaisquer entidades no DTD.</span><span class="sxs-lookup"><span data-stu-id="edf68-173"> will expand any entities in the DTD.</span></span> <span data-ttu-id="edf68-174">Ao serializar ou salvar a árvore XML, as referências de entidade não são salvas; em vez disso, os nós são salvos com as referências de entidade substituídas pelo texto da entidade.</span><span class="sxs-lookup"><span data-stu-id="edf68-174">When you serialize or save the XML tree, the entity references are not saved; instead, the nodes are saved with the entity references replaced by the text of the entity.</span></span>  
  
 <span data-ttu-id="edf68-175">Se o DTD contém os atributos padrão, os atributos são criados na árvore XML como atributos comuns.</span><span class="sxs-lookup"><span data-stu-id="edf68-175">If the DTD contains default attributes, the attributes are created in the XML tree as ordinary attributes.</span></span>  
  
 <span data-ttu-id="edf68-176">Por padrão, [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] não valida um documento com base na sua DTD.</span><span class="sxs-lookup"><span data-stu-id="edf68-176">By default, [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] does not validate a document based on its DTD.</span></span> <span data-ttu-id="edf68-177">Para validar um documento com base em um DTD, crie uma <xref:System.Xml.XmlReader> que irá validar com base em um DTD e, em seguida, criar uma árvore XML do <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="edf68-177">To validate a document based on a DTD, create an <xref:System.Xml.XmlReader> that will validate based on a DTD, and then create an XML tree from the <xref:System.Xml.XmlReader>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="edf68-178">O exemplo a seguir cria um documento que contém um <xref:System.Xml.Linq.XDocumentType>.</span><span class="sxs-lookup"><span data-stu-id="edf68-178">The following example creates a document that contains an <xref:System.Xml.Linq.XDocumentType>.</span></span>  
  
 <span data-ttu-id="edf68-179">Visual Basic não oferece suporte a tipos de documento dentro de literais XML.</span><span class="sxs-lookup"><span data-stu-id="edf68-179">Visual Basic does not support document types within XML literals.</span></span> <span data-ttu-id="edf68-180">No entanto, é possível criar um documento que contém um tipo de documento, primeiro criando o documento usando literais XML e, em seguida, criando e adicionando um <xref:System.Xml.Linq.XDocumentType> nó no local apropriado na árvore XML.</span><span class="sxs-lookup"><span data-stu-id="edf68-180">However, it is possible to create a document that contains a document type by first creating the document using XML literals, and then creating and adding an <xref:System.Xml.Linq.XDocumentType> node in the appropriate place in the XML tree.</span></span>  
  
```csharp  
string internalSubset = @"<!ELEMENT Pubs (Book+)>  
<!ELEMENT Book (Title, Author)>  
<!ELEMENT Title (#PCDATA)>  
<!ELEMENT Author (#PCDATA)>";  
  
string target = "xml-stylesheet";  
string data = "href='mystyle.css' title='Compact' type='text/css'";  
  
XDocument doc = new XDocument(  
    new XComment("This is a comment."),  
    new XProcessingInstruction(target, data),  
    new XDocumentType("Pubs", null, null, internalSubset),  
    new XElement("Pubs",   
        new XElement("Book",  
            new XElement("Title", "Artifacts of Roman Civilization"),  
            new XElement("Author", "Moreno, Jordao")  
        ),  
        new XElement("Book",  
            new XElement("Title", "Midieval Tools and Implements"),  
            new XElement("Author", "Gazit, Inbar")  
        )  
    ),  
    new XComment("This is another comment.")  
);  
doc.Declaration = new XDeclaration("1.0", "utf-8", "true");  
Console.WriteLine(doc);  
  
doc.Save("test.xml");  
```  
  
```vb  
Dim internalSubset = _  
        "<!ELEMENT Pubs (Book+)>" & Environment.NewLine & _  
        "<!ELEMENT Book (Title, Author)>" & Environment.NewLine & _  
        "<!ELEMENT Title (#PCDATA)>" & Environment.NewLine & _  
        "<!ELEMENT Author (#PCDATA)>"  
  
Dim doc As XDocument = _  
    <?xml version="1.0" encoding="utf-8" standalone="yes"?>  
    <!--This is a comment.-->  
    <?xml-stylesheet href='mystyle.css' title='Compact' type='text/css'?>  
    <Pubs>  
        <Book>  
            <Title>Artifacts of Roman Civilization</Title>  
            <Author>Moreno, Jordao</Author>  
        </Book>  
        <Book>  
            <Title>Midieval Tools and Implements</Title>  
            <Author>Gazit, Inbar</Author>  
        </Book>  
    </Pubs>  
    <!--This is another comment.-->  
  
doc.Nodes().Skip(1).First().AddAfterSelf(New XDocumentType("Pubs", Nothing, Nothing, internalSubset))  
Console.WriteLine(doc)  
```  
  
 <span data-ttu-id="edf68-181">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="edf68-181">This example produces the following output:</span></span>  
  
```xml  
<!--This is a comment.-->  
<?xml-stylesheet href='mystyle.css' title='Compact' type='text/css'?>  
<!DOCTYPE Pubs [<!ELEMENT Pubs (Book+)>  
<!ELEMENT Book (Title, Author)>  
<!ELEMENT Title (#PCDATA)>  
<!ELEMENT Author (#PCDATA)>]>  
<Pubs>  
  <Book>  
    <Title>Artifacts of Roman Civilization</Title>  
    <Author>Moreno, Jordao</Author>  
  </Book>  
  <Book>  
    <Title>Midieval Tools and Implements</Title>  
    <Author>Gazit, Inbar</Author>  
  </Book>  
</Pubs>  
<!--This is another comment.-->  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Linq.XDocumentType" />
        <altmember cref="P:System.Xml.Linq.XDocument.NodeType" />
        <related type="Article" href="http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="edf68-182">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-182">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="edf68-183">Cria um novo <see cref="T:System.Xml.Linq.XDocument" /> de um arquivo especificado por um URI com base em um <see cref="T:System.IO.TextReader" /> ou um <see cref="T:System.Xml.XmlReader" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-183">Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from a file specified by a URI, from an <see cref="T:System.IO.TextReader" />, or from an <see cref="T:System.Xml.XmlReader" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="edf68-184">Usando uma das sobrecargas desse método, você pode carregar uma <xref:System.Xml.Linq.XDocument> de um arquivo, uma <xref:System.IO.TextReader>, ou um <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="edf68-184">Using one of the overloads of this method, you can load an <xref:System.Xml.Linq.XDocument> from a file, a <xref:System.IO.TextReader>, or an <xref:System.Xml.XmlReader>.</span></span>  
  
 <span data-ttu-id="edf68-185">Para criar uma <xref:System.Xml.Linq.XDocument> de uma cadeia de caracteres que contém XML, use <xref:System.Xml.Linq.XDocument.Parse%2A>.</span><span class="sxs-lookup"><span data-stu-id="edf68-185">To create an <xref:System.Xml.Linq.XDocument> from a string that contains XML, use <xref:System.Xml.Linq.XDocument.Parse%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Parse" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Save" />
        <altmember cref="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)" />
        <related type="Article" href="http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="edf68-186">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-186">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/d266f58d-f2f3-4668-b661-e716e658d13a">
          <span data-ttu-id="edf68-187">Consultando um XDocument versus consultando um XElement</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-187">Querying an XDocument vs. Querying an XElement</span>
          </span>
        </related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XDocument Load (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XDocument Load(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.Load(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XDocument ^ Load(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="static member Load : System.IO.Stream -&gt; System.Xml.Linq.XDocument" Usage="System.Xml.Linq.XDocument.Load stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="edf68-188">O fluxo que contém os dados XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-188">The stream that contains the XML data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="edf68-189">Cria uma nova instância <see cref="T:System.Xml.Linq.XDocument" /> usando o fluxo especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-189">Creates a new <see cref="T:System.Xml.Linq.XDocument" /> instance by using the specified stream.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="edf68-190">Um objeto <see cref="T:System.Xml.Linq.XDocument" /> que lê os dados contidos em um fluxo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-190">An <see cref="T:System.Xml.Linq.XDocument" /> object that reads the data that is contained in the stream.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="edf68-191">Se você deseja controlar as opções de carregamento, use o <xref:System.Xml.Linq.XDocument.Load%2A> sobrecarga que utiliza <xref:System.Xml.Linq.LoadOptions> como um parâmetro.</span><span class="sxs-lookup"><span data-stu-id="edf68-191">If you want to control load options, use the <xref:System.Xml.Linq.XDocument.Load%2A> overload that takes <xref:System.Xml.Linq.LoadOptions> as a parameter.</span></span>  
  
 <span data-ttu-id="edf68-192">A funcionalidade de carregamento do LINQ to XML é construída <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="edf68-192">The loading functionality of LINQ to XML is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="edf68-193">Portanto, você pode capturar todas as exceções geradas pelo <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> métodos de sobrecarga e a <xref:System.Xml.XmlReader> métodos que ler e analisar o documento.</span><span class="sxs-lookup"><span data-stu-id="edf68-193">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
 <span data-ttu-id="edf68-194">Se você tiver que modificar <xref:System.Xml.XmlReaderSettings>, siga estas etapas:</span><span class="sxs-lookup"><span data-stu-id="edf68-194">If you have to modify <xref:System.Xml.XmlReaderSettings>, follow these steps:</span></span>  
  
1.  <span data-ttu-id="edf68-195">Criar uma <xref:System.Xml.XmlReader> chamando um dos <xref:System.Xml.XmlReader.Create%2A> sobrecargas que aceitam <xref:System.Xml.XmlReaderSettings> como um parâmetro.</span><span class="sxs-lookup"><span data-stu-id="edf68-195">Create an <xref:System.Xml.XmlReader> by calling one of the <xref:System.Xml.XmlReader.Create%2A> overloads that take <xref:System.Xml.XmlReaderSettings> as a parameter.</span></span>  
  
2.  <span data-ttu-id="edf68-196">Passar o <xref:System.Xml.XmlReader> dentre a <xref:System.Xml.Linq.XDocument.Load%2A> sobrecargas do <xref:System.Xml.Linq.XDocument> que usa <xref:System.Xml.XmlReader> como um parâmetro.</span><span class="sxs-lookup"><span data-stu-id="edf68-196">Pass the <xref:System.Xml.XmlReader> to one of the <xref:System.Xml.Linq.XDocument.Load%2A> overloads of <xref:System.Xml.Linq.XDocument> that takes <xref:System.Xml.XmlReader> as a parameter.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XDocument Load (System.IO.TextReader textReader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XDocument Load(class System.IO.TextReader textReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XDocument ^ Load(System::IO::TextReader ^ textReader);" />
      <MemberSignature Language="F#" Value="static member Load : System.IO.TextReader -&gt; System.Xml.Linq.XDocument" Usage="System.Xml.Linq.XDocument.Load textReader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textReader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="textReader">
          <span data-ttu-id="edf68-197">Um <see cref="T:System.IO.TextReader" /> que contém o conteúdo do <see cref="T:System.Xml.Linq.XDocument" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-197">A <see cref="T:System.IO.TextReader" /> that contains the content for the <see cref="T:System.Xml.Linq.XDocument" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="edf68-198">Cria um novo <see cref="T:System.Xml.Linq.XDocument" /> com base em um <see cref="T:System.IO.TextReader" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-198">Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from a <see cref="T:System.IO.TextReader" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="edf68-199">Um <see cref="T:System.Xml.Linq.XDocument" /> que contém o conteúdo do <see cref="T:System.IO.TextReader" /> especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-199">An <see cref="T:System.Xml.Linq.XDocument" /> that contains the contents of the specified <see cref="T:System.IO.TextReader" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="edf68-200">LINQ para a funcionalidade de carregamento do XML é compilado em cima <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="edf68-200">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="edf68-201">Portanto, você pode capturar todas as exceções geradas pelo <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> métodos de sobrecarga e a <xref:System.Xml.XmlReader> métodos que ler e analisar o documento.</span><span class="sxs-lookup"><span data-stu-id="edf68-201">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="edf68-202">O exemplo a seguir cria um documento de um <xref:System.IO.StringReader>.</span><span class="sxs-lookup"><span data-stu-id="edf68-202">The following example creates a document from a <xref:System.IO.StringReader>.</span></span>  
  
```csharp  
TextReader tr = new StringReader("<Root>Content</Root>");  
XDocument doc = XDocument.Load(tr);  
Console.WriteLine(doc);  
```  
  
```vb  
Dim tr As TextReader = New StringReader("<Root>Content</Root>")  
Dim doc As XDocument = XDocument.Load(tr)  
Console.WriteLine(doc)  
```  
  
 <span data-ttu-id="edf68-203">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="edf68-203">This example produces the following output:</span></span>  
  
```xml  
<Root>Content</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Parse" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Save" />
        <altmember cref="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)" />
        <related type="Article" href="http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="edf68-204">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-204">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/d266f58d-f2f3-4668-b661-e716e658d13a">
          <span data-ttu-id="edf68-205">Consultando um XDocument versus consultando um XElement</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-205">Querying an XDocument vs. Querying an XElement</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XDocument Load (string uri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XDocument Load(string uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.Load(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (uri As String) As XDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XDocument ^ Load(System::String ^ uri);" />
      <MemberSignature Language="F#" Value="static member Load : string -&gt; System.Xml.Linq.XDocument" Usage="System.Xml.Linq.XDocument.Load uri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uri">
          <span data-ttu-id="edf68-206">Uma cadeia de caracteres do URI que faz referência ao arquivo a ser carregado em um novo <see cref="T:System.Xml.Linq.XDocument" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-206">A URI string that references the file to load into a new <see cref="T:System.Xml.Linq.XDocument" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="edf68-207">Cria um novo <see cref="T:System.Xml.Linq.XDocument" /> com base em um arquivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-207">Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from a file.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="edf68-208">Um <see cref="T:System.Xml.Linq.XDocument" /> que contém o conteúdo do arquivo especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-208">An <see cref="T:System.Xml.Linq.XDocument" /> that contains the contents of the specified file.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="edf68-209">Esse método usa uma subjacente <xref:System.Xml.XmlReader> para ler o XML em uma árvore XML.</span><span class="sxs-lookup"><span data-stu-id="edf68-209">This method uses an underlying <xref:System.Xml.XmlReader> to read the XML into an XML tree.</span></span>  
  
 <span data-ttu-id="edf68-210">Use <xref:System.Xml.Linq.XDocument.Parse%2A> para criar um <xref:System.Xml.Linq.XDocument> de uma cadeia de caracteres que contém XML.</span><span class="sxs-lookup"><span data-stu-id="edf68-210">Use <xref:System.Xml.Linq.XDocument.Parse%2A> to create an <xref:System.Xml.Linq.XDocument> from a string that contains XML.</span></span>  
  
 <span data-ttu-id="edf68-211">LINQ para a funcionalidade de carregamento do XML é compilado em cima <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="edf68-211">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="edf68-212">Portanto, você pode capturar todas as exceções geradas pelo <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> métodos de sobrecarga e a <xref:System.Xml.XmlReader> métodos que ler e analisar o documento.</span><span class="sxs-lookup"><span data-stu-id="edf68-212">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="edf68-213">O exemplo a seguir mostra como carregar um <xref:System.Xml.Linq.XDocument> de um arquivo.</span><span class="sxs-lookup"><span data-stu-id="edf68-213">The following example shows how to load an <xref:System.Xml.Linq.XDocument> from a file.</span></span>  
  
 <span data-ttu-id="edf68-214">Este exemplo usa o seguinte documento XML:</span><span class="sxs-lookup"><span data-stu-id="edf68-214">This example uses the following XML document:</span></span>  
  
 [<span data-ttu-id="edf68-215">Arquivo XML de exemplo: ordem de compra típica (LINQ to XML)</span><span class="sxs-lookup"><span data-stu-id="edf68-215">Sample XML File: Typical Purchase Order (LINQ to XML)</span></span>](http://msdn.microsoft.com/library/0606c09f-6e43-4f8d-95c8-e8e2e08d2348)  
  
```csharp  
XDocument doc = XDocument.Load("PurchaseOrder.xml");  
Console.WriteLine(doc);  
```  
  
```vb  
Dim doc As XDocument = XDocument.Load("PurchaseOrder.xml")  
Console.WriteLine(doc)  
```  
  
 <span data-ttu-id="edf68-216">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="edf68-216">This example produces the following output:</span></span>  
  
```  
<PurchaseOrder PurchaseOrderNumber="99503" OrderDate="1999-10-20">  
  <Address Type="Shipping">  
    <Name>Ellen Adams</Name>  
    <Street>123 Maple Street</Street>  
    <City>Mill Valley</City>  
    <State>CA</State>  
    <Zip>10999</Zip>  
    <Country>USA</Country>  
  </Address>  
  <Address Type="Billing">  
    <Name>Tai Yee</Name>  
    <Street>8 Oak Avenue</Street>  
    <City>Old Town</City>  
    <State>PA</State>  
    <Zip>95819</Zip>  
    <Country>USA</Country>  
  </Address>  
  <DeliveryNotes>Please leave packages in shed by driveway.</DeliveryNotes>  
  <Items>  
    <Item PartNumber="872-AA">  
      <ProductName>Lawnmower</ProductName>  
      <Quantity>1</Quantity>  
      <USPrice>148.95</USPrice>  
      <Comment>Confirm this is electric</Comment>  
    </Item>  
    <Item PartNumber="926-AA">  
      <ProductName>Baby Monitor</ProductName>  
      <Quantity>2</Quantity>  
      <USPrice>39.98</USPrice>  
      <ShipDate>1999-05-21</ShipDate>  
    </Item>  
  </Items>  
</PurchaseOrder>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Parse" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Save" />
        <altmember cref="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)" />
        <related type="Article" href="http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="edf68-217">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-217">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/d266f58d-f2f3-4668-b661-e716e658d13a">
          <span data-ttu-id="edf68-218">Consultando um XDocument versus consultando um XElement</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-218">Querying an XDocument vs. Querying an XElement</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XDocument Load (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XDocument Load(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (reader As XmlReader) As XDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XDocument ^ Load(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="static member Load : System.Xml.XmlReader -&gt; System.Xml.Linq.XDocument" Usage="System.Xml.Linq.XDocument.Load reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="edf68-219">Um <see cref="T:System.Xml.XmlReader" /> que contém o conteúdo do <see cref="T:System.Xml.Linq.XDocument" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-219">A <see cref="T:System.Xml.XmlReader" /> that contains the content for the <see cref="T:System.Xml.Linq.XDocument" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="edf68-220">Cria um novo <see cref="T:System.Xml.Linq.XDocument" /> com base em um <see cref="T:System.Xml.XmlReader" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-220">Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from an <see cref="T:System.Xml.XmlReader" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="edf68-221">Um <see cref="T:System.Xml.Linq.XDocument" /> que contém o conteúdo do <see cref="T:System.Xml.XmlReader" /> especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-221">An <see cref="T:System.Xml.Linq.XDocument" /> that contains the contents of the specified <see cref="T:System.Xml.XmlReader" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="edf68-222">Um uso possível para esse método é criar uma cópia de um documento DOM em uma árvore LINQ to XML.</span><span class="sxs-lookup"><span data-stu-id="edf68-222">One possible use for this method is to create a copy of a DOM document in a LINQ to XML tree.</span></span> <span data-ttu-id="edf68-223">Para fazer isso, você cria um <xref:System.Xml.XmlNodeReader> de um documento DOM e, em seguida, use o <xref:System.Xml.XmlNodeReader> para criar um <xref:System.Xml.Linq.XDocument>.</span><span class="sxs-lookup"><span data-stu-id="edf68-223">To do this, you create an <xref:System.Xml.XmlNodeReader> from a DOM document, and then use the <xref:System.Xml.XmlNodeReader> to create an <xref:System.Xml.Linq.XDocument>.</span></span>  
  
 <span data-ttu-id="edf68-224">LINQ para a funcionalidade de carregamento do XML é compilado em cima <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="edf68-224">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="edf68-225">Portanto, você pode capturar todas as exceções geradas pelo <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> métodos de sobrecarga e a <xref:System.Xml.XmlReader> métodos que ler e analisar o documento.</span><span class="sxs-lookup"><span data-stu-id="edf68-225">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="edf68-226">O exemplo a seguir cria um documento DOM, cria uma <xref:System.Xml.XmlNodeReader> do documento DOM, cria um <xref:System.Xml.Linq.XDocument> usando o <xref:System.Xml.XmlNodeReader>.</span><span class="sxs-lookup"><span data-stu-id="edf68-226">The following example creates a DOM document, creates an <xref:System.Xml.XmlNodeReader> from the DOM document, creates an <xref:System.Xml.Linq.XDocument> using the <xref:System.Xml.XmlNodeReader>.</span></span>  
  
```csharp  
// Create a DOM document with some content.  
XmlDocument doc = new XmlDocument();  
XmlElement child = doc.CreateElement("Child");  
child.InnerText = "child contents";  
XmlElement root = doc.CreateElement("Root");  
root.AppendChild(child);  
doc.AppendChild(root);  
  
// create a reader and move to the content  
using (XmlNodeReader nodeReader = new XmlNodeReader(doc)) {  
    // the reader must be in the Interactive state in order to  
    // create a LINQ to XML tree from it.  
    nodeReader.MoveToContent();  
  
    XDocument xRoot = XDocument.Load(nodeReader);  
    Console.WriteLine(xRoot);  
}  
```  
  
```vb  
' Create a DOM document with some content.  
Dim doc As XmlDocument = New XmlDocument()  
Dim child As XmlElement = doc.CreateElement("Child")  
child.InnerText = "child contents"  
Dim root As XmlElement = doc.CreateElement("Root")  
root.AppendChild(child)  
doc.AppendChild(root)  
  
' create a reader and move to the content  
Using nodeReader = New XmlNodeReader(doc)  
    ' the reader must be in the Interactive state in order to  
    ' create a LINQ to XML tree from it.  
    nodeReader.MoveToContent()  
  
    Dim xRoot As XDocument = XDocument.Load(nodeReader)  
    Console.WriteLine(xRoot)  
End Using  
```  
  
 <span data-ttu-id="edf68-227">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="edf68-227">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child>child contents</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Parse" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Save" />
        <altmember cref="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)" />
        <related type="Article" href="http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="edf68-228">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-228">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/d266f58d-f2f3-4668-b661-e716e658d13a">
          <span data-ttu-id="edf68-229">Consultando um XDocument versus consultando um XElement</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-229">Querying an XDocument vs. Querying an XElement</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XDocument Load (System.IO.Stream stream, System.Xml.Linq.LoadOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XDocument Load(class System.IO.Stream stream, valuetype System.Xml.Linq.LoadOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XDocument ^ Load(System::IO::Stream ^ stream, System::Xml::Linq::LoadOptions options);" />
      <MemberSignature Language="F#" Value="static member Load : System.IO.Stream * System.Xml.Linq.LoadOptions -&gt; System.Xml.Linq.XDocument" Usage="System.Xml.Linq.XDocument.Load (stream, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="edf68-230">O fluxo que contém os dados XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-230">The stream containing the XML data.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="edf68-231">Um <see cref="T:System.Xml.Linq.LoadOptions" /> que especifica se informações de linha e URI base devem ser carregadas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-231">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies whether to load base URI and line information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="edf68-232">Cria uma nova instância de <see cref="T:System.Xml.Linq.XDocument" /> usando o fluxo especificado, com a opção de preservar espaços em branco, definir o URI base e reter informações de linha.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-232">Creates a new <see cref="T:System.Xml.Linq.XDocument" /> instance by using the specified stream, optionally preserving white space, setting the base URI, and retaining line information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="edf68-233">Um objeto <see cref="T:System.Xml.Linq.XDocument" /> que lê os dados contidos em um fluxo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-233">An <see cref="T:System.Xml.Linq.XDocument" /> object that reads the data that is contained in the stream.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="edf68-234">A funcionalidade de carregamento do LINQ to XML é construída <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="edf68-234">The loading functionality of LINQ to XML is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="edf68-235">Portanto, você pode capturar todas as exceções geradas pelo <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> métodos de sobrecarga e a <xref:System.Xml.XmlReader> métodos que ler e analisar o documento.</span><span class="sxs-lookup"><span data-stu-id="edf68-235">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
 <span data-ttu-id="edf68-236">Se você tiver que modificar <xref:System.Xml.XmlReaderSettings>, siga estas etapas:</span><span class="sxs-lookup"><span data-stu-id="edf68-236">If you have to modify <xref:System.Xml.XmlReaderSettings>, follow these steps:</span></span>  
  
1.  <span data-ttu-id="edf68-237">Criar uma <xref:System.Xml.XmlReader> chamando um dos <xref:System.Xml.XmlReader.Create%2A> sobrecargas que usa <xref:System.Xml.XmlReaderSettings> como um parâmetro.</span><span class="sxs-lookup"><span data-stu-id="edf68-237">Create an <xref:System.Xml.XmlReader> by calling one of the <xref:System.Xml.XmlReader.Create%2A> overloads that takes <xref:System.Xml.XmlReaderSettings> as a parameter.</span></span>  
  
2.  <span data-ttu-id="edf68-238">Passar o <xref:System.Xml.XmlReader> dentre a <xref:System.Xml.Linq.XDocument.Load%2A> sobrecargas do <xref:System.Xml.Linq.XDocument> que usa <xref:System.Xml.XmlReader> como um parâmetro.</span><span class="sxs-lookup"><span data-stu-id="edf68-238">Pass the <xref:System.Xml.XmlReader> to one of the <xref:System.Xml.Linq.XDocument.Load%2A> overloads of <xref:System.Xml.Linq.XDocument> that takes <xref:System.Xml.XmlReader> as a parameter.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XDocument Load (System.IO.TextReader textReader, System.Xml.Linq.LoadOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XDocument Load(class System.IO.TextReader textReader, valuetype System.Xml.Linq.LoadOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XDocument ^ Load(System::IO::TextReader ^ textReader, System::Xml::Linq::LoadOptions options);" />
      <MemberSignature Language="F#" Value="static member Load : System.IO.TextReader * System.Xml.Linq.LoadOptions -&gt; System.Xml.Linq.XDocument" Usage="System.Xml.Linq.XDocument.Load (textReader, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textReader" Type="System.IO.TextReader" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
      </Parameters>
      <Docs>
        <param name="textReader">
          <span data-ttu-id="edf68-239">Um <see cref="T:System.IO.TextReader" /> que contém o conteúdo do <see cref="T:System.Xml.Linq.XDocument" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-239">A <see cref="T:System.IO.TextReader" /> that contains the content for the <see cref="T:System.Xml.Linq.XDocument" />.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="edf68-240">
            <see cref="T:System.Xml.Linq.LoadOptions" /> que especificam o comportamento de espaço em branco e se serão carregadas as informações de linha e o URI base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-240">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="edf68-241">Cria um novo <see cref="T:System.Xml.Linq.XDocument" /> de um <see cref="T:System.IO.TextReader" />, opcionalmente preservando espaços em branco, configurando o URI base e retendo informações de linha.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-241">Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from a <see cref="T:System.IO.TextReader" />, optionally preserving white space, setting the base URI, and retaining line information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="edf68-242">Um <see cref="T:System.Xml.Linq.XDocument" /> que contém o XML que foi lido do <see cref="T:System.IO.TextReader" /> especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-242">An <see cref="T:System.Xml.Linq.XDocument" /> that contains the XML that was read from the specified <see cref="T:System.IO.TextReader" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="edf68-243">Se o XML de origem é recuado, configurando o <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> sinalizador no `options` faz com que o leitor para ler todo o espaço em branco no XML de origem.</span><span class="sxs-lookup"><span data-stu-id="edf68-243">If the source XML is indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to read all white space in the source XML.</span></span> <span data-ttu-id="edf68-244">Nós de tipo <xref:System.Xml.Linq.XText> são criados para o espaço em branco significativo e irrisória.</span><span class="sxs-lookup"><span data-stu-id="edf68-244">Nodes of type <xref:System.Xml.Linq.XText> are created for both significant and insignificant white space.</span></span>  
  
 <span data-ttu-id="edf68-245">Se o XML de origem é recuado, não definindo a <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> sinalizador no `options` faz com que o leitor ignorar todo o espaço em branco insignificante no XML de origem.</span><span class="sxs-lookup"><span data-stu-id="edf68-245">If the source XML is indented, not setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to ignore all of the insignificant white space in the source XML.</span></span> <span data-ttu-id="edf68-246">A árvore XML é criada sem nenhum nó de texto de espaço em branco insignificante.</span><span class="sxs-lookup"><span data-stu-id="edf68-246">The XML tree is created without any text nodes for insignificant white space.</span></span>  
  
 <span data-ttu-id="edf68-247">Se o XML de origem não for recuado, definindo o <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> sinalizador no `options` não tem nenhum efeito.</span><span class="sxs-lookup"><span data-stu-id="edf68-247">If the source XML is not indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` has no effect.</span></span> <span data-ttu-id="edf68-248">Espaço em branco significativo é preservado, e não há nenhum intervalos de espaço em branco insignificante que poderiam causar a criação de mais nós de texto de espaço em branco.</span><span class="sxs-lookup"><span data-stu-id="edf68-248">Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.</span></span>  
  
 <span data-ttu-id="edf68-249">Para obter mais informações, consulte [preservar espaço em branco durante a análise de XML ou carregamento](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) e [preservar espaço em branco ao serializar](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span><span class="sxs-lookup"><span data-stu-id="edf68-249">For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
 <span data-ttu-id="edf68-250">Use <xref:System.Xml.Linq.XDocument.Parse%2A> para criar um <xref:System.Xml.Linq.XElement> de uma cadeia de caracteres que contém XML.</span><span class="sxs-lookup"><span data-stu-id="edf68-250">Use <xref:System.Xml.Linq.XDocument.Parse%2A> to create an <xref:System.Xml.Linq.XElement> from a string that contains XML.</span></span>  
  
 <span data-ttu-id="edf68-251">Definindo <xref:System.Xml.Linq.LoadOptions.SetBaseUri> não é válido durante o carregamento de um <xref:System.IO.TextReader>.</span><span class="sxs-lookup"><span data-stu-id="edf68-251">Setting <xref:System.Xml.Linq.LoadOptions.SetBaseUri> is not valid when loading from a <xref:System.IO.TextReader>.</span></span>  
  
 <span data-ttu-id="edf68-252">Há uma penalidade de desempenho, se você definir o <xref:System.Xml.Linq.LoadOptions.SetLineInfo> sinalizador.</span><span class="sxs-lookup"><span data-stu-id="edf68-252">There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag.</span></span>  
  
 <span data-ttu-id="edf68-253">As informações de linha são precisas imediatamente após o carregamento do documento XML.</span><span class="sxs-lookup"><span data-stu-id="edf68-253">The line information is accurate immediately after loading the XML document.</span></span> <span data-ttu-id="edf68-254">Se você modificar a árvore XML após o carregamento do documento, as informações de linha podem se tornar sem sentido.</span><span class="sxs-lookup"><span data-stu-id="edf68-254">If you modify the XML tree after loading the document, the line information may become meaningless.</span></span>  
  
 <span data-ttu-id="edf68-255">LINQ para a funcionalidade de carregamento do XML é compilado em cima <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="edf68-255">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="edf68-256">Portanto, você pode capturar todas as exceções geradas pelo <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> métodos de sobrecarga e a <xref:System.Xml.XmlReader> métodos que ler e analisar o documento.</span><span class="sxs-lookup"><span data-stu-id="edf68-256">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="edf68-257">O exemplo a seguir cria um documento de um <xref:System.IO.StringReader>.</span><span class="sxs-lookup"><span data-stu-id="edf68-257">The following example creates a document from a <xref:System.IO.StringReader>.</span></span>  
  
```csharp  
TextReader sr;  
int whiteSpaceNodes;  
  
sr = new StringReader("<Root> <Child> </Child> </Root>");  
XDocument xmlTree1 = XDocument.Load(sr, LoadOptions.None);  
sr.Close();  
whiteSpaceNodes = xmlTree1  
    .Element("Root")  
    .DescendantNodesAndSelf()  
    .OfType<XText>()  
    .Where(tNode => tNode.ToString().Trim().Length == 0)  
    .Count();  
Console.WriteLine("Count of white space nodes (not preserving whitespace): {0}", whiteSpaceNodes);  
  
sr = new StringReader("<Root> <Child> </Child> </Root>");  
XDocument xmlTree2 = XDocument.Load(sr, LoadOptions.PreserveWhitespace);  
sr.Close();  
whiteSpaceNodes = xmlTree2  
    .Element("Root")  
    .DescendantNodesAndSelf()  
    .OfType<XText>()  
    .Where(tNode => tNode.ToString().Trim().Length == 0)  
    .Count();  
Console.WriteLine("Count of white space nodes (preserving whitespace): {0}", whiteSpaceNodes);  
```  
  
```vb  
Dim sr As TextReader  
Dim whiteSpaceNodes As Integer  
  
sr = New StringReader("<Root> <Child> </Child> </Root>")  
Dim xmlTree1 As XDocument = XDocument.Load(sr, LoadOptions.None)  
sr.Close()  
whiteSpaceNodes = xmlTree1 _  
              .Element("Root") _  
              .DescendantNodesAndSelf() _  
              .OfType(Of XText)() _  
              .Where(Function(ByVal tNode As XNode) tNode. _  
                  ToString().Trim().Length = 0).Count()  
Console.WriteLine("Count of white space nodes (not preserving whitespace): {0}", whiteSpaceNodes)  
  
sr = New StringReader("<Root> <Child> </Child> </Root>")  
Dim xmlTree2 As XDocument = XDocument.Load(sr, LoadOptions.PreserveWhitespace)  
sr.Close()  
whiteSpaceNodes = xmlTree2 _  
              .Element("Root") _  
              .DescendantNodesAndSelf() _  
              .OfType(Of XText)() _  
              .Where(Function(ByVal tNode As XNode) tNode. _  
                  ToString().Trim().Length = 0).Count()  
Console.WriteLine("Count of white space nodes (preserving whitespace): {0}", whiteSpaceNodes)  
```  
  
 <span data-ttu-id="edf68-258">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="edf68-258">This example produces the following output:</span></span>  
  
```  
Count of white space nodes (not preserving whitespace): 0  
Count of white space nodes (preserving whitespace): 3  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Parse" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Save" />
        <altmember cref="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)" />
        <related type="Article" href="http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="edf68-259">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-259">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/d266f58d-f2f3-4668-b661-e716e658d13a">
          <span data-ttu-id="edf68-260">Consultando um XDocument versus consultando um XElement</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-260">Querying an XDocument vs. Querying an XElement</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XDocument Load (string uri, System.Xml.Linq.LoadOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XDocument Load(string uri, valuetype System.Xml.Linq.LoadOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (uri As String, options As LoadOptions) As XDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XDocument ^ Load(System::String ^ uri, System::Xml::Linq::LoadOptions options);" />
      <MemberSignature Language="F#" Value="static member Load : string * System.Xml.Linq.LoadOptions -&gt; System.Xml.Linq.XDocument" Usage="System.Xml.Linq.XDocument.Load (uri, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.String" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
      </Parameters>
      <Docs>
        <param name="uri">
          <span data-ttu-id="edf68-261">Uma cadeia de caracteres do URI que faz referência ao arquivo a ser carregado em um novo <see cref="T:System.Xml.Linq.XDocument" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-261">A URI string that references the file to load into a new <see cref="T:System.Xml.Linq.XDocument" />.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="edf68-262">
            <see cref="T:System.Xml.Linq.LoadOptions" /> que especificam o comportamento de espaço em branco e se serão carregadas as informações de linha e o URI base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-262">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="edf68-263">Cria um novo <see cref="T:System.Xml.Linq.XDocument" /> com base em um arquivo, opcionalmente, preservando os espaços em branco, definindo o URI base e retendo as informações de linha.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-263">Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from a file, optionally preserving white space, setting the base URI, and retaining line information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="edf68-264">Um <see cref="T:System.Xml.Linq.XDocument" /> que contém o conteúdo do arquivo especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-264">An <see cref="T:System.Xml.Linq.XDocument" /> that contains the contents of the specified file.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="edf68-265">Se o XML de origem é recuado, configurando o <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> sinalizador no `options` faz com que o leitor para ler todo o espaço em branco no XML de origem.</span><span class="sxs-lookup"><span data-stu-id="edf68-265">If the source XML is indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to read all white space in the source XML.</span></span> <span data-ttu-id="edf68-266">Nós de tipo <xref:System.Xml.Linq.XText> são criados para o espaço em branco significativo e irrisória.</span><span class="sxs-lookup"><span data-stu-id="edf68-266">Nodes of type <xref:System.Xml.Linq.XText> are created for both significant and insignificant white space.</span></span>  
  
 <span data-ttu-id="edf68-267">Se o XML de origem é recuado, não definindo a <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> sinalizador no `options` faz com que o leitor ignorar todo o espaço em branco insignificante no XML de origem.</span><span class="sxs-lookup"><span data-stu-id="edf68-267">If the source XML is indented, not setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to ignore all of the insignificant white space in the source XML.</span></span> <span data-ttu-id="edf68-268">A árvore XML é criada sem nenhum nó de texto de espaço em branco insignificante.</span><span class="sxs-lookup"><span data-stu-id="edf68-268">The XML tree is created without any text nodes for insignificant white space.</span></span>  
  
 <span data-ttu-id="edf68-269">Se o XML de origem não for recuado, definindo o <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> sinalizador no `options` não tem nenhum efeito.</span><span class="sxs-lookup"><span data-stu-id="edf68-269">If the source XML is not indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` has no effect.</span></span> <span data-ttu-id="edf68-270">Espaço em branco significativo é preservado, e não há nenhum intervalos de espaço em branco insignificante que poderiam causar a criação de mais nós de texto de espaço em branco.</span><span class="sxs-lookup"><span data-stu-id="edf68-270">Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.</span></span>  
  
 <span data-ttu-id="edf68-271">Para obter mais informações, consulte [preservar espaço em branco durante a análise de XML ou carregamento](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) e [preservar espaço em branco ao serializar](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span><span class="sxs-lookup"><span data-stu-id="edf68-271">For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
 <span data-ttu-id="edf68-272">Use <xref:System.Xml.Linq.XDocument.Parse%2A> para criar um <xref:System.Xml.Linq.XDocument> de uma cadeia de caracteres que contém XML.</span><span class="sxs-lookup"><span data-stu-id="edf68-272">Use <xref:System.Xml.Linq.XDocument.Parse%2A> to create an <xref:System.Xml.Linq.XDocument> from a string that contains XML.</span></span>  
  
 <span data-ttu-id="edf68-273">Há uma penalidade de desempenho, se você definir a <xref:System.Xml.Linq.LoadOptions.SetBaseUri> e o <xref:System.Xml.Linq.LoadOptions.SetLineInfo> sinalizadores.</span><span class="sxs-lookup"><span data-stu-id="edf68-273">There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetBaseUri> and the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flags.</span></span>  
  
 <span data-ttu-id="edf68-274">O URI de base e as informações de linha são precisas imediatamente após o carregamento do documento XML.</span><span class="sxs-lookup"><span data-stu-id="edf68-274">The base URI and the line information are accurate immediately after loading the XML document.</span></span> <span data-ttu-id="edf68-275">Se você modificar a árvore XML após o carregamento do documento, as informações de URI e a linha de base podem se tornar sem sentido.</span><span class="sxs-lookup"><span data-stu-id="edf68-275">If you modify the XML tree after loading the document, the base URI and line information may become meaningless.</span></span>  
  
 <span data-ttu-id="edf68-276">LINQ para a funcionalidade de carregamento do XML é compilado em cima <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="edf68-276">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="edf68-277">Portanto, você pode capturar todas as exceções geradas pelo <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> métodos de sobrecarga e a <xref:System.Xml.XmlReader> métodos que ler e analisar o documento.</span><span class="sxs-lookup"><span data-stu-id="edf68-277">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="edf68-278">O exemplo a seguir mostra como carregar um <xref:System.Xml.Linq.XDocument> de um arquivo.</span><span class="sxs-lookup"><span data-stu-id="edf68-278">The following example shows how to load an <xref:System.Xml.Linq.XDocument> from a file.</span></span>  
  
 <span data-ttu-id="edf68-279">Este exemplo usa o seguinte documento XML:</span><span class="sxs-lookup"><span data-stu-id="edf68-279">This example uses the following XML document:</span></span>  
  
 [<span data-ttu-id="edf68-280">Arquivo XML de exemplo: ordem de compra típica (LINQ to XML)</span><span class="sxs-lookup"><span data-stu-id="edf68-280">Sample XML File: Typical Purchase Order (LINQ to XML)</span></span>](http://msdn.microsoft.com/library/0606c09f-6e43-4f8d-95c8-e8e2e08d2348)  
  
```csharp  
XDocument doc1 = XDocument.Load("PurchaseOrder.xml", LoadOptions.None);  
Console.WriteLine("nodes if not preserving whitespace: {0}", doc1.DescendantNodes().Count());  
  
XDocument doc2 = XDocument.Load("PurchaseOrder.xml", LoadOptions.PreserveWhitespace);  
Console.WriteLine("nodes if preserving whitespace: {0}", doc2.DescendantNodes().Count());  
```  
  
```vb  
Dim doc1 As XDocument = XDocument.Load("PurchaseOrder.xml", LoadOptions.None)  
Console.WriteLine("nodes if not preserving whitespace: {0}", doc1.DescendantNodes().Count())  
  
Dim doc2 As XDocument = XDocument.Load("PurchaseOrder.xml", LoadOptions.PreserveWhitespace)  
Console.WriteLine("nodes if preserving whitespace: {0}", doc2.DescendantNodes().Count())  
```  
  
 <span data-ttu-id="edf68-281">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="edf68-281">This example produces the following output:</span></span>  
  
```  
nodes if not preserving whitespace: 48  
nodes if preserving whitespace: 82  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Parse" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Save" />
        <altmember cref="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)" />
        <related type="Article" href="http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="edf68-282">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-282">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/d266f58d-f2f3-4668-b661-e716e658d13a">
          <span data-ttu-id="edf68-283">Consultando um XDocument versus consultando um XElement</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-283">Querying an XDocument vs. Querying an XElement</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XDocument Load (System.Xml.XmlReader reader, System.Xml.Linq.LoadOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XDocument Load(class System.Xml.XmlReader reader, valuetype System.Xml.Linq.LoadOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (reader As XmlReader, options As LoadOptions) As XDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XDocument ^ Load(System::Xml::XmlReader ^ reader, System::Xml::Linq::LoadOptions options);" />
      <MemberSignature Language="F#" Value="static member Load : System.Xml.XmlReader * System.Xml.Linq.LoadOptions -&gt; System.Xml.Linq.XDocument" Usage="System.Xml.Linq.XDocument.Load (reader, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="edf68-284">Um <see cref="T:System.Xml.XmlReader" /> que será lido para o conteúdo do <see cref="T:System.Xml.Linq.XDocument" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-284">A <see cref="T:System.Xml.XmlReader" /> that will be read for the content of the <see cref="T:System.Xml.Linq.XDocument" />.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="edf68-285">Um <see cref="T:System.Xml.Linq.LoadOptions" /> que especifica se informações de linha e URI base devem ser carregadas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-285">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies whether to load base URI and line information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="edf68-286">Carrega um <see cref="T:System.Xml.Linq.XDocument" /> de um <see cref="T:System.Xml.XmlReader" />, configurando opcionalmente o URI de base e retendo informações de linha.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-286">Loads an <see cref="T:System.Xml.Linq.XDocument" /> from an <see cref="T:System.Xml.XmlReader" />, optionally setting the base URI, and retaining line information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="edf68-287">Um <see cref="T:System.Xml.Linq.XDocument" /> que contém o XML que foi lido do <see cref="T:System.Xml.XmlReader" /> especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-287">An <see cref="T:System.Xml.Linq.XDocument" /> that contains the XML that was read from the specified <see cref="T:System.Xml.XmlReader" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="edf68-288">Criando um <xref:System.Xml.XmlNodeReader> de um documento DOM e em seguida, usando o <xref:System.Xml.XmlNodeReader> para criar um <xref:System.Xml.Linq.XElement>, esse método pode ser usado para criar uma cópia de um documento DOM em uma árvore LINQ to XML.</span><span class="sxs-lookup"><span data-stu-id="edf68-288">By creating an <xref:System.Xml.XmlNodeReader> from a DOM document, and then using the <xref:System.Xml.XmlNodeReader> to create an <xref:System.Xml.Linq.XElement>, this method can be used to create a copy of a DOM document in a LINQ to XML tree.</span></span>  
  
 <span data-ttu-id="edf68-289">Use <xref:System.Xml.Linq.XDocument.Parse%2A> para criar um <xref:System.Xml.Linq.XDocument> de uma cadeia de caracteres que contém XML.</span><span class="sxs-lookup"><span data-stu-id="edf68-289">Use <xref:System.Xml.Linq.XDocument.Parse%2A> to create an <xref:System.Xml.Linq.XDocument> from a string that contains XML.</span></span>  
  
 <span data-ttu-id="edf68-290">Definindo <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> não é válido durante o carregamento de um <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="edf68-290">Setting <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> is not valid when loading from a <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="edf68-291">O <xref:System.Xml.XmlReader> será configurado para qualquer espaço em branco de leitura ou não.</span><span class="sxs-lookup"><span data-stu-id="edf68-291">The <xref:System.Xml.XmlReader> will be configured to either read whitespace or not.</span></span> <span data-ttu-id="edf68-292">A árvore LINQ to XML será preenchida com os nós de espaço em branco que as superfícies do leitor.</span><span class="sxs-lookup"><span data-stu-id="edf68-292">The LINQ to XML tree will be populated with the whitespace nodes that the reader surfaces.</span></span> <span data-ttu-id="edf68-293">Esse será o comportamento independentemente se <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> está definido ou não.</span><span class="sxs-lookup"><span data-stu-id="edf68-293">This will be the behavior regardless of whether <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> is set or not.</span></span>  
  
 <span data-ttu-id="edf68-294">O <xref:System.Xml.XmlReader> pode ter um URI de base válido ou não.</span><span class="sxs-lookup"><span data-stu-id="edf68-294">The <xref:System.Xml.XmlReader> may have a valid base URI or not.</span></span> <span data-ttu-id="edf68-295">Se você definir <xref:System.Xml.Linq.LoadOptions.SetBaseUri>, a base de URI será definido na árvore XML do URI de base que é reportada pelo <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="edf68-295">If you set <xref:System.Xml.Linq.LoadOptions.SetBaseUri>, the base URI will be set in the XML tree from the base URI that is reported by the <xref:System.Xml.XmlReader>.</span></span>  
  
 <span data-ttu-id="edf68-296">O <xref:System.Xml.XmlReader> pode ter informações de uma linha válida ou não.</span><span class="sxs-lookup"><span data-stu-id="edf68-296">The <xref:System.Xml.XmlReader> may have a valid line information or not.</span></span> <span data-ttu-id="edf68-297">Se você definir <xref:System.Xml.Linq.LoadOptions.SetLineInfo>, as informações de linha serão definidas na árvore XML com as informações de linha que são reportadas pelo <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="edf68-297">If you set <xref:System.Xml.Linq.LoadOptions.SetLineInfo>, the line information will be set in the XML tree from the line information that is reported by the <xref:System.Xml.XmlReader>.</span></span>  
  
 <span data-ttu-id="edf68-298">Há uma penalidade de desempenho, se você definir o <xref:System.Xml.Linq.LoadOptions.SetLineInfo> sinalizador.</span><span class="sxs-lookup"><span data-stu-id="edf68-298">There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag.</span></span>  
  
 <span data-ttu-id="edf68-299">As informações de linha são precisas imediatamente após o carregamento do documento XML.</span><span class="sxs-lookup"><span data-stu-id="edf68-299">The line information is accurate immediately after loading the XML document.</span></span> <span data-ttu-id="edf68-300">Se você modificar a árvore XML após o carregamento do documento, as informações de linha podem se tornar sem sentido.</span><span class="sxs-lookup"><span data-stu-id="edf68-300">If you modify the XML tree after loading the document, the line information may become meaningless.</span></span>  
  
 <span data-ttu-id="edf68-301">LINQ para a funcionalidade de carregamento do XML é compilado em cima <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="edf68-301">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="edf68-302">Portanto, você pode capturar todas as exceções geradas pelo <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> métodos de sobrecarga e a <xref:System.Xml.XmlReader> métodos que ler e analisar o documento.</span><span class="sxs-lookup"><span data-stu-id="edf68-302">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="edf68-303">O exemplo a seguir carrega as informações de linha que ele carrega a partir de <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="edf68-303">The following example loads the line information that it loads from the <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="edf68-304">Em seguida, imprime as informações de linha.</span><span class="sxs-lookup"><span data-stu-id="edf68-304">It then prints the line information.</span></span>  
  
```csharp  
string markup =  
@"<Root>  
    <Child>  
        <GrandChild/>  
    </Child>  
</Root>";  
  
// Create a reader and move to the content.  
using (XmlReader nodeReader = XmlReader.Create(new StringReader(markup)))  
{  
    // the reader must be in the Interactive state in order to  
    // Create a LINQ to XML tree from it.  
    nodeReader.MoveToContent();  
  
    XDocument xRoot = XDocument.Load(nodeReader, LoadOptions.SetLineInfo);  
    Console.WriteLine("{0}{1}{2}",  
        "Element Name".PadRight(20),  
        "Line".PadRight(5),  
        "Position");  
    Console.WriteLine("{0}{1}{2}",  
        "------------".PadRight(20),  
        "----".PadRight(5),  
        "--------");  
    foreach (XElement e in xRoot.Elements("Root").DescendantsAndSelf())  
        Console.WriteLine("{0}{1}{2}",  
            ("".PadRight(e.Ancestors().Count() * 2) + e.Name).PadRight(20),  
            ((IXmlLineInfo)e).LineNumber.ToString().PadRight(5),  
            ((IXmlLineInfo)e).LinePosition);  
}  
```  
  
```vb  
Dim markup As String = _  
    "<Root>" & Environment.NewLine & _  
    "    <Child>" & Environment.NewLine & _  
    "        <GrandChild/>" & Environment.NewLine & _  
    "    </Child>" & Environment.NewLine & _  
    "</Root>"  
  
' Create a reader and move to the content.  
Using nodeReader As XmlReader = XmlReader.Create(New StringReader(markup))  
  
    ' The reader must be in the Interactive state in order to  
    ' create a LINQ to XML tree from it.  
    nodeReader.MoveToContent()  
  
    Dim xRoot As XDocument = XDocument.Load(nodeReader, LoadOptions.SetLineInfo)  
    Console.WriteLine("{0}{1}{2}", _  
        "Element Name".PadRight(20), _  
        "Line".PadRight(5), _  
        "Position")  
    Console.WriteLine("{0}{1}{2}", _  
        "------------".PadRight(20), _  
        "----".PadRight(5), _  
        "--------")  
    For Each e As XElement In xRoot.Elements("Root").DescendantsAndSelf()  
        Console.WriteLine("{0}{1}{2}", _  
            ("".PadRight(e.Ancestors().Count() * 2) & e.Name.ToString()).PadRight(20), _  
            (DirectCast(e, IXmlLineInfo)).LineNumber.ToString().PadRight(5), _  
            (DirectCast(e, IXmlLineInfo)).LinePosition)  
    Next  
End Using  
```  
  
 <span data-ttu-id="edf68-305">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="edf68-305">This example produces the following output:</span></span>  
  
```  
Element Name        Line Position  
------------        ---- --------  
Root                1    2  
  Child             2    6  
    GrandChild      3    10  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Save" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Parse" />
        <related type="Article" href="http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="edf68-306">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-306">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/215bcf5b-284b-4d7e-a95a-8d8e241341a9">
          <span data-ttu-id="edf68-307">Como ler e escrever um documento codificado</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-307">How to: Read and Write an Encoded Document</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Xml.Linq.XDocument&gt; LoadAsync (System.IO.Stream stream, System.Xml.Linq.LoadOptions options, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Xml.Linq.XDocument&gt; LoadAsync(class System.IO.Stream stream, valuetype System.Xml.Linq.LoadOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.LoadAsync(System.IO.Stream,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task&lt;System::Xml::Linq::XDocument ^&gt; ^ LoadAsync(System::IO::Stream ^ stream, System::Xml::Linq::LoadOptions options, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member LoadAsync : System.IO.Stream * System.Xml.Linq.LoadOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Xml.Linq.XDocument&gt;" Usage="System.Xml.Linq.XDocument.LoadAsync (stream, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Xml.Linq.XDocument&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="stream">To be added.</param>
        <param name="options">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Xml.Linq.XDocument&gt; LoadAsync (System.IO.TextReader textReader, System.Xml.Linq.LoadOptions options, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Xml.Linq.XDocument&gt; LoadAsync(class System.IO.TextReader textReader, valuetype System.Xml.Linq.LoadOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.LoadAsync(System.IO.TextReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task&lt;System::Xml::Linq::XDocument ^&gt; ^ LoadAsync(System::IO::TextReader ^ textReader, System::Xml::Linq::LoadOptions options, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member LoadAsync : System.IO.TextReader * System.Xml.Linq.LoadOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Xml.Linq.XDocument&gt;" Usage="System.Xml.Linq.XDocument.LoadAsync (textReader, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Xml.Linq.XDocument&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textReader" Type="System.IO.TextReader" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="textReader">To be added.</param>
        <param name="options">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Xml.Linq.XDocument&gt; LoadAsync (System.Xml.XmlReader reader, System.Xml.Linq.LoadOptions options, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Xml.Linq.XDocument&gt; LoadAsync(class System.Xml.XmlReader reader, valuetype System.Xml.Linq.LoadOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.LoadAsync(System.Xml.XmlReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task&lt;System::Xml::Linq::XDocument ^&gt; ^ LoadAsync(System::Xml::XmlReader ^ reader, System::Xml::Linq::LoadOptions options, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member LoadAsync : System.Xml.XmlReader * System.Xml.Linq.LoadOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Xml.Linq.XDocument&gt;" Usage="System.Xml.Linq.XDocument.LoadAsync (reader, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Xml.Linq.XDocument&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="reader">To be added.</param>
        <param name="options">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNodeType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlNodeType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XDocument.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property NodeType As XmlNodeType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlNodeType NodeType { System::Xml::XmlNodeType get(); };" />
      <MemberSignature Language="F#" Value="member this.NodeType : System.Xml.XmlNodeType" Usage="System.Xml.Linq.XDocument.NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="edf68-308">Obtém o tipo de nó para este nó.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-308">Gets the node type for this node.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="edf68-309">O tipo de nó.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-309">The node type.</span>
          </span>
          <span data-ttu-id="edf68-310">Para objetos <see cref="T:System.Xml.Linq.XDocument" />, esse valor é <see cref="F:System.Xml.XmlNodeType.Document" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-310">For <see cref="T:System.Xml.Linq.XDocument" /> objects, this value is <see cref="F:System.Xml.XmlNodeType.Document" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="edf68-311">Como todas as classes que derivam <xref:System.Xml.Linq.XObject> contêm um <xref:System.Xml.Linq.XObject.NodeType%2A> propriedade, você pode escrever o código que opera em coleções de objetos em que o tipo de cada um é uma subclasse de <xref:System.Xml.Linq.XObject>.</span><span class="sxs-lookup"><span data-stu-id="edf68-311">Because all classes that derive from <xref:System.Xml.Linq.XObject> contain a <xref:System.Xml.Linq.XObject.NodeType%2A> property, you can write code that operates on collections of objects where the type of each is a subclass of <xref:System.Xml.Linq.XObject>.</span></span> <span data-ttu-id="edf68-312">O tipo de nó de cada objeto na coleção, em seguida, pode testar seu código.</span><span class="sxs-lookup"><span data-stu-id="edf68-312">Your code can then test for the node type of each object in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="edf68-313">O exemplo a seguir mostra o uso dessa propriedade.</span><span class="sxs-lookup"><span data-stu-id="edf68-313">The following example shows the use of this property.</span></span>  
  
```csharp  
// Note that this property uses XmlNodeType, which is in the System.Xml namespace.  
XDocument xmlTree = new XDocument(  
    new XDeclaration("1.0", "utf-8", "yes"),  
    new XElement("Root", "content")  
);  
Console.WriteLine(xmlTree.NodeType);  
```  
  
```vb  
' Note that this property uses XmlNodeType, which is in the System.Xml namespace.  
Dim xmlTree As XDocument = _  
    <?xml version='1.0' encoding='utf-8' standalone='yes'?>  
        <Root>content</Root>  
Console.WriteLine("{0}", xmlTree.NodeType)  
```  
  
 <span data-ttu-id="edf68-314">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="edf68-314">This example produces the following output:</span></span>  
  
```  
Document  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlNodeType" />
        <altmember cref="P:System.Xml.Linq.XDocument.DocumentType" />
        <related type="Article" href="http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="edf68-315">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-315">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="edf68-316">Cria um novo <see cref="T:System.Xml.Linq.XDocument" /> de uma cadeia de caracteres, com a opção de preservar espaços em branco, definir o URI base e reter as informações de linha.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-316">Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from a string, optionally preserving white space, setting the base URI, and retaining line information.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="edf68-317">Esse método se analisa uma cadeia de caracteres e cria uma árvore XML.</span><span class="sxs-lookup"><span data-stu-id="edf68-317">This method parses a string and creates an XML tree.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="edf68-318">O exemplo a seguir cria uma cadeia de caracteres que contém XML.</span><span class="sxs-lookup"><span data-stu-id="edf68-318">The following example creates a string that contains XML.</span></span> <span data-ttu-id="edf68-319">Em seguida, analisa a cadeia de caracteres em um <xref:System.Xml.Linq.XDocument>.</span><span class="sxs-lookup"><span data-stu-id="edf68-319">It then parses the string into an <xref:System.Xml.Linq.XDocument>.</span></span>  
  
```csharp  
string str =  
@"<?xml version=""1.0""?>  
<!-- comment at the root level -->  
<Root>  
    <Child>Content</Child>  
</Root>";  
XDocument doc = XDocument.Parse(str);  
Console.WriteLine(doc);  
```  
  
```vb  
Dim str As String = _  
    "<?xml version= '1.0'?>" & _  
    "<!-- comment at the root level -->" & _  
    "<Root>" & _  
    "  <Child>Content</Child>" & _  
    "</Root>"  
  
Dim doc As XDocument = XDocument.Parse(str)  
Console.WriteLine(doc)  
```  
  
 <span data-ttu-id="edf68-320">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="edf68-320">This example produces the following output:</span></span>  
  
```xml  
<!-- comment at the root level -->  
<Root>  
  <Child>Content</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Save" />
        <altmember cref="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)" />
        <related type="Article" href="http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="edf68-321">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-321">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/8bdfdca0-6738-47a4-af3b-6d36d85e4d28">
          <span data-ttu-id="edf68-322">Analisando XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-322">Parsing XML</span>
          </span>
        </related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XDocument Parse (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XDocument Parse(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (text As String) As XDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XDocument ^ Parse(System::String ^ text);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; System.Xml.Linq.XDocument" Usage="System.Xml.Linq.XDocument.Parse text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">
          <span data-ttu-id="edf68-323">Uma cadeia de caracteres que contém XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-323">A string that contains XML.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="edf68-324">Cria um novo <see cref="T:System.Xml.Linq.XDocument" /> com base em uma cadeia de caracteres.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-324">Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from a string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="edf68-325">Um <see cref="T:System.Xml.Linq.XDocument" /> populado com base na cadeia de caracteres que contém o XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-325">An <see cref="T:System.Xml.Linq.XDocument" /> populated from the string that contains XML.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="edf68-326">Esse método não preservar espaço em branco.</span><span class="sxs-lookup"><span data-stu-id="edf68-326">This method does not preserve white space.</span></span> <span data-ttu-id="edf68-327">Se você quiser preservar espaço em branco na árvore XML, use a sobrecarga de <xref:System.Xml.Linq.XDocument.Parse%2A> que usa <xref:System.Xml.Linq.LoadOptions> como um parâmetro.</span><span class="sxs-lookup"><span data-stu-id="edf68-327">If you want to preserve white space in the XML tree, use the overload of <xref:System.Xml.Linq.XDocument.Parse%2A> that takes <xref:System.Xml.Linq.LoadOptions> as a parameter.</span></span>  
  
 <span data-ttu-id="edf68-328">Para obter mais informações, consulte [preservar espaço em branco durante a análise de XML ou carregamento](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) e [preservar espaço em branco ao serializar](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span><span class="sxs-lookup"><span data-stu-id="edf68-328">For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
 <span data-ttu-id="edf68-329">LINQ para a funcionalidade de carregamento do XML é compilado em cima <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="edf68-329">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="edf68-330">Portanto, você pode capturar todas as exceções geradas pelo <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> métodos de sobrecarga e a <xref:System.Xml.XmlReader> métodos que ler e analisar o documento.</span><span class="sxs-lookup"><span data-stu-id="edf68-330">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="edf68-331">O exemplo a seguir cria uma cadeia de caracteres que contém XML.</span><span class="sxs-lookup"><span data-stu-id="edf68-331">The following example creates a string that contains XML.</span></span> <span data-ttu-id="edf68-332">Em seguida, analisa a cadeia de caracteres em um <xref:System.Xml.Linq.XDocument>.</span><span class="sxs-lookup"><span data-stu-id="edf68-332">It then parses the string into an <xref:System.Xml.Linq.XDocument>.</span></span>  
  
```csharp  
string str =  
@"<?xml version=""1.0""?>  
<!-- comment at the root level -->  
<Root>  
    <Child>Content</Child>  
</Root>";  
XDocument doc = XDocument.Parse(str);  
Console.WriteLine(doc);  
```  
  
```vb  
Dim str As String = _  
    "<?xml version= '1.0'?>" & _  
    "<!-- comment at the root level -->" & _  
    "<Root>" & _  
    "  <Child>Content</Child>" & _  
    "</Root>"  
  
Dim doc As XDocument = XDocument.Parse(str)  
Console.WriteLine(doc)  
```  
  
 <span data-ttu-id="edf68-333">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="edf68-333">This example produces the following output:</span></span>  
  
```xml  
<!-- comment at the root level -->  
<Root>  
  <Child>Content</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Save" />
        <altmember cref="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)" />
        <related type="Article" href="http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="edf68-334">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-334">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/8bdfdca0-6738-47a4-af3b-6d36d85e4d28">
          <span data-ttu-id="edf68-335">Analisando XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-335">Parsing XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XDocument Parse (string text, System.Xml.Linq.LoadOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XDocument Parse(string text, valuetype System.Xml.Linq.LoadOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.Parse(System.String,System.Xml.Linq.LoadOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (text As String, options As LoadOptions) As XDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XDocument ^ Parse(System::String ^ text, System::Xml::Linq::LoadOptions options);" />
      <MemberSignature Language="F#" Value="static member Parse : string * System.Xml.Linq.LoadOptions -&gt; System.Xml.Linq.XDocument" Usage="System.Xml.Linq.XDocument.Parse (text, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
      </Parameters>
      <Docs>
        <param name="text">
          <span data-ttu-id="edf68-336">Uma cadeia de caracteres que contém XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-336">A string that contains XML.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="edf68-337">
            <see cref="T:System.Xml.Linq.LoadOptions" /> que especificam o comportamento de espaço em branco e se serão carregadas as informações de linha e o URI base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-337">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="edf68-338">Cria um novo <see cref="T:System.Xml.Linq.XDocument" /> de uma cadeia de caracteres, com a opção de preservar espaços em branco, definir o URI base e reter as informações de linha.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-338">Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from a string, optionally preserving white space, setting the base URI, and retaining line information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="edf68-339">Um <see cref="T:System.Xml.Linq.XDocument" /> populado com base na cadeia de caracteres que contém o XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-339">An <see cref="T:System.Xml.Linq.XDocument" /> populated from the string that contains XML.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="edf68-340">Se o XML de origem é recuado, configurando o <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> sinalizador no `options` faz com que o leitor para ler todo o espaço em branco no XML de origem.</span><span class="sxs-lookup"><span data-stu-id="edf68-340">If the source XML is indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to read all white space in the source XML.</span></span> <span data-ttu-id="edf68-341">Nós de tipo <xref:System.Xml.Linq.XText> são criados para o espaço em branco significativo e irrisória.</span><span class="sxs-lookup"><span data-stu-id="edf68-341">Nodes of type <xref:System.Xml.Linq.XText> are created for both significant and insignificant white space.</span></span>  
  
 <span data-ttu-id="edf68-342">Se o XML de origem é recuado, não definindo a <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> sinalizador no `options` faz com que o leitor ignorar todo o espaço em branco insignificante no XML de origem.</span><span class="sxs-lookup"><span data-stu-id="edf68-342">If the source XML is indented, not setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to ignore all of the insignificant white space in the source XML.</span></span> <span data-ttu-id="edf68-343">A árvore XML é criada sem nenhum nó de texto de espaço em branco insignificante.</span><span class="sxs-lookup"><span data-stu-id="edf68-343">The XML tree is created without any text nodes for insignificant white space.</span></span>  
  
 <span data-ttu-id="edf68-344">Se o XML de origem não for recuado, definindo o <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> sinalizador no `options` não tem nenhum efeito.</span><span class="sxs-lookup"><span data-stu-id="edf68-344">If the source XML is not indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` has no effect.</span></span> <span data-ttu-id="edf68-345">Espaço em branco significativo é preservado, e não há nenhum intervalos de espaço em branco insignificante que poderiam causar a criação de mais nós de texto de espaço em branco.</span><span class="sxs-lookup"><span data-stu-id="edf68-345">Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.</span></span>  
  
 <span data-ttu-id="edf68-346">Para obter mais informações, consulte [preservar espaço em branco durante a análise de XML ou carregamento](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) e [preservar espaço em branco ao serializar](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span><span class="sxs-lookup"><span data-stu-id="edf68-346">For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
 <span data-ttu-id="edf68-347">Definindo <xref:System.Xml.Linq.LoadOptions.SetBaseUri> não é válido durante a análise de um <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="edf68-347">Setting <xref:System.Xml.Linq.LoadOptions.SetBaseUri> is not valid when parsing from a <xref:System.String>.</span></span>  
  
 <span data-ttu-id="edf68-348">Há uma penalidade de desempenho, se você definir o <xref:System.Xml.Linq.LoadOptions.SetLineInfo> sinalizador.</span><span class="sxs-lookup"><span data-stu-id="edf68-348">There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag.</span></span>  
  
 <span data-ttu-id="edf68-349">As informações de linha são precisas imediatamente após o carregamento do documento XML.</span><span class="sxs-lookup"><span data-stu-id="edf68-349">The line information is accurate immediately after loading the XML document.</span></span> <span data-ttu-id="edf68-350">Se você modificar a árvore XML após o carregamento do documento, as informações de linha podem se tornar sem sentido.</span><span class="sxs-lookup"><span data-stu-id="edf68-350">If you modify the XML tree after loading the document, the line information may become meaningless.</span></span>  
  
 <span data-ttu-id="edf68-351">LINQ para a funcionalidade de carregamento do XML é compilado em cima <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="edf68-351">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="edf68-352">Portanto, você pode capturar todas as exceções geradas pelo <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> métodos de sobrecarga e a <xref:System.Xml.XmlReader> métodos que ler e analisar o documento.</span><span class="sxs-lookup"><span data-stu-id="edf68-352">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="edf68-353">O exemplo a seguir analisa uma cadeia de caracteres em um <xref:System.Xml.Linq.XDocument>.</span><span class="sxs-lookup"><span data-stu-id="edf68-353">The following example parses a string into an <xref:System.Xml.Linq.XDocument>.</span></span>  
  
```csharp  
string str =  
@"<?xml version=""1.0""?>  
<!-- comment at the root level -->  
<Root>  
    <Child>Content</Child>  
</Root>";  
XDocument doc1 = XDocument.Parse(str, LoadOptions.PreserveWhitespace);  
Console.WriteLine("nodes when preserving whitespace: {0}", doc1.DescendantNodes().Count());  
XDocument doc2 = XDocument.Parse(str, LoadOptions.None);  
Console.WriteLine("nodes when not preserving whitespace: {0}", doc2.DescendantNodes().Count());  
```  
  
```vb  
Dim str As String = _  
"<?xml version= '1.0'?>" & Environment.NewLine & _  
"<!-- comment at the root level -->" & Environment.NewLine & _  
"<Root>" & Environment.NewLine & _  
"    <Child>Content</Child>"  & Environment.NewLine & _  
"</Root>"  
  
Dim doc1 As XDocument = XDocument.Parse(str, LoadOptions.PreserveWhitespace)  
Console.WriteLine("nodes when preserving whitespace: {0}", doc1.DescendantNodes().Count())  
Dim doc2 As XDocument = XDocument.Parse(str, LoadOptions.None)  
Console.WriteLine("nodes when not preserving whitespace: {0}", doc2.DescendantNodes().Count())  
```  
  
 <span data-ttu-id="edf68-354">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="edf68-354">This example produces the following output:</span></span>  
  
```  
nodes when preserving whitespace: 8  
nodes when not preserving whitespace: 4  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Save" />
        <altmember cref="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)" />
        <related type="Article" href="http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="edf68-355">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-355">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/8bdfdca0-6738-47a4-af3b-6d36d85e4d28">
          <span data-ttu-id="edf68-356">Analisando XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-356">Parsing XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Root">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XElement Root { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XElement Root" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XDocument.Root" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Root As XElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XElement ^ Root { System::Xml::Linq::XElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Root : System.Xml.Linq.XElement" Usage="System.Xml.Linq.XDocument.Root" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="edf68-357">Obtém o elemento raiz da Árvore XML desse documento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-357">Gets the root element of the XML Tree for this document.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="edf68-358">O <see cref="T:System.Xml.Linq.XElement" /> raiz da árvore XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-358">The root <see cref="T:System.Xml.Linq.XElement" /> of the XML tree.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="edf68-359">Essa propriedade é útil quando você deseja compor [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] consultas no mesmo contexto quando compondo-os para uma árvore enraizada em <xref:System.Xml.Linq.XElement>.</span><span class="sxs-lookup"><span data-stu-id="edf68-359">This property is useful when you want to compose [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] queries in the same context as when composing them for a tree rooted in <xref:System.Xml.Linq.XElement>.</span></span> <span data-ttu-id="edf68-360">Consulte [consultando um XDocument versus. Consultar um XElement](http://msdn.microsoft.com/library/d266f58d-f2f3-4668-b661-e716e658d13a) para obter mais detalhes.</span><span class="sxs-lookup"><span data-stu-id="edf68-360">See [Querying an XDocument vs. Querying an XElement](http://msdn.microsoft.com/library/d266f58d-f2f3-4668-b661-e716e658d13a) for more details.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="edf68-361">O exemplo a seguir usa essa propriedade para obter o elemento raiz de um documento.</span><span class="sxs-lookup"><span data-stu-id="edf68-361">The following example uses this property to get the root element of a document.</span></span>  
  
```csharp  
XDocument doc = new XDocument(  
    new XComment("This is a comment."),  
    new XElement("Pubs",   
        new XElement("Book",  
            new XElement("Title", "Artifacts of Roman Civilization"),  
            new XElement("Author", "Moreno, Jordao")  
        ),  
        new XElement("Book",  
            new XElement("Title", "Midieval Tools and Implements"),  
            new XElement("Author", "Gazit, Inbar")  
        )  
    ),  
    new XComment("This is another comment.")  
);  
Console.WriteLine(doc.Root.Name.ToString());  
```  
  
```vb  
Dim doc As XDocument = _  
    <?xml version="1.0" encoding="utf-8" standalone="yes"?>  
    <!--This is a comment.-->  
    <Pubs>  
        <Book>  
            <Title>Artifacts of Roman Civilization</Title>  
            <Author>Moreno, Jordao</Author>  
        </Book>  
        <Book>  
            <Title>Midieval Tools and Implements</Title>  
            <Author>Gazit, Inbar</Author>  
        </Book>  
        <!--This is another comment.-->  
    </Pubs>  
  
Console.WriteLine(doc.Root.Name.ToString())  
```  
  
 <span data-ttu-id="edf68-362">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="edf68-362">This example produces the following output:</span></span>  
  
```  
Pubs  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="edf68-363">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-363">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/69468b03-4f18-4d69-98a4-3fa90d904f08">
          <span data-ttu-id="edf68-364">Como: Localizar todos os nós em um namespace</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-364">How to: Find All Nodes in a Namespace</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Save">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="edf68-365">Serializa esse <see cref="T:System.Xml.Linq.XDocument" /> para um arquivo, um <see cref="T:System.IO.TextWriter" /> ou um <see cref="T:System.Xml.XmlWriter" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-365">Serializes this <see cref="T:System.Xml.Linq.XDocument" /> to a file, a <see cref="T:System.IO.TextWriter" />, or an <see cref="T:System.Xml.XmlWriter" />.</span>
          </span>
        </summary>
        <altmember cref="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Parse" />
        <related type="Article" href="http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="edf68-366">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-366">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/215bcf5b-284b-4d7e-a95a-8d8e241341a9">
          <span data-ttu-id="edf68-367">Como ler e escrever um documento codificado</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-367">How to: Read and Write an Encoded Document</span>
          </span>
        </related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.Save(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="member this.Save : System.IO.Stream -&gt; unit" Usage="xDocument.Save stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="edf68-368">O fluxo para o qual este <see cref="T:System.Xml.Linq.XDocument" /> será gerado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-368">The stream to output this <see cref="T:System.Xml.Linq.XDocument" /> to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="edf68-369">Gera este <see cref="T:System.Xml.Linq.XDocument" /> para o <see cref="T:System.IO.Stream" /> especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-369">Outputs this <see cref="T:System.Xml.Linq.XDocument" /> to the specified <see cref="T:System.IO.Stream" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="edf68-370">O XML serializado será recuado.</span><span class="sxs-lookup"><span data-stu-id="edf68-370">The serialized XML will be indented.</span></span> <span data-ttu-id="edf68-371">Todo o espaço em branco insignificante será removido e espaço em branco será adicionado para que o XML seja recuado corretamente.</span><span class="sxs-lookup"><span data-stu-id="edf68-371">All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented.</span></span> <span data-ttu-id="edf68-372">O comportamento desse método é que o espaço em branco insignificante não será preservado.</span><span class="sxs-lookup"><span data-stu-id="edf68-372">The behavior of this method is that insignificant white space will not be preserved.</span></span>  
  
 <span data-ttu-id="edf68-373">Se você quiser controlar o espaço em branco, use a sobrecarga de <xref:System.Xml.Linq.XDocument.Save%2A> que usa <xref:System.Xml.Linq.SaveOptions> como um parâmetro.</span><span class="sxs-lookup"><span data-stu-id="edf68-373">If you want to control white space, use the overload of <xref:System.Xml.Linq.XDocument.Save%2A> that takes <xref:System.Xml.Linq.SaveOptions> as a parameter.</span></span> <span data-ttu-id="edf68-374">Use o <xref:System.Xml.Linq.SaveOptions.DisableFormatting> opção para salvar o XML sem recuo.</span><span class="sxs-lookup"><span data-stu-id="edf68-374">Use the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> option to save unindented XML.</span></span> <span data-ttu-id="edf68-375">Isso fará com que o gravador gravar todos os espaços em branco exatamente conforme representado na árvore XML.</span><span class="sxs-lookup"><span data-stu-id="edf68-375">This will cause the writer to write all white spaces exactly as represented in the XML tree.</span></span>  
  
 <span data-ttu-id="edf68-376">Use <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> opção se você quiser remover declarações de namespace duplicadas.</span><span class="sxs-lookup"><span data-stu-id="edf68-376">Use <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> option if you want to remove duplicate namespace declarations.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.IO.TextWriter textWriter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.IO.TextWriter textWriter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::IO::TextWriter ^ textWriter);" />
      <MemberSignature Language="F#" Value="member this.Save : System.IO.TextWriter -&gt; unit" Usage="xDocument.Save textWriter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textWriter" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="textWriter">
          <span data-ttu-id="edf68-377">Um <see cref="T:System.IO.TextWriter" /> no qual o <see cref="T:System.Xml.Linq.XDocument" /> será gravado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-377">A <see cref="T:System.IO.TextWriter" /> that the <see cref="T:System.Xml.Linq.XDocument" /> will be written to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="edf68-378">Serialize este <see cref="T:System.Xml.Linq.XDocument" /> em um <see cref="T:System.IO.TextWriter" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-378">Serialize this <see cref="T:System.Xml.Linq.XDocument" /> to a <see cref="T:System.IO.TextWriter" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="edf68-379">O XML serializado será recuado.</span><span class="sxs-lookup"><span data-stu-id="edf68-379">The serialized XML will be indented.</span></span> <span data-ttu-id="edf68-380">Todo o espaço em branco insignificante será removido e espaço em branco será adicionado para que o XML seja recuado corretamente.</span><span class="sxs-lookup"><span data-stu-id="edf68-380">All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented.</span></span> <span data-ttu-id="edf68-381">O comportamento desse método é que o espaço em branco insignificante não será preservado.</span><span class="sxs-lookup"><span data-stu-id="edf68-381">The behavior of this method is that insignificant white space will not be preserved.</span></span>  
  
 <span data-ttu-id="edf68-382">Se você quiser controlar o espaço em branco, use a sobrecarga de <xref:System.Xml.Linq.XDocument.Save%2A> que usa <xref:System.Xml.Linq.SaveOptions> como um parâmetro.</span><span class="sxs-lookup"><span data-stu-id="edf68-382">If you want to control white space, use the overload of <xref:System.Xml.Linq.XDocument.Save%2A> that takes <xref:System.Xml.Linq.SaveOptions> as a parameter.</span></span> <span data-ttu-id="edf68-383">Para obter mais informações, consulte [preservar espaço em branco durante a análise de XML ou carregamento](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) e [preservar espaço em branco ao serializar](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span><span class="sxs-lookup"><span data-stu-id="edf68-383">For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="edf68-384">O exemplo a seguir cria uma <xref:System.Xml.Linq.XDocument>, salva o documento para um <xref:System.IO.StringWriter>e, em seguida, imprime a cadeia de caracteres para o console.</span><span class="sxs-lookup"><span data-stu-id="edf68-384">The following example creates an <xref:System.Xml.Linq.XDocument>, saves the document to a <xref:System.IO.StringWriter>, and then prints the string to the console.</span></span>  
  
```csharp  
StringBuilder sb = new StringBuilder();  
  
XDocument doc = new XDocument(  
    new XElement("Root",  
        new XElement("Child", "content")  
    )  
);  
TextWriter tr = new StringWriter(sb);  
doc.Save(tr);  
Console.WriteLine(sb.ToString());  
```  
  
```vb  
Dim sb As StringBuilder = New StringBuilder()  
  
Dim doc As XDocument = _   
    <?xml version="1.0" encoding="utf-8"?>  
        <Root><Child>content</Child></Root>  
  
Dim tr As TextWriter = New StringWriter(sb)  
doc.Save(tr)  
Console.WriteLine(sb.ToString())  
```  
  
 <span data-ttu-id="edf68-385">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="edf68-385">This example produces the following output:</span></span>  
  
```xml  
<?xml version="1.0" encoding="utf-16"?>  
<Root>  
  <Child>content</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Parse" />
        <related type="Article" href="http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="edf68-386">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-386">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/215bcf5b-284b-4d7e-a95a-8d8e241341a9">
          <span data-ttu-id="edf68-387">Como ler e escrever um documento codificado</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-387">How to: Read and Write an Encoded Document</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.Save(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.Save : string -&gt; unit" Usage="xDocument.Save fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="edf68-388">Uma cadeia de caracteres que contém o nome do arquivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-388">A string that contains the name of the file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="edf68-389">Serializar este <see cref="T:System.Xml.Linq.XDocument" /> em um arquivo, substituindo um arquivo existente, se ele existir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-389">Serialize this <see cref="T:System.Xml.Linq.XDocument" /> to a file, overwriting an existing file, if it exists.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="edf68-390">O XML serializado será recuado.</span><span class="sxs-lookup"><span data-stu-id="edf68-390">The serialized XML will be indented.</span></span> <span data-ttu-id="edf68-391">Todo o espaço em branco insignificante será removido e espaço em branco será adicionado para que o XML seja recuado corretamente.</span><span class="sxs-lookup"><span data-stu-id="edf68-391">All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented.</span></span> <span data-ttu-id="edf68-392">O comportamento desse método é que o espaço em branco insignificante não será preservado.</span><span class="sxs-lookup"><span data-stu-id="edf68-392">The behavior of this method is that insignificant white space will not be preserved.</span></span>  
  
 <span data-ttu-id="edf68-393">Se você quiser controlar o espaço em branco, use a sobrecarga de <xref:System.Xml.Linq.XDocument.Save%2A> que usa <xref:System.Xml.Linq.SaveOptions> como um parâmetro.</span><span class="sxs-lookup"><span data-stu-id="edf68-393">If you want to control white space, use the overload of <xref:System.Xml.Linq.XDocument.Save%2A> that takes <xref:System.Xml.Linq.SaveOptions> as a parameter.</span></span> <span data-ttu-id="edf68-394">Para obter mais informações, consulte [preservar espaço em branco durante a análise de XML ou carregamento](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) e [preservar espaço em branco ao serializar](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span><span class="sxs-lookup"><span data-stu-id="edf68-394">For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="edf68-395">O exemplo a seguir cria um <xref:System.Xml.Linq.XDocument>, salva o documento em um arquivo e, em seguida, imprime o arquivo para o console.</span><span class="sxs-lookup"><span data-stu-id="edf68-395">The following example creates an <xref:System.Xml.Linq.XDocument>, saves the document to a file, and then prints the file to the console.</span></span>  
  
```csharp  
XDocument doc = new XDocument(  
    new XElement("Root",  
        new XElement("Child", "content")  
    )  
);  
doc.Save("Root.xml");  
Console.WriteLine(File.ReadAllText("Root.xml"));  
```  
  
```vb  
Dim doc As XDocument = _   
    <?xml version="1.0" encoding="utf-8"?>  
        <Root><Child>content</Child></Root>  
  
doc.Save("Root.xml")  
Console.WriteLine(File.ReadAllText("Root.xml"))  
```  
  
 <span data-ttu-id="edf68-396">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="edf68-396">This example produces the following output:</span></span>  
  
```xml  
<?xml version="1.0" encoding="utf-8"?>  
<Root>  
  <Child>content</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Parse" />
        <related type="Article" href="http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="edf68-397">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-397">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/215bcf5b-284b-4d7e-a95a-8d8e241341a9">
          <span data-ttu-id="edf68-398">Como ler e escrever um documento codificado</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-398">How to: Read and Write an Encoded Document</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.Save(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (writer As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::Xml::XmlWriter ^ writer);" />
      <MemberSignature Language="F#" Value="member this.Save : System.Xml.XmlWriter -&gt; unit" Usage="xDocument.Save writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <span data-ttu-id="edf68-399">Um <see cref="T:System.Xml.XmlWriter" /> no qual o <see cref="T:System.Xml.Linq.XDocument" /> será gravado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-399">A <see cref="T:System.Xml.XmlWriter" /> that the <see cref="T:System.Xml.Linq.XDocument" /> will be written to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="edf68-400">Serializar esse <see cref="T:System.Xml.Linq.XDocument" /> para um <see cref="T:System.Xml.XmlWriter" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-400">Serialize this <see cref="T:System.Xml.Linq.XDocument" /> to an <see cref="T:System.Xml.XmlWriter" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="edf68-401">O exemplo a seguir mostra como salvar um <xref:System.Xml.Linq.XDocument> em um <xref:System.Xml.XmlWriter>.</span><span class="sxs-lookup"><span data-stu-id="edf68-401">The following example shows how to save an <xref:System.Xml.Linq.XDocument> to an <xref:System.Xml.XmlWriter>.</span></span>  
  
```csharp  
StringBuilder sb = new StringBuilder();  
XmlWriterSettings xws = new XmlWriterSettings();  
xws.OmitXmlDeclaration = true;  
xws.Indent = true;  
  
using (XmlWriter xw = XmlWriter.Create(sb, xws)) {  
    XDocument doc = new XDocument(  
        new XElement("Child",  
            new XElement("GrandChild", "some content")  
        )  
    );  
    doc.Save(xw);  
}  
  
Console.WriteLine(sb.ToString());  
```  
  
```vb  
Dim sb As StringBuilder = New StringBuilder()  
Dim xws As XmlWriterSettings = New XmlWriterSettings()  
xws.OmitXmlDeclaration = True  
xws.Indent = True  
  
Using xw = XmlWriter.Create(sb, xws)  
    Dim doc As XDocument = New XDocument(<Child><GrandChild>some content</GrandChild></Child>)  
    doc.Save(xw)  
  
End Using  
  
Console.WriteLine(sb.ToString())  
```  
  
 <span data-ttu-id="edf68-402">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="edf68-402">This example produces the following output:</span></span>  
  
```xml  
<Child>  
  <GrandChild>some content</GrandChild>  
</Child>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Parse" />
        <related type="Article" href="http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="edf68-403">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-403">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/215bcf5b-284b-4d7e-a95a-8d8e241341a9">
          <span data-ttu-id="edf68-404">Como ler e escrever um documento codificado</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-404">How to: Read and Write an Encoded Document</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.IO.Stream stream, System.Xml.Linq.SaveOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.IO.Stream stream, valuetype System.Xml.Linq.SaveOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::IO::Stream ^ stream, System::Xml::Linq::SaveOptions options);" />
      <MemberSignature Language="F#" Value="member this.Save : System.IO.Stream * System.Xml.Linq.SaveOptions -&gt; unit" Usage="xDocument.Save (stream, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Xml.Linq.SaveOptions" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="edf68-405">O fluxo para o qual este <see cref="T:System.Xml.Linq.XDocument" /> será gerado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-405">The stream to output this <see cref="T:System.Xml.Linq.XDocument" /> to.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="edf68-406">Um <see cref="T:System.Xml.Linq.SaveOptions" /> que especifica o comportamento de formatação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-406">A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="edf68-407">Gera esse <see cref="T:System.Xml.Linq.XDocument" /> para o <see cref="T:System.IO.Stream" /> especificado, com a opção de especificar o comportamento de formatação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-407">Outputs this <see cref="T:System.Xml.Linq.XDocument" /> to the specified <see cref="T:System.IO.Stream" />, optionally specifying formatting behavior.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="edf68-408">Por padrão o `options` são definidos como <xref:System.Xml.Linq.SaveOptions.None>.</span><span class="sxs-lookup"><span data-stu-id="edf68-408">By default the `options` are set to <xref:System.Xml.Linq.SaveOptions.None>.</span></span> <span data-ttu-id="edf68-409">Esta opção removerá todos os espaços em branco insignificante externos e adicionar espaços em branco insignificantes apropriado para que o XML é recuado corretamente.</span><span class="sxs-lookup"><span data-stu-id="edf68-409">This option will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.</span></span>  
  
 <span data-ttu-id="edf68-410">Se você quiser salvar sem-recuo XML, especifique o <xref:System.Xml.Linq.SaveOptions.DisableFormatting> sinalize para `options`.</span><span class="sxs-lookup"><span data-stu-id="edf68-410">If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`.</span></span> <span data-ttu-id="edf68-411">Isso fará com que o gravador gravar todos os espaços em branco exatamente conforme representado na árvore XML.</span><span class="sxs-lookup"><span data-stu-id="edf68-411">This will cause the writer to write all white spaces exactly as represented in the XML tree.</span></span>  
  
 <span data-ttu-id="edf68-412">Use <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> opção se você quiser remover declarações de namespace duplicadas.</span><span class="sxs-lookup"><span data-stu-id="edf68-412">Use <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> option if you want to remove duplicate namespace declarations.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.IO.TextWriter textWriter, System.Xml.Linq.SaveOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.IO.TextWriter textWriter, valuetype System.Xml.Linq.SaveOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::IO::TextWriter ^ textWriter, System::Xml::Linq::SaveOptions options);" />
      <MemberSignature Language="F#" Value="member this.Save : System.IO.TextWriter * System.Xml.Linq.SaveOptions -&gt; unit" Usage="xDocument.Save (textWriter, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textWriter" Type="System.IO.TextWriter" />
        <Parameter Name="options" Type="System.Xml.Linq.SaveOptions" />
      </Parameters>
      <Docs>
        <param name="textWriter">
          <span data-ttu-id="edf68-413">O <see cref="T:System.IO.TextWriter" /> para a saída do XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-413">The <see cref="T:System.IO.TextWriter" /> to output the XML to.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="edf68-414">Um <see cref="T:System.Xml.Linq.SaveOptions" /> que especifica o comportamento de formatação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-414">A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="edf68-415">Serialize <see cref="T:System.Xml.Linq.XDocument" /> em <see cref="T:System.IO.TextWriter" />, desabilitando a formatação de forma opcional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-415">Serialize this <see cref="T:System.Xml.Linq.XDocument" /> to a <see cref="T:System.IO.TextWriter" />, optionally disabling formatting.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="edf68-416">Se você quiser salvar sem-recuo XML, especifique o <xref:System.Xml.Linq.SaveOptions.DisableFormatting> sinalize para `options`.</span><span class="sxs-lookup"><span data-stu-id="edf68-416">If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`.</span></span> <span data-ttu-id="edf68-417">Isso fará com que o gravador gravar todos os espaços em branco exatamente conforme representado na árvore XML.</span><span class="sxs-lookup"><span data-stu-id="edf68-417">This will cause the writer to write all white space exactly as represented in the XML tree.</span></span>  
  
 <span data-ttu-id="edf68-418">Se você deseja salvar o XML recuado, não especifique o <xref:System.Xml.Linq.SaveOptions.DisableFormatting> sinalize para `options`.</span><span class="sxs-lookup"><span data-stu-id="edf68-418">If you want to save indented XML, do not specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`.</span></span> <span data-ttu-id="edf68-419">Isso removerá todos os espaços em branco insignificante externos e adicionar espaços em branco insignificantes apropriado para que o XML é recuado corretamente.</span><span class="sxs-lookup"><span data-stu-id="edf68-419">This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.</span></span> <span data-ttu-id="edf68-420">Este é o comportamento padrão e o comportamento das sobrecargas do <xref:System.Xml.Linq.XDocument.Save%2A> métodos que usam `options` como um parâmetro.</span><span class="sxs-lookup"><span data-stu-id="edf68-420">This is the default behavior, and the behavior of the overloads of the <xref:System.Xml.Linq.XDocument.Save%2A> methods that do not take `options` as a parameter.</span></span>  
  
 <span data-ttu-id="edf68-421">Para obter mais informações, consulte [preservar espaço em branco durante a análise de XML ou carregamento](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) e [preservar espaço em branco ao serializar](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span><span class="sxs-lookup"><span data-stu-id="edf68-421">For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="edf68-422">O exemplo a seguir mostra dois usos desse método.</span><span class="sxs-lookup"><span data-stu-id="edf68-422">The following example shows two uses of this method.</span></span> <span data-ttu-id="edf68-423">O primeiro uso serializa o <xref:System.Xml.Linq.XDocument> com formatação.</span><span class="sxs-lookup"><span data-stu-id="edf68-423">The first use serializes the <xref:System.Xml.Linq.XDocument> with formatting.</span></span> <span data-ttu-id="edf68-424">O segundo preserva espaço em branco.</span><span class="sxs-lookup"><span data-stu-id="edf68-424">The second preserves white space.</span></span> <span data-ttu-id="edf68-425">Porque o documento não contém nenhum espaço em branco como construída, preservando os espaços em branco gera XML sem nenhum recuo.</span><span class="sxs-lookup"><span data-stu-id="edf68-425">Because the document has no white space in it as constructed, preserving white space outputs the XML without any indenting.</span></span>  
  
```csharp  
XDocument doc = new XDocument(  
    new XElement("Root",  
        new XElement("Child", "content")  
    )  
);  
StringBuilder sb1 = new StringBuilder();  
using (StringWriter sr1 = new StringWriter(sb1)) {  
    doc.Save(sr1, SaveOptions.None);  
    Console.WriteLine(sb1.ToString());  
}  
  
StringBuilder sb2 = new StringBuilder();  
using (StringWriter sr2 = new StringWriter(sb2)) {  
    doc.Save(sr2, SaveOptions.DisableFormatting);  
    Console.WriteLine(sb2.ToString());  
}  
```  
  
```vb  
Dim doc As XDocument = _   
    <?xml version="1.0" encoding="utf-8"?>  
        <Root><Child>content</Child></Root>  
  
Dim sb1 As StringBuilder = New StringBuilder()  
  
Using sr1 = New StringWriter(sb1)  
    doc.Save(sr1, SaveOptions.None)  
    Console.WriteLine(sb1.ToString())  
End Using  
  
Dim sb2 As StringBuilder = New StringBuilder()  
  
Using sr2 = New StringWriter(sb2)  
    doc.Save(sr2, SaveOptions.DisableFormatting)  
    Console.WriteLine(sb2.ToString())  
End Using  
```  
  
 <span data-ttu-id="edf68-426">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="edf68-426">This example produces the following output:</span></span>  
  
```  
<?xml version="1.0" encoding="utf-16"?>  
<Root>  
  <Child>content</Child>  
</Root>  
<?xml version="1.0" encoding="utf-16"?><Root><Child>content</Child></Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Parse" />
        <related type="Article" href="http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="edf68-427">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-427">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/215bcf5b-284b-4d7e-a95a-8d8e241341a9">
          <span data-ttu-id="edf68-428">Como ler e escrever um documento codificado</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-428">How to: Read and Write an Encoded Document</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (string fileName, System.Xml.Linq.SaveOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(string fileName, valuetype System.Xml.Linq.SaveOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.Save(System.String,System.Xml.Linq.SaveOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (fileName As String, options As SaveOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::String ^ fileName, System::Xml::Linq::SaveOptions options);" />
      <MemberSignature Language="F#" Value="member this.Save : string * System.Xml.Linq.SaveOptions -&gt; unit" Usage="xDocument.Save (fileName, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="options" Type="System.Xml.Linq.SaveOptions" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="edf68-429">Uma cadeia de caracteres que contém o nome do arquivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-429">A string that contains the name of the file.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="edf68-430">Um <see cref="T:System.Xml.Linq.SaveOptions" /> que especifica o comportamento de formatação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-430">A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="edf68-431">Serialize este <see cref="T:System.Xml.Linq.XDocument" /> em um arquivo, desabilitando a formatação de forma opcional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-431">Serialize this <see cref="T:System.Xml.Linq.XDocument" /> to a file, optionally disabling formatting.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="edf68-432">Se você quiser salvar sem-recuo XML, especifique o <xref:System.Xml.Linq.SaveOptions.DisableFormatting> sinalize para `options`.</span><span class="sxs-lookup"><span data-stu-id="edf68-432">If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`.</span></span> <span data-ttu-id="edf68-433">Isso fará com que o gravador gravar todos os espaços em branco exatamente conforme representado na árvore XML.</span><span class="sxs-lookup"><span data-stu-id="edf68-433">This will cause the writer to write all white space exactly as represented in the XML tree.</span></span>  
  
 <span data-ttu-id="edf68-434">Se você deseja salvar o XML recuado, não especifique o <xref:System.Xml.Linq.SaveOptions.DisableFormatting> sinalize para `options`.</span><span class="sxs-lookup"><span data-stu-id="edf68-434">If you want to save indented XML, do not specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`.</span></span> <span data-ttu-id="edf68-435">Isso removerá todos os espaços em branco insignificante externos e adicionar espaços em branco insignificantes apropriado para que o XML é recuado corretamente.</span><span class="sxs-lookup"><span data-stu-id="edf68-435">This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.</span></span> <span data-ttu-id="edf68-436">Este é o comportamento padrão e o comportamento das sobrecargas do <xref:System.Xml.Linq.XDocument.Save%2A> métodos que usam `options` como um parâmetro.</span><span class="sxs-lookup"><span data-stu-id="edf68-436">This is the default behavior, and the behavior of the overloads of the <xref:System.Xml.Linq.XDocument.Save%2A> methods that do not take `options` as a parameter.</span></span>  
  
 <span data-ttu-id="edf68-437">Para obter mais informações, consulte [preservar espaço em branco durante a análise de XML ou carregamento](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) e [preservar espaço em branco ao serializar](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span><span class="sxs-lookup"><span data-stu-id="edf68-437">For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="edf68-438">O exemplo a seguir mostra dois usos desse método.</span><span class="sxs-lookup"><span data-stu-id="edf68-438">The following example shows two uses of this method.</span></span> <span data-ttu-id="edf68-439">O primeiro uso preserva espaço em branco.</span><span class="sxs-lookup"><span data-stu-id="edf68-439">The first use preserves white space.</span></span> <span data-ttu-id="edf68-440">Serializa o segundo é o <xref:System.Xml.Linq.XDocument> com recuo.</span><span class="sxs-lookup"><span data-stu-id="edf68-440">The second one serializes the <xref:System.Xml.Linq.XDocument> with indenting.</span></span>  
  
```csharp  
XDocument doc = new XDocument(  
    new XElement("Root",  
        new XElement("Child", "content")  
    )  
);  
doc.Save("Root1.xml", SaveOptions.DisableFormatting);  
Console.WriteLine(File.ReadAllText("Root1.xml"));  
doc.Save("Root2.xml", SaveOptions.None);  
Console.WriteLine(File.ReadAllText("Root2.xml"));  
```  
  
```vb  
Dim doc As XDocument = _   
    <?xml version="1.0" encoding="utf-8"?>  
        <Root><Child>content</Child></Root>  
  
doc.Save("Root1.xml", SaveOptions.DisableFormatting)  
Console.WriteLine(File.ReadAllText("Root1.xml"))  
doc.Save("Root2.xml", SaveOptions.None)  
Console.WriteLine(File.ReadAllText("Root2.xml"))  
```  
  
 <span data-ttu-id="edf68-441">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="edf68-441">This example produces the following output:</span></span>  
  
```  
<?xml version="1.0" encoding="utf-8"?><Root><Child>content</Child></Root>  
<?xml version="1.0" encoding="utf-8"?>  
<Root>  
  <Child>content</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Parse" />
        <related type="Article" href="http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="edf68-442">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-442">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/215bcf5b-284b-4d7e-a95a-8d8e241341a9">
          <span data-ttu-id="edf68-443">Como ler e escrever um documento codificado</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-443">How to: Read and Write an Encoded Document</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="SaveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SaveAsync (System.Xml.XmlWriter writer, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SaveAsync(class System.Xml.XmlWriter writer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.SaveAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ SaveAsync(System::Xml::XmlWriter ^ writer, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.SaveAsync : System.Xml.XmlWriter * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="xDocument.SaveAsync (writer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SaveAsync (System.IO.Stream stream, System.Xml.Linq.SaveOptions options, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SaveAsync(class System.IO.Stream stream, valuetype System.Xml.Linq.SaveOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.SaveAsync(System.IO.Stream,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ SaveAsync(System::IO::Stream ^ stream, System::Xml::Linq::SaveOptions options, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.SaveAsync : System.IO.Stream * System.Xml.Linq.SaveOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="xDocument.SaveAsync (stream, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Xml.Linq.SaveOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="stream">To be added.</param>
        <param name="options">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SaveAsync (System.IO.TextWriter textWriter, System.Xml.Linq.SaveOptions options, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SaveAsync(class System.IO.TextWriter textWriter, valuetype System.Xml.Linq.SaveOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.SaveAsync(System.IO.TextWriter,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ SaveAsync(System::IO::TextWriter ^ textWriter, System::Xml::Linq::SaveOptions options, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.SaveAsync : System.IO.TextWriter * System.Xml.Linq.SaveOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="xDocument.SaveAsync (textWriter, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textWriter" Type="System.IO.TextWriter" />
        <Parameter Name="options" Type="System.Xml.Linq.SaveOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="textWriter">To be added.</param>
        <param name="options">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteTo">
      <MemberSignature Language="C#" Value="public override void WriteTo (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteTo(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteTo (writer As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteTo(System::Xml::XmlWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.WriteTo : System.Xml.XmlWriter -&gt; unit" Usage="xDocument.WriteTo writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <span data-ttu-id="edf68-444">Um <see cref="T:System.Xml.XmlWriter" /> no qual esse método gravará.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-444">An <see cref="T:System.Xml.XmlWriter" /> into which this method will write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="edf68-445">Gravar este documento em um <see cref="T:System.Xml.XmlWriter" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-445">Write this document to an <see cref="T:System.Xml.XmlWriter" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="edf68-446">O exemplo a seguir mostra como escrever um <xref:System.Xml.Linq.XDocument> para um <xref:System.Xml.XmlWriter>.</span><span class="sxs-lookup"><span data-stu-id="edf68-446">The following example shows how to write an <xref:System.Xml.Linq.XDocument> to an <xref:System.Xml.XmlWriter>.</span></span> <span data-ttu-id="edf68-447">Observe que o exemplo não escreveu uma declaração XML.</span><span class="sxs-lookup"><span data-stu-id="edf68-447">Note that the example did not write an XML declaration.</span></span>  
  
```csharp  
StringBuilder sb = new StringBuilder();  
XmlWriterSettings xws = new XmlWriterSettings();  
xws.OmitXmlDeclaration = true;  
xws.Indent = true;  
  
using (XmlWriter xw = XmlWriter.Create(sb, xws))  
{  
    XDocument doc = new XDocument(  
        new XElement("Child",  
            new XElement("GrandChild", "some content")  
        )  
    );  
    doc.WriteTo(xw);  
}  
  
Console.WriteLine(sb.ToString());  
```  
  
```vb  
Dim sb As StringBuilder = New StringBuilder()  
Dim xws As XmlWriterSettings = New XmlWriterSettings()  
xws.OmitXmlDeclaration = True  
xws.Indent = True  
  
Using xw = XmlWriter.Create(sb, xws)  
    Dim doc As XDocument = New XDocument(<Child><GrandChild>some content</GrandChild></Child>)  
    doc.WriteTo(xw)  
End Using  
  
Console.WriteLine(sb.ToString())  
```  
  
 <span data-ttu-id="edf68-448">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="edf68-448">This example produces the following output:</span></span>  
  
```xml  
<Child>  
  <GrandChild>some content</GrandChild>  
</Child>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Save" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Parse" />
        <related type="Article" href="http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="edf68-449">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="edf68-449">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="WriteToAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task WriteToAsync (System.Xml.XmlWriter writer, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task WriteToAsync(class System.Xml.XmlWriter writer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ WriteToAsync(System::Xml::XmlWriter ^ writer, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.WriteToAsync : System.Xml.XmlWriter * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="xDocument.WriteToAsync (writer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>