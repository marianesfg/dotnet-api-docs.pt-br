<Type Name="XContainer" FullName="System.Xml.Linq.XContainer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="975ff3e595a7e42b32687e50bd64d6eefc73e39b" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class XContainer : System.Xml.Linq.XNode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit XContainer extends System.Xml.Linq.XNode" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Linq.XContainer" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class XContainer&#xA;Inherits XNode" />
  <TypeSignature Language="C++ CLI" Value="public ref class XContainer abstract : System::Xml::Linq::XNode" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XDocument</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Linq</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xml.Linq.XNode</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="4b3a3-101">Representa um nó que pode conter outros nós.</span>
      <span class="sxs-lookup">
        <span data-stu-id="4b3a3-101">Represents a node that can contain other nodes.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b3a3-102">Essa classe fornece funcionalidades como localizar o nó irmão anterior ou seguinte, ou enumerar os filhos diretos de um nó.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-102">This class provides functionality such as finding the next or previous sibling node, or enumerating the direct children of a node.</span></span>  
  
 <span data-ttu-id="4b3a3-103">As duas classes que derivam de <xref:System.Xml.Linq.XContainer> são <xref:System.Xml.Linq.XDocument> e <xref:System.Xml.Linq.XElement>.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-103">The two classes that derive from <xref:System.Xml.Linq.XContainer> are <xref:System.Xml.Linq.XDocument> and <xref:System.Xml.Linq.XElement>.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4b3a3-104">Adiciona o conteúdo especificado como filhos deste <see cref="T:System.Xml.Linq.XContainer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b3a3-104">Adds the specified content as children to this <see cref="T:System.Xml.Linq.XContainer" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b3a3-105">Este método adiciona o novo conteúdo após o conteúdo existente do <xref:System.Xml.Linq.XContainer>.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-105">This method adds the new content after the existing content of the <xref:System.Xml.Linq.XContainer>.</span></span>  
  
 <span data-ttu-id="4b3a3-106">Para obter detalhes sobre o conteúdo válido que pode ser passado para esta função, consulte [conteúdo válido de XElement e XDocument objetos](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="4b3a3-106">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="4b3a3-107">Esse método gerará o <xref:System.Xml.Linq.XObject.Changed> e <xref:System.Xml.Linq.XObject.Changing> eventos.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-107">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4b3a3-108">O exemplo a seguir cria duas árvores XML e, em seguida, usa esse método para adicionar os resultados de uma consulta para um deles.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-108">The following example creates two XML trees, and then uses this method to add the results of a query to one of them.</span></span>  
  
```csharp  
XElement srcTree = new XElement("Root",  
    new XElement("Element1", 1),  
    new XElement("Element2", 2),  
    new XElement("Element3", 3),  
    new XElement("Element4", 4),  
    new XElement("Element5", 5)  
);  
XElement xmlTree = new XElement("Root",  
    new XElement("NewElement", "Content")  
);  
xmlTree.Add(  
    from el in srcTree.Elements()  
    where (int)el >= 3  
    select el  
);  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim srcTree As XElement = _  
        <Root>  
            <Element1>1</Element1>  
            <Element2>2</Element2>  
            <Element3>3</Element3>  
            <Element4>4</Element4>  
            <Element5>5</Element5>  
        </Root>  
Dim xmlTree As XElement = _   
        <Root>  
            <NewElement>Content</NewElement>  
        </Root>  
xmlTree.Add( _  
    From el In srcTree.Elements _  
    Where CInt(el) >= 3 _  
    Select el)  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="4b3a3-109">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="4b3a3-109">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <NewElement>Content</NewElement>  
  <Element3>3</Element3>  
  <Element4>4</Element4>  
  <Element5>5</Element5>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XContainer.AddFirst" />
        <altmember cref="M:System.Xml.Linq.XContainer.RemoveNodes" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.ReplaceNodes" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (object content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(object content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (content As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Object ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="content">
          <span data-ttu-id="4b3a3-110">Um objeto de conteúdo que contém o conteúdo simples ou uma coleção de objetos de conteúdo a ser adicionada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b3a3-110">A content object containing simple content or a collection of content objects to be added.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4b3a3-111">Adiciona o conteúdo especificado como filhos deste <see cref="T:System.Xml.Linq.XContainer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b3a3-111">Adds the specified content as children of this <see cref="T:System.Xml.Linq.XContainer" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b3a3-112">Este método adiciona o novo conteúdo após o conteúdo existente do <xref:System.Xml.Linq.XContainer>.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-112">This method adds the new content after the existing content of the <xref:System.Xml.Linq.XContainer>.</span></span>  
  
 <span data-ttu-id="4b3a3-113">Para obter detalhes sobre o conteúdo válido que pode ser passado para esta função, consulte [conteúdo válido de XElement e XDocument objetos](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="4b3a3-113">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="4b3a3-114">Esse método gerará o <xref:System.Xml.Linq.XObject.Changed> e <xref:System.Xml.Linq.XObject.Changing> eventos.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-114">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4b3a3-115">O exemplo a seguir cria duas árvores XML e, em seguida, usa esse método para adicionar um <xref:System.Xml.Linq.XElement> objeto para um deles.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-115">The following example creates two XML trees, and then uses this method to add an <xref:System.Xml.Linq.XElement> object to one of them.</span></span> <span data-ttu-id="4b3a3-116">Ele também adiciona os resultados de uma [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] consulta para a árvore XML.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-116">It also adds the results of a [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] query to the XML tree.</span></span>  
  
```csharp  
XElement srcTree = new XElement("Root",  
    new XElement("Element1", 1),  
    new XElement("Element2", 2),  
    new XElement("Element3", 3),  
    new XElement("Element4", 4),  
    new XElement("Element5", 5)  
);  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5)  
);  
xmlTree.Add(new XElement("NewChild", "new content"));  
xmlTree.Add(  
    from el in srcTree.Elements()  
    where (int)el > 3  
    select el  
);  
// Even though Child9 does not exist in srcTree, the following statement will not  
// throw an exception, and nothing will be added to xmlTree.  
xmlTree.Add(srcTree.Element("Child9"));  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim srcTree As XElement = _   
        <Root>  
            <Element1>1</Element1>  
            <Element2>2</Element2>  
            <Element3>3</Element3>  
            <Element4>4</Element4>  
            <Element5>5</Element5>  
        </Root>  
  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
        </Root>  
  
xmlTree.Add(New XElement("NewChild", "new content"))  
xmlTree.Add( _  
    From el In srcTree.Elements() _  
    Where CInt(el) > 3 _  
    Select el _  
)  
' Even though Child9 does not exist in srcTree, the following statement will not  
' throw an exception, and nothing will be added to xmlTree.  
xmlTree.Add(srcTree.<Child9>)  
Console.WriteLine(xmlTree)  
  
```  
  
 <span data-ttu-id="4b3a3-117">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="4b3a3-117">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child1>1</Child1>  
  <Child2>2</Child2>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
  <NewChild>new content</NewChild>  
  <Element4>4</Element4>  
  <Element5>5</Element5>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XContainer.AddFirst" />
        <altmember cref="M:System.Xml.Linq.XContainer.RemoveNodes" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.ReplaceNodes" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (params object[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(object[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.Add(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (ParamArray content As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(... cli::array &lt;System::Object ^&gt; ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="content">
          <span data-ttu-id="4b3a3-118">Uma lista de parâmetros de objetos de conteúdo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b3a3-118">A parameter list of content objects.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4b3a3-119">Adiciona o conteúdo especificado como filhos deste <see cref="T:System.Xml.Linq.XContainer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b3a3-119">Adds the specified content as children of this <see cref="T:System.Xml.Linq.XContainer" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b3a3-120">Este método adiciona o novo conteúdo após o conteúdo existente do <xref:System.Xml.Linq.XContainer>.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-120">This method adds the new content after the existing content of the <xref:System.Xml.Linq.XContainer>.</span></span>  
  
 <span data-ttu-id="4b3a3-121">Para obter detalhes sobre o conteúdo válido que pode ser passado para esta função, consulte [conteúdo válido de XElement e XDocument objetos](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="4b3a3-121">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="4b3a3-122">Esse método gerará o <xref:System.Xml.Linq.XObject.Changed> e <xref:System.Xml.Linq.XObject.Changing> eventos.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-122">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4b3a3-123">O exemplo a seguir cria duas árvores XML, usa esse método para adicionar um <xref:System.Xml.Linq.XElement> objeto para um deles.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-123">The following example creates two XML trees, uses this method to add an <xref:System.Xml.Linq.XElement> object to one of them.</span></span> <span data-ttu-id="4b3a3-124">Ele também adiciona os resultados de uma [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] consulta para a árvore XML.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-124">It also adds the results of a [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] query to the XML tree.</span></span>  
  
```csharp  
XElement srcTree = new XElement("Root",  
    new XElement("Element1", 1),  
    new XElement("Element2", 2),  
    new XElement("Element3", 3),  
    new XElement("Element4", 4),  
    new XElement("Element5", 5)  
);  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5)  
);  
xmlTree.Add(new XElement("NewChild", "new content"));  
xmlTree.Add(  
    from el in srcTree.Elements()  
    where (int)el > 3  
    select el  
);  
// Even though Child9 does not exist in srcTree, the following statement will not  
// throw an exception, and nothing will be added to xmlTree  
xmlTree.Add(srcTree.Element("Child9"));  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim srcTree As XElement = _   
        <Root>  
            <Element1>1</Element1>  
            <Element2>2</Element2>  
            <Element3>3</Element3>  
            <Element4>4</Element4>  
            <Element5>5</Element5>  
        </Root>  
  
Dim xmlTree As XElement = _  
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
        </Root>  
  
xmlTree.Add(New XElement("NewChild", "new content"))  
xmlTree.Add( _  
    From el In srcTree.Elements() _  
    Where CInt(el) > 3 _  
    Select el _  
)  
' Even though Child9 does not exist in srcTree, the following statement will not  
' throw an exception, and nothing will be added to xmlTree  
xmlTree.Add(srcTree.<Child9>)  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="4b3a3-125">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="4b3a3-125">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child1>1</Child1>  
  <Child2>2</Child2>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
  <NewChild>new content</NewChild>  
  <Element4>4</Element4>  
  <Element5>5</Element5>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XContainer.AddFirst" />
        <altmember cref="M:System.Xml.Linq.XContainer.RemoveNodes" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.ReplaceNodes" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AddFirst">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4b3a3-126">Adiciona o conteúdo especificado como os primeiros filhos desse documento ou elemento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b3a3-126">Adds the specified content as the first children of this document or element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b3a3-127">Este método adiciona o novo conteúdo antes do conteúdo existente do <xref:System.Xml.Linq.XContainer>.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-127">This method adds the new content before the existing content of the <xref:System.Xml.Linq.XContainer>.</span></span>  
  
 <span data-ttu-id="4b3a3-128">Para obter detalhes sobre o conteúdo válido que pode ser passado para esta função, consulte [conteúdo válido de XElement e XDocument objetos](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="4b3a3-128">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="4b3a3-129">Esse método gerará o <xref:System.Xml.Linq.XObject.Changed> e <xref:System.Xml.Linq.XObject.Changing> eventos.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-129">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4b3a3-130">O exemplo a seguir cria duas árvores XML e, em seguida, usa esse método para adicionar os resultados de uma consulta para um deles.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-130">The following example creates two XML trees, and then uses this method to add the results of a query to one of them.</span></span>  
  
```csharp  
XElement srcTree = new XElement("Root",  
    new XElement("Element1", 1),  
    new XElement("Element2", 2),  
    new XElement("Element3", 3),  
    new XElement("Element4", 4),  
    new XElement("Element5", 5)  
);  
XElement xmlTree = new XElement("Root",  
    new XElement("NewElement", "Content")  
);  
xmlTree.AddFirst(  
    from el in srcTree.Elements()  
    where (int)el >= 3  
    select el  
);  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim srcTree As XElement = _   
        <Root>  
            <Element1>1</Element1>  
            <Element2>2</Element2>  
            <Element3>3</Element3>  
            <Element4>4</Element4>  
            <Element5>5</Element5>  
        </Root>  
Dim xmlTree As XElement = <Root>  
                              <NewElement>Content</NewElement>  
                          </Root>  
xmlTree.AddFirst( _  
    From el In srcTree.Elements _  
    Where CInt(el) >= 3 _  
    Select el)  
Console.WriteLine(xmlTree)  
  
```  
  
 <span data-ttu-id="4b3a3-131">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="4b3a3-131">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Element3>3</Element3>  
  <Element4>4</Element4>  
  <Element5>5</Element5>  
  <NewElement>Content</NewElement>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XContainer.Add" />
        <altmember cref="M:System.Xml.Linq.XContainer.RemoveNodes" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.ReplaceNodes" />
      </Docs>
    </MemberGroup>
    <Member MemberName="AddFirst">
      <MemberSignature Language="C#" Value="public void AddFirst (object content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddFirst(object content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.AddFirst(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddFirst (content As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddFirst(System::Object ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="content">
          <span data-ttu-id="4b3a3-132">Um objeto de conteúdo que contém o conteúdo simples ou uma coleção de objetos de conteúdo a ser adicionada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b3a3-132">A content object containing simple content or a collection of content objects to be added.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4b3a3-133">Adiciona o conteúdo especificado como os primeiros filhos desse documento ou elemento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b3a3-133">Adds the specified content as the first children of this document or element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b3a3-134">Este método adiciona o novo conteúdo antes do conteúdo existente do <xref:System.Xml.Linq.XContainer>.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-134">This method adds the new content before the existing content of the <xref:System.Xml.Linq.XContainer>.</span></span>  
  
 <span data-ttu-id="4b3a3-135">Para obter detalhes sobre o conteúdo válido que pode ser passado para esta função, consulte [conteúdo válido de XElement e XDocument objetos](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="4b3a3-135">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="4b3a3-136">Esse método gerará o <xref:System.Xml.Linq.XObject.Changed> e <xref:System.Xml.Linq.XObject.Changing> eventos.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-136">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4b3a3-137">O exemplo a seguir cria duas árvores XML, usa esse método para adicionar um <xref:System.Xml.Linq.XElement> objeto como o primeiro elemento em um deles.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-137">The following example creates two XML trees, uses this method to add an <xref:System.Xml.Linq.XElement> object as the first element to one of them.</span></span> <span data-ttu-id="4b3a3-138">Ele também adiciona os resultados de uma [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] consulta para a árvore XML.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-138">It also adds the results of a [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] query to the XML tree.</span></span>  
  
```csharp  
XElement srcTree = new XElement("Root",  
    new XElement("Element1", 1),  
    new XElement("Element2", 2),  
    new XElement("Element3", 3),  
    new XElement("Element4", 4),  
    new XElement("Element5", 5)  
);  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5)  
);  
xmlTree.AddFirst(new XElement("NewChild", "new content"));  
xmlTree.AddFirst(  
    from el in srcTree.Elements()  
    where (int)el > 3  
    select el  
);  
// Even though Child9 does not exist in srcTree, the following statement will not  
// throw an exception, and nothing will be added to xmlTree  
xmlTree.AddFirst(srcTree.Element("Child9"));  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim srcTree As XElement = _   
        <Root>  
            <Element1>1</Element1>  
            <Element2>2</Element2>  
            <Element3>3</Element3>  
            <Element4>4</Element4>  
            <Element5>5</Element5>  
        </Root>  
  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
        </Root>  
  
xmlTree.AddFirst(New XElement("NewChild", "new content"))  
xmlTree.AddFirst( _  
    From el In srcTree.Elements() _  
    Where CInt(el) > 3 _  
    Select el _  
)  
' Even though Child9 does not exist in srcTree, the following statement will not  
' throw an exception, and nothing will be added to xmlTree  
xmlTree.AddFirst(srcTree.<Child9>)  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="4b3a3-139">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="4b3a3-139">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Element4>4</Element4>  
  <Element5>5</Element5>  
  <NewChild>new content</NewChild>  
  <Child1>1</Child1>  
  <Child2>2</Child2>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XContainer.Add" />
        <altmember cref="M:System.Xml.Linq.XContainer.RemoveNodes" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.ReplaceNodes" />
      </Docs>
    </Member>
    <Member MemberName="AddFirst">
      <MemberSignature Language="C#" Value="public void AddFirst (params object[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddFirst(object[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.AddFirst(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddFirst (ParamArray content As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddFirst(... cli::array &lt;System::Object ^&gt; ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="content">
          <span data-ttu-id="4b3a3-140">Uma lista de parâmetros de objetos de conteúdo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b3a3-140">A parameter list of content objects.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4b3a3-141">Adiciona o conteúdo especificado como os primeiros filhos desse documento ou elemento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b3a3-141">Adds the specified content as the first children of this document or element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b3a3-142">Este método adiciona o novo conteúdo antes do conteúdo existente do <xref:System.Xml.Linq.XContainer>.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-142">This method adds the new content before the existing content of the <xref:System.Xml.Linq.XContainer>.</span></span>  
  
 <span data-ttu-id="4b3a3-143">Para obter detalhes sobre o conteúdo válido que pode ser passado para esta função, consulte [conteúdo válido de XElement e XDocument objetos](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="4b3a3-143">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="4b3a3-144">Esse método gerará o <xref:System.Xml.Linq.XObject.Changed> e <xref:System.Xml.Linq.XObject.Changing> eventos.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-144">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4b3a3-145">O exemplo a seguir cria duas árvores XML e usa esse método para adicionar um <xref:System.Xml.Linq.XElement> objeto como o primeiro elemento em um deles.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-145">The following example creates two XML trees, and uses this method to add an <xref:System.Xml.Linq.XElement> object as the first element to one of them.</span></span> <span data-ttu-id="4b3a3-146">Ele também adiciona os resultados de uma [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] consulta para a árvore XML.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-146">It also adds the results of a [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] query to the XML tree.</span></span>  
  
```csharp  
XElement srcTree = new XElement("Root",  
    new XElement("Element1", 1),  
    new XElement("Element2", 2),  
    new XElement("Element3", 3),  
    new XElement("Element4", 4),  
    new XElement("Element5", 5)  
);  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5)  
);  
xmlTree.AddFirst(new XElement("NewChild", "new content"));  
xmlTree.AddFirst(  
    from el in srcTree.Elements()  
    where (int)el > 3  
    select el  
);  
// Even though Child9 does not exist in srcTree, the following statement will not  
// throw an exception, and nothing will be added to xmlTree.  
xmlTree.AddFirst(srcTree.Element("Child9"));  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim srcTree As XElement = _   
        <Root>  
            <Element1>1</Element1>  
            <Element2>2</Element2>  
            <Element3>3</Element3>  
            <Element4>4</Element4>  
            <Element5>5</Element5>  
        </Root>  
  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
        </Root>  
  
xmlTree.AddFirst(New XElement("NewChild", "new content"))  
xmlTree.AddFirst( _  
    From el In srcTree.Elements() _  
    Where CInt(el) > 3 _  
    Select el _  
)  
' Even though Child9 does not exist in srcTree, the following statement will not  
' throw an exception, and nothing will be added to xmlTree.  
xmlTree.AddFirst(srcTree.<Child9>)  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="4b3a3-147">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="4b3a3-147">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Element4>4</Element4>  
  <Element5>5</Element5>  
  <NewChild>new content</NewChild>  
  <Child1>1</Child1>  
  <Child2>2</Child2>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="4b3a3-148">O pai é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b3a3-148">The parent is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="Overload:System.Xml.Linq.XContainer.Add" />
        <altmember cref="M:System.Xml.Linq.XContainer.RemoveNodes" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.ReplaceNodes" />
      </Docs>
    </Member>
    <Member MemberName="CreateWriter">
      <MemberSignature Language="C#" Value="public System.Xml.XmlWriter CreateWriter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlWriter CreateWriter() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.CreateWriter" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateWriter () As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlWriter ^ CreateWriter();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4b3a3-149">Cria um <see cref="T:System.Xml.XmlWriter" /> que pode ser usado para adicionar nós ao <see cref="T:System.Xml.Linq.XContainer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b3a3-149">Creates an <see cref="T:System.Xml.XmlWriter" /> that can be used to add nodes to the <see cref="T:System.Xml.Linq.XContainer" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4b3a3-150">Um <see cref="T:System.Xml.XmlWriter" /> que está pronto para receber a gravação de conteúdo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b3a3-150">An <see cref="T:System.Xml.XmlWriter" /> that is ready to have content written to it.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b3a3-151">Durante a serialização, prefixos de namespace são inferidos dos atributos do namespace na árvore XML.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-151">While serializing, namespace prefixes are inferred from the namespace attributes in the XML tree.</span></span>  
  
 <span data-ttu-id="4b3a3-152">Para obter mais informações, consulte [trabalhando com Namespaces XML](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span><span class="sxs-lookup"><span data-stu-id="4b3a3-152">For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4b3a3-153">Você pode usar esse método para executar uma transformação XSLT.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-153">You can use this method to perform an XSLT transformation.</span></span> <span data-ttu-id="4b3a3-154">Você pode criar uma árvore XML, criar um <xref:System.Xml.XmlReader> na árvore de XML, criar um novo documento e criar um <xref:System.Xml.XmlWriter> que gravará no novo documento.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-154">You can create an XML tree, create an <xref:System.Xml.XmlReader> from the XML tree, create a new document, and create a <xref:System.Xml.XmlWriter> that will write into the new document.</span></span> <span data-ttu-id="4b3a3-155">Em seguida, você pode chamar a transformação XSLT, passando o <xref:System.Xml.XmlReader> e <xref:System.Xml.XmlWriter> para a transformação.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-155">Then, you can invoke the XSLT transformation, passing the <xref:System.Xml.XmlReader> and <xref:System.Xml.XmlWriter> to the transform.</span></span> <span data-ttu-id="4b3a3-156">Depois que a transformação for concluída com êxito, a nova árvore XML será preenchida com os resultados da transformação.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-156">After the transformation successfully completes, the new XML tree is populated with the results of the transformation.</span></span>  
  
```csharp  
string xslMarkup = @"<?xml version='1.0'?>  
<xsl:stylesheet xmlns:xsl='http://www.w3.org/1999/XSL/Transform' version='1.0'>  
    <xsl:template match='/Parent'>  
        <Root>  
            <C1><xsl:value-of select='Child1'/></C1>  
            <C2><xsl:value-of select='Child2'/></C2>  
        </Root>  
    </xsl:template>  
</xsl:stylesheet>";  
  
XDocument xmlTree = new XDocument(  
    new XElement("Parent",  
        new XElement("Child1", "Child1 data"),  
        new XElement("Child2", "Child2 data")  
    )  
);  
  
XDocument newTree = new XDocument();  
using (XmlWriter writer = newTree.CreateWriter()) {  
    // Load the style sheet.  
    XslCompiledTransform xslt = new XslCompiledTransform();  
    xslt.Load(XmlReader.Create(new StringReader(xslMarkup)));  
  
    // Execute the transform and output the results to a writer.  
    xslt.Transform(xmlTree.CreateReader(), writer);  
}  
  
Console.WriteLine(newTree);  
```  
  
```vb  
Dim xslMarkup As XDocument = _   
    <?xml version='1.0'?>  
    <xsl:stylesheet xmlns:xsl='http://www.w3.org/1999/XSL/Transform' version='1.0'>  
        <xsl:template match='/Parent'>  
            <Root>  
                <C1><xsl:value-of select='Child1'/></C1>  
                <C2><xsl:value-of select='Child2'/></C2>  
            </Root>  
        </xsl:template>  
    </xsl:stylesheet>  
  
Dim xmlTree As XElement = _   
    <Parent>  
        <Child1>Child1 data</Child1>  
        <Child2>Child2 data</Child2>  
    </Parent>  
  
Dim newTree As XDocument = New XDocument()  
  
Using writer As XmlWriter = newTree.CreateWriter()  
    ' Load the style sheet.  
    Dim xslt As XslCompiledTransform = _  
        New XslCompiledTransform()  
    xslt.Load(xslMarkup.CreateReader())  
  
    ' Execute the transform and output the results to a writer.  
    xslt.Transform(xmlTree.CreateReader(), writer)  
End Using  
  
Console.WriteLine(newTree)  
```  
  
 <span data-ttu-id="4b3a3-157">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="4b3a3-157">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <C1>Child1 data</C1>  
  <C2>Child2 data</C2>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DescendantNodes">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt; DescendantNodes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XNode&gt; DescendantNodes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.DescendantNodes" />
      <MemberSignature Language="VB.NET" Value="Public Function DescendantNodes () As IEnumerable(Of XNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XNode ^&gt; ^ DescendantNodes();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4b3a3-158">Retorna uma coleção dos nós descendentes desse documento ou elemento, na ordem do documento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b3a3-158">Returns a collection of the descendant nodes for this document or element, in document order.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4b3a3-159">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> de <see cref="T:System.Xml.Linq.XNode" /> que contém os nós descendentes do <see cref="T:System.Xml.Linq.XContainer" />, na ordem do documento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b3a3-159">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> containing the descendant nodes of the <see cref="T:System.Xml.Linq.XContainer" />, in document order.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b3a3-160">Observe que os atributos não são considerados para ser nós em [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)], portanto, eles não farão parte da coleção que é retornada por este método.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-160">Note that attributes are not considered to be nodes in [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)], so they will not be part of the collection that is returned by this method.</span></span>  
  
 <span data-ttu-id="4b3a3-161">Este método utiliza execução adiada.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-161">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4b3a3-162">O exemplo a seguir cria uma árvore XML e, em seguida, itera por meio de <xref:System.Xml.Linq.XContainer.DescendantNodes%2A> eixo.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-162">The following example creates an XML tree, and then iterates through the <xref:System.Xml.Linq.XContainer.DescendantNodes%2A> axis.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    // Attributes are not nodes, so will not be returned by DescendantNodes.  
    new XAttribute("Att1", "AttributeContent"),  
    new XElement("Child",  
        new XElement("GrandChild", "element content")  
    )  
);  
IEnumerable<XNode> dnas =  
    from node in xmlTree.DescendantNodes()  
    select node;  
foreach (XNode node in dnas)  
{  
    if (node is XElement)  
        Console.WriteLine((node as XElement).Name);  
    else  
        Console.WriteLine(node);  
}  
```  
  
```vb  
' Attributes are not nodes, so will not be returned by DescendantNodes.  
Dim xmlTree As XElement = _   
    <Root Att1="AttributeContent">  
        <Child>  
            <GrandChild>element content</GrandChild>  
        </Child>  
    </Root>  
  
Dim dnas = From node In xmlTree.DescendantNodes _  
           Select node  
  
For Each node In dnas  
    If TypeOf node Is XElement Then  
        Console.WriteLine(DirectCast(node, XElement).Name)  
    Else  
        Console.WriteLine(node)  
    End If  
Next  
```  
  
 <span data-ttu-id="4b3a3-163">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="4b3a3-163">This example produces the following output:</span></span>  
  
```  
Child  
GrandChild  
element content  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XContainer.Descendants" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.Elements" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Descendants">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4b3a3-164">Retorna uma coleção dos elementos descendentes desse documento ou elemento, na ordem do documento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b3a3-164">Returns a collection of the descendant elements for this document or element, in document order.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b3a3-165">Este método utiliza execução adiada.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-165">This method uses deferred execution.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XContainer.DescendantNodes" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.Elements" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Descendants">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; Descendants ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; Descendants() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.Descendants" />
      <MemberSignature Language="VB.NET" Value="Public Function Descendants () As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ Descendants();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4b3a3-166">Retorna uma coleção dos elementos descendentes desse documento ou elemento, na ordem do documento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b3a3-166">Returns a collection of the descendant elements for this document or element, in document order.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4b3a3-167">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> do <see cref="T:System.Xml.Linq.XElement" /> que contém os elementos descendentes do <see cref="T:System.Xml.Linq.XContainer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b3a3-167">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> containing the descendant elements of the <see cref="T:System.Xml.Linq.XContainer" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b3a3-168">Observe que esse método não retornará próprio resultante <xref:System.Collections.Generic.IEnumerable%601>.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-168">Note that this method will not return itself in the resulting <xref:System.Collections.Generic.IEnumerable%601>.</span></span> <span data-ttu-id="4b3a3-169">Consulte <xref:System.Xml.Linq.XElement.DescendantsAndSelf%2A> se você precisa incluir atual <xref:System.Xml.Linq.XElement> nos resultados.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-169">See <xref:System.Xml.Linq.XElement.DescendantsAndSelf%2A> if you need to include the current <xref:System.Xml.Linq.XElement> in the results.</span></span>  
  
 <span data-ttu-id="4b3a3-170">Este método utiliza execução adiada.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-170">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4b3a3-171">O exemplo a seguir cria uma árvore XML e, em seguida, usa esse método de eixo para recuperar os descendentes.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-171">The following example creates an XML tree, and then uses this axis method to retrieve the descendants.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att1", "AttributeContent"),  
    new XElement("Child",  
        new XText("Some text"),  
        new XElement("GrandChild", "element content")  
    )  
);  
IEnumerable<XElement> de =  
    from el in xmlTree.Descendants()  
    select el;  
foreach (XElement el in de)  
    Console.WriteLine(el.Name);  
```  
  
```vb  
' Attributes are not nodes, so will not be returned by DescendantNodes.  
Dim xmlTree As XElement = _  
    <Root Att1="AttributeContent">  
        <Child>Some text  
            <GrandChild>element content</GrandChild>  
        </Child>  
    </Root>  
Dim de = From el In xmlTree.Descendants _  
         Select el  
  
For Each el In de  
    Console.WriteLine(el.Name)  
Next  
```  
  
 <span data-ttu-id="4b3a3-172">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="4b3a3-172">This example produces the following output:</span></span>  
  
```  
Child  
GrandChild  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XElement.DescendantsAndSelf" />
        <altmember cref="M:System.Xml.Linq.XContainer.DescendantNodes" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.Elements" />
      </Docs>
    </Member>
    <Member MemberName="Descendants">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; Descendants (System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; Descendants(class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.Descendants(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Function Descendants (name As XName) As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ Descendants(System::Xml::Linq::XName ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="4b3a3-173">O <see cref="T:System.Xml.Linq.XName" /> correspondente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b3a3-173">The <see cref="T:System.Xml.Linq.XName" /> to match.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4b3a3-174">Retorna uma coleção filtrada dos elementos descendentes desse documento ou elemento, na ordem do documento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b3a3-174">Returns a filtered collection of the descendant elements for this document or element, in document order.</span>
          </span>
          <span data-ttu-id="4b3a3-175">Somente os elementos que têm um <see cref="T:System.Xml.Linq.XName" /> correspondente são incluídos na coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b3a3-175">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4b3a3-176">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> de <see cref="T:System.Xml.Linq.XElement" /> que contém os elementos descendentes do <see cref="T:System.Xml.Linq.XContainer" /> que correspondem ao <see cref="T:System.Xml.Linq.XName" /> especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b3a3-176">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> containing the descendant elements of the <see cref="T:System.Xml.Linq.XContainer" /> that match the specified <see cref="T:System.Xml.Linq.XName" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b3a3-177">Este método utiliza execução adiada.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-177">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4b3a3-178">O exemplo a seguir imprime todos os descendentes de um elemento.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-178">The following example prints all descendants of an element.</span></span>  
  
```csharp  
// Attributes are not nodes, so will not be returned by DescendantNodes.  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att1", "AttributeContent"),  
    new XElement("Child",  
        new XText("Some text"),  
        new XElement("GrandChild", "element content")  
    )  
);  
IEnumerable<XElement> de =  
    from el in xmlTree.Descendants("Child")  
    select el;  
foreach (XElement el in de)  
    Console.WriteLine(el.Name);  
```  
  
```vb  
' Attributes are not nodes, so will not be returned by the descendants axis.  
Dim xmlTree As XElement = _   
    <Root Att1="AttributeContent">  
         <Child>Some text  
             <GrandChild>element content</GrandChild>  
         </Child>  
     </Root>  
  
Dim de = From el In xmlTree...<Child> _  
         Select el  
  
For Each el In de  
    Console.WriteLine(el.Name)  
Next  
```  
  
 <span data-ttu-id="4b3a3-179">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="4b3a3-179">This example produces the following output:</span></span>  
  
```  
Child  
```  
  
 <span data-ttu-id="4b3a3-180">Este é o mesmo exemplo, mas nesse caso, o XML é em um namespace.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-180">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="4b3a3-181">Para obter mais informações, consulte [trabalhando com Namespaces XML](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span><span class="sxs-lookup"><span data-stu-id="4b3a3-181">For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
// Attributes are not nodes, so will not be returned by DescendantNodes.  
XNamespace aw = "http://www.adventure-works.com";  
XElement xmlTree = new XElement(aw + "Root",  
    new XAttribute(aw + "Att1", "AttributeContent"),  
    new XElement(aw + "Child",  
        new XText("Some text"),  
        new XElement(aw + "GrandChild", "element content")  
    )  
);  
IEnumerable<XElement> de =  
    from el in xmlTree.Descendants(aw + "Child")  
    select el;  
foreach (XElement el in de)  
    Console.WriteLine(el.Name);  
```  
  
```vb  
Imports <xmlns:aw = "http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        ' Attributes are not nodes, so will not be returned by the descendants axis.  
        Dim xmlTree As XElement = _   
            <aw:Root aw:Att1="AttributeContent">  
                 <aw:Child>Some text  
                     <aw:GrandChild>element content</aw:GrandChild>  
                 </aw:Child>  
             </aw:Root>  
  
        Dim de = From el In xmlTree...<aw:Child> _  
                 Select el  
  
        For Each el In de  
            Console.WriteLine(el.Name)  
        Next  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="4b3a3-182">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="4b3a3-182">This example produces the following output:</span></span>  
  
```  
{http://www.adventure-works.com}Child  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XContainer.DescendantNodes" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.Elements" />
      </Docs>
    </Member>
    <Member MemberName="Element">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XElement Element (System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Linq.XElement Element(class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.Element(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Function Element (name As XName) As XElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Linq::XElement ^ Element(System::Xml::Linq::XName ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="4b3a3-183">O <see cref="T:System.Xml.Linq.XName" /> correspondente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b3a3-183">The <see cref="T:System.Xml.Linq.XName" /> to match.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4b3a3-184">Obtém o primeiro elemento filho (na ordem de documentos) com o <see cref="T:System.Xml.Linq.XName" /> especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b3a3-184">Gets the first (in document order) child element with the specified <see cref="T:System.Xml.Linq.XName" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4b3a3-185">Um <see cref="T:System.Xml.Linq.XElement" /> que corresponde ao <see cref="T:System.Xml.Linq.XName" /> ou <see langword="null" /> especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b3a3-185">A <see cref="T:System.Xml.Linq.XElement" /> that matches the specified <see cref="T:System.Xml.Linq.XName" />, or <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b3a3-186">Retorna `null` se não houver nenhum elemento com o nome especificado.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-186">Returns `null` if there is no element with the specified name.</span></span>  
  
 <span data-ttu-id="4b3a3-187">Alguns métodos de eixo retornam coleções de elementos ou atributos.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-187">Some axis methods return collections of elements or attributes.</span></span> <span data-ttu-id="4b3a3-188">Esse método retorna um único elemento.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-188">This method returns only a single element.</span></span>  
  
 <span data-ttu-id="4b3a3-189">Este método retorna `null` se o elemento com o nome especificado não foi encontrado.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-189">This method returns `null` if the element with the specified name is not found.</span></span> <span data-ttu-id="4b3a3-190">Todos os métodos que permitem que você construa elementos (construtor de <xref:System.Xml.Linq.XElement>, <xref:System.Xml.Linq.XContainer.Add%2A>, e assim por diante) aceitar `null` como um argumento válido.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-190">All of the methods that allow you to construct elements (the constructor of <xref:System.Xml.Linq.XElement>, <xref:System.Xml.Linq.XContainer.Add%2A>, and so on) accept `null` as a valid argument.</span></span> <span data-ttu-id="4b3a3-191">Isso permite que você use um idioma conveniente: você pode chamar esse método como parte da construção funcional, e o elemento é adicionado à árvore XML que está sendo construído se e somente se o elemento existir na árvore de origem.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-191">This allows you to use a convenient idiom: you can call this method as part of functional construction, and the element is added to the XML tree being constructed if and only if the element exists in the source tree.</span></span> <span data-ttu-id="4b3a3-192">O exemplo a seguir mostra esse idioma.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-192">The following example shows this idiom.</span></span>  
  
 <span data-ttu-id="4b3a3-193">Em comparação com <xref:System.Xml.Linq.XContainer.Elements%2A>, esse método não é um método do eixo.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-193">In contrast to <xref:System.Xml.Linq.XContainer.Elements%2A>, this method is not an axis method.</span></span> <span data-ttu-id="4b3a3-194">Não usar execução adiada; ele simplesmente retorna um elemento quando chamado.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-194">It does not use deferred execution; it simply returns an element when called.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4b3a3-195">O exemplo a seguir mostra dois usos desse método.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-195">The following example shows two uses of this method.</span></span> <span data-ttu-id="4b3a3-196">Em um caso, o método localiza o elemento `srcTree`.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-196">In one case, the method finds the element in `srcTree`.</span></span> <span data-ttu-id="4b3a3-197">No segundo caso, o método não localizar o elemento na árvore de origem, nenhum elemento será adicionado ao `xmlTree`, e nenhuma exceção é lançada.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-197">In the second case, the method does not find the element in the source tree, no element is added to `xmlTree`, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="4b3a3-198">Observe que o exemplo do Visual Basic usa o propriedade XML filho.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-198">Note that the Visual Basic example uses the child XML property.</span></span> <span data-ttu-id="4b3a3-199">Também é permitido usar o <xref:System.Xml.Linq.XContainer.Element%2A> método diretamente no Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-199">It is also allowable to use the <xref:System.Xml.Linq.XContainer.Element%2A> method directly in Visual Basic.</span></span>  
  
```csharp  
XElement srcTree = new XElement("Root",  
    new XElement("Element1", 1),  
    new XElement("Element2", 2),  
    new XElement("Element3", 3),  
    new XElement("Element4", 4),  
    new XElement("Element5", 5)  
);  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5),  
    srcTree.Element("Element3"),  
    // Even though Element9 does not exist in srcTree, the following line  
    // will not throw an exception.  
    srcTree.Element("Element9")  
);  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim srcTree As XElement = _   
        <Root>  
            <Element1>1</Element1>  
            <Element2>2</Element2>  
            <Element3>3</Element3>  
            <Element4>4</Element4>  
            <Element5>5</Element5>  
        </Root>  
  
Dim xmlTree As XElement = _  
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
            <%= srcTree.<Element3> %>  
            <%= srcTree.<Element9> %>  
        </Root>  
  
' Even though Element9 does not exist in srcTree, adding it to the tree  
' will not throw an exception.  
  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="4b3a3-200">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="4b3a3-200">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child1>1</Child1>  
  <Child2>2</Child2>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
  <Element3>3</Element3>  
</Root>  
```  
  
 <span data-ttu-id="4b3a3-201">Este é o mesmo exemplo, mas nesse caso, o XML é em um namespace.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-201">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="4b3a3-202">Para obter mais informações, consulte [trabalhando com Namespaces XML](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span><span class="sxs-lookup"><span data-stu-id="4b3a3-202">For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement srcTree = new XElement(aw + "Root",  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"),  
    new XElement(aw + "Element1", 1),  
    new XElement(aw + "Element2", 2),  
    new XElement(aw + "Element3", 3),  
    new XElement(aw + "Element4", 4),  
    new XElement(aw + "Element5", 5)  
);  
XElement xmlTree = new XElement(aw + "Root",  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"),  
    new XElement(aw + "Child1", 1),  
    new XElement(aw + "Child2", 2),  
    new XElement(aw + "Child3", 3),  
    new XElement(aw + "Child4", 4),  
    new XElement(aw + "Child5", 5),  
    srcTree.Element(aw + "Element3"),  
    // Even though Element9 does not exist in srcTree, the following line  
    // will not throw an exception.  
    srcTree.Element(aw + "Element9")  
);  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim srcTree As XElement = _   
            <aw:Root>  
                <aw:Element1>1</aw:Element1>  
                <aw:Element2>2</aw:Element2>  
                <aw:Element3>3</aw:Element3>  
                <aw:Element4>4</aw:Element4>  
                <aw:Element5>5</aw:Element5>  
            </aw:Root>  
  
        Dim xmlTree As XElement = _  
            <aw:Root>  
                <aw:Child1>1</aw:Child1>  
                <aw:Child2>2</aw:Child2>  
                <aw:Child3>3</aw:Child3>  
                <aw:Child4>4</aw:Child4>  
                <aw:Child5>5</aw:Child5>  
                <%= srcTree.<aw:Element3> %>  
                <%= srcTree.<aw:Element9> %>  
            </aw:Root>  
  
        ' Even though Element9 does not exist in srcTree, adding it to the tree  
        ' will not throw an exception.  
  
        Console.WriteLine(xmlTree)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="4b3a3-203">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="4b3a3-203">This example produces the following output:</span></span>  
  
```xml  
<aw:Root xmlns:aw="http://www.adventure-works.com">  
  <aw:Child1>1</aw:Child1>  
  <aw:Child2>2</aw:Child2>  
  <aw:Child3>3</aw:Child3>  
  <aw:Child4>4</aw:Child4>  
  <aw:Child5>5</aw:Child5>  
  <aw:Element3>3</aw:Element3>  
</aw:Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XContainer.Elements" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Elements">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4b3a3-204">Retorna uma coleção dos elementos filho desse elemento ou documento, na ordem do documento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b3a3-204">Returns a collection of the child elements of this element or document, in document order.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b3a3-205">Este método utiliza execução adiada.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-205">This method uses deferred execution.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XContainer.Element(System.Xml.Linq.XName)" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.Descendants" />
        <altmember cref="M:System.Xml.Linq.XContainer.DescendantNodes" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Elements">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; Elements ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; Elements() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.Elements" />
      <MemberSignature Language="VB.NET" Value="Public Function Elements () As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ Elements();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4b3a3-206">Retorna uma coleção dos elementos filho desse elemento ou documento, na ordem do documento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b3a3-206">Returns a collection of the child elements of this element or document, in document order.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4b3a3-207">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> de <see cref="T:System.Xml.Linq.XElement" /> que contém os elementos filho deste <see cref="T:System.Xml.Linq.XContainer" />, na ordem de documento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b3a3-207">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> containing the child elements of this <see cref="T:System.Xml.Linq.XContainer" />, in document order.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b3a3-208">Este método utiliza execução adiada.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-208">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4b3a3-209">O exemplo a seguir cria uma árvore XML e, em seguida, seleciona alguns elementos usando esse método de eixo.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-209">The following example creates an XML tree, and then selects some elements using this axis method.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5)  
);  
IEnumerable<XElement> elements =  
    from el in xmlTree.Elements()  
    where (int)el <= 3  
    select el;  
foreach (XElement el in elements)  
    Console.WriteLine(el);  
```  
  
```vb  
Dim xmlTree As XElement = _  
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
        </Root>  
  
Dim elements = From el In xmlTree.Elements _  
               Where el.Value <= 3 _  
               Select el  
  
For Each el In elements  
    Console.WriteLine(el)  
Next  
```  
  
 <span data-ttu-id="4b3a3-210">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="4b3a3-210">This example produces the following output:</span></span>  
  
```  
<Child1>1</Child1>  
<Child2>2</Child2>  
<Child3>3</Child3>  
```  
  
 <span data-ttu-id="4b3a3-211">Este é o mesmo exemplo, mas nesse caso, o XML é em um namespace.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-211">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="4b3a3-212">Para obter mais informações, consulte [trabalhando com Namespaces XML](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span><span class="sxs-lookup"><span data-stu-id="4b3a3-212">For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement xmlTree = new XElement(aw + "Root",  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"),  
    new XElement(aw + "Child1", 1),  
    new XElement(aw + "Child2", 2),  
    new XElement(aw + "Child3", 3),  
    new XElement(aw + "Child4", 4),  
    new XElement(aw + "Child5", 5)  
);  
IEnumerable<XElement> elements =  
    from el in xmlTree.Elements()  
    where (int)el <= 3  
    select el;  
foreach (XElement el in elements)  
    Console.WriteLine(el);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = _  
            <aw:Root>  
                <aw:Child1>1</aw:Child1>  
                <aw:Child2>2</aw:Child2>  
                <aw:Child3>3</aw:Child3>  
                <aw:Child4>4</aw:Child4>  
                <aw:Child5>5</aw:Child5>  
            </aw:Root>  
  
        Dim elements = From el In xmlTree.Elements _  
                       Where el.Value <= 3 _  
                       Select el  
  
        For Each el In elements  
            Console.WriteLine(el)  
        Next  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="4b3a3-213">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="4b3a3-213">This example produces the following output:</span></span>  
  
```  
<aw:Child1 xmlns:aw="http://www.adventure-works.com">1</aw:Child1>  
<aw:Child2 xmlns:aw="http://www.adventure-works.com">2</aw:Child2>  
<aw:Child3 xmlns:aw="http://www.adventure-works.com">3</aw:Child3>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XContainer.Element(System.Xml.Linq.XName)" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.Descendants" />
        <altmember cref="M:System.Xml.Linq.XContainer.DescendantNodes" />
      </Docs>
    </Member>
    <Member MemberName="Elements">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; Elements (System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; Elements(class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.Elements(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Function Elements (name As XName) As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ Elements(System::Xml::Linq::XName ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="4b3a3-214">O <see cref="T:System.Xml.Linq.XName" /> correspondente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b3a3-214">The <see cref="T:System.Xml.Linq.XName" /> to match.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4b3a3-215">Retorna uma coleção filtrada dos elementos filho desse elemento ou documento, na ordem do documento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b3a3-215">Returns a filtered collection of the child elements of this element or document, in document order.</span>
          </span>
          <span data-ttu-id="4b3a3-216">Somente os elementos que têm um <see cref="T:System.Xml.Linq.XName" /> correspondente são incluídos na coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b3a3-216">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4b3a3-217">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> do <see cref="T:System.Xml.Linq.XElement" /> que contém os filhos do <see cref="T:System.Xml.Linq.XContainer" />, que têm um <see cref="T:System.Xml.Linq.XName" /> correspondente, na ordem do documento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b3a3-217">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> containing the children of the <see cref="T:System.Xml.Linq.XContainer" /> that have a matching <see cref="T:System.Xml.Linq.XName" />, in document order.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b3a3-218">Este método utiliza execução adiada.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-218">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4b3a3-219">O exemplo a seguir cria uma árvore XML e, em seguida, seleciona vários elementos filho usando esse método de eixo.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-219">The following example creates an XML tree, and then selects several child elements using this axis method.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Type1", 1),  
    new XElement("Type1", 2),  
    new XElement("Type2", 3),  
    new XElement("Type2", 4),  
    new XElement("Type2", 5)  
);  
IEnumerable<XElement> elements =  
    from el in xmlTree.Elements("Type2")  
    select el;  
foreach (XElement el in elements)  
    Console.WriteLine(el);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>  
            <Type1>1</Type1>  
            <Type1>2</Type1>  
            <Type2>3</Type2>  
            <Type2>4</Type2>  
            <Type2>5</Type2>  
        </Root>  
  
Dim elements = From el In xmlTree.<Type2> _  
               Select el  
  
For Each el In elements  
    Console.WriteLine(el)  
Next  
```  
  
 <span data-ttu-id="4b3a3-220">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="4b3a3-220">This example produces the following output:</span></span>  
  
```  
<Type2>3</Type2>  
<Type2>4</Type2>  
<Type2>5</Type2>  
```  
  
 <span data-ttu-id="4b3a3-221">Este é o mesmo exemplo, mas nesse caso, o XML é em um namespace.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-221">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="4b3a3-222">Para obter mais informações, consulte [trabalhando com Namespaces XML](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span><span class="sxs-lookup"><span data-stu-id="4b3a3-222">For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement xmlTree = new XElement(aw + "Root",  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"),  
    new XElement(aw + "Type1", 1),  
    new XElement(aw + "Type1", 2),  
    new XElement(aw + "Type2", 3),  
    new XElement(aw + "Type2", 4),  
    new XElement(aw + "Type2", 5)  
);  
IEnumerable<XElement> elements =  
    from el in xmlTree.Elements(aw + "Type2")  
    select el;  
foreach (XElement el in elements)  
    Console.WriteLine(el);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = _   
            <aw:Root>  
                <aw:Type1>1</aw:Type1>  
                <aw:Type1>2</aw:Type1>  
                <aw:Type2>3</aw:Type2>  
                <aw:Type2>4</aw:Type2>  
                <aw:Type2>5</aw:Type2>  
            </aw:Root>  
  
        Dim elements = From el In xmlTree.<aw:Type2> _  
                       Select el  
  
        For Each el In elements  
            Console.WriteLine(el)  
        Next  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="4b3a3-223">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="4b3a3-223">This example produces the following output:</span></span>  
  
```  
<aw:Type2 xmlns:aw="http://www.adventure-works.com">3</aw:Type2>  
<aw:Type2 xmlns:aw="http://www.adventure-works.com">4</aw:Type2>  
<aw:Type2 xmlns:aw="http://www.adventure-works.com">5</aw:Type2>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XContainer.Element(System.Xml.Linq.XName)" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.Descendants" />
        <altmember cref="M:System.Xml.Linq.XContainer.DescendantNodes" />
      </Docs>
    </Member>
    <Member MemberName="FirstNode">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XNode FirstNode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XNode FirstNode" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XContainer.FirstNode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FirstNode As XNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XNode ^ FirstNode { System::Xml::Linq::XNode ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4b3a3-224">Obtém o primeiro nó filho desse nó.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b3a3-224">Get the first child node of this node.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4b3a3-225">Um <see cref="T:System.Xml.Linq.XNode" /> que contém o primeiro nó filho do <see cref="T:System.Xml.Linq.XContainer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b3a3-225">An <see cref="T:System.Xml.Linq.XNode" /> containing the first child node of the <see cref="T:System.Xml.Linq.XContainer" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="4b3a3-226">O exemplo a seguir cria um elemento que contém os elementos filho.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-226">The following example creates an element that contains child elements.</span></span> <span data-ttu-id="4b3a3-227">Em seguida, obtém o primeiro nó filho do elemento pai.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-227">It then gets the first child node of the parent element.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5)  
);  
XNode firstNode = xmlTree.FirstNode;  
Console.WriteLine(firstNode);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
        </Root>  
  
Dim firstNode As XNode = xmlTree.FirstNode  
Console.WriteLine(firstNode)  
```  
  
 <span data-ttu-id="4b3a3-228">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="4b3a3-228">This example produces the following output:</span></span>  
  
```xml  
<Child1>1</Child1>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.Linq.XContainer.LastNode" />
        <altmember cref="M:System.Xml.Linq.XContainer.Nodes" />
      </Docs>
    </Member>
    <Member MemberName="LastNode">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XNode LastNode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XNode LastNode" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XContainer.LastNode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LastNode As XNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XNode ^ LastNode { System::Xml::Linq::XNode ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4b3a3-229">Obtém o último nó filho desse nó.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b3a3-229">Get the last child node of this node.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4b3a3-230">Um <see cref="T:System.Xml.Linq.XNode" /> que contém o último nó filho do <see cref="T:System.Xml.Linq.XContainer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b3a3-230">An <see cref="T:System.Xml.Linq.XNode" /> containing the last child node of the <see cref="T:System.Xml.Linq.XContainer" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="4b3a3-231">O exemplo a seguir cria um elemento que contém os elementos filho.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-231">The following example creates an element that contains child elements.</span></span> <span data-ttu-id="4b3a3-232">Em seguida, obtém o último nó filho do elemento pai.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-232">It then gets the last child node of the parent element.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5)  
);  
XNode lastNode = xmlTree.LastNode;  
Console.WriteLine(lastNode);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
        </Root>  
  
Dim lastNode As XNode = xmlTree.LastNode  
Console.WriteLine(lastNode)  
```  
  
 <span data-ttu-id="4b3a3-233">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="4b3a3-233">This example produces the following output:</span></span>  
  
```xml  
<Child5>5</Child5>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.Linq.XContainer.FirstNode" />
        <altmember cref="M:System.Xml.Linq.XContainer.Nodes" />
      </Docs>
    </Member>
    <Member MemberName="Nodes">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt; Nodes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XNode&gt; Nodes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.Nodes" />
      <MemberSignature Language="VB.NET" Value="Public Function Nodes () As IEnumerable(Of XNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XNode ^&gt; ^ Nodes();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4b3a3-234">Retorna uma coleção de nós filhos deste elemento ou documento, na ordem do documento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b3a3-234">Returns a collection of the child nodes of this element or document, in document order.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4b3a3-235">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> de <see cref="T:System.Xml.Linq.XNode" /> que contém o conteúdo desse <see cref="T:System.Xml.Linq.XContainer" />, na ordem de documento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b3a3-235">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> containing the contents of this <see cref="T:System.Xml.Linq.XContainer" />, in document order.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b3a3-236">Observe que o conteúdo não incluir atributos.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-236">Note that the content does not include attributes.</span></span> <span data-ttu-id="4b3a3-237">Em [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)], atributos não são considerados ser nós da árvore.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-237">In [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)], attributes are not considered to be nodes of the tree.</span></span> <span data-ttu-id="4b3a3-238">Eles são pares de nome/valor associados a um elemento.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-238">They are name/value pairs associated with an element.</span></span>  
  
 <span data-ttu-id="4b3a3-239">Este método utiliza execução adiada.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-239">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4b3a3-240">O exemplo a seguir cria uma árvore XML com uma variedade de tipos de nós.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-240">The following example creates an XML tree with a variety of types of nodes.</span></span> <span data-ttu-id="4b3a3-241">Ele consulta, em seguida, esse método de eixo para enumerar e imprimir os nós.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-241">It then queries this axis method to enumerate and print the nodes.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XComment("a comment"),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XText("mixed content"),  
    new XElement("Child5", 5)  
);  
IEnumerable<XNode> nodes =  
    from nd in xmlTree.Nodes()  
    select nd;  
foreach (XNode node in nodes)  
    Console.WriteLine(node);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <!--a comment-->  
            <Child3>3</Child3>  
            <Child4>4</Child4>mixed content<Child5>5</Child5>  
            </Root>  
  
Dim nodes = From nd In xmlTree.Nodes() _  
            Select nd  
  
For Each node In nodes  
    Console.WriteLine(node)  
Next  
```  
  
 <span data-ttu-id="4b3a3-242">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="4b3a3-242">This example produces the following output:</span></span>  
  
```  
<Child1>1</Child1>  
<Child2>2</Child2>  
<!--a comment-->  
<Child3>3</Child3>  
<Child4>4</Child4>  
mixed content  
<Child5>5</Child5>  
```  
  
 <span data-ttu-id="4b3a3-243">O exemplo a seguir cria uma árvore XML que contém uma variedade de tipos de nós.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-243">The following example creates an XML tree that contains a variety of types of nodes.</span></span> <span data-ttu-id="4b3a3-244">Em seguida, enumera por meio de partes da árvore de impressão os tipos de nós.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-244">It then enumerates through portions of the tree, printing the node types.</span></span>  
  
```csharp  
XDocument xmlTree = new XDocument(  
    new XComment("a comment"),  
    new XProcessingInstruction("xml-stylesheet", "type=\"text/xsl\" href=\"hello.xsl\""),  
    new XElement("Root",  
        new XAttribute("Att", "attContent"),  
        new XElement("Child1",  
            new XCData("CDATA content")  
        ),  
        new XElement("Child2",  
            new XText("Text content")  
        )  
    )  
);  
  
foreach (XNode node in xmlTree.Nodes())  
{  
    Console.WriteLine(node.NodeType);  
    if (node.NodeType == XmlNodeType.Element)  
    {  
        foreach (XAttribute att in ((XElement)node).Attributes())  
            Console.WriteLine(att.NodeType);  
        foreach (XNode node2 in ((XElement)node).Nodes())  
        {  
            Console.WriteLine(node2.NodeType);  
            if (node2.NodeType == XmlNodeType.Element)  
                foreach (XNode node3 in ((XElement)node2).Nodes())  
                    Console.WriteLine(node3.NodeType);  
        }  
    }  
}  
```  
  
```vb  
Dim xmlTree As XDocument = _   
    <?xml version="1.0" encoding="utf-8"?>  
    <!--a comment-->  
    <?xml-stylesheet type='text/xsl' href='hello.xsl'?>  
    <Root Att="attContent">  
        <Child1><![CDATA[CDATA content]]]><![CDATA[]></Child1>  
        <Child2>Text content</Child2>  
    </Root>  
  
' Note that XNode uses XmlNodeType, which is in the System.Xml namespace  
For Each node In xmlTree.Nodes  
    Console.WriteLine(node.NodeType.ToString())  
    If node.NodeType = XmlNodeType.Element Then  
        For Each att In DirectCast(node, XElement).Attributes  
            Console.WriteLine(att.NodeType.ToString())  
        Next  
        For Each node2 In DirectCast (node, XElement).Nodes()  
            Console.WriteLine(node2.NodeType.ToString())  
            If node2.NodeType = XmlNodeType.Element Then  
                For Each node3 In DirectCast (node2, XElement).Nodes  
                    Console.WriteLine(node3.NodeType.ToString())  
                Next  
            End If  
        Next  
    End If  
Next  
```  
  
 <span data-ttu-id="4b3a3-245">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="4b3a3-245">This example produces the following output:</span></span>  
  
```  
Comment  
ProcessingInstruction  
Element  
Attribute  
Element  
CDATA  
Element  
Text  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XElement.Attributes" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.Descendants" />
        <altmember cref="M:System.Xml.Linq.XContainer.DescendantNodes" />
      </Docs>
    </Member>
    <Member MemberName="RemoveNodes">
      <MemberSignature Language="C#" Value="public void RemoveNodes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveNodes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.RemoveNodes" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveNodes ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveNodes();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4b3a3-246">Remove os nós filho desse documento ou elemento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b3a3-246">Removes the child nodes from this document or element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b3a3-247">Se você chamar esse método em um elemento que contém atributos, esse método não removerá os atributos.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-247">If you call this method on an element that contains attributes, this method will not remove the attributes.</span></span> <span data-ttu-id="4b3a3-248">Para remover os atributos de um elemento, use <xref:System.Xml.Linq.XElement.RemoveAttributes%2A>.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-248">To remove the attributes of an element, use <xref:System.Xml.Linq.XElement.RemoveAttributes%2A>.</span></span>  
  
 <span data-ttu-id="4b3a3-249">O <xref:System.Xml.Linq.Extensions.Remove%2A> método tem funcionalidade relacionada.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-249">The <xref:System.Xml.Linq.Extensions.Remove%2A> method has related functionality.</span></span> <span data-ttu-id="4b3a3-250">Remove os nós filho de cada nó em uma coleção.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-250">It removes the child nodes of every node in a collection.</span></span>  
  
 <span data-ttu-id="4b3a3-251">Esse método gerará o <xref:System.Xml.Linq.XObject.Changed> e <xref:System.Xml.Linq.XObject.Changing> eventos.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-251">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4b3a3-252">O exemplo a seguir cria uma árvore XML que contém alguns nós filho.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-252">The following example creates an XML tree that contains some child nodes.</span></span> <span data-ttu-id="4b3a3-253">Depois, ele chama esse método para remover os nós filho.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-253">It then calls this method to remove the child nodes.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XComment("a comment"),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XText("mixed content"),  
    new XElement("Child5", 5)  
);  
xmlTree.RemoveNodes();  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim xmltree As XElement = _   
    <Root>  
        <Child1>1</Child1>  
        <Child2>2</Child2>  
        <!--a comment-->  
        <Child3>3</Child3>  
        <Child4>4</Child4>mixed content<Child5>5</Child5>  
    </Root>  
  
xmltree.RemoveNodes()  
Console.WriteLine(xmltree)  
```  
  
 <span data-ttu-id="4b3a3-254">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="4b3a3-254">This example produces the following output:</span></span>  
  
```xml  
<Root />  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XContainer.Add" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.ReplaceNodes" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ReplaceNodes">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4b3a3-255">Substitui os nós filho desse documento ou elemento pelo conteúdo especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b3a3-255">Replaces the children nodes of this document or element with the specified content.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b3a3-256">Para obter detalhes sobre o conteúdo válido que pode ser passado para esta função, consulte [conteúdo válido de XElement e XDocument objetos](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="4b3a3-256">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="4b3a3-257">Esse método gerará o <xref:System.Xml.Linq.XObject.Changed> e <xref:System.Xml.Linq.XObject.Changing> eventos.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-257">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
 <span data-ttu-id="4b3a3-258">Esse método tem semânticas de instantâneo.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-258">This method has snapshot semantics.</span></span> <span data-ttu-id="4b3a3-259">Primeiro, ele cria uma cópia do conteúdo novo.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-259">It first creates a copy of the new content.</span></span> <span data-ttu-id="4b3a3-260">Em seguida, remove todos os nós filho deste nó.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-260">It then removes all children nodes of this node.</span></span> <span data-ttu-id="4b3a3-261">Por fim, ele adiciona o novo conteúdo como nós filhos.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-261">Finally, it adds the new content as children nodes.</span></span> <span data-ttu-id="4b3a3-262">Isso significa que você pode substituir nós filho usando uma consulta nos próprios nós filhos.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-262">This means that you can replace children nodes using a query on the children nodes themselves.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4b3a3-263">O exemplo a seguir cria duas árvores XML e, em seguida, usa esse método para substituir o conteúdo de um com os resultados de uma consulta.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-263">The following example creates two XML trees, and then uses this method to replace the contents of one of them with the results of a query.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Child", 1),  
    new XElement("Child", 2),  
    new XElement("Child", 3),  
    new XElement("Child", 4),  
    new XElement("Child", 5)  
);  
root.ReplaceNodes(  
    from el in root.Elements()  
    where (int)el >= 3  
    select el  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = _   
    <Root>  
        <Child>1</Child>  
        <Child>2</Child>  
        <Child>3</Child>  
        <Child>4</Child>  
        <Child>5</Child>  
    </Root>  
root.ReplaceNodes( _  
    From el In root.Elements _  
    Where el.Value >= 3 _  
    Select el)  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="4b3a3-264">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="4b3a3-264">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child>3</Child>  
  <Child>4</Child>  
  <Child>5</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XContainer.Add" />
        <altmember cref="M:System.Xml.Linq.XContainer.RemoveNodes" />
      </Docs>
    </MemberGroup>
    <Member MemberName="ReplaceNodes">
      <MemberSignature Language="C#" Value="public void ReplaceNodes (object content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReplaceNodes(object content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.ReplaceNodes(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReplaceNodes (content As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReplaceNodes(System::Object ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="content">
          <span data-ttu-id="4b3a3-265">Um objeto de conteúdo que contém o conteúdo simples ou uma coleção de objetos de conteúdo que substitui os nós filho.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b3a3-265">A content object containing simple content or a collection of content objects that replace the children nodes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4b3a3-266">Substitui os nós filho desse documento ou elemento pelo conteúdo especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b3a3-266">Replaces the children nodes of this document or element with the specified content.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b3a3-267">Para obter detalhes sobre o conteúdo válido que pode ser passado para esta função, consulte [conteúdo válido de XElement e XDocument objetos](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="4b3a3-267">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="4b3a3-268">Esse método gerará o <xref:System.Xml.Linq.XObject.Changed> e <xref:System.Xml.Linq.XObject.Changing> eventos.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-268">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
 <span data-ttu-id="4b3a3-269">Esse método tem semânticas de instantâneo.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-269">This method has snapshot semantics.</span></span> <span data-ttu-id="4b3a3-270">Primeiro, ele cria uma cópia do conteúdo novo.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-270">It first creates a copy of the new content.</span></span> <span data-ttu-id="4b3a3-271">Em seguida, remove todos os nós filho deste nó.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-271">It then removes all children nodes of this node.</span></span> <span data-ttu-id="4b3a3-272">Por fim, ele adiciona o novo conteúdo como nós filhos.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-272">Finally, it adds the new content as children nodes.</span></span> <span data-ttu-id="4b3a3-273">Isso significa que você pode substituir nós filho usando uma consulta nos próprios nós filhos.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-273">This means that you can replace children nodes using a query on the children nodes themselves.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4b3a3-274">O exemplo a seguir cria uma árvore XML que contém nós filhos.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-274">The following example creates an XML tree that contains children nodes.</span></span> <span data-ttu-id="4b3a3-275">Em seguida, substitui a todos os nós filhos de um único elemento.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-275">It then replaces all of the children nodes with a single element.</span></span>  
  
 <span data-ttu-id="4b3a3-276">Para ver um exemplo de substituição de nós filhos com os resultados de uma [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] de consulta, consulte <xref:System.Xml.Linq.XContainer.ReplaceNodes%2A>.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-276">To see an example of replacing the children nodes with the results of a [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] query, see <xref:System.Xml.Linq.XContainer.ReplaceNodes%2A>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Child", 1),  
    new XElement("Child", 2),  
    new XElement("Child", 3),  
    new XElement("Child", 4),  
    new XElement("Child", 5)  
);  
root.ReplaceNodes(  
    from el in root.Elements()  
    where (int)el >= 3  
    select el  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = _   
    <Root>  
        <Child>1</Child>  
        <Child>2</Child>  
        <Child>3</Child>  
        <Child>4</Child>  
        <Child>5</Child>  
    </Root>  
root.ReplaceNodes( _  
    From el In root.Elements _  
    Where el.Value >= 3 _  
    Select el)  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="4b3a3-277">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="4b3a3-277">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child>3</Child>  
  <Child>4</Child>  
  <Child>5</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XContainer.Add" />
        <altmember cref="M:System.Xml.Linq.XContainer.RemoveNodes" />
      </Docs>
    </Member>
    <Member MemberName="ReplaceNodes">
      <MemberSignature Language="C#" Value="public void ReplaceNodes (params object[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReplaceNodes(object[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.ReplaceNodes(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReplaceNodes (ParamArray content As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReplaceNodes(... cli::array &lt;System::Object ^&gt; ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="content">
          <span data-ttu-id="4b3a3-278">Uma lista de parâmetros de objetos de conteúdo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b3a3-278">A parameter list of content objects.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4b3a3-279">Substitui os nós filho desse documento ou elemento pelo conteúdo especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b3a3-279">Replaces the children nodes of this document or element with the specified content.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b3a3-280">Para obter detalhes sobre o conteúdo válido que pode ser passado para esta função, consulte [conteúdo válido de XElement e XDocument objetos](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="4b3a3-280">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="4b3a3-281">Esse método gerará o <xref:System.Xml.Linq.XObject.Changed> e <xref:System.Xml.Linq.XObject.Changing> eventos.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-281">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
 <span data-ttu-id="4b3a3-282">Esse método tem semânticas de instantâneo.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-282">This method has snapshot semantics.</span></span> <span data-ttu-id="4b3a3-283">Primeiro, ele cria uma cópia do conteúdo novo.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-283">It first creates a copy of the new content.</span></span> <span data-ttu-id="4b3a3-284">Em seguida, remove todos os nós filho deste nó.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-284">It then removes all children nodes of this node.</span></span> <span data-ttu-id="4b3a3-285">Por fim, ele adiciona o novo conteúdo como nós filhos.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-285">Finally, it adds the new content as children nodes.</span></span> <span data-ttu-id="4b3a3-286">Isso significa que você pode substituir nós filho usando uma consulta nos próprios nós filhos.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-286">This means that you can replace children nodes using a query on the children nodes themselves.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4b3a3-287">O exemplo a seguir cria um dicionário e uma árvore XML.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-287">The following example creates a dictionary and an XML tree.</span></span> <span data-ttu-id="4b3a3-288">Em seguida, consulta o dicionário, projeta os resultados para um <xref:System.Collections.Generic.IEnumerable%601> de <xref:System.Xml.Linq.XElement>e substitui o conteúdo da árvore XML com os resultados da consulta.</span><span class="sxs-lookup"><span data-stu-id="4b3a3-288">It then queries the dictionary, projects the results to an <xref:System.Collections.Generic.IEnumerable%601> of <xref:System.Xml.Linq.XElement>, and replaces the contents of the XML tree with the results of the query.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Child", 1),  
    new XElement("Child", 2),  
    new XElement("Child", 3),  
    new XElement("Child", 4),  
    new XElement("Child", 5)  
);  
root.ReplaceNodes(  
    from el in root.Elements()  
    where (int)el >= 3  
    select el  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = _   
    <Root>  
        <Child>1</Child>  
        <Child>2</Child>  
        <Child>3</Child>  
        <Child>4</Child>  
        <Child>5</Child>  
    </Root>  
root.ReplaceNodes( _  
    From el In root.Elements _  
    Where el.Value >= 3 _  
    Select el)  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="4b3a3-289">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="4b3a3-289">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child>3</Child>  
  <Child>4</Child>  
  <Child>5</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XContainer.Add" />
        <altmember cref="M:System.Xml.Linq.XContainer.RemoveNodes" />
      </Docs>
    </Member>
  </Members>
</Type>