<Type Name="XNamespace" FullName="System.Xml.Linq.XNamespace">
  <Metadata><Meta Name="ms.openlocfilehash" Value="69deea09b5f6266830ce6526a7fffc339cddb2b1" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52251669" /></Metadata><TypeSignature Language="C#" Value="public sealed class XNamespace" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XNamespace extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Linq.XNamespace" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XNamespace" />
  <TypeSignature Language="C++ CLI" Value="public ref class XNamespace sealed" />
  <TypeSignature Language="F#" Value="type XNamespace = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XDocument</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Linq</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="2d3c7-101">Representa um namespace de XML.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-101">Represents an XML namespace.</span></span> <span data-ttu-id="2d3c7-102">Essa classe não pode ser herdada.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2d3c7-103">Essa classe representa a construção XML de namespaces.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-103">This class represents the XML construct of namespaces.</span></span>  
  
 <span data-ttu-id="2d3c7-104">Cada <xref:System.Xml.Linq.XName> contém um <xref:System.Xml.Linq.XNamespace>.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-104">Every <xref:System.Xml.Linq.XName> contains an <xref:System.Xml.Linq.XNamespace>.</span></span> <span data-ttu-id="2d3c7-105">Mesmo se um elemento não está em um namespace, o elemento <xref:System.Xml.Linq.XName> ainda contém um namespace, <xref:System.Xml.Linq.XNamespace.None%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-105">Even if an element is not in a namespace, the element's <xref:System.Xml.Linq.XName> still contains a namespace, <xref:System.Xml.Linq.XNamespace.None%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="2d3c7-106">O <xref:System.Xml.Linq.XName.Namespace%2A?displayProperty=nameWithType> propriedade é garantido que não seja `null`.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-106">The <xref:System.Xml.Linq.XName.Namespace%2A?displayProperty=nameWithType> property is guaranteed to not be `null`.</span></span>  
  
## <a name="creating-an-xnamespace-object"></a><span data-ttu-id="2d3c7-107">Criar um objeto de XNamespace</span><span class="sxs-lookup"><span data-stu-id="2d3c7-107">Creating an XNamespace Object</span></span>  
 <span data-ttu-id="2d3c7-108">A maneira mais comum para criar um <xref:System.Xml.Linq.XNamespace> objeto é simplesmente atribuir uma cadeia de caracteres a ele.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-108">The most common way to create an <xref:System.Xml.Linq.XNamespace> object is to simply assign a string to it.</span></span> <span data-ttu-id="2d3c7-109">Em seguida, você pode combinar o namespace com um nome local, usando a substituição do operador de adição.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-109">You can then combine the namespace with a local name by using the override of the addition operator.</span></span> <span data-ttu-id="2d3c7-110">O exemplo a seguir mostra essa linguagem:</span><span class="sxs-lookup"><span data-stu-id="2d3c7-110">The following example shows this idiom:</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root", "Content");  
Console.WriteLine(root);  
```  
  
```vb  
Dim aw As XNamespace = "http://www.adventure-works.com"  
Dim root As XElement = New XElement(aw + "Root", "Content")  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="2d3c7-111">No entanto, no Visual Basic, você faria normalmente declarar um namespace global padrão, da seguinte maneira:</span><span class="sxs-lookup"><span data-stu-id="2d3c7-111">However, in Visual Basic, you would typically declare a global default namespace, as follows:</span></span>  
  
```vb  
Imports <xmlns='http://www.adventure-works.com'>  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = _  
            <Root>Content</Root>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="2d3c7-112">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="2d3c7-112">This example produces the following output:</span></span>  
  
```xml  
<Root xmlns="http://www.adventure-works.com">Content</Root>  
```  
  
 <span data-ttu-id="2d3c7-113">Atribuir uma cadeia de caracteres para um <xref:System.Xml.Linq.XNamespace> usa a conversão implícita de <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-113">Assigning a string to an <xref:System.Xml.Linq.XNamespace> uses the implicit conversion from <xref:System.String>.</span></span>  
  
 <span data-ttu-id="2d3c7-114">Ver [como: criar um documento com Namespaces (c#) (LINQ to XML)](https://msdn.microsoft.com/library/af4a595e-ffb2-4187-a61b-d5ed71642c4c) para obter mais informações e exemplos.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-114">See [How to: Create a Document with Namespaces (C#) (LINQ to XML)](https://msdn.microsoft.com/library/af4a595e-ffb2-4187-a61b-d5ed71642c4c) for more information and examples.</span></span>  
  
 <span data-ttu-id="2d3c7-115">Ver [Namespaces no Visual Basic (LINQ to XML)](https://msdn.microsoft.com/library/10b7ba7b-518c-4f14-899f-892575d14dcc) para obter mais informações sobre como usar os namespaces no Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-115">See [Namespaces in Visual Basic (LINQ to XML)](https://msdn.microsoft.com/library/10b7ba7b-518c-4f14-899f-892575d14dcc) for more information on using namespaces in Visual Basic.</span></span>  
  
## <a name="controlling-namespace-prefixes"></a><span data-ttu-id="2d3c7-116">Prefixos de Namespace de controle</span><span class="sxs-lookup"><span data-stu-id="2d3c7-116">Controlling Namespace Prefixes</span></span>  
 <span data-ttu-id="2d3c7-117">Se você criar um atributo que declara um namespace, o prefixo especificado no atributo será mantido no XML serializável.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-117">If you create an attribute that declares a namespace, the prefix specified in the attribute will be persisted in the serialized XML.</span></span> <span data-ttu-id="2d3c7-118">Para criar um atributo que declare um namespace com um prefixo, você cria um atributo onde o namespace do nome do atributo é <xref:System.Xml.Linq.XNamespace.Xmlns%2A>, e o nome do atributo é o prefixo do namespace.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-118">To create an attribute that declares a namespace with a prefix, you create an attribute where the namespace of the name of the attribute is <xref:System.Xml.Linq.XNamespace.Xmlns%2A>, and the name of the attribute is the namespace prefix.</span></span> <span data-ttu-id="2d3c7-119">O valor do atributo é o URI do namespace.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-119">The value of the attribute is the URI of the namespace.</span></span> <span data-ttu-id="2d3c7-120">O exemplo a seguir mostra essa linguagem:</span><span class="sxs-lookup"><span data-stu-id="2d3c7-120">The following example shows this idiom:</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root",  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"),  
    "Content");  
Console.WriteLine(root);  
```  
  
```vb  
Dim aw As XNamespace = "http://www.adventure-works.com"  
Dim root As XElement = New XElement(aw + "Root", _  
    New XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"), _  
    "Content")  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="2d3c7-121">No Visual Basic, em vez de criar um nó de namespace para controlar prefixos de namespace, você normalmente usaria uma declaração de namespace global:</span><span class="sxs-lookup"><span data-stu-id="2d3c7-121">In Visual Basic, instead of creating a namespace node to control namespace prefixes, you would typically use a global namespace declaration:</span></span>  
  
```vb  
Imports <xmlns:aw='http://www.adventure-works.com'>  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = _  
            <aw:Root>Content</aw:Root>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="2d3c7-122">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="2d3c7-122">This example produces the following output:</span></span>  
  
```  
<aw:Root xmlns:aw="http://www.adventure-works.com">Content</aw:Root>  
```  
  
 <span data-ttu-id="2d3c7-123">Para obter mais informações, consulte [como: controle prefixos de Namespace (c#) (LINQ to XML)](https://msdn.microsoft.com/library/a40d4479-f1b9-4d8b-8623-445648caed28).</span><span class="sxs-lookup"><span data-stu-id="2d3c7-123">For more information, see [How to: Control Namespace Prefixes (C#) (LINQ to XML)](https://msdn.microsoft.com/library/a40d4479-f1b9-4d8b-8623-445648caed28).</span></span>  
  
## <a name="creating-a-default-namespace"></a><span data-ttu-id="2d3c7-124">Criar um Namespace padrão</span><span class="sxs-lookup"><span data-stu-id="2d3c7-124">Creating a Default Namespace</span></span>  
 <span data-ttu-id="2d3c7-125">Ao construir um atributo que será um namespace, se o nome do atributo tem o valor especial "xmlns", em seguida, quando a árvore XML é serializada, o namespace será declarado como o namespace padrão.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-125">When constructing an attribute that will be a namespace, if the attribute name has the special value of "xmlns", then when the XML tree is serialized, the namespace will be declared as the default namespace.</span></span> <span data-ttu-id="2d3c7-126">O atributo especial com o nome de "xmlns", em si não é em qualquer namespace.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-126">The special attribute with the name of "xmlns" itself is not in any namespace.</span></span> <span data-ttu-id="2d3c7-127">O valor do atributo é o URI de namespace.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-127">The value of the attribute is the namespace URI.</span></span>  
  
 <span data-ttu-id="2d3c7-128">O exemplo a seguir cria uma árvore XML que contém um atributo que é declarado de forma que o namespace se tornará o namespace padrão:</span><span class="sxs-lookup"><span data-stu-id="2d3c7-128">The following example creates an XML tree that contains an attribute that is declared in such a way that the namespace will become the default namespace:</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root",  
    new XAttribute("xmlns", "http://www.adventure-works.com"),  
    new XElement(aw + "Child", "content")  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim aw As XNamespace = "http://www.adventure-works.com"  
Dim root As XElement = New XElement(aw + "Root", _  
    New XAttribute("xmlns", "http://www.adventure-works.com"), _  
    New XElement(aw + "Child", "content") _  
)  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="2d3c7-129">No Visual Basic, em vez de criar um nó de namespace para criar um namespace padrão, você normalmente usaria uma declaração de namespace global padrão:</span><span class="sxs-lookup"><span data-stu-id="2d3c7-129">In Visual Basic, instead of creating a namespace node to create a default namespace, you would typically use a global default namespace declaration:</span></span>  
  
```vb  
Imports <xmlns='http://www.adventure-works.com'>  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = _  
            <Root>  
                <Child>content</Child>  
            </Root>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="2d3c7-130">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="2d3c7-130">This example produces the following output:</span></span>  
  
```  
<Root xmlns="http://www.adventure-works.com">  
  <Child>content</Child>  
</Root>  
```  
  
## <a name="xnamespace-atomization"></a><span data-ttu-id="2d3c7-131">Atomização XNamespace</span><span class="sxs-lookup"><span data-stu-id="2d3c7-131">XNamespace Atomization</span></span>  
 <span data-ttu-id="2d3c7-132"><xref:System.Xml.Linq.XNamespace> objetos têm garantia de ser atomizada; ou seja, se dois <xref:System.Xml.Linq.XNamespace> objetos têm exatamente o mesmo URI, eles compartilharão a mesma instância.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-132"><xref:System.Xml.Linq.XNamespace> objects are guaranteed to be atomized; that is, if two <xref:System.Xml.Linq.XNamespace> objects have exactly the same URI, they will share the same instance.</span></span> <span data-ttu-id="2d3c7-133">Os operadores de comparação e igualdade são fornecidos explicitamente para essa finalidade.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-133">The equality and comparison operators are provided explicitly for this purpose.</span></span>  
  
## <a name="using-expanded-names"></a><span data-ttu-id="2d3c7-134">Usando nomes expandidos</span><span class="sxs-lookup"><span data-stu-id="2d3c7-134">Using Expanded Names</span></span>  
 <span data-ttu-id="2d3c7-135">Outra maneira de especificar um namespace e um nome local é usar um nome expandido no formato `{namespace}name`:</span><span class="sxs-lookup"><span data-stu-id="2d3c7-135">Another way to specify a namespace and a local name is to use an expanded name in the form `{namespace}name`:</span></span>  
  
```csharp  
XElement e = new XElement("{http://www.adventure-works.com}Root",  
     new XAttribute("{http://www.adventure-works.com}Att", "content")  
);  
Console.WriteLine(e);  
```  
  
```vb  
Dim e As XElement = New XElement("{http://www.adventure-works.com}Root", _  
     New XAttribute("{http://www.adventure-works.com}Att", "content") _  
)  
Console.WriteLine(e)  
```  
  
 <span data-ttu-id="2d3c7-136">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="2d3c7-136">This example produces the following output:</span></span>  
  
```  
<Root p1:Att="content" xmlns:p1="http://www.adventure-works.com" xmlns="http://www.adventure-works.com" />  
```  
  
 <span data-ttu-id="2d3c7-137">Essa abordagem tem implicações de desempenho.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-137">This approach has performance implications.</span></span> <span data-ttu-id="2d3c7-138">Cada vez que você passar uma cadeia de caracteres que contém um nome expandido para [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)], ele deve analisar o nome, localizar o namespace atomizado e localizar o nome atomizado.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-138">Each time that you pass a string that contains an expanded name to [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)], it must parse the name, find the atomized namespace, and find the atomized name.</span></span> <span data-ttu-id="2d3c7-139">Esse processo utiliza tempo de CPU.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-139">This process takes CPU time.</span></span> <span data-ttu-id="2d3c7-140">Se o desempenho for importante, convém usar uma abordagem diferente.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-140">If performance is important, you may want to use a different approach.</span></span>  
  
 <span data-ttu-id="2d3c7-141">Com o Visual Basic, a abordagem recomendada é usar literais XML, que não envolve o uso de nomes expandidos.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-141">With Visual Basic, the recommended approach is to use XML literals, which does not involve the use of expanded names.</span></span>  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="2d3c7-142">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="2d3c7-142">LINQ to XML</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="xNamespace.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="2d3c7-143">O <see cref="T:System.Xml.Linq.XNamespace" /> a ser comparado com o <see cref="T:System.Xml.Linq.XNamespace" /> atual.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-143">The <see cref="T:System.Xml.Linq.XNamespace" /> to compare to the current <see cref="T:System.Xml.Linq.XNamespace" />.</span></span></param>
        <summary><span data-ttu-id="2d3c7-144">Determina se o <see cref="T:System.Xml.Linq.XNamespace" /> especificado é igual ao <see cref="T:System.Xml.Linq.XNamespace" /> atual.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-144">Determines whether the specified <see cref="T:System.Xml.Linq.XNamespace" /> is equal to the current <see cref="T:System.Xml.Linq.XNamespace" />.</span></span></summary>
        <returns><span data-ttu-id="2d3c7-145">Um <see cref="T:System.Boolean" /> que indica se o <see cref="T:System.Xml.Linq.XNamespace" /> especificado é igual ao <see cref="T:System.Xml.Linq.XNamespace" /> atual.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-145">A <see cref="T:System.Boolean" /> that indicates whether the specified <see cref="T:System.Xml.Linq.XNamespace" /> is equal to the current <see cref="T:System.Xml.Linq.XNamespace" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2d3c7-146">Para dois <xref:System.Xml.Linq.XNamespace> objetos sejam iguais, eles devem ter o mesmo URI.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-146">For two <xref:System.Xml.Linq.XNamespace> objects to be equal, they must have the same URI.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2d3c7-147">O exemplo a seguir compara os dois namespaces que referenciam o mesmo URI.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-147">The following example compares two namespaces that refer to the same URI.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
Console.WriteLine(aw == "http://www.adventure-works.com");  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Console.WriteLine(GetXmlNamespace(aw) = "http://www.adventure-works.com")  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="2d3c7-148">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="2d3c7-148">This example produces the following output:</span></span>  
  
```  
True  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="2d3c7-149">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="2d3c7-149">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XNamespace Get (string namespaceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XNamespace Get(string namespaceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.Get(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Get (namespaceName As String) As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XNamespace ^ Get(System::String ^ namespaceName);" />
      <MemberSignature Language="F#" Value="static member Get : string -&gt; System.Xml.Linq.XNamespace" Usage="System.Xml.Linq.XNamespace.Get namespaceName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespaceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="namespaceName"><span data-ttu-id="2d3c7-150">Um <see cref="T:System.String" /> que contém um URI de namespace.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-150">A <see cref="T:System.String" /> that contains a namespace URI.</span></span></param>
        <summary><span data-ttu-id="2d3c7-151">Obtém um <see cref="T:System.Xml.Linq.XNamespace" /> para o URI (Uniform Resource Identifier) especificado.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-151">Gets an <see cref="T:System.Xml.Linq.XNamespace" /> for the specified Uniform Resource Identifier (URI).</span></span></summary>
        <returns><span data-ttu-id="2d3c7-152">Um <see cref="T:System.Xml.Linq.XNamespace" /> criado com base no URI especificado.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-152">An <see cref="T:System.Xml.Linq.XNamespace" /> created from the specified URI.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2d3c7-153">Retornado <xref:System.Xml.Linq.XNamespace> objeto é garantido que seja atômica (ou seja, ele é o único no sistema para esse URI específico).</span><span class="sxs-lookup"><span data-stu-id="2d3c7-153">The returned <xref:System.Xml.Linq.XNamespace> object is guaranteed to be atomic (that is, it is the only one in the system for that particular URI).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2d3c7-154">O exemplo a seguir obtém um <xref:System.Xml.Linq.XNamespace> de um URI especificado.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-154">The following example gets a <xref:System.Xml.Linq.XNamespace> from a specified URI.</span></span>  
  
```csharp  
XNamespace aw = XNamespace.Get("http://www.adventure-works.com");  
  
// This is the preferred form.  
XNamespace aw2 = "http://www.adventure-works.com";  
Console.WriteLine(aw);  
Console.WriteLine(aw2);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = XNamespace.Get("http://www.adventure-works.com")  
  
        ' This is the preferred form.  
        Dim aw2 As XNamespace = GetXmlNamespace(aw)  
        Console.WriteLine(aw)  
        Console.WriteLine(aw2)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="2d3c7-155">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="2d3c7-155">This example produces the following output:</span></span>  
  
```  
http://www.adventure-works.com  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="2d3c7-156">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="2d3c7-156">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="xNamespace.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2d3c7-157">Obtém o código hash para esse <see cref="T:System.Xml.Linq.XNamespace" />.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-157">Gets a hash code for this <see cref="T:System.Xml.Linq.XNamespace" />.</span></span></summary>
        <returns><span data-ttu-id="2d3c7-158">Um <see cref="T:System.Int32" /> que contém o código hash para o <see cref="T:System.Xml.Linq.XNamespace" />.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-158">An <see cref="T:System.Int32" /> that contains the hash code for the <see cref="T:System.Xml.Linq.XNamespace" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2d3c7-159">Esse método funciona como uma função de hash para <xref:System.Xml.Linq.XNamespace>.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-159">This method serves as a hash function for <xref:System.Xml.Linq.XNamespace>.</span></span> <span data-ttu-id="2d3c7-160">Você pode usar <xref:System.Xml.Linq.XNamespace.GetHashCode%2A> em algoritmos e estruturas de dados como uma tabela de hash de hash.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-160">You can use <xref:System.Xml.Linq.XNamespace.GetHashCode%2A> in hashing algorithms and data structures like a hash table.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="2d3c7-161">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="2d3c7-161">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetName">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XName GetName (string localName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Linq.XName GetName(string localName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.GetName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetName (localName As String) As XName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Linq::XName ^ GetName(System::String ^ localName);" />
      <MemberSignature Language="F#" Value="member this.GetName : string -&gt; System.Xml.Linq.XName" Usage="xNamespace.GetName localName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName"><span data-ttu-id="2d3c7-162">Um <see cref="T:System.String" /> que contém um nome local.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-162">A <see cref="T:System.String" /> that contains a local name.</span></span></param>
        <summary><span data-ttu-id="2d3c7-163">Retorna um objeto <see cref="T:System.Xml.Linq.XName" /> criado com base neste <see cref="T:System.Xml.Linq.XNamespace" /> e o nome do local especificado.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-163">Returns an <see cref="T:System.Xml.Linq.XName" /> object created from this <see cref="T:System.Xml.Linq.XNamespace" /> and the specified local name.</span></span></summary>
        <returns><span data-ttu-id="2d3c7-164">Um <see cref="T:System.Xml.Linq.XName" /> criado com base neste <see cref="T:System.Xml.Linq.XNamespace" /> e o nome do local especificado.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-164">An <see cref="T:System.Xml.Linq.XName" /> created from this <see cref="T:System.Xml.Linq.XNamespace" /> and the specified local name.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2d3c7-165">Retornado <xref:System.Xml.Linq.XName> objeto é garantido que seja atômica (ou seja, ele é o único no sistema para um nome expandido específico).</span><span class="sxs-lookup"><span data-stu-id="2d3c7-165">The returned <xref:System.Xml.Linq.XName> object is guaranteed to be atomic (that is, it is the only one in the system for a specific expanded name).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2d3c7-166">O exemplo a seguir usa essa propriedade para recuperar um <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-166">The following example uses this property to retrieve an <xref:System.Xml.Linq.XName>.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XName name = aw.GetName("Root");  
Console.WriteLine("{0}", name);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace(aw)  
        Dim name As XName = aw.GetName("Root")  
        Console.WriteLine("{0}", name)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="2d3c7-167">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="2d3c7-167">This example produces the following output:</span></span>  
  
```  
{http://www.adventure-works.com}Root  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="2d3c7-168">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="2d3c7-168">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="NamespaceName">
      <MemberSignature Language="C#" Value="public string NamespaceName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NamespaceName" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XNamespace.NamespaceName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NamespaceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NamespaceName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NamespaceName : string" Usage="System.Xml.Linq.XNamespace.NamespaceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2d3c7-169">Obtém o URI (Uniform Resource Identifier) deste namespace.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-169">Gets the Uniform Resource Identifier (URI) of this namespace.</span></span></summary>
        <value><span data-ttu-id="2d3c7-170">Um <see cref="T:System.String" /> que contém o URI do namespace.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-170">A <see cref="T:System.String" /> that contains the URI of the namespace.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2d3c7-171">O exemplo a seguir mostra como usar essa propriedade:</span><span class="sxs-lookup"><span data-stu-id="2d3c7-171">The following example shows how to use this property:</span></span>  
  
```csharp  
string markup =  
@"<aw:Root  
    xmlns:aw='http://www.adventure-works.com'/>";  
XElement root = XElement.Parse(markup);  
Console.WriteLine(root.Name.Namespace.NamespaceName);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace(aw)  
        Dim root As XElement = <aw:Root/>  
        Console.WriteLine(root.Name.Namespace.NamespaceName)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="2d3c7-172">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="2d3c7-172">This example produces the following output:</span></span>  
  
```  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="2d3c7-173">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="2d3c7-173">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XNamespace None { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Xml.Linq.XNamespace None" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XNamespace.None" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property None As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Xml::Linq::XNamespace ^ None { System::Xml::Linq::XNamespace ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.None : System.Xml.Linq.XNamespace" Usage="System.Xml.Linq.XNamespace.None" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2d3c7-174">Obtém o objeto <see cref="T:System.Xml.Linq.XNamespace" /> que não corresponde a nenhum namespace.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-174">Gets the <see cref="T:System.Xml.Linq.XNamespace" /> object that corresponds to no namespace.</span></span></summary>
        <value><span data-ttu-id="2d3c7-175">O <see cref="T:System.Xml.Linq.XNamespace" /> que corresponde a nenhum namespace.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-175">The <see cref="T:System.Xml.Linq.XNamespace" /> that corresponds to no namespace.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2d3c7-176">Se um elemento ou atributo estiver em nenhum namespace, seu namespace será definido para o namespace retornado por essa propriedade.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-176">If an element or attribute is in no namespace, its namespace will be set to the namespace returned by this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2d3c7-177">O exemplo a seguir mostra que usa essa propriedade para determinar quais elementos estão em nenhum namespace.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-177">The following example shows uses this property to determine which elements are in no namespace.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
  
XElement root = new XElement("Root",  
    new XElement(aw + "ChildInNamespace", "content"),  
    new XElement("ChildInNoNamespace", "content")  
);  
  
if (root.Name.Namespace == XNamespace.None)  
    Console.WriteLine("Root element is in no namespace");  
else  
    Console.WriteLine("Root element is in a namespace");  
  
if (root.Element(aw + "ChildInNamespace").Name.Namespace == XNamespace.None)  
    Console.WriteLine("ChildInNamespace element is in no namespace");  
else  
    Console.WriteLine("ChildInNamespace element is in a namespace");  
  
if (root.Element("ChildInNoNamespace").Name.Namespace == XNamespace.None)  
    Console.WriteLine("ChildInNoNamespace element is in no namespace");  
else  
    Console.WriteLine("ChildInNoNamespace element is in a namespace");  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = _  
            <Root>  
                <aw:ChildInNamespace>content</aw:ChildInNamespace>  
                <ChildInNoNamespace>content</ChildInNoNamespace>  
            </Root>  
  
        If (root.Name.Namespace Is XNamespace.None) Then  
            Console.WriteLine("Root element is in no namespace")  
        Else  
            Console.WriteLine("Root element is in a namespace")  
        End If  
  
        If (root.Element(GetXmlNamespace(aw) + "ChildInNamespace") _  
                .Name.Namespace Is XNamespace.None) Then  
            Console.WriteLine("ChildInNamespace element is in no namespace")  
        Else  
            Console.WriteLine("ChildInNamespace element is in a namespace")  
        End If  
  
        If (root.Element("ChildInNoNamespace") _  
                .Name.Namespace Is XNamespace.None) Then  
            Console.WriteLine("ChildInNoNamespace element is in no namespace")  
        Else  
            Console.WriteLine("ChildInNoNamespace element is in a namespace")  
        End If  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="2d3c7-178">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="2d3c7-178">This example produces the following output:</span></span>  
  
```  
Root element is in no namespace  
ChildInNamespace element is in a namespace  
ChildInNoNamespace element is in no namespace  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="2d3c7-179">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="2d3c7-179">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XName operator + (System.Xml.Linq.XNamespace ns, string localName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Xml.Linq.XName op_Addition(class System.Xml.Linq.XNamespace ns, string localName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.op_Addition(System.Xml.Linq.XNamespace,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (ns As XNamespace, localName As String) As XName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XName ^ operator +(System::Xml::Linq::XNamespace ^ ns, System::String ^ localName);" />
      <MemberSignature Language="F#" Value="static member ( + ) : System.Xml.Linq.XNamespace * string -&gt; System.Xml.Linq.XName" Usage="ns + localName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ns" Type="System.Xml.Linq.XNamespace" />
        <Parameter Name="localName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ns"><span data-ttu-id="2d3c7-180">Um <see cref="T:System.Xml.Linq.XNamespace" /> que contém o namespace.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-180">An <see cref="T:System.Xml.Linq.XNamespace" /> that contains the namespace.</span></span></param>
        <param name="localName"><span data-ttu-id="2d3c7-181">Um <see cref="T:System.String" /> que contém o nome local.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-181">A <see cref="T:System.String" /> that contains the local name.</span></span></param>
        <summary><span data-ttu-id="2d3c7-182">Combina um objeto <see cref="T:System.Xml.Linq.XNamespace" /> com um nome local para criar um <see cref="T:System.Xml.Linq.XName" />.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-182">Combines an <see cref="T:System.Xml.Linq.XNamespace" /> object with a local name to create an <see cref="T:System.Xml.Linq.XName" />.</span></span></summary>
        <returns><span data-ttu-id="2d3c7-183">O novo <see cref="T:System.Xml.Linq.XName" /> construído com base no namespace e no nome local.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-183">The new <see cref="T:System.Xml.Linq.XName" /> constructed from the namespace and local name.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2d3c7-184">Este operador permite que a linguagem comum da combinação de um namespace e um nome local na construção de um elemento ou atributo.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-184">This operator enables the common idiom of combining a namespace and a local name in the construction of an element or attribute.</span></span> <span data-ttu-id="2d3c7-185">Essa linguagem fornece alguns dos benefícios de ter prefixos de namespace, em que você pode se referir a um namespace usando uma variável que é curta.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-185">This idiom provides some of the benefits of having namespace prefixes, in that you can refer to a namespace using a variable that is short.</span></span> <span data-ttu-id="2d3c7-186">Isso elimina sintático ruídos no código que cria as árvores XML.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-186">This eliminates syntactic noise in the code that creates XML trees.</span></span>  
  
## Examples  
 <span data-ttu-id="2d3c7-187">O exemplo a seguir mostra o uso do `+` operador para criar uma <xref:System.Xml.Linq.XName> de um <xref:System.Xml.Linq.XNamespace> e um nome local.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-187">The following example shows the use of the `+` operator to create an <xref:System.Xml.Linq.XName> from an <xref:System.Xml.Linq.XNamespace> and a local name.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root",  
    new XElement(aw + "Child")  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim aw As XNamespace = "http://www.adventure-works.com"  
Dim root As XElement = New XElement(aw + "Root", _  
    New XElement(aw + "Child") _  
)  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="2d3c7-188">No Visual Basic, isso é o idioma preferencial:</span><span class="sxs-lookup"><span data-stu-id="2d3c7-188">In Visual Basic, this is the preferred idiom:</span></span>  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace()  
        Dim root As XElement = _  
            <Root>  
                <Child/>  
            </Root>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="2d3c7-189">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="2d3c7-189">This example produces the following output:</span></span>  
  
```  
<Root xmlns="http://www.adventure-works.com">  
  <Child />  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="2d3c7-190">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="2d3c7-190">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Xml.Linq.XNamespace left, System.Xml.Linq.XNamespace right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Xml.Linq.XNamespace left, class System.Xml.Linq.XNamespace right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.op_Equality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As XNamespace, right As XNamespace) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Xml::Linq::XNamespace ^ left, System::Xml::Linq::XNamespace ^ right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Xml.Linq.XNamespace * System.Xml.Linq.XNamespace -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Xml.Linq.XNamespace" />
        <Parameter Name="right" Type="System.Xml.Linq.XNamespace" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2d3c7-191">O primeiro <see cref="T:System.Xml.Linq.XNamespace" /> a ser comparado.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-191">The first <see cref="T:System.Xml.Linq.XNamespace" /> to compare.</span></span></param>
        <param name="right"><span data-ttu-id="2d3c7-192">O segundo <see cref="T:System.Xml.Linq.XNamespace" /> a ser comparado.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-192">The second <see cref="T:System.Xml.Linq.XNamespace" /> to compare.</span></span></param>
        <summary><span data-ttu-id="2d3c7-193">Retorna um valor que indica se duas instâncias de <see cref="T:System.Xml.Linq.XNamespace" /> são iguais.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-193">Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XNamespace" /> are equal.</span></span></summary>
        <returns><span data-ttu-id="2d3c7-194">Um <see cref="T:System.Boolean" /> que indica se <paramref name="left" /> e <paramref name="right" /> são iguais.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-194">A <see cref="T:System.Boolean" /> that indicates whether <paramref name="left" /> and <paramref name="right" /> are equal.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2d3c7-195">As sobrecargas de operador `==` e `!=` são fornecidos para habilitar comparações entre <xref:System.Xml.Linq.XNamespace> e a cadeia de caracteres (por exemplo, `element.Name.Namespace == "http://www.adventure-works.com"`).</span><span class="sxs-lookup"><span data-stu-id="2d3c7-195">The operator overloads `==` and `!=` are provided to enable comparisons between <xref:System.Xml.Linq.XNamespace> and string (for example, `element.Name.Namespace == "http://www.adventure-works.com"`).</span></span> <span data-ttu-id="2d3c7-196">Os operadores de igualdade de referência predefinidos no c# exigem um operando para poder ser convertido para o tipo dos outros por meio de conversões de referência apenas e não considere a conversão implícita de cadeia de caracteres para <xref:System.Xml.Linq.XNamespace>.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-196">The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only, and do not consider the implicit conversion from string to <xref:System.Xml.Linq.XNamespace>.</span></span>  
   
## Examples  
 <span data-ttu-id="2d3c7-197">O exemplo a seguir mostra a comparação de um <xref:System.Xml.Linq.XNamespace> e uma cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-197">The following example shows the comparison of an <xref:System.Xml.Linq.XNamespace> and a string.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
Console.WriteLine(aw == "http://www.adventure-works.com");  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace()  
        Console.WriteLine(aw = "http://www.adventure-works.com")  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="2d3c7-198">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="2d3c7-198">This example produces the following output:</span></span>  
  
```  
True  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="2d3c7-199">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="2d3c7-199">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Xml.Linq.XNamespace (string namespaceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Xml.Linq.XNamespace op_Implicit(string namespaceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.op_Implicit(System.String)~System.Xml.Linq.XNamespace" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (namespaceName As String) As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Xml::Linq::XNamespace ^(System::String ^ namespaceName);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : string -&gt; System.Xml.Linq.XNamespace" Usage="System.Xml.Linq.XNamespace.op_Implicit namespaceName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespaceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="namespaceName"><span data-ttu-id="2d3c7-200">Um <see cref="T:System.String" /> que contém o URI do namespace.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-200">A <see cref="T:System.String" /> that contains the namespace URI.</span></span></param>
        <summary><span data-ttu-id="2d3c7-201">Converte uma cadeia de caracteres que contém um URI (Uniform Resource Identifier) em um <see cref="T:System.Xml.Linq.XNamespace" />.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-201">Converts a string containing a Uniform Resource Identifier (URI) to an <see cref="T:System.Xml.Linq.XNamespace" />.</span></span></summary>
        <returns><span data-ttu-id="2d3c7-202">Um <see cref="T:System.Xml.Linq.XNamespace" /> construído com base na cadeia de caracteres do URI.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-202">An <see cref="T:System.Xml.Linq.XNamespace" /> constructed from the URI string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[## Examples  
 <span data-ttu-id="2d3c7-203">O exemplo a seguir mostra a inicialização de um <xref:System.Xml.Linq.XNamespace> variável atribuindo uma cadeia de caracteres a ele.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-203">The following example shows the initialization of an <xref:System.Xml.Linq.XNamespace> variable by assigning a string to it.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
Console.WriteLine(aw);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace()  
        Console.WriteLine(aw)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="2d3c7-204">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="2d3c7-204">This example produces the following output:</span></span>  
  
```  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="2d3c7-205">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="2d3c7-205">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Xml.Linq.XNamespace left, System.Xml.Linq.XNamespace right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Xml.Linq.XNamespace left, class System.Xml.Linq.XNamespace right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.op_Inequality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As XNamespace, right As XNamespace) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Xml::Linq::XNamespace ^ left, System::Xml::Linq::XNamespace ^ right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Xml.Linq.XNamespace * System.Xml.Linq.XNamespace -&gt; bool" Usage="System.Xml.Linq.XNamespace.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Xml.Linq.XNamespace" />
        <Parameter Name="right" Type="System.Xml.Linq.XNamespace" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2d3c7-206">O primeiro <see cref="T:System.Xml.Linq.XNamespace" /> a ser comparado.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-206">The first <see cref="T:System.Xml.Linq.XNamespace" /> to compare.</span></span></param>
        <param name="right"><span data-ttu-id="2d3c7-207">O segundo <see cref="T:System.Xml.Linq.XNamespace" /> a ser comparado.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-207">The second <see cref="T:System.Xml.Linq.XNamespace" /> to compare.</span></span></param>
        <summary><span data-ttu-id="2d3c7-208">Retorna um valor que indica se duas instâncias de <see cref="T:System.Xml.Linq.XNamespace" /> não são iguais.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-208">Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XNamespace" /> are not equal.</span></span></summary>
        <returns><span data-ttu-id="2d3c7-209">Um <see cref="T:System.Boolean" /> que indica se <paramref name="left" /> e <paramref name="right" /> não são iguais.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-209">A <see cref="T:System.Boolean" /> that indicates whether <paramref name="left" /> and <paramref name="right" /> are not equal.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2d3c7-210">As sobrecargas de operador `==` e `!=` são fornecidos para habilitar comparações entre <xref:System.Xml.Linq.XNamespace> e a cadeia de caracteres (por exemplo, `element.Name.Namespace == "http://www.adventure-works.com"`).</span><span class="sxs-lookup"><span data-stu-id="2d3c7-210">The operator overloads `==` and `!=` are provided to enable comparisons between <xref:System.Xml.Linq.XNamespace> and string (for example, `element.Name.Namespace == "http://www.adventure-works.com"`).</span></span> <span data-ttu-id="2d3c7-211">Os operadores de igualdade de referência predefinidos no c# exigem um operando para poder ser convertido para o tipo dos outros por meio de conversões de referência apenas e não considere a conversão implícita de cadeia de caracteres para <xref:System.Xml.Linq.XNamespace>.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-211">The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only, and do not consider the implicit conversion from string to <xref:System.Xml.Linq.XNamespace>.</span></span>   
  
## Examples  
 <span data-ttu-id="2d3c7-212">O exemplo a seguir mostra uma comparação de um <xref:System.Xml.Linq.XNamespace> para uma cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-212">The following example shows a comparison of a <xref:System.Xml.Linq.XNamespace> to a string.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
Console.WriteLine(aw != "http://www.adventure-works.com");  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace()  
        Console.WriteLine(aw <> "http://www.adventure-works.com")  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="2d3c7-213">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="2d3c7-213">This example produces the following output:</span></span>  
  
```  
False  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="2d3c7-214">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="2d3c7-214">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="xNamespace.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2d3c7-215">Retorna o URI desse <see cref="T:System.Xml.Linq.XNamespace" />.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-215">Returns the URI of this <see cref="T:System.Xml.Linq.XNamespace" />.</span></span></summary>
        <returns><span data-ttu-id="2d3c7-216">O URI deste <see cref="T:System.Xml.Linq.XNamespace" />.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-216">The URI of this <see cref="T:System.Xml.Linq.XNamespace" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2d3c7-217">O exemplo a seguir usa esse método para um namespace de impressão no console.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-217">The following example uses this method to print a namespace on the console.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
Console.WriteLine("{0}", aw.ToString());  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace()  
        Console.WriteLine("{0}", aw)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="2d3c7-218">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="2d3c7-218">This example produces the following output:</span></span>  
  
```  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="2d3c7-219">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="2d3c7-219">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Xml">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XNamespace Xml { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Xml.Linq.XNamespace Xml" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XNamespace.Xml" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Xml As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Xml::Linq::XNamespace ^ Xml { System::Xml::Linq::XNamespace ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Xml : System.Xml.Linq.XNamespace" Usage="System.Xml.Linq.XNamespace.Xml" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2d3c7-220">Obtém o objeto <see cref="T:System.Xml.Linq.XNamespace" /> correspondente ao URI do XML (<c>http://www.w3.org/XML/1998/namespace</c>).</span><span class="sxs-lookup"><span data-stu-id="2d3c7-220">Gets the <see cref="T:System.Xml.Linq.XNamespace" /> object that corresponds to the XML URI (<c>http://www.w3.org/XML/1998/namespace</c>).</span></span></summary>
        <value><span data-ttu-id="2d3c7-221">O <see cref="T:System.Xml.Linq.XNamespace" /> que corresponde ao URI de XML (<c>http://www.w3.org/XML/1998/namespace</c>).</span><span class="sxs-lookup"><span data-stu-id="2d3c7-221">The <see cref="T:System.Xml.Linq.XNamespace" /> that corresponds to the XML URI (<c>http://www.w3.org/XML/1998/namespace</c>).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2d3c7-222">Determinados padronizado atributos, como `space`, estão no `http://www.w3.org/XML/1998/namespace` namespace.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-222">Certain standardized attributes, such as `space`, are in the `http://www.w3.org/XML/1998/namespace` namespace.</span></span> <span data-ttu-id="2d3c7-223">O padrão de W3C Especifica que esse namespace não precisa ser declarado como um atributo na árvore XML.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-223">The W3C standard specifies that this namespace does not have to be declared as an attribute in the XML tree.</span></span> <span data-ttu-id="2d3c7-224">Ele é um espaço reservado que estará sempre disponível automaticamente no analisador XML.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-224">It is a reserved namespace that is always automatically available in the XML parser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2d3c7-225">O exemplo a seguir mostra como criar um `xml:space="preserve"` atributo em uma árvore XML:</span><span class="sxs-lookup"><span data-stu-id="2d3c7-225">The following example shows how to create an `xml:space="preserve"` attribute in an XML tree:</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute(XNamespace.Xml + "space", "preserve"),  
    new XElement("Child", "content")  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = _  
    <Root xml:space="preserve">  
        <Child>content</Child>  
    </Root>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="2d3c7-226">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="2d3c7-226">This example produces the following output:</span></span>  
  
```  
<Root xml:space="preserve">  
  <Child>content</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="2d3c7-227">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="2d3c7-227">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Xmlns">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XNamespace Xmlns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Xml.Linq.XNamespace Xmlns" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XNamespace.Xmlns" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Xmlns As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Xml::Linq::XNamespace ^ Xmlns { System::Xml::Linq::XNamespace ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Xmlns : System.Xml.Linq.XNamespace" Usage="System.Xml.Linq.XNamespace.Xmlns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2d3c7-228">Obtém o objeto <see cref="T:System.Xml.Linq.XNamespace" /> que corresponde ao URI do xmlns (<c>http://www.w3.org/2000/xmlns/</c>).</span><span class="sxs-lookup"><span data-stu-id="2d3c7-228">Gets the <see cref="T:System.Xml.Linq.XNamespace" /> object that corresponds to the xmlns URI (<c>http://www.w3.org/2000/xmlns/</c>).</span></span></summary>
        <value><span data-ttu-id="2d3c7-229">O <see cref="T:System.Xml.Linq.XNamespace" /> que corresponde do **xmlns** URI (<c>http://www.w3.org/2000/xmlns/</c>).</span><span class="sxs-lookup"><span data-stu-id="2d3c7-229">The <see cref="T:System.Xml.Linq.XNamespace" /> that corresponds to the **xmlns** URI (<c>http://www.w3.org/2000/xmlns/</c>).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2d3c7-230">Quando você declarar namespaces, os atributos de namespace em si estão na **xmlns** namespace.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-230">When you declare namespaces, the namespace attributes themselves are in the **xmlns** namespace.</span></span> <span data-ttu-id="2d3c7-231">O padrão de W3C Especifica que esse namespace não precisa ser declarado como um atributo na árvore XML.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-231">The W3C standard specifies that this namespace does not have to be declared as an attribute in the XML tree.</span></span> <span data-ttu-id="2d3c7-232">Ele é um espaço reservado que estará sempre disponível automaticamente no analisador XML.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-232">It is a reserved namespace that is always automatically available in the XML parser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2d3c7-233">O exemplo a seguir mostra como adicionar um namespace a uma árvore XML.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-233">The following example shows how to add a namespace to an XML tree.</span></span> <span data-ttu-id="2d3c7-234">O namespace para o atributo que declara o namespace é o namespace retornado por essa propriedade.</span><span class="sxs-lookup"><span data-stu-id="2d3c7-234">The namespace for the attribute that declares the namespace is the namespace returned by this property.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root",  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"),  
    new XElement(aw + "Child", "content")  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root = <aw:Root xmlns:aw="http://www.adventure-works.com">  
               <aw:Child>content</aw:Child>  
           </aw:Root>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="2d3c7-235">No Visual Basic, o idioma preferencial é:</span><span class="sxs-lookup"><span data-stu-id="2d3c7-235">In Visual Basic, the preferred idiom is:</span></span>  
  
```vb  
Imports <xmlns:aw='http://www.adventure-works.com'>  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = _  
            <aw:Root>  
                <aw:Child>content</aw:Child>  
            </aw:Root>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="2d3c7-236">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="2d3c7-236">This example produces the following output:</span></span>  
  
```  
<aw:Root xmlns:aw="http://www.adventure-works.com">  
  <aw:Child>content</aw:Child>  
</aw:Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="2d3c7-237">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="2d3c7-237">LINQ to XML</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>