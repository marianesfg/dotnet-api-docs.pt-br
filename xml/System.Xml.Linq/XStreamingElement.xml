<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XStreamingElement.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5b0336162d5331cff04e4eb89149363780070c382.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b0336162d5331cff04e4eb89149363780070c382</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XStreamingElement">
          <source>Represents elements in an XML tree that supports deferred streaming output.</source>
          <target state="translated">Representa os elementos em uma árvore XML que dá suporte à saída de transmissão adiada.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>This class allows you to create an XML tree that supports deferred streaming output.</source>
          <target state="translated">Essa classe permite que você crie uma árvore XML que dá suporte à saída de transmissão adiada.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>You use this class to create an XML tree in a very similar fashion to creating an XML tree using <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.</source>
          <target state="translated">Use essa classe para criar uma árvore XML de maneira muito semelhante à criação de uma árvore XML com <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>However, there is a fundamental difference.</source>
          <target state="translated">No entanto, há uma diferença fundamental.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>When you use a LINQ query to specify content when creating an XML tree using <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, the query variable is iterated at the time of construction of the XML tree, and the results of the query are added to the XML tree.</source>
          <target state="translated">Quando você usa uma consulta LINQ para especificar o conteúdo ao criar um XML de árvore usando <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, a variável de consulta é iterada no momento da construção da árvore XML e os resultados da consulta são adicionados à árvore XML.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>In contrast, when you create an XML tree using <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>, a reference to the query variable is stored in the XML tree without being iterated.</source>
          <target state="translated">Por outro lado, ao criar uma árvore XML com <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>, uma referência à variável de consulta é armazenada na árvore XML sem iterado.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>Queries are iterated only upon serialization.</source>
          <target state="translated">Consultas são iteradas somente após a serialização.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>This allows you to create larger XML trees while maintaining a smaller memory footprint.</source>
          <target state="translated">Isso permite que você crie maior árvores XML, mantendo um menor volume de memória.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>If you are streaming from an input source, such as a text file, then you can read a very large text file, and generate a very large XML document while maintaining a small memory footprint.</source>
          <target state="translated">Se você estiver realizando o streaming de uma fonte de entrada, como um arquivo de texto, você pode ler um arquivo de texto muito grandes e gerar um documento XML muito grande, mantendo um espaço de memória pequenos.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>Another scenario is that you have a large XML tree that has been loaded into memory, and you want to create a transformed version of the document.</source>
          <target state="translated">Outro cenário é que você tem uma grande árvore XML que tenha sido carregada na memória, e você deseja criar uma versão transformada do documento.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>If you create a new document using <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, then you will have two large XML trees in memory upon completion of the transformation.</source>
          <target state="translated">Se você criar um novo documento usando <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, em seguida, você terá duas árvores XML grandes na memória após a conclusão da transformação.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>However, if you create the new XML tree using <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>, then your working set will be effectively cut in half.</source>
          <target state="translated">No entanto, se você criar a nova árvore XML com <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>, em seguida, o conjunto de trabalho será retirado efetivamente na metade.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>Note that when debugging a program that uses <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>, displaying the value of an object causes its <ph id="ph2">&lt;xref:System.Xml.Linq.XStreamingElement.ToString%2A&gt;</ph> method to be called.</source>
          <target state="translated">Observe que durante a depuração de um programa que usa <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>, exibir o valor de um objeto faz com que seu <ph id="ph2">&lt;xref:System.Xml.Linq.XStreamingElement.ToString%2A&gt;</ph> método a ser chamado.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>This causes the XML to be serialized.</source>
          <target state="translated">Isso faz com que o XML a ser serializado.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>If the semantics of your streaming element query are such that the streaming element can only be streamed once, this may cause undesirable behavior in your debugging experience.</source>
          <target state="translated">Se a semântica da consulta elemento streaming, de modo que o elemento de streaming só pode ser transmitido uma vez, isso pode causar comportamento indesejado na sua experiência de depuração.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>The following example first creates a source XML tree.</source>
          <target state="translated">O exemplo a seguir cria uma árvore XML de origem.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>It then creates a transform of the source XML tree using <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.</source>
          <target state="translated">Ele cria uma transformação de origem XML árvore usando <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>This transform creates a new tree in memory.</source>
          <target state="translated">Essa transformação cria uma nova árvore na memória.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>It then creates a transform of the source XML tree using <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>.</source>
          <target state="translated">Ele cria uma transformação de origem XML árvore usando <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>This transform doesn't execute the query until the transformed tree is serialized to the console.</source>
          <target state="translated">Essa transformação não executa a consulta até que a árvore transformada é serializada no console.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>Its memory usage is less.</source>
          <target state="translated">O uso de memória é menor.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>This example produces the following output:</source>
          <target state="translated">Este exemplo gera a seguinte saída:</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>One approach to processing a text file is to write an extension method that streams the text file a line at a time using the <ph id="ph1">`yield return`</ph> construct.</source>
          <target state="translated">Uma abordagem para processar um arquivo de texto é escrever um método de extensão que passa o arquivo de texto uma linha em uma hora usando a compilação de <ph id="ph1">`yield return`</ph> .</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>You then can write a LINQ query that processes the text file in a lazy deferred fashion.</source>
          <target state="translated">Você então pode escrever uma consulta LINQ que processa o arquivo de texto em uma forma adiada lazy.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>If you then use the <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> to stream output, you then can create a transform from the text file to XML that uses a minimal amount of memory, regardless of the size of the source text file.</source>
          <target state="translated">Se você usar o <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> para saída de fluxo, você pode criar uma transformação do arquivo de texto para XML que usa uma quantidade mínima de memória, independentemente do tamanho do arquivo de texto de origem.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>The following text file, People.txt, is the source for this example.</source>
          <target state="translated">O seguinte arquivo de texto, People.txt, é a fonte para esse exemplo.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>The following code contains an extension method that streams the lines of the text file in a deferred fashion.</source>
          <target state="translated">O código a seguir contém um método de extensão que passa as linhas do arquivo de texto em uma forma adiada.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>This example produces the following output:</source>
          <target state="translated">Este exemplo gera a seguinte saída:</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>Sometimes you have to transform large XML files, and write your application so that the memory footprint of the application is predictable.</source>
          <target state="translated">Às vezes você precisa transformar grandes arquivos XML e escrever seu aplicativo de modo que os requisitos de memória do aplicativo sejam previsíveis.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>If you try to populate an XML tree with a very large XML file, your memory usage will be proportional to the size of the file (that is, excessive).</source>
          <target state="translated">Se você tentar preencher uma árvore XML com um arquivo XML muito grande, seu uso de memória será proporcional ao tamanho do arquivo (isto é, excessivo).</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>Therefore, you should use a streaming technique instead.</source>
          <target state="translated">Portanto, você deve usar uma técnica de streaming em vez disso.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>Certain standard query operators, such as <ph id="ph1">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, iterate their source, collect all of the data, sort it, and then finally yield the first item in the sequence.</source>
          <target state="translated">Determinados operadores de consulta padrão, como <ph id="ph1">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, iteram sua origem, coletam todos os dados, classificam e, em seguida, geram finalmente o primeiro item na sequência.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>Note that if you use a query operator that materializes its source before yielding the first item, you will not retain a small memory footprint for your application.</source>
          <target state="translated">Observe que se você usar um operador de consulta que materializa sua origem antes de gerar o primeiro item, você não manterá um requisito pequeno de memória para seu aplicativo.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>Even if you use the technique described in , if you try to assemble an XML tree that contains the transformed document, memory usage may be too great.</source>
          <target state="translated">Mesmo se você usar a técnica descrita, se você tentar montar uma árvore XML que contém o documento transformado, uso de memória pode ser muito grande.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>The following example builds on the example in <bpt id="p1">[</bpt>How to: Stream XML Fragments with Access to Header Information<ept id="p1">](http://msdn.microsoft.com/library/01311522-9d03-4977-8641-2932c6f56092)</ept>.</source>
          <target state="translated">O exemplo a seguir cria o exemplo na <bpt id="p1">[</bpt>como: fragmentos XML de fluxo com acesso a informações de cabeçalho<ept id="p1">](http://msdn.microsoft.com/library/01311522-9d03-4977-8641-2932c6f56092)</ept>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>This example uses the deferred execution capabilities of <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> to stream the output.</source>
          <target state="translated">Este exemplo usa os recursos de execução adiada de <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> para transmitir a saída.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>Note that the custom axis (<ph id="ph1">`StreamCustomerItem`</ph>) is specifically written so that it expects a document that has <ph id="ph2">`Customer`</ph>, <ph id="ph3">`Name`</ph>, and <ph id="ph4">`Item`</ph> elements, and that those elements will be arranged as in the following Source.xml document.</source>
          <target state="translated">Observe que o eixo personalizado (<ph id="ph1">`StreamCustomerItem`</ph>) é escrito especificamente para esperar um documento que tem os elementos <ph id="ph2">`Customer`</ph>, <ph id="ph3">`Name`</ph> e <ph id="ph4">`Item`</ph>, e que esses elementos serão organizados como no documento Source.xml a seguir.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>A more robust implementation, however, would either validate the source document with an XSD, or would be prepared to parse an invalid document.</source>
          <target state="translated">Uma implementação mais robusta, no entanto, validaria o documento de origem com um XSD ou seria preparada para analisar um documento inválido.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>The following is the source document, Source.xml:</source>
          <target state="translated">Veja a seguir o documento de origem, Source.xml:</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>The following code contains a method that uses an <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> to stream the source XML.</source>
          <target state="translated">O código a seguir contém um método que usa um <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> para transmitir o XML de origem.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>It uses <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> to stream the new XML.</source>
          <target state="translated">Ele usa <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> para transmitir o novo XML.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>This example produces the following output:</source>
          <target state="translated">Este exemplo gera a seguinte saída:</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XStreamingElement">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph> class.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>Queries are not iterated until the <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> is serialized.</source>
          <target state="translated">Consultas não são iteradas até que o <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> é serializado.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>This is in contrast to using queries for content for an <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, where queries are iterated at the time of construction of the new <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.</source>
          <target state="translated">Isso está em contraste com o uso de consultas para o conteúdo para um <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, onde consultas são iteradas no momento da construção do novo <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>For details about the valid content that can be passed to this constructor, see <bpt id="p1">[</bpt>Valid Content of XElement and XDocument Objects<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.</source>
          <target state="translated">Para obter detalhes sobre o conteúdo válido que pode ser passado para o construtor, consulte <bpt id="p1">[</bpt>conteúdo válido de XElement e XDocument objetos<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> that contains the name of the element.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> que contém o nome do elemento.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> class from the specified <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> do <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> especificado.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName)">
          <source>This constructor creates a streaming element with no content and no attributes.</source>
          <target state="translated">Este construtor cria um elemento de streaming com nenhum conteúdo e sem atributos.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName)">
          <source>There is an implicit conversion from string to <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">Há uma conversão implícita de cadeia de caracteres para <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName)">
          <source>Typical use of this constructor is to specify a string as the parameter instead of creating a new <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">Um uso comum desse construtor é para especificar uma cadeia de caracteres como o parâmetro em vez de criar um novo <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName)">
          <source>This example produces the following output:</source>
          <target state="translated">Este exemplo gera a seguinte saída:</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> that contains the element name.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> que contém o nome do elemento.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object)">
          <source>The contents of the element.</source>
          <target state="translated">O conteúdo do elemento.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph> class with the specified name and content.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph> com o nome e conteúdo especificados.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object)">
          <source>This constructor creates a streaming element with the specified content and attributes.</source>
          <target state="translated">Este construtor cria um elemento de streaming com os atributos e o conteúdo especificado.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object)">
          <source>There is an implicit conversion from string to <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">Há uma conversão implícita de cadeia de caracteres para <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object)">
          <source>Typical use of this constructor is to specify a string as the parameter instead of creating a new <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">Um uso comum desse construtor é para especificar uma cadeia de caracteres como o parâmetro em vez de criar um novo <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object)">
          <source>Queries are not iterated until the <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> is serialized.</source>
          <target state="translated">Consultas não são iteradas até que o <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> é serializado.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object)">
          <source>This is in contrast to using queries for content for an <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, where queries are iterated at the time of construction of the new <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.</source>
          <target state="translated">Isso está em contraste com o uso de consultas para o conteúdo para um <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, onde consultas são iteradas no momento da construção do novo <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object)">
          <source>For details about the valid content that can be passed to this constructor, see <bpt id="p1">[</bpt>Valid Content of XElement and XDocument Objects<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.</source>
          <target state="translated">Para obter detalhes sobre o conteúdo válido que pode ser passado para o construtor, consulte <bpt id="p1">[</bpt>conteúdo válido de XElement e XDocument objetos<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object)">
          <source>This example uses the following XML file, named Source.xml:</source>
          <target state="translated">Este exemplo usa o arquivo XML a seguir, denominado Source.xml:</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object[])">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> that contains the element name.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> que contém o nome do elemento.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object[])">
          <source>The contents of the element.</source>
          <target state="translated">O conteúdo do elemento.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object[])">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph> class with the specified name and content.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph> com o nome e conteúdo especificados.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object[])">
          <source>This constructor creates a streaming element with the specified content and attributes.</source>
          <target state="translated">Este construtor cria um elemento de streaming com os atributos e o conteúdo especificado.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object[])">
          <source>There is an implicit conversion from string to <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">Há uma conversão implícita de cadeia de caracteres para <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object[])">
          <source>Typical use of this constructor is to specify a string as the parameter instead of creating a new <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">Um uso comum desse construtor é para especificar uma cadeia de caracteres como o parâmetro em vez de criar um novo <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object[])">
          <source>Queries are not iterated until the <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> is serialized.</source>
          <target state="translated">Consultas não são iteradas até que o <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> é serializado.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object[])">
          <source>This is in contrast to using queries for content for an <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, where queries are iterated at the time of construction of the new <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.</source>
          <target state="translated">Isso está em contraste com o uso de consultas para o conteúdo para um <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, onde consultas são iteradas no momento da construção do novo <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object[])">
          <source>For details about the valid content that can be passed to this function, see <bpt id="p1">[</bpt>Valid Content of XElement and XDocument Objects<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.</source>
          <target state="translated">Para obter detalhes sobre o conteúdo válido que pode ser passado para esta função, consulte <bpt id="p1">[</bpt>conteúdo válido de XElement e XDocument objetos<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object[])">
          <source>This example uses the following XML file, named Source.xml:</source>
          <target state="translated">Este exemplo usa o arquivo XML a seguir, denominado Source.xml:</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XStreamingElement">
          <source>Adds the specified content as children to this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph>.</source>
          <target state="translated">Adiciona o conteúdo especificado como filhos deste <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object)">
          <source>Content to be added to the streaming element.</source>
          <target state="translated">Conteúdo a ser adicionado ao elemento de streaming.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object)">
          <source>Adds the specified content as children to this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph>.</source>
          <target state="translated">Adiciona o conteúdo especificado como filhos deste <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object)">
          <source>This constructor adds the specified content and attributes to the <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>.</source>
          <target state="translated">Este construtor adiciona o conteúdo especificado e atributos para o <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object)">
          <source>While it is often possible to construct the <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> in a single statement, it is sometimes more convenient to add content to the streaming element incrementally.</source>
          <target state="translated">Embora muitas vezes é possível construir o <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> em uma única instrução, às vezes é mais conveniente adicionar conteúdo ao elemento streaming incrementalmente.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object)">
          <source>Queries are not iterated until the <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> is serialized.</source>
          <target state="translated">Consultas não são iteradas até que o <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> é serializado.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object)">
          <source>This is in contrast to using queries for content for an <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, where queries are iterated at the time of construction of the new <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.</source>
          <target state="translated">Isso está em contraste com o uso de consultas para o conteúdo para um <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, onde consultas são iteradas no momento da construção do novo <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object)">
          <source>For details about the valid content that can be passed to this function, see <bpt id="p1">[</bpt>Valid Content of XElement and XDocument Objects<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.</source>
          <target state="translated">Para obter detalhes sobre o conteúdo válido que pode ser passado para esta função, consulte <bpt id="p1">[</bpt>conteúdo válido de XElement e XDocument objetos<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object)">
          <source>The following example creates a new <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>.</source>
          <target state="translated">O exemplo a seguir cria um novo <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object)">
          <source>It then adds two queries to the streaming element.</source>
          <target state="translated">Em seguida, ele adiciona duas consultas para o elemento de fluxo.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object)">
          <source>The queries are not iterated until the streaming element is serialized.</source>
          <target state="translated">As consultas não são iteradas até que o elemento de fluxo contínuo é serializado.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object)">
          <source>This example produces the following output:</source>
          <target state="translated">Este exemplo gera a seguinte saída:</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object[])">
          <source>Content to be added to the streaming element.</source>
          <target state="translated">Conteúdo a ser adicionado ao elemento de streaming.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object[])">
          <source>Adds the specified content as children to this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph>.</source>
          <target state="translated">Adiciona o conteúdo especificado como filhos deste <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object[])">
          <source>This constructor adds the specified content and attributes to the <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>.</source>
          <target state="translated">Este construtor adiciona o conteúdo especificado e atributos para o <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object[])">
          <source>While it is often possible to construct the <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> in a single statement, it is sometimes more convenient to add content to the streaming element incrementally.</source>
          <target state="translated">Embora muitas vezes é possível construir o <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> em uma única instrução, às vezes é mais conveniente adicionar conteúdo ao elemento streaming incrementalmente.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object[])">
          <source>Queries are not iterated until the <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> is serialized.</source>
          <target state="translated">Consultas não são iteradas até que o <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> é serializado.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object[])">
          <source>This is in contrast to using queries for content for an <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, where queries are iterated at the time of construction of the new <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.</source>
          <target state="translated">Isso está em contraste com o uso de consultas para o conteúdo para um <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, onde consultas são iteradas no momento da construção do novo <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object[])">
          <source>For details about the valid content that can be passed to this function, see <bpt id="p1">[</bpt>Valid Content of XElement and XDocument Objects<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.</source>
          <target state="translated">Para obter detalhes sobre o conteúdo válido que pode ser passado para esta função, consulte <bpt id="p1">[</bpt>conteúdo válido de XElement e XDocument objetos<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object[])">
          <source>The following example creates a new <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>.</source>
          <target state="translated">O exemplo a seguir cria um novo <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object[])">
          <source>It then adds two queries to the streaming element.</source>
          <target state="translated">Em seguida, ele adiciona duas consultas para o elemento de fluxo.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object[])">
          <source>The queries are not iterated until the streaming element is serialized.</source>
          <target state="translated">As consultas não são iteradas até que o elemento de fluxo contínuo é serializado.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object[])">
          <source>This example produces the following output:</source>
          <target state="translated">Este exemplo gera a seguinte saída:</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="P:System.Xml.Linq.XStreamingElement.Name">
          <source>Gets or sets the name of this streaming element.</source>
          <target state="translated">Obtém ou define o nome deste elemento de streaming.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XStreamingElement.Name">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> that contains the name of this streaming element.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> que contém o nome deste elemento de fluxo contínuo.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XStreamingElement.Name">
          <source>This example creates a new streaming element, and then prints the name of the element.</source>
          <target state="translated">Este exemplo cria um novo elemento de streaming e imprime o nome do elemento.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XStreamingElement.Name">
          <source>This example produces the following output:</source>
          <target state="translated">Este exemplo gera a seguinte saída:</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XStreamingElement">
          <source>Serialize this streaming element.</source>
          <target state="translated">Serialize este elemento de streaming.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XStreamingElement">
          <source>The output can be saved to a file, an <ph id="ph1">&lt;see cref="T:System.Xml.XmlTextWriter" /&gt;</ph>, a <ph id="ph2">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>, or an <ph id="ph3">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>.</source>
          <target state="translated">A saída pode ser salva em um arquivo, um <ph id="ph1">&lt;see cref="T:System.Xml.XmlTextWriter" /&gt;</ph>, um <ph id="ph2">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> ou um <ph id="ph3">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XStreamingElement">
          <source>Optionally, formatting (indenting) can be disabled.</source>
          <target state="translated">Opcionalmente, a formatação (recuo) pode ser desabilitada.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream)">
          <source>The stream to output this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> to.</source>
          <target state="translated">O fluxo para o qual este <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> será gerado.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream)">
          <source>Outputs this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph> to the specified <ph id="ph2">&lt;see cref="T:System.IO.Stream" /&gt;</ph>.</source>
          <target state="translated">Gera este <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph> para o <ph id="ph2">&lt;see cref="T:System.IO.Stream" /&gt;</ph> especificado.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream)">
          <source>The serialized XML will be indented.</source>
          <target state="translated">O XML serializado será recuado.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream)">
          <source>All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented.</source>
          <target state="translated">Todos os espaço em branco insignificante será removido e o espaço em branco adicional será adicionado para que o XML seja recuado corretamente.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream)">
          <source>The behavior of this method is that insignificant white space will not be preserved.</source>
          <target state="translated">O comportamento desse método é que espaço em branco insignificante não será preservado.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream)">
          <source>If you want to control white space, use the overload of <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement.Save%2A&gt;</ph> that takes <ph id="ph2">&lt;xref:System.Xml.Linq.SaveOptions&gt;</ph> as a parameter.</source>
          <target state="translated">Se você quiser controlar o espaço em branco, use a sobrecarga do <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement.Save%2A&gt;</ph> que usa <ph id="ph2">&lt;xref:System.Xml.Linq.SaveOptions&gt;</ph> como um parâmetro.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream)">
          <source>Use the <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> option to save unindented XML.</source>
          <target state="translated">Use o <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> opção para salvar ou XML.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream)">
          <source>This will cause the writer to write all white spaces exactly as represented in the XML tree.</source>
          <target state="translated">Isso fará com que o gravador gravar todos os espaços em branco exatamente conforme representado na árvore XML.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream)">
          <source>Use <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces&gt;</ph> option if you want to remove duplicate namespace declarations.</source>
          <target state="translated">Use <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces&gt;</ph> opção se você quiser remover declarações de namespace duplicados.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter)">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> that the <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph> will be written to.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> no qual o <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph> será gravado.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter)">
          <source>Serialize this streaming element to a <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>.</source>
          <target state="translated">Serialize este elemento de streaming para um <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter)">
          <source>The serialized XML will be indented.</source>
          <target state="translated">O XML serializado será recuado.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter)">
          <source>All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented.</source>
          <target state="translated">Todos os espaço em branco insignificante será removido e o espaço em branco adicional será adicionado para que o XML seja recuado corretamente.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter)">
          <source>The behavior of this method is that insignificant white space nodes in the XML tree will not be preserved.</source>
          <target state="translated">O comportamento desse método é que espaço em branco insignificante não serão preservados nós na árvore XML.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter)">
          <source>If you want to control white space, use one of the overloads of <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement.Save%2A&gt;</ph> that take <ph id="ph2">&lt;xref:System.Xml.Linq.SaveOptions&gt;</ph> as a parameter.</source>
          <target state="translated">Se você quiser controlar o espaço em branco, use uma das sobrecargas do <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement.Save%2A&gt;</ph> que usam <ph id="ph2">&lt;xref:System.Xml.Linq.SaveOptions&gt;</ph> como um parâmetro.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter)">
          <source>For more information, see <bpt id="p1">[</bpt>Preserving White Space while Loading or Parsing XML<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> and <bpt id="p2">[</bpt>Preserving White Space While Serializing<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.</source>
          <target state="translated">Para obter mais informações, consulte <bpt id="p1">[</bpt>preservar espaço em branco durante a análise de XML ou carregamento<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> e <bpt id="p2">[</bpt>preservar espaço em branco ao serializar<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter)">
          <source>The following example creates a source XML tree, then instantiates an <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> using a query on the source XML tree.</source>
          <target state="translated">O exemplo a seguir cria uma árvore XML de origem, em seguida, cria um <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> usando uma consulta em árvore XML de origem.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter)">
          <source>It then writes the streaming element to a <ph id="ph1">&lt;xref:System.IO.StringWriter&gt;</ph>.</source>
          <target state="translated">Ele grava o elemento de fluxo para um <ph id="ph1">&lt;xref:System.IO.StringWriter&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter)">
          <source>This example produces the following output:</source>
          <target state="translated">Este exemplo gera a seguinte saída:</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String)">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that contains the name of the file.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> que contém o nome do arquivo.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String)">
          <source>Serialize this streaming element to a file.</source>
          <target state="translated">Serialize este elemento de streaming para um arquivo.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String)">
          <source>The serialized XML will be indented.</source>
          <target state="translated">O XML serializado será recuado.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String)">
          <source>All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented.</source>
          <target state="translated">Todos os espaço em branco insignificante será removido e o espaço em branco adicional será adicionado para que o XML seja recuado corretamente.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String)">
          <source>The behavior of this method is that insignificant white space nodes in the XML tree will not be preserved.</source>
          <target state="translated">O comportamento desse método é que espaço em branco insignificante não serão preservados nós na árvore XML.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String)">
          <source>If you want to control white space, use one of the overloads of <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement.Save%2A&gt;</ph> that take <ph id="ph2">&lt;xref:System.Xml.Linq.SaveOptions&gt;</ph> as a parameter.</source>
          <target state="translated">Se você quiser controlar o espaço em branco, use uma das sobrecargas do <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement.Save%2A&gt;</ph> que usam <ph id="ph2">&lt;xref:System.Xml.Linq.SaveOptions&gt;</ph> como um parâmetro.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String)">
          <source>For more information, see <bpt id="p1">[</bpt>Preserving White Space while Loading or Parsing XML<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> and <bpt id="p2">[</bpt>Preserving White Space While Serializing<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.</source>
          <target state="translated">Para obter mais informações, consulte <bpt id="p1">[</bpt>preservar espaço em branco durante a análise de XML ou carregamento<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> e <bpt id="p2">[</bpt>preservar espaço em branco ao serializar<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String)">
          <source>The following example creates a streaming XML tree.</source>
          <target state="translated">O exemplo a seguir cria uma árvore XML de streaming.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String)">
          <source>It then serializes the streaming XML tree to a file.</source>
          <target state="translated">Ele, em seguida, serializa a árvore XML streaming em um arquivo.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String)">
          <source>This example produces the following output:</source>
          <target state="translated">Este exemplo gera a seguinte saída:</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Save(System.Xml.XmlWriter)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> that the <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> will be written to.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> no qual o <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> será gravado.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Save(System.Xml.XmlWriter)">
          <source>Serialize this streaming element to an <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>.</source>
          <target state="translated">Serialize este elemento de streaming para um <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.Xml.XmlWriter)">
          <source>The following example creates an <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> and writes it to an <ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph>.</source>
          <target state="translated">O exemplo a seguir cria um <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> e grava-o para um <ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.Xml.XmlWriter)">
          <source>This example produces the following output:</source>
          <target state="translated">Este exemplo gera a seguinte saída:</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
          <source>The stream to output this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> to.</source>
          <target state="translated">O fluxo para o qual este <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> será gerado.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.Linq.SaveOptions" /&gt;</ph> object that specifies formatting behavior.</source>
          <target state="translated">Um objeto <ph id="ph1">&lt;see cref="T:System.Xml.Linq.SaveOptions" /&gt;</ph> que especifica o comportamento de formatação.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
          <source>Outputs this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph> to the specified <ph id="ph2">&lt;see cref="T:System.IO.Stream" /&gt;</ph>, optionally specifying formatting behavior.</source>
          <target state="translated">Gera esse <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph> para o <ph id="ph2">&lt;see cref="T:System.IO.Stream" /&gt;</ph> especificado, com a opção de especificar o comportamento de formatação.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
          <source>By default the <ph id="ph1">`options`</ph> are set to <ph id="ph2">&lt;xref:System.Xml.Linq.SaveOptions.None&gt;</ph>.</source>
          <target state="translated">Por padrão o <ph id="ph1">`options`</ph> são definidos como <ph id="ph2">&lt;xref:System.Xml.Linq.SaveOptions.None&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
          <source>This option will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.</source>
          <target state="translated">Esta opção removerá todos os espaços em branco insignificante externos e adicionar espaço em branco insignificante apropriado para que o XML é recuado corretamente.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
          <source>If you want to save unindented XML, specify the <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> flag for <ph id="ph2">`options`</ph>.</source>
          <target state="translated">Se você deseja salvar ou XML, especifique o <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> sinalizador para <ph id="ph2">`options`</ph>.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
          <source>This will cause the writer to write all white spaces exactly as represented in the XML tree.</source>
          <target state="translated">Isso fará com que o gravador gravar todos os espaços em branco exatamente conforme representado na árvore XML.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
          <source>Use <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces&gt;</ph> option if you want to remove duplicate namespace declarations.</source>
          <target state="translated">Use <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces&gt;</ph> opção se você quiser remover declarações de namespace duplicados.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> to output the XML to.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> para a saída do XML.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.Linq.SaveOptions" /&gt;</ph> that specifies formatting behavior.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Xml.Linq.SaveOptions" /&gt;</ph> que especifica o comportamento de formatação.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>Serialize this streaming element to a <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>, optionally disabling formatting.</source>
          <target state="translated">Serializar este elemento de streaming para um <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>, se desejar desabilitar a formatação.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>If you want to save unindented XML, specify the <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> flag for <ph id="ph2">`options`</ph>.</source>
          <target state="translated">Se você deseja salvar ou XML, especifique o <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> sinalizador para <ph id="ph2">`options`</ph>.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>This will cause the writer to write all white space exactly as represented in the XML tree.</source>
          <target state="translated">Isso fará com que o gravador gravar todos os espaços em branco exatamente conforme representado na árvore XML.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>If you want to save indented XML, do not specify the <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> flag for <ph id="ph2">`options`</ph>.</source>
          <target state="translated">Se você deseja salvar o XML recuado, não especifique o <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> sinalizador para <ph id="ph2">`options`</ph>.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.</source>
          <target state="translated">Isso removerá todos os espaços em branco insignificante externos e adicionar espaço em branco insignificante apropriado para que o XML é recuado corretamente.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>This is the default behavior, and the behavior of the overloads of the <ph id="ph1">&lt;xref:System.Xml.Linq.XElement.Save%2A&gt;</ph> methods that do not take <ph id="ph2">`options`</ph> as a parameter.</source>
          <target state="translated">Este é o comportamento padrão e o comportamento das sobrecargas do <ph id="ph1">&lt;xref:System.Xml.Linq.XElement.Save%2A&gt;</ph> métodos que não têm <ph id="ph2">`options`</ph> como um parâmetro.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>For more information, see <bpt id="p1">[</bpt>Preserving White Space while Loading or Parsing XML<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> and <bpt id="p2">[</bpt>Preserving White Space While Serializing<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.</source>
          <target state="translated">Para obter mais informações, consulte <bpt id="p1">[</bpt>preservar espaço em branco durante a análise de XML ou carregamento<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> e <bpt id="p2">[</bpt>preservar espaço em branco ao serializar<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>The following example shows two uses of this method.</source>
          <target state="translated">O exemplo a seguir mostra dois usos desse método.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>The first use preserves white space.</source>
          <target state="translated">O primeiro uso preserva espaço em branco.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>The second one serializes the <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> with formatting.</source>
          <target state="translated">Segunda serializa o <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> com formatação.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>This example produces the following output:</source>
          <target state="translated">Este exemplo gera a seguinte saída:</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that contains the name of the file.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> que contém o nome do arquivo.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.Linq.SaveOptions" /&gt;</ph> object that specifies formatting behavior.</source>
          <target state="translated">Um objeto <ph id="ph1">&lt;see cref="T:System.Xml.Linq.SaveOptions" /&gt;</ph> que especifica o comportamento de formatação.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>Serialize this streaming element to a file, optionally disabling formatting.</source>
          <target state="translated">Serialize este elemento de streaming em um arquivo, se desejar desabilitar a formatação.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>If you want to save unindented XML, specify the <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> flag for <ph id="ph2">`options`</ph>.</source>
          <target state="translated">Se você deseja salvar ou XML, especifique o <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> sinalizador para <ph id="ph2">`options`</ph>.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>This will cause the writer to write all white space exactly as represented in the XML tree.</source>
          <target state="translated">Isso fará com que o gravador gravar todos os espaços em branco exatamente conforme representado na árvore XML.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>If you want to save indented XML, do not specify the <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> flag for <ph id="ph2">`options`</ph>.</source>
          <target state="translated">Se você deseja salvar o XML recuado, não especifique o <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> sinalizador para <ph id="ph2">`options`</ph>.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.</source>
          <target state="translated">Isso removerá todos os espaços em branco insignificante externos e adicionar espaço em branco insignificante apropriado para que o XML é recuado corretamente.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>This is the default behavior, and the behavior of the overloads of the <ph id="ph1">&lt;xref:System.Xml.Linq.XElement.Save%2A&gt;</ph> methods that do not take <ph id="ph2">`options`</ph> as a parameter.</source>
          <target state="translated">Este é o comportamento padrão e o comportamento das sobrecargas do <ph id="ph1">&lt;xref:System.Xml.Linq.XElement.Save%2A&gt;</ph> métodos que não têm <ph id="ph2">`options`</ph> como um parâmetro.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>For more information, see <bpt id="p1">[</bpt>Preserving White Space while Loading or Parsing XML<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> and <bpt id="p2">[</bpt>Preserving White Space While Serializing<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.</source>
          <target state="translated">Para obter mais informações, consulte <bpt id="p1">[</bpt>preservar espaço em branco durante a análise de XML ou carregamento<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> e <bpt id="p2">[</bpt>preservar espaço em branco ao serializar<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>The following example shows two uses of this method.</source>
          <target state="translated">O exemplo a seguir mostra dois usos desse método.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>The first use preserves white space.</source>
          <target state="translated">O primeiro uso preserva espaço em branco.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>The second one serializes the <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> with formatting.</source>
          <target state="translated">Segunda serializa o <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> com formatação.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>This example produces the following output:</source>
          <target state="translated">Este exemplo gera a seguinte saída:</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XStreamingElement">
          <source>Returns the XML for this streaming element, optionally disabling formatting.</source>
          <target state="translated">Retorna o XML para este elemento de streaming, se desejar desabilitar a formatação.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>Note that when debugging a program that uses <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>, displaying the value of an object causes its <ph id="ph2">&lt;xref:System.Xml.Linq.XStreamingElement.ToString%2A&gt;</ph> method to be called.</source>
          <target state="translated">Observe que durante a depuração de um programa que usa <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>, exibir o valor de um objeto faz com que seu <ph id="ph2">&lt;xref:System.Xml.Linq.XStreamingElement.ToString%2A&gt;</ph> método a ser chamado.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>This causes the XML to be serialized.</source>
          <target state="translated">Isso faz com que o XML a ser serializado.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>If the semantics of your streaming element query are such that the streaming element can only be streamed once, this may cause undesirable behavior in your debugging experience.</source>
          <target state="translated">Se a semântica da consulta elemento streaming, de modo que o elemento de streaming só pode ser transmitido uma vez, isso pode causar comportamento indesejado na sua experiência de depuração.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.ToString">
          <source>Returns the formatted (indented) XML for this streaming element.</source>
          <target state="translated">Retorna o XML formatado (recuado) para este elemento de streaming.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.ToString">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> containing the indented XML.</source>
          <target state="translated">Uma <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> que contém o XML recuado.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.ToString">
          <source>Note that when debugging a program that uses <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>, displaying the value of an object causes its <ph id="ph2">&lt;xref:System.Xml.Linq.XStreamingElement.ToString%2A&gt;</ph> method to be called.</source>
          <target state="translated">Observe que durante a depuração de um programa que usa <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>, exibir o valor de um objeto faz com que seu <ph id="ph2">&lt;xref:System.Xml.Linq.XStreamingElement.ToString%2A&gt;</ph> método a ser chamado.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.ToString">
          <source>This causes the XML to be serialized.</source>
          <target state="translated">Isso faz com que o XML a ser serializado.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.ToString">
          <source>If the semantics of your streaming element query are such that the streaming element can only be streamed once, this may cause undesirable behavior in your debugging experience.</source>
          <target state="translated">Se a semântica da consulta elemento streaming, de modo que o elemento de streaming só pode ser transmitido uma vez, isso pode causar comportamento indesejado na sua experiência de depuração.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.ToString">
          <source>The following example shows two uses of <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement.ToString%2A&gt;</ph>.</source>
          <target state="translated">O exemplo a seguir mostra dois usos do <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement.ToString%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.ToString">
          <source>The first use preserves white space.</source>
          <target state="translated">O primeiro uso preserva espaço em branco.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.ToString">
          <source>The second one serializes the <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> with formatting.</source>
          <target state="translated">Segunda serializa o <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> com formatação.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.ToString">
          <source>This example produces the following output:</source>
          <target state="translated">Este exemplo gera a seguinte saída:</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.ToString(System.Xml.Linq.SaveOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.Linq.SaveOptions" /&gt;</ph> that specifies formatting behavior.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Xml.Linq.SaveOptions" /&gt;</ph> que especifica o comportamento de formatação.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.ToString(System.Xml.Linq.SaveOptions)">
          <source>Returns the XML for this streaming element, optionally disabling formatting.</source>
          <target state="translated">Retorna o XML para este elemento de streaming, se desejar desabilitar a formatação.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.ToString(System.Xml.Linq.SaveOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> containing the XML.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> que contém o XML.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.ToString(System.Xml.Linq.SaveOptions)">
          <source>Note that when debugging a program that uses <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>, displaying the value of an object causes its <ph id="ph2">&lt;xref:System.Xml.Linq.XStreamingElement.ToString%2A&gt;</ph> method to be called.</source>
          <target state="translated">Observe que durante a depuração de um programa que usa <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>, exibir o valor de um objeto faz com que seu <ph id="ph2">&lt;xref:System.Xml.Linq.XStreamingElement.ToString%2A&gt;</ph> método a ser chamado.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.ToString(System.Xml.Linq.SaveOptions)">
          <source>This causes the XML to be serialized.</source>
          <target state="translated">Isso faz com que o XML a ser serializado.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.ToString(System.Xml.Linq.SaveOptions)">
          <source>If the semantics of your streaming element query are such that the streaming element can only be streamed once, this may cause undesirable behavior in your debugging experience.</source>
          <target state="translated">Se a semântica da consulta elemento streaming, de modo que o elemento de streaming só pode ser transmitido uma vez, isso pode causar comportamento indesejado na sua experiência de depuração.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.ToString(System.Xml.Linq.SaveOptions)">
          <source>The following example shows two uses of <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement.ToString%2A&gt;</ph>.</source>
          <target state="translated">O exemplo a seguir mostra dois usos do <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement.ToString%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.ToString(System.Xml.Linq.SaveOptions)">
          <source>The first use preserves white space.</source>
          <target state="translated">O primeiro uso preserva espaço em branco.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.ToString(System.Xml.Linq.SaveOptions)">
          <source>The second one serializes the <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> with formatting.</source>
          <target state="translated">Segunda serializa o <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> com formatação.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.ToString(System.Xml.Linq.SaveOptions)">
          <source>This example produces the following output:</source>
          <target state="translated">Este exemplo gera a seguinte saída:</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.WriteTo(System.Xml.XmlWriter)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> into which this method will write.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> no qual esse método gravará.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.WriteTo(System.Xml.XmlWriter)">
          <source>Writes this streaming element to an <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>.</source>
          <target state="translated">Grava este elemento de streaming em um <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.WriteTo(System.Xml.XmlWriter)">
          <source>The following example creates an XML tree using <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>.</source>
          <target state="translated">O exemplo a seguir cria uma árvore XML com <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.WriteTo(System.Xml.XmlWriter)">
          <source>It then writes the streaming element to an <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>.</source>
          <target state="translated">Ele grava o elemento de fluxo para um <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.WriteTo(System.Xml.XmlWriter)">
          <source>This example produces the following output:</source>
          <target state="translated">Este exemplo gera a seguinte saída:</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>