<Type Name="XNode" FullName="System.Xml.Linq.XNode">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b28966286bc00bb4e231cc113c0f9fadbbd9cd5c" />
    <Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="11/29/2018" />
    <Meta Name="ms.locfileid" Value="52608516" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class XNode : System.Xml.Linq.XObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit XNode extends System.Xml.Linq.XObject" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Linq.XNode" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class XNode&#xA;Inherits XObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class XNode abstract : System::Xml::Linq::XObject" />
  <TypeSignature Language="F#" Value="type XNode = class&#xA;    inherit XObject" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XDocument</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Linq</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xml.Linq.XObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="9e451-101">Representa o conceito abstrato de um nó (elemento, comentário, tipo de documento, instrução de processamento ou nó de texto) na árvore XML.</span>
      <span class="sxs-lookup">
        <span data-stu-id="9e451-101">Represents the abstract concept of a node (element, comment, document type, processing instruction, or text node) in the XML tree.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e451-102"><xref:System.Xml.Linq.XNode> é uma classe base comum de abstrata para os seguintes tipos:</span><span class="sxs-lookup"><span data-stu-id="9e451-102"><xref:System.Xml.Linq.XNode> is an abstract common base class for the following types:</span></span>  
  
-   <xref:System.Xml.Linq.XComment>  
  
-   <xref:System.Xml.Linq.XContainer>  
  
-   <xref:System.Xml.Linq.XDocumentType>  
  
-   <xref:System.Xml.Linq.XProcessingInstruction>  
  
-   <xref:System.Xml.Linq.XText>  
  
 <span data-ttu-id="9e451-103"><xref:System.Xml.Linq.XContainer> é uma classe base comum de abstrata para os seguintes tipos:</span><span class="sxs-lookup"><span data-stu-id="9e451-103"><xref:System.Xml.Linq.XContainer> is an abstract common base class for the following types:</span></span>  
  
-   <xref:System.Xml.Linq.XDocument>  
  
-   <xref:System.Xml.Linq.XElement>  
  
 <span data-ttu-id="9e451-104">Objetos de classes que derivam de <xref:System.Xml.Linq.XContainer> pode conter nós filho.</span><span class="sxs-lookup"><span data-stu-id="9e451-104">Objects of classes that derive from <xref:System.Xml.Linq.XContainer> can contain child nodes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9e451-105">Uma <xref:System.Xml.Linq.XAttribute> não é um <xref:System.Xml.Linq.XNode>.</span><span class="sxs-lookup"><span data-stu-id="9e451-105">An <xref:System.Xml.Linq.XAttribute> is not an <xref:System.Xml.Linq.XNode>.</span></span> <span data-ttu-id="9e451-106">Atributos são mantidos como uma lista de pares de nome/valor em um elemento.</span><span class="sxs-lookup"><span data-stu-id="9e451-106">Attributes are maintained as a list of name/value pairs on an element.</span></span>  
  
 <span data-ttu-id="9e451-107">Se você estiver escrevendo um aplicativo complexo de XML, como um editor de XML ou um processador de texto que armazena o conteúdo como XML, você trabalhará com frequência no nível do nó.</span><span class="sxs-lookup"><span data-stu-id="9e451-107">If you are writing a complex XML application, such as an XML editor or a word processor that stores content as XML, you will often work at the node level.</span></span> <span data-ttu-id="9e451-108">Atividades típicas que ao trabalhar no nível de nó incluem adicionar nós, excluir nós, transformando nós e iterar por meio de eixos que retornam coleções de nós.</span><span class="sxs-lookup"><span data-stu-id="9e451-108">Typical activities when working at the node level include adding nodes, deleting nodes, transforming nodes, and iterating through axes that return collections of nodes.</span></span>  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
      <span data-ttu-id="9e451-109">LINQ to XML</span>
      <span class="sxs-lookup">
        <span data-stu-id="9e451-109">LINQ to XML</span>
      </span>
    </related>
  </Docs>
  <Members>
    <MemberGroup MemberName="AddAfterSelf">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9e451-110">Adiciona o conteúdo especificado imediatamente após esse nó.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-110">Adds the specified content immediately after this node.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e451-111">Para obter detalhes sobre o conteúdo válido que pode ser passado para esse método, consulte [válido conteúdo de objetos XElement e XDocument](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="9e451-111">For details about the valid content that can be passed to this method, see [Valid Content of XElement and XDocument Objects](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="9e451-112">Esse método gerará o <xref:System.Xml.Linq.XObject.Changed> e o <xref:System.Xml.Linq.XObject.Changing> eventos.</span><span class="sxs-lookup"><span data-stu-id="9e451-112">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e451-113">O exemplo a seguir usa uma consulta LINQ para criar uma <xref:System.Collections.Generic.IEnumerable%601> de <xref:System.Xml.Linq.XElement>, que, em seguida, ele passa a esse método.</span><span class="sxs-lookup"><span data-stu-id="9e451-113">The following example uses a LINQ query to create an <xref:System.Collections.Generic.IEnumerable%601> of <xref:System.Xml.Linq.XElement>, which it then passes to this method.</span></span> <span data-ttu-id="9e451-114">Isso adiciona os resultados de uma consulta para a árvore no local desejado.</span><span class="sxs-lookup"><span data-stu-id="9e451-114">This adds the results of a query to the tree in the desired location.</span></span>  
  
```csharp  
XElement srcTree = new XElement("Root",  
    new XElement("Element1", 1),  
    new XElement("Element2", 2),  
    new XElement("Element3", 3),  
    new XElement("Element4", 4),  
    new XElement("Element5", 5)  
);  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5)  
);  
XElement child1 = xmlTree.Element("Child1");  
child1.AddAfterSelf(  
    from el in srcTree.Elements()  
    where (int)el > 3  
    select el  
);  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim srcTree As XElement = _  
    <Root>  
        <Element1>1</Element1>  
        <Element2>2</Element2>  
        <Element3>3</Element3>  
        <Element4>4</Element4>  
        <Element5>5</Element5>  
    </Root>  
  
Dim xmlTree As XElement = _  
    <Root>  
        <Child1>1</Child1>  
        <Child2>2</Child2>  
        <Child3>3</Child3>  
        <Child4>4</Child4>  
        <Child5>5</Child5>  
    </Root>  
  
Dim child1 As XElement = xmlTree.<Child1>(0)  
child1.AddAfterSelf( _  
    From el In srcTree.Elements() _  
    Where CInt(el) > 3 _  
    Select el _  
)  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="9e451-115">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="9e451-115">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child1>1</Child1>  
  <Element4>4</Element4>  
  <Element5>5</Element5>  
  <Child2>2</Child2>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="9e451-116">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-116">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddAfterSelf">
      <MemberSignature Language="C#" Value="public void AddAfterSelf (object content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAfterSelf(object content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.AddAfterSelf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAfterSelf (content As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAfterSelf(System::Object ^ content);" />
      <MemberSignature Language="F#" Value="member this.AddAfterSelf : obj -&gt; unit" Usage="xNode.AddAfterSelf content" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="content">
          <span data-ttu-id="9e451-117">Um objeto de conteúdo que contém o conteúdo simples ou uma coleção de objetos de conteúdo a ser adicionada após esse nó.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-117">A content object that contains simple content or a collection of content objects to be added after this node.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9e451-118">Adiciona o conteúdo especificado imediatamente após esse nó.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-118">Adds the specified content immediately after this node.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e451-119">Para obter detalhes sobre o conteúdo válido que pode ser passado para esse método, consulte [válido conteúdo de objetos XElement e XDocument](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="9e451-119">For details about the valid content that can be passed to this method, see [Valid Content of XElement and XDocument Objects](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="9e451-120">Eventos <xref:System.Xml.Linq.XObject.Changing>.</span><span class="sxs-lookup"><span data-stu-id="9e451-120"><xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e451-121">O exemplo a seguir usa esse método para adicionar um elemento na árvore.</span><span class="sxs-lookup"><span data-stu-id="9e451-121">The following example uses this method to add an element into the tree.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5)  
);  
XElement child1 = xmlTree.Element("Child1");  
child1.AddAfterSelf(  
    new XElement("NewChild", 10)  
);  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
        </Root>  
  
Dim child1 As XElement = xmlTree.<Child1>(0)  
child1.AddAfterSelf(New XElement("NewChild", 10))  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="9e451-122">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="9e451-122">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child1>1</Child1>  
  <NewChild>10</NewChild>  
  <Child2>2</Child2>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="9e451-123">O pai é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-123">The parent is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="9e451-124">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-124">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="AddAfterSelf">
      <MemberSignature Language="C#" Value="public void AddAfterSelf (params object[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAfterSelf(object[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.AddAfterSelf(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAfterSelf (ParamArray content As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAfterSelf(... cli::array &lt;System::Object ^&gt; ^ content);" />
      <MemberSignature Language="F#" Value="member this.AddAfterSelf : obj[] -&gt; unit" Usage="xNode.AddAfterSelf content" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="content">
          <span data-ttu-id="9e451-125">Uma lista de parâmetros de objetos de conteúdo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-125">A parameter list of content objects.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9e451-126">Adiciona o conteúdo especificado imediatamente após esse nó.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-126">Adds the specified content immediately after this node.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e451-127">Para obter detalhes sobre o conteúdo válido que pode ser passado para esse método, consulte [válido conteúdo de objetos XElement e XDocument](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="9e451-127">For details about the valid content that can be passed to this method, see [Valid Content of XElement and XDocument Objects](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="9e451-128">Esse método gerará o <xref:System.Xml.Linq.XObject.Changed> e o <xref:System.Xml.Linq.XObject.Changing> eventos.</span><span class="sxs-lookup"><span data-stu-id="9e451-128">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e451-129">O exemplo a seguir usa uma consulta LINQ para criar uma <xref:System.Collections.Generic.IEnumerable%601> de <xref:System.Xml.Linq.XElement>, que, em seguida, ele passa a esse método.</span><span class="sxs-lookup"><span data-stu-id="9e451-129">The following example uses a LINQ query to create an <xref:System.Collections.Generic.IEnumerable%601> of <xref:System.Xml.Linq.XElement>, which it then passes to this method.</span></span> <span data-ttu-id="9e451-130">Isso adiciona os resultados de uma consulta para a árvore no local desejado.</span><span class="sxs-lookup"><span data-stu-id="9e451-130">This adds the results of a query to the tree in the desired location.</span></span>  
  
```csharp  
XElement srcTree = new XElement("Root",  
    new XElement("Element1", 1),  
    new XElement("Element2", 2),  
    new XElement("Element3", 3),  
    new XElement("Element4", 4),  
    new XElement("Element5", 5)  
);  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5)  
);  
XElement child1 = xmlTree.Element("Child1");  
child1.AddAfterSelf(  
    from el in srcTree.Elements()  
    where (int)el > 3  
    select el  
);  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim srcTree As XElement = _   
        <Root>  
            <Element1>1</Element1>  
            <Element2>2</Element2>  
            <Element3>3</Element3>  
            <Element4>4</Element4>  
            <Element5>5</Element5>  
        </Root>  
  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
        </Root>  
  
Dim child1 As XElement = xmlTree.<Child1>(0)  
child1.AddAfterSelf( _  
    From el In srcTree.Elements() _  
    Where CInt(el) > 3 _  
    Select el)  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="9e451-131">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="9e451-131">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child1>1</Child1>  
  <Element4>4</Element4>  
  <Element5>5</Element5>  
  <Child2>2</Child2>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="9e451-132">O pai é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-132">The parent is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="9e451-133">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-133">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddBeforeSelf">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9e451-134">Adiciona o conteúdo especificado imediatamente antes deste nó.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-134">Adds the specified content immediately before this node.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e451-135">Para obter detalhes sobre o conteúdo válido que pode ser passado para esse método, consulte [válido conteúdo de objetos XElement e XDocument](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="9e451-135">For details about the valid content that can be passed to this method, see [Valid Content of XElement and XDocument Objects](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="9e451-136">Esse método gerará o <xref:System.Xml.Linq.XObject.Changed> e <xref:System.Xml.Linq.XObject.Changing> eventos.</span><span class="sxs-lookup"><span data-stu-id="9e451-136">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
 <span data-ttu-id="9e451-137">O <xref:System.Xml.Linq.XContainer> armazena suas notas filho como uma lista vinculada exclusivamente de <xref:System.Xml.Linq.XNode> objetos.</span><span class="sxs-lookup"><span data-stu-id="9e451-137">The <xref:System.Xml.Linq.XContainer> stores its child notes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects.</span></span> <span data-ttu-id="9e451-138">Isso significa que o <xref:System.Xml.Linq.XNode.AddBeforeSelf%2A> método deve percorrer a lista de nós filho direto no contêiner pai.</span><span class="sxs-lookup"><span data-stu-id="9e451-138">This means that the <xref:System.Xml.Linq.XNode.AddBeforeSelf%2A> method must traverse the list of direct child nodes under the parent container.</span></span> <span data-ttu-id="9e451-139">Portanto, usando esse método pode afetar o desempenho.</span><span class="sxs-lookup"><span data-stu-id="9e451-139">Therefore, using this method might  affect your performance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e451-140">O exemplo a seguir usa uma consulta LINQ para criar uma <xref:System.Collections.Generic.IEnumerable%601> de <xref:System.Xml.Linq.XElement>, que, em seguida, ele passa a esse método.</span><span class="sxs-lookup"><span data-stu-id="9e451-140">The following example uses a LINQ query to create an <xref:System.Collections.Generic.IEnumerable%601> of <xref:System.Xml.Linq.XElement>, which it then passes to this method.</span></span> <span data-ttu-id="9e451-141">Isso adiciona os resultados de uma consulta para a árvore no local desejado.</span><span class="sxs-lookup"><span data-stu-id="9e451-141">This adds the results of a query to the tree in the desired location.</span></span>  
  
```csharp  
XElement srcTree = new XElement("Root",  
    new XElement("Element1", 1),  
    new XElement("Element2", 2),  
    new XElement("Element3", 3),  
    new XElement("Element4", 4),  
    new XElement("Element5", 5)  
);  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5)  
);  
XElement child1 = xmlTree.Element("Child1");  
child1.AddBeforeSelf(  
    from el in srcTree.Elements()  
    where (int)el > 3  
    select el  
);  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim srcTree As XElement = _   
        <Root>  
            <Element1>1</Element1>  
            <Element2>2</Element2>  
            <Element3>3</Element3>  
            <Element4>4</Element4>  
            <Element5>5</Element5>  
        </Root>  
  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
        </Root>  
  
Dim child1 As XElement = xmlTree.<Child1>(0)  
child1.AddBeforeSelf( _  
From el In srcTree.Elements() _  
Where CInt(el) > 3 _  
Select el)  
  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="9e451-142">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="9e451-142">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Element4>4</Element4>  
  <Element5>5</Element5>  
  <Child1>1</Child1>  
  <Child2>2</Child2>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="9e451-143">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-143">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddBeforeSelf">
      <MemberSignature Language="C#" Value="public void AddBeforeSelf (object content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddBeforeSelf(object content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.AddBeforeSelf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddBeforeSelf (content As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBeforeSelf(System::Object ^ content);" />
      <MemberSignature Language="F#" Value="member this.AddBeforeSelf : obj -&gt; unit" Usage="xNode.AddBeforeSelf content" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="content">
          <span data-ttu-id="9e451-144">Um objeto de conteúdo que contém conteúdo simples ou uma coleção de objetos de conteúdo a ser adicionada antes deste nó.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-144">A content object that contains simple content or a collection of content objects to be added before this node.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9e451-145">Adiciona o conteúdo especificado imediatamente antes deste nó.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-145">Adds the specified content immediately before this node.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e451-146">Para obter detalhes sobre o conteúdo válido que pode ser passado para esse método, consulte [válido conteúdo de objetos XElement e XDocument](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="9e451-146">For details about the valid content that can be passed to this method, see [Valid Content of XElement and XDocument Objects](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="9e451-147">Esse método gerará o <xref:System.Xml.Linq.XObject.Changed> e o <xref:System.Xml.Linq.XObject.Changing> eventos.</span><span class="sxs-lookup"><span data-stu-id="9e451-147">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
 <span data-ttu-id="9e451-148">O <xref:System.Xml.Linq.XContainer> armazena seus nós filho como uma lista vinculada exclusivamente de <xref:System.Xml.Linq.XNode> objetos.</span><span class="sxs-lookup"><span data-stu-id="9e451-148">The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects.</span></span> <span data-ttu-id="9e451-149">Isso significa que o <xref:System.Xml.Linq.XNode.AddBeforeSelf%2A> método deve percorrer a lista de nós filho direto no contêiner pai.</span><span class="sxs-lookup"><span data-stu-id="9e451-149">This means that the <xref:System.Xml.Linq.XNode.AddBeforeSelf%2A> method must traverse the list of direct child nodes under the parent container.</span></span> <span data-ttu-id="9e451-150">Portanto, usando esse método pode afetar o desempenho.</span><span class="sxs-lookup"><span data-stu-id="9e451-150">Therefore, using this method might  affect your performance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e451-151">O exemplo a seguir usa esse método para adicionar um elemento na árvore.</span><span class="sxs-lookup"><span data-stu-id="9e451-151">The following example uses this method to add an element into the tree.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5)  
);  
XElement child1 = xmlTree.Element("Child1");  
child1.AddBeforeSelf(  
    new XElement("NewChild", 10)  
);  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
        </Root>  
  
Dim child1 As XElement = xmlTree.<Child1>(0)  
child1.AddBeforeSelf(New XElement("NewChild", 10))  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="9e451-152">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="9e451-152">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <NewChild>10</NewChild>  
  <Child1>1</Child1>  
  <Child2>2</Child2>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="9e451-153">O pai é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-153">The parent is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="9e451-154">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-154">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="AddBeforeSelf">
      <MemberSignature Language="C#" Value="public void AddBeforeSelf (params object[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddBeforeSelf(object[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.AddBeforeSelf(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddBeforeSelf (ParamArray content As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBeforeSelf(... cli::array &lt;System::Object ^&gt; ^ content);" />
      <MemberSignature Language="F#" Value="member this.AddBeforeSelf : obj[] -&gt; unit" Usage="xNode.AddBeforeSelf content" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="content">
          <span data-ttu-id="9e451-155">Uma lista de parâmetros de objetos de conteúdo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-155">A parameter list of content objects.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9e451-156">Adiciona o conteúdo especificado imediatamente antes deste nó.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-156">Adds the specified content immediately before this node.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e451-157">Para obter detalhes sobre o conteúdo válido que pode ser passado para esse método, consulte [válido conteúdo de objetos XElement e XDocument](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="9e451-157">For details about the valid content that can be passed to this method, see [Valid Content of XElement and XDocument Objects](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="9e451-158">Esse método gerará o <xref:System.Xml.Linq.XObject.Changed> e o <xref:System.Xml.Linq.XObject.Changing> eventos.</span><span class="sxs-lookup"><span data-stu-id="9e451-158">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
 <span data-ttu-id="9e451-159">O <xref:System.Xml.Linq.XContainer> armazena seus nós filho como uma lista vinculada exclusivamente de <xref:System.Xml.Linq.XNode> objetos.</span><span class="sxs-lookup"><span data-stu-id="9e451-159">The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects.</span></span> <span data-ttu-id="9e451-160">Isso significa que o <xref:System.Xml.Linq.XNode.AddBeforeSelf%2A> método deve percorrer a lista de nós filho direto no contêiner pai.</span><span class="sxs-lookup"><span data-stu-id="9e451-160">This means that the <xref:System.Xml.Linq.XNode.AddBeforeSelf%2A> method must traverse the list of direct child nodes under the parent container.</span></span> <span data-ttu-id="9e451-161">Portanto, usar essa função pode afetar o desempenho.</span><span class="sxs-lookup"><span data-stu-id="9e451-161">Therefore, using this function might affect your performance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e451-162">O exemplo a seguir usa uma consulta LINQ para criar uma <xref:System.Collections.Generic.IEnumerable%601> de <xref:System.Xml.Linq.XElement>, que, em seguida, ele passa a esse método.</span><span class="sxs-lookup"><span data-stu-id="9e451-162">The following example uses a LINQ query to create an <xref:System.Collections.Generic.IEnumerable%601> of <xref:System.Xml.Linq.XElement>, which it then passes to this method.</span></span> <span data-ttu-id="9e451-163">Isso adiciona os resultados de uma consulta para a árvore no local desejado.</span><span class="sxs-lookup"><span data-stu-id="9e451-163">This adds the results of a query to the tree in the desired location.</span></span>  
  
```csharp  
XElement srcTree = new XElement("Root",  
    new XElement("Element1", 1),  
    new XElement("Element2", 2),  
    new XElement("Element3", 3),  
    new XElement("Element4", 4),  
    new XElement("Element5", 5)  
);  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5)  
);  
XElement child1 = xmlTree.Element("Child1");  
child1.AddBeforeSelf(  
    from el in srcTree.Elements()  
    where (int)el > 3  
    select el  
);  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim srcTree As XElement = _   
        <Root>  
            <Element1>1</Element1>  
            <Element2>2</Element2>  
            <Element3>3</Element3>  
            <Element4>4</Element4>  
            <Element5>5</Element5>  
        </Root>  
  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
        </Root>  
  
Dim child1 As XElement = xmlTree.<Child1>(0)  
child1.AddBeforeSelf( _  
    From el In srcTree.Elements() _  
    Where CInt(el) > 3 _  
    Select el)  
  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="9e451-164">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="9e451-164">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Element4>4</Element4>  
  <Element5>5</Element5>  
  <Child1>1</Child1>  
  <Child2>2</Child2>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="9e451-165">O pai é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-165">The parent is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="9e451-166">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-166">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Ancestors">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9e451-167">Retorna uma coleção dos elementos ancestrais deste nó.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-167">Returns a collection of the ancestor elements of this node.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e451-168">Opcionalmente, um nome de nó pode ser especificado para filtrar elementos ancestrais com um nome específico.</span><span class="sxs-lookup"><span data-stu-id="9e451-168">Optionally a node name can be specified to filter for ancestor elements with a specific name.</span></span>  
  
 <span data-ttu-id="9e451-169">Os nós na coleção retornada estão na ordem de documento inversa.</span><span class="sxs-lookup"><span data-stu-id="9e451-169">The nodes in the returned collection are in reverse document order.</span></span>  
  
 <span data-ttu-id="9e451-170">Este método utiliza execução adiada.</span><span class="sxs-lookup"><span data-stu-id="9e451-170">This method uses deferred execution.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="9e451-171">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-171">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Ancestors">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; Ancestors ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; Ancestors() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.Ancestors" />
      <MemberSignature Language="VB.NET" Value="Public Function Ancestors () As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ Ancestors();" />
      <MemberSignature Language="F#" Value="member this.Ancestors : unit -&gt; seq&lt;System.Xml.Linq.XElement&gt;" Usage="xNode.Ancestors " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9e451-172">Retorna uma coleção dos elementos ancestrais deste nó.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-172">Returns a collection of the ancestor elements of this node.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9e451-173">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> de <see cref="T:System.Xml.Linq.XElement" /> dos elementos ancestrais deste nó.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-173">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the ancestor elements of this node.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e451-174">Esse método não retorna em si nos resultados.</span><span class="sxs-lookup"><span data-stu-id="9e451-174">This method does not return itself in the results.</span></span>  
  
 <span data-ttu-id="9e451-175">Os nós na coleção retornada estão na ordem de documento inversa.</span><span class="sxs-lookup"><span data-stu-id="9e451-175">The nodes in the returned collection are in reverse document order.</span></span>  
  
 <span data-ttu-id="9e451-176">Este método utiliza execução adiada.</span><span class="sxs-lookup"><span data-stu-id="9e451-176">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e451-177">O exemplo a seguir usa esse método para enumerar os ancestrais de um nó.</span><span class="sxs-lookup"><span data-stu-id="9e451-177">The following example uses this method to enumerate the ancestors of a node.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child",   
        new XElement("GrandChild", "content")  
    )  
);  
IEnumerable<XElement> grandChild = xmlTree.Descendants("GrandChild");  
foreach (XElement el in grandChild.Ancestors())  
    Console.WriteLine(el.Name);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>  
            <Child>  
                <GrandChild>content</GrandChild>  
            </Child>  
        </Root>  
  
Dim grandChild As IEnumerable(Of XElement) = xmlTree...<GrandChild>  
For Each el In grandChild.Ancestors()  
    Console.WriteLine(el.Name)  
Next  
```  
  
 <span data-ttu-id="9e451-178">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="9e451-178">This example produces the following output:</span></span>  
  
```  
Child  
Root  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="9e451-179">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-179">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Ancestors">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; Ancestors (System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; Ancestors(class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.Ancestors(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ancestors (name As XName) As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ Ancestors(System::Xml::Linq::XName ^ name);" />
      <MemberSignature Language="F#" Value="member this.Ancestors : System.Xml.Linq.XName -&gt; seq&lt;System.Xml.Linq.XElement&gt;" Usage="xNode.Ancestors name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="9e451-180">O <see cref="T:System.Xml.Linq.XName" /> correspondente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-180">The <see cref="T:System.Xml.Linq.XName" /> to match.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9e451-181">Retorna uma coleção filtrada dos elementos ancestrais deste nó.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-181">Returns a filtered collection of the ancestor elements of this node.</span>
          </span>
          <span data-ttu-id="9e451-182">Somente os elementos que têm um <see cref="T:System.Xml.Linq.XName" /> correspondente são incluídos na coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-182">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9e451-183">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> de <see cref="T:System.Xml.Linq.XElement" /> dos elementos ancestrais deste nó.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-183">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the ancestor elements of this node.</span>
          </span>
          <span data-ttu-id="9e451-184">Somente os elementos que têm um <see cref="T:System.Xml.Linq.XName" /> correspondente são incluídos na coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-184">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span>
          </span>
          <span data-ttu-id="9e451-185">Os nós na coleção retornada estão na ordem de documento inversa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-185">The nodes in the returned collection are in reverse document order.</span>
          </span>
          <span data-ttu-id="9e451-186">Este método utiliza execução adiada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-186">This method uses deferred execution.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e451-187">Esse método não retornará em si nos resultados.</span><span class="sxs-lookup"><span data-stu-id="9e451-187">This method will not return itself in the results.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e451-188">O exemplo a seguir usa esse método.</span><span class="sxs-lookup"><span data-stu-id="9e451-188">The following example uses this method.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child",   
        new XElement("GrandChild", "content")  
    )  
);  
IEnumerable<XElement> grandChild = xmlTree.Descendants("GrandChild");  
foreach (XElement el in grandChild.Ancestors("Child"))  
    Console.WriteLine(el.Name);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>  
            <Child>  
                <GrandChild>content</GrandChild>  
            </Child>  
        </Root>  
  
Dim grandChild As IEnumerable(Of XElement) = xmlTree...<GrandChild>  
For Each el In grandChild.Ancestors("Child")  
    Console.WriteLine(el.Name)  
Next  
```  
  
 <span data-ttu-id="9e451-189">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="9e451-189">This example produces the following output:</span></span>  
  
```  
Child  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="9e451-190">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-190">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="CompareDocumentOrder">
      <MemberSignature Language="C#" Value="public static int CompareDocumentOrder (System.Xml.Linq.XNode n1, System.Xml.Linq.XNode n2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 CompareDocumentOrder(class System.Xml.Linq.XNode n1, class System.Xml.Linq.XNode n2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.CompareDocumentOrder(System.Xml.Linq.XNode,System.Xml.Linq.XNode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompareDocumentOrder (n1 As XNode, n2 As XNode) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int CompareDocumentOrder(System::Xml::Linq::XNode ^ n1, System::Xml::Linq::XNode ^ n2);" />
      <MemberSignature Language="F#" Value="static member CompareDocumentOrder : System.Xml.Linq.XNode * System.Xml.Linq.XNode -&gt; int" Usage="System.Xml.Linq.XNode.CompareDocumentOrder (n1, n2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="n1" Type="System.Xml.Linq.XNode" />
        <Parameter Name="n2" Type="System.Xml.Linq.XNode" />
      </Parameters>
      <Docs>
        <param name="n1">
          <span data-ttu-id="9e451-191">Primeiro <see cref="T:System.Xml.Linq.XNode" /> a ser comparado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-191">First <see cref="T:System.Xml.Linq.XNode" /> to compare.</span>
          </span>
        </param>
        <param name="n2">
          <span data-ttu-id="9e451-192">Segundo <see cref="T:System.Xml.Linq.XNode" /> de comparação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-192">Second <see cref="T:System.Xml.Linq.XNode" /> to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9e451-193">Compara dois nós para determinar sua ordem de documento XML relativa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-193">Compares two nodes to determine their relative XML document order.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9e451-194">Um <see langword="int" /> contendo 0 se os nós forem iguais; -1 se <paramref name="n1" /> vier antes de <paramref name="n2" />; 1 se <paramref name="n1" /> vier depois de <paramref name="n2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-194">An <see langword="int" /> containing 0 if the nodes are equal; -1 if <paramref name="n1" /> is before <paramref name="n2" />; 1 if <paramref name="n1" /> is after <paramref name="n2" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e451-195">O <xref:System.Xml.Linq.XContainer> armazena seus nós filho como uma lista vinculada exclusivamente de <xref:System.Xml.Linq.XNode> objetos.</span><span class="sxs-lookup"><span data-stu-id="9e451-195">The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects.</span></span> <span data-ttu-id="9e451-196">Isso significa que o <xref:System.Xml.Linq.XNode.CompareDocumentOrder%2A> método deve percorrer os ancestrais de dois nós que estão sendo comparados até encontrar o pai comum.</span><span class="sxs-lookup"><span data-stu-id="9e451-196">This means that the <xref:System.Xml.Linq.XNode.CompareDocumentOrder%2A> method must traverse the ancestors of the two nodes being compared until it finds the common parent.</span></span> <span data-ttu-id="9e451-197">Em seguida, ele deve percorrer a lista de nós de filhos do pai comum para determinar a ordem dos dois nós que estão sendo comparados.</span><span class="sxs-lookup"><span data-stu-id="9e451-197">Then it must traverse the list of the common parent's child nodes to determine the order of the two nodes being compared.</span></span> <span data-ttu-id="9e451-198">Portanto, usando esse método pode afetar o desempenho.</span><span class="sxs-lookup"><span data-stu-id="9e451-198">Therefore, using this method might affect your performance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e451-199">O exemplo a seguir usa esse método.</span><span class="sxs-lookup"><span data-stu-id="9e451-199">The following example uses this method.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1",  
        new XElement("GrandChild1", 1),  
        new XElement("GrandChild2", 2),  
        new XElement("GrandChild3", 3)  
    ),  
    new XElement("Child2",  
        new XElement("GrandChild4", 4),  
        new XElement("GrandChild5", 5),  
        new XElement("GrandChild6", 6)  
    )  
);  
XElement el1 = xmlTree.Descendants("GrandChild2").First();  
XElement el2 = xmlTree.Descendants("GrandChild6").First();  
if (XElement.CompareDocumentOrder(el1, el2) == 0)  
    Console.WriteLine("Compared elements are the same element");  
else if (XElement.CompareDocumentOrder(el1, el2) > 0)  
    Console.WriteLine("el1 is after el2");  
else  
    Console.WriteLine("el1 is before el2");  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>  
                <GrandChild1>1</GrandChild1>  
                <GrandChild2>2</GrandChild2>  
                <GrandChild3>3</GrandChild3>  
            </Child1>  
            <Child2>  
                <GrandChild4>4</GrandChild4>  
                <GrandChild5>5</GrandChild5>  
                <GrandChild6>6</GrandChild6>  
            </Child2>  
        </Root>  
  
Dim el1 As XElement = xmlTree...<GrandChild2>(0)  
Dim el2 As XElement = xmlTree...<GrandChild6>(0)  
  
If (XElement.CompareDocumentOrder(el1, el2) = 0) Then  
    Console.WriteLine("Compared elements are the same element")  
ElseIf (XElement.CompareDocumentOrder(el1, el2) > 0) Then  
    Console.WriteLine("el1 is after el2")  
Else  
    Console.WriteLine("el1 is before el2")  
End If  
```  
  
 <span data-ttu-id="9e451-200">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="9e451-200">This example produces the following output:</span></span>  
  
```  
el1 is before el2  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="9e451-201">Os dois nós não compartilham um ancestral comum.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-201">The two nodes do not share a common ancestor.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="9e451-202">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-202">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateReader">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9e451-203">Cria um <see cref="T:System.Xml.XmlReader" /> para este nó.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-203">Creates an <see cref="T:System.Xml.XmlReader" /> for this node.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateReader">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader CreateReader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReader CreateReader() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.CreateReader" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateReader () As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlReader ^ CreateReader();" />
      <MemberSignature Language="F#" Value="member this.CreateReader : unit -&gt; System.Xml.XmlReader" Usage="xNode.CreateReader " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9e451-204">Cria um <see cref="T:System.Xml.XmlReader" /> para este nó.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-204">Creates an <see cref="T:System.Xml.XmlReader" /> for this node.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9e451-205">Um <see cref="T:System.Xml.XmlReader" /> que pode ser usado para ler esse nó e seus descendentes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-205">An <see cref="T:System.Xml.XmlReader" /> that can be used to read this node and its descendants.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e451-206">Você normalmente usa esse método quando você tem que fornecer outro componente com um <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="9e451-206">You typically use this method when you have to supply another component with an <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="9e451-207">Por exemplo, você pode criar uma <xref:System.Xml.XmlReader> de um [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] árvore e, em seguida, passar esse leitor para <xref:System.Xml.XmlDocument.Load%2A>.</span><span class="sxs-lookup"><span data-stu-id="9e451-207">For example, you can create an <xref:System.Xml.XmlReader> from a [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] tree, and then pass that reader to <xref:System.Xml.XmlDocument.Load%2A>.</span></span>  
  
 <span data-ttu-id="9e451-208">Todos os leitores retornados por <xref:System.Xml.XmlReader.Create%2A> são normalizar os leitores.</span><span class="sxs-lookup"><span data-stu-id="9e451-208">All of the readers returned by <xref:System.Xml.XmlReader.Create%2A> are normalizing readers.</span></span> <span data-ttu-id="9e451-209">Eles sempre executam a normalização de quebra de linha e a normalização completa de atributos.</span><span class="sxs-lookup"><span data-stu-id="9e451-209">They always perform line break normalization and full normalization of attributes.</span></span> <span data-ttu-id="9e451-210">Em contraste, o <xref:System.Xml.XmlReader> retornado por <xref:System.Xml.Linq.XNode.CreateReader%2A> não é um leitor de normalizar.</span><span class="sxs-lookup"><span data-stu-id="9e451-210">In contrast, the <xref:System.Xml.XmlReader> returned by <xref:System.Xml.Linq.XNode.CreateReader%2A> is not a normalizing reader.</span></span> <span data-ttu-id="9e451-211">Ele não transforma qualquer espaço em branco.</span><span class="sxs-lookup"><span data-stu-id="9e451-211">It does not transform any white space.</span></span> <span data-ttu-id="9e451-212">Ele também retorna atributos na ordem em que foram adicionados, mas não em ordem de nome de atributo.</span><span class="sxs-lookup"><span data-stu-id="9e451-212">It also returns attributes in the order that they were added, not in attribute name order.</span></span>  
  
 [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] <span data-ttu-id="9e451-213">não mantém informações sobre se os atributos são atributos padrão.</span><span class="sxs-lookup"><span data-stu-id="9e451-213">does not keep information about whether attributes are default attributes.</span></span> <span data-ttu-id="9e451-214"><xref:System.Xml.XmlReader.IsDefault%2A> sempre retornará false, independentemente se o atributo foi preenchido de um valor padrão ou não.</span><span class="sxs-lookup"><span data-stu-id="9e451-214"><xref:System.Xml.XmlReader.IsDefault%2A> will always return false regardless of whether the attribute was populated from a default value or not.</span></span>  
  
 <span data-ttu-id="9e451-215">O `PUBLIC` e `SYSTEM` pseudo atributos, na <xref:System.Xml.Linq.XDocumentType> não estão disponíveis por meio de <xref:System.Xml.XmlReader.MoveToAttribute%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="9e451-215">The `PUBLIC` and `SYSTEM` pseudo attributes on <xref:System.Xml.Linq.XDocumentType> are not available through the <xref:System.Xml.XmlReader.MoveToAttribute%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="9e451-216">Eles só estão disponíveis por meio de <xref:System.Xml.XmlReader.GetAttribute%2A?displayProperty=nameWithType> método que usa o nome qualificado do atributo como um parâmetro.</span><span class="sxs-lookup"><span data-stu-id="9e451-216">They are only available through the <xref:System.Xml.XmlReader.GetAttribute%2A?displayProperty=nameWithType> method that takes the qualified name of the attribute as a parameter.</span></span> <span data-ttu-id="9e451-217">Se você tiver que recuperar os `PUBLIC` ou `SYSTEM` atributos, você deve usar o <xref:System.Xml.XmlReader.GetAttribute%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="9e451-217">If you have to retrieve the `PUBLIC` or `SYSTEM` attributes, you should use the <xref:System.Xml.XmlReader.GetAttribute%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="9e451-218">Não há suporte para dados Base64 e BinHex.</span><span class="sxs-lookup"><span data-stu-id="9e451-218">Base64 and BinHex data are not supported.</span></span> <span data-ttu-id="9e451-219">Se você tentar se recuperar esses tipos de dados (por exemplo, chamando <xref:System.Xml.XmlReader.ReadElementContentAsBase64%2A>), o leitor lançará <xref:System.NotSupportedException>.</span><span class="sxs-lookup"><span data-stu-id="9e451-219">If you attempt to retrieve these types of data (for example, by calling <xref:System.Xml.XmlReader.ReadElementContentAsBase64%2A>), the reader will throw <xref:System.NotSupportedException>.</span></span>  
  
 <span data-ttu-id="9e451-220">O `xml` declaração não será exposta pelo leitor.</span><span class="sxs-lookup"><span data-stu-id="9e451-220">The `xml` declaration is not surfaced by the reader.</span></span> <span data-ttu-id="9e451-221">Durante a leitura, você não encontrará um nó do tipo <xref:System.Xml.XmlNodeType.XmlDeclaration>.</span><span class="sxs-lookup"><span data-stu-id="9e451-221">While reading, you will not encounter a node of type <xref:System.Xml.XmlNodeType.XmlDeclaration>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e451-222">O exemplo a seguir cria uma árvore XML, cria uma <xref:System.Xml.XmlReader> usando o <xref:System.Xml.Linq.XNode.CreateReader%2A> método e cria um <xref:System.Xml.XmlDocument> usando o leitor.</span><span class="sxs-lookup"><span data-stu-id="9e451-222">The following example creates an XML tree, creates an <xref:System.Xml.XmlReader> by using the <xref:System.Xml.Linq.XNode.CreateReader%2A> method, and creates an <xref:System.Xml.XmlDocument> by using the reader.</span></span>  
  
```csharp  
XDocument xmlTree = new XDocument(  
    new XElement("Root",  
        new XAttribute("Att1", "Attribute Content"),  
        new XElement("Child1", 1),  
        new XElement("Child2", 2)  
    )  
);  
XmlReader reader = xmlTree.CreateReader();  
reader.MoveToContent();  
XmlDocument doc = new XmlDocument();  
XmlNode cd = doc.ReadNode(reader);  
doc.AppendChild(cd);  
Console.WriteLine(doc.OuterXml);  
```  
  
```vb  
Dim xmlTree As XDocument =  _   
    <?xml version="1.0" encoding="utf-8" standalone="yes"?>  
        <Root Att1="Attribute Content">  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
        </Root>  
Dim reader As XmlReader = xmlTree.CreateReader()  
reader.MoveToContent()  
Dim doc As XmlDocument = New XmlDocument()  
Dim cd As XmlNode = doc.ReadNode(reader)  
doc.AppendChild(cd)  
Console.WriteLine(doc.OuterXml)  
```  
  
 <span data-ttu-id="9e451-223">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="9e451-223">This example produces the following output:</span></span>  
  
```xml  
<Root Att1="Attribute Content"><Child1>1</Child1><Child2>2</Child2></Root>  
```  
  
 <span data-ttu-id="9e451-224">Outro uso para esse método é fazer uma transformação XSLT.</span><span class="sxs-lookup"><span data-stu-id="9e451-224">Another use for this method is to do an XSLT transformation.</span></span> <span data-ttu-id="9e451-225">Você pode criar uma árvore XML, criar um <xref:System.Xml.XmlReader> na árvore XML, criar um novo documento e criar um <xref:System.Xml.XmlWriter> que gravarão no novo documento.</span><span class="sxs-lookup"><span data-stu-id="9e451-225">You can create an XML tree, create an <xref:System.Xml.XmlReader> from the XML tree, create a new document, and create an <xref:System.Xml.XmlWriter> that will write into the new document.</span></span> <span data-ttu-id="9e451-226">Em seguida, você pode chamar a transformação XSLT, passando <xref:System.Xml.XmlReader> e <xref:System.Xml.XmlWriter> para a transformação.</span><span class="sxs-lookup"><span data-stu-id="9e451-226">Then, you can invoke the XSLT transformation, passing the <xref:System.Xml.XmlReader> and <xref:System.Xml.XmlWriter> to the transformation.</span></span> <span data-ttu-id="9e451-227">Depois que a transformação for concluída com êxito, a nova árvore XML será populada com os resultados da transformação.</span><span class="sxs-lookup"><span data-stu-id="9e451-227">After the transformation successfully completes, the new XML tree is populated with the results of the transform.</span></span>  
  
```csharp  
string xslMarkup = @"<?xml version='1.0'?>  
<xsl:stylesheet xmlns:xsl='http://www.w3.org/1999/XSL/Transform' version='1.0'>  
    <xsl:template match='/Parent'>  
        <Root>  
            <C1>  
            <xsl:value-of select='Child1'/>  
            </C1>  
            <C2>  
            <xsl:value-of select='Child2'/>  
            </C2>  
        </Root>  
    </xsl:template>  
</xsl:stylesheet>";  
  
XDocument xmlTree = new XDocument(  
    new XElement("Parent",  
        new XElement("Child1", "Child1 data"),  
        new XElement("Child2", "Child2 data")  
    )  
);  
  
XDocument newTree = new XDocument();  
using (XmlWriter writer = newTree.CreateWriter()) {  
    // Load the style sheet.  
    XslCompiledTransform xslt = new XslCompiledTransform();  
    xslt.Load(XmlReader.Create(new StringReader(xslMarkup)));  
  
    // Execute the transform and output the results to a writer.  
    xslt.Transform(xmlTree.CreateReader(), writer);  
}  
  
Console.WriteLine(newTree);  
```  
  
```vb  
Dim xslMarkup As XDocument = _   
    <?xml version='1.0'?>  
    <xsl:stylesheet xmlns:xsl='http://www.w3.org/1999/XSL/Transform' version='1.0'>  
        <xsl:template match='/Parent'>  
            <Root>  
                <C1>  
                    <xsl:value-of select='Child1'/>  
                </C1>  
                <C2>  
                    <xsl:value-of select='Child2'/>  
                </C2>  
            </Root>  
        </xsl:template>  
    </xsl:stylesheet>  
  
Dim xmlTree As XElement = _   
        <Parent>  
            <Child1>Child1 data</Child1>  
            <Child2>Child2 data</Child2>  
        </Parent>  
  
Dim newTree As XDocument = New XDocument()  
  
Using writer As XmlWriter = newTree.CreateWriter()  
    ' Load the style sheet.  
    Dim xslt As XslCompiledTransform = _  
        New XslCompiledTransform()  
    xslt.Load(xslMarkup.CreateReader())  
  
    ' Execute the transform and output the results to a writer.  
    xslt.Transform(xmlTree.CreateReader(), writer)  
End Using  
  
Console.WriteLine(newTree)  
```  
  
 <span data-ttu-id="9e451-228">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="9e451-228">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <C1>Child1 data</C1>  
  <C2>Child2 data</C2>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="9e451-229">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-229">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="CreateReader">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader CreateReader (System.Xml.Linq.ReaderOptions readerOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReader CreateReader(valuetype System.Xml.Linq.ReaderOptions readerOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.CreateReader(System.Xml.Linq.ReaderOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlReader ^ CreateReader(System::Xml::Linq::ReaderOptions readerOptions);" />
      <MemberSignature Language="F#" Value="member this.CreateReader : System.Xml.Linq.ReaderOptions -&gt; System.Xml.XmlReader" Usage="xNode.CreateReader readerOptions" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="readerOptions" Type="System.Xml.Linq.ReaderOptions" />
      </Parameters>
      <Docs>
        <param name="readerOptions">
          <span data-ttu-id="9e451-230">Um objeto <see cref="T:System.Xml.Linq.ReaderOptions" /> que especifica se os namespaces duplicados devem ser omitidos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-230">A <see cref="T:System.Xml.Linq.ReaderOptions" /> object that specifies whether to omit duplicate namespaces.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9e451-231">Cria um <see cref="T:System.Xml.XmlReader" /> com as opções especificadas pelo parâmetro <paramref name="readerOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-231">Creates an <see cref="T:System.Xml.XmlReader" /> with the options specified by the <paramref name="readerOptions" /> parameter.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9e451-232">Um objeto <see cref="T:System.Xml.XmlReader" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-232">An <see cref="T:System.Xml.XmlReader" /> object.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeepEquals">
      <MemberSignature Language="C#" Value="public static bool DeepEquals (System.Xml.Linq.XNode n1, System.Xml.Linq.XNode n2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool DeepEquals(class System.Xml.Linq.XNode n1, class System.Xml.Linq.XNode n2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.DeepEquals(System.Xml.Linq.XNode,System.Xml.Linq.XNode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DeepEquals (n1 As XNode, n2 As XNode) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool DeepEquals(System::Xml::Linq::XNode ^ n1, System::Xml::Linq::XNode ^ n2);" />
      <MemberSignature Language="F#" Value="static member DeepEquals : System.Xml.Linq.XNode * System.Xml.Linq.XNode -&gt; bool" Usage="System.Xml.Linq.XNode.DeepEquals (n1, n2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="n1" Type="System.Xml.Linq.XNode" />
        <Parameter Name="n2" Type="System.Xml.Linq.XNode" />
      </Parameters>
      <Docs>
        <param name="n1">
          <span data-ttu-id="9e451-233">O primeiro <see cref="T:System.Xml.Linq.XNode" /> a ser comparado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-233">The first <see cref="T:System.Xml.Linq.XNode" /> to compare.</span>
          </span>
        </param>
        <param name="n2">
          <span data-ttu-id="9e451-234">O segundo <see cref="T:System.Xml.Linq.XNode" /> a ser comparado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-234">The second <see cref="T:System.Xml.Linq.XNode" /> to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9e451-235">Compara os valores de dois nós, incluindo os valores de todos os nós descendentes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-235">Compares the values of two nodes, including the values of all descendant nodes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9e451-236">
            <see langword="true" /> se os nós forem iguais; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-236">
              <see langword="true" /> if the nodes are equal; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e451-237">Os seguintes critérios determinam se os dois nós são iguais:</span><span class="sxs-lookup"><span data-stu-id="9e451-237">The following criteria determine whether two nodes are equal:</span></span>  
  
-   <span data-ttu-id="9e451-238">Um `null` nó é igual a outro `null` nó, mas diferentes para um não -`null` nó.</span><span class="sxs-lookup"><span data-stu-id="9e451-238">A `null` node is equal to another `null` node but unequal to a non-`null` node.</span></span>  
  
-   <span data-ttu-id="9e451-239">Dois <xref:System.Xml.Linq.XNode> objetos de tipos diferentes nunca são iguais.</span><span class="sxs-lookup"><span data-stu-id="9e451-239">Two <xref:System.Xml.Linq.XNode> objects of different types are never equal.</span></span>  
  
-   <span data-ttu-id="9e451-240">Dois <xref:System.Xml.Linq.XText> nós são iguais se eles contiverem o mesmo texto.</span><span class="sxs-lookup"><span data-stu-id="9e451-240">Two <xref:System.Xml.Linq.XText> nodes are equal if they contain the same text.</span></span>  
  
-   <span data-ttu-id="9e451-241">Dois <xref:System.Xml.Linq.XElement> nós são iguais se eles tiverem o mesmo nome de marca, o mesmo conjunto de atributos com os mesmos valores, e (ignorando os comentários e instruções de processamento) contêm duas sequências de comprimento igual iguais de nós de conteúdo.</span><span class="sxs-lookup"><span data-stu-id="9e451-241">Two <xref:System.Xml.Linq.XElement> nodes are equal if they have the same tag name, the same set of attributes with the same values, and (ignoring comments and processing instructions) contain two equal length sequences of equal content nodes.</span></span>  
  
-   <span data-ttu-id="9e451-242">Dois <xref:System.Xml.Linq.XDocument> nós são iguais se os seus nós de raiz são iguais.</span><span class="sxs-lookup"><span data-stu-id="9e451-242">Two <xref:System.Xml.Linq.XDocument> nodes are equal if their root nodes are equal.</span></span>  
  
-   <span data-ttu-id="9e451-243">Dois <xref:System.Xml.Linq.XComment> nós são iguais se eles contiverem o mesmo texto do comentário.</span><span class="sxs-lookup"><span data-stu-id="9e451-243">Two <xref:System.Xml.Linq.XComment> nodes are equal if they contain the same comment text.</span></span>  
  
-   <span data-ttu-id="9e451-244">Dois <xref:System.Xml.Linq.XProcessingInstruction> nós são iguais se tiverem o mesmo destino e dados.</span><span class="sxs-lookup"><span data-stu-id="9e451-244">Two <xref:System.Xml.Linq.XProcessingInstruction> nodes are equal if they have the same target and data.</span></span>  
  
-   <span data-ttu-id="9e451-245">Dois <xref:System.Xml.Linq.XDocumentType> nós são iguais se a ter o mesmo nome, a ID pública, a ID do sistema e o subconjunto interno.</span><span class="sxs-lookup"><span data-stu-id="9e451-245">Two <xref:System.Xml.Linq.XDocumentType> nodes are equal if the have the same name, public ID, system ID, and internal subset.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e451-246">O exemplo a seguir usa esse método para comparar duas árvores XML.</span><span class="sxs-lookup"><span data-stu-id="9e451-246">The following example uses this method to compare two XML trees.</span></span>  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XElement("Child1", 1),  
    new XElement("Child2", "some content")  
);  
XElement xmlTree2 = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XElement("Child1", 1),  
    new XElement("Child2", "some content")  
);  
Console.WriteLine(XNode.DeepEquals(xmlTree1, xmlTree2));  
```  
  
```vb  
Dim xmlTree1 As XElement = _   
        <Root Att1="1" Att2="2">  
            <Child1>1</Child1>  
            <Child2>some content</Child2>  
        </Root>  
  
Dim xmlTree2 As XElement = _   
        <Root Att1="1" Att2="2">  
            <Child1>1</Child1>  
            <Child2>some content</Child2>  
        </Root>  
  
Console.WriteLine(XNode.DeepEquals(xmlTree1, xmlTree2))  
```  
  
 <span data-ttu-id="9e451-247">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="9e451-247">This example produces the following output:</span></span>  
  
```  
True  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="9e451-248">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-248">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="DocumentOrderComparer">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XNodeDocumentOrderComparer DocumentOrderComparer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Xml.Linq.XNodeDocumentOrderComparer DocumentOrderComparer" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XNode.DocumentOrderComparer" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DocumentOrderComparer As XNodeDocumentOrderComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Xml::Linq::XNodeDocumentOrderComparer ^ DocumentOrderComparer { System::Xml::Linq::XNodeDocumentOrderComparer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DocumentOrderComparer : System.Xml.Linq.XNodeDocumentOrderComparer" Usage="System.Xml.Linq.XNode.DocumentOrderComparer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNodeDocumentOrderComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9e451-249">Obtém um comparador que pode comparar a posição relativa de dois nós.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-249">Gets a comparer that can compare the relative position of two nodes.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9e451-250">Um <see cref="T:System.Xml.Linq.XNodeDocumentOrderComparer" /> que pode comparar a posição relativa de dois nós.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-250">An <see cref="T:System.Xml.Linq.XNodeDocumentOrderComparer" /> that can compare the relative position of two nodes.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e451-251">Essa propriedade é usada principalmente internamente para implementar o <xref:System.Xml.Linq.Extensions.InDocumentOrder%2A> método de extensão.</span><span class="sxs-lookup"><span data-stu-id="9e451-251">This property is primarily used internally for implementing the <xref:System.Xml.Linq.Extensions.InDocumentOrder%2A> extension method.</span></span> <span data-ttu-id="9e451-252">A abordagem recomendada é usar esse método de extensão em vez de usar essa propriedade diretamente.</span><span class="sxs-lookup"><span data-stu-id="9e451-252">The recommended approach is to use that extension method instead of using this property directly.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e451-253">O exemplo a seguir cria uma árvore XML com alguns elementos.</span><span class="sxs-lookup"><span data-stu-id="9e451-253">The following example creates an XML tree with some elements.</span></span> <span data-ttu-id="9e451-254">Em seguida, ele cria um <xref:System.Collections.Generic.List%601> de <xref:System.Xml.Linq.XNode> que contém alguns elementos da árvore XML aleatório.</span><span class="sxs-lookup"><span data-stu-id="9e451-254">It then creates a <xref:System.Collections.Generic.List%601> of <xref:System.Xml.Linq.XNode> that contains some elements from the XML tree at random.</span></span> <span data-ttu-id="9e451-255">Ele classifica a lista, usando essa propriedade para recuperar um <xref:System.Xml.Linq.XNodeDocumentOrderComparer>, que implementa o <xref:System.Collections.IComparer?displayProperty=nameWithType> e <xref:System.Collections.Generic.IComparer%601?displayProperty=nameWithType> interfaces.</span><span class="sxs-lookup"><span data-stu-id="9e451-255">It sorts the list, using this property to retrieve a <xref:System.Xml.Linq.XNodeDocumentOrderComparer>, which implements the <xref:System.Collections.IComparer?displayProperty=nameWithType> and <xref:System.Collections.Generic.IComparer%601?displayProperty=nameWithType> interfaces.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5)  
);  
  
List<XNode> nodeList = new List<XNode>();  
nodeList.Add(xmlTree.Element("Child5"));  
nodeList.Add(xmlTree.Element("Child3"));  
nodeList.Add(xmlTree.Element("Child1"));  
  
// Sort nodes in document order.  
nodeList.Sort(XNode.DocumentOrderComparer);  
  
foreach (XElement el in nodeList)  
    Console.WriteLine(el);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
        </Root>  
  
Dim nodeList As List(Of XNode) = New List(Of XNode)()  
nodeList.Add(xmlTree.Element("Child5"))  
nodeList.Add(xmlTree.Element("Child3"))  
nodeList.Add(xmlTree.Element("Child1"))  
  
' Sort nodes in document order.  
nodeList.Sort(XNode.DocumentOrderComparer)  
  
For Each el In nodeList  
    Console.WriteLine(el)  
Next  
```  
  
 <span data-ttu-id="9e451-256">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="9e451-256">This example produces the following output:</span></span>  
  
```  
<Child1>1</Child1>  
<Child3>3</Child3>  
<Child5>5</Child5>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="9e451-257">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-257">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ElementsAfterSelf">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9e451-258">Retorna uma coleção dos elementos irmão após esse nó, na ordem do documento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-258">Returns a collection of the sibling elements after this node, in document order.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e451-259">Este método utiliza execução adiada.</span><span class="sxs-lookup"><span data-stu-id="9e451-259">This method uses deferred execution.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="9e451-260">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-260">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ElementsAfterSelf">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; ElementsAfterSelf ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; ElementsAfterSelf() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.ElementsAfterSelf" />
      <MemberSignature Language="VB.NET" Value="Public Function ElementsAfterSelf () As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ ElementsAfterSelf();" />
      <MemberSignature Language="F#" Value="member this.ElementsAfterSelf : unit -&gt; seq&lt;System.Xml.Linq.XElement&gt;" Usage="xNode.ElementsAfterSelf " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9e451-261">Retorna uma coleção dos elementos irmão após esse nó, na ordem do documento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-261">Returns a collection of the sibling elements after this node, in document order.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9e451-262">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> de <see cref="T:System.Xml.Linq.XElement" /> dos elementos irmãos após esse nó, na ordem do documento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-262">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the sibling elements after this node, in document order.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e451-263">Esse método inclui apenas irmãos na coleção retornada.</span><span class="sxs-lookup"><span data-stu-id="9e451-263">This method only includes siblings in the returned collection.</span></span> <span data-ttu-id="9e451-264">Ele não inclui os descendentes.</span><span class="sxs-lookup"><span data-stu-id="9e451-264">It does not include descendants.</span></span>  
  
 <span data-ttu-id="9e451-265">Este método utiliza execução adiada.</span><span class="sxs-lookup"><span data-stu-id="9e451-265">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e451-266">O exemplo a seguir cria um elemento com algum conteúdo complexo.</span><span class="sxs-lookup"><span data-stu-id="9e451-266">The following example creates an element with some complex content.</span></span> <span data-ttu-id="9e451-267">Em seguida, ele usa esse método para recuperar os nós na ordem do documento.</span><span class="sxs-lookup"><span data-stu-id="9e451-267">It then uses this method to retrieve the nodes in document order.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XText("Text content."),  
    new XElement("Child1", "child1 content"),  
    new XElement("Child2", "child2 content"),  
    new XElement("Child3", "child3 content"),  
    new XText("More text content."),  
    new XElement("Child4", "child4 content"),  
    new XElement("Child5", "child5 content")  
);  
XElement child = xmlTree.Element("Child3");  
IEnumerable<XElement> elements = child.ElementsAfterSelf();  
foreach (XElement el in elements)  
    Console.WriteLine(el.Name);  
```  
  
```vb  
Dim xmlTree As XElement = _  
        <Root>Text content.  
            <Child1>child1 content</Child1>  
            <Child2>child2 content</Child2>  
            <Child3>child3 content</Child3>More text content.  
            <Child4>child4 content</Child4>  
            <Child5>child5 content</Child5>  
        </Root>  
  
Dim child As XElement = xmlTree.<Child3>(0)  
Dim elements As IEnumerable(Of XElement) = child.ElementsAfterSelf()  
For Each el In elements  
    Console.WriteLine(el.Name)  
Next  
```  
  
 <span data-ttu-id="9e451-268">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="9e451-268">This example produces the following output:</span></span>  
  
```  
Child4  
Child5  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="9e451-269">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-269">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ElementsAfterSelf">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; ElementsAfterSelf (System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; ElementsAfterSelf(class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.ElementsAfterSelf(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Function ElementsAfterSelf (name As XName) As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ ElementsAfterSelf(System::Xml::Linq::XName ^ name);" />
      <MemberSignature Language="F#" Value="member this.ElementsAfterSelf : System.Xml.Linq.XName -&gt; seq&lt;System.Xml.Linq.XElement&gt;" Usage="xNode.ElementsAfterSelf name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="9e451-270">O <see cref="T:System.Xml.Linq.XName" /> correspondente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-270">The <see cref="T:System.Xml.Linq.XName" /> to match.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9e451-271">Retorna uma coleção filtrada dos elementos irmãos após esse nó, na ordem do documento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-271">Returns a filtered collection of the sibling elements after this node, in document order.</span>
          </span>
          <span data-ttu-id="9e451-272">Somente os elementos que têm um <see cref="T:System.Xml.Linq.XName" /> correspondente são incluídos na coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-272">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9e451-273">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> de <see cref="T:System.Xml.Linq.XElement" /> dos elementos irmãos após esse nó, na ordem do documento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-273">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the sibling elements after this node, in document order.</span>
          </span>
          <span data-ttu-id="9e451-274">Somente os elementos que têm um <see cref="T:System.Xml.Linq.XName" /> correspondente são incluídos na coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-274">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e451-275">Esse método inclui apenas irmãos na coleção retornada.</span><span class="sxs-lookup"><span data-stu-id="9e451-275">This method only includes siblings in the returned collection.</span></span> <span data-ttu-id="9e451-276">Ele não inclui os descendentes.</span><span class="sxs-lookup"><span data-stu-id="9e451-276">It does not include descendants.</span></span>  
  
 <span data-ttu-id="9e451-277">Este método utiliza execução adiada.</span><span class="sxs-lookup"><span data-stu-id="9e451-277">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e451-278">O exemplo a seguir cria um elemento com algum conteúdo complexo.</span><span class="sxs-lookup"><span data-stu-id="9e451-278">The following example creates an element with some complex content.</span></span> <span data-ttu-id="9e451-279">Ele, em seguida, usa esse método para recuperar os elementos irmãos, na ordem do documento.</span><span class="sxs-lookup"><span data-stu-id="9e451-279">It then uses this method to retrieve the sibling elements, in document order.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XText("Text content."),  
    new XElement("Child1", "child1 content"),  
    new XElement("Child2", "child2 content"),  
    new XElement("Child3", "child3 content"),  
    new XText("More text content."),  
    new XElement("Child4", "child4 content"),  
    new XElement("Child5", "child5 content")  
);  
XElement child = xmlTree.Element("Child3");  
IEnumerable<XElement> elements = child.ElementsAfterSelf("Child4");  
foreach (XElement el in elements)  
    Console.WriteLine(el.Name);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>Text content.  
            <Child1>child1 content</Child1>  
            <Child2>child2 content</Child2>  
            <Child3>child3 content</Child3>More text content.  
            <Child4>child4 content</Child4>  
            <Child5>child5 content</Child5>  
        </Root>  
  
Dim child As XElement = xmlTree.<Child3>(0)  
Dim elements As IEnumerable(Of XElement) = child.ElementsAfterSelf("Child4")  
  
For Each el In elements  
    Console.WriteLine(el.Name)  
Next  
```  
  
 <span data-ttu-id="9e451-280">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="9e451-280">This example produces the following output:</span></span>  
  
```  
Child4  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="9e451-281">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-281">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ElementsBeforeSelf">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9e451-282">Retorna uma coleção dos elementos irmãos antes desse nó, na ordem do documento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-282">Returns a collection of the sibling elements before this node, in document order.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e451-283">Este método utiliza execução adiada.</span><span class="sxs-lookup"><span data-stu-id="9e451-283">This method uses deferred execution.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="9e451-284">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-284">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ElementsBeforeSelf">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; ElementsBeforeSelf ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; ElementsBeforeSelf() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.ElementsBeforeSelf" />
      <MemberSignature Language="VB.NET" Value="Public Function ElementsBeforeSelf () As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ ElementsBeforeSelf();" />
      <MemberSignature Language="F#" Value="member this.ElementsBeforeSelf : unit -&gt; seq&lt;System.Xml.Linq.XElement&gt;" Usage="xNode.ElementsBeforeSelf " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9e451-285">Retorna uma coleção dos elementos irmãos antes desse nó, na ordem do documento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-285">Returns a collection of the sibling elements before this node, in document order.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9e451-286">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> de <see cref="T:System.Xml.Linq.XElement" /> dos elementos irmãos antes desse nó, na ordem do documento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-286">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the sibling elements before this node, in document order.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e451-287">Esse método inclui apenas irmãos na coleção retornada.</span><span class="sxs-lookup"><span data-stu-id="9e451-287">This method only includes siblings in the returned collection.</span></span> <span data-ttu-id="9e451-288">Ele não inclui os descendentes.</span><span class="sxs-lookup"><span data-stu-id="9e451-288">It does not include descendants.</span></span>  
  
 <span data-ttu-id="9e451-289">Este método utiliza execução adiada.</span><span class="sxs-lookup"><span data-stu-id="9e451-289">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e451-290">O exemplo a seguir usa esse método de eixo.</span><span class="sxs-lookup"><span data-stu-id="9e451-290">The following example uses this axis method.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XText("Text content."),  
    new XElement("Child1", "child1 content"),  
    new XElement("Child2", "child2 content"),  
    new XElement("Child3", "child3 content"),  
    new XText("More text content."),  
    new XElement("Child4", "child4 content"),  
    new XElement("Child5", "child5 content")  
);  
XElement child = xmlTree.Element("Child3");  
IEnumerable<XElement> elements = child.ElementsBeforeSelf();  
foreach (XElement el in elements)  
    Console.WriteLine(el.Name);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>Text content.  
            <Child1>child1 content</Child1>  
            <Child2>child2 content</Child2>  
            <Child3>child3 content</Child3>More text content.  
            <Child4>child4 content</Child4>  
            <Child5>child5 content</Child5>  
        </Root>  
  
Dim child As XElement = xmlTree.<Child3>(0)  
Dim elements As IEnumerable(Of XElement) = child.ElementsBeforeSelf()  
  
For Each el In elements  
    Console.WriteLine(el.Name)  
Next  
```  
  
 <span data-ttu-id="9e451-291">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="9e451-291">This example produces the following output:</span></span>  
  
```  
Child1  
Child2  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="9e451-292">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-292">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ElementsBeforeSelf">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; ElementsBeforeSelf (System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; ElementsBeforeSelf(class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.ElementsBeforeSelf(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Function ElementsBeforeSelf (name As XName) As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ ElementsBeforeSelf(System::Xml::Linq::XName ^ name);" />
      <MemberSignature Language="F#" Value="member this.ElementsBeforeSelf : System.Xml.Linq.XName -&gt; seq&lt;System.Xml.Linq.XElement&gt;" Usage="xNode.ElementsBeforeSelf name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="9e451-293">O <see cref="T:System.Xml.Linq.XName" /> correspondente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-293">The <see cref="T:System.Xml.Linq.XName" /> to match.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9e451-294">Retorna uma coleção filtrada dos elementos irmãos antes desse nó, na ordem do documento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-294">Returns a filtered collection of the sibling elements before this node, in document order.</span>
          </span>
          <span data-ttu-id="9e451-295">Somente os elementos que têm um <see cref="T:System.Xml.Linq.XName" /> correspondente são incluídos na coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-295">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9e451-296">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> de <see cref="T:System.Xml.Linq.XElement" /> dos elementos irmãos antes desse nó, na ordem do documento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-296">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the sibling elements before this node, in document order.</span>
          </span>
          <span data-ttu-id="9e451-297">Somente os elementos que têm um <see cref="T:System.Xml.Linq.XName" /> correspondente são incluídos na coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-297">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e451-298">Esse método inclui apenas irmãos na coleção retornada.</span><span class="sxs-lookup"><span data-stu-id="9e451-298">This method only includes siblings in the returned collection.</span></span> <span data-ttu-id="9e451-299">Ele não inclui os descendentes.</span><span class="sxs-lookup"><span data-stu-id="9e451-299">It does not include descendants.</span></span>  
  
 <span data-ttu-id="9e451-300">Este método utiliza execução adiada.</span><span class="sxs-lookup"><span data-stu-id="9e451-300">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e451-301">O exemplo a seguir usa esse método.</span><span class="sxs-lookup"><span data-stu-id="9e451-301">The following example uses this method.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XText("Text content."),  
    new XElement("Child1", "child1 content"),  
    new XElement("Child2", "child2 content"),  
    new XElement("Child3", "child3 content"),  
    new XText("More text content."),  
    new XElement("Child4", "child4 content"),  
    new XElement("Child5", "child5 content")  
);  
XElement child = xmlTree.Element("Child3");  
IEnumerable<XElement> elements = child.ElementsBeforeSelf("Child2");  
foreach (XElement el in elements)  
    Console.WriteLine(el.Name);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>Text content.  
            <Child1>child1 content</Child1>  
            <Child2>child2 content</Child2>  
            <Child3>child3 content</Child3>More text content.  
            <Child4>child4 content</Child4>  
            <Child5>child5 content</Child5>  
        </Root>  
  
Dim child As XElement = xmlTree.<Child3>(0)  
Dim elements As IEnumerable(Of XElement) = child.ElementsBeforeSelf("Child2")  
  
For Each el In elements  
    Console.WriteLine(el.Name)  
Next  
```  
  
 <span data-ttu-id="9e451-302">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="9e451-302">This example produces the following output:</span></span>  
  
```  
Child2  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="9e451-303">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-303">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="EqualityComparer">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XNodeEqualityComparer EqualityComparer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Xml.Linq.XNodeEqualityComparer EqualityComparer" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XNode.EqualityComparer" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property EqualityComparer As XNodeEqualityComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Xml::Linq::XNodeEqualityComparer ^ EqualityComparer { System::Xml::Linq::XNodeEqualityComparer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EqualityComparer : System.Xml.Linq.XNodeEqualityComparer" Usage="System.Xml.Linq.XNode.EqualityComparer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNodeEqualityComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9e451-304">Obtém um comparador que pode comparar a igualdade de valor de dois nós.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-304">Gets a comparer that can compare two nodes for value equality.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9e451-305">Um <see cref="T:System.Xml.Linq.XNodeEqualityComparer" /> que pode comparar dois nós para igualdade de valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-305">A <see cref="T:System.Xml.Linq.XNodeEqualityComparer" /> that can compare two nodes for value equality.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9e451-306">O exemplo a seguir usa essa propriedade para recuperar um <xref:System.Xml.Linq.XNodeEqualityComparer>, que implementa o <xref:System.Collections.IEqualityComparer?displayProperty=nameWithType> e <xref:System.Collections.Generic.IEqualityComparer%601?displayProperty=nameWithType> interfaces.</span><span class="sxs-lookup"><span data-stu-id="9e451-306">The following example uses this property to retrieve an <xref:System.Xml.Linq.XNodeEqualityComparer>, which implements the <xref:System.Collections.IEqualityComparer?displayProperty=nameWithType> and <xref:System.Collections.Generic.IEqualityComparer%601?displayProperty=nameWithType> interfaces.</span></span> <span data-ttu-id="9e451-307">Ele cria um dicionário que usa essa propriedade.</span><span class="sxs-lookup"><span data-stu-id="9e451-307">It creates a dictionary that uses this property.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5)  
);  
  
Dictionary<XNode, string> nodeDictionary = new Dictionary<XNode, string>(XNode.EqualityComparer);  
nodeDictionary.Add(xmlTree.Element("Child5"), "Child 5 Information");  
nodeDictionary.Add(xmlTree.Element("Child3"), "Child 3 Information");  
nodeDictionary.Add(xmlTree.Element("Child1"), "Child 1 Information");  
  
string str = nodeDictionary[xmlTree.Element("Child3")];  
Console.WriteLine(str);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
        </Root>  
  
Dim nodeDictionary As Dictionary(Of XNode, String) = New Dictionary(Of XNode, String)(XNode.EqualityComparer)  
nodeDictionary.Add(xmlTree.Element("Child5"), "Child 5 Information")  
nodeDictionary.Add(xmlTree.Element("Child3"), "Child 3 Information")  
nodeDictionary.Add(xmlTree.Element("Child1"), "Child 1 Information")  
  
Dim str As String = nodeDictionary(xmlTree.Element("Child3"))  
Console.WriteLine(str)  
```  
  
 <span data-ttu-id="9e451-308">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="9e451-308">This example produces the following output:</span></span>  
  
```  
Child 3 Information  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="9e451-309">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-309">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="IsAfter">
      <MemberSignature Language="C#" Value="public bool IsAfter (System.Xml.Linq.XNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAfter(class System.Xml.Linq.XNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.IsAfter(System.Xml.Linq.XNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsAfter (node As XNode) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAfter(System::Xml::Linq::XNode ^ node);" />
      <MemberSignature Language="F#" Value="member this.IsAfter : System.Xml.Linq.XNode -&gt; bool" Usage="xNode.IsAfter node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Xml.Linq.XNode" />
      </Parameters>
      <Docs>
        <param name="node">
          <span data-ttu-id="9e451-310">O <see cref="T:System.Xml.Linq.XNode" /> a ser comparado quanto à ordem do documento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-310">The <see cref="T:System.Xml.Linq.XNode" /> to compare for document order.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9e451-311">Determina se o nó atual aparece depois de um nó especificado com relação à ordem do documento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-311">Determines if the current node appears after a specified node in terms of document order.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9e451-312">
            <see langword="true" /> se esse nó aparece após o nó especificado; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-312">
              <see langword="true" /> if this node appears after the specified node; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e451-313">O <xref:System.Xml.Linq.XContainer> armazena seus nós filho como uma lista vinculada exclusivamente de <xref:System.Xml.Linq.XNode> objetos.</span><span class="sxs-lookup"><span data-stu-id="9e451-313">The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects.</span></span> <span data-ttu-id="9e451-314">Isso significa que o <xref:System.Xml.Linq.XNode.CompareDocumentOrder%2A> método deve percorrer os ancestrais de dois nós que estão sendo comparados até encontrar o pai comum.</span><span class="sxs-lookup"><span data-stu-id="9e451-314">This means that the <xref:System.Xml.Linq.XNode.CompareDocumentOrder%2A> method must traverse the ancestors of the two nodes being compared until it finds the common parent.</span></span> <span data-ttu-id="9e451-315">Em seguida, ele deve percorrer a lista de nós de filhos do pai comum para determinar a ordem dos dois nós que estão sendo comparados.</span><span class="sxs-lookup"><span data-stu-id="9e451-315">Then it must traverse the list of the common parent's child nodes to determine the order of the two nodes being compared.</span></span> <span data-ttu-id="9e451-316">Portanto, usando esse método pode afetar o desempenho.</span><span class="sxs-lookup"><span data-stu-id="9e451-316">Therefore, using this method might affect your performance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e451-317">O exemplo a seguir usa esse método.</span><span class="sxs-lookup"><span data-stu-id="9e451-317">The following example uses this method.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XText("Text content."),  
    new XElement("Child1", "child1 content"),  
    new XElement("Child2", "child2 content"),  
    new XElement("Child3", "child3 content"),  
    new XText("More text content."),  
    new XElement("Child4", "child4 content"),  
    new XElement("Child5", "child5 content")  
);  
XElement child3 = xmlTree.Element("Child3");  
XElement child5 = xmlTree.Element("Child5");  
if (child5.IsAfter(child3))  
    Console.WriteLine("Child5 is after Child3");  
else  
    Console.WriteLine("Child5 is not after Child3");  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>Text content.  
            <Child1>child1 content</Child1>  
            <Child2>child2 content</Child2>  
            <Child3>child3 content</Child3>More text content.  
            <Child4>child4 content</Child4>  
            <Child5>child5 content</Child5>  
        </Root>  
  
Dim child3 As XElement = xmlTree.<Child3>(0)  
Dim child5 As XElement = xmlTree.<Child5>(0)  
If (child5.IsAfter(child3)) Then  
    Console.WriteLine("Child5 is after Child3")  
Else  
    Console.WriteLine("Child5 is not after Child3")  
End If  
```  
  
 <span data-ttu-id="9e451-318">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="9e451-318">This example produces the following output:</span></span>  
  
```  
Child5 is after Child3  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="9e451-319">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-319">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="IsBefore">
      <MemberSignature Language="C#" Value="public bool IsBefore (System.Xml.Linq.XNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsBefore(class System.Xml.Linq.XNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.IsBefore(System.Xml.Linq.XNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsBefore (node As XNode) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsBefore(System::Xml::Linq::XNode ^ node);" />
      <MemberSignature Language="F#" Value="member this.IsBefore : System.Xml.Linq.XNode -&gt; bool" Usage="xNode.IsBefore node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Xml.Linq.XNode" />
      </Parameters>
      <Docs>
        <param name="node">
          <span data-ttu-id="9e451-320">O <see cref="T:System.Xml.Linq.XNode" /> a ser comparado quanto à ordem do documento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-320">The <see cref="T:System.Xml.Linq.XNode" /> to compare for document order.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9e451-321">Determina se o nó atual aparece antes de um nó especificado com relação à ordem do documento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-321">Determines if the current node appears before a specified node in terms of document order.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9e451-322">
            <see langword="true" /> se esse nó aparece antes do nó especificado; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-322">
              <see langword="true" /> if this node appears before the specified node; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e451-323">O <xref:System.Xml.Linq.XContainer> armazena seus nós filho como uma lista vinculada exclusivamente de <xref:System.Xml.Linq.XNode> objetos.</span><span class="sxs-lookup"><span data-stu-id="9e451-323">The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects.</span></span> <span data-ttu-id="9e451-324">Isso significa que o <xref:System.Xml.Linq.XNode.IsBefore%2A> método deve percorrer os ancestrais de dois nós que estão sendo comparados até encontrar o pai comum.</span><span class="sxs-lookup"><span data-stu-id="9e451-324">This means that the <xref:System.Xml.Linq.XNode.IsBefore%2A> method must traverse the ancestors of the two nodes being compared until it finds the common parent.</span></span> <span data-ttu-id="9e451-325">Em seguida, ele deve percorrer a lista de nós de filhos do pai comum para determinar a ordem dos dois nós que estão sendo comparados.</span><span class="sxs-lookup"><span data-stu-id="9e451-325">Then it must traverse the list of the common parent's child nodes to determine the order of the two nodes being compared.</span></span> <span data-ttu-id="9e451-326">Portanto, usando esse método pode afetar o desempenho.</span><span class="sxs-lookup"><span data-stu-id="9e451-326">Therefore, using this method might affect your performance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e451-327">O exemplo a seguir usa esse método.</span><span class="sxs-lookup"><span data-stu-id="9e451-327">The following example uses this method.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XText("Text content."),  
    new XElement("Child1", "child1 content"),  
    new XElement("Child2", "child2 content"),  
    new XElement("Child3", "child3 content"),  
    new XText("More text content."),  
    new XElement("Child4", "child4 content"),  
    new XElement("Child5", "child5 content")  
);  
XElement child3 = xmlTree.Element("Child3");  
XElement child5 = xmlTree.Element("Child5");  
if (child5.IsBefore(child3))  
    Console.WriteLine("Child5 is before Child3");  
else  
    Console.WriteLine("Child5 is not before Child3");  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>Text content.  
            <Child1>child1 content</Child1>  
            <Child2>child2 content</Child2>  
            <Child3>child3 content</Child3>More text content.  
            <Child4>child4 content</Child4>  
            <Child5>child5 content</Child5>  
        </Root>  
  
Dim child3 As XElement = xmlTree.<Child3>(0)  
Dim child5 As XElement = xmlTree.<Child5>(0)  
If (child5.IsBefore(child3)) Then  
    Console.WriteLine("Child5 is before Child3")  
Else  
    Console.WriteLine("Child5 is not before Child3")  
End If  
```  
  
 <span data-ttu-id="9e451-328">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="9e451-328">This example produces the following output:</span></span>  
  
```  
Child5 is not before Child3  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="9e451-329">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-329">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="NextNode">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XNode NextNode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XNode NextNode" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XNode.NextNode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NextNode As XNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XNode ^ NextNode { System::Xml::Linq::XNode ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NextNode : System.Xml.Linq.XNode" Usage="System.Xml.Linq.XNode.NextNode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9e451-330">Obtém o próximo nó irmão desse nó.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-330">Gets the next sibling node of this node.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9e451-331">O <see cref="T:System.Xml.Linq.XNode" /> que contém o próximo nó irmão.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-331">The <see cref="T:System.Xml.Linq.XNode" /> that contains the next sibling node.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e451-332">Se este <xref:System.Xml.Linq.XNode> faz não tem um pai, ou se não houver nenhum próximo nó, essa propriedade retornará `null`.</span><span class="sxs-lookup"><span data-stu-id="9e451-332">If this <xref:System.Xml.Linq.XNode> does not have a parent, or if there is no next node, this property returns `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e451-333">O exemplo a seguir usa essa propriedade para executar um loop através de nós.</span><span class="sxs-lookup"><span data-stu-id="9e451-333">The following example uses this property to loop through nodes.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XText("Some Text"),  
    new XElement("Child2",  
        2,  
        new XElement("GrandChild", "GrandChild Content")  
    ),  
    new XComment("a comment"),  
    new XElement("Child3")  
);  
XNode node = xmlTree.Element("Child2");  
do {  
    StringBuilder sb = new StringBuilder();  
    sb.Append(String.Format("NodeType: {0}", node.NodeType.ToString().PadRight(10)));  
    switch (node.NodeType)  
    {  
        case XmlNodeType.Text:  
            sb.Append((node as XText).Value);  
            break;  
        case XmlNodeType.Element:  
            sb.Append((node as XElement).Name);  
            break;  
        case XmlNodeType.Comment:  
            sb.Append((node as XComment).Value);  
            break;  
    }  
    Console.WriteLine(sb.ToString());  
}  
while ((node = node.NextNode) != null);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>1</Child1>Some Text  
            <Child2>2  
                <GrandChild>GrandChild Content</GrandChild>  
            </Child2>  
            <!--a comment-->  
            <Child3>3</Child3>  
        </Root>  
  
Dim node As XNode = xmlTree.Element("Child2")  
Do  
    Dim sb As StringBuilder = New StringBuilder()  
    sb.Append(String.Format("NodeType: {0}", node.NodeType.ToString().PadRight(10)))  
    Select Case node.NodeType  
        Case XmlNodeType.Text  
            sb.Append(DirectCast(node, XText).Value)  
        Case XmlNodeType.Element  
            sb.Append(DirectCast(node, XElement).Name)  
        Case XmlNodeType.Comment  
            sb.Append(DirectCast(node, XComment).Value)  
    End Select  
    Console.WriteLine(sb.ToString())  
  
    node = node.NextNode  
Loop While (Not (node Is Nothing))  
```  
  
 <span data-ttu-id="9e451-334">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="9e451-334">This example produces the following output:</span></span>  
  
```  
NodeType: Element   Child2  
NodeType: Comment   a comment  
NodeType: Element   Child3  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="9e451-335">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-335">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="NodesAfterSelf">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt; NodesAfterSelf ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XNode&gt; NodesAfterSelf() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.NodesAfterSelf" />
      <MemberSignature Language="VB.NET" Value="Public Function NodesAfterSelf () As IEnumerable(Of XNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XNode ^&gt; ^ NodesAfterSelf();" />
      <MemberSignature Language="F#" Value="member this.NodesAfterSelf : unit -&gt; seq&lt;System.Xml.Linq.XNode&gt;" Usage="xNode.NodesAfterSelf " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6">
          <AttributeName>System.Runtime.CompilerServices.IteratorStateMachine(typeof(System.Xml.Linq.XNode/&lt;NodesAfterSelf&gt;d__1))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.CompilerServices.IteratorStateMachine(typeof(System.Xml.Linq.XNode/&lt;NodesAfterSelf&gt;d__21))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9e451-336">Retorna uma coleção de nós irmãos após esse nó, na ordem do documento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-336">Returns a collection of the sibling nodes after this node, in document order.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9e451-337">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> de <see cref="T:System.Xml.Linq.XNode" /> de nós irmãos após esse nó, na ordem do documento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-337">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> of the sibling nodes after this node, in document order.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e451-338">Esse método inclui apenas irmãos na coleção retornada.</span><span class="sxs-lookup"><span data-stu-id="9e451-338">This method only includes siblings in the returned collection.</span></span> <span data-ttu-id="9e451-339">Ele não inclui os descendentes.</span><span class="sxs-lookup"><span data-stu-id="9e451-339">It does not include descendants.</span></span>  
  
 <span data-ttu-id="9e451-340">Este método utiliza execução adiada.</span><span class="sxs-lookup"><span data-stu-id="9e451-340">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e451-341">O exemplo a seguir cria uma árvore XML e, em seguida, a consulta de árvore usando esse método de eixo.</span><span class="sxs-lookup"><span data-stu-id="9e451-341">The following example creates an XML tree, and then queries the tree using this axis method.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XText("Text content."),  
    new XElement("Child1", "child1 content"),  
    new XElement("Child2", "child2 content"),  
    new XText("More text content."),  
    new XElement("child3", "child3 content")  
);  
XElement child = xmlTree.Element("Child2");  
IEnumerable<XNode> nodes =  
    from node in child.NodesAfterSelf()  
    select node;  
foreach (XNode node in nodes)  
{  
    Console.WriteLine("Node type: {0}  {1}",  
        node.NodeType,  
        node.NodeType == XmlNodeType.Text ? (node as XText).Value : "");  
}  
```  
  
```vb  
Dim xmlTree As XElement = New XElement("Root", _New XText("Text content."), _  
    New XElement("Child1", "child1 content"), _  
    New XElement("Child2", "child2 content"), _  
    New XText("More text content."), _  
    New XElement("child3", "child3 content") _  
)  
  
Dim child As XElement = xmlTree.Element("Child2")  
Dim nodes As IEnumerable(Of XNode) = _  
    From node In child.NodesAfterSelf() _  
    Select node  
For Each node As XNode In nodes  
    Dim s As String = ""  
    If node.NodeType = XmlNodeType.Text Then  
        s = DirectCast(node, XText).Value  
    End If  
    Console.WriteLine("Node type: {0}  {1}", node.NodeType, s)  
Next  
```  
  
 <span data-ttu-id="9e451-342">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="9e451-342">This example produces the following output:</span></span>  
  
```  
Node type: Text  More text content.  
Node type: Element  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="9e451-343">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-343">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="NodesBeforeSelf">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt; NodesBeforeSelf ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XNode&gt; NodesBeforeSelf() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.NodesBeforeSelf" />
      <MemberSignature Language="VB.NET" Value="Public Function NodesBeforeSelf () As IEnumerable(Of XNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XNode ^&gt; ^ NodesBeforeSelf();" />
      <MemberSignature Language="F#" Value="member this.NodesBeforeSelf : unit -&gt; seq&lt;System.Xml.Linq.XNode&gt;" Usage="xNode.NodesBeforeSelf " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6">
          <AttributeName>System.Runtime.CompilerServices.IteratorStateMachine(typeof(System.Xml.Linq.XNode/&lt;NodesBeforeSelf&gt;d__1))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.CompilerServices.IteratorStateMachine(typeof(System.Xml.Linq.XNode/&lt;NodesBeforeSelf&gt;d__22))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9e451-344">Retorna uma coleção de nós irmãos antes deste nó, na ordem do documento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-344">Returns a collection of the sibling nodes before this node, in document order.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9e451-345">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> de <see cref="T:System.Xml.Linq.XNode" /> de nós irmãos antes desse nó, na ordem do documento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-345">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> of the sibling nodes before this node, in document order.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e451-346">Esse método inclui apenas irmãos na coleção retornada.</span><span class="sxs-lookup"><span data-stu-id="9e451-346">This method only includes siblings in the returned collection.</span></span> <span data-ttu-id="9e451-347">Ele não inclui os descendentes.</span><span class="sxs-lookup"><span data-stu-id="9e451-347">It does not include descendants.</span></span>  
  
 <span data-ttu-id="9e451-348">Este método utiliza execução adiada.</span><span class="sxs-lookup"><span data-stu-id="9e451-348">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e451-349">O exemplo a seguir cria uma árvore XML e, em seguida, a consulta de árvore usando esse método de eixo.</span><span class="sxs-lookup"><span data-stu-id="9e451-349">The following example creates an XML tree, and then queries the tree using this axis method.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XText("Text content."),  
    new XElement("Child1", "child1 content"),  
    new XElement("Child2", "child2 content"),  
    new XText("More text content."),  
    new XElement("child3", "child3 content")  
);  
XElement child = xmlTree.Element("Child2");  
IEnumerable<XNode> nodes =  
    from node in child.NodesBeforeSelf()  
    select node;  
foreach (XNode node in nodes)  
    Console.WriteLine("Node type: {0}  {1}",  
        node.NodeType,  
        node.NodeType == XmlNodeType.Text ? (node as XText).Value : "");  
```  
  
```vb  
Dim xmlTree As XElement = New XElement("Root", _  
    New XText("Text content."), _  
    New XElement("Child1", "child1 content"), _  
    New XElement("Child2", "child2 content"), _  
    New XText("More text content."), _  
    New XElement("child3", "child3 content") _  
)  
  
Dim child As XElement = xmlTree.Element("Child2")  
Dim nodes As IEnumerable(Of XNode) = _  
    From node In child.NodesBeforeSelf() _  
    Select node  
For Each node As XNode In nodes  
    Dim s As String = ""  
    If node.NodeType = XmlNodeType.Text Then  
        s = DirectCast(node, XText).Value  
    End If  
    Console.WriteLine("Node type: {0}  {1}", node.NodeType, s)  
Next  
```  
  
 <span data-ttu-id="9e451-350">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="9e451-350">This example produces the following output:</span></span>  
  
```  
Node type: Text  Text content.  
Node type: Element  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="9e451-351">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-351">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="PreviousNode">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XNode PreviousNode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XNode PreviousNode" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XNode.PreviousNode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PreviousNode As XNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XNode ^ PreviousNode { System::Xml::Linq::XNode ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PreviousNode : System.Xml.Linq.XNode" Usage="System.Xml.Linq.XNode.PreviousNode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9e451-352">Obtém o nó irmão anterior desse nó.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-352">Gets the previous sibling node of this node.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9e451-353">O <see cref="T:System.Xml.Linq.XNode" /> que contém o nó irmão anterior.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-353">The <see cref="T:System.Xml.Linq.XNode" /> that contains the previous sibling node.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e451-354">Se este <xref:System.Xml.Linq.XNode> faz não tem um pai, ou se não houver nenhum nó anterior, essa propriedade retornará `null`.</span><span class="sxs-lookup"><span data-stu-id="9e451-354">If this <xref:System.Xml.Linq.XNode> does not have a parent, or if there is no previous node, this property returns `null`.</span></span>  
  
 <span data-ttu-id="9e451-355">O <xref:System.Xml.Linq.XContainer> armazena seus nós filho como uma lista vinculada exclusivamente de <xref:System.Xml.Linq.XNode> objetos.</span><span class="sxs-lookup"><span data-stu-id="9e451-355">The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects.</span></span> <span data-ttu-id="9e451-356">Isso significa que o <xref:System.Xml.Linq.XNode.PreviousNode%2A> propriedade deve percorrer a lista de nós filho direto no contêiner pai.</span><span class="sxs-lookup"><span data-stu-id="9e451-356">This means that the <xref:System.Xml.Linq.XNode.PreviousNode%2A> property must traverse the list of direct child nodes under the parent container.</span></span> <span data-ttu-id="9e451-357">Portanto, usar essa propriedade pode afetar o desempenho.</span><span class="sxs-lookup"><span data-stu-id="9e451-357">Therefore, using this property might affect your performance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e451-358">O exemplo a seguir usa essa propriedade para executar um loop através de nós.</span><span class="sxs-lookup"><span data-stu-id="9e451-358">The following example uses this property to loop through nodes.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XText("Some Text"),  
    new XElement("Child2",  
        2,  
        new XElement("GrandChild", "GrandChild Content")  
    ),  
    new XComment("a comment"),  
    new XElement("Child3")  
);  
XNode node = xmlTree.Element("Child2");  
do {  
    StringBuilder sb = new StringBuilder();  
    sb.Append(String.Format("NodeType: {0}", node.NodeType.ToString().PadRight(10)));  
    switch (node.NodeType)  
    {  
        case XmlNodeType.Text:  
            sb.Append((node as XText).Value);  
            break;  
        case XmlNodeType.Element:  
            sb.Append((node as XElement).Name);  
            break;  
        case XmlNodeType.Comment:  
            sb.Append((node as XComment).Value);  
            break;  
    }  
    Console.WriteLine(sb.ToString());  
}  
while ((node = node.PreviousNode) != null);  
```  
  
```vb  
Dim xmlTree As XElement = _  
    <Root>  
        <Child1>1</Child1>Some Text<Child2>2  
            <GrandChild>GrandChild Content</GrandChild>  
        </Child2>  
        <!--a comment-->  
        <Child3>3</Child3>  
    </Root>  
  
Dim node As XNode = xmlTree.Element("Child2")  
Do  
    Dim sb As StringBuilder = New StringBuilder()  
    sb.Append(String.Format("NodeType: {0}", node.NodeType.ToString().PadRight(10)))  
    Select Case node.NodeType  
        Case XmlNodeType.Text  
            sb.Append(DirectCast(node, XText).Value)  
        Case XmlNodeType.Element  
            sb.Append(DirectCast(node, XElement).Name)  
        Case XmlNodeType.Comment  
            sb.Append(DirectCast(node, XComment).Value)  
    End Select  
    Console.WriteLine(sb.ToString())  
  
    node = node.PreviousNode  
Loop While (Not (node Is Nothing))  
```  
  
 <span data-ttu-id="9e451-359">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="9e451-359">This example produces the following output:</span></span>  
  
```  
NodeType: Element   Child2  
NodeType: Text      Some Text  
NodeType: Element   Child1  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="9e451-360">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-360">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ReadFrom">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XNode ReadFrom (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XNode ReadFrom(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.ReadFrom(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadFrom (reader As XmlReader) As XNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XNode ^ ReadFrom(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="static member ReadFrom : System.Xml.XmlReader -&gt; System.Xml.Linq.XNode" Usage="System.Xml.Linq.XNode.ReadFrom reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="9e451-361">Um <see cref="T:System.Xml.XmlReader" /> posicionado no nó para ler nesse <see cref="T:System.Xml.Linq.XNode" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-361">An <see cref="T:System.Xml.XmlReader" /> positioned at the node to read into this <see cref="T:System.Xml.Linq.XNode" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9e451-362">Cria um <see cref="T:System.Xml.Linq.XNode" /> de um <see cref="T:System.Xml.XmlReader" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-362">Creates an <see cref="T:System.Xml.Linq.XNode" /> from an <see cref="T:System.Xml.XmlReader" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9e451-363">Um <see cref="T:System.Xml.Linq.XNode" /> que contém o nó e seus nós descendentes que foram lidos do leitor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-363">An <see cref="T:System.Xml.Linq.XNode" /> that contains the node and its descendant nodes that were read from the reader.</span>
          </span>
          <span data-ttu-id="9e451-364">O tipo de tempo de execução do nó é determinado pelo tipo de nó (<see cref="P:System.Xml.Linq.XObject.NodeType" />) do primeiro nó encontrado no leitor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-364">The runtime type of the node is determined by the node type (<see cref="P:System.Xml.Linq.XObject.NodeType" />) of the first node encountered in the reader.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e451-365">Você pode usar esse método para gravar um método que retorna uma coleção de nós, resultando em cada nó como o nó é lido do leitor.</span><span class="sxs-lookup"><span data-stu-id="9e451-365">You can use this method to write a method that returns a collection of nodes, yielding each node as the node is read from the reader.</span></span> <span data-ttu-id="9e451-366">Esse método permite processar arbitrariamente grandes arquivos XML com um volume de memória muito pequena.</span><span class="sxs-lookup"><span data-stu-id="9e451-366">This method enables you to process arbitrarily large XML files with a very small memory footprint.</span></span>  
  
 <span data-ttu-id="9e451-367">O leitor passado para esse método pode lançar exceções.</span><span class="sxs-lookup"><span data-stu-id="9e451-367">The reader that you pass to this method might throw exceptions.</span></span> <span data-ttu-id="9e451-368"><xref:System.Xml.Linq.XNode.ReadFrom%2A> não capturar todas as exceções geradas pelo leitor; as exceções sem tratamento emergem até o código que chamou <xref:System.Xml.Linq.XNode.ReadFrom%2A>.</span><span class="sxs-lookup"><span data-stu-id="9e451-368"><xref:System.Xml.Linq.XNode.ReadFrom%2A> does not catch all exceptions thrown by the reader; the unhandled exceptions bubble up to the code that called <xref:System.Xml.Linq.XNode.ReadFrom%2A>.</span></span> <span data-ttu-id="9e451-369">Em particular, seu código deve estar preparado para lidar com <xref:System.Xml.XmlException>.</span><span class="sxs-lookup"><span data-stu-id="9e451-369">In particular, your code should be prepared to handle <xref:System.Xml.XmlException>.</span></span>  
  
 <span data-ttu-id="9e451-370">Para obter um exemplo de como transmitir um documento mais complexo, consulte [como: fragmentos de XML de Stream com acesso a informações de cabeçalho](https://msdn.microsoft.com/library/01311522-9d03-4977-8641-2932c6f56092).</span><span class="sxs-lookup"><span data-stu-id="9e451-370">For an example of how to stream a more complex document, see [How to: Stream XML Fragments with Access to Header Information](https://msdn.microsoft.com/library/01311522-9d03-4977-8641-2932c6f56092).</span></span>  
  
 <span data-ttu-id="9e451-371">Determinados operadores de consulta padrão, como <xref:System.Linq.Enumerable.OrderBy%2A>, iteram sua origem, coletam todos os dados, classificam e, em seguida, geram finalmente o primeiro item na sequência.</span><span class="sxs-lookup"><span data-stu-id="9e451-371">Certain standard query operators, such as <xref:System.Linq.Enumerable.OrderBy%2A>, iterate their source, collect all of the data, sort it, and then finally yield the first item in the sequence.</span></span> <span data-ttu-id="9e451-372">Se você usar um operador de consulta que materializa sua origem antes de gerar o primeiro item, você não manterá uma pegada pequena de memória.</span><span class="sxs-lookup"><span data-stu-id="9e451-372">If you use a query operator that materializes its source before yielding the first item, you will not retain a small memory footprint.</span></span>  
  
 <span data-ttu-id="9e451-373">Para obter um exemplo de uso [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] para transformar documentos XML muito grandes, mantendo uma pegada pequena de memória, consulte [como: realizar Streaming de transformação de grandes documentos XML](https://msdn.microsoft.com/library/0759e428-6e59-4d80-a506-365d3a6a2b73).</span><span class="sxs-lookup"><span data-stu-id="9e451-373">For an example of using [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] to transform extremely large XML documents while maintaining a small memory footprint, see [How to: Perform Streaming Transform of Large XML Documents](https://msdn.microsoft.com/library/0759e428-6e59-4d80-a506-365d3a6a2b73).</span></span>  
  
## Examples

<span data-ttu-id="9e451-374">Este exemplo usa o seguinte arquivo XML, chamado *Source. XML*:</span><span class="sxs-lookup"><span data-stu-id="9e451-374">This example uses the following XML file, named *Source.xml*:</span></span>

[!code-xml[Source.xml](~/samples/snippets/csharp/api/system.xml.linq/xnode/readfrom/Source.xml)]

<span data-ttu-id="9e451-375">O exemplo a seguir cria um método de eixo personalizado que usa <xref:System.Xml.Linq.XNode.ReadFrom%2A> e, em seguida, consulta o eixo personalizado usando uma consulta LINQ:</span><span class="sxs-lookup"><span data-stu-id="9e451-375">The following example creates a custom axis method that uses <xref:System.Xml.Linq.XNode.ReadFrom%2A> and then queries the custom axis by using a LINQ query:</span></span>

[!code-csharp[XNode.ReadFromCS](~/samples/snippets/csharp/api/system.xml.linq/xnode/readfrom/Program.cs)]
[!code-vb[XNode.ReadFromVB](~/samples/snippets/visualbasic/api/system.xml.linq/xnode/readfrom/Program.vb)]

<span data-ttu-id="9e451-376">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="9e451-376">This example produces the following output:</span></span>

```  
bbb  
ccc  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="9e451-377">O <see cref="T:System.Xml.XmlReader" /> não está posicionado em um tipo de nó reconhecido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-377">The <see cref="T:System.Xml.XmlReader" /> is not positioned on a recognized node type.</span>
          </span>
        </exception>
        <exception cref="T:System.Xml.XmlException">
          <span data-ttu-id="9e451-378">O <see cref="T:System.Xml.XmlReader" /> subjacente gera uma exceção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-378">The underlying <see cref="T:System.Xml.XmlReader" /> throws an exception.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="9e451-379">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-379">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ReadFromAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Xml.Linq.XNode&gt; ReadFromAsync (System.Xml.XmlReader reader, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Xml.Linq.XNode&gt; ReadFromAsync(class System.Xml.XmlReader reader, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.ReadFromAsync(System.Xml.XmlReader,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task&lt;System::Xml::Linq::XNode ^&gt; ^ ReadFromAsync(System::Xml::XmlReader ^ reader, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member ReadFromAsync : System.Xml.XmlReader * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Xml.Linq.XNode&gt;" Usage="System.Xml.Linq.XNode.ReadFromAsync (reader, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Xml.Linq.XNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="reader">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.Remove" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove();" />
      <MemberSignature Language="F#" Value="member this.Remove : unit -&gt; unit" Usage="xNode.Remove " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9e451-380">Remove este nó de seu pai.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-380">Removes this node from its parent.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e451-381">Em [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] de programação, você deve não manipular ou modificar um conjunto de nós, enquanto você está consultando para nós nesse conjunto.</span><span class="sxs-lookup"><span data-stu-id="9e451-381">In [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] programming, you should not manipulate or modify a set of nodes while you are querying for nodes in that set.</span></span> <span data-ttu-id="9e451-382">Em termos práticos, isso significa que você não deve iterar sobre um conjunto de nós e removê-los.</span><span class="sxs-lookup"><span data-stu-id="9e451-382">In practical terms, this means that you should not iterate over a set of nodes and remove them.</span></span> <span data-ttu-id="9e451-383">Em vez disso, você deve materializá-los em um <xref:System.Collections.Generic.List%601> usando o <xref:System.Linq.Enumerable.ToList%2A> método de extensão.</span><span class="sxs-lookup"><span data-stu-id="9e451-383">Instead, you should materialize them into a <xref:System.Collections.Generic.List%601> by using the <xref:System.Linq.Enumerable.ToList%2A> extension method.</span></span> <span data-ttu-id="9e451-384">Em seguida, você pode iterar a lista para remover os nós.</span><span class="sxs-lookup"><span data-stu-id="9e451-384">Then, you can iterate over the list to remove the nodes.</span></span> <span data-ttu-id="9e451-385">Para obter mais informações, consulte [misto declarativa código/erro obrigatórias Bugs de código (LINQ to XML)](https://msdn.microsoft.com/library/d9a5c404-2b0e-46cd-a358-0e78773b3094).</span><span class="sxs-lookup"><span data-stu-id="9e451-385">For more information, see [Mixed Declarative Code/Imperative Code Bugs (LINQ to XML)](https://msdn.microsoft.com/library/d9a5c404-2b0e-46cd-a358-0e78773b3094).</span></span>  
  
 <span data-ttu-id="9e451-386">Como alternativa, se você quiser remover um conjunto de nós, é recomendável que você use o <xref:System.Xml.Linq.Extensions.Remove%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="9e451-386">Alternatively, if you want to remove a set of nodes, it is recommended that you use the <xref:System.Xml.Linq.Extensions.Remove%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="9e451-387">Esse método copia os nós para obter uma lista e, em seguida, itera através da lista para remover os nós.</span><span class="sxs-lookup"><span data-stu-id="9e451-387">This method copies the nodes to a list, and then iterates over the list to remove the nodes.</span></span>  
  
 <span data-ttu-id="9e451-388">Esse método gerará o <xref:System.Xml.Linq.XObject.Changed> e o <xref:System.Xml.Linq.XObject.Changing> eventos.</span><span class="sxs-lookup"><span data-stu-id="9e451-388">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
 <span data-ttu-id="9e451-389">O <xref:System.Xml.Linq.XContainer> armazena seus nós filho como uma lista vinculada exclusivamente de <xref:System.Xml.Linq.XNode> objetos.</span><span class="sxs-lookup"><span data-stu-id="9e451-389">The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects.</span></span> <span data-ttu-id="9e451-390">Isso significa que o <xref:System.Xml.Linq.XNode.Remove%2A> método deve percorrer a lista de nós filho direto no contêiner pai.</span><span class="sxs-lookup"><span data-stu-id="9e451-390">This means that the <xref:System.Xml.Linq.XNode.Remove%2A> method must traverse the list of direct child nodes under the parent container.</span></span> <span data-ttu-id="9e451-391">Portanto, usando esse método pode afetar o desempenho.</span><span class="sxs-lookup"><span data-stu-id="9e451-391">Therefore, using this method might affect your performance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e451-392">O exemplo a seguir remove um nó de seu pai.</span><span class="sxs-lookup"><span data-stu-id="9e451-392">The following example removes a node from its parent.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", "child1 content"),  
    new XElement("Child2", "child2 content"),  
    new XElement("Child3", "child3 content"),  
    new XElement("Child4", "child4 content"),  
    new XElement("Child5", "child5 content")  
);  
XElement child3 = xmlTree.Element("Child3");  
child3.Remove();  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>child1 content</Child1>  
            <Child2>child2 content</Child2>  
            <Child3>child3 content</Child3>  
            <Child4>child4 content</Child4>  
            <Child5>child5 content</Child5>  
        </Root>  
  
Dim child3 As XElement = xmlTree.<Child3>(0)  
child3.Remove()  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="9e451-393">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="9e451-393">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child1>child1 content</Child1>  
  <Child2>child2 content</Child2>  
  <Child4>child4 content</Child4>  
  <Child5>child5 content</Child5>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="9e451-394">O pai é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-394">The parent is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="9e451-395">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-395">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReplaceWith">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9e451-396">Substitui esse nó pelo conteúdo especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-396">Replaces this node with the specified content.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e451-397">Para obter detalhes sobre o conteúdo válido que pode ser passado para esse método, consulte [válido conteúdo de objetos XElement e XDocument](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="9e451-397">For details about the valid content that can be passed to this method, see [Valid Content of XElement and XDocument Objects](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="9e451-398">Esse método gerará o <xref:System.Xml.Linq.XObject.Changed> e o <xref:System.Xml.Linq.XObject.Changing> eventos.</span><span class="sxs-lookup"><span data-stu-id="9e451-398">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
 <span data-ttu-id="9e451-399">O <xref:System.Xml.Linq.XContainer> armazena seus nós filho como uma lista vinculada exclusivamente de <xref:System.Xml.Linq.XNode> objetos.</span><span class="sxs-lookup"><span data-stu-id="9e451-399">The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects.</span></span> <span data-ttu-id="9e451-400">Isso significa que o <xref:System.Xml.Linq.XNode.ReplaceWith%2A> método deve percorrer a lista de nós filho direto no contêiner pai.</span><span class="sxs-lookup"><span data-stu-id="9e451-400">This means that the <xref:System.Xml.Linq.XNode.ReplaceWith%2A> method must  traverse the list of direct child nodes under the parent container.</span></span> <span data-ttu-id="9e451-401">Portanto, usando esse método pode afetar o desempenho.</span><span class="sxs-lookup"><span data-stu-id="9e451-401">Therefore, using this method might affect your performance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e451-402">O exemplo a seguir usa esse método para substituir o conteúdo de um nó com conteúdo diferente.</span><span class="sxs-lookup"><span data-stu-id="9e451-402">The following example uses this method to replace the contents of a node with different content.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", "child1 content"),  
    new XElement("Child2", "child2 content"),  
    new XElement("Child3", "child3 content"),  
    new XElement("Child4", "child4 content"),  
    new XElement("Child5", "child5 content")  
);  
XElement child3 = xmlTree.Element("Child3");  
child3.ReplaceWith(  
    new XElement("NewChild", "new content")  
);  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>child1 content</Child1>  
            <Child2>child2 content</Child2>  
            <Child3>child3 content</Child3>  
            <Child4>child4 content</Child4>  
            <Child5>child5 content</Child5>  
        </Root>  
  
Dim child3 As XElement = xmlTree.<Child3>(0)  
child3.ReplaceWith(<NewChild>new content</NewChild>)  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="9e451-403">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="9e451-403">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child1>child1 content</Child1>  
  <Child2>child2 content</Child2>  
  <NewChild>new content</NewChild>  
  <Child4>child4 content</Child4>  
  <Child5>child5 content</Child5>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="9e451-404">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-404">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReplaceWith">
      <MemberSignature Language="C#" Value="public void ReplaceWith (object content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReplaceWith(object content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.ReplaceWith(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReplaceWith (content As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReplaceWith(System::Object ^ content);" />
      <MemberSignature Language="F#" Value="member this.ReplaceWith : obj -&gt; unit" Usage="xNode.ReplaceWith content" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="content">
          <span data-ttu-id="9e451-405">Conteúdo que substitui esse nó.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-405">Content that replaces this node.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9e451-406">Substitui esse nó pelo conteúdo especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-406">Replaces this node with the specified content.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e451-407">Esse método primeiro Remove este nó de seu pai e, em seguida, adiciona o conteúdo especificado para o pai deste nó, no lugar desse nó.</span><span class="sxs-lookup"><span data-stu-id="9e451-407">This method first removes this node from its parent, and then adds the specified content to this node's parent, in the place of this node.</span></span>  
  
 <span data-ttu-id="9e451-408">O <xref:System.Xml.Linq.XContainer> armazena seus nós filho como uma lista vinculada exclusivamente de <xref:System.Xml.Linq.XNode> objetos.</span><span class="sxs-lookup"><span data-stu-id="9e451-408">The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects.</span></span> <span data-ttu-id="9e451-409">Isso significa que o <xref:System.Xml.Linq.XNode.ReplaceWith%2A> método deve percorrer a lista de nós filho direto no contêiner pai.</span><span class="sxs-lookup"><span data-stu-id="9e451-409">This means that the <xref:System.Xml.Linq.XNode.ReplaceWith%2A> method must traverse the list of direct child nodes under the parent container.</span></span> <span data-ttu-id="9e451-410">Portanto, usando esse método pode afetar o desempenho.</span><span class="sxs-lookup"><span data-stu-id="9e451-410">Therefore, using this method might affect your performance.</span></span>  
  
 <span data-ttu-id="9e451-411">Para obter detalhes sobre o conteúdo válido que pode ser passado para esse método, consulte [válido conteúdo de objetos XElement e XDocument](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="9e451-411">For details about the valid content that can be passed to this method, see [Valid Content of XElement and XDocument Objects](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="9e451-412">Esse método gerará o <xref:System.Xml.Linq.XObject.Changed> e o <xref:System.Xml.Linq.XObject.Changing> eventos.</span><span class="sxs-lookup"><span data-stu-id="9e451-412">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e451-413">O exemplo a seguir usa esse método para substituir o conteúdo de um nó com conteúdo diferente.</span><span class="sxs-lookup"><span data-stu-id="9e451-413">The following example uses this method to replace the contents of a node with different content.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", "child1 content"),  
    new XElement("Child2", "child2 content"),  
    new XElement("Child3", "child3 content"),  
    new XElement("Child4", "child4 content"),  
    new XElement("Child5", "child5 content")  
);  
XElement child3 = xmlTree.Element("Child3");  
child3.ReplaceWith(  
    new XElement("NewChild", "new content")  
);  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>child1 content</Child1>  
            <Child2>child2 content</Child2>  
            <Child3>child3 content</Child3>  
            <Child4>child4 content</Child4>  
            <Child5>child5 content</Child5>  
        </Root>  
  
Dim child3 As XElement = xmlTree.<Child3>(0)  
child3.ReplaceWith(<NewChild>new content</NewChild>)  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="9e451-414">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="9e451-414">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child1>child1 content</Child1>  
  <Child2>child2 content</Child2>  
  <NewChild>new content</NewChild>  
  <Child4>child4 content</Child4>  
  <Child5>child5 content</Child5>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="9e451-415">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-415">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ReplaceWith">
      <MemberSignature Language="C#" Value="public void ReplaceWith (params object[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReplaceWith(object[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.ReplaceWith(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReplaceWith (ParamArray content As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReplaceWith(... cli::array &lt;System::Object ^&gt; ^ content);" />
      <MemberSignature Language="F#" Value="member this.ReplaceWith : obj[] -&gt; unit" Usage="xNode.ReplaceWith content" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="content">
          <span data-ttu-id="9e451-416">Uma lista de parâmetros do novo conteúdo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-416">A parameter list of the new content.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9e451-417">Substitui esse nó pelo conteúdo especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-417">Replaces this node with the specified content.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e451-418">Esse método primeiro Remove este nó de seu pai e, em seguida, adiciona o conteúdo especificado para o pai deste nó, no lugar desse nó.</span><span class="sxs-lookup"><span data-stu-id="9e451-418">This method first removes this node from its parent, and then adds the specified content to this node's parent, in the place of this node.</span></span>  
  
 <span data-ttu-id="9e451-419">O <xref:System.Xml.Linq.XContainer> armazena seus nós filho como uma lista vinculada exclusivamente de <xref:System.Xml.Linq.XNode> objetos.</span><span class="sxs-lookup"><span data-stu-id="9e451-419">The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects.</span></span> <span data-ttu-id="9e451-420">Isso significa que o <xref:System.Xml.Linq.XNode.ReplaceWith%2A> método deve percorrer a lista de nós filho direto no contêiner pai.</span><span class="sxs-lookup"><span data-stu-id="9e451-420">This means that the <xref:System.Xml.Linq.XNode.ReplaceWith%2A> method must traverse the list of direct child nodes under the parent container.</span></span> <span data-ttu-id="9e451-421">Portanto, usando esse método pode afetar o desempenho.</span><span class="sxs-lookup"><span data-stu-id="9e451-421">Therefore, using this method might affect your performance.</span></span>  
  
 <span data-ttu-id="9e451-422">Para obter detalhes sobre o conteúdo válido que pode ser passado para esse método, consulte [válido conteúdo de objetos XElement e XDocument](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="9e451-422">For details about the valid content that can be passed to this method, see [Valid Content of XElement and XDocument Objects](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="9e451-423">Esse método gerará o <xref:System.Xml.Linq.XObject.Changed> e o <xref:System.Xml.Linq.XObject.Changing> eventos.</span><span class="sxs-lookup"><span data-stu-id="9e451-423">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e451-424">O exemplo a seguir mostra o uso dos resultados de uma [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] consulta como entrada para esse método.</span><span class="sxs-lookup"><span data-stu-id="9e451-424">The following example shows using the results of a [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] query as the input to this method.</span></span>  
  
```csharp  
XElement srcTree = new XElement("Root",  
    new XElement("Element1", 1),  
    new XElement("Element2", 2),  
    new XElement("Element3", 3),  
    new XElement("Element4", 4),  
    new XElement("Element5", 5)  
);  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5)  
);  
XElement child3 = xmlTree.Element("Child3");  
child3.ReplaceWith(  
    from el in srcTree.Elements()  
    where (int)el > 3  
    select el  
);  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim srcTree As XElement = _   
        <Root>  
            <Element1>1</Element1>  
            <Element2>2</Element2>  
            <Element3>3</Element3>  
            <Element4>4</Element4>  
            <Element5>5</Element5>  
        </Root>  
  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
        </Root>  
  
Dim child3 As XElement = xmlTree.<Child3>(0)  
child3.ReplaceWith( _  
    From el In srcTree.Elements() _  
    Where (CInt(el) > 3) _  
    Select el)  
  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="9e451-425">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="9e451-425">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child1>1</Child1>  
  <Child2>2</Child2>  
  <Element4>4</Element4>  
  <Element5>5</Element5>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="9e451-426">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-426">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9e451-427">Retorna o XML para esse nó, com a opção de desabilitar a formatação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-427">Returns the XML for this node, optionally disabling formatting.</span>
          </span>
        </summary>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="9e451-428">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-428">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="xNode.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9e451-429">Retorna o XML recuado para este nó.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-429">Returns the indented XML for this node.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9e451-430">Uma <see cref="T:System.String" /> que contém o XML recuado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-430">A <see cref="T:System.String" /> containing the indented XML.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9e451-431">O exemplo a seguir usa esse método para recuperar o XML recuado.</span><span class="sxs-lookup"><span data-stu-id="9e451-431">The following example uses this method to retrieve indented XML.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1)  
);  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>1</Child1>  
        </Root>  
  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="9e451-432">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="9e451-432">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child1>1</Child1>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="9e451-433">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-433">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (System.Xml.Linq.SaveOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(valuetype System.Xml.Linq.SaveOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.ToString(System.Xml.Linq.SaveOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (options As SaveOptions) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::Xml::Linq::SaveOptions options);" />
      <MemberSignature Language="F#" Value="override this.ToString : System.Xml.Linq.SaveOptions -&gt; string" Usage="xNode.ToString options" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.Xml.Linq.SaveOptions" />
      </Parameters>
      <Docs>
        <param name="options">
          <span data-ttu-id="9e451-434">Um <see cref="T:System.Xml.Linq.SaveOptions" /> que especifica o comportamento de formatação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-434">A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9e451-435">Retorna o XML para esse nó, com a opção de desabilitar a formatação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-435">Returns the XML for this node, optionally disabling formatting.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9e451-436">Um <see cref="T:System.String" /> que contém o XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-436">A <see cref="T:System.String" /> containing the XML.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9e451-437">O exemplo a seguir usa esse método para recuperar o XML sem formatação e formatada.</span><span class="sxs-lookup"><span data-stu-id="9e451-437">The following example uses this method to retrieve unformatted and formatted XML.</span></span>  
  
```csharp  
XElement root = XElement.Parse("<Root><Child/></Root>");  
Console.WriteLine(root.ToString(SaveOptions.DisableFormatting));  
Console.WriteLine("---");  
Console.WriteLine(root.ToString(SaveOptions.None));  
```  
  
```vb  
Dim root As XElement = <Root>  
                           <Child/>  
                       </Root>  
Console.WriteLine(root.ToString(SaveOptions.DisableFormatting))  
Console.WriteLine("---")  
Console.WriteLine(root.ToString(SaveOptions.None))  
```  
  
 <span data-ttu-id="9e451-438">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="9e451-438">This example produces the following output:</span></span>  
  
```  
<Root><Child /></Root>  
---  
<Root>  
  <Child />  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="9e451-439">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-439">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="WriteTo">
      <MemberSignature Language="C#" Value="public abstract void WriteTo (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteTo(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.WriteTo(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteTo (writer As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteTo(System::Xml::XmlWriter ^ writer);" />
      <MemberSignature Language="F#" Value="abstract member WriteTo : System.Xml.XmlWriter -&gt; unit" Usage="xNode.WriteTo writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <span data-ttu-id="9e451-440">Um <see cref="T:System.Xml.XmlWriter" /> no qual esse método gravará.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-440">An <see cref="T:System.Xml.XmlWriter" /> into which this method will write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9e451-441">Grava esse nó em um <see cref="T:System.Xml.XmlWriter" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-441">Writes this node to an <see cref="T:System.Xml.XmlWriter" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e451-442">Você pode usar esse método para escrever código que executa uma transformação de streaming de um documento muito grande.</span><span class="sxs-lookup"><span data-stu-id="9e451-442">You can use this method to write code that does a streaming transform of a very large document.</span></span> <span data-ttu-id="9e451-443">Para obter mais informações, consulte [como: realizar Streaming de transformação de grandes documentos XML](https://msdn.microsoft.com/library/0759e428-6e59-4d80-a506-365d3a6a2b73).</span><span class="sxs-lookup"><span data-stu-id="9e451-443">For more information, see [How to: Perform Streaming Transform of Large XML Documents](https://msdn.microsoft.com/library/0759e428-6e59-4d80-a506-365d3a6a2b73).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e451-444">O exemplo a seguir cria uma <xref:System.Xml.XmlWriter> que grava um <xref:System.Text.StringBuilder>.</span><span class="sxs-lookup"><span data-stu-id="9e451-444">The following example creates an <xref:System.Xml.XmlWriter> that writes to a <xref:System.Text.StringBuilder>.</span></span> <span data-ttu-id="9e451-445">Ele, em seguida, usa esse método para gravar o gravador de duas árvores XML.</span><span class="sxs-lookup"><span data-stu-id="9e451-445">It then uses this method to write two XML trees to the writer.</span></span>  
  
```csharp  
StringBuilder sb = new StringBuilder();  
XmlWriterSettings xws = new XmlWriterSettings();  
xws.OmitXmlDeclaration = true;  
xws.Indent = true;  
  
using (XmlWriter xw = XmlWriter.Create(sb, xws)) {  
    xw.WriteStartElement("Root");  
    XElement child1 = new XElement("Child",  
        new XElement("GrandChild", "some content")  
    );  
    child1.WriteTo(xw);  
    XElement child2 = new XElement("AnotherChild",  
        new XElement("GrandChild", "different content")  
    );  
    child2.WriteTo(xw);  
    xw.WriteEndElement();  
}  
Console.WriteLine(sb.ToString());  
```  
  
```vb  
Dim sb As StringBuilder = New StringBuilder()  
Dim xws As XmlWriterSettings = New XmlWriterSettings()  
xws.OmitXmlDeclaration = True  
xws.Indent = True  
  
Using xw = XmlWriter.Create(sb, xws)  
    xw.WriteStartElement("Root")  
    Dim child1 As XElement = <Child>  
                                 <GrandChild>some content</GrandChild>  
                             </Child>  
    child1.WriteTo(xw)  
    Dim child2 As XElement = <AnotherChild>  
                                 <GrandChild>different content</GrandChild>  
                             </AnotherChild>  
    child2.WriteTo(xw)  
    xw.WriteEndElement()  
End Using  
  
Console.WriteLine(sb.ToString())  
```  
  
 <span data-ttu-id="9e451-446">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="9e451-446">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child>  
    <GrandChild>some content</GrandChild>  
  </Child>  
  <AnotherChild>  
    <GrandChild>different content</GrandChild>  
  </AnotherChild>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="9e451-447">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e451-447">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="WriteToAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task WriteToAsync (System.Xml.XmlWriter writer, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteToAsync(class System.Xml.XmlWriter writer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Threading::Tasks::Task ^ WriteToAsync(System::Xml::XmlWriter ^ writer, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="abstract member WriteToAsync : System.Xml.XmlWriter * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="xNode.WriteToAsync (writer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>