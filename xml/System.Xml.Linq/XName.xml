<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XName.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5c2029127d8735565c289926acb529dfac1574a14.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c2029127d8735565c289926acb529dfac1574a14</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XName">
          <source>Represents a name of an XML element or attribute.</source>
          <target state="translated">Representa um nome de um elemento ou atributo XML.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>XML names include a namespace and a local name.</source>
          <target state="translated">Nomes XML incluem um namespace e um nome local.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>A <bpt id="p1">*</bpt>fully qualified name<ept id="p1">*</ept> is the combination of the namespace and local name.</source>
          <target state="translated">Um <bpt id="p1">*</bpt>nome totalmente qualificado<ept id="p1">*</ept> é a combinação do namespace e nome local.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>Creating an XName Object</source>
          <target state="translated">Criação de um objeto XName</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source><ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> does not contain any public constructors.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> não tem nenhum construtor público.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>Instead, this class provides an implicit conversion from <ph id="ph1">&lt;xref:System.String&gt;</ph> that allows you to create an <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">Em vez disso, essa classe fornece uma conversão implícita de <ph id="ph1">&lt;xref:System.String&gt;</ph> que permite que você crie um <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>The most common place you use this conversion is when constructing an element or attribute: The first argument to the <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> constructor is an <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">O local mais comum é usar essa conversão é ao construir um elemento ou atributo: O primeiro argumento para o <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> construtor é um <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>By passing a string, you take advantage of the implicit conversion.</source>
          <target state="translated">Ao passar uma cadeia de caracteres, você tirar proveito da conversão implícita.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>The following code creates an element with a name that is in no namespace:</source>
          <target state="translated">O código a seguir cria um elemento com um nome que está em nenhum namespace:</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>In Visual Basic, it is more appropriate to use XML literals:</source>
          <target state="translated">No Visual Basic, é mais apropriado usar literais XML:</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>This example produces the following output:</source>
          <target state="translated">Este exemplo gera a seguinte saída:</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>Assigning a string to an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> uses the implicit conversion from <ph id="ph2">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">Atribuir uma cadeia de caracteres para um <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> usa a conversão implícita de <ph id="ph2">&lt;xref:System.String&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>The Visual Basic example creates the <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> using XML literals.</source>
          <target state="translated">O exemplo do Visual Basic cria o <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> usando literais XML.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>Even though XML literals are used, an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> object is created for the <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.</source>
          <target state="translated">Mesmo que forem usados literais XML, um <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> objeto é criado para o <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>In addition, you can call the <ph id="ph1">&lt;xref:System.Xml.Linq.XName.Get%2A&gt;</ph> method for an <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph> object.</source>
          <target state="translated">Além disso, você pode chamar o <ph id="ph1">&lt;xref:System.Xml.Linq.XName.Get%2A&gt;</ph> método para um <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>However, the recommended way is to use the implicit conversion from string.</source>
          <target state="translated">No entanto, a maneira recomendada é usar a conversão implícita de cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>Creating an XName in a Namespace</source>
          <target state="translated">Criando um XName em um Namespace</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>As with XML, an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> can be in a namespace, or it can be in no namespace.</source>
          <target state="translated">Assim como acontece com XML, um <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> pode estar em um namespace ou ele pode ficar sem namespace.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>For C#, the recommended approach for creating an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> in a namespace is to declare the <ph id="ph2">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> object, then use the override of the addition operator.</source>
          <target state="translated">Para c#, a abordagem recomendada para a criação de um <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> em um namespace é declarar o <ph id="ph2">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> do objeto, em seguida, use a substituição do operador de adição.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>For Visual Basic, the recommended approach is to use XML literals and global namespace declarations to create XML that is in a namespace.</source>
          <target state="translated">Para o Visual Basic, a abordagem recomendada é usar literais XML e declarações de namespace global para criar o XML que esteja em um namespace.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>This example produces the following output:</source>
          <target state="translated">Este exemplo gera a seguinte saída:</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>Creating an XName in no Namespace</source>
          <target state="translated">Criando um XName em nenhum Namespace</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Linq.XName.Namespace%2A&gt;</ph> property of an <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph> object is guaranteed to not be null.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Xml.Linq.XName.Namespace%2A&gt;</ph> propriedade de um <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph> é garantido que o objeto não pode ser nulo.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>If the <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> is in no namespace, then the <ph id="ph2">&lt;xref:System.Xml.Linq.XName.Namespace%2A&gt;</ph> property will be set to <ph id="ph3">&lt;xref:System.Xml.Linq.XNamespace.None%2A&gt;</ph>.</source>
          <target state="translated">Se o <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> está em nenhum namespace, o <ph id="ph2">&lt;xref:System.Xml.Linq.XName.Namespace%2A&gt;</ph> propriedade será definida como <ph id="ph3">&lt;xref:System.Xml.Linq.XNamespace.None%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>The following code demonstrates this:</source>
          <target state="translated">O código a seguir demonstra isso:</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>This example produces the following output:</source>
          <target state="translated">Este exemplo gera a seguinte saída:</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>Using Expanded Names</source>
          <target state="translated">Usando nomes expandidos</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>You can also create an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> from a expanded XML name in the form <ph id="ph2">`{namespace}localname`</ph>:</source>
          <target state="translated">Você também pode criar um <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> de um nome XML expandido no formulário <ph id="ph2">`{namespace}localname`</ph>:</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>This example produces the following output:</source>
          <target state="translated">Este exemplo gera a seguinte saída:</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>Be aware that creating an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> through an expanded name is less efficient than creating an <ph id="ph2">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> object and using the override of the addition operator.</source>
          <target state="translated">Lembre-se criar um <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> por meio de um nome expandido é menos eficiente do que criar um <ph id="ph2">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> objeto e usar a substituição do operador de adição.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>It is also less efficient than importing a global namespace and using XML literals in Visual Basic.</source>
          <target state="translated">Também é menos eficiente do que a importação de um namespace global e usando literais XML no Visual Basic.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>If you create an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> using an expanded name, LINQ to XML must find the atomized instance of a namespace.</source>
          <target state="translated">Se você criar um <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> usando um nome expandido, LINQ para XML deve localizar a instância atomizada de um namespace.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>This work must be repeated for every use of an expanded name.</source>
          <target state="translated">Esse trabalho deve ser repetido para cada uso de um nome expandido.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>This additional time is likely to be negligible when writing LINQ queries; however, it might be significant when creating a large XML tree.</source>
          <target state="translated">Esse tempo adicional provavelmente é insignificante ao escrever consultas LINQ; No entanto, ele pode ser significativo durante a criação de uma árvore XML grande.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>XName Objects are Atomized</source>
          <target state="translated">Objetos XName são Atomizados</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source><ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> objects are guaranteed to be atomized; that is, if two <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph> objects have exactly the same namespace and exactly the same local name, they will share the same instance.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> objetos têm garantia de ser atomizada; ou seja, se dois <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph> objetos têm exatamente o mesmo namespace e exatamente o mesmo nome local, eles compartilharão a mesma instância.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>The equality and comparison operators are also provided explicitly for this purpose.</source>
          <target state="translated">Os operadores de comparação e de igualdade também são fornecidos explicitamente para essa finalidade.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>Among other benefits, this feature allows for faster execution of queries.</source>
          <target state="translated">Entre outros benefícios, esse recurso permite a execução mais rápido de consultas.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>When filtering on the name of elements or attributes, the comparisons expressed in predicates use identity comparison, not value comparison.</source>
          <target state="translated">Ao filtrar no nome de elementos ou atributos, as comparações expressadas em predicados usam comparação de identidade, não a comparação de valor.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>It is much faster to determine that two references actually refer to the same object than to compare two strings.</source>
          <target state="translated">É muito mais rápido para determinar se duas referências realmente se referem ao mesmo objeto que ao comparar duas cadeias de caracteres.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.Equals(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> to compare to the current <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> a ser comparado com o <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.Equals(System.Object)">
          <source>Determines whether the specified <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> is equal to this <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>.</source>
          <target state="translated">Determina se o <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> especificado é igual a este <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the specified <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> is equal to the current <ph id="ph3">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>; otherwise <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se o <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> especificado é igual o <ph id="ph3">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> atual; caso contrário, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.Equals(System.Object)">
          <source>For two <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> objects to be equal, they must have the same expanded name.</source>
          <target state="translated">Para duas <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> objetos ser iguais, eles devem ter o mesmo nome expandido.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XName">
          <source>Gets an <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> object.</source>
          <target state="translated">Obtém um objeto <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>This method provides overloads that allow you to create an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> from a expanded XML name.</source>
          <target state="translated">Esse método fornece sobrecargas que permitem que você crie um <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> de um nome XML expandido.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>You can create an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> from a string in the form <ph id="ph2">`{namespace}localname`</ph>, or from a namespace and a local name, specified separately.</source>
          <target state="translated">Você pode criar um <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> de uma cadeia de caracteres no formato <ph id="ph2">`{namespace}localname`</ph>, ou de um namespace e um nome local, especificados separadamente.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>A much more common and easier way to create an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> is to use the implicit conversion from string.</source>
          <target state="translated">Uma maneira mais fácil e muito mais comuns para criar um <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> é usar a conversão implícita de cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>To create a name that is in a namespace, the common approach is to use the addition operator overload that allows you to combine an <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> object and a string.</source>
          <target state="translated">Para criar um nome que esteja em um namespace, a abordagem comum é usar a sobrecarga de operador de adição que permite que você combine um <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> objeto e uma cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>For more information and examples, see <bpt id="p1">[</bpt>How to: Create a Document with Namespaces (C#) (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/af4a595e-ffb2-4187-a61b-d5ed71642c4c)</ept>.</source>
          <target state="translated">Para obter mais informações e exemplos, consulte <bpt id="p1">[</bpt>como: criar um documento com Namespaces (c#) (LINQ para XML)<ept id="p1">](http://msdn.microsoft.com/library/af4a595e-ffb2-4187-a61b-d5ed71642c4c)</ept>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>For more information on using namespaces in <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>, see <bpt id="p1">[</bpt>Namespaces in Visual Basic (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/10b7ba7b-518c-4f14-899f-892575d14dcc)</ept>.</source>
          <target state="translated">Para obter mais informações sobre como usar namespaces em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>, consulte <bpt id="p1">[</bpt>Namespaces no Visual Basic (LINQ para XML)<ept id="p1">](http://msdn.microsoft.com/library/10b7ba7b-518c-4f14-899f-892575d14dcc)</ept>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>Because <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> objects are atomized, if there is an existing <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph> with exactly the same name, the assigned variable will refer to the existing <ph id="ph3">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">Porque <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> atomizados objetos, se houver um <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph> com exatamente o mesmo nome, a variável atribuída fará referência existente <ph id="ph3">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>If there is no existing <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>, a new one will be created and initialized.</source>
          <target state="translated">Se houver nenhuma <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>, um novo um será criado e inicializado.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.Get(System.String)">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that contains an expanded XML name in the format <bpt id="p1">&lt;c&gt;</bpt>{namespace}localname<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> que contém um nome XML expandido no formato <bpt id="p1">&lt;c&gt;</bpt>{namespace} localname<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.Get(System.String)">
          <source>Gets an <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> object from an expanded name.</source>
          <target state="translated">Obtém um objeto <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> de um nome expandido.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.Get(System.String)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> object constructed from the expanded name.</source>
          <target state="translated">Um objeto <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> construído com base no nome expandido.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.Get(System.String)">
          <source>This method contains overloads that allow you to create an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">Este método contém sobrecargas que permitem que você crie um <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.Get(System.String)">
          <source>You can create it from a expanded XML name in the form <ph id="ph1">`{namespace}localname`</ph>, or from a namespace and a local name, specified separately.</source>
          <target state="translated">Você pode criá-lo de um nome XML expandido no formulário <ph id="ph1">`{namespace}localname`</ph>, ou de um namespace e um nome local, especificados separadamente.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.Get(System.String)">
          <source>A much more common and easier way to create an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> is to use the implicit conversion from string.</source>
          <target state="translated">Uma maneira mais fácil e muito mais comuns para criar um <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> é usar a conversão implícita de cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.Get(System.String)">
          <source>Because <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> are atomized, if there is an existing <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph> with exactly the same name, the assigned variable will refer to the existing <ph id="ph3">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">Porque <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> atomizado, se houver um <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph> com exatamente o mesmo nome, a variável atribuída fará referência existente <ph id="ph3">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.Get(System.String)">
          <source>If there is no existing <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>, a new one will be created and initialized.</source>
          <target state="translated">Se houver nenhuma <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>, um novo um será criado e inicializado.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.Get(System.String)">
          <source>The following example shows the use of this method.</source>
          <target state="translated">O exemplo a seguir mostra o uso deste método.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.Get(System.String)">
          <source>This example produces the following output:</source>
          <target state="translated">Este exemplo gera a seguinte saída:</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.Get(System.String,System.String)">
          <source>A local (unqualified) name.</source>
          <target state="translated">Um nome local (não qualificado).</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.Get(System.String,System.String)">
          <source>An XML namespace.</source>
          <target state="translated">Um namespace de XML.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.Get(System.String,System.String)">
          <source>Gets an <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> object from a local name and a namespace.</source>
          <target state="translated">Obtém um objeto <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> de um namespace e um nome local.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.Get(System.String,System.String)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> object created from the specified local name and namespace.</source>
          <target state="translated">Um objeto <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> criado no namespace e do nome local especificados.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.Get(System.String,System.String)">
          <source>This method contains overloads that allow you to create an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">Este método contém sobrecargas que permitem que você crie um <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.Get(System.String,System.String)">
          <source>You can create it from an expanded XML name in the form <ph id="ph1">`{namespace}localname`</ph>, or from a namespace and a local name, specified separately.</source>
          <target state="translated">Você pode criá-lo de um nome XML expandido no formulário <ph id="ph1">`{namespace}localname`</ph>, ou de um namespace e um nome local, especificados separadamente.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.Get(System.String,System.String)">
          <source>A much more common and easier way to create an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> is to use the implicit conversion from string.</source>
          <target state="translated">Uma maneira mais fácil e muito mais comuns para criar um <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> é usar a conversão implícita de cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.Get(System.String,System.String)">
          <source>Because <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> are atomized, if there is an existing <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph> with exactly the same name, the assigned variable will refer to the existing <ph id="ph3">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">Porque <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> atomizado, se houver um <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph> com exatamente o mesmo nome, a variável atribuída fará referência existente <ph id="ph3">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.Get(System.String,System.String)">
          <source>If there is no existing <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>, a new one will be created and initialized.</source>
          <target state="translated">Se houver nenhuma <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>, um novo um será criado e inicializado.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.Get(System.String,System.String)">
          <source>The following example shows the use of this method.</source>
          <target state="translated">O exemplo a seguir mostra o uso deste método.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.Get(System.String,System.String)">
          <source>This example produces the following output:</source>
          <target state="translated">Este exemplo gera a seguinte saída:</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.GetHashCode">
          <source>Gets a hash code for this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>.</source>
          <target state="translated">Obtém o código hash para esse <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.GetHashCode">
          <source>An <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> that contains the hash code for the <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> que contém o código hash para o <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.GetHashCode">
          <source>This method serves as a hash function for <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">Esse método funciona como uma função de hash para <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.GetHashCode">
          <source>You can use <ph id="ph1">&lt;xref:System.Xml.Linq.XName.GetHashCode%2A&gt;</ph> in hashing algorithms, or in data structures such as a hash table.</source>
          <target state="translated">Você pode usar <ph id="ph1">&lt;xref:System.Xml.Linq.XName.GetHashCode%2A&gt;</ph> em algoritmos de hash, ou em estruturas de dados como uma tabela de hash.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="P:System.Xml.Linq.XName.LocalName">
          <source>Gets the local (unqualified) part of the name.</source>
          <target state="translated">Obtém a parte local (não qualificada) do nome.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XName.LocalName">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that contains the local (unqualified) part of the name.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> que contém a parte local (não qualificada) do nome.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XName.LocalName">
          <source>This property is guaranteed to not be <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Essa propriedade é garantia de não ser <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XName.LocalName">
          <source>The following example shows the use of this property.</source>
          <target state="translated">O exemplo a seguir mostra o uso dessa propriedade.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XName.LocalName">
          <source>This example produces the following output:</source>
          <target state="translated">Este exemplo gera a seguinte saída:</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="P:System.Xml.Linq.XName.Namespace">
          <source>Gets the namespace part of the fully qualified name.</source>
          <target state="translated">Obtém a parte do namespace do nome totalmente qualificado.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XName.Namespace">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> that contains the namespace part of the name.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> que contém a parte do namespace do nome.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XName.Namespace">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Linq.XName.Namespace%2A&gt;</ph> property is guaranteed to not be <ph id="ph2">`null`</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Xml.Linq.XName.Namespace%2A&gt;</ph> propriedade garantia de não <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XName.Namespace">
          <source>If an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> is in no namespace, this property returns <ph id="ph2">&lt;xref:System.Xml.Linq.XNamespace.None%2A&gt;</ph>.</source>
          <target state="translated">Se um <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> está em nenhum namespace, essa propriedade retornará <ph id="ph2">&lt;xref:System.Xml.Linq.XNamespace.None%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XName.Namespace">
          <source>The following example shows the use of this property.</source>
          <target state="translated">O exemplo a seguir mostra o uso dessa propriedade.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XName.Namespace">
          <source>This example produces the following output:</source>
          <target state="translated">Este exemplo gera a seguinte saída:</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="P:System.Xml.Linq.XName.NamespaceName">
          <source>Returns the URI of the <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> for this <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>.</source>
          <target state="translated">Retorna o URI do <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> para este <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XName.NamespaceName">
          <source>The URI of the <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> for this <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>.</source>
          <target state="translated">O URI do <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> para este <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XName.NamespaceName">
          <source>This is a convenience property to get the namespace name from an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">Esta é uma propriedade de conveniência para obter o nome do namespace de um <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XName.NamespaceName">
          <source>This example creates an element in a namespace, and then prints the element's namespace.</source>
          <target state="translated">Este exemplo cria um elemento em um namespace e, em seguida, imprime o namespace do elemento.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XName.NamespaceName">
          <source>This example produces the following output:</source>
          <target state="translated">Este exemplo gera a seguinte saída:</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
          <source>The first <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> to compare.</source>
          <target state="translated">O primeiro <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> a ser comparado.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
          <source>The second <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> to compare.</source>
          <target state="translated">O segundo <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> a ser comparado.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
          <source>Returns a value indicating whether two instances of <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> are equal.</source>
          <target state="translated">Retorna um valor que indica se duas instâncias de <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> são iguais.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="left" /&gt;</ph> and <ph id="ph3">&lt;paramref name="right" /&gt;</ph> are equal; otherwise <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se <ph id="ph2">&lt;paramref name="left" /&gt;</ph> e <ph id="ph3">&lt;paramref name="right" /&gt;</ph> forem iguais; caso contrário <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
          <source>The operator overloads <ph id="ph1">`==`</ph> and <ph id="ph2">`!=`</ph> are included to enable comparisons between <ph id="ph3">&lt;xref:System.Xml.Linq.XName&gt;</ph> and a <ph id="ph4">`string`</ph>, such as<ph id="ph5">`element.Name == "SomeElementName"`</ph>.</source>
          <target state="translated">As sobrecargas de operador <ph id="ph1">`==`</ph> e <ph id="ph2">`!=`</ph> estão incluídos para habilitar comparações entre <ph id="ph3">&lt;xref:System.Xml.Linq.XName&gt;</ph> e um <ph id="ph4">`string`</ph>, como<ph id="ph5">`element.Name == "SomeElementName"`</ph>.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
          <source>The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only.</source>
          <target state="translated">Os operadores de igualdade de referência predefinida no c# exigem um operando ser conversível para o tipo dos outros por meio de apenas conversões de referência.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
          <source>These operators do not consider the implicit conversion from string to <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">Esses operadores não consideram a conversão implícita de cadeia de caracteres para <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
          <source>The following example shows some comparisons between <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> objects and strings.</source>
          <target state="translated">O exemplo a seguir mostra algumas comparações entre <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> objetos e cadeias de caracteres.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
          <source>This example produces the following output:</source>
          <target state="translated">Este exemplo gera a seguinte saída:</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.op_Implicit(System.String)~System.Xml.Linq.XName">
          <source>A string that contains an expanded XML name in the format <bpt id="p1">&lt;c&gt;</bpt>{namespace}localname<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Uma cadeia de caracteres que contém um nome XML expandido no formato <bpt id="p1">&lt;c&gt;</bpt>{namespace} localname<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.op_Implicit(System.String)~System.Xml.Linq.XName">
          <source>Converts a string formatted as an expanded XML name (that is,<bpt id="p1">&lt;c&gt;</bpt>{namespace}localname<ept id="p1">&lt;/c&gt;</ept>) to an <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> object.</source>
          <target state="translated">Converte uma cadeia de caracteres formatada como um nome XML expandido (isto é,<bpt id="p1">&lt;c&gt;</bpt>{namespace}localname<ept id="p1">&lt;/c&gt;</ept>) em um objeto <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.op_Implicit(System.String)~System.Xml.Linq.XName">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> object constructed from the expanded name.</source>
          <target state="translated">Um objeto <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> construído com base no nome expandido.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.op_Implicit(System.String)~System.Xml.Linq.XName">
          <source>You are using this implicit operator when you create an <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> or <ph id="ph2">&lt;xref:System.Xml.Linq.XAttribute&gt;</ph> by passing a string to the appropriate constructor.</source>
          <target state="translated">Você está usando este operador implícito quando você cria um <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> ou <ph id="ph2">&lt;xref:System.Xml.Linq.XAttribute&gt;</ph> , passando uma cadeia de caracteres para o construtor apropriado.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.op_Implicit(System.String)~System.Xml.Linq.XName">
          <source>The following example creates an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> by assigning a string to it, which invokes this implicit conversion operator.</source>
          <target state="translated">O exemplo a seguir cria um <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> atribuindo uma cadeia de caracteres a ele, que chama esse operador de conversão implícita.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.op_Implicit(System.String)~System.Xml.Linq.XName">
          <source>This example produces the following output:</source>
          <target state="translated">Este exemplo gera a seguinte saída:</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
          <source>The first <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> to compare.</source>
          <target state="translated">O primeiro <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> a ser comparado.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
          <source>The second <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> to compare.</source>
          <target state="translated">O segundo <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> a ser comparado.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
          <source>Returns a value indicating whether two instances of <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> are not equal.</source>
          <target state="translated">Retorna um valor que indica se duas instâncias de <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> não são iguais.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="left" /&gt;</ph> and <ph id="ph3">&lt;paramref name="right" /&gt;</ph> are not equal; otherwise <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se <ph id="ph2">&lt;paramref name="left" /&gt;</ph> e <ph id="ph3">&lt;paramref name="right" /&gt;</ph> não forem iguais; caso contrário <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
          <source>The operator overloads <ph id="ph1">`==`</ph> and <ph id="ph2">`!=`</ph> are included to enable comparisons between <ph id="ph3">&lt;xref:System.Xml.Linq.XName&gt;</ph> and a string, such as<ph id="ph4">`element.Name == "SomeElementName"`</ph>.</source>
          <target state="translated">As sobrecargas de operador <ph id="ph1">`==`</ph> e <ph id="ph2">`!=`</ph> estão incluídos para habilitar comparações entre <ph id="ph3">&lt;xref:System.Xml.Linq.XName&gt;</ph> e uma cadeia de caracteres, como<ph id="ph4">`element.Name == "SomeElementName"`</ph>.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
          <source>The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only.</source>
          <target state="translated">Os operadores de igualdade de referência predefinida no c# exigem um operando ser conversível para o tipo dos outros por meio de apenas conversões de referência.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
          <source>These operators do not consider the implicit conversion from string to <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">Esses operadores não consideram a conversão implícita de cadeia de caracteres para <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
          <source>The following C# example compares an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> object to a string, which invokes this operator.</source>
          <target state="translated">O exemplo c# a seguir compara um <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> objeto para uma cadeia de caracteres, que chama esse operador.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
          <source>This example produces the following output:</source>
          <target state="translated">Este exemplo gera a seguinte saída:</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.System#IEquatable&amp;lt;System#Xml#Linq#XName&amp;gt;#Equals(System.Xml.Linq.XName)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> to compare with this <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> a ser comparado com este <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.System#IEquatable&amp;lt;System#Xml#Linq#XName&amp;gt;#Equals(System.Xml.Linq.XName)">
          <source>Indicates whether the current <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> is equal to the specified <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>.</source>
          <target state="translated">Indica se o <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> atual é igual ao <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> especificado.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.System#IEquatable&amp;lt;System#Xml#Linq#XName&amp;gt;#Equals(System.Xml.Linq.XName)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> is equal to the specified <ph id="ph3">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>, otherwise <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se este <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> é igual ao <ph id="ph3">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> especificado, caso contrário, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> to populate with data.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> a ser preenchido com dados.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The destination (see <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph>) for this serialization.</source>
          <target state="translated">O destino (consulte <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph>) dessa serialização.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Populates a <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> with the data required to serialize the target object.</source>
          <target state="translated">Popula um <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> com os dados necessários para serializar o objeto de destino.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This method is used internally to serialize object graphs that contain LINQ to XML objects.</source>
          <target state="translated">Esse método é usado internamente para serializar os gráficos de objetos que contêm LINQ para objetos XML.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.ToString">
          <source>Returns the expanded XML name in the format <bpt id="p1">&lt;c&gt;</bpt>{namespace}localname<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Retorna o nome expandido XML no formato <bpt id="p1">&lt;c&gt;</bpt>{namespace}localname<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.ToString">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that contains the expanded XML name in the format <bpt id="p1">&lt;c&gt;</bpt>{namespace}localname<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> que contém o nome XML expandido no formato <bpt id="p1">&lt;c&gt;</bpt>{namespace} localname<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.ToString">
          <source>The following example calls <ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph>, passing an <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">A exemplo a seguir chama <ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph>, passando um <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.ToString">
          <source>This causes the <ph id="ph1">&lt;xref:System.Xml.Linq.XName.ToString%2A&gt;</ph> method to be called.</source>
          <target state="translated">Isso faz com que o <ph id="ph1">&lt;xref:System.Xml.Linq.XName.ToString%2A&gt;</ph> método a ser chamado.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.ToString">
          <source>This example produces the following output:</source>
          <target state="translated">Este exemplo gera a seguinte saída:</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>