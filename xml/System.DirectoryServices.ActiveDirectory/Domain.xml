<Type Name="Domain" FullName="System.DirectoryServices.ActiveDirectory.Domain">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a572836572824320f01dad411d68a2fdd402e7ef" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55383127" /></Metadata><TypeSignature Language="C#" Value="public class Domain : System.DirectoryServices.ActiveDirectory.ActiveDirectoryPartition" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Domain extends System.DirectoryServices.ActiveDirectory.ActiveDirectoryPartition" />
  <TypeSignature Language="DocId" Value="T:System.DirectoryServices.ActiveDirectory.Domain" />
  <TypeSignature Language="VB.NET" Value="Public Class Domain&#xA;Inherits ActiveDirectoryPartition" />
  <TypeSignature Language="C++ CLI" Value="public ref class Domain : System::DirectoryServices::ActiveDirectory::ActiveDirectoryPartition" />
  <TypeSignature Language="F#" Value="type Domain = class&#xA;    inherit ActiveDirectoryPartition" />
  <AssemblyInfo>
    <AssemblyName>System.DirectoryServices</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.DirectoryServices.ActiveDirectory.ActiveDirectoryPartition</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>A classe <see cref="T:System.DirectoryServices.ActiveDirectory.Domain" /> representa um domínio do Active Directory.</summary>
    <remarks>To be added.</remarks>
    <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">Valor de demanda: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /></permission>
    <related type="Article" href="https://msdn.microsoft.com/library/e1df3378-17b0-4429-91c7-13d4a457fb6e">Como: Trabalhar com relações de confiança</related>
  </Docs>
  <Members>
    <Member MemberName="Children">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.ActiveDirectory.DomainCollection Children { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.DirectoryServices.ActiveDirectory.DomainCollection Children" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.ActiveDirectory.Domain.Children" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Children As DomainCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::DirectoryServices::ActiveDirectory::DomainCollection ^ Children { System::DirectoryServices::ActiveDirectory::DomainCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Children : System.DirectoryServices.ActiveDirectory.DomainCollection" Usage="System.DirectoryServices.ActiveDirectory.Domain.Children" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.ActiveDirectory.DomainCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém os domínios que são filhos deste domínio.</summary>
        <value>Um <see cref="T:System.DirectoryServices.ActiveDirectory.DomainCollection" /> objeto que contém os domínios filho.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">O objeto foi eliminado.</exception>
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.DomainCollection" />
      </Docs>
    </Member>
    <Member MemberName="CreateLocalSideOfTrustRelationship">
      <MemberSignature Language="C#" Value="public void CreateLocalSideOfTrustRelationship (string targetDomainName, System.DirectoryServices.ActiveDirectory.TrustDirection direction, string trustPassword);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CreateLocalSideOfTrustRelationship(string targetDomainName, valuetype System.DirectoryServices.ActiveDirectory.TrustDirection direction, string trustPassword) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.CreateLocalSideOfTrustRelationship(System.String,System.DirectoryServices.ActiveDirectory.TrustDirection,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CreateLocalSideOfTrustRelationship (targetDomainName As String, direction As TrustDirection, trustPassword As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CreateLocalSideOfTrustRelationship(System::String ^ targetDomainName, System::DirectoryServices::ActiveDirectory::TrustDirection direction, System::String ^ trustPassword);" />
      <MemberSignature Language="F#" Value="member this.CreateLocalSideOfTrustRelationship : string * System.DirectoryServices.ActiveDirectory.TrustDirection * string -&gt; unit" Usage="domain.CreateLocalSideOfTrustRelationship (targetDomainName, direction, trustPassword)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetDomainName" Type="System.String" />
        <Parameter Name="direction" Type="System.DirectoryServices.ActiveDirectory.TrustDirection" />
        <Parameter Name="trustPassword" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetDomainName">O nome DNS do domínio com o qual a relação de confiança é criada.</param>
        <param name="direction">Um dos membros <see cref="T:System.DirectoryServices.ActiveDirectory.TrustDirection" /> que determina a direção da relação de confiança, em relação a este domínio.</param>
        <param name="trustPassword">A senha da relação de confiança.</param>
        <summary>Cria lado local de uma relação de confiança com o domínio especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método cria um dos lados de uma relação de confiança. A relação de confiança não é estabelecida até que ambos os lados da relação de confiança foram criados.  
  
 O `trustPassword` parâmetro associa uma senha com a relação de confiança criada. Quando o outro lado da relação de confiança é criado, a mesma senha é fornecida e as duas relações de confiança locais, em seguida, são vinculadas uns aos outros.  
  
 Para criar programaticamente os dois lados de uma relação de confiança em uma única chamada de método, use o <xref:System.DirectoryServices.ActiveDirectory.Domain.CreateTrustRelationship%2A?displayProperty=nameWithType> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectExistsException">A relação de confiança já existe.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException">Uma chamada ao serviço do diretório subjacente resultou em um erro.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException">O servidor de destino está ocupado ou não disponível.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="targetDomainName" /> ou <paramref name="trustPassword" /> está vazio.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="targetDomainName" /> ou <paramref name="trustPassword" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="direction" /> não é um valor <see cref="T:System.DirectoryServices.ActiveDirectory.TrustDirection" /> válido.</exception>
        <exception cref="T:System.ObjectDisposedException">O objeto foi eliminado.</exception>
        <exception cref="T:System.UnauthorizedAccessException">A conta especificada não tem permissão para executar essa operação.</exception>
        <altmember cref="M:System.DirectoryServices.ActiveDirectory.Domain.CreateTrustRelationship(System.DirectoryServices.ActiveDirectory.Domain,System.DirectoryServices.ActiveDirectory.TrustDirection)" />
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.TrustDirection" />
        <related type="Article" href="https://msdn.microsoft.com/library/e1df3378-17b0-4429-91c7-13d4a457fb6e">Como: Trabalhar com relações de confiança</related>
      </Docs>
    </Member>
    <Member MemberName="CreateTrustRelationship">
      <MemberSignature Language="C#" Value="public void CreateTrustRelationship (System.DirectoryServices.ActiveDirectory.Domain targetDomain, System.DirectoryServices.ActiveDirectory.TrustDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CreateTrustRelationship(class System.DirectoryServices.ActiveDirectory.Domain targetDomain, valuetype System.DirectoryServices.ActiveDirectory.TrustDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.CreateTrustRelationship(System.DirectoryServices.ActiveDirectory.Domain,System.DirectoryServices.ActiveDirectory.TrustDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CreateTrustRelationship (targetDomain As Domain, direction As TrustDirection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CreateTrustRelationship(System::DirectoryServices::ActiveDirectory::Domain ^ targetDomain, System::DirectoryServices::ActiveDirectory::TrustDirection direction);" />
      <MemberSignature Language="F#" Value="member this.CreateTrustRelationship : System.DirectoryServices.ActiveDirectory.Domain * System.DirectoryServices.ActiveDirectory.TrustDirection -&gt; unit" Usage="domain.CreateTrustRelationship (targetDomain, direction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetDomain" Type="System.DirectoryServices.ActiveDirectory.Domain" />
        <Parameter Name="direction" Type="System.DirectoryServices.ActiveDirectory.TrustDirection" />
      </Parameters>
      <Docs>
        <param name="targetDomain">Um objeto <see cref="T:System.DirectoryServices.ActiveDirectory.Domain" /> que representa o domínio com o qual a relação de confiança está sendo criada.</param>
        <param name="direction">Um dos membros <see cref="T:System.DirectoryServices.ActiveDirectory.TrustDirection" /> que determina a direção da relação de confiança, em relação a este domínio.</param>
        <summary>Cria os dois lados de uma relação de confiança com o domínio especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método cria os dois lados de uma relação de confiança com uma única chamada de método. O <xref:System.DirectoryServices.ActiveDirectory.Domain.CreateLocalSideOfTrustRelationship%2A?displayProperty=nameWithType> método é usado para criar apenas um dos lados de uma relação de confiança.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectExistsException">A relação de confiança já existe.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException">Uma chamada ao serviço do diretório subjacente resultou em um erro.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException">O servidor de destino está ocupado ou não disponível.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="targetDomain" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="direction" /> não é um valor <see cref="T:System.DirectoryServices.ActiveDirectory.TrustDirection" /> válido.</exception>
        <exception cref="T:System.ObjectDisposedException">O objeto foi eliminado.</exception>
        <exception cref="T:System.UnauthorizedAccessException">A conta especificada não tem permissão para executar essa operação.</exception>
        <altmember cref="M:System.DirectoryServices.ActiveDirectory.Domain.CreateLocalSideOfTrustRelationship(System.String,System.DirectoryServices.ActiveDirectory.TrustDirection,System.String)" />
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.TrustDirection" />
        <related type="Article" href="https://msdn.microsoft.com/library/e1df3378-17b0-4429-91c7-13d4a457fb6e">Como: Trabalhar com relações de confiança</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteLocalSideOfTrustRelationship">
      <MemberSignature Language="C#" Value="public void DeleteLocalSideOfTrustRelationship (string targetDomainName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteLocalSideOfTrustRelationship(string targetDomainName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.DeleteLocalSideOfTrustRelationship(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteLocalSideOfTrustRelationship (targetDomainName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteLocalSideOfTrustRelationship(System::String ^ targetDomainName);" />
      <MemberSignature Language="F#" Value="member this.DeleteLocalSideOfTrustRelationship : string -&gt; unit" Usage="domain.DeleteLocalSideOfTrustRelationship targetDomainName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetDomainName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetDomainName">O nome DNS do domínio com o qual a relação de confiança existe.</param>
        <summary>Exclui o lado local de uma relação de confiança.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando um dos lados de uma relação de confiança é excluído, existe a relação de confiança mais longa.  
  
 Para excluir os dois lados de uma relação de confiança com uma chamada de método, use o <xref:System.DirectoryServices.ActiveDirectory.Domain.DeleteTrustRelationship%2A?displayProperty=nameWithType> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException">Não há nenhuma relação de confiança com o <see cref="T:System.DirectoryServices.ActiveDirectory.Domain" /> especificado pelo parâmetro <paramref name="targetDomainName" />.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException">Uma chamada ao serviço do diretório subjacente resultou em um erro.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException">O servidor de destino está ocupado ou não disponível.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="targetDomainName" /> é uma cadeia de caracteres vazia.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="targetDomainName" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">O objeto foi eliminado.</exception>
        <exception cref="T:System.UnauthorizedAccessException">A conta especificada não tem permissão para executar essa operação.</exception>
        <altmember cref="M:System.DirectoryServices.ActiveDirectory.Domain.CreateLocalSideOfTrustRelationship(System.String,System.DirectoryServices.ActiveDirectory.TrustDirection,System.String)" />
        <altmember cref="M:System.DirectoryServices.ActiveDirectory.Domain.DeleteTrustRelationship(System.DirectoryServices.ActiveDirectory.Domain)" />
        <related type="Article" href="https://msdn.microsoft.com/library/e1df3378-17b0-4429-91c7-13d4a457fb6e">Como: Trabalhar com relações de confiança</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteTrustRelationship">
      <MemberSignature Language="C#" Value="public void DeleteTrustRelationship (System.DirectoryServices.ActiveDirectory.Domain targetDomain);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteTrustRelationship(class System.DirectoryServices.ActiveDirectory.Domain targetDomain) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.DeleteTrustRelationship(System.DirectoryServices.ActiveDirectory.Domain)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteTrustRelationship (targetDomain As Domain)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteTrustRelationship(System::DirectoryServices::ActiveDirectory::Domain ^ targetDomain);" />
      <MemberSignature Language="F#" Value="member this.DeleteTrustRelationship : System.DirectoryServices.ActiveDirectory.Domain -&gt; unit" Usage="domain.DeleteTrustRelationship targetDomain" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetDomain" Type="System.DirectoryServices.ActiveDirectory.Domain" />
      </Parameters>
      <Docs>
        <param name="targetDomain">Um objeto <see cref="T:System.DirectoryServices.ActiveDirectory.Domain" /> que representa o domínio com o qual existe a relação de confiança.</param>
        <summary>Exclui os dois lados de uma relação de confiança.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para excluir apenas um dos lados de uma relação de confiança, use o <xref:System.DirectoryServices.ActiveDirectory.Domain.DeleteLocalSideOfTrustRelationship%2A?displayProperty=nameWithType> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException">Não há nenhuma relação de confiança com o <see cref="T:System.DirectoryServices.ActiveDirectory.Domain" /> especificado.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException">Uma chamada ao serviço do diretório subjacente resultou em um erro.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException">O servidor de destino está ocupado ou não disponível.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="targetDomain" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">O objeto foi eliminado.</exception>
        <exception cref="T:System.UnauthorizedAccessException">A conta especificada não tem permissão para executar essa operação.</exception>
        <altmember cref="M:System.DirectoryServices.ActiveDirectory.Domain.DeleteLocalSideOfTrustRelationship(System.String)" />
        <altmember cref="M:System.DirectoryServices.ActiveDirectory.Domain.CreateTrustRelationship(System.DirectoryServices.ActiveDirectory.Domain,System.DirectoryServices.ActiveDirectory.TrustDirection)" />
        <related type="Article" href="https://msdn.microsoft.com/library/e1df3378-17b0-4429-91c7-13d4a457fb6e">Como: Trabalhar com relações de confiança</related>
      </Docs>
    </Member>
    <Member MemberName="DomainControllers">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.ActiveDirectory.DomainControllerCollection DomainControllers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.DirectoryServices.ActiveDirectory.DomainControllerCollection DomainControllers" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.ActiveDirectory.Domain.DomainControllers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DomainControllers As DomainControllerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::DirectoryServices::ActiveDirectory::DomainControllerCollection ^ DomainControllers { System::DirectoryServices::ActiveDirectory::DomainControllerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DomainControllers : System.DirectoryServices.ActiveDirectory.DomainControllerCollection" Usage="System.DirectoryServices.ActiveDirectory.Domain.DomainControllers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.ActiveDirectory.DomainControllerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém os controladores de domínio nesse domínio.</summary>
        <value>Um <see cref="T:System.DirectoryServices.ActiveDirectory.DomainControllerCollection" /> objeto que contém os controladores de domínio nesse domínio.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">O objeto foi eliminado.</exception>
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.DomainControllerCollection" />
      </Docs>
    </Member>
    <Member MemberName="DomainMode">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.ActiveDirectory.DomainMode DomainMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DirectoryServices.ActiveDirectory.DomainMode DomainMode" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.ActiveDirectory.Domain.DomainMode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DomainMode As DomainMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::DirectoryServices::ActiveDirectory::DomainMode DomainMode { System::DirectoryServices::ActiveDirectory::DomainMode get(); };" />
      <MemberSignature Language="F#" Value="member this.DomainMode : System.DirectoryServices.ActiveDirectory.DomainMode" Usage="System.DirectoryServices.ActiveDirectory.Domain.DomainMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.ActiveDirectory.DomainMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o modo no qual este domínio está operando.</summary>
        <value>Um do <see cref="T:System.DirectoryServices.ActiveDirectory.DomainMode" /> valores que indica o modo no qual este domínio está operando.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">O objeto foi eliminado.</exception>
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.DomainMode" />
      </Docs>
    </Member>
    <Member MemberName="DomainModeLevel">
      <MemberSignature Language="C#" Value="public int DomainModeLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DomainModeLevel" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.ActiveDirectory.Domain.DomainModeLevel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DomainModeLevel As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int DomainModeLevel { int get(); };" />
      <MemberSignature Language="F#" Value="member this.DomainModeLevel : int" Usage="System.DirectoryServices.ActiveDirectory.Domain.DomainModeLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o nível de modo no qual este domínio está operando.</summary>
        <value>O nível de modo de domínio.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="FindAllDiscoverableDomainControllers">
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Localiza todos os controladores de domínio detectáveis nesse domínio.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindAllDiscoverableDomainControllers">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.ActiveDirectory.DomainControllerCollection FindAllDiscoverableDomainControllers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.DirectoryServices.ActiveDirectory.DomainControllerCollection FindAllDiscoverableDomainControllers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.FindAllDiscoverableDomainControllers" />
      <MemberSignature Language="VB.NET" Value="Public Function FindAllDiscoverableDomainControllers () As DomainControllerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::DirectoryServices::ActiveDirectory::DomainControllerCollection ^ FindAllDiscoverableDomainControllers();" />
      <MemberSignature Language="F#" Value="member this.FindAllDiscoverableDomainControllers : unit -&gt; System.DirectoryServices.ActiveDirectory.DomainControllerCollection" Usage="domain.FindAllDiscoverableDomainControllers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.ActiveDirectory.DomainControllerCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Localiza todos os controladores de domínio detectáveis nesse domínio.</summary>
        <returns>Um <see cref="T:System.DirectoryServices.ActiveDirectory.DomainControllerCollection" /> que contém os objetos de controlador de domínio que foram encontrados por esse método.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can find discoverable domain controllers by querying DNS SRV records. Somente os controladores de domínio que registre o genérico, não específico de site, o registro SRV do controlador de domínio serão retornados por esse método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException">O servidor de destino está ocupado ou não disponível.</exception>
        <exception cref="T:System.ObjectDisposedException">O objeto foi eliminado.</exception>
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.DomainControllerCollection" />
      </Docs>
    </Member>
    <Member MemberName="FindAllDiscoverableDomainControllers">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.ActiveDirectory.DomainControllerCollection FindAllDiscoverableDomainControllers (string siteName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.DirectoryServices.ActiveDirectory.DomainControllerCollection FindAllDiscoverableDomainControllers(string siteName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.FindAllDiscoverableDomainControllers(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindAllDiscoverableDomainControllers (siteName As String) As DomainControllerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::DirectoryServices::ActiveDirectory::DomainControllerCollection ^ FindAllDiscoverableDomainControllers(System::String ^ siteName);" />
      <MemberSignature Language="F#" Value="member this.FindAllDiscoverableDomainControllers : string -&gt; System.DirectoryServices.ActiveDirectory.DomainControllerCollection" Usage="domain.FindAllDiscoverableDomainControllers siteName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.ActiveDirectory.DomainControllerCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="siteName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="siteName">O nome do site no qual pesquisar pelos controladores de domínio.</param>
        <summary>Localiza todos os controladores de domínio detectáveis nesse domínio que também estão no site especificado.</summary>
        <returns>Um <see cref="T:System.DirectoryServices.ActiveDirectory.DomainControllerCollection" /> que contém os objetos de controlador de domínio que foram encontrados por esse método.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can find discoverable domain controllers by querying DNS SRV records.  Se um controlador de domínio não registra um registro SRV para o site especificado, ele não será retornado por esse método, mesmo se o controlador de domínio estiver localizado fisicamente dentro desse site.  
  
 Todos os controladores de domínio que se registram um registro SRV para o site especificado serão retornados por esse método, mesmo se eles não estão fisicamente localizados dentro desse site.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException">O servidor de destino está ocupado ou não disponível.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="siteName" /> é uma cadeia de caracteres vazia.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="siteName" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">O objeto foi eliminado.</exception>
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.DomainControllerCollection" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FindAllDomainControllers">
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Localiza todos os controladores de domínio nesse domínio.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindAllDomainControllers">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.ActiveDirectory.DomainControllerCollection FindAllDomainControllers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.DirectoryServices.ActiveDirectory.DomainControllerCollection FindAllDomainControllers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.FindAllDomainControllers" />
      <MemberSignature Language="VB.NET" Value="Public Function FindAllDomainControllers () As DomainControllerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::DirectoryServices::ActiveDirectory::DomainControllerCollection ^ FindAllDomainControllers();" />
      <MemberSignature Language="F#" Value="member this.FindAllDomainControllers : unit -&gt; System.DirectoryServices.ActiveDirectory.DomainControllerCollection" Usage="domain.FindAllDomainControllers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.ActiveDirectory.DomainControllerCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Localiza todos os controladores de domínio nesse domínio.</summary>
        <returns>Um <see cref="T:System.DirectoryServices.ActiveDirectory.DomainControllerCollection" /> que contém os objetos de controlador de domínio que foram encontrados por esse método.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException">O servidor de destino está ocupado ou não disponível.</exception>
        <exception cref="T:System.ObjectDisposedException">O objeto foi eliminado.</exception>
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.DomainControllerCollection" />
      </Docs>
    </Member>
    <Member MemberName="FindAllDomainControllers">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.ActiveDirectory.DomainControllerCollection FindAllDomainControllers (string siteName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.DirectoryServices.ActiveDirectory.DomainControllerCollection FindAllDomainControllers(string siteName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.FindAllDomainControllers(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindAllDomainControllers (siteName As String) As DomainControllerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::DirectoryServices::ActiveDirectory::DomainControllerCollection ^ FindAllDomainControllers(System::String ^ siteName);" />
      <MemberSignature Language="F#" Value="member this.FindAllDomainControllers : string -&gt; System.DirectoryServices.ActiveDirectory.DomainControllerCollection" Usage="domain.FindAllDomainControllers siteName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.ActiveDirectory.DomainControllerCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="siteName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="siteName">O nome do site no qual pesquisar pelos controladores de domínio.</param>
        <summary>Localiza todos os controladores de domínio nesse domínio que também estão no site especificado.</summary>
        <returns>Um <see cref="T:System.DirectoryServices.ActiveDirectory.DomainControllerCollection" /> que contém os objetos de controlador de domínio que foram encontrados por esse método.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException">O servidor de destino está ocupado ou indisponível.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="siteName" /> é uma cadeia de caracteres vazia.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="siteName" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">O objeto foi eliminado.</exception>
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.DomainControllerCollection" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FindDomainController">
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Localiza qualquer controlador de domínio nesse domínio.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindDomainController">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.ActiveDirectory.DomainController FindDomainController ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.DirectoryServices.ActiveDirectory.DomainController FindDomainController() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.FindDomainController" />
      <MemberSignature Language="VB.NET" Value="Public Function FindDomainController () As DomainController" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::DirectoryServices::ActiveDirectory::DomainController ^ FindDomainController();" />
      <MemberSignature Language="F#" Value="member this.FindDomainController : unit -&gt; System.DirectoryServices.ActiveDirectory.DomainController" Usage="domain.FindDomainController " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.ActiveDirectory.DomainController</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Localiza qualquer controlador de domínio nesse domínio.</summary>
        <returns>Um <see cref="T:System.DirectoryServices.ActiveDirectory.DomainController" /> que representa o controlador de domínio encontrado por este método.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método localiza qualquer controlador de domínio no domínio. Não há nenhuma garantia de que o mesmo controlador de domínio será encontrado por outra chamada para esse método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException">Não foi possível localizar um controlador de domínio.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException">Uma chamada ao serviço do diretório subjacente resultou em um erro.</exception>
        <exception cref="T:System.ObjectDisposedException">O objeto foi eliminado.</exception>
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.DomainController" />
      </Docs>
    </Member>
    <Member MemberName="FindDomainController">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.ActiveDirectory.DomainController FindDomainController (System.DirectoryServices.ActiveDirectory.LocatorOptions flag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.DirectoryServices.ActiveDirectory.DomainController FindDomainController(valuetype System.DirectoryServices.ActiveDirectory.LocatorOptions flag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.FindDomainController(System.DirectoryServices.ActiveDirectory.LocatorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindDomainController (flag As LocatorOptions) As DomainController" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::DirectoryServices::ActiveDirectory::DomainController ^ FindDomainController(System::DirectoryServices::ActiveDirectory::LocatorOptions flag);" />
      <MemberSignature Language="F#" Value="member this.FindDomainController : System.DirectoryServices.ActiveDirectory.LocatorOptions -&gt; System.DirectoryServices.ActiveDirectory.DomainController" Usage="domain.FindDomainController flag" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.ActiveDirectory.DomainController</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flag" Type="System.DirectoryServices.ActiveDirectory.LocatorOptions" />
      </Parameters>
      <Docs>
        <param name="flag">Uma combinação de um ou mais dos membros <see cref="T:System.DirectoryServices.ActiveDirectory.LocatorOptions" /> que define o tipo de controlador de domínio a ser localizado.</param>
        <summary>Localiza um controlador de domínio nesse domínio que atenda aos critérios especificados.</summary>
        <returns>Um <see cref="T:System.DirectoryServices.ActiveDirectory.DomainController" /> que representa o controlador de domínio encontrado por este método.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException">Não foi possível localizar um controlador de domínio.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException">Uma chamada ao serviço do diretório subjacente resultou em um erro.</exception>
        <exception cref="T:System.ArgumentException">O parâmetro <paramref name="flag" /> contém um valor inválido.</exception>
        <exception cref="T:System.ObjectDisposedException">O objeto foi eliminado.</exception>
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.DomainController" />
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.LocatorOptions" />
      </Docs>
    </Member>
    <Member MemberName="FindDomainController">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.ActiveDirectory.DomainController FindDomainController (string siteName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.DirectoryServices.ActiveDirectory.DomainController FindDomainController(string siteName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.FindDomainController(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindDomainController (siteName As String) As DomainController" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::DirectoryServices::ActiveDirectory::DomainController ^ FindDomainController(System::String ^ siteName);" />
      <MemberSignature Language="F#" Value="member this.FindDomainController : string -&gt; System.DirectoryServices.ActiveDirectory.DomainController" Usage="domain.FindDomainController siteName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.ActiveDirectory.DomainController</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="siteName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="siteName">O nome do site no qual pesquisar pelo controlador de domínio.</param>
        <summary>Localiza um controlador de domínio nesse domínio e no site especificado.</summary>
        <returns>Um objeto <see cref="T:System.DirectoryServices.ActiveDirectory.DomainController" /> que representa o controlador de domínio encontrado por este método.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException">Não foi possível localizar um controlador de domínio.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException">Uma chamada ao serviço do diretório subjacente resultou em um erro.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="siteName" /> é uma cadeia de caracteres vazia.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="siteName" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">O objeto foi eliminado.</exception>
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.DomainController" />
      </Docs>
    </Member>
    <Member MemberName="FindDomainController">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.ActiveDirectory.DomainController FindDomainController (string siteName, System.DirectoryServices.ActiveDirectory.LocatorOptions flag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.DirectoryServices.ActiveDirectory.DomainController FindDomainController(string siteName, valuetype System.DirectoryServices.ActiveDirectory.LocatorOptions flag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.FindDomainController(System.String,System.DirectoryServices.ActiveDirectory.LocatorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindDomainController (siteName As String, flag As LocatorOptions) As DomainController" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::DirectoryServices::ActiveDirectory::DomainController ^ FindDomainController(System::String ^ siteName, System::DirectoryServices::ActiveDirectory::LocatorOptions flag);" />
      <MemberSignature Language="F#" Value="member this.FindDomainController : string * System.DirectoryServices.ActiveDirectory.LocatorOptions -&gt; System.DirectoryServices.ActiveDirectory.DomainController" Usage="domain.FindDomainController (siteName, flag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.ActiveDirectory.DomainController</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="siteName" Type="System.String" />
        <Parameter Name="flag" Type="System.DirectoryServices.ActiveDirectory.LocatorOptions" />
      </Parameters>
      <Docs>
        <param name="siteName">O nome do site no qual pesquisar pelo controlador de domínio.</param>
        <param name="flag">Uma combinação de um ou mais dos membros <see cref="T:System.DirectoryServices.ActiveDirectory.LocatorOptions" /> que define o tipo de controlador de domínio a ser localizado.</param>
        <summary>Localiza um controlador de domínio nesse domínio e no site especificado que atenda aos critérios especificados.</summary>
        <returns>Um objeto <see cref="T:System.DirectoryServices.ActiveDirectory.DomainController" /> que representa o controlador de domínio encontrado por este método.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException">Não foi possível localizar um controlador de domínio.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException">Uma chamada ao serviço do diretório subjacente resultou em um erro.</exception>
        <exception cref="T:System.ArgumentException">Essa exceção ocorrerá para qualquer um dos seguintes motivos.  
  
-   <paramref name="siteName" /> é uma cadeia de caracteres vazia.  
  
-   <paramref name="flag" /> contém um valor inválido.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="siteName" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">O objeto foi eliminado.</exception>
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.DomainController" />
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.LocatorOptions" />
      </Docs>
    </Member>
    <Member MemberName="Forest">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.ActiveDirectory.Forest Forest { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.DirectoryServices.ActiveDirectory.Forest Forest" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.ActiveDirectory.Domain.Forest" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Forest As Forest" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::DirectoryServices::ActiveDirectory::Forest ^ Forest { System::DirectoryServices::ActiveDirectory::Forest ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Forest : System.DirectoryServices.ActiveDirectory.Forest" Usage="System.DirectoryServices.ActiveDirectory.Domain.Forest" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.ActiveDirectory.Forest</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém a floresta da qual esse domínio é membro.</summary>
        <value>Um <see cref="T:System.DirectoryServices.ActiveDirectory.Forest" /> que representa a floresta que esse domínio é membro do objeto.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">O objeto foi eliminado.</exception>
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.Forest" />
      </Docs>
    </Member>
    <Member MemberName="GetAllTrustRelationships">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.ActiveDirectory.TrustRelationshipInformationCollection GetAllTrustRelationships ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.DirectoryServices.ActiveDirectory.TrustRelationshipInformationCollection GetAllTrustRelationships() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.GetAllTrustRelationships" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllTrustRelationships () As TrustRelationshipInformationCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::DirectoryServices::ActiveDirectory::TrustRelationshipInformationCollection ^ GetAllTrustRelationships();" />
      <MemberSignature Language="F#" Value="member this.GetAllTrustRelationships : unit -&gt; System.DirectoryServices.ActiveDirectory.TrustRelationshipInformationCollection" Usage="domain.GetAllTrustRelationships " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.ActiveDirectory.TrustRelationshipInformationCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Recupera todas as relações de confiança para este domínio.</summary>
        <returns>Um objeto <see cref="T:System.DirectoryServices.ActiveDirectory.TrustRelationshipInformationCollection" /> que contém todas as relações de confiança para este domínio.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException">Uma chamada ao serviço do diretório subjacente resultou em um erro.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException">O servidor de destino está ocupado ou não disponível.</exception>
        <exception cref="T:System.ObjectDisposedException">O objeto foi eliminado.</exception>
        <exception cref="T:System.UnauthorizedAccessException">A conta especificada não tem permissão para executar essa operação.</exception>
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.TrustRelationshipInformationCollection" />
      </Docs>
    </Member>
    <Member MemberName="GetComputerDomain">
      <MemberSignature Language="C#" Value="public static System.DirectoryServices.ActiveDirectory.Domain GetComputerDomain ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.DirectoryServices.ActiveDirectory.Domain GetComputerDomain() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.GetComputerDomain" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetComputerDomain () As Domain" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::DirectoryServices::ActiveDirectory::Domain ^ GetComputerDomain();" />
      <MemberSignature Language="F#" Value="static member GetComputerDomain : unit -&gt; System.DirectoryServices.ActiveDirectory.Domain" Usage="System.DirectoryServices.ActiveDirectory.Domain.GetComputerDomain " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.ActiveDirectory.Domain</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtém o objeto <see cref="T:System.DirectoryServices.ActiveDirectory.Domain" /> que representa o domínio ao qual o computador local está associado.</summary>
        <returns>Um objeto <see cref="T:System.DirectoryServices.ActiveDirectory.Domain" /> que representa o domínio ao qual o computador local está associado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor de retorno de <xref:System.DirectoryServices.ActiveDirectory.Domain.GetComputerDomain%2A> método é um <xref:System.DirectoryServices.ActiveDirectory.Domain> objeto que representa o domínio ao qual o computador que executa o aplicativo está associado.  Esse valor de retorno é independente das credenciais de domínio sob a qual o aplicativo é executado. Esse método recupera o domínio do computador, independentemente das credenciais de domínio de conta confiável que ele é executado em.  Para recuperar o <xref:System.DirectoryServices.ActiveDirectory.Domain> objeto que representa o domínio correspondente ao usuário as credenciais em vigor para o contexto de segurança sob a qual o aplicativo está em execução, use o <xref:System.DirectoryServices.ActiveDirectory.Domain.GetCurrentDomain%2A> método em vez disso.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException">Uma conexão para o domínio não pôde ser feita.</exception>
        <altmember cref="M:System.DirectoryServices.ActiveDirectory.Domain.GetCurrentDomain" />
      </Docs>
    </Member>
    <Member MemberName="GetCurrentDomain">
      <MemberSignature Language="C#" Value="public static System.DirectoryServices.ActiveDirectory.Domain GetCurrentDomain ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.DirectoryServices.ActiveDirectory.Domain GetCurrentDomain() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.GetCurrentDomain" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCurrentDomain () As Domain" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::DirectoryServices::ActiveDirectory::Domain ^ GetCurrentDomain();" />
      <MemberSignature Language="F#" Value="static member GetCurrentDomain : unit -&gt; System.DirectoryServices.ActiveDirectory.Domain" Usage="System.DirectoryServices.ActiveDirectory.Domain.GetCurrentDomain " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.ActiveDirectory.Domain</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtém o objeto <see cref="T:System.DirectoryServices.ActiveDirectory.Domain" /> para as credenciais do usuário atuais em vigor para o contexto de segurança sob a qual o aplicativo é executado.</summary>
        <returns>O objeto <see cref="T:System.DirectoryServices.ActiveDirectory.Domain" /> que representa o domínio para as credenciais do usuário atuais em vigor para o contexto de segurança sob a qual o aplicativo é executado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DirectoryServices.ActiveDirectory.Domain.GetCurrentDomain%2A> método é determinado pelas credenciais de domínio sob a qual o aplicativo está em execução.  Para recuperar o <xref:System.DirectoryServices.ActiveDirectory.Domain> objeto que representa o domínio ao qual o computador que executa o aplicativo tiver sido adicionado, independentemente das credenciais associadas a esse aplicativo, use o <xref:System.DirectoryServices.ActiveDirectory.Domain.GetComputerDomain%2A> método em vez disso.  
  
## <a name="see-also"></a>Consulte também  
 <xref:System.DirectoryServices.ActiveDirectory.Domain.GetComputerDomain%2A>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException">Uma conexão para o contexto atual não pôde ser feita.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetDirectoryEntry">
      <MemberSignature Language="C#" Value="public override System.DirectoryServices.DirectoryEntry GetDirectoryEntry ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.DirectoryServices.DirectoryEntry GetDirectoryEntry() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.GetDirectoryEntry" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDirectoryEntry () As DirectoryEntry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::DirectoryServices::DirectoryEntry ^ GetDirectoryEntry();" />
      <MemberSignature Language="F#" Value="override this.GetDirectoryEntry : unit -&gt; System.DirectoryServices.DirectoryEntry" Usage="domain.GetDirectoryEntry " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.DirectoryEntry</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Recupera um objeto <see cref="T:System.DirectoryServices.DirectoryEntry" /> que representa o contexto de nomenclatura padrão do domínio.</summary>
        <returns>Um objeto <see cref="T:System.DirectoryServices.DirectoryEntry" /> que representa o domínio.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">O objeto atual foi descartado.</exception>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">Valor de demanda: <see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" /></permission>
        <altmember cref="T:System.DirectoryServices.DirectoryEntry" />
      </Docs>
    </Member>
    <Member MemberName="GetDomain">
      <MemberSignature Language="C#" Value="public static System.DirectoryServices.ActiveDirectory.Domain GetDomain (System.DirectoryServices.ActiveDirectory.DirectoryContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.DirectoryServices.ActiveDirectory.Domain GetDomain(class System.DirectoryServices.ActiveDirectory.DirectoryContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.GetDomain(System.DirectoryServices.ActiveDirectory.DirectoryContext)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDomain (context As DirectoryContext) As Domain" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::DirectoryServices::ActiveDirectory::Domain ^ GetDomain(System::DirectoryServices::ActiveDirectory::DirectoryContext ^ context);" />
      <MemberSignature Language="F#" Value="static member GetDomain : System.DirectoryServices.ActiveDirectory.DirectoryContext -&gt; System.DirectoryServices.ActiveDirectory.Domain" Usage="System.DirectoryServices.ActiveDirectory.Domain.GetDomain context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.ActiveDirectory.Domain</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.DirectoryServices.ActiveDirectory.DirectoryContext" />
      </Parameters>
      <Docs>
        <param name="context">Um objeto <see cref="T:System.DirectoryServices.ActiveDirectory.DirectoryContext" /> que contém o destino e as credenciais a serem usados para recuperar o objeto. O tipo de contexto deve ser um servidor de diretório ou de domínio.</param>
        <summary>Obtém o objeto <see cref="T:System.DirectoryServices.ActiveDirectory.Domain" /> para o contexto especificado.</summary>
        <returns>Um objeto <see cref="T:System.DirectoryServices.ActiveDirectory.Domain" /> que representa o domínio para o contexto especificado.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException">Uma conexão com o destino especificado em <paramref name="context" /> não pôde ser realizada.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="context" /> não é válido.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="context" /> é <see langword="null" />.</exception>
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.DirectoryContext" />
      </Docs>
    </Member>
    <Member MemberName="GetSelectiveAuthenticationStatus">
      <MemberSignature Language="C#" Value="public bool GetSelectiveAuthenticationStatus (string targetDomainName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetSelectiveAuthenticationStatus(string targetDomainName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.GetSelectiveAuthenticationStatus(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSelectiveAuthenticationStatus (targetDomainName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetSelectiveAuthenticationStatus(System::String ^ targetDomainName);" />
      <MemberSignature Language="F#" Value="member this.GetSelectiveAuthenticationStatus : string -&gt; bool" Usage="domain.GetSelectiveAuthenticationStatus targetDomainName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetDomainName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetDomainName">O nome DNS do domínio com o qual a relação de confiança existe.</param>
        <summary>Determina o tipo de autenticação de uma relação de confiança de entrada.</summary>
        <returns><see langword="true" /> se a autenticação da relação de confiança for seletiva, <see langword="false" /> se a autenticação abranger todo o domínio.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException">Não há nenhuma relação de confiança com o <see cref="T:System.DirectoryServices.ActiveDirectory.Forest" /> especificado pelo parâmetro <paramref name="targetForestName" />.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException">Falha na chamada para <c>LsaQueryTrustedDomainInfoByName</c>. Para obter mais informações, confira <see href="/windows/desktop/api/ntsecapi/nf-ntsecapi-lsaquerytrusteddomaininfobyname">LsaQueryTrustedDomainInfoByName</see>.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException">O servidor de destino está ocupado ou não disponível.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="targetDomainName" /> é uma cadeia de caracteres vazia.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="targetDomainName" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">O objeto atual foi descartado.</exception>
        <exception cref="T:System.UnauthorizedAccessException">A conta especificada não tem permissão para executar essa operação.</exception>
        <altmember cref="M:System.DirectoryServices.ActiveDirectory.Domain.SetSelectiveAuthenticationStatus(System.String,System.Boolean)" />
        <related type="Article" href="https://msdn.microsoft.com/library/e1df3378-17b0-4429-91c7-13d4a457fb6e">Como: Trabalhar com relações de confiança</related>
      </Docs>
    </Member>
    <Member MemberName="GetSidFilteringStatus">
      <MemberSignature Language="C#" Value="public bool GetSidFilteringStatus (string targetDomainName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetSidFilteringStatus(string targetDomainName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.GetSidFilteringStatus(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSidFilteringStatus (targetDomainName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetSidFilteringStatus(System::String ^ targetDomainName);" />
      <MemberSignature Language="F#" Value="member this.GetSidFilteringStatus : string -&gt; bool" Usage="domain.GetSidFilteringStatus targetDomainName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetDomainName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetDomainName">O nome DNS do domínio com o qual a relação de confiança existe.</param>
        <summary>Determina o status de filtragem SID de uma relação de confiança.</summary>
        <returns><see langword="true" /> se a filtragem SID estiver habilitada, caso contrário, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException">Não há nenhuma relação de confiança com o <see cref="T:System.DirectoryServices.ActiveDirectory.Forest" /> especificado pelo parâmetro <paramref name="targetForestName" />.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException">Uma chamada ao serviço do diretório subjacente resultou em um erro.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException">O servidor de destino está ocupado ou não disponível.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="targetDomainName" /> é uma cadeia de caracteres vazia.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="targetDomainName" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">O objeto atual foi descartado.</exception>
        <exception cref="T:System.UnauthorizedAccessException">A conta especificada não tem permissão para executar essa operação.</exception>
        <altmember cref="M:System.DirectoryServices.ActiveDirectory.Domain.SetSidFilteringStatus(System.String,System.Boolean)" />
        <related type="Article" href="https://msdn.microsoft.com/library/e1df3378-17b0-4429-91c7-13d4a457fb6e">Como: Trabalhar com relações de confiança</related>
      </Docs>
    </Member>
    <Member MemberName="GetTrustRelationship">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation GetTrustRelationship (string targetDomainName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation GetTrustRelationship(string targetDomainName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.GetTrustRelationship(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTrustRelationship (targetDomainName As String) As TrustRelationshipInformation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::DirectoryServices::ActiveDirectory::TrustRelationshipInformation ^ GetTrustRelationship(System::String ^ targetDomainName);" />
      <MemberSignature Language="F#" Value="member this.GetTrustRelationship : string -&gt; System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation" Usage="domain.GetTrustRelationship targetDomainName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetDomainName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetDomainName">O nome DNS do domínio com o qual a relação de confiança existe.</param>
        <summary>Obtém a relação de confiança entre este domínio e o domínio especificado.</summary>
        <returns>Um objeto <see cref="T:System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation" /> que representa a relação de confiança entre este domínio e o domínio especificado.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException">Não há nenhuma relação de confiança com o <see cref="T:System.DirectoryServices.ActiveDirectory.Forest" /> especificado pelo parâmetro <paramref name="targetForestName" />.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException">Uma chamada ao serviço do diretório subjacente resultou em um erro.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException">O servidor de destino está ocupado ou não disponível.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="targetDomainName" /> é uma cadeia de caracteres vazia.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="targetDomainName" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">O objeto atual foi descartado.</exception>
        <exception cref="T:System.UnauthorizedAccessException">A conta especificada não tem permissão para executar essa operação.</exception>
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation" />
      </Docs>
    </Member>
    <Member MemberName="InfrastructureRoleOwner">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.ActiveDirectory.DomainController InfrastructureRoleOwner { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.DirectoryServices.ActiveDirectory.DomainController InfrastructureRoleOwner" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.ActiveDirectory.Domain.InfrastructureRoleOwner" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InfrastructureRoleOwner As DomainController" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::DirectoryServices::ActiveDirectory::DomainController ^ InfrastructureRoleOwner { System::DirectoryServices::ActiveDirectory::DomainController ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InfrastructureRoleOwner : System.DirectoryServices.ActiveDirectory.DomainController" Usage="System.DirectoryServices.ActiveDirectory.Domain.InfrastructureRoleOwner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.ActiveDirectory.DomainController</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o proprietário da função de infraestrutura para este domínio.</summary>
        <value>Um <see cref="T:System.DirectoryServices.ActiveDirectory.DomainController" /> objeto que representa o controlador de domínio que detém a função de proprietário de infraestrutura.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">O objeto foi eliminado.</exception>
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.DomainController" />
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.ActiveDirectory.Domain Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.DirectoryServices.ActiveDirectory.Domain Parent" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.ActiveDirectory.Domain.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As Domain" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::DirectoryServices::ActiveDirectory::Domain ^ Parent { System::DirectoryServices::ActiveDirectory::Domain ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.DirectoryServices.ActiveDirectory.Domain" Usage="System.DirectoryServices.ActiveDirectory.Domain.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.ActiveDirectory.Domain</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o domínio pai deste domínio.</summary>
        <value>Um <see cref="T:System.DirectoryServices.ActiveDirectory.Domain" /> objeto que representa o domínio pai deste domínio. <see langword="null" /> Se esse domínio não possui nenhum domínio pai.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">O objeto foi eliminado.</exception>
      </Docs>
    </Member>
    <Member MemberName="PdcRoleOwner">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.ActiveDirectory.DomainController PdcRoleOwner { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.DirectoryServices.ActiveDirectory.DomainController PdcRoleOwner" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.ActiveDirectory.Domain.PdcRoleOwner" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PdcRoleOwner As DomainController" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::DirectoryServices::ActiveDirectory::DomainController ^ PdcRoleOwner { System::DirectoryServices::ActiveDirectory::DomainController ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PdcRoleOwner : System.DirectoryServices.ActiveDirectory.DomainController" Usage="System.DirectoryServices.ActiveDirectory.Domain.PdcRoleOwner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.ActiveDirectory.DomainController</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o objeto <see cref="T:System.DirectoryServices.ActiveDirectory.DomainController" /> que contém o PDC (controlador de domínio primário) para este domínio.</summary>
        <value>Um <see cref="T:System.DirectoryServices.ActiveDirectory.DomainController" /> objeto que representa o controlador de domínio que detém a função de emulador PDC para este domínio.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">O objeto foi eliminado.</exception>
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.DomainController" />
      </Docs>
    </Member>
    <Member MemberName="RaiseDomainFunctionality">
      <MemberSignature Language="C#" Value="public void RaiseDomainFunctionality (System.DirectoryServices.ActiveDirectory.DomainMode domainMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RaiseDomainFunctionality(valuetype System.DirectoryServices.ActiveDirectory.DomainMode domainMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.RaiseDomainFunctionality(System.DirectoryServices.ActiveDirectory.DomainMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RaiseDomainFunctionality(System::DirectoryServices::ActiveDirectory::DomainMode domainMode);" />
      <MemberSignature Language="F#" Value="member this.RaiseDomainFunctionality : System.DirectoryServices.ActiveDirectory.DomainMode -&gt; unit" Usage="domain.RaiseDomainFunctionality domainMode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="domainMode" Type="System.DirectoryServices.ActiveDirectory.DomainMode" />
      </Parameters>
      <Docs>
        <param name="domainMode">Um valor da enumeração <see cref="T:System.DirectoryServices.ActiveDirectory.DomainMode" /> que especifica o novo nível de operação do domínio.</param>
        <summary>Gera o modo de operação para o domínio.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DirectoryServices.ActiveDirectory.DomainMode> valor pode ser gerado, mas não reduzida. Isso significa que não é reversível elevar o nível de funcionalidade do domínio e a decisão de fazer isso deve ser feita com cuidado.  
  
 Para obter mais informações sobre os modos operacionais do domínio, consulte [funcionalidade de domínio e floresta](https://www.microsoft.com/resources/documentation/WindowsServ/2003/standard/proddocs/en-us/sag_levels.asp).  
  
 A tabela a seguir define os valores válidos para `domainMode` com base no modo de operação atual do domínio.  
  
|Modo atual|Modo pode ser aumentado para o|  
|------------------|---------------------------|  
|<xref:System.DirectoryServices.ActiveDirectory.DomainMode.Windows2000MixedDomain>|<xref:System.DirectoryServices.ActiveDirectory.DomainMode.Windows2000NativeDomain><br /><br /> <xref:System.DirectoryServices.ActiveDirectory.DomainMode.Windows2003InterimDomain><br /><br /> <xref:System.DirectoryServices.ActiveDirectory.DomainMode.Windows2003Domain>|  
|<xref:System.DirectoryServices.ActiveDirectory.DomainMode.Windows2000NativeDomain>|<xref:System.DirectoryServices.ActiveDirectory.DomainMode.Windows2003Domain>|  
|<xref:System.DirectoryServices.ActiveDirectory.DomainMode.Windows2003InterimDomain>|<xref:System.DirectoryServices.ActiveDirectory.DomainMode.Windows2003Domain>|  
|<xref:System.DirectoryServices.ActiveDirectory.DomainMode.Windows2003Domain>|Nenhum|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException">Uma chamada ao serviço do diretório subjacente resultou em um erro.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException">O servidor de destino está ocupado ou não disponível.</exception>
        <exception cref="T:System.ArgumentException">Com base no modo de operação atual do domínio, o valor especificado para <paramref name="domainMode" /> não é válido.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="domainMode" /> não é um valor de enumeração <see cref="T:System.DirectoryServices.ActiveDirectory.DomainMode" /> válido.</exception>
        <exception cref="T:System.ObjectDisposedException">O objeto foi eliminado.</exception>
        <exception cref="T:System.UnauthorizedAccessException">A conta especificada não tem permissão para executar essa operação.</exception>
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.DomainMode" />
      </Docs>
    </Member>
    <Member MemberName="RaiseDomainFunctionalityLevel">
      <MemberSignature Language="C#" Value="public void RaiseDomainFunctionalityLevel (int domainMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RaiseDomainFunctionalityLevel(int32 domainMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.RaiseDomainFunctionalityLevel(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RaiseDomainFunctionalityLevel (domainMode As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RaiseDomainFunctionalityLevel(int domainMode);" />
      <MemberSignature Language="F#" Value="member this.RaiseDomainFunctionalityLevel : int -&gt; unit" Usage="domain.RaiseDomainFunctionalityLevel domainMode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="domainMode" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="domainMode">Um valor que representa o novo nível.</param>
        <summary>Aumenta o nível de funcionalidade para o domínio.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RepairTrustRelationship">
      <MemberSignature Language="C#" Value="public void RepairTrustRelationship (System.DirectoryServices.ActiveDirectory.Domain targetDomain);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RepairTrustRelationship(class System.DirectoryServices.ActiveDirectory.Domain targetDomain) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.RepairTrustRelationship(System.DirectoryServices.ActiveDirectory.Domain)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RepairTrustRelationship (targetDomain As Domain)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RepairTrustRelationship(System::DirectoryServices::ActiveDirectory::Domain ^ targetDomain);" />
      <MemberSignature Language="F#" Value="member this.RepairTrustRelationship : System.DirectoryServices.ActiveDirectory.Domain -&gt; unit" Usage="domain.RepairTrustRelationship targetDomain" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetDomain" Type="System.DirectoryServices.ActiveDirectory.Domain" />
      </Parameters>
      <Docs>
        <param name="targetDomain">Um objeto <see cref="T:System.DirectoryServices.ActiveDirectory.Domain" /> que representa o domínio com o qual a relação de confiança existe.</param>
        <summary>Repara uma relação de confiança.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método repara a relação de confiança, redefinir o canal seguro para a relação de confiança. Se a operação falhar redefinir o canal seguro, em seguida, também redefinirá a senha de confiança.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException">Não há nenhuma relação de confiança com o <see cref="T:System.DirectoryServices.ActiveDirectory.Domain" /> especificado por <paramref name="targetDomain" />.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException">Uma chamada ao serviço do diretório subjacente resultou em um erro.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException">O servidor de destino ou de origem está ocupado ou não disponível.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="targetDomain" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">O objeto foi eliminado.</exception>
        <exception cref="T:System.UnauthorizedAccessException">A conta especificada não tem permissão para executar essa operação.</exception>
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.Domain" />
      </Docs>
    </Member>
    <Member MemberName="RidRoleOwner">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.ActiveDirectory.DomainController RidRoleOwner { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.DirectoryServices.ActiveDirectory.DomainController RidRoleOwner" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.ActiveDirectory.Domain.RidRoleOwner" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RidRoleOwner As DomainController" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::DirectoryServices::ActiveDirectory::DomainController ^ RidRoleOwner { System::DirectoryServices::ActiveDirectory::DomainController ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RidRoleOwner : System.DirectoryServices.ActiveDirectory.DomainController" Usage="System.DirectoryServices.ActiveDirectory.Domain.RidRoleOwner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.ActiveDirectory.DomainController</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o detentor da função de mestre de RID para este domínio.</summary>
        <value>Um <see cref="T:System.DirectoryServices.ActiveDirectory.DomainController" /> objeto que representa o controlador de domínio que detém a função de mestre de RID (identificador relativo) para este domínio.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">O objeto foi eliminado.</exception>
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.DomainController" />
      </Docs>
    </Member>
    <Member MemberName="SetSelectiveAuthenticationStatus">
      <MemberSignature Language="C#" Value="public void SetSelectiveAuthenticationStatus (string targetDomainName, bool enable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSelectiveAuthenticationStatus(string targetDomainName, bool enable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.SetSelectiveAuthenticationStatus(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSelectiveAuthenticationStatus (targetDomainName As String, enable As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetSelectiveAuthenticationStatus(System::String ^ targetDomainName, bool enable);" />
      <MemberSignature Language="F#" Value="member this.SetSelectiveAuthenticationStatus : string * bool -&gt; unit" Usage="domain.SetSelectiveAuthenticationStatus (targetDomainName, enable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetDomainName" Type="System.String" />
        <Parameter Name="enable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="targetDomainName">O nome DNS do domínio com o qual a relação de confiança de entrada existe.</param>
        <param name="enable"><see langword="true" /> se a autenticação seletiva estiver habilitada, caso contrário, <see langword="false" />.</param>
        <summary>Habilita ou desabilita a autenticação seletiva para uma relação de confiança de entrada.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException">Não há nenhuma relação de confiança com o controlador de domínio especificado pelo <paramref name="targetDomainName" />.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException">Uma chamada ao serviço do diretório subjacente resultou em um erro.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException">O servidor de destino está ocupado ou não disponível.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="targetDomainName" /> é uma cadeia de caracteres vazia.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="targetDomainName" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">O objeto atual foi descartado.</exception>
        <exception cref="T:System.UnauthorizedAccessException">A conta especificada não tem permissão para executar essa operação.</exception>
        <altmember cref="M:System.DirectoryServices.ActiveDirectory.Domain.GetSelectiveAuthenticationStatus(System.String)" />
        <related type="Article" href="https://msdn.microsoft.com/library/e1df3378-17b0-4429-91c7-13d4a457fb6e">Como: Trabalhar com relações de confiança</related>
      </Docs>
    </Member>
    <Member MemberName="SetSidFilteringStatus">
      <MemberSignature Language="C#" Value="public void SetSidFilteringStatus (string targetDomainName, bool enable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSidFilteringStatus(string targetDomainName, bool enable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.SetSidFilteringStatus(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSidFilteringStatus (targetDomainName As String, enable As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetSidFilteringStatus(System::String ^ targetDomainName, bool enable);" />
      <MemberSignature Language="F#" Value="member this.SetSidFilteringStatus : string * bool -&gt; unit" Usage="domain.SetSidFilteringStatus (targetDomainName, enable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetDomainName" Type="System.String" />
        <Parameter Name="enable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="targetDomainName">O nome DNS do domínio com o qual a relação de confiança existe.</param>
        <param name="enable"><see langword="true" /> se a filtragem de SID deve ser habilitada, caso contrário, <see langword="false" />.</param>
        <summary>Define o estado de filtragem de SID para o domínio especificado.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException">Não há nenhuma relação de confiança com o domínio especificado pelo <paramref name="targetDomainName" />.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException">Uma chamada ao serviço do diretório subjacente resultou em um erro.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException">O servidor de destino está ocupado ou não disponível.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="targetDomainName" /> é uma cadeia de caracteres vazia.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="targetDomainName" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">O objeto atual foi descartado.</exception>
        <altmember cref="M:System.DirectoryServices.ActiveDirectory.Domain.GetSidFilteringStatus(System.String)" />
        <related type="Article" href="https://msdn.microsoft.com/library/e1df3378-17b0-4429-91c7-13d4a457fb6e">Como: Trabalhar com relações de confiança</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="UpdateLocalSideOfTrustRelationship">
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Atualiza o lado local de uma relação de confiança.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UpdateLocalSideOfTrustRelationship">
      <MemberSignature Language="C#" Value="public void UpdateLocalSideOfTrustRelationship (string targetDomainName, string newTrustPassword);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateLocalSideOfTrustRelationship(string targetDomainName, string newTrustPassword) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.UpdateLocalSideOfTrustRelationship(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateLocalSideOfTrustRelationship (targetDomainName As String, newTrustPassword As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateLocalSideOfTrustRelationship(System::String ^ targetDomainName, System::String ^ newTrustPassword);" />
      <MemberSignature Language="F#" Value="member this.UpdateLocalSideOfTrustRelationship : string * string -&gt; unit" Usage="domain.UpdateLocalSideOfTrustRelationship (targetDomainName, newTrustPassword)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetDomainName" Type="System.String" />
        <Parameter Name="newTrustPassword" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetDomainName">O nome DNS do domínio com o qual uma relação de confiança existe.</param>
        <param name="newTrustPassword">A senha da nova relação de confiança.</param>
        <summary>Atualiza a senha para o lado local de uma relação de confiança.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para restabelecer a relação de confiança, ambos os lados da relação de confiança devem ser atualizados com a mesma senha.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException">Não há nenhuma relação de confiança com o domínio especificado pelo <paramref name="targetDomainName" />.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException">Uma chamada ao serviço do diretório subjacente resultou em um erro.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException">O servidor de destino está ocupado ou não disponível.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="targetDomainName" /> ou <paramref name="newTrustPassword" /> é uma cadeia de caracteres vazia.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="targetDomainName" /> ou <paramref name="newTrustPassword" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">O objeto foi eliminado.</exception>
        <exception cref="T:System.UnauthorizedAccessException">A conta especificada não tem permissão para executar essa operação.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/e1df3378-17b0-4429-91c7-13d4a457fb6e">Como: Trabalhar com relações de confiança</related>
      </Docs>
    </Member>
    <Member MemberName="UpdateLocalSideOfTrustRelationship">
      <MemberSignature Language="C#" Value="public void UpdateLocalSideOfTrustRelationship (string targetDomainName, System.DirectoryServices.ActiveDirectory.TrustDirection newTrustDirection, string newTrustPassword);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateLocalSideOfTrustRelationship(string targetDomainName, valuetype System.DirectoryServices.ActiveDirectory.TrustDirection newTrustDirection, string newTrustPassword) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.UpdateLocalSideOfTrustRelationship(System.String,System.DirectoryServices.ActiveDirectory.TrustDirection,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateLocalSideOfTrustRelationship (targetDomainName As String, newTrustDirection As TrustDirection, newTrustPassword As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateLocalSideOfTrustRelationship(System::String ^ targetDomainName, System::DirectoryServices::ActiveDirectory::TrustDirection newTrustDirection, System::String ^ newTrustPassword);" />
      <MemberSignature Language="F#" Value="member this.UpdateLocalSideOfTrustRelationship : string * System.DirectoryServices.ActiveDirectory.TrustDirection * string -&gt; unit" Usage="domain.UpdateLocalSideOfTrustRelationship (targetDomainName, newTrustDirection, newTrustPassword)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetDomainName" Type="System.String" />
        <Parameter Name="newTrustDirection" Type="System.DirectoryServices.ActiveDirectory.TrustDirection" />
        <Parameter Name="newTrustPassword" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetDomainName">O nome DNS do domínio com o qual uma relação de confiança existe.</param>
        <param name="newTrustDirection">Um valor <see cref="T:System.DirectoryServices.ActiveDirectory.TrustDirection" /> para a nova direção de confiança para a relação de confiança.</param>
        <param name="newTrustPassword">A senha da nova relação de confiança.</param>
        <summary>Atualiza a senha e a direção de confiança para o lado local de uma relação de confiança.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException">Não há nenhuma relação de confiança com o domínio especificado pelo parâmetro <paramref name="targetDomainName" />.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException">Uma chamada ao serviço do diretório subjacente resultou em um erro.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException">O servidor de destino está ocupado ou não disponível.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="targetDomainName" /> ou <paramref name="newTrustPassword" /> é uma cadeia de caracteres vazia.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="targetDomainName" /> ou <paramref name="newTrustPassword" /> são <see langword="null" />.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="newTrustDirection" /> não é um valor <see cref="T:System.DirectoryServices.ActiveDirectory.TrustDirection" /> válido.</exception>
        <exception cref="T:System.ObjectDisposedException">O objeto foi eliminado.</exception>
        <exception cref="T:System.UnauthorizedAccessException">A conta especificada não tem permissão para executar essa operação.</exception>
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.TrustDirection" />
        <related type="Article" href="https://msdn.microsoft.com/library/e1df3378-17b0-4429-91c7-13d4a457fb6e">Como: Trabalhar com relações de confiança</related>
      </Docs>
    </Member>
    <Member MemberName="UpdateTrustRelationship">
      <MemberSignature Language="C#" Value="public void UpdateTrustRelationship (System.DirectoryServices.ActiveDirectory.Domain targetDomain, System.DirectoryServices.ActiveDirectory.TrustDirection newTrustDirection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateTrustRelationship(class System.DirectoryServices.ActiveDirectory.Domain targetDomain, valuetype System.DirectoryServices.ActiveDirectory.TrustDirection newTrustDirection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.UpdateTrustRelationship(System.DirectoryServices.ActiveDirectory.Domain,System.DirectoryServices.ActiveDirectory.TrustDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateTrustRelationship (targetDomain As Domain, newTrustDirection As TrustDirection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateTrustRelationship(System::DirectoryServices::ActiveDirectory::Domain ^ targetDomain, System::DirectoryServices::ActiveDirectory::TrustDirection newTrustDirection);" />
      <MemberSignature Language="F#" Value="member this.UpdateTrustRelationship : System.DirectoryServices.ActiveDirectory.Domain * System.DirectoryServices.ActiveDirectory.TrustDirection -&gt; unit" Usage="domain.UpdateTrustRelationship (targetDomain, newTrustDirection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetDomain" Type="System.DirectoryServices.ActiveDirectory.Domain" />
        <Parameter Name="newTrustDirection" Type="System.DirectoryServices.ActiveDirectory.TrustDirection" />
      </Parameters>
      <Docs>
        <param name="targetDomain">Um objeto <see cref="T:System.DirectoryServices.ActiveDirectory.Domain" /> que representa o domínio com o qual a relação de confiança existe.</param>
        <param name="newTrustDirection">Um valor <see cref="T:System.DirectoryServices.ActiveDirectory.TrustDirection" /> que especifica a nova direção de confiança para a relação de confiança.</param>
        <summary>Atualiza a direção de confiança para uma relação de confiança existente. As orientações de confiança são atualizadas nos dois lados da relação de confiança.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException">Não há nenhuma relação de confiança com o domínio especificado pelo parâmetro <paramref name="targetDomain" />.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException">Uma chamada ao serviço do diretório subjacente resultou em um erro.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException">O servidor de destino está ocupado ou não disponível.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="targetDomain" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="newTrustDirection" /> não é um valor <see cref="T:System.DirectoryServices.ActiveDirectory.TrustDirection" /> válido.</exception>
        <exception cref="T:System.ObjectDisposedException">O objeto foi eliminado.</exception>
        <exception cref="T:System.UnauthorizedAccessException">A conta especificada não tem permissão para executar essa operação.</exception>
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.TrustDirection" />
        <related type="Article" href="https://msdn.microsoft.com/library/e1df3378-17b0-4429-91c7-13d4a457fb6e">Como: Trabalhar com relações de confiança</related>
      </Docs>
    </Member>
    <Member MemberName="VerifyOutboundTrustRelationship">
      <MemberSignature Language="C#" Value="public void VerifyOutboundTrustRelationship (string targetDomainName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void VerifyOutboundTrustRelationship(string targetDomainName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.VerifyOutboundTrustRelationship(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub VerifyOutboundTrustRelationship (targetDomainName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void VerifyOutboundTrustRelationship(System::String ^ targetDomainName);" />
      <MemberSignature Language="F#" Value="member this.VerifyOutboundTrustRelationship : string -&gt; unit" Usage="domain.VerifyOutboundTrustRelationship targetDomainName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetDomainName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetDomainName">O nome DNS do domínio com o qual a relação de confiança existe.</param>
        <summary>Verifica se uma relação de confiança de saída estabelecida anteriormente com o domínio especificado é válida.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método é usado para verificar se uma relação de confiança foi estabelecida totalmente. A relação de confiança não é estabelecida até que ambos os lados da relação de confiança foram criados.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException">Não há nenhuma relação de confiança de saída com o domínio especificado pelo <paramref name="targetDomainName" />.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException">Uma chamada ao serviço do diretório subjacente resultou em um erro.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException">O servidor de destino está ocupado ou não disponível.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="targetDomainName" /> é uma cadeia de caracteres vazia.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="targetDomainName" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">O objeto foi eliminado.</exception>
        <exception cref="T:System.UnauthorizedAccessException">A conta especificada não tem permissão para executar essa operação.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/e1df3378-17b0-4429-91c7-13d4a457fb6e">Como: Trabalhar com relações de confiança</related>
      </Docs>
    </Member>
    <Member MemberName="VerifyTrustRelationship">
      <MemberSignature Language="C#" Value="public void VerifyTrustRelationship (System.DirectoryServices.ActiveDirectory.Domain targetDomain, System.DirectoryServices.ActiveDirectory.TrustDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void VerifyTrustRelationship(class System.DirectoryServices.ActiveDirectory.Domain targetDomain, valuetype System.DirectoryServices.ActiveDirectory.TrustDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.VerifyTrustRelationship(System.DirectoryServices.ActiveDirectory.Domain,System.DirectoryServices.ActiveDirectory.TrustDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub VerifyTrustRelationship (targetDomain As Domain, direction As TrustDirection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void VerifyTrustRelationship(System::DirectoryServices::ActiveDirectory::Domain ^ targetDomain, System::DirectoryServices::ActiveDirectory::TrustDirection direction);" />
      <MemberSignature Language="F#" Value="member this.VerifyTrustRelationship : System.DirectoryServices.ActiveDirectory.Domain * System.DirectoryServices.ActiveDirectory.TrustDirection -&gt; unit" Usage="domain.VerifyTrustRelationship (targetDomain, direction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetDomain" Type="System.DirectoryServices.ActiveDirectory.Domain" />
        <Parameter Name="direction" Type="System.DirectoryServices.ActiveDirectory.TrustDirection" />
      </Parameters>
      <Docs>
        <param name="targetDomain">Um objeto <see cref="T:System.DirectoryServices.ActiveDirectory.Domain" /> que representa o domínio com o qual a relação de confiança existe.</param>
        <param name="direction">Um valor <see cref="T:System.DirectoryServices.ActiveDirectory.TrustDirection" /> que especifica a direção, relativa a esse domínio, da confiança.</param>
        <summary>Verifica se uma relação de confiança estabelecida anteriormente com o domínio especificado é válida.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método verifica se uma relação de confiança foi totalmente estabelecida. A relação de confiança não é estabelecida até que ambos os lados da relação de confiança foram criados.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException">Não há nenhuma relação de confiança com o domínio que é especificado pelo parâmetro <paramref name="targetDomain" /> ou o domínio de destino não tem a direção da confiança especificada pelo parâmetro <paramref name="direction" />.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException">Uma chamada ao serviço do diretório subjacente resultou em um erro.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException">O servidor de destino está ocupado ou não disponível.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="targetDomain" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="direction" /> não é um valor <see cref="T:System.DirectoryServices.ActiveDirectory.TrustDirection" /> válido.</exception>
        <exception cref="T:System.ObjectDisposedException">O objeto foi eliminado.</exception>
        <exception cref="T:System.UnauthorizedAccessException">A conta especificada não tem permissão para executar essa operação.</exception>
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.TrustDirection" />
        <related type="Article" href="https://msdn.microsoft.com/library/e1df3378-17b0-4429-91c7-13d4a457fb6e">Como: Trabalhar com relações de confiança</related>
      </Docs>
    </Member>
  </Members>
</Type>