<Type Name="TextElementCollection&lt;TextElementType&gt;" FullName="System.Windows.Documents.TextElementCollection&lt;TextElementType&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c648cec9763845c68c51f26f0151586fba114f9c" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TextElementCollection&lt;TextElementType&gt; : System.Collections.Generic.ICollection&lt;TextElementType&gt;, System.Collections.Generic.IEnumerable&lt;TextElementType&gt;, System.Collections.IList where TextElementType : TextElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TextElementCollection`1&lt;(class System.Windows.Documents.TextElement) TextElementType&gt; extends System.Object implements class System.Collections.Generic.ICollection`1&lt;!TextElementType&gt;, class System.Collections.Generic.IEnumerable`1&lt;!TextElementType&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Documents.TextElementCollection`1" />
  <TypeSignature Language="VB.NET" Value="Public Class TextElementCollection(Of TextElementType)&#xA;Implements ICollection(Of TextElementType), IEnumerable(Of TextElementType), IList" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TextElementType&gt;&#xA; where TextElementType : TextElementpublic ref class TextElementCollection : System::Collections::Generic::ICollection&lt;TextElementType&gt;, System::Collections::Generic::IEnumerable&lt;TextElementType&gt;, System::Collections::IList" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TextElementType">
      <Constraints>
        <BaseTypeName>System.Windows.Documents.TextElement</BaseTypeName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;TextElementType&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;TextElementType&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TextElementType">
      <span data-ttu-id="07df7-101">Especificador de tipo para a coleção genérica.</span>
      <span class="sxs-lookup">
        <span data-stu-id="07df7-101">Type specifier for the generic collection.</span>
      </span>
      <span data-ttu-id="07df7-102">Tipos aceitáveis são restritas a um tipo de <see cref="T:System.Windows.Documents.TextElement" /> ou um descendente de <see cref="T:System.Windows.Documents.TextElement" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="07df7-102">Acceptable types are constrained to a type of <see cref="T:System.Windows.Documents.TextElement" /> or a descendant of <see cref="T:System.Windows.Documents.TextElement" />.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="07df7-103">Fornece recursos padrão para criar e gerenciar uma coleção fortemente tipada e ordenada de objetos <see cref="T:System.Windows.Documents.TextElement" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="07df7-103">Provides standard facilities for creating and managing a type-safe, ordered collection of <see cref="T:System.Windows.Documents.TextElement" /> objects.</span>
      </span>
      <span data-ttu-id="07df7-104">Esta é uma coleção genérica para trabalhar com objetos de um tipo especificado que deriva de <see cref="T:System.Windows.Documents.TextElement" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="07df7-104">This is a generic collection for working with objects of a specified type that derives from <see cref="T:System.Windows.Documents.TextElement" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07df7-105">Esta coleção dá suporte à indexação de base zero.</span><span class="sxs-lookup"><span data-stu-id="07df7-105">This collection supports zero-based indexing.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Documents.TableCellCollection" />
    <altmember cref="T:System.Windows.Documents.TableColumnCollection" />
    <altmember cref="T:System.Windows.Documents.TableRowCollection" />
    <altmember cref="T:System.Windows.Documents.TableRowGroupCollection" />
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (TextElementType item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(!TextElementType item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextElementCollection`1.Add(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (item As TextElementType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Add(TextElementType item);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="TextElementType" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="07df7-106">Um item a ser acrescentado à coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-106">An item to append to the collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07df7-107">Acrescenta um item especificado à coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-107">Appends a specified item to the collection.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="07df7-108">Gerado quando o *item* já pertence a uma coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-108">Raised when *item* already belongs to a collection.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="07df7-109">Gerado quando *item* é **nulo**.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-109">Raised when *item* is **null**.</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.Documents.TextElementCollection`1.AddRange(System.Collections.IEnumerable)" />
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (System.Collections.IEnumerable range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(class System.Collections.IEnumerable range) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextElementCollection`1.AddRange(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRange (range As IEnumerable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRange(System::Collections::IEnumerable ^ range);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="range">
          <span data-ttu-id="07df7-110">Um objeto que implementa a interface de <see cref="T:System.Collections.IEnumerable" /> e que especifica um intervalo de itens a serem adicionados à coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-110">An object that implements the <see cref="T:System.Collections.IEnumerable" /> interface, and that specifies a range of items to add to the collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07df7-111">Acrescenta um intervalo de itens especificado à coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-111">Appends a specified range of items to the collection.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="07df7-112">Gerado quando *intervalo* inclui qualquer item **nulo**.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-112">Raised when *range* includes any **null** items.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="07df7-113">Gerado quando *intervalo* é **nulo**.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-113">Raised when *range* is **null**.</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.Documents.TextElementCollection`1.Add(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextElementCollection`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="07df7-114">Limpa todos os itens da coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-114">Clears all items from the collection.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (TextElementType item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(!TextElementType item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextElementCollection`1.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (item As TextElementType) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(TextElementType item);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Contains(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="TextElementType" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="07df7-115">Um item cuja presença será consultada na coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-115">An item to query for the presence of in the collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07df7-116">Consulta a presença de um item especificado na coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-116">Queries for the presence of a specified item in the collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07df7-117">**true** se o *item* especificado estiver presente na coleção; caso contrário, **false**.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-117">**true** if the specified *item* is present in the collection; otherwise, **false**.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (TextElementType[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(!TextElementType[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextElementCollection`1.CopyTo(`0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As TextElementType(), arrayIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(cli::array &lt;TextElementType&gt; ^ array, int arrayIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="TextElementType[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="07df7-118">Uma matriz unidimensional para a qual o conteúdo da coleção será copiado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-118">A one-dimensional array to which the collection contents will be copied.</span>
          </span>
          <span data-ttu-id="07df7-119">Esta matriz deve usar a indexação de base zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-119">This array must use zero-based indexing.</span>
          </span>
        </param>
        <param name="arrayIndex">
          <span data-ttu-id="07df7-120">Um índice de base zero na <c>matriz</c> que especifica a posição na qual começar a inserir os objetos da coleção copiados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-120">A zero-based index in <c>array</c> specifying the position at which to begin inserting the copied collection objects.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07df7-121">Copia o conteúdo da coleção e insere-o em uma matriz especificada começando em uma posição de índice especificada na matriz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-121">Copies the contents of the collection and inserts them into a specified array starting at a specified index position in the array.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="07df7-122">Gerado quando *array* inclui itens não compatíveis com o tipo <see cref="T:System.Windows.Documents.TextElement" /> ou se *arrayIndex* especificar uma posição que está fora dos limites de *array*.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-122">Raised when *array* includes items that are not compatible with the type <see cref="T:System.Windows.Documents.TextElement" />, or if *arrayIndex* specifies a position that falls outside of the bounds of *array*.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="07df7-123">Gerado quando *array* é **nulo**.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-123">Raised when *array* is **null**.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="07df7-124">Gerado quando *arrayIndex* é menor que **0**.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-124">Raised when *arrayIndex* is less than **0**.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextElementCollection`1.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="07df7-125">Obtém o número de itens atualmente na coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-125">Gets the number of items currently in the collection.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="07df7-126">O número de itens atualmente na coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-126">The number of items currently in the collection.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;TextElementType&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!TextElementType&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextElementCollection`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of TextElementType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerator&lt;TextElementType&gt; ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;TextElementType&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="07df7-127">Retorna um enumerador dos conteúdos da coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-127">Returns an enumerator for the contents of the collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07df7-128">Um enumerador dos conteúdos da coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-128">An enumerator for the contents of the collection.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertAfter">
      <MemberSignature Language="C#" Value="public void InsertAfter (TextElementType previousSibling, TextElementType newItem);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertAfter(!TextElementType previousSibling, !TextElementType newItem) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextElementCollection`1.InsertAfter(`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertAfter (previousSibling As TextElementType, newItem As TextElementType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertAfter(TextElementType previousSibling, TextElementType newItem);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="previousSibling" Type="TextElementType" />
        <Parameter Name="newItem" Type="TextElementType" />
      </Parameters>
      <Docs>
        <param name="previousSibling">
          <span data-ttu-id="07df7-129">Um item na coleção depois do qual o novo item será inserido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-129">An item in the collection after which the new item will be inserted.</span>
          </span>
        </param>
        <param name="newItem">
          <span data-ttu-id="07df7-130">Um item a ser inserido na coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-130">An item to insert into the collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07df7-131">Insere um item especificado da coleção após um item da coleção especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-131">Inserts a specified item in the collection after a specified collection item.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="07df7-132">Gerado quando o *newItem* já pertence a uma coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-132">Raised when *newItem* already belongs to a collection.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="07df7-133">Gerado quando *previousSibling* ou *newItem* é **nulo**.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-133">Raised when *previousSibling* or *newItem* is **null**.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="07df7-134">Gerado quando *previousSibling* não pertence a esta coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-134">Raised when *previousSibling* does not belong to this collection.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="InsertBefore">
      <MemberSignature Language="C#" Value="public void InsertBefore (TextElementType nextSibling, TextElementType newItem);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertBefore(!TextElementType nextSibling, !TextElementType newItem) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextElementCollection`1.InsertBefore(`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertBefore (nextSibling As TextElementType, newItem As TextElementType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertBefore(TextElementType nextSibling, TextElementType newItem);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nextSibling" Type="TextElementType" />
        <Parameter Name="newItem" Type="TextElementType" />
      </Parameters>
      <Docs>
        <param name="nextSibling">
          <span data-ttu-id="07df7-135">Um item na coleção antes do qual o novo item será inserido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-135">An item in the collection before which the new item will be inserted.</span>
          </span>
        </param>
        <param name="newItem">
          <span data-ttu-id="07df7-136">Um item a ser inserido na coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-136">An item to insert into the collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07df7-137">Insere um item especificado da coleção antes de um item da coleção especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-137">Inserts a specified item in the collection before a specified collection item.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="07df7-138">Gerado quando o *newItem* já pertence a uma coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-138">Raised when *newItem* already belongs to a collection.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="07df7-139">Gerado quando *nextSibling* ou *newItem* é **nulo**.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-139">Raised when *nextSibling* or *newItem* is **null**.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="07df7-140">Gerado quando *nextSibling* não pertence a esta coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-140">Raised when *nextSibling* does not belong to this collection.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextElementCollection`1.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsReadOnly</InterfaceMember>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="07df7-141">Obtém um valor que indica se a coleção é ou não somente leitura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-141">Gets a value that indicates whether or not the collection is read-only.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="07df7-142">**True** se a coleção é somente leitura; caso contrário, **false**.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-142">**true** if the collection is read-only; otherwise, **false**.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07df7-143">No momento, essa propriedade sempre retorna **false**.</span><span class="sxs-lookup"><span data-stu-id="07df7-143">Currently, this property always returns **false**.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (TextElementType item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(!TextElementType item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextElementCollection`1.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (item As TextElementType) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Remove(TextElementType item);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="TextElementType" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="07df7-144">Um item a ser removido da coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-144">An item to be removed fro the collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07df7-145">Remove um item especificado da coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-145">Removes a specified item from the collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07df7-146">**true** se o item especificado tiver sido encontrado e removido; caso contrário, **false**.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-146">**true** if the specified item was found and removed; otherwise, **false**.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07df7-147">Este método retorna **false** se *item* é **nulo**.</span><span class="sxs-lookup"><span data-stu-id="07df7-147">This method returns **false** if *item* is **null**.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextElementCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int arrayIndex) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="07df7-148">O <see cref="T:System.Array" /> unidimensional que é o destino dos elementos copiados de <see cref="T:System.Collections.ICollection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-148">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />.</span>
          </span>
          <span data-ttu-id="07df7-149">O <see cref="T:System.Array" /> deve ter indexação com base em zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-149">The <see cref="T:System.Array" /> must have zero-based indexing.</span>
          </span>
        </param>
        <param name="arrayIndex">
          <span data-ttu-id="07df7-150">O índice baseado em zero na <c>array</c> na qual a cópia começa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-150">The zero-based index in <c>array</c> at which copying begins.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07df7-151">Copia os elementos do <see cref="T:System.Collections.ICollection" /> para um <see cref="T:System.Array" />, começando em um determinado índice <see cref="T:System.Array" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-151">Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index..</span>
          </span>
          <span data-ttu-id="07df7-152">Use o método <see cref="M:System.Windows.Documents.TextElementCollection`1.CopyTo(`0[],System.Int32)" /> fortemente tipado em vez disso.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-152">Use the type-safe <see cref="M:System.Windows.Documents.TextElementCollection`1.CopyTo(`0[],System.Int32)" /> method instead.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.Count">
      <MemberSignature Language="C#" Value="int System.Collections.ICollection.Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 System.Collections.ICollection.Count" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextElementCollection`1.System#Collections#ICollection#Count" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Count As Integer Implements ICollection.Count" />
      <MemberSignature Language="C++ CLI" Value="property int System.Collections.ICollection.Count { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="07df7-153">Obtém o número de elementos contidos no <see cref="T:System.Collections.ICollection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-153">Gets the number of elements contained in the <see cref="T:System.Collections.ICollection" />.</span>
          </span>
          <span data-ttu-id="07df7-154">Use a propriedade <see cref="P:System.Windows.Documents.TextElementCollection`1.Count" /> fortemente tipada em vez disso.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-154">Use the type-safe <see cref="P:System.Windows.Documents.TextElementCollection`1.Count" /> property instead.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="07df7-155">O número de elementos contidos no <see cref="T:System.Collections.ICollection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-155">The number of elements contained in the <see cref="T:System.Collections.ICollection" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextElementCollection`1.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.ICollection.IsSynchronized { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="07df7-156">Obtém um valor que indica se o acesso à <see cref="T:System.Collections.ICollection" /> é sincronizado (thread-safe).</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-156">Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="07df7-157">
            <see langword="true" /> caso o acesso ao <see cref="T:System.Collections.ICollection" /> seja sincronizado (thread-safe); do contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-157">
              <see langword="true" /> if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextElementCollection`1.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.ICollection.SyncRoot { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="07df7-158">Obtém um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-158">Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="07df7-159">Um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-159">An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextElementCollection`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="07df7-160">Retorna um enumerador que itera em uma coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-160">Returns an enumerator that iterates through a collection.</span>
          </span>
          <span data-ttu-id="07df7-161">Use o método <see cref="M:System.Windows.Documents.TextElementCollection`1.GetEnumerator" /> fortemente tipado em vez disso.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-161">Use the type-safe <see cref="M:System.Windows.Documents.TextElementCollection`1.GetEnumerator" /> method instead.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07df7-162">Um objeto <see cref="T:System.Collections.IEnumerator" /> que pode ser usado para iterar pela coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-162">An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextElementCollection`1.System#Collections#IList#Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Add (value As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.Add(System::Object ^ value) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="07df7-163">O objeto a ser adicionado ao <see cref="T:System.Collections.IList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-163">The object to add to the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07df7-164">Adiciona um item ao <see cref="T:System.Collections.IList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-164">Adds an item to the <see cref="T:System.Collections.IList" />.</span>
          </span>
          <span data-ttu-id="07df7-165">Use o método <see cref="M:System.Windows.Documents.TextElementCollection`1.Add(`0)" /> fortemente tipado em vez disso.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-165">Use the type-safe <see cref="M:System.Windows.Documents.TextElementCollection`1.Add(`0)" /> method instead.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07df7-166">A posição na qual o novo elemento foi inserido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-166">The position into which the new element was inserted.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Clear">
      <MemberSignature Language="C#" Value="void IList.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextElementCollection`1.System#Collections#IList#Clear" />
      <MemberSignature Language="VB.NET" Value="Sub Clear () Implements IList.Clear" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Clear() = System::Collections::IList::Clear;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="07df7-167">Este tipo ou membro dá suporte à infraestrutura [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] e não se destina a ser usado diretamente do código.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-167">This type or member supports the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure and is not intended to be used directly from your code.</span>
          </span>
          <span data-ttu-id="07df7-168">Use o método <see cref="M:System.Windows.Documents.TextElementCollection`1.Clear" /> fortemente tipado em vez disso.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-168">Use the type-safe <see cref="M:System.Windows.Documents.TextElementCollection`1.Clear" /> method instead.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextElementCollection`1.System#Collections#IList#Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (value As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IList.Contains(System::Object ^ value) = System::Collections::IList::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="07df7-169">O objeto a ser localizado no <see cref="T:System.Collections.IList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-169">The object to locate in the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07df7-170">Determina se o <see cref="T:System.Collections.IList" /> contém um valor específico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-170">Determines whether the <see cref="T:System.Collections.IList" /> contains a specific value..</span>
          </span>
          <span data-ttu-id="07df7-171">Use o método <see cref="M:System.Windows.Documents.TextElementCollection`1.Contains(`0)" /> fortemente tipado em vez disso.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-171">Use the type-safe <see cref="M:System.Windows.Documents.TextElementCollection`1.Contains(`0)" /> method instead.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07df7-172">
            <see langword="true" /> se o <see cref="T:System.Object" /> for encontrado no <see cref="T:System.Collections.IList" />; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-172">
              <see langword="true" /> if the <see cref="T:System.Object" /> is found in the <see cref="T:System.Collections.IList" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextElementCollection`1.System#Collections#IList#IndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (value As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.IndexOf(System::Object ^ value) = System::Collections::IList::IndexOf;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.IndexOf(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="07df7-173">O objeto a ser localizado no <see cref="T:System.Collections.IList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-173">The object to locate in the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07df7-174">Determina o índice de um item específico em <see cref="T:System.Collections.IList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-174">Determines the index of a specific item in the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07df7-175">O índice de <paramref name="value" /> se encontrado na lista; caso contrário, -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-175">The index of <paramref name="value" /> if found in the list; otherwise, -1.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextElementCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, value As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Insert(int index, System::Object ^ value) = System::Collections::IList::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Insert(System.Int32,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="07df7-176">O índice baseado em zero no qual o <c>valor</c> deve ser inserido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-176">The zero-based index at which <c>value</c> should be inserted.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="07df7-177">O objeto a ser inserido no <see cref="T:System.Collections.IList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-177">The object to insert into the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07df7-178">Insere um item na <see cref="T:System.Collections.IList" /> no índice especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-178">Inserts an item to the <see cref="T:System.Collections.IList" /> at the specified index.</span>
          </span>
          <span data-ttu-id="07df7-179">Use métodos <see cref="M:System.Windows.Documents.TextElementCollection`1.InsertAfter(`0,`0)" /> ou <see cref="M:System.Windows.Documents.TextElementCollection`1.InsertBefore(`0,`0)" /> fortemente tipados em vez disso.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-179">Use the type-safe <see cref="M:System.Windows.Documents.TextElementCollection`1.InsertAfter(`0,`0)" /> or <see cref="M:System.Windows.Documents.TextElementCollection`1.InsertBefore(`0,`0)" /> methods instead.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextElementCollection`1.System#Collections#IList#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.IList.IsFixedSize { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="07df7-180">Obtém um valor que indica se o <see cref="T:System.Collections.IList" /> tem um tamanho fixo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-180">Gets a value indicating whether the <see cref="T:System.Collections.IList" /> has a fixed size.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="07df7-181">
            <see langword="true" /> se o <see cref="T:System.Collections.IList" /> tiver um valor fixo; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-181">
              <see langword="true" /> if the <see cref="T:System.Collections.IList" /> has a fixed size; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextElementCollection`1.System#Collections#IList#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements IList.IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.IList.IsReadOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="07df7-182">Obtém um valor que indica se o <see cref="T:System.Collections.IList" /> é somente leitura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-182">Gets a value indicating whether the <see cref="T:System.Collections.IList" /> is read-only.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="07df7-183">
            <see langword="true" /> se o <see cref="T:System.Collections.IList" /> for somente leitura; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-183">
              <see langword="true" /> if the <see cref="T:System.Collections.IList" /> is read-only; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextElementCollection`1.System#Collections#IList#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As Object Implements IList.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IList.Item[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="07df7-184">O índice com base em zero do elemento a ser obtido ou definido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-184">The zero-based index of the element to get or set.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07df7-185">Obtém ou define o elemento no índice especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-185">Gets or sets the element at the specified index.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="07df7-186">O elemento no índice especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-186">The element at the specified index.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextElementCollection`1.System#Collections#IList#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (value As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Remove(System::Object ^ value) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="07df7-187">O objeto a remover do <see cref="T:System.Collections.IList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-187">The object to remove from the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07df7-188">Remove a primeira ocorrência de um objeto específico do <see cref="T:System.Collections.IList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-188">Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList" />.</span>
          </span>
          <span data-ttu-id="07df7-189">Use o método <see cref="M:System.Windows.Documents.TextElementCollection`1.Remove(`0)" /> fortemente tipado em vez disso.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-189">Use the type-safe <see cref="M:System.Windows.Documents.TextElementCollection`1.Remove(`0)" /> method instead.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.RemoveAt">
      <MemberSignature Language="C#" Value="void IList.RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextElementCollection`1.System#Collections#IList#RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub RemoveAt (index As Integer) Implements IList.RemoveAt" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.RemoveAt(int index) = System::Collections::IList::RemoveAt;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="07df7-190">O índice com base em zero do item a ser removido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-190">The zero-based index of the item to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07df7-191">Remove o item <see cref="T:System.Collections.IList" /> no índice especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07df7-191">Removes the <see cref="T:System.Collections.IList" /> item at the specified index.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>