<Type Name="Binary" FullName="System.Data.Linq.Binary">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5f4e46ca836c9e4d97c7035d7d15011d63f3c830" /><Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="11/27/2018" /><Meta Name="ms.locfileid" Value="52353798" /></Metadata><TypeSignature Language="C#" Value="public sealed class Binary : IEquatable&lt;System.Data.Linq.Binary&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit Binary extends System.Object implements class System.IEquatable`1&lt;class System.Data.Linq.Binary&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Data.Linq.Binary" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Binary&#xA;Implements IEquatable(Of Binary)" />
  <TypeSignature Language="C++ CLI" Value="public ref class Binary sealed : IEquatable&lt;System::Data::Linq::Binary ^&gt;" />
  <TypeSignature Language="F#" Value="type Binary = class&#xA;    interface IEquatable&lt;Binary&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Linq</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Data.Linq.Binary&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.Serialization.DataContract</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="86e47-101">Representa um bloco imutável de dados binários.</span><span class="sxs-lookup"><span data-stu-id="86e47-101">Represents an immutable block of binary data.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binary (byte[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Binary.#ctor(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binary(cli::array &lt;System::Byte&gt; ^ value);" />
      <MemberSignature Language="F#" Value="new System.Data.Linq.Binary : byte[] -&gt; System.Data.Linq.Binary" Usage="new System.Data.Linq.Binary value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="86e47-102">Os bytes que representam os dados binários.</span><span class="sxs-lookup"><span data-stu-id="86e47-102">The bytes representing the binary data.</span></span></param>
        <summary><span data-ttu-id="86e47-103">Inicializa uma nova instância da classe <see cref="T:System.Data.Linq.Binary" />.</span><span class="sxs-lookup"><span data-stu-id="86e47-103">Initializes a new instance of the <see cref="T:System.Data.Linq.Binary" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86e47-104">Quando`null` é passado para esse construtor, em vez de matriz de bytes, necessário um <xref:System.ArgumentNullException?displayProperty=nameWithType> exceção é lançada.</span><span class="sxs-lookup"><span data-stu-id="86e47-104">When`null` is passed to this constructor instead of the required array of bytes, a <xref:System.ArgumentNullException?displayProperty=nameWithType> exception is thrown.</span></span> <span data-ttu-id="86e47-105">Não confie nesse comportamento pois isso pode mudar no futuro.</span><span class="sxs-lookup"><span data-stu-id="86e47-105">Do not rely on this behavior because it may change in the future.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="86e47-106">Determina se dois objetos binários são iguais.</span><span class="sxs-lookup"><span data-stu-id="86e47-106">Determines whether two binary objects are equal.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Data.Linq.Binary other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.Data.Linq.Binary other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Binary.Equals(System.Data.Linq.Binary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As Binary) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Data::Linq::Binary ^ other);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Data.Linq.Binary -&gt; bool" Usage="binary.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Data.Linq.Binary" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="86e47-107">O <see cref="T:System.Object" /> com o qual o objeto atual está sendo comparado.</span><span class="sxs-lookup"><span data-stu-id="86e47-107">The <see cref="T:System.Object" /> to which the current object is being compared.</span></span></param>
        <summary><span data-ttu-id="86e47-108">Determina se dois objetos binários são iguais.</span><span class="sxs-lookup"><span data-stu-id="86e47-108">Determines whether two binary objects are equal.</span></span></summary>
        <returns><span data-ttu-id="86e47-109"><see langword="true" /> se os dois objetos binários forem iguais; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="86e47-109"><see langword="true" /> if the two binary objects are equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Binary.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="binary.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="86e47-110">O <see cref="T:System.Object" /> a ser comparado com o <see cref="T:System.Object" /> atual.</span><span class="sxs-lookup"><span data-stu-id="86e47-110">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</span></span></param>
        <summary><span data-ttu-id="86e47-111">Determina se o <see cref="T:System.Object" /> especificado é igual ao <see cref="T:System.Object" /> atual.</span><span class="sxs-lookup"><span data-stu-id="86e47-111">Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</span></span></summary>
        <returns><span data-ttu-id="86e47-112"><see langword="true" /> se os dois objetos binários forem iguais; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="86e47-112"><see langword="true" /> if the two binary objects are equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Binary.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="binary.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="86e47-113">Serve como uma função de hash para um tipo específico.</span><span class="sxs-lookup"><span data-stu-id="86e47-113">Serves as a hash function for a particular type.</span></span></summary>
        <returns><span data-ttu-id="86e47-114">Um código hash para objeto binário atual.</span><span class="sxs-lookup"><span data-stu-id="86e47-114">A hash code for the current binary object.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Binary.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Length { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int" Usage="System.Data.Linq.Binary.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86e47-115">Obtém o comprimento do objeto binário.</span><span class="sxs-lookup"><span data-stu-id="86e47-115">Gets the length of the binary object.</span></span></summary>
        <value><span data-ttu-id="86e47-116">Um inteiro que representa o comprimento.</span><span class="sxs-lookup"><span data-stu-id="86e47-116">An integer representing the length.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Data.Linq.Binary binary1, System.Data.Linq.Binary binary2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Data.Linq.Binary binary1, class System.Data.Linq.Binary binary2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Binary.op_Equality(System.Data.Linq.Binary,System.Data.Linq.Binary)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (binary1 As Binary, binary2 As Binary) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Data::Linq::Binary ^ binary1, System::Data::Linq::Binary ^ binary2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Data.Linq.Binary * System.Data.Linq.Binary -&gt; bool" Usage="binary1 = binary2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binary1" Type="System.Data.Linq.Binary" />
        <Parameter Name="binary2" Type="System.Data.Linq.Binary" />
      </Parameters>
      <Docs>
        <param name="binary1"><span data-ttu-id="86e47-117">Primeiro objeto binário.</span><span class="sxs-lookup"><span data-stu-id="86e47-117">First binary object.</span></span></param>
        <param name="binary2"><span data-ttu-id="86e47-118">Segundo objeto binário.</span><span class="sxs-lookup"><span data-stu-id="86e47-118">Second binary object.</span></span></param>
        <summary><span data-ttu-id="86e47-119">Descreve a relação de igualdade entre dois objetos binários.</span><span class="sxs-lookup"><span data-stu-id="86e47-119">Describes the equality relationship between two binary objects.</span></span></summary>
        <returns><span data-ttu-id="86e47-120"><see langword="true" /> se os objetos binários forem iguais; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="86e47-120"><see langword="true" /> if the binary objects are equal; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86e47-121">Retorna `true` se ambos estiverem `null` , mas retorna `false` se houver apenas um `null`.</span><span class="sxs-lookup"><span data-stu-id="86e47-121">Returns `true` if both are `null` but returns `false` if only one is `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Data.Linq.Binary (byte[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Data.Linq.Binary op_Implicit(unsigned int8[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Binary.op_Implicit(System.Byte[])~System.Data.Linq.Binary" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Byte()) As Binary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Data::Linq::Binary ^(cli::array &lt;System::Byte&gt; ^ value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : byte[] -&gt; System.Data.Linq.Binary" Usage="System.Data.Linq.Binary.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Linq.Binary</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="86e47-122">A matriz de bytes para converter em uma instância do tipo <see cref="T:System.Data.Linq.Binary" />.</span><span class="sxs-lookup"><span data-stu-id="86e47-122">The array of bytes to convert into an instance of the <see cref="T:System.Data.Linq.Binary" /> type.</span></span></param>
        <summary><span data-ttu-id="86e47-123">Habilita as matrizes de bytes que serão implicitamente impostas para o tipo <see cref="T:System.Data.Linq.Binary" /> em uma linguagem de programação.</span><span class="sxs-lookup"><span data-stu-id="86e47-123">Enables arrays of bytes to be implicitly coerced to the <see cref="T:System.Data.Linq.Binary" /> type in a programming language.</span></span></summary>
        <returns><span data-ttu-id="86e47-124">Uma classe <see cref="T:System.Data.Linq.Binary" /> que contém o valor imposto.</span><span class="sxs-lookup"><span data-stu-id="86e47-124">A <see cref="T:System.Data.Linq.Binary" /> class containing the coerced value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86e47-125">Quando `null` é passado para esse operador em vez de matriz de bytes, necessário um [conversão implícita (Byte\<xref:System.ArgumentNullException?displayProperty=nameWithType > exceção é lançada.</span><span class="sxs-lookup"><span data-stu-id="86e47-125">When `null` is passed to this operator instead of the required array of bytes, a [Implicit Conversion (Byte\<xref:System.ArgumentNullException?displayProperty=nameWithType> exception is thrown.</span></span> <span data-ttu-id="86e47-126">Não confie nesse comportamento pois isso pode mudar no futuro.</span><span class="sxs-lookup"><span data-stu-id="86e47-126">Do not rely on this behavior because it may change in the future.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Data.Linq.Binary binary1, System.Data.Linq.Binary binary2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Data.Linq.Binary binary1, class System.Data.Linq.Binary binary2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Binary.op_Inequality(System.Data.Linq.Binary,System.Data.Linq.Binary)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (binary1 As Binary, binary2 As Binary) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Data::Linq::Binary ^ binary1, System::Data::Linq::Binary ^ binary2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Data.Linq.Binary * System.Data.Linq.Binary -&gt; bool" Usage="System.Data.Linq.Binary.op_Inequality (binary1, binary2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binary1" Type="System.Data.Linq.Binary" />
        <Parameter Name="binary2" Type="System.Data.Linq.Binary" />
      </Parameters>
      <Docs>
        <param name="binary1"><span data-ttu-id="86e47-127">O primeiro objeto binário.</span><span class="sxs-lookup"><span data-stu-id="86e47-127">The first binary object.</span></span></param>
        <param name="binary2"><span data-ttu-id="86e47-128">O segundo objeto binário.</span><span class="sxs-lookup"><span data-stu-id="86e47-128">The second binary object.</span></span></param>
        <summary><span data-ttu-id="86e47-129">Descreve a relação de desigualdade entre dois objetos binários.</span><span class="sxs-lookup"><span data-stu-id="86e47-129">Describes the inequality relationship between two binary objects.</span></span></summary>
        <returns><span data-ttu-id="86e47-130"><see langword="true" /> se os objetos binários não forem iguais; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="86e47-130"><see langword="true" /> if the binary objects are not equal; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86e47-131">Retorna `false` se ambos estiverem `null`, mas retorna `true` se alguma for `null`.</span><span class="sxs-lookup"><span data-stu-id="86e47-131">Returns `false` if both are `null`, but returns `true` if either is `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public byte[] ToArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] ToArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Binary.ToArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToArray () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ ToArray();" />
      <MemberSignature Language="F#" Value="member this.ToArray : unit -&gt; byte[]" Usage="binary.ToArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="86e47-132">Retorna uma matriz de bytes que representa o objeto binário atual.</span><span class="sxs-lookup"><span data-stu-id="86e47-132">Returns an array of bytes that represents the current binary object.</span></span></summary>
        <returns><span data-ttu-id="86e47-133">Uma matriz de bytes que contém o valor do objeto binário atual.</span><span class="sxs-lookup"><span data-stu-id="86e47-133">A byte array that contains the value of the current binary object.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Binary.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="binary.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="86e47-134">Retorna uma <see cref="T:System.String" /> que representa o objeto binário atual.</span><span class="sxs-lookup"><span data-stu-id="86e47-134">Returns a <see cref="T:System.String" /> that represents the current binary object.</span></span></summary>
        <returns><span data-ttu-id="86e47-135">Uma <see cref="T:System.String" /> que representa o objeto binário atual.</span><span class="sxs-lookup"><span data-stu-id="86e47-135">A <see cref="T:System.String" /> that represents the current binary object.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>