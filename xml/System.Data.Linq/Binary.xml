<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Binary.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac581a70bdf5bb482364db23cd76201435d5f64f14b.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">81a70bdf5bb482364db23cd76201435d5f64f14b</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Data.Linq.Binary">
          <source>Represents an immutable block of binary data.</source>
          <target state="translated">Representa um bloco imutável de dados binários.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Binary.#ctor(System.Byte[])">
          <source>The bytes representing the binary data.</source>
          <target state="translated">Os bytes que representam os dados binários.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Binary.#ctor(System.Byte[])">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Data.Linq.Binary" /&gt;</ph> class.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Data.Linq.Binary" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Binary.#ctor(System.Byte[])">
          <source>When<ph id="ph1">`null`</ph> is passed to this constructor instead of the required array of bytes, a <ph id="ph2">&lt;xref:System.ArgumentNullException?displayProperty=nameWithType&gt;</ph> exception is thrown.</source>
          <target state="translated">Quando<ph id="ph1">`null`</ph> é passado para o construtor necessário matriz de bytes, em vez de um <ph id="ph2">&lt;xref:System.ArgumentNullException?displayProperty=nameWithType&gt;</ph> exceção será lançada.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Binary.#ctor(System.Byte[])">
          <source>Do not rely on this behavior because it may change in the future.</source>
          <target state="translated">Não confie nesse comportamento porque ele pode ser alterado no futuro.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="T:System.Data.Linq.Binary">
          <source>Determines whether two binary objects are equal.</source>
          <target state="translated">Determina se dois objetos binários são iguais.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Binary.Equals(System.Data.Linq.Binary)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to which the current object is being compared.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> com o qual o objeto atual está sendo comparado.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Binary.Equals(System.Data.Linq.Binary)">
          <source>Determines whether two binary objects are equal.</source>
          <target state="translated">Determina se dois objetos binários são iguais.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Binary.Equals(System.Data.Linq.Binary)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two binary objects are equal; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se os dois objetos binários forem iguais; caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Binary.Equals(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to compare with the current <ph id="ph2">&lt;see cref="T:System.Object" /&gt;</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> a ser comparado com o <ph id="ph2">&lt;see cref="T:System.Object" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Binary.Equals(System.Object)">
          <source>Determines whether the specified <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> is equal to the current <ph id="ph2">&lt;see cref="T:System.Object" /&gt;</ph>.</source>
          <target state="translated">Determina se o <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> especificado é igual ao <ph id="ph2">&lt;see cref="T:System.Object" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Binary.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two binary objects are equal; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se os dois objetos binários forem iguais; caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Binary.GetHashCode">
          <source>Serves as a hash function for a particular type.</source>
          <target state="translated">Serve como uma função de hash para um tipo específico.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Binary.GetHashCode">
          <source>A hash code for the current binary object.</source>
          <target state="translated">Um código hash para objeto binário atual.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="P:System.Data.Linq.Binary.Length">
          <source>Gets the length of the binary object.</source>
          <target state="translated">Obtém o comprimento do objeto binário.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.Binary.Length">
          <source>An integer representing the length.</source>
          <target state="translated">Um inteiro que representa o comprimento.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Binary.op_Equality(System.Data.Linq.Binary,System.Data.Linq.Binary)">
          <source>First binary object.</source>
          <target state="translated">Primeiro objeto binário.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Binary.op_Equality(System.Data.Linq.Binary,System.Data.Linq.Binary)">
          <source>Second binary object.</source>
          <target state="translated">Segundo objeto binário.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Binary.op_Equality(System.Data.Linq.Binary,System.Data.Linq.Binary)">
          <source>Describes the equality relationship between two binary objects.</source>
          <target state="translated">Descreve a relação de igualdade entre dois objetos binários.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Binary.op_Equality(System.Data.Linq.Binary,System.Data.Linq.Binary)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the binary objects are equal; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se os objetos binários forem iguais; caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Binary.op_Equality(System.Data.Linq.Binary,System.Data.Linq.Binary)">
          <source>Returns <ph id="ph1">`true`</ph> if both are <ph id="ph2">`null`</ph> but returns <ph id="ph3">`false`</ph> if only one is <ph id="ph4">`null`</ph>.</source>
          <target state="translated">Retorna <ph id="ph1">`true`</ph> se ambos estiverem <ph id="ph2">`null`</ph> , mas retorna <ph id="ph3">`false`</ph> se houver apenas um <ph id="ph4">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Binary.op_Implicit(System.Byte[])~System.Data.Linq.Binary">
          <source>The array of bytes to convert into an instance of the <ph id="ph1">&lt;see cref="T:System.Data.Linq.Binary" /&gt;</ph> type.</source>
          <target state="translated">A matriz de bytes para converter em uma instância do tipo <ph id="ph1">&lt;see cref="T:System.Data.Linq.Binary" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Binary.op_Implicit(System.Byte[])~System.Data.Linq.Binary">
          <source>Enables arrays of bytes to be implicitly coerced to the <ph id="ph1">&lt;see cref="T:System.Data.Linq.Binary" /&gt;</ph> type in a programming language.</source>
          <target state="translated">Habilita as matrizes de bytes que serão implicitamente impostas para o tipo <ph id="ph1">&lt;see cref="T:System.Data.Linq.Binary" /&gt;</ph> em uma linguagem de programação.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Binary.op_Implicit(System.Byte[])~System.Data.Linq.Binary">
          <source>A <ph id="ph1">&lt;see cref="T:System.Data.Linq.Binary" /&gt;</ph> class containing the coerced value.</source>
          <target state="translated">Uma classe <ph id="ph1">&lt;see cref="T:System.Data.Linq.Binary" /&gt;</ph> que contém o valor imposto.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Binary.op_Implicit(System.Byte[])~System.Data.Linq.Binary">
          <source>When <ph id="ph1">`null`</ph> is passed to this operator instead of the required array of bytes, a [Implicit Conversion (Byte<ph id="ph2">\&lt;</ph>xref:System.ArgumentNullException?displayProperty=nameWithType&gt; exception is thrown.</source>
          <target state="translated">Quando <ph id="ph1">`null`</ph> é passado para esse operador, em vez de matriz de bytes, necessário um [conversão implícita (Byte<ph id="ph2">\&lt;</ph>xref:System.ArgumentNullException?displayProperty=nameWithType &gt; exceção será lançada.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Binary.op_Implicit(System.Byte[])~System.Data.Linq.Binary">
          <source>Do not rely on this behavior because it may change in the future.</source>
          <target state="translated">Não confie nesse comportamento porque ele pode ser alterado no futuro.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Binary.op_Inequality(System.Data.Linq.Binary,System.Data.Linq.Binary)">
          <source>The first binary object.</source>
          <target state="translated">O primeiro objeto binário.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Binary.op_Inequality(System.Data.Linq.Binary,System.Data.Linq.Binary)">
          <source>The second binary object.</source>
          <target state="translated">O segundo objeto binário.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Binary.op_Inequality(System.Data.Linq.Binary,System.Data.Linq.Binary)">
          <source>Describes the inequality relationship between two binary objects.</source>
          <target state="translated">Descreve a relação de desigualdade entre dois objetos binários.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Binary.op_Inequality(System.Data.Linq.Binary,System.Data.Linq.Binary)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the binary objects are not equal; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se os objetos binários não forem iguais; caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Binary.op_Inequality(System.Data.Linq.Binary,System.Data.Linq.Binary)">
          <source>Returns <ph id="ph1">`false`</ph> if both are <ph id="ph2">`null`</ph>, but returns <ph id="ph3">`true`</ph> if either is <ph id="ph4">`null`</ph>.</source>
          <target state="translated">Retorna <ph id="ph1">`false`</ph> se ambos estiverem <ph id="ph2">`null`</ph>, mas retorna <ph id="ph3">`true`</ph> se alguma for <ph id="ph4">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Binary.ToArray">
          <source>Returns an array of bytes that represents the current binary object.</source>
          <target state="translated">Retorna uma matriz de bytes que representa o objeto binário atual.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Binary.ToArray">
          <source>A byte array that contains the value of the current binary object.</source>
          <target state="translated">Uma matriz de bytes que contém o valor do objeto binário atual.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Binary.ToString">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that represents the current binary object.</source>
          <target state="translated">Retorna uma <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> que representa o objeto binário atual.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Binary.ToString">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that represents the current binary object.</source>
          <target state="translated">Uma <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> que representa o objeto binário atual.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>