<Type Name="ITable" FullName="System.Data.Linq.ITable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f8b8f2e2bdd0c52e384f470a3a124febf32ac54e" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37680433" /></Metadata><TypeSignature Language="C#" Value="public interface ITable : System.Collections.IEnumerable, System.Linq.IQueryable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ITable implements class System.Collections.IEnumerable, class System.Linq.IQueryable" />
  <TypeSignature Language="DocId" Value="T:System.Data.Linq.ITable" />
  <TypeSignature Language="VB.NET" Value="Public Interface ITable&#xA;Implements IEnumerable, IQueryable" />
  <TypeSignature Language="C++ CLI" Value="public interface class ITable : System::Collections::IEnumerable, System::Linq::IQueryable" />
  <TypeSignature Language="F#" Value="type ITable = interface&#xA;    interface IEnumerable&#xA;    interface IQueryable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Linq</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="1a79b-101">Usado para cenários de consulta sem rigidez de tipos.</span><span class="sxs-lookup"><span data-stu-id="1a79b-101">Used for weakly typed query scenarios.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a79b-102">Para obter mais informações sobre os métodos, consulte <xref:System.Data.Linq.Table%601>.</span><span class="sxs-lookup"><span data-stu-id="1a79b-102">For more information about methods, see <xref:System.Data.Linq.Table%601>.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Attach">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1a79b-103">Permite que entidades desserializadas sejam associadas uma nova instância de um <see cref="T:System.Data.Linq.DataContext" /> para que possam ser atualizados ou excluídos do banco de dados.</span><span class="sxs-lookup"><span data-stu-id="1a79b-103">Allows deserialized entities to be associated with a new instance of a <see cref="T:System.Data.Linq.DataContext" /> so that they can be updated or deleted from the database.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a79b-104">Para obter mais informações sobre como usar esse método, consulte [recuperação de dados e operações de CUD em aplicativos de N camadas (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="1a79b-104">For more information about how to use this method, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 <span data-ttu-id="1a79b-105">Se um membro necessário está ausente, uma <xref:System.Data.Linq.ChangeConflictException> é lançada durante a <xref:System.Data.Linq.DataContext.SubmitChanges%2A>.</span><span class="sxs-lookup"><span data-stu-id="1a79b-105">If a required member is missing, a <xref:System.Data.Linq.ChangeConflictException> is thrown during <xref:System.Data.Linq.DataContext.SubmitChanges%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Attach(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ITable.Attach(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(System::Object ^ entity);" />
      <MemberSignature Language="F#" Value="abstract member Attach : obj -&gt; unit" Usage="iTable.Attach entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="1a79b-106">A entidade a ser anexada.</span><span class="sxs-lookup"><span data-stu-id="1a79b-106">The entity to be attached.</span></span></param>
        <summary><span data-ttu-id="1a79b-107">Anexa uma entidade ao <see cref="T:System.Data.Linq.DataContext" /> em um estado inalterado.</span><span class="sxs-lookup"><span data-stu-id="1a79b-107">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in an unmodified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a79b-108">Para obter mais informações sobre como usar esse método, consulte [recuperação de dados e operações de CUD em aplicativos de N camadas (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="1a79b-108">For more information about how to use this method, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (object entity, bool asModified);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Attach(object entity, bool asModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ITable.Attach(System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As Object, asModified As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(System::Object ^ entity, bool asModified);" />
      <MemberSignature Language="F#" Value="abstract member Attach : obj * bool -&gt; unit" Usage="iTable.Attach (entity, asModified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
        <Parameter Name="asModified" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="1a79b-109">A coleção de entidades.</span><span class="sxs-lookup"><span data-stu-id="1a79b-109">The collection of entities.</span></span></param>
        <param name="asModified"><span data-ttu-id="1a79b-110"><see langword="true" /> para anexar entidades conforme modificadas.</span><span class="sxs-lookup"><span data-stu-id="1a79b-110"><see langword="true" /> to attach the entities as modified.</span></span></param>
        <summary><span data-ttu-id="1a79b-111">Anexa todas as entidades de uma coleção ao <see cref="T:System.Data.Linq.DataContext" /> em um estado inalterado ou modificado.</span><span class="sxs-lookup"><span data-stu-id="1a79b-111">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a79b-112">Para obter mais informações sobre como usar esse método, consulte [recuperação de dados e operações de CUD em aplicativos de N camadas (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="1a79b-112">For more information about how to use this method, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (object entity, object original);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Attach(object entity, object original) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ITable.Attach(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As Object, original As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(System::Object ^ entity, System::Object ^ original);" />
      <MemberSignature Language="F#" Value="abstract member Attach : obj * obj -&gt; unit" Usage="iTable.Attach (entity, original)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
        <Parameter Name="original" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="1a79b-113">A entidade a ser anexada.</span><span class="sxs-lookup"><span data-stu-id="1a79b-113">The entity to be attached.</span></span></param>
        <param name="original"><span data-ttu-id="1a79b-114">Uma instância do mesmo tipo de entidade com membros de dados que contém os valores originais.</span><span class="sxs-lookup"><span data-stu-id="1a79b-114">An instance of the same entity type with data members that contain the original values.</span></span></param>
        <summary><span data-ttu-id="1a79b-115">Anexa uma entidade para o <see cref="T:System.Data.Linq.DataContext" /> em um estado modificado ou não modificado especificando a entidade e seu estado original.</span><span class="sxs-lookup"><span data-stu-id="1a79b-115">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state by specifying both the entity and its original state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a79b-116">Para obter mais informações sobre como usar esse método, consulte [recuperação de dados e operações de CUD em aplicativos de N camadas (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="1a79b-116">For more information about how to use this method, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AttachAll">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1a79b-117">Anexa todas as entidades de uma coleção ao <see cref="T:System.Data.Linq.DataContext" /> em um estado inalterado ou modificado.</span><span class="sxs-lookup"><span data-stu-id="1a79b-117">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AttachAll">
      <MemberSignature Language="C#" Value="public void AttachAll (System.Collections.IEnumerable entities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AttachAll(class System.Collections.IEnumerable entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AttachAll (entities As IEnumerable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AttachAll(System::Collections::IEnumerable ^ entities);" />
      <MemberSignature Language="F#" Value="abstract member AttachAll : System.Collections.IEnumerable -&gt; unit" Usage="iTable.AttachAll entities" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="entities"><span data-ttu-id="1a79b-118">A coleção de entidades.</span><span class="sxs-lookup"><span data-stu-id="1a79b-118">The collection of entities.</span></span></param>
        <summary><span data-ttu-id="1a79b-119">Anexa todas as entidades de uma coleção ao <see cref="T:System.Data.Linq.DataContext" /> em um estado inalterado ou modificado.</span><span class="sxs-lookup"><span data-stu-id="1a79b-119">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a79b-120">Para obter mais informações sobre como usar esse método, consulte [recuperação de dados e operações de CUD em aplicativos de N camadas (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="1a79b-120">For more information about how to use this method, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AttachAll">
      <MemberSignature Language="C#" Value="public void AttachAll (System.Collections.IEnumerable entities, bool asModified);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AttachAll(class System.Collections.IEnumerable entities, bool asModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AttachAll (entities As IEnumerable, asModified As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AttachAll(System::Collections::IEnumerable ^ entities, bool asModified);" />
      <MemberSignature Language="F#" Value="abstract member AttachAll : System.Collections.IEnumerable * bool -&gt; unit" Usage="iTable.AttachAll (entities, asModified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
        <Parameter Name="asModified" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="entities"><span data-ttu-id="1a79b-121">A coleção de entidades.</span><span class="sxs-lookup"><span data-stu-id="1a79b-121">The collection of entities.</span></span></param>
        <param name="asModified"><span data-ttu-id="1a79b-122"><see langword="true" /> para anexar entidades conforme modificadas.</span><span class="sxs-lookup"><span data-stu-id="1a79b-122"><see langword="true" /> to attach the entities as modified.</span></span></param>
        <summary><span data-ttu-id="1a79b-123">Anexa todas as entidades de uma coleção ao <see cref="T:System.Data.Linq.DataContext" /> em um estado inalterado ou modificado.</span><span class="sxs-lookup"><span data-stu-id="1a79b-123">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a79b-124">Para obter mais informações sobre como usar esse método, consulte [recuperação de dados e operações de CUD em aplicativos de N camadas (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="1a79b-124">For more information about how to use this method, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="public System.Data.Linq.DataContext Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Linq.DataContext Context" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.ITable.Context" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Context As DataContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Linq::DataContext ^ Context { System::Data::Linq::DataContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Context : System.Data.Linq.DataContext" Usage="System.Data.Linq.ITable.Context" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Linq.DataContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1a79b-125">Obtém o <see cref="T:System.Data.Linq.DataContext" /> que foi usado para recuperar esse <see cref="T:System.Data.Linq.ITable" />.</span><span class="sxs-lookup"><span data-stu-id="1a79b-125">Gets the <see cref="T:System.Data.Linq.DataContext" /> that has been used to retrieve this <see cref="T:System.Data.Linq.ITable" />.</span></span></summary>
        <value><span data-ttu-id="1a79b-126">O <see cref="T:System.Data.Linq.DataContext" /> usado para recuperar o <see cref="T:System.Data.Linq.ITable" />.</span><span class="sxs-lookup"><span data-stu-id="1a79b-126">The <see cref="T:System.Data.Linq.DataContext" /> used to retrieve the <see cref="T:System.Data.Linq.ITable" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteAllOnSubmit">
      <MemberSignature Language="C#" Value="public void DeleteAllOnSubmit (System.Collections.IEnumerable entities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeleteAllOnSubmit(class System.Collections.IEnumerable entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ITable.DeleteAllOnSubmit(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteAllOnSubmit (entities As IEnumerable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteAllOnSubmit(System::Collections::IEnumerable ^ entities);" />
      <MemberSignature Language="F#" Value="abstract member DeleteAllOnSubmit : System.Collections.IEnumerable -&gt; unit" Usage="iTable.DeleteAllOnSubmit entities" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="entities"><span data-ttu-id="1a79b-127">A coleção da qual todos os itens são removidos.</span><span class="sxs-lookup"><span data-stu-id="1a79b-127">The collection from which all items are removed.</span></span></param>
        <summary><span data-ttu-id="1a79b-128">Coloca todas as entidades da coleção em um estado <see langword="pending delete" />.</span><span class="sxs-lookup"><span data-stu-id="1a79b-128">Puts all entities from the collection into a <see langword="pending delete" /> state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a79b-129">Chamar <xref:System.Data.Linq.DataContext.SubmitChanges%2A> para executar a exclusão real do banco de dados.</span><span class="sxs-lookup"><span data-stu-id="1a79b-129">Call <xref:System.Data.Linq.DataContext.SubmitChanges%2A> to perform the actual deletion in the database.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteOnSubmit">
      <MemberSignature Language="C#" Value="public void DeleteOnSubmit (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeleteOnSubmit(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ITable.DeleteOnSubmit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteOnSubmit (entity As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteOnSubmit(System::Object ^ entity);" />
      <MemberSignature Language="F#" Value="abstract member DeleteOnSubmit : obj -&gt; unit" Usage="iTable.DeleteOnSubmit entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="1a79b-130">A entidade a ser removida.</span><span class="sxs-lookup"><span data-stu-id="1a79b-130">The entity to be removed.</span></span></param>
        <summary><span data-ttu-id="1a79b-131">Coloca uma entidade desta tabela em um estado de <see langword="pending delete" />.</span><span class="sxs-lookup"><span data-stu-id="1a79b-131">Puts an entity from this table into a <see langword="pending delete" /> state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a79b-132">Entidades desconectadas devem ser anexadas antes que possam ser excluídos.</span><span class="sxs-lookup"><span data-stu-id="1a79b-132">Disconnected entities must be attached before they can be deleted.</span></span> <span data-ttu-id="1a79b-133">Chamar <xref:System.Data.Linq.DataContext.SubmitChanges%2A> para executar a exclusão real do banco de dados.</span><span class="sxs-lookup"><span data-stu-id="1a79b-133">Call <xref:System.Data.Linq.DataContext.SubmitChanges%2A> to perform the actual deletion in the database.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetModifiedMembers">
      <MemberSignature Language="C#" Value="public System.Data.Linq.ModifiedMemberInfo[] GetModifiedMembers (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Data.Linq.ModifiedMemberInfo[] GetModifiedMembers(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ITable.GetModifiedMembers(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetModifiedMembers (entity As Object) As ModifiedMemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::Linq::ModifiedMemberInfo&gt; ^ GetModifiedMembers(System::Object ^ entity);" />
      <MemberSignature Language="F#" Value="abstract member GetModifiedMembers : obj -&gt; System.Data.Linq.ModifiedMemberInfo[]" Usage="iTable.GetModifiedMembers entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Linq.ModifiedMemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="1a79b-134">A entidade da qual obter a matriz.</span><span class="sxs-lookup"><span data-stu-id="1a79b-134">The entity from which to get the array.</span></span></param>
        <summary><span data-ttu-id="1a79b-135">Retorna uma matriz de membros modificados que contêm os valores atuais e originais.</span><span class="sxs-lookup"><span data-stu-id="1a79b-135">Returns an array of modified members that contain their current and original values.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOriginalEntityState">
      <MemberSignature Language="C#" Value="public object GetOriginalEntityState (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetOriginalEntityState(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ITable.GetOriginalEntityState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOriginalEntityState (entity As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetOriginalEntityState(System::Object ^ entity);" />
      <MemberSignature Language="F#" Value="abstract member GetOriginalEntityState : obj -&gt; obj" Usage="iTable.GetOriginalEntityState entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="1a79b-136">A entidade cujo valor original deve ser recuperado.</span><span class="sxs-lookup"><span data-stu-id="1a79b-136">The entity whose original value is to be retrieved.</span></span></param>
        <summary><span data-ttu-id="1a79b-137">Recupera os valores originais.</span><span class="sxs-lookup"><span data-stu-id="1a79b-137">Retrieves original values.</span></span></summary>
        <returns><span data-ttu-id="1a79b-138">Uma cópia da entidade original.</span><span class="sxs-lookup"><span data-stu-id="1a79b-138">A copy of the original entity.</span></span> <span data-ttu-id="1a79b-139">O valor será null se a entidade passada não for controlada.</span><span class="sxs-lookup"><span data-stu-id="1a79b-139">The value is null if the entity passed in is not tracked.</span></span> <span data-ttu-id="1a79b-140">Entidades desconectadas enviadas de volta por um cliente devem ser conectadas antes que o <see cref="T:System.Data.Linq.DataContext" /> possa começar a controlar seu estado.</span><span class="sxs-lookup"><span data-stu-id="1a79b-140">Disconnected entities sent back by a client must be attached before the <see cref="T:System.Data.Linq.DataContext" /> can begin to track their state.</span></span> <span data-ttu-id="1a79b-141">O "estado original" de uma entidade recém-anexada é estabelecido com base nos valores fornecidos pelo cliente.</span><span class="sxs-lookup"><span data-stu-id="1a79b-141">The "original state" of a newly attached entity is established based on values supplied by the client.</span></span> <span data-ttu-id="1a79b-142">O contexto de dados não controla o estado das entidades desconectadas.</span><span class="sxs-lookup"><span data-stu-id="1a79b-142">The data context does not track the state of disconnected entities.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a79b-143">Observe o seguinte:</span><span class="sxs-lookup"><span data-stu-id="1a79b-143">Note the following:</span></span>  
  
-   <span data-ttu-id="1a79b-144">O argumento de entidade deve ser não nulo.</span><span class="sxs-lookup"><span data-stu-id="1a79b-144">The entity argument must be non-null.</span></span> <span data-ttu-id="1a79b-145">Caso contrário, será gerada uma exceção de argumento nulo.</span><span class="sxs-lookup"><span data-stu-id="1a79b-145">Otherwise, a null argument exception is thrown.</span></span>  
  
-   <span data-ttu-id="1a79b-146">No caso de fortemente tipado (`TEntity`) método, o tipo deve ser mapeado e deve ser um tipo de entidade.</span><span class="sxs-lookup"><span data-stu-id="1a79b-146">In the case of the strongly typed (`TEntity`) method, the type must be mapped and must be an entity type.</span></span> <span data-ttu-id="1a79b-147">Ou seja, ele deve ter informações de ID de objeto em seu mapeamento.</span><span class="sxs-lookup"><span data-stu-id="1a79b-147">That is, it must have object ID information in its mapping.</span></span> <span data-ttu-id="1a79b-148">Caso contrário, é lançada uma exceção do tipo errado.</span><span class="sxs-lookup"><span data-stu-id="1a79b-148">Otherwise, a wrong type exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertAllOnSubmit">
      <MemberSignature Language="C#" Value="public void InsertAllOnSubmit (System.Collections.IEnumerable entities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertAllOnSubmit(class System.Collections.IEnumerable entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ITable.InsertAllOnSubmit(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertAllOnSubmit (entities As IEnumerable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertAllOnSubmit(System::Collections::IEnumerable ^ entities);" />
      <MemberSignature Language="F#" Value="abstract member InsertAllOnSubmit : System.Collections.IEnumerable -&gt; unit" Usage="iTable.InsertAllOnSubmit entities" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="entities"><span data-ttu-id="1a79b-149">As entidades a serem adicionadas.</span><span class="sxs-lookup"><span data-stu-id="1a79b-149">The entities to add.</span></span></param>
        <summary><span data-ttu-id="1a79b-150">Adiciona todas as entidades de uma coleção ao <see cref="T:System.Data.Linq.DataContext" /> em um estado <see langword="pending insert" />.</span><span class="sxs-lookup"><span data-stu-id="1a79b-150">Adds all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in a <see langword="pending insert" /> state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a79b-151">Chamar <xref:System.Data.Linq.DataContext.SubmitChanges%2A> para executar a inserção real no banco de dados.</span><span class="sxs-lookup"><span data-stu-id="1a79b-151">Call <xref:System.Data.Linq.DataContext.SubmitChanges%2A> to perform the actual insertion into the database.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertOnSubmit">
      <MemberSignature Language="C#" Value="public void InsertOnSubmit (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertOnSubmit(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ITable.InsertOnSubmit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertOnSubmit (entity As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertOnSubmit(System::Object ^ entity);" />
      <MemberSignature Language="F#" Value="abstract member InsertOnSubmit : obj -&gt; unit" Usage="iTable.InsertOnSubmit entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="1a79b-152">A entidade a ser adicionada.</span><span class="sxs-lookup"><span data-stu-id="1a79b-152">The entity to be added.</span></span></param>
        <summary><span data-ttu-id="1a79b-153">Adiciona uma entidade em um estado <see langword="pending insert" /> a esta tabela.</span><span class="sxs-lookup"><span data-stu-id="1a79b-153">Adds an entity in a <see langword="pending insert" /> state to this table.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a79b-154">Chamar <xref:System.Data.Linq.DataContext.SubmitChanges%2A> para executar a inserção real no banco de dados.</span><span class="sxs-lookup"><span data-stu-id="1a79b-154">Call <xref:System.Data.Linq.DataContext.SubmitChanges%2A> to perform the actual insertion into the database.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.ITable.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Data.Linq.ITable.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1a79b-155">Indica se o tipo das entidades contidas nesta instância <see cref="T:System.Data.Linq.ITable" /> têm uma chave primária.</span><span class="sxs-lookup"><span data-stu-id="1a79b-155">Indicates if the type of the entities contained in this <see cref="T:System.Data.Linq.ITable" /> instance has a primary key.</span></span></summary>
        <value><span data-ttu-id="1a79b-156">Retorna <see langword="true" /> se o tipo de entidade não tiver uma chave primária; caso contrário, false.</span><span class="sxs-lookup"><span data-stu-id="1a79b-156">Returns <see langword="true" /> if the entity type does not have a primary key; otherwise, false.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>