<Type Name="Table&lt;TEntity&gt;" FullName="System.Data.Linq.Table&lt;TEntity&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1de919c372a2c0bd66f05bfb6326fd59cced7137" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36688950" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Table&lt;TEntity&gt; : System.Collections.Generic.IEnumerable&lt;TEntity&gt;, System.ComponentModel.IListSource, System.Data.Linq.ITable, System.Linq.IQueryable&lt;TEntity&gt;, System.Linq.IQueryProvider where TEntity : class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Table`1&lt;class TEntity&gt; extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;!TEntity&gt;, class System.Collections.IEnumerable, class System.ComponentModel.IListSource, class System.Data.Linq.ITable, class System.Linq.IQueryable, class System.Linq.IQueryable`1&lt;!TEntity&gt;, class System.Linq.IQueryProvider" />
  <TypeSignature Language="DocId" Value="T:System.Data.Linq.Table`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Table(Of TEntity)&#xA;Implements IEnumerable(Of TEntity), IListSource, IQueryable(Of TEntity), IQueryProvider, ITable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TEntity&gt;&#xA; where TEntity : classpublic ref class Table sealed : System::Collections::Generic::IEnumerable&lt;TEntity&gt;, System::ComponentModel::IListSource, System::Data::Linq::ITable, System::Linq::IQueryable&lt;TEntity&gt;, System::Linq::IQueryProvider" />
  <TypeSignature Language="F#" Value="type Table&lt;'Entity (requires 'Entity : null)&gt; = class&#xA;    interface ITable&#xA;    interface IQueryProvider&#xA;    interface IListSource&#xA;    interface seq&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface IEnumerable&#xA;    interface IQueryable&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface IQueryable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Linq</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TEntity">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;TEntity&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.IListSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Data.Linq.ITable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable&lt;TEntity&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TEntity">
      <span data-ttu-id="2bf76-101">O tipo de dados na tabela.</span>
      <span class="sxs-lookup">
        <span data-stu-id="2bf76-101">The type of the data in the table.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="2bf76-102">Representa uma tabela para determinado tipo no banco de dados subjacente.</span>
      <span class="sxs-lookup">
        <span data-stu-id="2bf76-102">Represents a table for a particular type in the underlying database.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bf76-103">Essa classe permite que você consultar a tabela e adicionar, remover e anexar objetos.</span><span class="sxs-lookup"><span data-stu-id="2bf76-103">This class enables you to query over the table and add, remove, and attach objects.</span></span>  
  
 <span data-ttu-id="2bf76-104">Um aplicativo pode acessar uma <xref:System.Data.Linq.Table%601> instância <xref:System.Data.Linq.DataContext.GetTable%2A> ou usando uma propriedade com rigidez de tipos para fortemente tipada <xref:System.Data.Linq.DataContext>.</span><span class="sxs-lookup"><span data-stu-id="2bf76-104">An application can access a <xref:System.Data.Linq.Table%601> instance via <xref:System.Data.Linq.DataContext.GetTable%2A> or by using a strongly typed property for the strongly typed <xref:System.Data.Linq.DataContext>.</span></span> <span data-ttu-id="2bf76-105">Ou seja, quando o designer gera um objeto DataContext, ele gera propriedades para representar cada tabela.</span><span class="sxs-lookup"><span data-stu-id="2bf76-105">That is, when the designer generates a DataContext object, it generates properties to represent each Table.</span></span> <span data-ttu-id="2bf76-106">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="2bf76-106">For example:</span></span>  
  
```  
[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SignOffTool")]  
public partial class DataClasses1DataContext : System.Data.Linq.DataContext {  
   public System.Data.Linq.Table<User> Users {  
      get {  
         return this.GetTable<User>();  
      }  
   }  
}  
```  
  
 <span data-ttu-id="2bf76-107">Para este DataContext com rigidez de tipos, você pode acessar a propriedade de usuários para obter `Table<User>`.</span><span class="sxs-lookup"><span data-stu-id="2bf76-107">For this strongly typed DataContext, you can access the Users property to get `Table<User>`.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Attach">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2bf76-108">Anexa uma entidade ao <see cref="T:System.Data.Linq.DataContext" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-108">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bf76-109">Use o `Attach` métodos com entidades que foram criados em um <xref:System.Data.Linq.DataContext>serializado para um cliente e desserializado (com a intenção de executar uma atualização ou operação de exclusão).</span><span class="sxs-lookup"><span data-stu-id="2bf76-109">Use the `Attach` methods with entities that have been created in one <xref:System.Data.Linq.DataContext>, serialized to a client, and then deserialized back (with the intention to perform an update or delete operation).</span></span> <span data-ttu-id="2bf76-110">Para obter mais informações, consulte [recuperação de dados e operações de comida RUMINADA em aplicativos de N camadas (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="2bf76-110">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 <span data-ttu-id="2bf76-111">Não tente `Attach` uma entidade que não foi desanexada por meio de serialização.</span><span class="sxs-lookup"><span data-stu-id="2bf76-111">Do not try to `Attach` an entity that has not been detached through serialization.</span></span> <span data-ttu-id="2bf76-112">Entidades que não foi serializadas ainda mantenham as associações com carregadores adiadas que podem causar resultados inesperados se a entidade se tornará acompanhada por um segundo contexto de dados.</span><span class="sxs-lookup"><span data-stu-id="2bf76-112">Entities that have not been serialized still maintain associations with deferred loaders that can cause unexpected results if the entity becomes tracked by a second data context.</span></span>  
  
 <span data-ttu-id="2bf76-113">Quando uma nova entidade é anexada, adiada carregadores de todas as coleções filho (por exemplo, `EntitySet` coleções de entidades de tabelas associadas) são inicializados.</span><span class="sxs-lookup"><span data-stu-id="2bf76-113">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="2bf76-114">Quando <xref:System.Data.Linq.DataContext.SubmitChanges%2A> é chamado, os membros do filho coleções são colocadas em um `Unmodified` estado.</span><span class="sxs-lookup"><span data-stu-id="2bf76-114">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="2bf76-115">Para atualizar os membros de uma coleção de filhos, você deve chamar explicitamente `Attach` e especifique essa entidade.</span><span class="sxs-lookup"><span data-stu-id="2bf76-115">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
 <span data-ttu-id="2bf76-116">`Attach` anexa a todas as entidades no gráfico de objeto do objeto fornecido.</span><span class="sxs-lookup"><span data-stu-id="2bf76-116">`Attach` attaches all entities in the object graph of the provided object.</span></span> <span data-ttu-id="2bf76-117">Por exemplo, o código c# a seguir:</span><span class="sxs-lookup"><span data-stu-id="2bf76-117">For example, the following C# code:</span></span>  
  
```  
using (SampleDataContext db = new SampleDataContext()) {  
    Employee employee = new Employee { employeeId = 1 };  
  
    Master master = new Master();  
    master.Employee = employee;  
  
    Child child = new Child();  
    child.Employee = employee;  
  
    db.Employees.Attach(employee);  
  
    master.Child = child;  
  
    db.Masters.InsertOnSubmit(master);  
  
    db.SubmitChanges();  
}  
  
```  
  
 <span data-ttu-id="2bf76-118">O código do Visual Basic equivalente é:</span><span class="sxs-lookup"><span data-stu-id="2bf76-118">The equivalent Visual Basic code is:</span></span>  
  
```  
Using db As New SampleDataContext()    Dim employee As New Employee With { .employeeId = 1 }  
  
    Dim master As New Master()  
    master.Employee = employee  
  
    Dim child As New Child()  
    child.Employee = employee  
  
    db.Employees.Attach(employee)  
  
    master.Child = child  
  
    db.Masters.InsertOnSubmit(master)  
  
    db.SubmitChanges()  
  
End Using  
```  
  
 <span data-ttu-id="2bf76-119">Chamando `Attach` na `Employee` anexa o funcionário, master e filho, porque o `Employee` tem relações para master e filho.</span><span class="sxs-lookup"><span data-stu-id="2bf76-119">Calling `Attach` on `Employee` attaches employee, master, and child, because the `Employee` has relationships to both master and child.</span></span> <span data-ttu-id="2bf76-120">Você deve chamar explicitamente `InsertOnSubmit` alterar o estado de anexado ao inserido.</span><span class="sxs-lookup"><span data-stu-id="2bf76-120">You must explicitly call `InsertOnSubmit` to change the state from attached to inserted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Attach(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.Attach(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(TEntity entity);" />
      <MemberSignature Language="F#" Value="member this.Attach : 'Entity -&gt; unit" Usage="table.Attach entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="2bf76-121">Os valores originais da entidade a ser anexada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-121">The original values of the entity to be attached.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2bf76-122">Anexa uma entidade desconectada ou “desanexada” a um novo <see cref="T:System.Data.Linq.DataContext" /> quando os valores originais são necessários para verificações de simultaneidade otimista.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-122">Attaches a disconnected or "detached" entity to a new <see cref="T:System.Data.Linq.DataContext" /> when original values are required for optimistic concurrency checks.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bf76-123">Use o `Attach` métodos com entidades que foram criados em um <xref:System.Data.Linq.DataContext>serializado para um cliente e desserializado voltar para executar uma atualização ou operação de exclusão.</span><span class="sxs-lookup"><span data-stu-id="2bf76-123">Use the `Attach` methods with entities that have been created in one <xref:System.Data.Linq.DataContext>, serialized to a client, and then deserialized back to perform an update or delete operation.</span></span> <span data-ttu-id="2bf76-124">Porque o novo <xref:System.Data.Linq.DataContext> dispõe de nenhuma forma de controlar quais foram os valores originais para uma entidade desconectada, o cliente é responsável por fornecer esses valores.</span><span class="sxs-lookup"><span data-stu-id="2bf76-124">Because the new <xref:System.Data.Linq.DataContext> has no way of tracking what the original values were for a disconnected entity, the client is responsible for supplying those values.</span></span> <span data-ttu-id="2bf76-125">Nesta versão do <xref:System.Data.Linq.Table%601.Attach%2A>, a entidade deve para estar no estado de valor original.</span><span class="sxs-lookup"><span data-stu-id="2bf76-125">In this version of <xref:System.Data.Linq.Table%601.Attach%2A>, the entity is assumed to be in its original value state.</span></span> <span data-ttu-id="2bf76-126">Depois de chamar esse método, você pode atualizar seus campos, por exemplo com dados adicionais enviados do cliente.</span><span class="sxs-lookup"><span data-stu-id="2bf76-126">After calling this method, you can then update its fields, for example with additional data sent from the client.</span></span>  
  
 <span data-ttu-id="2bf76-127">Quando uma nova entidade é anexada, adiada carregadores de todas as coleções filho (por exemplo, `EntitySet` coleções de entidades de tabelas associadas) são inicializados.</span><span class="sxs-lookup"><span data-stu-id="2bf76-127">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="2bf76-128">Quando <xref:System.Data.Linq.DataContext.SubmitChanges%2A> é chamado, os membros do filho coleções são colocadas em um `Unmodified` estado.</span><span class="sxs-lookup"><span data-stu-id="2bf76-128">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="2bf76-129">Para atualizar os membros de uma coleção de filhos, você deve chamar explicitamente `Attach` e especifique essa entidade.</span><span class="sxs-lookup"><span data-stu-id="2bf76-129">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
 <span data-ttu-id="2bf76-130">Para obter mais informações, consulte [recuperação de dados e operações de comida RUMINADA em aplicativos de N camadas (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="2bf76-130">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 <span data-ttu-id="2bf76-131">Não tente `Attach` uma entidade que não foi desanexada por meio de serialização.</span><span class="sxs-lookup"><span data-stu-id="2bf76-131">Do not try to `Attach` an entity that has not been detached through serialization.</span></span> <span data-ttu-id="2bf76-132">Entidades que não foi serializadas ainda mantenham as associações com carregadores adiadas que podem causar resultados inesperados se a entidade se tornará acompanhada por um segundo contexto de dados.</span><span class="sxs-lookup"><span data-stu-id="2bf76-132">Entities that have not been serialized still maintain associations with deferred loaders that can cause unexpected results if the entity becomes tracked by a second data context.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (TEntity entity, bool asModified);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Attach(!TEntity entity, bool asModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.Attach(`0,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As TEntity, asModified As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(TEntity entity, bool asModified);" />
      <MemberSignature Language="F#" Value="member this.Attach : 'Entity * bool -&gt; unit" Usage="table.Attach (entity, asModified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
        <Parameter Name="asModified" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="2bf76-133">A entidade a ser anexada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-133">The entity to be attached.</span>
          </span>
        </param>
        <param name="asModified">
          <span data-ttu-id="2bf76-134">
            <see langword="true" /> para anexar a entidade como modificada; <see langword="false" /> anexar a entidade como inalterada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-134">
              <see langword="true" /> to attach the entity as modified; <see langword="false" /> to attach the entity as unmodified.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2bf76-135">Anexa uma entidade ao <see cref="T:System.Data.Linq.DataContext" /> em um estado modificado ou inalterado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-135">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bf76-136">Se anexar *como modificado*, a entidade ou deve declarar um membro de versão ou não deve fazer parte de verificação de conflitos de atualização.</span><span class="sxs-lookup"><span data-stu-id="2bf76-136">If attaching *as modified*, the entity must either declare a version member or must not participate in update conflict checking.</span></span> <span data-ttu-id="2bf76-137">Quando uma nova entidade é anexada, adiada carregadores de todas as coleções filho (por exemplo, `EntitySet` coleções de entidades de tabelas associadas) são inicializados.</span><span class="sxs-lookup"><span data-stu-id="2bf76-137">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="2bf76-138">Quando <xref:System.Data.Linq.DataContext.SubmitChanges%2A> é chamado, os membros do filho coleções são colocadas em um `Unmodified` estado.</span><span class="sxs-lookup"><span data-stu-id="2bf76-138">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="2bf76-139">Para atualizar os membros de uma coleção de filhos, você deve chamar explicitamente `Attach` e especifique essa entidade.</span><span class="sxs-lookup"><span data-stu-id="2bf76-139">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (TEntity entity, TEntity original);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Attach(!TEntity entity, !TEntity original) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.Attach(`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As TEntity, original As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(TEntity entity, TEntity original);" />
      <MemberSignature Language="F#" Value="member this.Attach : 'Entity * 'Entity -&gt; unit" Usage="table.Attach (entity, original)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
        <Parameter Name="original" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="2bf76-140">A entidade a ser anexada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-140">The entity to be attached.</span>
          </span>
        </param>
        <param name="original">
          <span data-ttu-id="2bf76-141">Uma instância do mesmo tipo de entidade com membros de dados que contém os valores originais.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-141">An instance of the same entity type with data members that contain the original values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2bf76-142">Anexa uma entidade para o <see cref="T:System.Data.Linq.DataContext" /> em um estado modificado ou não modificado especificando a entidade e seu estado original.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-142">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state by specifying both the entity and its original state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bf76-143">No exemplo a seguir, o `Customer` objeto corretamente já está configurado.</span><span class="sxs-lookup"><span data-stu-id="2bf76-143">In the following example, the `Customer` object is already correctly configured.</span></span> <span data-ttu-id="2bf76-144">Você pode chamar `Attach` sem a necessidade de repetir as atualizações.</span><span class="sxs-lookup"><span data-stu-id="2bf76-144">You can call `Attach` without having to replay the updates.</span></span>  
  
 <span data-ttu-id="2bf76-145">Quando uma nova entidade é anexada, adiada carregadores de todas as coleções filho (por exemplo, `EntitySet` coleções de entidades de tabelas associadas) são inicializados.</span><span class="sxs-lookup"><span data-stu-id="2bf76-145">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="2bf76-146">Quando <xref:System.Data.Linq.DataContext.SubmitChanges%2A> é chamado, os membros do filho coleções são colocadas em um `Unmodified` estado.</span><span class="sxs-lookup"><span data-stu-id="2bf76-146">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="2bf76-147">Para atualizar os membros de uma coleção de filhos, você deve chamar explicitamente `Attach` e especifique essa entidade.</span><span class="sxs-lookup"><span data-stu-id="2bf76-147">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
   
  
## Examples  
 [!code-csharp[DLinqNTier#4](~/samples/snippets/csharp/VS_Snippets_Data/DLinqNTier/cs/Program.cs#4)]
 [!code-vb[DLinqNTier#4](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqNTier/vb/Module1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AttachAll&lt;TSubEntity&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2bf76-148">Anexa todas as entidades de uma coleção ao <see cref="T:System.Data.Linq.DataContext" /> em um estado inalterado ou modificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-148">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bf76-149">Se anexar como modificada, a entidade ou deve declarar um membro de versão ou não deve fazer parte de verificação de conflitos de atualização.</span><span class="sxs-lookup"><span data-stu-id="2bf76-149">If attaching as modified, the entity must either declare a version member or must not participate in update conflict checking.</span></span>  
  
 <span data-ttu-id="2bf76-150">Quando uma nova entidade é anexada, adiada carregadores de todas as coleções filho (por exemplo, `EntitySet` coleções de entidades de tabelas associadas) são inicializados.</span><span class="sxs-lookup"><span data-stu-id="2bf76-150">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="2bf76-151">Quando <xref:System.Data.Linq.DataContext.SubmitChanges%2A> é chamado, os membros do filho coleções são colocadas em um `Unmodified` estado.</span><span class="sxs-lookup"><span data-stu-id="2bf76-151">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="2bf76-152">Para atualizar os membros de uma coleção de filhos, você deve chamar explicitamente `Attach` e especifique essa entidade.</span><span class="sxs-lookup"><span data-stu-id="2bf76-152">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
 <span data-ttu-id="2bf76-153">Para obter mais informações, consulte [recuperação de dados e operações de comida RUMINADA em aplicativos de N camadas (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="2bf76-153">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AttachAll&lt;TSubEntity&gt;">
      <MemberSignature Language="C#" Value="public void AttachAll&lt;TSubEntity&gt; (System.Collections.Generic.IEnumerable&lt;TSubEntity&gt; entities) where TSubEntity : TEntity;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AttachAll&lt;(!TEntity) TSubEntity&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSubEntity&gt; entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub AttachAll(Of TSubEntity As TEntity) (entities As IEnumerable(Of TSubEntity))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSubEntity&gt;&#xA; where TSubEntity : TEntity void AttachAll(System::Collections::Generic::IEnumerable&lt;TSubEntity&gt; ^ entities);" />
      <MemberSignature Language="F#" Value="member this.AttachAll : seq&lt;#'Entity&gt; -&gt; unit" Usage="table.AttachAll entities" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSubEntity">
          <Constraints>
            <BaseTypeName>TEntity</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TSubEntity&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSubEntity">
          <span data-ttu-id="2bf76-154">O tipo de entidade a serem anexadas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-154">The type of entities to attach.</span>
          </span>
        </typeparam>
        <param name="entities">
          <span data-ttu-id="2bf76-155">A coleção de entidades.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-155">The collection of entities.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2bf76-156">Anexa todas as entidades de uma coleção ao <see cref="T:System.Data.Linq.DataContext" /> em um estado inalterado ou modificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-156">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bf76-157">Esse método anexa todas as entidades de uma coleção para um novo <xref:System.Data.Linq.DataContext>.</span><span class="sxs-lookup"><span data-stu-id="2bf76-157">This method attaches all entities of a collection to a new <xref:System.Data.Linq.DataContext>.</span></span> <span data-ttu-id="2bf76-158">Quando uma nova entidade é anexada, adiada carregadores de todas as coleções filho (por exemplo, `EntitySet` coleções de entidades de tabelas associadas) são inicializados.</span><span class="sxs-lookup"><span data-stu-id="2bf76-158">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="2bf76-159">Quando <xref:System.Data.Linq.DataContext.SubmitChanges%2A> é chamado, os membros do filho coleções são colocadas em um `Unmodified` estado.</span><span class="sxs-lookup"><span data-stu-id="2bf76-159">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="2bf76-160">Para atualizar os membros de uma coleção de filhos, você deve chamar explicitamente `Attach` e especifique essa entidade.</span><span class="sxs-lookup"><span data-stu-id="2bf76-160">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
 <span data-ttu-id="2bf76-161">Para obter mais informações, consulte [recuperação de dados e operações de comida RUMINADA em aplicativos de N camadas (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="2bf76-161">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AttachAll&lt;TSubEntity&gt;">
      <MemberSignature Language="C#" Value="public void AttachAll&lt;TSubEntity&gt; (System.Collections.Generic.IEnumerable&lt;TSubEntity&gt; entities, bool asModified) where TSubEntity : TEntity;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AttachAll&lt;(!TEntity) TSubEntity&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSubEntity&gt; entities, bool asModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AttachAll(Of TSubEntity As TEntity) (entities As IEnumerable(Of TSubEntity), asModified As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSubEntity&gt;&#xA; where TSubEntity : TEntity void AttachAll(System::Collections::Generic::IEnumerable&lt;TSubEntity&gt; ^ entities, bool asModified);" />
      <MemberSignature Language="F#" Value="member this.AttachAll : seq&lt;#'Entity&gt; * bool -&gt; unit" Usage="table.AttachAll (entities, asModified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSubEntity">
          <Constraints>
            <BaseTypeName>TEntity</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TSubEntity&gt;" />
        <Parameter Name="asModified" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TSubEntity">
          <span data-ttu-id="2bf76-162">O tipo de entidade a serem anexadas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-162">The type of entities to attach.</span>
          </span>
        </typeparam>
        <param name="entities">
          <span data-ttu-id="2bf76-163">A coleção de entidades.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-163">The collection of entities.</span>
          </span>
        </param>
        <param name="asModified">
          <span data-ttu-id="2bf76-164">
            <see langword="true" /> se o objeto tiver um membro RowVersion ou um carimbo de data/hora, <see langword="false" /> se os valores estiverem sendo usados para a verificação de simultaneidade otimista.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-164">
              <see langword="true" /> if the object has a timestamp or RowVersion member; <see langword="false" /> if original values are being used for the optimistic concurrency check.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2bf76-165">Anexa todas as entidades de uma coleção ao <see cref="T:System.Data.Linq.DataContext" /> em um estado inalterado ou modificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-165">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bf76-166">Esse método anexa todas as entidades de uma coleção para o <xref:System.Data.Linq.DataContext> em um *modificado* ou *inalterado* estado.</span><span class="sxs-lookup"><span data-stu-id="2bf76-166">This method attaches all entities of a collection to the <xref:System.Data.Linq.DataContext> in either a *modified* or *unmodified* state.</span></span> <span data-ttu-id="2bf76-167">Se anexar como modificada, a entidade ou deve declarar um membro de versão ou não deve fazer parte de verificação de conflitos de atualização.</span><span class="sxs-lookup"><span data-stu-id="2bf76-167">If attaching as modified, the entity must either declare a version member or must not participate in update conflict checking.</span></span> <span data-ttu-id="2bf76-168">Se anexar como não modificado, a entidade será assumida para representar o valor original.</span><span class="sxs-lookup"><span data-stu-id="2bf76-168">If attaching as unmodified, the entity is assumed to represent the original value.</span></span> <span data-ttu-id="2bf76-169">Depois de chamar esse método, os campos da entidade podem ser modificados com outras informações do cliente antes de <xref:System.Data.Linq.DataContext.SubmitChanges%2A> é chamado.</span><span class="sxs-lookup"><span data-stu-id="2bf76-169">After calling this method, the entity's fields can be modified with other information from the client before <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called.</span></span> <span data-ttu-id="2bf76-170">Para obter mais informações, consulte [recuperação de dados e operações de comida RUMINADA em aplicativos de N camadas (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="2bf76-170">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 <span data-ttu-id="2bf76-171">Quando uma nova entidade é anexada, adiada carregadores de todas as coleções filho (por exemplo, `EntitySet` coleções de entidades de tabelas associadas) são inicializados.</span><span class="sxs-lookup"><span data-stu-id="2bf76-171">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="2bf76-172">Quando <xref:System.Data.Linq.DataContext.SubmitChanges%2A> é chamado, os membros do filho coleções são colocadas em um `Unmodified` estado.</span><span class="sxs-lookup"><span data-stu-id="2bf76-172">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="2bf76-173">Para atualizar os membros de uma coleção de filhos, você deve chamar explicitamente `Attach` e especifique essa entidade.</span><span class="sxs-lookup"><span data-stu-id="2bf76-173">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2bf76-174">O exemplo a seguir mostra como você pode atualizar um `Order` objeto em outro <xref:System.Data.Linq.DataContext> instância.</span><span class="sxs-lookup"><span data-stu-id="2bf76-174">The following example shows how you can update an `Order` object on a different <xref:System.Data.Linq.DataContext> instance.</span></span> <span data-ttu-id="2bf76-175">O exemplo supõe que você tem uma conexão para um banco de dados e fazer uma [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] arquivo para ele (nesse caso, o banco de dados de exemplo Northwind).</span><span class="sxs-lookup"><span data-stu-id="2bf76-175">The example assumes that you have a connection to a database and have made a [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] file for it (in this case, the Northwind sample database).</span></span>  
  
 [!code-csharp[DLinqNTier#1](~/samples/snippets/csharp/VS_Snippets_Data/DLinqNTier/cs/Program.cs#1)]
 [!code-vb[DLinqNTier#1](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqNTier/vb/Module1.vb#1)]  
  
 <span data-ttu-id="2bf76-176">No exemplo a seguir, um objeto de entidade a ser anexado tem uma relação de chave estrangeira com outro objeto e é armazenado no cache, mas não anexado.</span><span class="sxs-lookup"><span data-stu-id="2bf76-176">In the following example, an entity object to be attached has a foreign key relation with another object and is stored in the cache but not attached.</span></span> <span data-ttu-id="2bf76-177">Quando você chama <xref:System.Data.Linq.DataContext.SubmitChanges%2A>, o `ChangeProcessor` adiciona um `Insert` operação para todos os objetos de chave estrangeiras.</span><span class="sxs-lookup"><span data-stu-id="2bf76-177">When you call <xref:System.Data.Linq.DataContext.SubmitChanges%2A>, the `ChangeProcessor` adds an `Insert` operation for all the foreign key objects.</span></span> <span data-ttu-id="2bf76-178">Este é um efeito colateral, quando uma instância de entidade é reutilizada em outro <xref:System.Data.Linq.DataContext> instância.</span><span class="sxs-lookup"><span data-stu-id="2bf76-178">This is a side-effect when an entity instance is re-used in a different <xref:System.Data.Linq.DataContext> instance.</span></span> <span data-ttu-id="2bf76-179">Por esse motivo, [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] não oferece suporte a reutilização de objetos.</span><span class="sxs-lookup"><span data-stu-id="2bf76-179">For this reason, [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] does not support re-use of objects.</span></span>  
  
 [!code-csharp[DlinqNTier#7](~/samples/snippets/csharp/VS_Snippets_Data/DLinqNTier/cs/Program.cs#7)]
 [!code-vb[DlinqNTier#7](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqNTier/vb/Module1.vb#7)]  
  
 <span data-ttu-id="2bf76-180">O exemplo a seguir mostra um cenário em que o cliente cancelou a todos os pedidos e cliente B tem assumir a propriedade deles.</span><span class="sxs-lookup"><span data-stu-id="2bf76-180">The following example shows a scenario in which Customer A has canceled all orders and Customer B has taken ownership of them.</span></span> <span data-ttu-id="2bf76-181">Você pode anexar todos os pedidos do cliente ao mesmo tempo.</span><span class="sxs-lookup"><span data-stu-id="2bf76-181">You can attach all orders of Customer A at the same time.</span></span>  
  
 [!code-csharp[DlinqNTier#3](~/samples/snippets/csharp/VS_Snippets_Data/DLinqNTier/cs/Program.cs#3)]
 [!code-vb[DlinqNTier#3](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqNTier/vb/Module1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="public System.Data.Linq.DataContext Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Linq.DataContext Context" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.Context" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Context As DataContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Linq::DataContext ^ Context { System::Data::Linq::DataContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Context : System.Data.Linq.DataContext" Usage="System.Data.Linq.Table&lt;'Entity (requires 'Entity : null)&gt;.Context" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Linq.DataContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2bf76-182">Obtém o <see cref="T:System.Data.Linq.DataContext" /> que foi usado para recuperar esse <see cref="T:System.Data.Linq.Table`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-182">Gets the <see cref="T:System.Data.Linq.DataContext" /> that has been used to retrieve this <see cref="T:System.Data.Linq.Table`1" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2bf76-183">O contexto de dados que foi usado para recuperar essa tabela.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-183">The data context that has been used to retrieve this table.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteAllOnSubmit&lt;TSubEntity&gt;">
      <MemberSignature Language="C#" Value="public void DeleteAllOnSubmit&lt;TSubEntity&gt; (System.Collections.Generic.IEnumerable&lt;TSubEntity&gt; entities) where TSubEntity : TEntity;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteAllOnSubmit&lt;(!TEntity) TSubEntity&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSubEntity&gt; entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.DeleteAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteAllOnSubmit(Of TSubEntity As TEntity) (entities As IEnumerable(Of TSubEntity))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSubEntity&gt;&#xA; where TSubEntity : TEntity void DeleteAllOnSubmit(System::Collections::Generic::IEnumerable&lt;TSubEntity&gt; ^ entities);" />
      <MemberSignature Language="F#" Value="member this.DeleteAllOnSubmit : seq&lt;#'Entity&gt; -&gt; unit" Usage="table.DeleteAllOnSubmit entities" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSubEntity">
          <Constraints>
            <BaseTypeName>TEntity</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TSubEntity&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSubEntity">
          <span data-ttu-id="2bf76-184">O tipo dos elementos a serem excluídos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-184">The type of the elements to delete.</span>
          </span>
        </typeparam>
        <param name="entities">
          <span data-ttu-id="2bf76-185">As entidades a serem excluídas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-185">The entities to delete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2bf76-186">Coloca todas as entidades da coleção em um estado <see langword="pending delete" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-186">Puts all entities from the collection into a <see langword="pending delete" /> state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bf76-187">Entidades que são colocadas no estado de exclusão pendente com esse método não desaparecem dos resultados de consulta até depois <xref:System.Data.Linq.DataContext.SubmitChanges%2A> é chamado.</span><span class="sxs-lookup"><span data-stu-id="2bf76-187">Entities that are put into the pending delete state with this method do not disappear from query results until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called.</span></span> <span data-ttu-id="2bf76-188">Entidades desconectadas devem ser conectadas antes de serem excluídos.</span><span class="sxs-lookup"><span data-stu-id="2bf76-188">Disconnected entities must be attached before they can be deleted.</span></span> <span data-ttu-id="2bf76-189">Para obter mais informações, consulte [recuperação de dados e operações de comida RUMINADA em aplicativos de N camadas (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="2bf76-189">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 <span data-ttu-id="2bf76-190">O trecho c# a seguir mostra um uso para este método:</span><span class="sxs-lookup"><span data-stu-id="2bf76-190">The following C# snippet shows one use for this method:</span></span>  
  
```  
IEnumerable<Customer> customersWithoutOrders = (from c in db.Customers  
   where c.Orders.Count == 0  
   select c).ToList();  
  
db.Customers.DeleteAllOnSubmit(customersWithoutOrders);  
db.SubmitChanges();  
```  
  
 <span data-ttu-id="2bf76-191">No Visual Basic:</span><span class="sxs-lookup"><span data-stu-id="2bf76-191">In Visual Basic:</span></span>  
  
```  
Dim customersWithoutOrders As IEnumerable(Of Customer) = (From c In db.Customers _   
    Where c.Orders.Count = 0 _   
    Select c).ToList()  
  
db.Customers.DeleteAllOnSubmit(customersWithoutOrders)  
db.SubmitChanges()  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteOnSubmit">
      <MemberSignature Language="C#" Value="public void DeleteOnSubmit (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteOnSubmit(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.DeleteOnSubmit(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteOnSubmit (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteOnSubmit(TEntity entity);" />
      <MemberSignature Language="F#" Value="member this.DeleteOnSubmit : 'Entity -&gt; unit" Usage="table.DeleteOnSubmit entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="2bf76-192">A entidade a ser excluída.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-192">The entity to be deleted.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2bf76-193">Coloca uma entidade desta tabela em um estado de <see langword="pending delete" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-193">Puts an entity from this table into a <see langword="pending delete" /> state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bf76-194">A entidade removida não desaparecerá dos resultados da consulta até depois <xref:System.Data.Linq.DataContext.SubmitChanges%2A> é chamado.</span><span class="sxs-lookup"><span data-stu-id="2bf76-194">The removed entity does not disappear from the query results until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called.</span></span> <span data-ttu-id="2bf76-195">Entidades desconectadas primeiro devem ser anexadas antes de serem excluídos.</span><span class="sxs-lookup"><span data-stu-id="2bf76-195">Disconnected entities must first be attached before they can be deleted.</span></span> <span data-ttu-id="2bf76-196">Para obter mais informações, consulte [recuperação de dados e operações de comida RUMINADA em aplicativos de N camadas (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="2bf76-196">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
> [!NOTE]
>  [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]<span data-ttu-id="2bf76-197"> não dá suporte ou reconhece as operações de exclusão em cascata.</span><span class="sxs-lookup"><span data-stu-id="2bf76-197"> does not support or recognize cascade-delete operations.</span></span> <span data-ttu-id="2bf76-198">Se você quiser excluir uma linha em uma tabela que tem restrições em relação a ela, você deve definir o `ON DELETE CASCADE` regra na restrição de chave estrangeira no banco de dados ou usar seu próprio código primeiro excluir os objetos filho que impedem que o objeto pai que está sendo excluído.</span><span class="sxs-lookup"><span data-stu-id="2bf76-198">If you want to delete a row in a table that has constraints against it, you must either set the `ON DELETE CASCADE` rule in the foreign-key constraint in the database, or use your own code to first delete the child objects that prevent the parent object from being deleted.</span></span> <span data-ttu-id="2bf76-199">Caso contrário, uma exceção será gerada.</span><span class="sxs-lookup"><span data-stu-id="2bf76-199">Otherwise, an exception is thrown.</span></span>  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.Table#3](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.table/cs/program.cs#3)]
 [!code-vb[System.Data.Linq.Table#3](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.table/vb/module1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;TEntity&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerator`1&lt;!TEntity&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerator&lt;TEntity&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'Entity (requires 'Entity : null)&gt;" Usage="table.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2bf76-200">Obtém um enumerador que itera por meio da coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-200">Gets an enumerator that iterates through the collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2bf76-201">Um enumerador que pode ser usado para iterar pela coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-201">An enumerator that can be used to iterate through the collection.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetModifiedMembers">
      <MemberSignature Language="C#" Value="public System.Data.Linq.ModifiedMemberInfo[] GetModifiedMembers (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.Linq.ModifiedMemberInfo[] GetModifiedMembers(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.GetModifiedMembers(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetModifiedMembers (entity As TEntity) As ModifiedMemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::Linq::ModifiedMemberInfo&gt; ^ GetModifiedMembers(TEntity entity);" />
      <MemberSignature Language="F#" Value="member this.GetModifiedMembers : 'Entity -&gt; System.Data.Linq.ModifiedMemberInfo[]" Usage="table.GetModifiedMembers entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Linq.ModifiedMemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="2bf76-202">A entidade da qual obter a matriz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-202">The entity from which to get the array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2bf76-203">Retorna uma matriz de membros modificados que contêm os valores atuais e originais.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-203">Returns an array of modified members that contain their current and original values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2bf76-204">Uma matriz de membros modificados que contêm os valores atuais e originais.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-204">An array of modified members that contain their current and original values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNewBindingList">
      <MemberSignature Language="C#" Value="public System.ComponentModel.IBindingList GetNewBindingList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ComponentModel.IBindingList GetNewBindingList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.GetNewBindingList" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNewBindingList () As IBindingList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ComponentModel::IBindingList ^ GetNewBindingList();" />
      <MemberSignature Language="F#" Value="member this.GetNewBindingList : unit -&gt; System.ComponentModel.IBindingList" Usage="table.GetNewBindingList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.IBindingList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2bf76-205">Cria uma nova lista para associar a uma fonte de dados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-205">Creates a new list for binding to a data source.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2bf76-206">Uma nova <see cref="T:System.ComponentModel.IBindingList" /> para associar a uma fonte de dados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-206">A new <see cref="T:System.ComponentModel.IBindingList" /> for binding to a data source.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bf76-207">A lista retornada dá suporte a operações padrão, como adições, exclusões, inserções e atualizações, mas salva deve ser explicitamente gerenciada pelo programador.</span><span class="sxs-lookup"><span data-stu-id="2bf76-207">The returned list supports standard operations, such as additions, deletions, insertions, and updates, but saves must be explicitly managed by the programmer.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOriginalEntityState">
      <MemberSignature Language="C#" Value="public TEntity GetOriginalEntityState (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !TEntity GetOriginalEntityState(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.GetOriginalEntityState(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOriginalEntityState (entity As TEntity) As TEntity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TEntity GetOriginalEntityState(TEntity entity);" />
      <MemberSignature Language="F#" Value="member this.GetOriginalEntityState : 'Entity -&gt; 'Entity" Usage="table.GetOriginalEntityState entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEntity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="2bf76-208">A entidade cujo estado original deve ser retornado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-208">The entity whose original state is to be returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2bf76-209">Retorna uma instância <see cref="T:System.Data.Linq.Table`1" /> que contém o estado original da entidade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-209">Returns a <see cref="T:System.Data.Linq.Table`1" /> instance that contains the original state of the entity.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2bf76-210">Uma instância <see cref="T:System.Data.Linq.Table`1" /> que contém o estado original da entidade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-210">A <see cref="T:System.Data.Linq.Table`1" /> instance that contains the original state of the entity.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bf76-211">Esse método retorna o estado original de uma entidade, desde que ele foi criado ou anexado a atual <xref:System.Data.Linq.DataContext>.</span><span class="sxs-lookup"><span data-stu-id="2bf76-211">This method returns the original state of an entity since it was either created or attached to the current <xref:System.Data.Linq.DataContext>.</span></span> <span data-ttu-id="2bf76-212">O estado original de uma entidade que serializados e desserializado deve ser fornecido por um mecanismo de controle independente e fornecido quando a entidade é anexada a um novo <xref:System.Data.Linq.DataContext>.</span><span class="sxs-lookup"><span data-stu-id="2bf76-212">The original state of an entity that has been serialized and deserialized must be provided by an independent tracking mechanism and supplied when the entity is attached to a new <xref:System.Data.Linq.DataContext>.</span></span> <span data-ttu-id="2bf76-213">Para obter mais informações, consulte [recuperação de dados e operações de comida RUMINADA em aplicativos de N camadas (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="2bf76-213">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertAllOnSubmit&lt;TSubEntity&gt;">
      <MemberSignature Language="C#" Value="public void InsertAllOnSubmit&lt;TSubEntity&gt; (System.Collections.Generic.IEnumerable&lt;TSubEntity&gt; entities) where TSubEntity : TEntity;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertAllOnSubmit&lt;(!TEntity) TSubEntity&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSubEntity&gt; entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.InsertAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertAllOnSubmit(Of TSubEntity As TEntity) (entities As IEnumerable(Of TSubEntity))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSubEntity&gt;&#xA; where TSubEntity : TEntity void InsertAllOnSubmit(System::Collections::Generic::IEnumerable&lt;TSubEntity&gt; ^ entities);" />
      <MemberSignature Language="F#" Value="member this.InsertAllOnSubmit : seq&lt;#'Entity&gt; -&gt; unit" Usage="table.InsertAllOnSubmit entities" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSubEntity">
          <Constraints>
            <BaseTypeName>TEntity</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TSubEntity&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSubEntity">
          <span data-ttu-id="2bf76-214">O tipo dos elementos a ser inserido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-214">The type of the elements to insert.</span>
          </span>
        </typeparam>
        <param name="entities">
          <span data-ttu-id="2bf76-215">As entidades a serem adicionadas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-215">The entities to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2bf76-216">Adiciona todas as entidades de uma coleção ao <see cref="T:System.Data.Linq.DataContext" /> em um estado <see langword="pending insert" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-216">Adds all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in a <see langword="pending insert" /> state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bf76-217">Não será adicionadas entidades nos resultados da consulta até depois <xref:System.Data.Linq.DataContext.SubmitChanges%2A> foi chamado.</span><span class="sxs-lookup"><span data-stu-id="2bf76-217">The added entities will not be in query results until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> has been called.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertOnSubmit">
      <MemberSignature Language="C#" Value="public void InsertOnSubmit (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertOnSubmit(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.InsertOnSubmit(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertOnSubmit (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertOnSubmit(TEntity entity);" />
      <MemberSignature Language="F#" Value="member this.InsertOnSubmit : 'Entity -&gt; unit" Usage="table.InsertOnSubmit entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="2bf76-218">A entidade a ser adicionada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-218">The entity to be added.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2bf76-219">Adiciona uma entidade em um estado <see langword="pending insert" /> a esse <see cref="T:System.Data.Linq.Table`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-219">Adds an entity in a <see langword="pending insert" /> state to this <see cref="T:System.Data.Linq.Table`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bf76-220">A entidade adicionada não aparecerá nos resultados da consulta dessa tabela até depois <xref:System.Data.Linq.DataContext.SubmitChanges%2A> foi chamado.</span><span class="sxs-lookup"><span data-stu-id="2bf76-220">The added entity will not appear in query results from this table until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> has been called.</span></span>  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.Table#1](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.table/cs/program.cs#1)]
 [!code-vb[System.Data.Linq.Table#1](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.table/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Data.Linq.Table&lt;'Entity (requires 'Entity : null)&gt;.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.Linq.ITable.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2bf76-221">Obtém um valor que indica se o tipo das entidades contidas nessa instância <see cref="T:System.Data.Linq.Table`1" /> tem uma chave primária.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-221">Gets a value that indicates whether the type of the entities contained in this <see cref="T:System.Data.Linq.Table`1" /> instance has a primary key.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2bf76-222">
            <see langword="true" /> Se o tipo de entidade não tem uma chave primária; Caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-222">
              <see langword="true" /> if the entity type does not have a primary key; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;TEntity&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;TEntity&gt; IEnumerable&lt;TEntity&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!TEntity&gt; System.Collections.Generic.IEnumerable&lt;TEntity&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Collections#Generic#IEnumerable&lt;TEntity&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of TEntity) Implements IEnumerable(Of TEntity).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;TEntity&gt; ^ System.Collections.Generic.IEnumerable&lt;TEntity&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;TEntity&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2bf76-223">Retorna um enumerador que itera pela coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-223">Returns an enumerator that iterates through the collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2bf76-224">Um enumerador que pode ser usado para iterar pela coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-224">An enumerator that can be used to iterate through the collection.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2bf76-225">Retorna um enumerador que itera pela coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-225">Returns an enumerator that iterates through the collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2bf76-226">Um enumerador que pode ser usado para iterar pela coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-226">An enumerator that can be used to iterate through the collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bf76-227">Este membro é uma implementação do membro de interface explícita.</span><span class="sxs-lookup"><span data-stu-id="2bf76-227">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2bf76-228">Ele só pode ser usado quando a instância de <xref:System.Data.Linq.Table%601> é convertida em uma interface de <xref:System.Collections.Generic.IEnumerable%601>.</span><span class="sxs-lookup"><span data-stu-id="2bf76-228">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Collections.Generic.IEnumerable%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.ContainsListCollection">
      <MemberSignature Language="C#" Value="bool System.ComponentModel.IListSource.ContainsListCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.System#ComponentModel#IListSource#ContainsListCollection" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ContainsListCollection As Boolean Implements IListSource.ContainsListCollection" />
      <MemberSignature Language="C++ CLI" Value="property bool System.ComponentModel.IListSource.ContainsListCollection { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Data.Linq.Table&lt;'Entity (requires 'Entity : null)&gt;.System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2bf76-229">Obtém um valor que indica se a coleção é uma coleção de objetos <see cref="T:System.Collections.IList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-229">Gets a value that indicates whether the collection is a collection of <see cref="T:System.Collections.IList" /> objects.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2bf76-230">
            <see langword="true" /> se a coleção for uma coleção de objetos <see cref="T:System.Collections.IList" />; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-230">
              <see langword="true" /> if the collection is a collection of <see cref="T:System.Collections.IList" /> objects; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bf76-231">Este membro é uma implementação do membro de interface explícita.</span><span class="sxs-lookup"><span data-stu-id="2bf76-231">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2bf76-232">Ele só pode ser usado quando a instância de <xref:System.Data.Linq.Table%601> é convertida em uma interface de <xref:System.ComponentModel.IListSource>.</span><span class="sxs-lookup"><span data-stu-id="2bf76-232">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.ComponentModel.IListSource> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.GetList">
      <MemberSignature Language="C#" Value="System.Collections.IList IListSource.GetList ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IList System.ComponentModel.IListSource.GetList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#ComponentModel#IListSource#GetList" />
      <MemberSignature Language="VB.NET" Value="Function GetList () As IList Implements IListSource.GetList" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IList ^ System.ComponentModel.IListSource.GetList() = System::ComponentModel::IListSource::GetList;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2bf76-233">Retorna um <see cref="T:System.Collections.IList" /> que pode ser associado a uma fonte de dados de um objeto que não implementa um <see cref="T:System.Collections.IList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-233">Returns an <see cref="T:System.Collections.IList" /> that can be bound to a data source from an object that does not implement an <see cref="T:System.Collections.IList" /> itself.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2bf76-234">Um <see cref="T:System.Collections.IList" /> que pode ser associado a uma fonte de dados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-234">An <see cref="T:System.Collections.IList" /> that can be bound to a data source.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bf76-235">Este membro é uma implementação do membro de interface explícita.</span><span class="sxs-lookup"><span data-stu-id="2bf76-235">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2bf76-236">Ele só pode ser usado quando a instância de <xref:System.Data.Linq.Table%601> é convertida em uma interface de <xref:System.ComponentModel.IListSource>.</span><span class="sxs-lookup"><span data-stu-id="2bf76-236">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.ComponentModel.IListSource> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="System.Data.Linq.ITable.Attach">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2bf76-237">Permite que entidades desserializadas sejam associadas uma nova instância de um <see cref="T:System.Data.Linq.DataContext" /> para que possam ser atualizados ou excluídos do banco de dados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-237">Allows deserialized entities to be associated with a new instance of a <see cref="T:System.Data.Linq.DataContext" /> so that they can be updated or deleted from the database.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="System.Data.Linq.ITable.Attach">
      <MemberSignature Language="C#" Value="void ITable.Attach (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.Attach(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Attach (entity As Object) Implements ITable.Attach" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.Attach(System::Object ^ entity) = System::Data::Linq::ITable::Attach;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.Attach(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="2bf76-238">A entidade a ser anexada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-238">The entity to be attached.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2bf76-239">Anexa uma entidade ao <see cref="T:System.Data.Linq.DataContext" /> em um estado inalterado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-239">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in an unmodified state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bf76-240">Este membro é uma implementação do membro de interface explícita.</span><span class="sxs-lookup"><span data-stu-id="2bf76-240">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2bf76-241">Ele só pode ser usado quando a instância de <xref:System.Data.Linq.Table%601> é convertida em uma interface de <xref:System.Data.Linq.ITable>.</span><span class="sxs-lookup"><span data-stu-id="2bf76-241">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.Attach">
      <MemberSignature Language="C#" Value="void ITable.Attach (object entity, bool asModified);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.Attach(object entity, bool asModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Sub Attach (entity As Object, asModified As Boolean) Implements ITable.Attach" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.Attach(System::Object ^ entity, bool asModified) = System::Data::Linq::ITable::Attach;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.Attach(System.Object,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
        <Parameter Name="asModified" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="2bf76-242">A entidade a ser anexada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-242">The entity to be attached.</span>
          </span>
        </param>
        <param name="asModified">
          <span data-ttu-id="2bf76-243">
            <see langword="true" /> para anexar a entidade como modificada; <see langword="false" /> para anexá-la como inalterada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-243">
              <see langword="true" /> to attach the entity as modified; <see langword="false" /> to attached the entity as unmodified.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2bf76-244">Anexa todas as entidades de uma coleção ao <see cref="T:System.Data.Linq.DataContext" /> em um estado inalterado ou modificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-244">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bf76-245">Este membro é uma implementação do membro de interface explícita.</span><span class="sxs-lookup"><span data-stu-id="2bf76-245">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2bf76-246">Ele só pode ser usado quando a instância de <xref:System.Data.Linq.Table%601> é convertida em uma interface de <xref:System.Data.Linq.ITable>.</span><span class="sxs-lookup"><span data-stu-id="2bf76-246">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.Attach">
      <MemberSignature Language="C#" Value="void ITable.Attach (object entity, object original);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.Attach(object entity, object original) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Attach (entity As Object, original As Object) Implements ITable.Attach" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.Attach(System::Object ^ entity, System::Object ^ original) = System::Data::Linq::ITable::Attach;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.Attach(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
        <Parameter Name="original" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="2bf76-247">A entidade a ser anexada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-247">The entity to be attached.</span>
          </span>
        </param>
        <param name="original">
          <span data-ttu-id="2bf76-248">Uma instância do mesmo tipo de entidade com membros de dados que contém os valores originais.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-248">An instance of the same entity type with data members that contain the original values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2bf76-249">Anexa uma entidade para o <see cref="T:System.Data.Linq.DataContext" /> em um estado modificado ou não modificado especificando a entidade e seu estado original.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-249">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state by specifying both the entity and its original state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bf76-250">Este membro é uma implementação do membro de interface explícita.</span><span class="sxs-lookup"><span data-stu-id="2bf76-250">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2bf76-251">Ele só pode ser usado quando a instância de <xref:System.Data.Linq.Table%601> é convertida em uma interface de <xref:System.Data.Linq.ITable>.</span><span class="sxs-lookup"><span data-stu-id="2bf76-251">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="System.Data.Linq.ITable.AttachAll">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2bf76-252">Anexa todas as entidades de uma coleção ao <see cref="T:System.Data.Linq.DataContext" /> em um estado inalterado ou modificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-252">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="System.Data.Linq.ITable.AttachAll">
      <MemberSignature Language="C#" Value="void ITable.AttachAll (System.Collections.IEnumerable entities);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.AttachAll(class System.Collections.IEnumerable entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#AttachAll(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Sub AttachAll (entities As IEnumerable) Implements ITable.AttachAll" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.AttachAll(System::Collections::IEnumerable ^ entities) = System::Data::Linq::ITable::AttachAll;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="entities">
          <span data-ttu-id="2bf76-253">A coleção de entidades a serem anexadas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-253">The collection of entities to be attached.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2bf76-254">Anexa todas as entidades de uma coleção ao <see cref="T:System.Data.Linq.DataContext" /> em um estado inalterado ou modificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-254">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bf76-255">Este membro é uma implementação do membro de interface explícita.</span><span class="sxs-lookup"><span data-stu-id="2bf76-255">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2bf76-256">Ele só pode ser usado quando a instância de <xref:System.Data.Linq.Table%601> é convertida em uma interface de <xref:System.Data.Linq.ITable>.</span><span class="sxs-lookup"><span data-stu-id="2bf76-256">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.AttachAll">
      <MemberSignature Language="C#" Value="void ITable.AttachAll (System.Collections.IEnumerable entities, bool asModified);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.AttachAll(class System.Collections.IEnumerable entities, bool asModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#AttachAll(System.Collections.IEnumerable,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Sub AttachAll (entities As IEnumerable, asModified As Boolean) Implements ITable.AttachAll" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.AttachAll(System::Collections::IEnumerable ^ entities, bool asModified) = System::Data::Linq::ITable::AttachAll;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
        <Parameter Name="asModified" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="entities">
          <span data-ttu-id="2bf76-257">A coleção de entidades a serem anexadas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-257">The collection of entities to be attched.</span>
          </span>
        </param>
        <param name="asModified">
          <span data-ttu-id="2bf76-258">
            <see langword="true" /> para anexar as entidades como modificadas; <see langword="false" /> para anexá-las como inalteradas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-258">
              <see langword="true" /> to attach the entities as modified; <see langword="false" /> to attach the entities as unmodified.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2bf76-259">Anexa todas as entidades de uma coleção ao <see cref="T:System.Data.Linq.DataContext" /> em um estado inalterado ou modificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-259">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bf76-260">Este membro é uma implementação do membro de interface explícita.</span><span class="sxs-lookup"><span data-stu-id="2bf76-260">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2bf76-261">Ele só pode ser usado quando a instância de <xref:System.Data.Linq.Table%601> é convertida em uma interface de <xref:System.Data.Linq.ITable>.</span><span class="sxs-lookup"><span data-stu-id="2bf76-261">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.DeleteAllOnSubmit">
      <MemberSignature Language="C#" Value="void ITable.DeleteAllOnSubmit (System.Collections.IEnumerable entities);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.DeleteAllOnSubmit(class System.Collections.IEnumerable entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteAllOnSubmit(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Sub DeleteAllOnSubmit (entities As IEnumerable) Implements ITable.DeleteAllOnSubmit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.DeleteAllOnSubmit(System::Collections::IEnumerable ^ entities) = System::Data::Linq::ITable::DeleteAllOnSubmit;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.DeleteAllOnSubmit(System.Collections.IEnumerable)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="entities">
          <span data-ttu-id="2bf76-262">As entidades que estão sendo removidas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-262">The entities being removed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2bf76-263">Coloca todas as entidades da coleção em um estado <see langword="pending delete" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-263">Puts all entities from the collection into a <see langword="pending delete" /> state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bf76-264">Este membro é uma implementação do membro de interface explícita.</span><span class="sxs-lookup"><span data-stu-id="2bf76-264">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2bf76-265">Ele só pode ser usado quando a instância de <xref:System.Data.Linq.Table%601> é convertida em uma interface de <xref:System.Data.Linq.ITable>.</span><span class="sxs-lookup"><span data-stu-id="2bf76-265">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.DeleteOnSubmit">
      <MemberSignature Language="C#" Value="void ITable.DeleteOnSubmit (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.DeleteOnSubmit(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteOnSubmit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub DeleteOnSubmit (entity As Object) Implements ITable.DeleteOnSubmit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.DeleteOnSubmit(System::Object ^ entity) = System::Data::Linq::ITable::DeleteOnSubmit;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.DeleteOnSubmit(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="2bf76-266">A entidade a ser removida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-266">The entity to be removed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2bf76-267">Coloca uma entidade desta tabela em um estado de <see langword="pending delete" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-267">Puts an entity from this table into a <see langword="pending delete" /> state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bf76-268">Este membro é uma implementação do membro de interface explícita.</span><span class="sxs-lookup"><span data-stu-id="2bf76-268">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2bf76-269">Ele só pode ser usado quando a instância de <xref:System.Data.Linq.Table%601> é convertida em uma interface de <xref:System.Data.Linq.ITable>.</span><span class="sxs-lookup"><span data-stu-id="2bf76-269">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
> [!NOTE]
>  [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]<span data-ttu-id="2bf76-270"> não dá suporte ou reconhece as operações de exclusão em cascata.</span><span class="sxs-lookup"><span data-stu-id="2bf76-270"> does not support or recognize cascade-delete operations.</span></span> <span data-ttu-id="2bf76-271">Se você quiser excluir uma linha em uma tabela que tem restrições em relação a ela, você deve definir o `ON DELETE CASCADE` regra na restrição de chave estrangeira no banco de dados ou usar seu próprio código primeiro excluir os objetos filho que impedem que o objeto pai que está sendo excluído.</span><span class="sxs-lookup"><span data-stu-id="2bf76-271">If you want to delete a row in a table that has constraints against it, you must either set the `ON DELETE CASCADE` rule in the foreign-key constraint in the database, or use your own code to first delete the child objects that prevent the parent object from being deleted.</span></span> <span data-ttu-id="2bf76-272">Caso contrário, uma exceção será gerada.</span><span class="sxs-lookup"><span data-stu-id="2bf76-272">Otherwise, an exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.GetModifiedMembers">
      <MemberSignature Language="C#" Value="System.Data.Linq.ModifiedMemberInfo[] ITable.GetModifiedMembers (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Data.Linq.ModifiedMemberInfo[] System.Data.Linq.ITable.GetModifiedMembers(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#GetModifiedMembers(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function GetModifiedMembers (entity As Object) As ModifiedMemberInfo() Implements ITable.GetModifiedMembers" />
      <MemberSignature Language="C++ CLI" Value=" virtual cli::array &lt;System::Data::Linq::ModifiedMemberInfo&gt; ^ System.Data.Linq.ITable.GetModifiedMembers(System::Object ^ entity) = System::Data::Linq::ITable::GetModifiedMembers;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.GetModifiedMembers(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("NOT IMPLEMENTED YET")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Linq.ModifiedMemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="2bf76-273">A entidade da qual se obtém os membros modificados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-273">The entity from which to obtain the modified members.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2bf76-274">Retorna uma matriz de membros modificados que contêm os valores atuais e originais.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-274">Returns an array of modified members that contain their current and original values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2bf76-275">Uma matriz de membros modificados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-275">An array of modified members.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bf76-276">Este membro é uma implementação do membro de interface explícita.</span><span class="sxs-lookup"><span data-stu-id="2bf76-276">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2bf76-277">Ele só pode ser usado quando a instância de <xref:System.Data.Linq.Table%601> é convertida em uma interface de <xref:System.Data.Linq.ITable>.</span><span class="sxs-lookup"><span data-stu-id="2bf76-277">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.GetOriginalEntityState">
      <MemberSignature Language="C#" Value="object ITable.GetOriginalEntityState (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.Data.Linq.ITable.GetOriginalEntityState(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#GetOriginalEntityState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function GetOriginalEntityState (entity As Object) As Object Implements ITable.GetOriginalEntityState" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.Data.Linq.ITable.GetOriginalEntityState(System::Object ^ entity) = System::Data::Linq::ITable::GetOriginalEntityState;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.GetOriginalEntityState(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("NOT IMPLEMENTED YET")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="2bf76-278">A entidade cujo estado original deve ser acessado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-278">The entity whose original state is to be accessed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2bf76-279">Recupera os valores originais de uma determinada entidade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-279">Retrieves original values of a given entity.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2bf76-280">Uma cópia da entidade original.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-280">A copy of the original entity.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bf76-281">Este membro é uma implementação do membro de interface explícita.</span><span class="sxs-lookup"><span data-stu-id="2bf76-281">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2bf76-282">Ele só pode ser usado quando a instância de <xref:System.Data.Linq.Table%601> é convertida em uma interface de <xref:System.Data.Linq.ITable>.</span><span class="sxs-lookup"><span data-stu-id="2bf76-282">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.InsertAllOnSubmit">
      <MemberSignature Language="C#" Value="void ITable.InsertAllOnSubmit (System.Collections.IEnumerable entities);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.InsertAllOnSubmit(class System.Collections.IEnumerable entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#InsertAllOnSubmit(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Sub InsertAllOnSubmit (entities As IEnumerable) Implements ITable.InsertAllOnSubmit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.InsertAllOnSubmit(System::Collections::IEnumerable ^ entities) = System::Data::Linq::ITable::InsertAllOnSubmit;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.InsertAllOnSubmit(System.Collections.IEnumerable)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="entities">
          <span data-ttu-id="2bf76-283">A coleção de entidades a ser adicionada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-283">The collection of entities to be added.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2bf76-284">Adiciona todas as entidades de uma coleção ao <see cref="T:System.Data.Linq.DataContext" /> em um estado <see langword="pending insert" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-284">Adds all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in an <see langword="pending insert" /> state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bf76-285">Este membro é uma implementação do membro de interface explícita.</span><span class="sxs-lookup"><span data-stu-id="2bf76-285">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2bf76-286">Ele só pode ser usado quando a instância de <xref:System.Data.Linq.Table%601> é convertida em uma interface de <xref:System.Data.Linq.ITable>.</span><span class="sxs-lookup"><span data-stu-id="2bf76-286">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.InsertOnSubmit">
      <MemberSignature Language="C#" Value="void ITable.InsertOnSubmit (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.InsertOnSubmit(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#InsertOnSubmit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub InsertOnSubmit (entity As Object) Implements ITable.InsertOnSubmit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.InsertOnSubmit(System::Object ^ entity) = System::Data::Linq::ITable::InsertOnSubmit;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.InsertOnSubmit(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="2bf76-287">A entidade a ser adicionada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-287">The entity to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2bf76-288">Adiciona uma entidade em um estado <see langword="pending insert" /> a esta tabela.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-288">Adds an entity in a <see langword="pending insert" /> state to this table.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bf76-289">Este membro é uma implementação do membro de interface explícita.</span><span class="sxs-lookup"><span data-stu-id="2bf76-289">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2bf76-290">Ele só pode ser usado quando a instância de <xref:System.Data.Linq.Table%601> é convertida em uma interface de <xref:System.Data.Linq.ITable>.</span><span class="sxs-lookup"><span data-stu-id="2bf76-290">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryable.ElementType">
      <MemberSignature Language="C#" Value="Type System.Linq.IQueryable.ElementType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type System.Linq.IQueryable.ElementType" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.System#Linq#IQueryable#ElementType" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ElementType As Type Implements IQueryable.ElementType" />
      <MemberSignature Language="C++ CLI" Value="property Type ^ System.Linq.IQueryable.ElementType { Type ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Data.Linq.Table&lt;'Entity (requires 'Entity : null)&gt;.System.Linq.IQueryable.ElementType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2bf76-291">Obtém o tipo de elemento(s) retornado quando a árvore de expressão associada a esse objeto é executada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-291">Gets the type of the element(s) that are returned when the expression tree associated with this object is executed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2bf76-292">O tipo de elemento (s) que é retornadas quando a árvore de expressão associada a esse objeto é executada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-292">The type of the element(s) that are returned when the expression tree associated with this object is executed.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bf76-293">Este membro é uma implementação do membro de interface explícita.</span><span class="sxs-lookup"><span data-stu-id="2bf76-293">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2bf76-294">Ele só pode ser usado quando a instância de <xref:System.Data.Linq.Table%601> é convertida em uma interface de <xref:System.Linq.IQueryable>.</span><span class="sxs-lookup"><span data-stu-id="2bf76-294">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryable.Expression">
      <MemberSignature Language="C#" Value="System.Linq.Expressions.Expression System.Linq.IQueryable.Expression { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.Expression System.Linq.IQueryable.Expression" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.System#Linq#IQueryable#Expression" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Expression As Expression Implements IQueryable.Expression" />
      <MemberSignature Language="C++ CLI" Value="property System::Linq::Expressions::Expression ^ System.Linq.IQueryable.Expression { System::Linq::Expressions::Expression ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Data.Linq.Table&lt;'Entity (requires 'Entity : null)&gt;.System.Linq.IQueryable.Expression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2bf76-295">Obtém a árvore de expressão associada a essa instância do <see cref="T:System.Linq.IQueryable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-295">Gets the expression tree that is associated with this instance of <see cref="T:System.Linq.IQueryable" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2bf76-296">A <see cref="T:System.Linq.Expressions.Expression" /> associada a essa instância de <see cref="T:System.Linq.IQueryable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-296">The <see cref="T:System.Linq.Expressions.Expression" /> that is associated with this instance of <see cref="T:System.Linq.IQueryable" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bf76-297">Este membro é uma implementação do membro de interface explícita.</span><span class="sxs-lookup"><span data-stu-id="2bf76-297">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2bf76-298">Ele só pode ser usado quando a instância de <xref:System.Data.Linq.Table%601> é convertida em uma interface de <xref:System.Linq.IQueryable>.</span><span class="sxs-lookup"><span data-stu-id="2bf76-298">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryable.Provider">
      <MemberSignature Language="C#" Value="System.Linq.IQueryProvider System.Linq.IQueryable.Provider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.IQueryProvider System.Linq.IQueryable.Provider" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.System#Linq#IQueryable#Provider" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Provider As IQueryProvider Implements IQueryable.Provider" />
      <MemberSignature Language="C++ CLI" Value="property System::Linq::IQueryProvider ^ System.Linq.IQueryable.Provider { System::Linq::IQueryProvider ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Data.Linq.Table&lt;'Entity (requires 'Entity : null)&gt;.System.Linq.IQueryable.Provider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2bf76-299">Obtém o provedor de consulta associado esta fonte de dados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-299">Gets the query provider that is associated with this data source.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2bf76-300">A <see cref="T:System.Linq.IQueryProvider" /> associado a essa fonte de dados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-300">The <see cref="T:System.Linq.IQueryProvider" /> that is associated with this data source.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bf76-301">Este membro é uma implementação do membro de interface explícita.</span><span class="sxs-lookup"><span data-stu-id="2bf76-301">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2bf76-302">Ele só pode ser usado quando a instância de <xref:System.Data.Linq.Table%601> é convertida em uma interface de <xref:System.Linq.IQueryable>.</span><span class="sxs-lookup"><span data-stu-id="2bf76-302">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryProvider.CreateQuery">
      <MemberSignature Language="C#" Value="System.Linq.IQueryable IQueryProvider.CreateQuery (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Linq.IQueryable System.Linq.IQueryProvider.CreateQuery(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Linq::IQueryable ^ System.Linq.IQueryProvider.CreateQuery(System::Linq::Expressions::Expression ^ expression) = System::Linq::IQueryProvider::CreateQuery;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="2bf76-303">A expressão de consulta em que a avaliação é executada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-303">The query expression from which the evaluation is performed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2bf76-304">Constrói um objeto <see cref="T:System.Linq.IQueryable" /> que pode avaliar a consulta representada por uma árvore de expressão especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-304">Constructs an <see cref="T:System.Linq.IQueryable" /> object that can evaluate the query represented by a specified expression tree.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2bf76-305">Um objeto <see cref="T:System.Linq.IQueryable" /> que pode avaliar a consulta representada pela árvore de expressão especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-305">An <see cref="T:System.Linq.IQueryable" /> that can evaluate the query represented by the specified expression tree.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bf76-306">Este membro é uma implementação do membro de interface explícita.</span><span class="sxs-lookup"><span data-stu-id="2bf76-306">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2bf76-307">Ele só pode ser usado quando a instância de <xref:System.Data.Linq.Table%601> é convertida em uma interface de <xref:System.Linq.IQueryProvider>.</span><span class="sxs-lookup"><span data-stu-id="2bf76-307">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryProvider.CreateQuery&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="System.Linq.IQueryable&lt;TResult&gt; IQueryProvider.CreateQuery&lt;TResult&gt; (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;!!TResult&gt; System.Linq.IQueryProvider.CreateQuery&lt;TResult&gt;(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA; virtual System::Linq::IQueryable&lt;TResult&gt; ^ System.Linq.IQueryProvider.CreateQuery(System::Linq::Expressions::Expression ^ expression) = System::Linq::IQueryProvider::CreateQuery;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="2bf76-308">O tipo de dados na tabela.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-308">The type of the data in the table.</span>
          </span>
        </typeparam>
        <param name="expression">
          <span data-ttu-id="2bf76-309">A expressão de consulta em que a avaliação é executada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-309">The query expression from which the evaluation is performed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2bf76-310">Constrói um objeto <see cref="T:System.Linq.IQueryable`1" /> que pode avaliar a consulta representada por uma árvore de expressão especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-310">Constructs an <see cref="T:System.Linq.IQueryable`1" /> object that can evaluate the query represented by a specified expression tree.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2bf76-311">Um objeto <see cref="T:System.Linq.IQueryable`1" /> que pode avaliar a consulta representada pela árvore de expressão especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-311">An <see cref="T:System.Linq.IQueryable`1" /> that can evaluate the query represented by the specified expression tree.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bf76-312">Este membro é uma implementação do membro de interface explícita.</span><span class="sxs-lookup"><span data-stu-id="2bf76-312">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2bf76-313">Ele só pode ser usado quando a instância de <xref:System.Data.Linq.Table%601> é convertida em uma interface de <xref:System.Linq.IQueryProvider>.</span><span class="sxs-lookup"><span data-stu-id="2bf76-313">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryProvider.Execute">
      <MemberSignature Language="C#" Value="object IQueryProvider.Execute (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.Linq.IQueryProvider.Execute(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.Linq.IQueryProvider.Execute(System::Linq::Expressions::Expression ^ expression) = System::Linq::IQueryProvider::Execute;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="2bf76-314">A expressão de consulta a ser executada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-314">The query expression to execute.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2bf76-315">Executa a consulta representada por uma árvore de expressão especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-315">Executes the query represented by a specified expression tree.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2bf76-316">O valor resultante da execução da consulta especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-316">The value that results from executing the specified query.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bf76-317">Este membro é uma implementação do membro de interface explícita.</span><span class="sxs-lookup"><span data-stu-id="2bf76-317">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2bf76-318">Ele só pode ser usado quando a instância de <xref:System.Data.Linq.Table%601> é convertida em uma interface de <xref:System.Linq.IQueryProvider>.</span><span class="sxs-lookup"><span data-stu-id="2bf76-318">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryProvider.Execute&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="TResult IQueryProvider.Execute&lt;TResult&gt; (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance !!TResult System.Linq.IQueryProvider.Execute&lt;TResult&gt;(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA; virtual TResult System.Linq.IQueryProvider.Execute(System::Linq::Expressions::Expression ^ expression) = System::Linq::IQueryProvider::Execute;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="2bf76-319">O tipo de dados na tabela.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-319">The type of the data in the table.</span>
          </span>
        </typeparam>
        <param name="expression">
          <span data-ttu-id="2bf76-320">A expressão de consulta a ser executada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-320">The query expression to execute.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2bf76-321">Executa a consulta fortemente tipada representada por uma árvore de expressão especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-321">Executes the strongly-typed query represented by a specified expression tree.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2bf76-322">O valor resultante da execução da consulta especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-322">The value that results from executing the specified query.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bf76-323">Este membro é uma implementação do membro de interface explícita.</span><span class="sxs-lookup"><span data-stu-id="2bf76-323">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2bf76-324">Ele só pode ser usado quando a instância de <xref:System.Data.Linq.Table%601> é convertida em uma interface de <xref:System.Linq.IQueryProvider>.</span><span class="sxs-lookup"><span data-stu-id="2bf76-324">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="table.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2bf76-325">Retorna uma cadeia de caracteres que representa a tabela.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-325">Returns a string that represents the table.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2bf76-326">Uma representação de cadeia de caracteres da tabela.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bf76-326">A string representation of the table.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>