<Type Name="AmbientAttribute" FullName="System.Windows.Markup.AmbientAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6a4ff60fed16d6cce41ca00324ef7bc44fc9a77f" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51924114" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class AmbientAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AmbientAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.AmbientAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AmbientAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class AmbientAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type AmbientAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Method | System.AttributeTargets.Property, Inherited=true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Property, Inherited=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Especifica que uma propriedade ou tipo deve ser tratado como ambiente. O conceito de ambiente está relacionado a como os processadores XAML determinam os proprietários do tipo dos membros.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uma propriedade de ambiente é uma propriedade em que o valor deve estar disponível no contexto do analisador durante a criação de um gráfico de objeto, mas em que a pesquisa de membro de tipo comum é suspenso para fins do nó XAML imediato conjunto que está sendo criado. Há dois cenários principais para o conceito de ambiente:  
  
-   Outra propriedade do mesmo objeto influencia e se qualifica como essa pesquisa de propriedade do objeto deve funcionar.  
  
-   A propriedade representa um mecanismo de adiamento maior e os recursos de ambientes para pesquisar um valor do membro ampliam a todos os objetos contidos no objeto atual.  
  
 Esse atributo pode ser aplicado a propriedades específicas que esperavam que os contêineres que permitem que um comportamento de pesquisa de propriedade de ambiente ou pode ser aplicado a uma classe para habilitar o comportamento de propriedade de ambiente em todos os casos desse tipo de valor para uma propriedade.  
  
 <xref:System.Windows.Markup.AmbientAttribute> também pode ser aplicado a um método do CLR, para dar suporte à atribuição de uma propriedade anexável de XAML como o ambiente. Isso é potencialmente necessário porque em uma implementação de CLR um XAML propriedade anexada é implementado/representada à reflexão como padrão um acessador com `get` e `set` métodos. Nenhuma propriedade CLR real ao atributo existe, então, restringir o uso de <xref:System.AttributeTargets> para `Property` seria não tenha habilitado a especificação de um membro anexável como o ambiente. Para um membro anexável que você deseja relatar como ambiente, o atributo de `get` acessador. Você não deve tentar métodos de atributo que não são especificamente os métodos de suporte de membros anexáveis.  
  
 Nas versões anteriores do .NET Framework, essa classe já existe no assembly WindowsBase específicas do WPF. Na [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.AmbientAttribute> está no assembly System. XAML. Para obter mais informações, consulte [tipos migrados do WPF para System. XAML](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md).  
  
 Tipos de ambiente (tipos onde <xref:System.Windows.Markup.AmbientAttribute> é aplicada no nível do tipo) pode ser usado para determinadas situações de processamento de XAML em que o tipo de uma propriedade deve ser resolvido fora de ordem.  
  
## <a name="object-writer-scenarios"></a>Cenários de gravador de objeto  
 Se você estiver definindo um gravador de objeto XAML, e você encontrar uma propriedade, método ou tipo onde <xref:System.Windows.Markup.AmbientAttribute> é aplicado, você normalmente deve acessar um serviço para determinar o comportamento de pesquisa de propriedade de ambiente pretendido é necessária para a gravação de objetos. Para obter mais informações, consulte <xref:System.Xaml.IAmbientProvider>.  
  
## <a name="value-converters"></a>Conversores de valor  
 Conversores de tipo ou extensões de marcação talvez seja necessário conhecer as informações de ambientes para processar as propriedades que representam os mapeamentos de tipo indireto, como as propriedades que especificam tipos ou membros por nomes de cadeia de caracteres com ou sem qualificação. Nesse cenário, <xref:System.Windows.Markup.AmbientAttribute> não se destina a ser usado diretamente para a lógica de código de conversor de valor. Em vez disso, o conversor de valor deve depender o comportamento de processamento de gravador XAML, que irá passar <xref:System.Xaml.IAmbientProvider> em seus contextos de serviço a seus métodos de conversor de valor quando chamado.  
  
## <a name="wpf-scenarios-for-ambientattribute"></a>Cenários WPF para AmbientAttribute  
  
-   Uma propriedade de um <xref:System.Windows.Style> (<xref:System.Windows.Style.TargetType%2A>) pode se qualificar para as pesquisas de nome de propriedade necessários que são necessários para localizar as referências de suporte para nomes de propriedade em <xref:System.Windows.Setter.Property%2A?displayProperty=nameWithType> valores.  
  
-   Todo o conteúdo dentro de um `Resources` propriedade (itens de um <xref:System.Windows.ResourceDictionary>), bem como o conteúdo do modelo, deve ser capaz de acessar outros pares de valores. Declarando todo o `Resources` a propriedade como ambiente invoca a lógica que permite isso no analisador de XAML WPF.  
  
 Ver <xref:System.Windows.ResourceDictionary> para obter um exemplo de um cenário de configuração <xref:System.Windows.Markup.AmbientAttribute> no nível do tipo.  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Xaml.XamlMember.IsAmbient" />
    <altmember cref="T:System.Xaml.XamlMember" />
    <altmember cref="T:System.Xaml.IAmbientProvider" />
    <related type="Article" href="https://msdn.microsoft.com/library/5dfb299a-b6e2-41b8-8694-e6ac987547f1">Atributos CLR relacionados a XAML para tipos personalizados e bibliotecas</related>
    <related type="Article" href="https://msdn.microsoft.com/library/c2667cbd-2f46-4a7f-9dfc-53696e35e8e4">Definindo tipos personalizados para uso com serviços XAML do .NET Framework</related>
    <related type="Article" href="https://msdn.microsoft.com/library/0e11f386-808c-4eae-9ba6-029ad7ba2211">Documentação conceitual de serviços XAML do NET</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AmbientAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.AmbientAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AmbientAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.Markup.AmbientAttribute" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>