<Type Name="XamlReader" FullName="System.Windows.Markup.XamlReader">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="eb09b92c85f6899f8f0386e85d5fda59b541d871" />
    <Meta Name="ms.sourcegitcommit" Value="4303c81814c0b4fd5963444073ed25c176c5ddad" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="07/31/2018" />
    <Meta Name="ms.locfileid" Value="39361135" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XamlReader" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlReader extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.XamlReader" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlReader" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlReader" />
  <TypeSignature Language="F#" Value="type XamlReader = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Lê a entrada XAML e cria um grafo de objeto, usando o leitor XAML do WPF padrão e um gravador de objeto XAML associado.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Síncronos <xref:System.Windows.Markup.XamlReader.Load%2A> métodos são estáticos, mas assíncrona <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> métodos não são estáticos e exigem uma instância da <xref:System.Windows.Markup.XamlReader> classe a ser usada.  
  
 A saída a `Load` métodos é um único objeto, que representa o objeto raiz de uma árvore de objeto criado ou um gráfico de objeto. Objeto gráficos que são criados por <xref:System.Windows.Markup.XamlReader> normalmente são adicionados à árvore de objetos existentes de um aplicativo WPF no tempo de execução. Caso contrário, o novo gráfico de objeto é considerado desconectado para fins do modelo de aplicativo do WPF. Isso significa que ele não renderizar e não pode ser acessado usando qualquer uma das técnicas de árvore de objeto, como aplicado à árvore de objeto principal do aplicativo WPF (por exemplo, as APIs <xref:System.Windows.FrameworkElement.FindName%2A>, <xref:System.Windows.LogicalTreeHelper>, <xref:System.Windows.Media.VisualTreeHelper>). Para obter mais informações sobre os conceitos de árvore de objeto, consulte [árvores no WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md).  
  
 <xref:System.Windows.Markup.XamlReader> dá suporte aos seguintes cenários principais:  
  
-   **Fábrica de clonagem/objeto**: sem mecanismos adicionais, um tipo de referência não pode ser geralmente incluído em mais de uma posição em uma árvore de objetos do WPF. (Exemplos de mecanismos adicionais que oferecem suporte para o compartilhamento ou usam novamente no WPF se baseiam em objetos <xref:System.Windows.Freezable>, ou suporte para objetos podem ser compartilhados com frequência, como <xref:System.Windows.Media.Brush> que são referenciados como um item de um <xref:System.Windows.ResourceDictionary>.) Uma maneira para clonar um objeto que já está no árvore de objetos é serializar o objeto usando <xref:System.Windows.Markup.XamlWriter.Save%2A?displayProperty=nameWithType>. Você, em seguida, usa a cadeia de caracteres serializada como entrada para uma chamada para <xref:System.Windows.Markup.XamlReader.Load%2A>, com um fluxo ou <xref:System.Xml.XmlReader> como um intermediário.  
  
-   **Construindo objetos com base nas informações de just-in-time**: geralmente, há outras maneiras de se ter entrada de associação tardia ou fornecido pelo usuário a alterar o estado de objetos existentes. Por exemplo você pode usar o mesmo valor para definir mais de uma propriedade ou usar associação de dados. Mas se você tiver um cenário em que até mesmo o tipo de objeto a ser criado apenas é determinável em tempo de execução ou interação do usuário, em seguida, criando desse objeto, criando uma cadeia de caracteres para <xref:System.Windows.Markup.XamlReader.Load%2A> entrada geralmente é uma técnica útil.  
  
-   **Usando técnicas de recursos existentes**: O <xref:System.IO.Stream> tipo é usado frequentemente em outras estruturas ou tecnologias para a transferência de dados ou objetos entre limites de aplicativo ou em situações semelhantes. Você pode usar o <xref:System.IO.Stream> técnicas para armazenar ou obter dados formatados em XAML que você eventualmente usará para criar um objeto como parte de seu aplicativo.  
  
-   **Documentos fixos:** seu aplicativo pode carregar documentos XPS de local ou baixados para inclusão em uma árvore de objetos de aplicativo do WPF e da interface do usuário.  
  
> [!NOTE]
>  Às vezes, esta documentação descreve um grafo de objeto, em vez de uma árvore de objetos. Uma relação pai-filho estrita não existe sempre nas relações de objeto de tempo de execução de um aplicativo WPF de tempo de execução, portanto, um grafo de objeto é uma terminologia mais amplamente aplicável. No entanto, porque o WPF também inclui duas conceitualização de árvore de diferentes APIs (<xref:System.Windows.LogicalTreeHelper>, <xref:System.Windows.Media.VisualTreeHelper>) a metáfora da árvore ainda aplica-se adequadamente a maioria dos casos reais no WPF. Da perspectiva de linguagem XAML no entanto, o gráfico de objeto geralmente é a melhor maneira de pensar sobre como os objetos são criados fora do XAML, como a linguagem XAML em si não especifica necessariamente metodologias de classe auxiliar que trazem as relações mais em um estrutura de árvore novamente.  
  
## <a name="code-access-security-loose-xaml-and-xamlreader"></a>Segurança de acesso do código e XAML flexível XamlReader  
 XAML é uma linguagem de marcação que representa diretamente a instanciação e execução de objetos. Portanto, elementos criados em XAML têm a mesma capacidade que o código gerado equivalente no que se refere a interagir com recursos de sistema (acesso a rede e E/S do sistema de arquivos, por exemplo).  
  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] oferece suporte a [!INCLUDE[TLA2#tla_net](~/includes/tla2sharptla-net-md.md)] estrutura de segurança [!INCLUDE[TLA#tla_cas](~/includes/tlasharptla-cas-md.md)]. Isso significa que conteúdo do [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] em execução na zona da Internet tem permissões de execução reduzidas. "XAML avulso" (páginas de XAML não compilado interpretado na hora do carregamento por um visualizador XAML) e [!INCLUDE[TLA#tla_xbap](~/includes/tlasharptla-xbap-md.md)] geralmente são executados nesta zona da Internet e usam o mesmo conjunto de permissões.  No entanto, o XAML carregado em um aplicativo totalmente confiável tem o mesmo acesso aos recursos de sistema que o aplicativo host. Para obter mais informações, consulte [Segurança parcialmente confiável do WPF](~/docs/framework/wpf/wpf-partial-trust-security.md).  
  
 As implicações dessas instruções para <xref:System.Windows.Markup.XamlReader> é que o design do aplicativo deve fazer as decisões de confiança sobre o XAML que você optar por carregar. Se você estiver carregando XAML que não é confiável, considere a implementação de sua própria técnica de modo seguro para como carregar o grafo de objeto resultante.  
  
 <xref:System.Windows.Markup.XamlReader> também pode ser chamado por código parcialmente confiável. Nesse caso, a zona de segurança é aplicada para segurança de acesso do código. Se nada no XAML carregado é inválido para a zona de segurança da Internet, é lançada uma exceção de análise XAML. Em XBAP e outros casos que são de confiança parcial no nível da plataforma, onde <xref:System.Windows.Markup.XamlReader> faz parte da execução, você deve obter o mesmo comportamento de exceção assim como ocorre com chamadas explícitas de confiança parcial.  
  
## <a name="wpf-xaml-xaml-readerswriters-and-xaml-language-versioning"></a>Controle de versão de linguagem XAML, leitores/gravadores XAML e XAML WPF  
 XAML2009 inclui recursos de linguagem, como [X:Reference](~/docs/framework/xaml-services/x-reference-markup-extension.md) e [X:factorymethod](~/docs/framework/xaml-services/x-factorymethod-directive.md). Você pode usar assinaturas de `Load` ou `Parse` para carregar o XAML que usa esses recursos. No entanto, esses recursos de linguagem não há suporte para XAML que precisa ser compilada com marcação (como o XAML para o **página** compilar ação em um aplicativo WPF ou qualquer XAML que envolve a tarefa de compilação de marcação nas ações de compilação).  
  
 Tipos WPF e a tecnologia WPF em geral dar suporte a conceitos que se baseiam no acesso aos recursos internos do WPF. Por exemplo, como o WPF implementa as propriedades de dependência se baseia em técnicas internas para pesquisa de membro de tipo eficiente. Acesso a essas questões internas do está habilitado pelo XAML lendo e gravando as APIs fornecidas no <xref:System.Windows.Markup.XamlWriter> e <xref:System.Windows.Markup.XamlReader> do <xref:System.Windows.Markup> namespace e assembly PresentationFramework. No entanto, os leitores XAML de nível inferior e gravadores XAML do assembly System. XAML (classes com base em <xref:System.Xaml.XamlReader?displayProperty=nameWithType>, <xref:System.Xaml.XamlWriter?displayProperty=nameWithType>) não têm acesso às partes internas WPF. Não há nenhuma dependência de System. XAML para qualquer assembly específicas do WPF. Sem acesso às partes internas WPF, os gravadores e leitores de System. XAML não é possível carregar corretamente ou salvar WPF todos os tipos ou tipos com base nos tipos WPF. Em particular, os leitores de System. XAML e gravadores não entenda conceitos como a propriedade de dependência do WPF fazendo o repositório de propriedades ou todas as especificidades de como o WPF usa estilos, dicionários de recursos e modelos. Portanto, você tem uma opção para fazer:  
  
-   Se você estiver carregando tipos do WPF, e/ou você estiver usando o XAML no formato BAML de qualquer forma, use os leitores de PresentationFramework XAML e gravadores XAML.  
  
-   Se você não confiam em quaisquer tipos WPF ou o formato BAML de XAML e não estiver usando o leitor XAML ou a implementação do gravador XAML de outra tecnologia específica por razões que são específicos para essa estrutura, use os leitores de XAML de System. XAML e gravadores XAML.  
  
## <a name="systemxaml-backing-implementation-in-net-4"></a>System. XAML como fazer a implementação no .NET 4  
 <xref:System.Windows.Markup.XamlReader> é a superfície de API que pode ser chamada para o analisador XAML de nível de framework WPF. O mesmo analisador XAML subjacente também realiza o XAML do tempo de execução de carregamento e análise para aplicativos do WPF que direcionam [!INCLUDE[net_v30_short](~/includes/net-v30-short-md.md)] e [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)].  
  
 Se você estiver direcionando [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], a API externa é o mesmo, mas partes da implementação são criados no [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] implementação geral de XAML no assembly System. XAML, que melhora muitos aspectos técnicos e de relatórios da análise de XAML. Direcionamento [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] necessariamente tipos definidos de infere incluindo System. XAML como uma referência e os detalhes de implementação, como as exceções reportadas podem vir de System. XAML.  
  
## Examples  
 O exemplo a seguir converte um <xref:System.Windows.Controls.Button> em uma cadeia de caracteres usando o <xref:System.Windows.Markup.XamlWriter> classe.  A cadeia de caracteres, em seguida, é carregada de volta em uma <xref:System.Windows.Controls.Button> usando estático <xref:System.Windows.Markup.XamlReader.Load%2A> método o <xref:System.Windows.Markup.XamlReader> classe.  
  
 [!code-csharp[xamlreaderwritersnippets#XamlReaderLoadXmlReader](~/samples/snippets/csharp/VS_Snippets_Wpf/XamlReaderWriterSnippets/CSharp/Window1.xaml.cs#xamlreaderloadxmlreader)]
 [!code-vb[xamlreaderwritersnippets#XamlReaderLoadXmlReader](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XamlReaderWriterSnippets/visualbasic/window1.xaml.vb#xamlreaderloadxmlreader)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Markup.XamlWriter" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlReader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlReader();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.Markup.XamlReader" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelAsync">
      <MemberSignature Language="C#" Value="public void CancelAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.CancelAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelAsync();" />
      <MemberSignature Language="F#" Value="member this.CancelAsync : unit -&gt; unit" Usage="xamlReader.CancelAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Anulará a operação de carregamento assíncrona atual, se houver uma operação de carregamento assíncrona pendente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Markup.XamlReader.CancelAsync%2A> é uma operação assíncrona; Portanto, alguns carregamento pode ocorrer antes que a operação é anulada.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWpfSchemaContext">
      <MemberSignature Language="C#" Value="public static System.Xaml.XamlSchemaContext GetWpfSchemaContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xaml.XamlSchemaContext GetWpfSchemaContext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.GetWpfSchemaContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetWpfSchemaContext () As XamlSchemaContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xaml::XamlSchemaContext ^ GetWpfSchemaContext();" />
      <MemberSignature Language="F#" Value="static member GetWpfSchemaContext : unit -&gt; System.Xaml.XamlSchemaContext" Usage="System.Windows.Markup.XamlReader.GetWpfSchemaContext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlSchemaContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retorna um objeto <see cref="T:System.Xaml.XamlSchemaContext" /> que representa as configurações de contexto de esquema do WPF para um <see cref="T:System.Windows.Markup.XamlReader" />.</summary>
        <returns>Um objeto <see cref="T:System.Xaml.XamlSchemaContext" /> que representa as configurações de contexto de esquema do WPF para um <see cref="T:System.Windows.Markup.XamlReader" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Lê a entrada XAML e retorna a raiz da árvore de objetos correspondentes.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="static member Load : System.IO.Stream -&gt; obj" Usage="System.Windows.Markup.XamlReader.Load stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">O XAML a ser carregado, na forma de fluxo.</param>
        <summary>Lê a entrada XAML no <see cref="T:System.IO.Stream" /> especificado e retorna um <see cref="T:System.Object" /> que é a raiz da árvore de objetos correspondente.</summary>
        <returns>O objeto na raiz da árvore de objetos criada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir salva um <xref:System.Windows.Controls.Button> em um <xref:System.IO.MemoryStream> usando o <xref:System.Windows.Markup.XamlWriter> classe. O fluxo é carregado, em seguida, volta para um <xref:System.Windows.Controls.Button> usando estático <xref:System.Windows.Markup.XamlReader.Load%2A> método no <xref:System.Windows.Markup.XamlReader> classe.  
  
 [!code-csharp[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/samples/snippets/csharp/VS_Snippets_Wpf/XamlReaderWriterSnippets/CSharp/Window1.xaml.cs#xamlreaderloadxmlreader)]
 [!code-vb[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XamlReaderWriterSnippets/visualbasic/window1.xaml.vb#xamlreaderloadxmlreader)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> é <see langword="null" />.</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.Xaml.XamlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.Xaml.XamlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.Xaml.XamlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (reader As XamlReader) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::Xaml::XamlReader ^ reader);" />
      <MemberSignature Language="F#" Value="static member Load : System.Xaml.XamlReader -&gt; obj" Usage="System.Windows.Markup.XamlReader.Load reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xaml.XamlReader" />
      </Parameters>
      <Docs>
        <param name="reader">Um objeto <see cref="T:System.Xaml.XamlReader" />. Este deve ser inicializado com o XAML de entrada.</param>
        <summary>Lê a entrada de XAML através de um <see cref="T:System.Xaml.XamlReader" /> fornecido e retorna um objeto que é a raiz da árvore de objetos correspondente.</summary>
        <returns>O objeto que é a raiz da árvore de objetos criada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A entrada <xref:System.Xaml.XamlReader> pode ser <xref:System.Windows.Baml2006.Baml2006Reader>. Isso é como você pode carregar o BAML em tempo de execução, ou para fins de ferramenta de localização.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="reader" /> é <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (reader As XmlReader) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="static member Load : System.Xml.XmlReader -&gt; obj" Usage="System.Windows.Markup.XamlReader.Load reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">O <see cref="T:System.Xml.XmlReader" /> que já carregou a entrada XAML a ser carregada no formato XML.</param>
        <summary>Lê a entrada do XAML no <see cref="T:System.Xml.XmlReader" /> especificado e retorna um objeto que é a raiz da árvore de objetos correspondente.</summary>
        <returns>O objeto que é a raiz da árvore de objetos criada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir converte um <xref:System.Windows.Controls.Button> em uma cadeia de caracteres usando o <xref:System.Windows.Markup.XamlWriter> classe.  A cadeia de caracteres, em seguida, é carregada de volta em uma <xref:System.Windows.Controls.Button> usando estático <xref:System.Windows.Markup.XamlReader.Load%2A> método o <xref:System.Windows.Markup.XamlReader> classe.  
  
 [!code-csharp[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/samples/snippets/csharp/VS_Snippets_Wpf/XamlReaderWriterSnippets/CSharp/Window1.xaml.cs#xamlreaderloadxmlreader)]
 [!code-vb[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XamlReaderWriterSnippets/visualbasic/window1.xaml.vb#xamlreaderloadxmlreader)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="reader" /> é <see langword="null" />.</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.IO.Stream stream, System.Windows.Markup.ParserContext parserContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.IO.Stream stream, class System.Windows.Markup.ParserContext parserContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.IO.Stream,System.Windows.Markup.ParserContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::IO::Stream ^ stream, System::Windows::Markup::ParserContext ^ parserContext);" />
      <MemberSignature Language="F#" Value="static member Load : System.IO.Stream * System.Windows.Markup.ParserContext -&gt; obj" Usage="System.Windows.Markup.XamlReader.Load (stream, parserContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="parserContext" Type="System.Windows.Markup.ParserContext" />
      </Parameters>
      <Docs>
        <param name="stream">O fluxo que contém a entrada XAML a ser carregada.</param>
        <param name="parserContext">Informações de contexto usadas pelo analisador.</param>
        <summary>Lê a entrada do XAML no <see cref="T:System.IO.Stream" /> especificado e retorna um objeto que é a raiz da árvore de objetos correspondente.</summary>
        <returns>O objeto que é a raiz da árvore de objetos criada.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> é <see langword="null" />.  -ou-  <paramref name="parserContext" /> é <see langword="null" />.</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="LoadAsync">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Lê a marcação XAML e retorna um objeto que corresponde à raiz da marcação especificada.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public object LoadAsync (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object LoadAsync(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ LoadAsync(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="member this.LoadAsync : System.IO.Stream -&gt; obj" Usage="xamlReader.LoadAsync stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">O fluxo que contém a entrada XAML a ser carregada.</param>
        <summary>Lê a entrada XAML no <see cref="T:System.IO.Stream" /> especificado e retorna a raiz da árvore de objetos correspondente.</summary>
        <returns>O objeto que é a raiz da árvore de objetos criada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uma operação assíncrona de carregamento XAML inicialmente retornará um objeto que é essencialmente o objeto raiz. De forma assíncrona, análise de XAML, em seguida, continua, e todos os objetos filho são preenchidos na raiz. Isso é diferente de XAML WPF típico processamento comportamento e sua interação com os conceitos de tempo de vida do objeto do WPF. Na interação típica (não assíncronas), todas as propriedades de um objeto, incluindo todas as coleções filho são preenchidas antes de retornar um elemento e relatá-las como carregado. Esse comportamento é igual a uma metodologia de baixo para cima, para criar a árvore em que o objeto raiz é o último objeto se torne disponível.  
  
 Você normalmente atribuiria o objeto retornado para um local na árvore de objetos do aplicativo WPF, com o conhecimento que o conteúdo pode ainda ser preenchendo e pode fazer com que as atualizações de layout incremental se todo o conteúdo é exposto como parte da interface do usuário. Por esse motivo, é comum para isolar ou virtualizar todos os objetos carregados de forma assíncrona do XAML e usar a lógica específica do aplicativo ou o estado do aplicativo a ser notificado quando <xref:System.Windows.Markup.XamlReader.LoadCompleted> é tratada.  
  
 Para que <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> para carregar o XAML de forma assíncrona de entrada, o elemento raiz em que o XAML de entrada deve conter o atributo e valor `x:SynchronousMode="Async"`. O valor é tratado como diferencia maiusculas de minúsculas. Se a raiz de entrada de XAML não contém `x:SynchronousMode="Async"`, nenhuma exceção é lançada e a chamada é processada como um carregamento síncrono (consulte <xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%29>).  
  
 Apenas uma operação assíncrona de carregamento por instância da <xref:System.Windows.Markup.XamlReader> classe pode ser executada por vez.  Se mais de uma operação assíncrona é tentada na mesma instância das <xref:System.Windows.Markup.XamlReader> classe um <xref:System.InvalidOperationException> é gerada.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> é <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Várias operações de carregamento estão pendentes simultaneamente com o mesmo <see cref="T:System.Windows.Markup.XamlReader" />.</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public object LoadAsync (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object LoadAsync(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.LoadAsync(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadAsync (reader As XmlReader) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ LoadAsync(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.LoadAsync : System.Xml.XmlReader -&gt; obj" Usage="xamlReader.LoadAsync reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">Um <see cref="T:System.Xml.XmlReader" /> existente que já carregou/leu a entrada XAML.</param>
        <summary>Lê a entrada XAML no <see cref="T:System.Xml.XmlReader" /> especificado e retorna a raiz da árvore de objetos correspondente.</summary>
        <returns>A raiz da árvore de objetos criada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uma operação assíncrona de carregamento XAML inicialmente retornará um objeto que é essencialmente o objeto raiz. De forma assíncrona, análise de XAML, em seguida, continua, e todos os objetos filho são preenchidos na raiz. Isso é diferente de XAML WPF típico processamento comportamento e sua interação com os conceitos de tempo de vida do objeto do WPF. Na interação típica (não assíncronas), todas as propriedades de um objeto, incluindo todas as coleções filho são preenchidas antes de retornar um elemento e relatá-las como carregado. Esse comportamento é igual a uma metodologia de baixo para cima, para criar a árvore em que o objeto raiz é o último objeto se torne disponível.  
  
 Você normalmente atribui o objeto retornado de <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> para algum local na árvore de objetos do seu aplicativo, com o conhecimento que o conteúdo pode ainda ser preenchendo e pode fazer com que as atualizações de layout incremental se todo o conteúdo é exposto como parte das INTERFACE DO USUÁRIO. Por esse motivo, é comum para isolar ou virtualizar todos os objetos carregados de forma assíncrona do XAML e usar a lógica específica do aplicativo ou o estado do aplicativo a ser notificado quando <xref:System.Windows.Markup.XamlReader.LoadCompleted> é tratada.  
  
 Para que <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> para carregar o XAML de forma assíncrona de entrada, o elemento raiz na marcação XAML deve conter o atributo e valor `x:SynchronousMode="Async"`. O valor é tratado como diferencia maiusculas de minúsculas. Se a raiz da marcação XAML não contém `x:SynchronousMode="Async"`, nenhuma exceção é lançada e, em vez disso, a chamada é processada como um carregamento síncrono (consulte <xref:System.Windows.Markup.XamlReader.Load%28System.Xml.XmlReader%29>).  
  
 Apenas uma operação assíncrona de carregamento por instância da <xref:System.Windows.Markup.XamlReader> classe pode ser executada por vez.  Se mais de uma operação assíncrona é tentada na mesma instância das <xref:System.Windows.Markup.XamlReader> classe um <xref:System.InvalidOperationException> é gerada.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="reader" /> é <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Várias operações de carregamento são executadas simultaneamente com o mesmo <see cref="T:System.Windows.Markup.XamlReader" />.</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public object LoadAsync (System.IO.Stream stream, System.Windows.Markup.ParserContext parserContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object LoadAsync(class System.IO.Stream stream, class System.Windows.Markup.ParserContext parserContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream,System.Windows.Markup.ParserContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ LoadAsync(System::IO::Stream ^ stream, System::Windows::Markup::ParserContext ^ parserContext);" />
      <MemberSignature Language="F#" Value="member this.LoadAsync : System.IO.Stream * System.Windows.Markup.ParserContext -&gt; obj" Usage="xamlReader.LoadAsync (stream, parserContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="parserContext" Type="System.Windows.Markup.ParserContext" />
      </Parameters>
      <Docs>
        <param name="stream">Um fluxo que contém a entrada XAML a ser carregada.</param>
        <param name="parserContext">Informações de contexto usadas pelo analisador.</param>
        <summary>Lê a entrada XAML no <see cref="T:System.IO.Stream" /> especificado e retorna a raiz da árvore de objetos correspondente.</summary>
        <returns>A raiz da árvore de objetos criada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uma operação assíncrona de carregamento XAML inicialmente retornará um objeto que é essencialmente o objeto raiz. De forma assíncrona, análise de XAML, em seguida, continua, e todos os objetos filho são preenchidos na raiz. Isso é diferente de XAML WPF típico processamento comportamento e sua interação com os conceitos de tempo de vida do objeto do WPF. Na interação típica (não assíncronas), todas as propriedades de um objeto, incluindo todas as coleções filho são preenchidas antes de retornar um elemento e relatá-las como carregado. Esse comportamento é igual a uma metodologia de baixo para cima, para criar a árvore em que o objeto raiz é o último objeto se torne disponível.  
  
 Você normalmente atribuiria o objeto retornado para um local na árvore de objetos do seu aplicativo, com o conhecimento que o conteúdo pode ainda ser preenchendo e pode fazer com que as atualizações de layout incremental se todo o conteúdo é exposto como parte da interface do usuário. Por esse motivo, é comum para isolar ou virtualizar todos os objetos carregados de forma assíncrona do XAML e usar a lógica específica do aplicativo ou o estado do aplicativo a ser notificado quando <xref:System.Windows.Markup.XamlReader.LoadCompleted> é tratada.  
  
 Para que <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> para carregar a marcação de forma assíncrona, o elemento raiz na marcação XAML deve conter o atributo e valor `x:SynchronousMode="Async"`. O valor é tratado como diferencia maiusculas de minúsculas. Se a raiz da marcação XAML não contém `x:SynchronousMode="Async"`, nenhuma exceção é lançada e a chamada é processada como um carregamento síncrono (consulte <xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%2CSystem.Windows.Markup.ParserContext%29>).  
  
 Apenas uma operação assíncrona de carregamento por instância da <xref:System.Windows.Markup.XamlReader> classe pode ser executada por vez.  Se mais de uma operação assíncrona é tentada na mesma instância das <xref:System.Windows.Markup.XamlReader> classe um <xref:System.InvalidOperationException> é gerada.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> é <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Várias operações de carregamento são executadas simultaneamente com o mesmo <see cref="T:System.Windows.Markup.XamlReader" />.</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="LoadCompleted">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.AsyncCompletedEventHandler LoadCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.AsyncCompletedEventHandler LoadCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Markup.XamlReader.LoadCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event LoadCompleted As AsyncCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::AsyncCompletedEventHandler ^ LoadCompleted;" />
      <MemberSignature Language="F#" Value="member this.LoadCompleted : System.ComponentModel.AsyncCompletedEventHandler " Usage="member this.LoadCompleted : System.ComponentModel.AsyncCompletedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.AsyncCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando uma operação de carregamento assíncrona é concluída.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Markup.XamlReader.LoadCompleted> também é gerado quando anula uma operação assíncrona de carregamento.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncCompletedEventHandler" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Lê a marcação na cadeia de caracteres de texto especificada e retorna um objeto que corresponde à raiz da marcação especificada.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (string xamlText);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(string xamlText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (xamlText As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(System::String ^ xamlText);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; obj" Usage="System.Windows.Markup.XamlReader.Parse xamlText" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xamlText">O XAML de entrada, como uma cadeia de texto simples.</param>
        <summary>Lê a entrada XAML na cadeia de texto especificada e retorna um objeto que corresponde à raiz da marcação especificada.</summary>
        <returns>A raiz da árvore de objetos criada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A implementação chama <xref:System.Windows.Markup.XamlReader.Load%2A> internamente após a criação de um fluxo de cadeia de caracteres. Consulte <xref:System.Windows.Markup.XamlReader.Load%2A> para obter informações adicionais, como exceções possíveis.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (string xamlText, System.Windows.Markup.ParserContext parserContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(string xamlText, class System.Windows.Markup.ParserContext parserContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Parse(System.String,System.Windows.Markup.ParserContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(System::String ^ xamlText, System::Windows::Markup::ParserContext ^ parserContext);" />
      <MemberSignature Language="F#" Value="static member Parse : string * System.Windows.Markup.ParserContext -&gt; obj" Usage="System.Windows.Markup.XamlReader.Parse (xamlText, parserContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlText" Type="System.String" />
        <Parameter Name="parserContext" Type="System.Windows.Markup.ParserContext" />
      </Parameters>
      <Docs>
        <param name="xamlText">O XAML de entrada, como uma cadeia de texto simples.</param>
        <param name="parserContext">Informações de contexto usadas pelo analisador.</param>
        <summary>Lê a marcação XAML na cadeia de texto especificada (usando um <see cref="T:System.Windows.Markup.ParserContext" /> especificado) e retorna um objeto que corresponde à raiz da marcação especificada.</summary>
        <returns>A raiz da árvore de objetos criada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A implementação chama <xref:System.Windows.Markup.XamlReader.Load%2A> internamente após a criação de um fluxo de cadeia de caracteres. Consulte <xref:System.Windows.Markup.XamlReader.Load%2A> para obter informações adicionais, como exceções possíveis.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>