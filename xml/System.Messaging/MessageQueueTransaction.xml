<Type Name="MessageQueueTransaction" FullName="System.Messaging.MessageQueueTransaction">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d2f750339c17f272f8cc360d38e3f1850a40606b" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class MessageQueueTransaction : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MessageQueueTransaction extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.MessageQueueTransaction" />
  <TypeSignature Language="VB.NET" Value="Public Class MessageQueueTransaction&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageQueueTransaction : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="6423d-101">Fornece uma transação interna do Enfileiramento de Mensagens.</span>
      <span class="sxs-lookup">
        <span data-stu-id="6423d-101">Provides a Message Queuing internal transaction.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6423d-102">Para enviar ou receber uma mensagem como parte de uma transação, você pode usar o <xref:System.Messaging.MessageQueueTransaction> classe para criar uma transação e transmiti-la a uma sobrecarga de <xref:System.Messaging.MessageQueue.Send%2A?displayProperty=nameWithType> método ou o <xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=nameWithType> método que utiliza um `transaction` parâmetro.</span><span class="sxs-lookup"><span data-stu-id="6423d-102">To send or receive a message as part of a transaction, you can use the <xref:System.Messaging.MessageQueueTransaction> class to create a transaction and pass it to an overload of the <xref:System.Messaging.MessageQueue.Send%2A?displayProperty=nameWithType> method or the <xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=nameWithType> method that takes a `transaction` parameter.</span></span> <span data-ttu-id="6423d-103">As mensagens enviadas como parte de uma transação devem ser enviadas para filas transacionais.</span><span class="sxs-lookup"><span data-stu-id="6423d-103">Messages sent as part of a transaction must be sent to transactional queues.</span></span> <span data-ttu-id="6423d-104">Mensagens recebidas de filas transacionais devem ser recebidas usando uma transação especificada.</span><span class="sxs-lookup"><span data-stu-id="6423d-104">Messages received from transactional queues must be received using a specified transaction.</span></span>  
  
 <span data-ttu-id="6423d-105">Além de <xref:System.Messaging.MessageQueue.Receive%2A> método, você pode receber mensagens com um identificador especificado ou o identificador de correlação especificado.</span><span class="sxs-lookup"><span data-stu-id="6423d-105">In addition to the <xref:System.Messaging.MessageQueue.Receive%2A> method, you can receive messages with a specified identifier or specified correlation identifier.</span></span> <span data-ttu-id="6423d-106">Consulte o <xref:System.Messaging.MessageQueue.ReceiveById%2A> e <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A> métodos para obter mais informações sobre seletivamente receber mensagens de filas transacionais.</span><span class="sxs-lookup"><span data-stu-id="6423d-106">See the <xref:System.Messaging.MessageQueue.ReceiveById%2A> and <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A> methods for more information about selectively receiving messages from transactional queues.</span></span>  
  
 <span data-ttu-id="6423d-107">Mensagens enviadas para filas transacionais são removidas se a transação for confirmada.</span><span class="sxs-lookup"><span data-stu-id="6423d-107">Messages sent to transactional queues are removed if the transaction is committed.</span></span> <span data-ttu-id="6423d-108">Da mesma forma, as mensagens recebidas de filas transacionais são retornadas para a fila se a transação for revertida.</span><span class="sxs-lookup"><span data-stu-id="6423d-108">Similarly, messages received from transactional queues are returned to the queue if the transaction is rolled back.</span></span>  
  
 <span data-ttu-id="6423d-109">Se você criar uma instância de um <xref:System.Messaging.MessageQueueTransaction> e passá-lo para uma sobrecarga aplicável a <xref:System.Messaging.MessageQueue.Send%2A> método ou <xref:System.Messaging.MessageQueue.Receive%2A> método para enviar uma mensagem para uma fila não transacional ou receber uma mensagem de uma fila não transacional, o método gera uma exceção que indica "Uso de transação incorreto".</span><span class="sxs-lookup"><span data-stu-id="6423d-109">If you instantiate a <xref:System.Messaging.MessageQueueTransaction> and pass it to an applicable overload of the <xref:System.Messaging.MessageQueue.Send%2A> method or <xref:System.Messaging.MessageQueue.Receive%2A> method to send a message to a non-transactional queue or receive a message from a non-transactional queue, the method throws an exception that indicates "Wrong Transaction Usage."</span></span>  
  
 <span data-ttu-id="6423d-110"><xref:System.Messaging.MessageQueueTransaction> é de thread apartment com suporte, portanto, se o estado de apartment é `STA`, você não pode usar a transação em vários threads.</span><span class="sxs-lookup"><span data-stu-id="6423d-110"><xref:System.Messaging.MessageQueueTransaction> is threading apartment aware, so if your apartment state is `STA`, you cannot use the transaction in multiple threads.</span></span> <span data-ttu-id="6423d-111">Visual Basic define o estado do thread principal para `STA`, portanto, você deve aplicar o <xref:System.MTAThreadAttribute> no `Main` sub-rotina.</span><span class="sxs-lookup"><span data-stu-id="6423d-111">Visual Basic sets the state of the main thread to `STA`, so you must apply the <xref:System.MTAThreadAttribute> in the `Main` subroutine.</span></span> <span data-ttu-id="6423d-112">Caso contrário, o envio de uma mensagem transacional usando outro thread gerará uma exceção <xref:System.Messaging.MessageQueueException>.</span><span class="sxs-lookup"><span data-stu-id="6423d-112">Otherwise, sending a transactional message using another thread throws a <xref:System.Messaging.MessageQueueException> exception.</span></span> <span data-ttu-id="6423d-113">Aplicar o <xref:System.MTAThreadAttribute> usando o seguinte fragmento.</span><span class="sxs-lookup"><span data-stu-id="6423d-113">You apply the <xref:System.MTAThreadAttribute> by using the following fragment.</span></span>  
  
```vb  
<System.MTAThreadAttribute>  
 public sub Main()  
```  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="6423d-114">Este tipo é thread-safe.</span>
      <span class="sxs-lookup">
        <span data-stu-id="6423d-114">This type is thread safe.</span>
      </span>
    </threadsafe>
    <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
    <altmember cref="M:System.Messaging.MessageQueue.Send(System.Object)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MessageQueueTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MessageQueueTransaction();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6423d-115">Inicializa uma nova instância da classe <see cref="T:System.Messaging.MessageQueueTransaction" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6423d-115">Initializes a new instance of the <see cref="T:System.Messaging.MessageQueueTransaction" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6423d-116">Esse construtor define o <xref:System.Messaging.MessageQueueTransaction.Status%2A> propriedade `Initialized`.</span><span class="sxs-lookup"><span data-stu-id="6423d-116">This constructor sets the <xref:System.Messaging.MessageQueueTransaction.Status%2A> property to `Initialized`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Abort" />
      <MemberSignature Language="VB.NET" Value="Public Sub Abort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Abort();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6423d-117">Reverte a transação interna pendente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6423d-117">Rolls back the pending internal transaction.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6423d-118"><xref:System.Messaging.MessageQueueTransaction.Abort%2A> marca a conclusão bem-sucedida de um processo iniciado em uma chamada para <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span><span class="sxs-lookup"><span data-stu-id="6423d-118"><xref:System.Messaging.MessageQueueTransaction.Abort%2A> marks the unsuccessful completion of a process begun at a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span></span>  
  
 <span data-ttu-id="6423d-119">Normalmente, um faz uma chamada para <xref:System.Messaging.MessageQueueTransaction.Begin%2A> dentro de um `Try...Catch` bloco de tratamento de exceções, colocando uma chamada para <xref:System.Messaging.MessageQueueTransaction.Commit%2A> no `Try` cláusula e uma chamada para <xref:System.Messaging.MessageQueueTransaction.Abort%2A> no `Catch` cláusula.</span><span class="sxs-lookup"><span data-stu-id="6423d-119">Typically, one makes a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A> within a `Try...Catch` exception-handling block, putting a call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A> in the `Try` clause, and a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A> in the `Catch` clause.</span></span>  
  
 <span data-ttu-id="6423d-120"><xref:System.Messaging.MessageQueueTransaction.Abort%2A> Reverte a transação inteira.</span><span class="sxs-lookup"><span data-stu-id="6423d-120"><xref:System.Messaging.MessageQueueTransaction.Abort%2A> rolls back the entire transaction.</span></span> <span data-ttu-id="6423d-121">Isso inclui todas as mensagens enviadas ou recebidas após a chamada a <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span><span class="sxs-lookup"><span data-stu-id="6423d-121">This includes all messages sent or received after the call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="6423d-122">A transação interna que você está tentando reverter não foi iniciada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6423d-122">The internal transaction you are attempting to roll back has not started.</span>
          </span>
        </exception>
        <exception cref="T:System.Messaging.MessageQueueException">
          <span data-ttu-id="6423d-123">Ocorre um erro interno do Enfileiramento de Mensagens.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6423d-123">An internal Message Queuing error occurs.</span>
          </span>
        </exception>
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Begin" />
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Commit" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Begin" />
      <MemberSignature Language="VB.NET" Value="Public Sub Begin ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Begin();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6423d-124">Inicia uma nova transação interna do Enfileiramento de Mensagens.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6423d-124">Begins a new Message Queuing internal transaction.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6423d-125"><xref:System.Messaging.MessageQueueTransaction.Begin%2A> marca o início do processamento que será confirmado ou revertido, dependendo o sucesso da transação.</span><span class="sxs-lookup"><span data-stu-id="6423d-125"><xref:System.Messaging.MessageQueueTransaction.Begin%2A> marks the start of processing that will be committed or rolled back, depending on the success of the transaction.</span></span> <span data-ttu-id="6423d-126">Se ocorrer uma exceção durante o processamento, a transação inteira é revertida.</span><span class="sxs-lookup"><span data-stu-id="6423d-126">If an exception occurs during processing, the entire transaction is rolled back.</span></span> <span data-ttu-id="6423d-127">Isso inclui todas as mensagens enviadas ou recebidas após a chamada a <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span><span class="sxs-lookup"><span data-stu-id="6423d-127">This includes all messages sent or received after the call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span></span>  
  
 <span data-ttu-id="6423d-128">Normalmente, um faz uma chamada para <xref:System.Messaging.MessageQueueTransaction.Begin%2A> dentro de um `Try...Catch` bloco de tratamento de exceções, colocando uma chamada para <xref:System.Messaging.MessageQueueTransaction.Commit%2A> no `Try` cláusula e uma chamada para <xref:System.Messaging.MessageQueueTransaction.Abort%2A> no `Catch` cláusula.</span><span class="sxs-lookup"><span data-stu-id="6423d-128">Typically, one makes a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A> within a `Try...Catch` exception-handling block, putting a call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A> in the `Try` clause, and a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A> in the `Catch` clause.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="6423d-129">A transação já foi iniciada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6423d-129">The transaction has already been started.</span>
          </span>
        </exception>
        <exception cref="T:System.Messaging.MessageQueueException">
          <span data-ttu-id="6423d-130">Ocorre um erro interno do Enfileiramento de Mensagens.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6423d-130">An internal Message Queuing error occurs.</span>
          </span>
        </exception>
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Abort" />
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Commit" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public void Commit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Commit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Commit" />
      <MemberSignature Language="VB.NET" Value="Public Sub Commit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Commit();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6423d-131">Confirma uma transação interna pendente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6423d-131">Commits a pending internal transaction.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6423d-132"><xref:System.Messaging.MessageQueueTransaction.Commit%2A> marca a conclusão bem-sucedida de processamento iniciado em uma chamada para <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span><span class="sxs-lookup"><span data-stu-id="6423d-132"><xref:System.Messaging.MessageQueueTransaction.Commit%2A> marks the successful completion of processing begun at a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span></span> <span data-ttu-id="6423d-133">Se uma exceção ocorrer entre a chamada a <xref:System.Messaging.MessageQueueTransaction.Begin%2A> e a chamada para <xref:System.Messaging.MessageQueueTransaction.Commit%2A>, a transação inteira é revertida.</span><span class="sxs-lookup"><span data-stu-id="6423d-133">If an exception occurs between the call the <xref:System.Messaging.MessageQueueTransaction.Begin%2A> and the call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A>, the entire transaction is rolled back.</span></span> <span data-ttu-id="6423d-134">Isso inclui todas as mensagens enviadas ou recebidas após a chamada a <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span><span class="sxs-lookup"><span data-stu-id="6423d-134">This includes all messages sent or received after the call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span></span>  
  
 <span data-ttu-id="6423d-135">Normalmente, um faz uma chamada para <xref:System.Messaging.MessageQueueTransaction.Begin%2A> dentro de um `Try...Catch` bloco de tratamento de exceções, colocando uma chamada para <xref:System.Messaging.MessageQueueTransaction.Commit%2A> no `Try` cláusula e uma chamada para <xref:System.Messaging.MessageQueueTransaction.Abort%2A> no `Catch` cláusula.</span><span class="sxs-lookup"><span data-stu-id="6423d-135">Typically, one makes a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A> within a `Try...Catch` exception-handling block, putting a call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A> in the `Try` clause, and a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A> in the `Catch` clause.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="6423d-136">A transação que você está tentando confirmar não foi iniciada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6423d-136">The transaction you are trying to commit has not started.</span>
          </span>
        </exception>
        <exception cref="T:System.Messaging.MessageQueueException">
          <span data-ttu-id="6423d-137">Ocorre um erro interno do Enfileiramento de Mensagens.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6423d-137">An internal Message Queuing error occurs.</span>
          </span>
        </exception>
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Abort" />
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Begin" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6423d-138">Libera os recursos usados pelo <see cref="T:System.Messaging.MessageQueueTransaction" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6423d-138">Releases the resources used by the <see cref="T:System.Messaging.MessageQueueTransaction" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6423d-139">Libera todos os recursos usados pelo <see cref="T:System.Messaging.MessageQueueTransaction" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6423d-139">Releases all resources used by the <see cref="T:System.Messaging.MessageQueueTransaction" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6423d-140">Chamando <xref:System.Messaging.MessageQueueTransaction.Dispose%2A> permite que os recursos usados pelo <xref:System.Messaging.MessageQueueTransaction> para ser realocada para outros fins.</span><span class="sxs-lookup"><span data-stu-id="6423d-140">Calling <xref:System.Messaging.MessageQueueTransaction.Dispose%2A> allows the resources used by the <xref:System.Messaging.MessageQueueTransaction> to be reallocated for other purposes.</span></span> <span data-ttu-id="6423d-141">Para obter mais informações sobre `Dispose`, consulte [limpeza de recursos não gerenciados](~/docs/standard/garbage-collection/unmanaged.md).</span><span class="sxs-lookup"><span data-stu-id="6423d-141">For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span>  
  
 <span data-ttu-id="6423d-142">Quaisquer transações internas pendentes serão revertidas por <xref:System.Messaging.MessageQueueTransaction.Dispose%2A>.</span><span class="sxs-lookup"><span data-stu-id="6423d-142">Any pending internal transactions are rolled back by <xref:System.Messaging.MessageQueueTransaction.Dispose%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="6423d-143">
            <see langword="true" /> para liberar recursos gerenciados e não gerenciados; <see langword="false" /> para liberar apenas recursos não gerenciados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6423d-143">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6423d-144">Libera os recursos não gerenciados usados pelo <see cref="T:System.Messaging.MessageQueueTransaction" /> e opcionalmente libera os recursos gerenciados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6423d-144">Releases the unmanaged resources used by the <see cref="T:System.Messaging.MessageQueueTransaction" /> and optionally releases the managed resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6423d-145">Este método é chamado pelo método público <xref:System.Messaging.MessageQueueTransaction.Dispose%2A> e pelo método <xref:System.Object.Finalize%2A>.</span><span class="sxs-lookup"><span data-stu-id="6423d-145">This method is called by the public <xref:System.Messaging.MessageQueueTransaction.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="6423d-146">`Dispose` invoca o método `Dispose(Boolean)` protegido com o parâmetro `disposing` definido como `true`.</span><span class="sxs-lookup"><span data-stu-id="6423d-146">`Dispose` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="6423d-147"><xref:System.Object.Finalize%2A> invoca `Dispose` com `disposing` definido como `false`.</span><span class="sxs-lookup"><span data-stu-id="6423d-147"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="6423d-148">Quando o `disposing` parâmetro é `true`, esse método libera todos os recursos mantidos por qualquer objeto gerenciado que este <xref:System.Messaging.MessageQueueTransaction> referências.</span><span class="sxs-lookup"><span data-stu-id="6423d-148">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Messaging.MessageQueueTransaction> references.</span></span> <span data-ttu-id="6423d-149">Este método invoca o método `Dispose` de cada objeto referenciado.</span><span class="sxs-lookup"><span data-stu-id="6423d-149">This method invokes the `Dispose` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="6423d-150">
              <see langword="Dispose" /> pode ser chamado várias vezes por outros objetos.</span>
            <span class="sxs-lookup">
              <span data-stu-id="6423d-150">
                <see langword="Dispose" /> can be called multiple times by other objects.</span>
            </span>
            <span data-ttu-id="6423d-151">Ao substituir <see langword="Dispose(Boolean)" />, tome cuidado para não referenciar objetos que tenham sido descartados anteriormente em uma chamada anterior para <see langword="Dispose" />.</span>
            <span class="sxs-lookup">
              <span data-stu-id="6423d-151">When overriding <see langword="Dispose(Boolean)" />, be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />.</span>
            </span>
            <span data-ttu-id="6423d-152">Para obter mais informações sobre como implementar <see langword="Dispose" />, consulte [implementar um método Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).</span>
            <span class="sxs-lookup">
              <span data-stu-id="6423d-152">For more information about how to implement <see langword="Dispose" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span>
            </span>
            <span data-ttu-id="6423d-153">Para obter mais informações sobre <see langword="Dispose" /> e <see langword="Finalize" />, consulte [limpeza de recursos não gerenciados](~/docs/standard/garbage-collection/unmanaged.md) e [substituindo o método Finalize](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</span>
            <span class="sxs-lookup">
              <span data-stu-id="6423d-153">For more information about <see langword="Dispose" /> and <see langword="Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MessageQueueTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!MessageQueueTransaction ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6423d-154">Libera os recursos mantidos pela instância atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6423d-154">Releases the resources held by the current instance.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6423d-155">Este método substitui <xref:System.Object.Finalize%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="6423d-155">This method overrides <xref:System.Object.Finalize%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="6423d-156">O código do aplicativo não deve chamar este método; o método <xref:System.Messaging.MessageQueueTransaction.Finalize%2A> de um objeto é invocado automaticamente durante a coleta de lixo, a menos que a finalização pelo coletor de lixo tenha sido desabilitada por uma chamada para o método <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="6423d-156">Application code should not call this method; an object's <xref:System.Messaging.MessageQueueTransaction.Finalize%2A> method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="6423d-157">Para obter mais informações, consulte [métodos Finalize e destruidores](http://msdn.microsoft.com/library/fd376774-1643-499b-869e-9546a3aeea70), [limpeza de recursos não gerenciados](~/docs/standard/garbage-collection/unmanaged.md), e [substituindo o método Finalize](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</span><span class="sxs-lookup"><span data-stu-id="6423d-157">For more information, see [Finalize Methods and Destructors](http://msdn.microsoft.com/library/fd376774-1643-499b-869e-9546a3aeea70), [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md), and [Overriding the Finalize Method](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Status">
      <MemberSignature Language="C#" Value="public System.Messaging.MessageQueueTransactionStatus Status { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.MessageQueueTransactionStatus Status" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueTransaction.Status" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Status As MessageQueueTransactionStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::MessageQueueTransactionStatus Status { System::Messaging::MessageQueueTransactionStatus get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageQueueTransactionStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6423d-158">Obtém o status da transação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6423d-158">Gets the status of the transaction.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6423d-159">Uma da <see cref="T:System.Messaging.MessageQueueTransactionStatus" /> valores que indica se a transação foi confirmada, anulada, inicializado, ou se está pendente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6423d-159">One of the <see cref="T:System.Messaging.MessageQueueTransactionStatus" /> values that indicates whether the transaction has been committed, aborted, initialized, or is pending.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6423d-160">Quando uma instância do <xref:System.Messaging.MessageQueueTransaction> classe tiver sido criada, o <xref:System.Messaging.MessageQueueTransaction.Status%2A> é definido pelo construtor para `Initialized`.</span><span class="sxs-lookup"><span data-stu-id="6423d-160">When an instance of the <xref:System.Messaging.MessageQueueTransaction> class has been created, the <xref:System.Messaging.MessageQueueTransaction.Status%2A> is set by the constructor to `Initialized`.</span></span> <span data-ttu-id="6423d-161">Após uma chamada para <xref:System.Messaging.MessageQueueTransaction.Begin%2A> , mas antes de uma chamada para <xref:System.Messaging.MessageQueueTransaction.Commit%2A> ou <xref:System.Messaging.MessageQueueTransaction.Abort%2A>, o <xref:System.Messaging.MessageQueueTransaction.Status%2A> é `Pending`.</span><span class="sxs-lookup"><span data-stu-id="6423d-161">After a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A> but before a call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A> or <xref:System.Messaging.MessageQueueTransaction.Abort%2A>, the <xref:System.Messaging.MessageQueueTransaction.Status%2A> is `Pending`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Messaging.MessageQueueTransactionStatus" />
      </Docs>
    </Member>
  </Members>
</Type>