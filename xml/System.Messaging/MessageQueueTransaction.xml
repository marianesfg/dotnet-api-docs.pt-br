<Type Name="MessageQueueTransaction" FullName="System.Messaging.MessageQueueTransaction">
  <Metadata><Meta Name="ms.openlocfilehash" Value="277c43eb88a67a34c9bfcd8ab649d418c83e3121" /><Meta Name="ms.sourcegitcommit" Value="cbcba80f998e27b87425ad54726bdb684fb3a932" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="09/04/2018" /><Meta Name="ms.locfileid" Value="43616077" /></Metadata><TypeSignature Language="C#" Value="public class MessageQueueTransaction : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MessageQueueTransaction extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.MessageQueueTransaction" />
  <TypeSignature Language="VB.NET" Value="Public Class MessageQueueTransaction&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageQueueTransaction : IDisposable" />
  <TypeSignature Language="F#" Value="type MessageQueueTransaction = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Fornece uma transação interna do Enfileiramento de Mensagens.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para enviar ou receber uma mensagem como parte de uma transação, você pode usar o <xref:System.Messaging.MessageQueueTransaction> classe para criar uma transação e passá-lo para uma sobrecarga da <xref:System.Messaging.MessageQueue.Send%2A?displayProperty=nameWithType> método ou o <xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=nameWithType> método que usa um `transaction` parâmetro. As mensagens enviadas como parte de uma transação devem ser enviadas para filas transacionais. Mensagens recebidas de filas transacionais devem ser recebidas usando uma transação especificada.  
  
 Além de <xref:System.Messaging.MessageQueue.Receive%2A> método, você pode receber mensagens com um identificador especificado ou identificador de correlação especificado. Consulte a <xref:System.Messaging.MessageQueue.ReceiveById%2A> e <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A> métodos para obter mais informações sobre o recebimento seletivamente as mensagens das filas transacionais.  
  
 Mensagens enviadas para filas transacionais são removidas se a transação for confirmada. Da mesma forma, as mensagens recebidas de filas transacionais são retornadas para a fila se a transação for revertida.  
  
 Se você criar uma instância de um <xref:System.Messaging.MessageQueueTransaction> e passá-lo para uma sobrecarga aplicável a <xref:System.Messaging.MessageQueue.Send%2A> método ou <xref:System.Messaging.MessageQueue.Receive%2A> método para enviar uma mensagem para uma fila não transacional ou receber uma mensagem de uma fila não transacional, o método gera uma exceção indica "Uso de transação errado".  
  
 <xref:System.Messaging.MessageQueueTransaction> é threading apartment ciente, portanto, se seu estado de apartment é `STA`, é possível usar a transação em vários threads. Visual Basic define o estado do thread principal para `STA`, portanto, você deve aplicar a <xref:System.MTAThreadAttribute> no `Main` sub-rotina. Caso contrário, o envio de uma mensagem transacional usando outro thread gerará uma exceção <xref:System.Messaging.MessageQueueException>. Aplicar o <xref:System.MTAThreadAttribute> usando o fragmento a seguir.  
  
```vb  
<System.MTAThreadAttribute>  
 public sub Main()  
```  
  
 ]]></format>
    </remarks>
    <threadsafe>Este tipo é thread-safe.</threadsafe>
    <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
    <altmember cref="M:System.Messaging.MessageQueue.Send(System.Object)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MessageQueueTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MessageQueueTransaction();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Messaging.MessageQueueTransaction" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este construtor define a <xref:System.Messaging.MessageQueueTransaction.Status%2A> propriedade para `Initialized`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Abort" />
      <MemberSignature Language="VB.NET" Value="Public Sub Abort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Abort();" />
      <MemberSignature Language="F#" Value="member this.Abort : unit -&gt; unit" Usage="messageQueueTransaction.Abort " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reverte a transação interna pendente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageQueueTransaction.Abort%2A> marca a conclusão bem-sucedida de um processo iniciado em uma chamada para <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.  
  
 Normalmente, um faz uma chamada para <xref:System.Messaging.MessageQueueTransaction.Begin%2A> dentro de um `Try...Catch` bloco de manipulação de exceção, colocar uma chamada para <xref:System.Messaging.MessageQueueTransaction.Commit%2A> no `Try` cláusula e uma chamada para <xref:System.Messaging.MessageQueueTransaction.Abort%2A> no `Catch` cláusula.  
  
 <xref:System.Messaging.MessageQueueTransaction.Abort%2A> Reverte a transação inteira. Isso inclui todas as mensagens enviadas ou recebidas após a chamada para <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">A transação interna que você está tentando reverter não foi iniciada.</exception>
        <exception cref="T:System.Messaging.MessageQueueException">Ocorre um erro interno do Enfileiramento de Mensagens.</exception>
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Begin" />
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Commit" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Begin" />
      <MemberSignature Language="VB.NET" Value="Public Sub Begin ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Begin();" />
      <MemberSignature Language="F#" Value="member this.Begin : unit -&gt; unit" Usage="messageQueueTransaction.Begin " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Inicia uma nova transação interna do Enfileiramento de Mensagens.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageQueueTransaction.Begin%2A> marca o início do processamento que será confirmado ou revertido, dependendo do sucesso da transação. Se ocorrer uma exceção durante o processamento, a transação inteira será revertida. Isso inclui todas as mensagens enviadas ou recebidas após a chamada para <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.  
  
 Normalmente, um faz uma chamada para <xref:System.Messaging.MessageQueueTransaction.Begin%2A> dentro de um `Try...Catch` bloco de manipulação de exceção, colocar uma chamada para <xref:System.Messaging.MessageQueueTransaction.Commit%2A> no `Try` cláusula e uma chamada para <xref:System.Messaging.MessageQueueTransaction.Abort%2A> no `Catch` cláusula.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">A transação já foi iniciada.</exception>
        <exception cref="T:System.Messaging.MessageQueueException">Ocorre um erro interno do Enfileiramento de Mensagens.</exception>
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Abort" />
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Commit" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public void Commit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Commit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Commit" />
      <MemberSignature Language="VB.NET" Value="Public Sub Commit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Commit();" />
      <MemberSignature Language="F#" Value="member this.Commit : unit -&gt; unit" Usage="messageQueueTransaction.Commit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Confirma uma transação interna pendente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageQueueTransaction.Commit%2A> marca a conclusão bem-sucedida de processamento iniciado em uma chamada para <xref:System.Messaging.MessageQueueTransaction.Begin%2A>. Se uma exceção ocorrer entre a chamada a <xref:System.Messaging.MessageQueueTransaction.Begin%2A> e a chamada para <xref:System.Messaging.MessageQueueTransaction.Commit%2A>, toda a transação será revertida. Isso inclui todas as mensagens enviadas ou recebidas após a chamada para <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.  
  
 Normalmente, um faz uma chamada para <xref:System.Messaging.MessageQueueTransaction.Begin%2A> dentro de um `Try...Catch` bloco de manipulação de exceção, colocar uma chamada para <xref:System.Messaging.MessageQueueTransaction.Commit%2A> no `Try` cláusula e uma chamada para <xref:System.Messaging.MessageQueueTransaction.Abort%2A> no `Catch` cláusula.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">A transação que você está tentando confirmar não foi iniciada.</exception>
        <exception cref="T:System.Messaging.MessageQueueException">Ocorre um erro interno do Enfileiramento de Mensagens.</exception>
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Abort" />
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Begin" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Libera os recursos usados pelo <see cref="T:System.Messaging.MessageQueueTransaction" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="messageQueueTransaction.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libera todos os recursos usados pelo <see cref="T:System.Messaging.MessageQueueTransaction" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chamando <xref:System.Messaging.MessageQueueTransaction.Dispose%2A> permite que os recursos usados pelo <xref:System.Messaging.MessageQueueTransaction> para ser realocados para outras finalidades. Para obter mais informações sobre `Dispose`, consulte [limpeza de recursos não gerenciados](~/docs/standard/garbage-collection/unmanaged.md).  
  
 As transações internas pendentes são revertidas pelo <xref:System.Messaging.MessageQueueTransaction.Dispose%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="messageQueueTransaction.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><see langword="true" /> para liberar recursos gerenciados e não gerenciados; <see langword="false" /> para liberar apenas recursos não gerenciados.</param>
        <summary>Libera os recursos não gerenciados usados pelo <see cref="T:System.Messaging.MessageQueueTransaction" /> e opcionalmente libera os recursos gerenciados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método é chamado pelo método público <xref:System.Messaging.MessageQueueTransaction.Dispose%2A> e pelo método <xref:System.Object.Finalize%2A>. `Dispose` invoca o método `Dispose(Boolean)` protegido com o parâmetro `disposing` definido como `true`. <xref:System.Object.Finalize%2A> invoca `Dispose` com `disposing` definido como `false`.  
  
 Quando o `disposing` parâmetro é `true`, esse método libera todos os recursos mantidos por qualquer objeto gerenciado que este <xref:System.Messaging.MessageQueueTransaction> referências. Este método invoca o método `Dispose` de cada objeto referenciado.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>
            <see langword="Dispose" /> pode ser chamado várias vezes por outros objetos. Ao substituir <see langword="Dispose(Boolean)" />, tome cuidado para não referenciar objetos que tenham sido descartados anteriormente em uma chamada anterior para <see langword="Dispose" />. Para obter mais informações sobre como implementar <see langword="Dispose" />, consulte [implementando um método Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  Para obter mais informações sobre <see langword="Dispose" /> e <see langword="Finalize" />, consulte [limpeza de recursos não gerenciados](~/docs/standard/garbage-collection/unmanaged.md) e [substituindo o método Finalize](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</para></block>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MessageQueueTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!MessageQueueTransaction ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="messageQueueTransaction.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libera os recursos mantidos pela instância atual.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método substitui <xref:System.Object.Finalize%2A?displayProperty=nameWithType>. O código do aplicativo não deve chamar este método; o método <xref:System.Messaging.MessageQueueTransaction.Finalize%2A> de um objeto é invocado automaticamente durante a coleta de lixo, a menos que a finalização pelo coletor de lixo tenha sido desabilitada por uma chamada para o método <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType>.  
  
 Para obter mais informações, consulte [métodos Finalize e destruidores](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/0s71x931(v%3dvs.100)), [limpeza de recursos não gerenciados](~/docs/standard/garbage-collection/unmanaged.md), e [substituindo o método Finalize](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Status">
      <MemberSignature Language="C#" Value="public System.Messaging.MessageQueueTransactionStatus Status { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.MessageQueueTransactionStatus Status" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueTransaction.Status" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Status As MessageQueueTransactionStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::MessageQueueTransactionStatus Status { System::Messaging::MessageQueueTransactionStatus get(); };" />
      <MemberSignature Language="F#" Value="member this.Status : System.Messaging.MessageQueueTransactionStatus" Usage="System.Messaging.MessageQueueTransaction.Status" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageQueueTransactionStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o status da transação.</summary>
        <value>Um do <see cref="T:System.Messaging.MessageQueueTransactionStatus" /> valores que indica se a transação foi confirmada, anulada, inicializado, ou se está pendente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando uma instância das <xref:System.Messaging.MessageQueueTransaction> classe tiver sido criado, o <xref:System.Messaging.MessageQueueTransaction.Status%2A> é definido pelo construtor para `Initialized`. Após uma chamada para <xref:System.Messaging.MessageQueueTransaction.Begin%2A> , mas antes de uma chamada para <xref:System.Messaging.MessageQueueTransaction.Commit%2A> ou <xref:System.Messaging.MessageQueueTransaction.Abort%2A>, o <xref:System.Messaging.MessageQueueTransaction.Status%2A> é `Pending`.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Messaging.MessageQueueTransactionStatus" />
      </Docs>
    </Member>
  </Members>
</Type>