<Type Name="Cursor" FullName="System.Messaging.Cursor">
  <TypeSignature Language="C#" Value="public sealed class Cursor : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Cursor extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.Cursor" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Cursor&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Cursor sealed : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="a757f-101">Um <see cref="T:System.Messaging.Cursor" /> é usado para manter um local específico em um <see cref="T:System.Messaging.MessageQueue" /> ao ler as mensagens da fila.</span><span class="sxs-lookup"><span data-stu-id="a757f-101">A <see cref="T:System.Messaging.Cursor" /> is used to maintain a specific location in a <see cref="T:System.Messaging.MessageQueue" /> when reading the queue's messages.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a757f-102">Para obter um cursor para um <xref:System.Messaging.MessageQueue>, chame o <xref:System.Messaging.MessageQueue.CreateCursor%2A> método para essa fila.</span><span class="sxs-lookup"><span data-stu-id="a757f-102">To get a cursor for a <xref:System.Messaging.MessageQueue>, call the <xref:System.Messaging.MessageQueue.CreateCursor%2A> method for that queue.</span></span>  
  
 <span data-ttu-id="a757f-103">Um <xref:System.Messaging.Cursor> é usado com esses métodos como <xref:System.Messaging.MessageQueue.Peek%28System.TimeSpan%2CSystem.Messaging.Cursor%2CSystem.Messaging.PeekAction%29> e <xref:System.Messaging.MessageQueue.Receive%28System.TimeSpan%2CSystem.Messaging.Cursor%29> quando você precisa ler as mensagens que não estão na frente da fila.</span><span class="sxs-lookup"><span data-stu-id="a757f-103">A <xref:System.Messaging.Cursor> is used with such methods as <xref:System.Messaging.MessageQueue.Peek%28System.TimeSpan%2CSystem.Messaging.Cursor%2CSystem.Messaging.PeekAction%29> and <xref:System.Messaging.MessageQueue.Receive%28System.TimeSpan%2CSystem.Messaging.Cursor%29> when you need to read messages that are not at the front of the queue.</span></span> <span data-ttu-id="a757f-104">Isso inclui ler mensagens de forma síncrona ou assíncrona.</span><span class="sxs-lookup"><span data-stu-id="a757f-104">This includes reading messages synchronously or asynchronously.</span></span> <span data-ttu-id="a757f-105">Cursores não precisa ser usado para ler a primeira mensagem em uma fila.</span><span class="sxs-lookup"><span data-stu-id="a757f-105">Cursors do not need to be used to read only the first message in a queue.</span></span>  
  
 <span data-ttu-id="a757f-106">Ao ler mensagens em uma transação, enfileiramento de mensagens não reverte movimento do cursor se a transação foi anulada.</span><span class="sxs-lookup"><span data-stu-id="a757f-106">When reading messages within a transaction, Message Queuing does not roll back cursor movement if the transaction is aborted.</span></span> <span data-ttu-id="a757f-107">Por exemplo, suponha que há uma fila com duas mensagens, A1 e A2.</span><span class="sxs-lookup"><span data-stu-id="a757f-107">For example, suppose there is a queue with two messages, A1 and A2.</span></span> <span data-ttu-id="a757f-108">Se você remover a mensagem A1 enquanto estiver em uma transação, enfileiramento de mensagens move o cursor para a mensagem A2.</span><span class="sxs-lookup"><span data-stu-id="a757f-108">If you remove message A1 while in a transaction, Message Queuing moves the cursor to message A2.</span></span> <span data-ttu-id="a757f-109">No entanto, se a transação foi anulada por qualquer motivo, mensagem que a1 será inserida novamente na fila, mas o cursor permanecerá apontando para mensagens A2.</span><span class="sxs-lookup"><span data-stu-id="a757f-109">However, if the transaction is aborted for any reason, message A1 is inserted back into the queue but the cursor remains pointing at message A2.</span></span>  
  
 <span data-ttu-id="a757f-110">Para fechar o cursor, chame <xref:System.Messaging.Cursor.Close%2A>.</span><span class="sxs-lookup"><span data-stu-id="a757f-110">To close the cursor, call <xref:System.Messaging.Cursor.Close%2A>.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Messaging.MessageQueue.CreateCursor" />
  </Docs>
  <Members>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.Cursor.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a757f-111">Fecha o cursor, permitindo que o Enfileiramento de Mensagens libere os recursos associados.</span><span class="sxs-lookup"><span data-stu-id="a757f-111">Closes the cursor, allowing Message Queuing to release the associated resources.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Messaging.Cursor" />
        <altmember cref="M:System.Messaging.MessageQueue.CreateCursor" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.Cursor.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a757f-112">Libera todos os recursos usados pelo <see cref="T:System.Messaging.Cursor" />.</span><span class="sxs-lookup"><span data-stu-id="a757f-112">Releases all resources used by the <see cref="T:System.Messaging.Cursor" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Messaging.Cursor" />
        <altmember cref="M:System.Messaging.MessageQueue.CreateCursor" />
      </Docs>
    </Member>
  </Members>
</Type>