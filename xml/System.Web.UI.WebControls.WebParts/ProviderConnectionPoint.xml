<Type Name="ProviderConnectionPoint" FullName="System.Web.UI.WebControls.WebParts.ProviderConnectionPoint">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d2fb2b1c6f52df31bf047de911a8e747c603bf4f" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51896814" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ProviderConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ProviderConnectionPoint extends System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
  <TypeSignature Language="VB.NET" Value="Public Class ProviderConnectionPoint&#xA;Inherits ConnectionPoint" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProviderConnectionPoint : System::Web::UI::WebControls::WebParts::ConnectionPoint" />
  <TypeSignature Language="F#" Value="type ProviderConnectionPoint = class&#xA;    inherit ConnectionPoint" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.ConnectionPoint</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Define um objeto de ponto de conexão que permite que um controle de servidor que funciona como provedor forme uma conexão com um consumidor.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Em cada conexão de Web Parts entre dois controles de servidor, cada controle deve ter (entre outros requisitos) um objeto de ponto de conexão associado que permite que ele se conectar a outro controle e fornecer ou consumir dados, dependendo se o controle é designado como o provedor ou consumidor para a conexão. Um <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> objeto em geral contém os detalhes de como um controle pode se conectar a outro controle e o tipo de dados que ele pode compartilhar. Para um controle que atua como o provedor em uma conexão, seu ponto de conexão deve ser um <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objeto. Para obter detalhes sobre conexões de Web Parts e os pontos de conexão, consulte os tópicos listados na seção Consulte também abaixo.  
  
 Para criar um <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> do objeto, várias etapas são necessárias:  
  
1.  Crie uma interface. Quando um provedor é compartilha dados com um consumidor, ele faz isso obtendo uma instância de uma interface e retornando essa instância com um consumidor.  
  
2.  Implemente a interface em um provedor. Um <xref:System.Web.UI.WebControls.WebParts.WebPart> ou outro controle de servidor (qualquer tipo de controle de servidor em um <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zona pode ser usada) que será o provedor deve implementar a interface criada na primeira etapa.  
  
3.  Identificar um método de retorno de chamada. Um método no provedor deve ser identificado como o método de retorno de chamada para estabelecer uma conexão. Esse método retorna uma instância da interface implementada para um consumidor. A abordagem de Web Parts para identificar um método de retorno de chamada no provedor é adicionar um `ConnectionProvider` atributo de metadados (definido pelo <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> classe) para o método que retorna a instância da interface. Quando o atributo é adicionado, o único parâmetro necessário é um nome de exibição a ser usado para o ponto de conexão do provedor. Parâmetros opcionais também podem ser adicionados, como uma ID para o ponto de conexão.  
  
 Depois que um controle foi equipado para atuar como um provedor, o controle pode participar de conexões (supondo que um controle do consumidor da mesma forma está equipado e disponível). Para criar uma conexão estática e declarativo na marcação de uma página da Web, os desenvolvedores podem usar o `<asp:webpartconnection>` elemento. Se o `ConnectionProvider` atributo no código de origem do provedor que identifica o método de retorno de chamada especifica uma ID para o ponto de conexão e, em seguida, esse valor deve ser atribuído ao `ProviderConnectionPointID` atributo no `<asp:webpartconnection>` elemento em uma página. Um motivo que um desenvolvedor pode especificar uma ID para um ponto de conexão do provedor é se há vários pontos de conexão no controle do provedor. Se uma ID não for especificada para o ponto de conexão do provedor no controle do provedor, um valor não precisa ser atribuído à `ProviderConnectionPointID` de atributo na página, porque a conexão será criada usando um valor padrão obtido o <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> campo.  
  
 Para criar uma conexão no código, os desenvolvedores precisam criar um novo <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objeto chamando o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> método e passando a ele a ID do controle do provedor, juntamente com a ID ou o índice de definidos <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objeto no controle do provedor. Retornado <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> do objeto, juntamente com uma referência ao controle do provedor, uma referência para o controle do consumidor e um que corresponde <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> de objeto, são todos passados para o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> método para criar um novo <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objeto.  
  
 Embora os desenvolvedores podem usar pontos de conexão do provedor como parte do estabelecimento de conexões de forma declarativa ou por meio de programação, os usuários também podem interagir com pontos de conexão do provedor para estabelecer conexões por meio da interface do usuário (IU). Se os desenvolvedores declarar um <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> controle em uma página da Web, ele fornece uma interface do usuário de tempo de execução para que os usuários criem conexões. Se o usuário escolher o controle do consumidor como ponto de partida para estabelecer a conexão clicando em seu conectar-se o verbo (eles também pode escolher o provedor; não há nenhuma diferença na conexão resultante), a interface do usuário, eles verão um controle de lista suspensa com o Exiba o nome do provedor disponível conexão ponto (ou pontos se houver várias). Os usuários devem selecionar um ponto de conexão do provedor para criar uma conexão.  
  
 Um <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objeto associa diretamente um controle específico do provedor e armazena os detalhes sobre uma conexão nas propriedades do qual ele herda a base de <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> classe. Por exemplo, no herdadas <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> mantém de um ponto de conexão do provedor de propriedade, o tipo de interface retornado pelo provedor. Se o provedor e consumidor em uma conexão que ambas funcionam com o mesmo tipo de interface, os controles são compatíveis e capazes de formar uma conexão direta. Se o provedor e consumidor não podem funcionar com o mesmo tipo de interface, elas são incompatíveis e deve usar um <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> objeto para converter o ponto de conexão de provedor <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> valor em um tipo que o consumidor pode trabalhar com. Outra propriedade herdada importante é o <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> ao criar conexões de ponto de propriedade, que fornece um nome amigável para exibir na interface do usuário para que os usuários escolham uma conexão de provedor. O nome de exibição é o parâmetro necessário quando os desenvolvedores adicionar um `ConnectionProvider` de atributo para o método de retorno de chamada em um controle do provedor. O herdadas <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> propriedade também é útil, conforme indicado acima, pois ele fornece um identificador exclusivo para um ponto de conexão do provedor que um provedor tem vários pontos de conexão. Um provedor pode ter vários <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objetos definidos nela e nesse caso, quando os desenvolvedores adicionar o `ConnectionProvider` atributo a um método, eles devem especificar um valor de ID para distinguir cada ponto de conexão. Uma outra propriedade herdada notável é o <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> propriedade, que indica se um ponto de conexão do provedor pode se conectar simultaneamente para vários consumidores. Esse valor da propriedade é `true` por padrão para pontos de conexão do provedor (enquanto o padrão é `false` para pontos de conexão do consumidor).  
  
 O <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> classe adiciona vários métodos exclusivos para os membros do qual ele herda o <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> classe. O <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> método recupera uma instância da interface que o método de retorno de chamada será retornado para os consumidores. O <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A> método recupera as interfaces de consumidor adicionais que fazem parte de uma conexão existente, mas não as interfaces que são usadas para estabelecer a conexão.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra maneiras simples de criar uma conexão de forma declarativa, programaticamente ou por meio de interface do usuário, em cada tomada em caso de uso de um ponto de conexão do provedor.  
  
 O exemplo tem quatro partes:  
  
-   Modo de exibição de um controle de usuário que permite que você altere as Web Parts em uma página.  
  
-   Código-fonte de uma interface e dois <xref:System.Web.UI.WebControls.WebParts.WebPart> controla atuando como o provedor e o consumidor para uma conexão.  
  
-   Uma página da Web para hospedar todos os controles e executar o exemplo de código.  
  
-   Uma explicação de como executar o exemplo de página.  
  
 A primeira parte deste exemplo de código é o controle de usuário que permite aos usuários alterar modos de exibição em uma página da Web. Salve o seguinte código-fonte em um arquivo. ascx, dando a ele o nome do arquivo que é atribuído à `Src` atributo do `Register` diretiva para este controle de usuário, que está na parte superior da página da Web de hospedagem. Para obter detalhes sobre como exibem os modos e uma descrição do código-fonte nesse controle, consulte [instruções passo a passo: alterando modos de exibir em uma página de Web Parts](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 A segunda parte do exemplo de código é o código-fonte para a interface e controles. O arquivo de origem contém uma interface simples chamada `IZipCode`. Há também uma <xref:System.Web.UI.WebControls.WebParts.WebPart> classe denominada `ZipCodeWebPart` que implementa a interface e atua como o controle do provedor. Seu `ProvideIZipCode` método é o método de retorno de chamada que implementa o membro de apenas da interface. O método simplesmente retorna uma instância da interface. Observe que o método é marcado com um `ConnectionProvider` atributo em seus metadados. Esse é o mecanismo para identificar o método como o método de retorno de chamada para o ponto de conexão do provedor. A outra <xref:System.Web.UI.WebControls.WebParts.WebPart> classe é chamada `WeatherWebPart`, e ele atua como o consumidor para a conexão. Essa classe tem um método chamado `GetZipCode` que obtém uma instância do `IZipCode` interface de controle do provedor. Observe que esse método seja marcado como método de ponto de conexão do consumidor com uma `ConnectionConsumer` atributo em seus metadados. Esse é o mecanismo para identificar o método de ponto de conexão no controle do consumidor.  
  
 Para o exemplo de código seja executado, você deve compilar este código-fonte. Você pode compilá-lo explicitamente e coloque o assembly resultante na pasta Bin do seu site da Web ou cache de assembly global. Como alternativa, você pode colocar o código-fonte na pasta App_Code de seu site, onde ele será compilado dinamicamente no tempo de execução. Este exemplo de código usa a compilação dinâmica. Para um passo a passo que demonstra como compilar, consulte [instruções passo a passo: desenvolvendo e usando um controle de servidor Web personalizado](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/ZipCodeComponent.vb#2)]  
  
 A terceira parte do exemplo de código é a página da Web. Próximo à parte superior são `Register` diretivas para registrar os controles personalizados que formam a conexão e o controle de usuário que permite aos usuários alterar modos de exibição na página. A conexão em si é criado declarativamente dentro de `<staticconnections>` elemento na página. Isso demonstra uma maneira de criar uma conexão – Observação a `ProviderConnectionPointID` de atributo no `<asp:webpartconnection>` elemento. Você também pode criar a conexão por meio de programação; o código para fazer o que está no `Button1_Click` método. Nesse caso, um <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objeto é criado e, em seguida, passado para um método que cria a conexão real. Se a conexão será criado de forma declarativa ou por meio de programação, os pontos de conexão sempre devem ser especificados para o provedor e o consumidor. O `Button2_Click` método acessa o <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> objetos para o provedor e o consumidor e escreve alguns dos seus valores de propriedade em um rótulo na página.  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 Depois de carregar a página em um navegador, clique o **detalhes do ponto de Conexão** botão. Informações sobre os pontos de conexão de provedor e consumidor estabelecido em que a conexão declarativa é exibida. Em seguida, use o **modo de exibição** controle de lista suspensa para alternar a página em modo de conexão. No menu de verbos do **consumidor código postal** <xref:System.Web.UI.WebControls.WebParts.WebPart> controle (representado por uma seta para baixo na barra de título), clique no verbo connect. A conexão de interface do usuário for exibida, criados automaticamente pelo `<asp:connectionszone>` controle declarado na página. Essa é outra maneira de criar uma conexão (por meio da interface do usuário), junto com os métodos programáticos e declarativos discutidos anteriormente. Clique o **desconectar** botão para encerrar a conexão estático existente. Clique o **criar uma Conexão a um provedor de** link. Agora, a interface do usuário exibe um controle de lista suspensa que lista o nome de exibição de ponto de conexão do provedor. Selecione o ponto de conexão na lista suspensa e, em seguida, clique em **Connect** para concluir a conexão. Em seguida, clique em **desconectar** novamente. Em seguida, clique o **Conexão dinâmica** botão para criar uma conexão por meio de programação. Use o **modo de exibição** controle para retornar a página para o modo de procura. Clique o **detalhes de ponto de Conexão** botão novamente, para indicar uma vez mais detalhes sobre o objeto de ponto de conexão do provedor.  
  
 O exemplo tenha demonstrado estabelecendo uma conexão e usando um ponto de conexão do provedor de três maneiras: uma conexão estático é declarado na marcação da página da Web; uma conexão criada no código que é usado um <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objeto; e uma conexão criada por um usuário por meio de conexão da interface do usuário.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
    <related type="Article" href="https://msdn.microsoft.com/library/ab78a66e-9feb-4391-b3c3-8c07555e2308">Páginas do ASP.NET Web Parts</related>
    <related type="Article" href="https://msdn.microsoft.com/library/d98cfd0f-ebd6-4871-89d5-abbd2cdef67b">Visão geral de conexões de partes da Web</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ProviderConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MethodInfo callbackMethod, class System.Type interfaceType, class System.Type controlType, string displayName, string id, bool allowsMultipleConnections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callbackMethod As MethodInfo, interfaceType As Type, controlType As Type, displayName As String, id As String, allowsMultipleConnections As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ProviderConnectionPoint(System::Reflection::MethodInfo ^ callbackMethod, Type ^ interfaceType, Type ^ controlType, System::String ^ displayName, System::String ^ id, bool allowsMultipleConnections);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.WebParts.ProviderConnectionPoint : System.Reflection.MethodInfo * Type * Type * string * string * bool -&gt; System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" Usage="new System.Web.UI.WebControls.WebParts.ProviderConnectionPoint (callbackMethod, interfaceType, controlType, displayName, id, allowsMultipleConnections)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callbackMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="interfaceType" Type="System.Type" />
        <Parameter Name="controlType" Type="System.Type" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="allowsMultipleConnections" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callbackMethod">O método no controle do provedor que retorna uma instância de interface para que os consumidores estabeleçam uma conexão.</param>
        <param name="interfaceType">O <see cref="T:System.Type" /> da interface que o provedor serve aos consumidores.</param>
        <param name="controlType">O <see cref="T:System.Type" /> do controle do provedor ao qual o ponto de conexão do provedor está associado.</param>
        <param name="displayName">Um nome de exibição amigável para o ponto de conexão do provedor que aparece para usuários na IU (interface do usuário) de conexão.</param>
        <param name="id">Um identificador exclusivo para o ponto de conexão do provedor.</param>
        <param name="allowsMultipleConnections">Um valor booliano que indica se o ponto de conexão do provedor pode ter várias conexões simultâneas com consumidores.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A> construtor para o <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> classe simplesmente chama o construtor de base, passando a ele os vários parâmetros e inicializar a classe base.  
  
 O construtor de classe base verifica um número de parâmetros para um ponto de conexão e pode acionar diversas exceções. Para obter uma lista de exceções possíveis, consulte a seção exceções.  
  
 Você pode chamar o <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A> construtor para criar sua própria instância da <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> classe. No entanto, em casos onde você está simplesmente estabelecer uma conexão e não estendendo a classe, você deve chamar o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> método para retornar um objeto de ponto de conexão existente de um provedor.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como derivar a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> classe para criar um ponto de conexão do provedor personalizado.  
  
 O exemplo de código tem três partes:  
  
-   Um arquivo de origem que contém um provedor <xref:System.Web.UI.WebControls.WebParts.WebPart> controlar, um consumidor <xref:System.Web.UI.WebControls.WebParts.WebPart> controle e um personalizado <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objeto.  
  
-   Uma página da Web que hospeda os controles em uma conexão estática.  
  
-   Uma explicação de como executar o exemplo de código.  
  
 A primeira parte do exemplo de código é a origem para o provedor e consumidor <xref:System.Web.UI.WebControls.WebParts.WebPart> controles e um personalizado <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> classe, denominada `TableProviderConnectionPoint`. Observe que o construtor do `TableProviderConnectionPoint` classe chama o construtor base, passando os parâmetros necessários conforme indicado na seção de parâmetros. Observe também que no `TableProviderWebPart` classe, o `GetConnectionInterface` método é especificado como o método de retorno de chamada para conexões e o `ConnectionProvider` atributo declara personalizado `TableProviderConnectionPoint` como um parâmetro. Isso demonstra como criar um ponto de conexão do provedor personalizado e, em seguida, associá-lo a um controle do provedor. Este exemplo pressupõe que o código-fonte é compilado dinamicamente, portanto, você deverá colocar o arquivo de código de origem em uma subpasta App_Code do aplicativo Web.  
  
 [!code-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/connectionControls.cs#1)]  
  
 A segunda parte do exemplo de código é a página da Web que hospeda os controles personalizados em uma conexão de Web Parts estático. Na parte superior da página é um `Register` diretiva para declarar um prefixo e o namespace para os controles personalizados. A conexão é declarado usando um `<asp:webpartconnection>` controles de elemento e o provedor e consumidor são declarados dentro de um `<asp:webpartzone>` elemento.  
  
 [!code-aspx-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/defaultcs.aspx#3)]  
  
 Carregue a página em um navegador. A conexão entre os controles já existe e o consumidor exibe os dados do provedor, porque a conexão foi declarado como uma conexão estático na página.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callbackMethod" /> é <see langword="null" />.  
  
\- ou - 
 <paramref name="interfaceType" /> é <see langword="null" />.  
  
\- ou - 
 <paramref name="controlType" /> é <see langword="null" />.  
  
\- ou - 
 <paramref name="displayName" /> é <see langword="null" /> ou uma cadeia de caracteres vazia ("").</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="controlType" /> não é o mesmo tipo que o controle do provedor (ou uma classe válida derivada dele).</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
        <related type="Article" href="https://msdn.microsoft.com/library/ab78a66e-9feb-4391-b3c3-8c07555e2308">Páginas do ASP.NET Web Parts</related>
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public virtual object GetObject (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetObject(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetObject(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member GetObject : System.Web.UI.Control -&gt; obj&#xA;override this.GetObject : System.Web.UI.Control -&gt; obj" Usage="providerConnectionPoint.GetObject control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">O controle que age como o provedor em uma conexão de Web Parts.</param>
        <summary>Invoca o método de retorno de chamada em um controle do provedor que obtém uma instância da interface para retornar a consumidores.</summary>
        <returns>Um <see cref="T:System.Object" /> que é uma instância da interface que um provedor retorna para os consumidores para estabelecer uma conexão.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método retorna um objeto de controle do provedor que é uma instância da interface usada para estabelecer uma conexão. O tipo do objeto será o tipo da interface implementada. Por exemplo, duas interfaces que são implementadas para conexões de Web Parts são do conjunto de controles <xref:System.Web.UI.WebControls.WebParts.IWebPartField> e <xref:System.Web.UI.WebControls.WebParts.IWebPartRow>. Quando o <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> método é chamado em um <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> do objeto, se o provedor associado implementa uma dessas interfaces, o objeto retornado será do mesmo tipo.  
  
 O <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> método é chamado pelo <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objetos quando uma conexão está sendo ativado. Essa é uma etapa crítica que realmente inicia uma conexão e inicia o processo que permite que os dois controles compartilhar dados.  
  
 O controle do consumidor em uma conexão deve ser capaz de trabalhar com o mesmo tipo da interface como o provedor. Se isso não acontecer, os controles são incompatíveis e um <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> objeto deve ser usado para estabelecer uma conexão.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> é <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSecondaryInterfaces">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::UI::WebControls::WebParts::ConnectionInterfaceCollection ^ GetSecondaryInterfaces(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member GetSecondaryInterfaces : System.Web.UI.Control -&gt; System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection&#xA;override this.GetSecondaryInterfaces : System.Web.UI.Control -&gt; System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" Usage="providerConnectionPoint.GetSecondaryInterfaces control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">O controle que age como o provedor em uma conexão de Web Parts.</param>
        <summary>Obtém uma coleção opcional de interfaces secundárias que podem ser compatíveis com um ponto de conexão do provedor.</summary>
        <returns>Uma <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" /> de interfaces adicionais fornecidas pelo controle que atua como um provedor.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um objeto de ponto de conexão do provedor sempre tem uma interface padrão que é usada para estabelecer uma conexão com os consumidores. Uma instância da interface padrão é recuperada pela chamada a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> método em um <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objeto.  
  
 No entanto, alguns controles de provedor irá implementar várias interfaces de fornecer aos consumidores como parte de uma conexão. Essas interfaces, que não são os valores usados para estabelecer uma conexão padrão, são chamados de interfaces secundárias. O <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A> método fornece uma maneira para retornar uma coleção de referências às interfaces secundárias, assim como o <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> método retorna uma referência para a interface padrão.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>O <see cref="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" /> método no <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> classe não contiver nenhuma implementação; retorna uma coleção vazia de interfaces secundárias. Para implementar esse método, você deve herdar o <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> de classe e substituir esse método, retornando de um conjunto específico de interfaces secundárias.</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>