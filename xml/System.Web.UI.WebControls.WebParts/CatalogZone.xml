<Type Name="CatalogZone" FullName="System.Web.UI.WebControls.WebParts.CatalogZone">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="79c0c966fb9465678c7f5249f6196fa4c0aa4d5a" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39812982" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CatalogZone : System.Web.UI.WebControls.WebParts.CatalogZoneBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CatalogZone extends System.Web.UI.WebControls.WebParts.CatalogZoneBase" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.CatalogZone" />
  <TypeSignature Language="VB.NET" Value="Public Class CatalogZone&#xA;Inherits CatalogZoneBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class CatalogZone : System::Web::UI::WebControls::WebParts::CatalogZoneBase" />
  <TypeSignature Language="F#" Value="type CatalogZone = class&#xA;    inherit CatalogZoneBase" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.CatalogZoneBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.WebParts.CatalogZoneDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Web.UI.SupportsEventValidation</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.WebParts.CatalogZoneDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Serve como o controle principal no conjunto de controles de Web Parts para hospedar controles <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> em uma página da Web.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dentro do conjunto de controles de Web Parts, uma zona é uma região em uma página da Web que contém controles de Web Parts. Uma zona de Web Parts é criada por um controle de zona, que é um tipo de <xref:System.Web.UI.WebControls.CompositeControl> criado para conter outros controles. As funções primárias de uma zona são para dispor os controles que ele contém e para fornecer uma interface de usuário (IU) para esses controles. Para obter informações gerais sobre zonas e como eles são usados em aplicativos Web Parts, consulte na base <xref:System.Web.UI.WebControls.WebParts.WebZone> classe, e [Web Parts Control Set Overview](http://msdn.microsoft.com/library/ff0149e4-695a-401a-8cda-53df6d7d2668).  
  
 Um recurso importante dos controles de Web Parts é que eles permitem que os usuários finais modificar (ou personalizar) em páginas da Web acordo com suas preferências e salvem suas configurações personalizadas para sessões futuras do navegador. Um aspecto da modificação de páginas de Web Parts inclui a capacidade de adicionar <xref:System.Web.UI.WebControls.WebParts.WebPart> controles ou outros controles de servidor a uma página de Web Parts. O <xref:System.Web.UI.WebControls.WebParts.CatalogZone> controle fornece uma lista ou um catálogo de controles que os usuários podem adicionar a uma página.  
  
 O <xref:System.Web.UI.WebControls.WebParts.CatalogZone> controle for um dos controles fundamentais no conjunto de controles de Web Parts. Ele deriva o <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> classe e a maior parte de seu comportamento é herdado da classe. O <xref:System.Web.UI.WebControls.WebParts.CatalogZone> classe essencialmente adiciona à classe base um modelo de zona, que é uma implementação do <xref:System.Web.UI.ITemplate> interface. O modelo de zona permite aos desenvolvedores adicionar declarativamente <xref:System.Web.UI.WebControls.WebParts.CatalogPart> controles a uma zona no formato de persistência de página.  
  
> [!IMPORTANT]
>  Um <xref:System.Web.UI.WebControls.WebParts.CatalogZone> zona pode conter apenas <xref:System.Web.UI.WebControls.WebParts.CatalogPart> controles e por outro lado, <xref:System.Web.UI.WebControls.WebParts.CatalogPart> controles podem residir apenas em zonas que derivam de <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> classe, como <xref:System.Web.UI.WebControls.WebParts.CatalogZone>.  
  
 Um <xref:System.Web.UI.WebControls.WebParts.CatalogZone> controle fica visível apenas quando um usuário alterna uma página da Web para o modo de exibição de catálogo (<xref:System.Web.UI.WebControls.WebParts.WebPartManager.CatalogDisplayMode>). Um catálogo pode conter vários tipos de <xref:System.Web.UI.WebControls.WebParts.CatalogPart> controles. Cada <xref:System.Web.UI.WebControls.WebParts.CatalogPart> controle é um tipo de contêiner que contém os controles de servidor que os usuários podem adicionar à página. O <xref:System.Web.UI.WebControls.WebParts.CatalogPart> diferem de controles de acordo com onde os controles de servidor que eles contêm são provenientes. A tabela a seguir resume o <xref:System.Web.UI.WebControls.WebParts.CatalogPart> controla fornecido com o conjunto de controles de Web Parts e, para cada controle, que tipo de servidor controla a ele contém.  
  
|Controle|Descrição|  
|-------------|-----------------|  
|<xref:System.Web.UI.WebControls.WebParts.PageCatalogPart>|Mantém referências aos controles que foram fechados em uma página. Esses controles podem ser reabertos (adicionadas de volta para a página) pelos usuários.|  
|<xref:System.Web.UI.WebControls.WebParts.DeclarativeCatalogPart>|Contém referências aos controles que são declarados em um catálogo de Web Parts na marcação de uma página da Web. Esses controles podem ser adicionados a uma página da Web por usuários.|  
|<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>|Fornece a interface do usuário para um usuário carregar um arquivo de definição (um arquivo XML com um. Extensão de Web Part e um formato especificado que contém informações de estado) para um controle a um catálogo, para que o controle pode ser adicionado a uma página da Web.|  
  
 Porque o <xref:System.Web.UI.WebControls.WebParts.CatalogZone> classe adiciona apenas um modelo de zona para o comportamento de sua classe base, ele tem alguns membros. O <xref:System.Web.UI.WebControls.WebParts.CatalogZone.%23ctor%2A> construtor é um construtor padrão; com ele, você pode inicializar uma nova instância do <xref:System.Web.UI.WebControls.WebParts.CatalogZone> classe. O <xref:System.Web.UI.WebControls.WebParts.CatalogZone.ZoneTemplate%2A> propriedade obtém ou define uma referência para o <xref:System.Web.UI.ITemplate> objeto que contém os controles para a zona. O <xref:System.Web.UI.WebControls.WebParts.CatalogZone.CreateCatalogParts%2A> método é essencial. Ele substitui o método base para criar a coleção de todos os <xref:System.Web.UI.WebControls.WebParts.CatalogPart> controles contidos no modelo de zona.  
  
> [!NOTE]
>  Os botões a <xref:System.Web.UI.WebControls.WebParts.CatalogZone> interface do usuário exigem scripts do lado do cliente para funcionar corretamente. Se o script é desativado no navegador, o usuário não será capaz de executar ações por meio de <xref:System.Web.UI.WebControls.WebParts.CatalogZone> interface do usuário.  
  
## <a name="accessibility"></a>Acessibilidade  
 A marcação processada por padrão para esse controle pode não estar em conformidade com padrões de acessibilidade, como as diretrizes de prioridade 1 conteúdo WCAG Web Accessibility Guidelines 1.0 (). Para obter detalhes sobre o suporte de acessibilidade para esse controle, consulte [controles ASP.NET e acessibilidade](http://msdn.microsoft.com/library/847a37e3-ce20-41da-b0d3-7dfb0fdae9a0).  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra o uso programático e declarativo do <xref:System.Web.UI.WebControls.WebParts.CatalogZone> controle. O exemplo de código tem quatro partes:  
  
-   Um controle de usuário que permite que você altere os modos de exibição na página da Web.  
  
-   Um arquivo com o código-fonte para um personalizado <xref:System.Web.UI.WebControls.WebParts.CatalogZone> controle e um personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> controle que é importado pelo catálogo e adicionado à página da Web.  
  
-   Uma página da Web que declara o controle de usuário e personalizado <xref:System.Web.UI.WebControls.WebParts.CatalogZone> controle.  
  
-   Uma explicação de como executar o exemplo.  
  
 A primeira parte deste exemplo de código é o controle de usuário que permite aos usuários alterar modos de exibição em uma página da Web. Para obter detalhes sobre como exibem os modos e uma descrição do código-fonte nesse controle, consulte [instruções passo a passo: alterando modos de exibir em uma página de Web Parts](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_CatalogZone_Overview#7](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZone_Overview/CS/displaymodemenucs.ascx#7)]
 [!code-aspx-vb[WebParts_CatalogZone_Overview#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZone_Overview/VB/displaymodemenuvb.ascx#7)]  
  
 A segunda parte do exemplo de código contém o código personalizado <xref:System.Web.UI.WebControls.WebParts.CatalogZone> e <xref:System.Web.UI.WebControls.WebParts.WebPart> controles. O código para o <xref:System.Web.UI.WebControls.WebParts.CatalogZone> controle demonstra como herdar o <xref:System.Web.UI.WebControls.WebParts.CatalogZone> de classe e personalizar suas propriedades, definindo valores de propriedade de algum padrão no construtor. O código-fonte também demonstra como criar um personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> classe denominada `TextDisplayWebPart`. Esse é o controle associado com o. Arquivo de descrição de Web Part que serão importados como parte deste exemplo de código. Depois de importar o arquivo de descrição usando o <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> controle na página da Web, você poderá adicionar o `TextDisplayWebPart` controle para a página, totalmente previamente configurada conforme especificado no arquivo de descrição.  
  
 Para o exemplo de código seja executado, você deve compilar este código-fonte. Você pode compilá-lo explicitamente e coloque o assembly resultante na pasta Bin do seu site da Web ou cache de assembly global. Como alternativa, você pode colocar o código-fonte na pasta App_Code de seu site, onde ele será compilado dinamicamente no tempo de execução. Este exemplo de código usa a compilação dinâmica, portanto, se você quiser executar o exemplo dessa forma, nomeie o arquivo de código fonte e adicioná-lo para uma subpasta App_Code do diretório raiz do seu aplicativo Web. Para um passo a passo que demonstra os dois métodos de compilação, consulte [instruções passo a passo: desenvolvendo e usando um controle de servidor Web personalizado](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_CatalogZone_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZone_Overview/CS/catalogSamples.cs#1)]
 [!code-vb[WebParts_CatalogZone_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZone_Overview/VB/catalogSamples.vb#1)]  
  
 A terceira parte do exemplo de código é a página da Web que contém os controles. Ele contém um `Register` diretiva para o controle de usuário e outro para o arquivo de origem com os controles personalizados. Observe que na segunda diretiva, ela não nomeia o assembly, como o exemplo não usa um assembly, ele usa a compilação dinâmica com o código-fonte colocado na subpasta App_Code. A página da Web declara uma <xref:System.Web.UI.WebControls.WebParts.WebPartZone> controle e dentro do seu filho `<zonetemplate>` elemento, ele declara um <xref:System.Web.UI.WebControls.BulletedList> controle. Embora esse seja um controle ASP.NET padrão, ele terá a funcionalidade completa de Web Parts em tempo de execução porque o <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controlar encapsula qualquer controle de servidor colocado em um <xref:System.Web.UI.WebControls.WebParts.WebPartZone> com um <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> do objeto, para que outros controles de servidor podem participar da Web Aplicativos de partes. Também é declarado nesta zona é personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> controle chamado `TextDisplayWebPart`. Observe que esse controle tem um atributo de `ExportMode="All"` declarado nele. Isso permite que você exporte um. Arquivo de descrição de Web Part que contém os valores de propriedade do controle, que pode ser importado por outros usuários para adicionar o controle pré-configurados para outras páginas da Web.  
  
> [!NOTE]
>  Permitir que os usuários de um aplicativo de Web Parts para exportar um arquivo de descrição de <xref:System.Web.UI.WebControls.WebParts.WebPart> controles, você também deve habilitar o recurso de exportação no aplicativo Web com a adição de um `enableExport="true"` atributo para o `<webParts>` elemento (que é um filho de `<system.web>`elemento) no arquivo Web. config. A exportação é desabilitada por padrão, portanto, se você ainda não ativou exportação para o seu aplicativo, edite o arquivo Web. config e fazê-lo agora.  
  
 A página da Web também declara personalizado <xref:System.Web.UI.WebControls.WebParts.CatalogZone> controle e, dentro dela, uma `<zonetemplate>` elemento que contém um <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> controle. O usuário usará esse controle em tempo de execução para importar o. Arquivo de descrição de Web Part de personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> controle.  
  
 [!code-aspx-csharp[WebParts_CatalogZone_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZone_Overview/CS/catalogzonecs.aspx#2)]
 [!code-aspx-vb[WebParts_CatalogZone_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZone_Overview/VB/catalogzonevb.aspx#2)]  
  
 Agora execute o exemplo de código. Carregue a página da Web em um navegador. A primeira etapa é exportar um. Arquivo de descrição de Web Part para o `TextDisplayWebPart` controle. Clique no menu de verbos no controle personalizado (representada pela seta para baixo na barra de título) e, em seguida, clique em **exportar**. Siga as instruções para salvar um arquivo de descrição para o controle. Abra o. Descrição de Web Part em um editor de arquivo e edite o valor de propriedade do texto do título. Localizar o `<property>` elemento que tem o atributo `name="Title"`e editar o texto do título que está contido entre a abertura e fechamento `<property>` marcas. Agora, feche a página da Web e editar a origem da página em um editor. Excluir o `<aspSample:TextDisplayWebPart>` controle declaração de elemento, em seguida, salve e feche o arquivo.  
  
 Carregue a página da Web novamente em um navegador. O `TextDisplayWebPart` controle não deve aparecer, porque ele foi removido. Use o **modo de exibição** controle de lista suspensa e selecione **catálogo** para alternar a página para o modo de catálogo. Observe que o personalizado <xref:System.Web.UI.WebControls.WebParts.CatalogZone> controle for exibido, juntamente com o <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> controle. Clique o **procurar** botão para localizar o. Arquivo de descrição de Web Part que você exportou para o `TextDisplayWebPart` controle. Você pode clicar em **carregue**, marque a caixa de seleção ao lado do controle importado e clique em **Add** para adicioná-lo para a página. Clique em **Fechar catálogo** para retornar a página para o modo de navegação normal. O controle importado agora deve aparecer na página e o título que aparece na barra de título do controle deve ser o texto do título adicionado para o. Arquivo de descrição de Web Part.  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Web.AspNetHostingPermission">para operação em um ambiente hospedado. Valor de demanda: <see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" />; valor de permissão: <see cref="F:System.Web.AspNetHostingPermissionLevel.Minimal" />.</permission>
    <block subset="none" type="overrides">
      <para>Você pode criar personalizado <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZone" /> classes se você quiser mais controle sobre a renderização e o comportamento do catálogo da interface do usuário. Se você não precisar fornecer aos usuários do seu controle com a capacidade de adicionar <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> controla a forma declarativa, em seguida, você pode herdar diretamente do <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZoneBase" /> classe. Se você quiser habilitar os controles a serem adicionados declarativamente, a abordagem simples é herdar o <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZone" /> de classe, pois ele fornece o modelo de zona essenciais.  Se você herda do <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZone" /> classe, você pode substituir o <see cref="M:System.Web.UI.WebControls.WebParts.CatalogZone.CreateCatalogParts" /> método e use o método para adicionar personalizado <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> controles a um <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPartCollection" />, se você deseja maior controle programático sobre adicionando personalizado <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> controles para a zona .</para>
    </block>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CatalogZone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogZone.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CatalogZone();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZone" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Porque o <xref:System.Web.UI.WebControls.WebParts.CatalogZone> controle implementa um modelo de zona, geralmente é usado declarativamente e raramente você precisará criar uma nova instância da classe usando o <xref:System.Web.UI.WebControls.WebParts.CatalogZone.%23ctor%2A> construtor. No entanto, se você herdar o <xref:System.Web.UI.WebControls.WebParts.CatalogZone> classe para criar uma zona personalizada, talvez você queira usar o construtor para inicializar alguns de seus valores de propriedade e personalizar sua aparência.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra o uso programático da <xref:System.Web.UI.WebControls.WebParts.CatalogZone.%23ctor%2A> construtor em um personalizado <xref:System.Web.UI.WebControls.WebParts.CatalogZone> controle. O construtor é usado para inicializar alguns valores de propriedade padrão para o controle. O código a seguir mostra o personalizado <xref:System.Web.UI.WebControls.WebParts.CatalogZone> classe com o construtor declarado na parte superior. Para o código completo e instruções necessárias para configurar e executar o exemplo, consulte a seção de exemplo no <xref:System.Web.UI.WebControls.WebParts.CatalogZone> visão geral da classe.  
  
 [!code-csharp[WebParts_CatalogZone_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZone_Overview/CS/catalogSamples.cs#1)]
 [!code-vb[WebParts_CatalogZone_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZone_Overview/VB/catalogSamples.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCatalogParts">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.WebControls.WebParts.CatalogPartCollection CreateCatalogParts ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.WebControls.WebParts.CatalogPartCollection CreateCatalogParts() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogZone.CreateCatalogParts" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateCatalogParts () As CatalogPartCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::WebControls::WebParts::CatalogPartCollection ^ CreateCatalogParts();" />
      <MemberSignature Language="F#" Value="override this.CreateCatalogParts : unit -&gt; System.Web.UI.WebControls.WebParts.CatalogPartCollection" Usage="catalogZone.CreateCatalogParts " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.CatalogPartCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cria uma instância de cada tipo de <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> que é declarado na zona.</summary>
        <returns>Um <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPartCollection" /> com referências a todos os controles de <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> na zona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.WebControls.WebParts.CatalogZone.CreateCatalogParts%2A> é um método crítico porque quando um usuário alterna uma página para o modo de exibição de catálogo, esse método cria todos os <xref:System.Web.UI.WebControls.WebParts.CatalogPart> controles que compõem o catálogo de Web Parts.  
  
 O <xref:System.Web.UI.WebControls.WebParts.CatalogZone.CreateCatalogParts%2A> método na <xref:System.Web.UI.WebControls.WebParts.CatalogZone> classe fornecida com as Web Parts do conjunto de controles pode criar qualquer controle de servidor que herda o <xref:System.Web.UI.WebControls.WebParts.CatalogPart> classe. Portanto, se você criar um personalizado <xref:System.Web.UI.WebControls.WebParts.CatalogPart> controlar e declará-la em uma página dentro de um <xref:System.Web.UI.WebControls.WebParts.CatalogZone> controle, esse método criará seu controle quando um usuário alterna a página para o modo de catálogo.  
  
 No entanto, por vários motivos você pode deseja ter controle sobre o <xref:System.Web.UI.WebControls.WebParts.CatalogZone.CreateCatalogParts%2A> método. Você pode deseja apenas criar determinados <xref:System.Web.UI.WebControls.WebParts.CatalogPart> controles. Por exemplo, suponha que você criar um conjunto de custom <xref:System.Web.UI.WebControls.WebParts.CatalogPart> controles que têm uma aparência consistente e pertencem a um único produto ou uma organização. Se você deseja que os desenvolvedores de página a ser limitado ao uso desses controles personalizados em um catálogo, você deve herdar do <xref:System.Web.UI.WebControls.WebParts.CatalogZone> classe, substitua o <xref:System.Web.UI.WebControls.WebParts.CatalogZone.CreateCatalogParts%2A> método e permitir que o método para criar somente os controles do mesmo tipo como seus controles personalizados.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">O controle de <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> atual não tem uma ID.</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CreateCatalogParts" />
      </Docs>
    </Member>
    <Member MemberName="ZoneTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate ZoneTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate ZoneTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.CatalogZone.ZoneTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ZoneTemplate As ITemplate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::ITemplate ^ ZoneTemplate { System::Web::UI::ITemplate ^ get(); void set(System::Web::UI::ITemplate ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ZoneTemplate : System.Web.UI.ITemplate with get, set" Usage="System.Web.UI.WebControls.WebParts.CatalogZone.ZoneTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.WebParts.CatalogZone))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Web.UI.TemplateInstance(System.Web.UI.TemplateInstance.Single)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define um modelo para conter controles filho dentro de um controles de <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZone" /> no formato de persistência de página.</summary>
        <value>Um <see cref="T:System.Web.UI.ITemplate" /> que atua como um contêiner para controles filho na zona.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.WebControls.WebParts.CatalogZone.ZoneTemplate%2A> propriedade faz referência a um modelo do tipo <xref:System.Web.UI.ITemplate> que é usado para conter o <xref:System.Web.UI.WebControls.WebParts.CatalogPart> controles na zona. O modelo de zona permite que os desenvolvedores de páginas declarar o <xref:System.Web.UI.WebControls.WebParts.CatalogPart> controles que desejam usar no formato de persistência, em vez de precisar criar todos os controles de forma programática.  
  
 O acessador set para a <xref:System.Web.UI.WebControls.WebParts.CatalogZone.ZoneTemplate%2A> chamadas de propriedade de <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.InvalidateCatalogParts%2A> método, que força a coleta de <xref:System.Web.UI.WebControls.WebParts.CatalogPart> controles que são declarados no modelo de zona na página a ser atualizado. Isso garante que a coleção de controles referenciada pela zona permaneça atual sempre que um usuário altera os controles realmente declarados dentro do modelo na página.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Se você quiser criar um personalizado <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZone" /> zona, mas você planeja criar o <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> controla por meio de programação, em vez de permitir que os desenvolvedores de páginas para declará-los, você não precisa de zona suporte de modelo, e você pode herdar diretamente do <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZoneBase" /> classe.</para>
        </block>
        <altmember cref="T:System.Web.UI.ITemplate" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.CatalogZone.CreateCatalogParts" />
      </Docs>
    </Member>
  </Members>
</Type>