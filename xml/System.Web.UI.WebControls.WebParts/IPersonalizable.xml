<Type Name="IPersonalizable" FullName="System.Web.UI.WebControls.WebParts.IPersonalizable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="654722cd1d314fa0d612bc497e3192abe3a40033" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="64073961" /></Metadata><TypeSignature Language="C#" Value="public interface IPersonalizable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPersonalizable" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.IPersonalizable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPersonalizable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IPersonalizable" />
  <TypeSignature Language="F#" Value="type IPersonalizable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Define recursos de gerenciamento adicionais para a aplicação e extração do estado de personalização.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Além de usar o `Personalizable` atributo nas propriedades do controle, um controle também pode implementar <xref:System.Web.UI.WebControls.WebParts.IPersonalizable> para recursos de gerenciamento adicionais para o aplicativo e a extração do estado de personalização. Por exemplo, os controles que precisará gerenciar informações de estado particular devem implementar essa interface. Controles que acessam dados personalizados por meio de mecanismos de complexos, como soluções de cache personalizado, persistência de dados para mainframes ou serviços Web XML, também devem implementar essa interface.  
  
> [!IMPORTANT]
>  Você não deve adicionar os tipos com base em classes definidas no diretório App_Code e dependem, em seguida, o mecanismo de serialização binária padrão. Com base em App_Code artefatos não são consistentemente binário serializável devido ao fato de que eles podem ter seus nomes de assembly alterados em momentos aleatórios no tempo.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como usar o <xref:System.Web.UI.WebControls.WebParts.IPersonalizable> interface. O exemplo consiste em uma página. aspx que faz referência a um controle de Web Part denominado `UrlListWebPart`. O código a seguir é o arquivo. aspx do exemplo.  
  
 [!code-aspx-csharp[WebParts_IPersonalizable_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/CS/IPersonalizableCS.aspx#1)]
 [!code-aspx-vb[WebParts_IPersonalizable_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/VB/IPersonalizableVB.aspx#1)]  
  
 O código a seguir é a origem para o personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> controle. Esse arquivo deve ser colocado no diretório App_Code.  
  
 [!code-csharp[WebParts_IPersonalizable_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/CS/urllistwebpart.cs#2)]
 [!code-vb[WebParts_IPersonalizable_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/VB/urllistwebpart.vb#2)]  
  
 Carregue a página em um navegador. Digite um nome para representar uma URL, e em seguida, adicionar uma URL real que comece com `http://`e clique em de **Add** botão para adicionar a URL.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="IsDirty">
      <MemberSignature Language="C#" Value="public bool IsDirty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDirty" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDirty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDirty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDirty : bool" Usage="System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que indica se os dados personalizados gerenciados por um controle foram alterados.</summary>
        <value><see langword="true" /> Se os dados personalizados gerenciados com o <see cref="T:System.Web.UI.WebControls.WebParts.IPersonalizable" /> interface tiver sido alterado; caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando os dados gerenciados por um controle foi alterado, o controle é considerado "sujo". Um controle deve retornar `true` se os dados personalizados que ele gerencia por meio de <xref:System.Web.UI.WebControls.WebParts.IPersonalizable> interface foi alterada. Se um controle retornar `true` dessa propriedade, o controle <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Save%2A> implementação do método de interface é chamada durante a extração do valor de propriedade.  
  
> [!NOTE]
>  Essa propriedade é verificada automaticamente pela infraestrutura de personalização durante as fases de último de processar uma solicitação POST. No entanto, para solicitações GET, o valor retornado do <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty%2A> propriedade não é verificada. Algum outro evento tem que ter causado o controle a ser considerado "sujo" para qualquer estado de controle – não apenas os dados gerenciados pelo <xref:System.Web.UI.WebControls.WebParts.IPersonalizable>– a ser salvo. Se um controle pode marcar em si como "sujos" durante uma solicitação GET, ou se a infraestrutura de personalização em algumas condições de limite muito específicas considera um controle "sujo" durante uma solicitação GET, em seguida, <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Save%2A> sempre será chamado.  
  
 Um controle pode fazer referência a seus associados <xref:System.Web.UI.WebControls.WebParts.WebPartManager> de controle e verifique o <xref:System.Web.UI.WebControls.WebParts.WebPartPersonalization.Scope%2A> propriedade para determinar o escopo atual. O estado "sujo" de dados de um controle personalizado deve ser apropriado para o escopo atual.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra o uso do <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty%2A> propriedade. A primeira parte do exemplo é a página da Web que hospeda um <xref:System.Web.UI.WebControls.WebParts.WebPart> controle.  
  
 [!code-aspx-csharp[WebParts_IPersonalizable_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/CS/IPersonalizableCS.aspx#1)]
 [!code-aspx-vb[WebParts_IPersonalizable_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/VB/IPersonalizableVB.aspx#1)]  
  
 A segunda parte do exemplo é o código personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> controle chamado `UrlListWebPart`. Esse arquivo deve ser colocado no diretório App_Code para executar o exemplo. Observe que o código-fonte implementa o <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty%2A> propriedade.  
  
 [!code-csharp[WebParts_IPersonalizable_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/CS/urllistwebpart.cs#2)]
 [!code-vb[WebParts_IPersonalizable_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/VB/urllistwebpart.vb#2)]  
  
 Carregue a página em um navegador. Digite um nome para representar uma URL, e em seguida, adicionar uma URL real que comece com `http://`e clique em de **Add** botão para adicionar a URL.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Web.UI.WebControls.WebParts.PersonalizationDictionary state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Load(class System.Web.UI.WebControls.WebParts.PersonalizationDictionary state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.IPersonalizable.Load(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (state As PersonalizationDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Web::UI::WebControls::WebParts::PersonalizationDictionary ^ state);" />
      <MemberSignature Language="F#" Value="abstract member Load : System.Web.UI.WebControls.WebParts.PersonalizationDictionary -&gt; unit" Usage="iPersonalizable.Load state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Web.UI.WebControls.WebParts.PersonalizationDictionary" />
      </Parameters>
      <Docs>
        <param name="state">Um <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationDictionary" /> que contém dados de escopo personalizados que foram carregados do armazenamento de dados subjacente.</param>
        <summary>Carrega dados personalizados em um controle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método é chamado em um controle para permitir que ele carregar dados personalizados em si mesmo. Ele também pode retornar um valor que indica se o estado de um controle personalizado deve ser escrito volta ao armazenamento de dados subjacente, independentemente se quaisquer outros dados de personalização da página foi alterado. Um controle pode definir suas próprias propriedades personalizadas e realizar uma lógica interna adicional com base nos valores contidos no dicionário de personalização. Esse método é chamado pelo controle de Web Parts definido durante a aplicação de dados de personalização a um controle.  
  
 Você também deve estar ciente do comportamento de mesclagem <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.User>-no escopo <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.Shared>-com escopo de propriedades contidas no <xref:System.Web.UI.WebControls.WebParts.PersonalizationDictionary> objeto. O `state` parâmetro contém uma representação mesclada dos dados personalizados que foram carregados do armazenamento de dados subjacente. Na <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.Shared> definir o escopo, todos os valores que foram adicionados anteriormente quando a página propriamente dita estava em <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.Shared> escopo estaria disponível. Na <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.User> definir o escopo, se um valor associado <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.User> escopo de personalização tinha um valor adicionado quando a página estava no <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.Shared> escopo e um valor diferente de quando a página estava no <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.User> definir o escopo, em seguida, seria a infraestrutura de personalização incluir somente o <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.User>-no escopo do valor (em vez do <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.Shared> valor de escopo) dentro a `state` parâmetro.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra uma implementação do <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Load%2A> método em um personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> controle. Para o código completo necessário para executar este exemplo, consulte a seção de exemplo no <xref:System.Web.UI.WebControls.WebParts.IPersonalizable> visão geral da classe.  
  
 [!code-csharp[WebParts_IPersonalizable_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/CS/urllistwebpart.cs#2)]
 [!code-vb[WebParts_IPersonalizable_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/VB/urllistwebpart.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.Web.UI.WebControls.WebParts.PersonalizationDictionary state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Save(class System.Web.UI.WebControls.WebParts.PersonalizationDictionary state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.IPersonalizable.Save(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (state As PersonalizationDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::Web::UI::WebControls::WebParts::PersonalizationDictionary ^ state);" />
      <MemberSignature Language="F#" Value="abstract member Save : System.Web.UI.WebControls.WebParts.PersonalizationDictionary -&gt; unit" Usage="iPersonalizable.Save state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Web.UI.WebControls.WebParts.PersonalizationDictionary" />
      </Parameters>
      <Docs>
        <param name="state">Um <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationDictionary" /> que contém dados de escopo personalizados que foram carregados do armazenamento de dados subjacente.</param>
        <summary>Salva propriedades personalizadas e informações sobre estado interno no objeto <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationDictionary" /> do controle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um controle de servidor pode armazenar suas próprias propriedades personalizadas e informações de estado interno do <xref:System.Web.UI.WebControls.WebParts.PersonalizationDictionary> especificado no `state` parâmetro. As informações são armazenadas como uma série de pares nome/valor. É responsabilidade do controle para usar pares de nome/valor que possa reconhecer durante as chamadas subsequentes feitas para o controle por meio de <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Load%2A> método.  
  
 Um controle pode fazer referência a seus associados <xref:System.Web.UI.WebControls.WebParts.WebPartManager> de controle e verifique o <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope> objeto para determinar o escopo atual. Informações de estado personalizado devem ser apropriadas para o escopo atual. Observe que cada <xref:System.Web.UI.WebControls.WebParts.PersonalizationEntry> que é adicionado ao valor de <xref:System.Web.UI.WebControls.WebParts.PersonalizationDictionary> objeto deve ser associado com o valor de escopo apropriado, como a infraestrutura de personalização depende isso ao mesclar <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.Shared> e <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.User>-com escopo de dados personalizados antes de passá-lo para o <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Load%2A> método.  
  
 Ao usar a implementação padrão do ASP.NET de Web Parts, controles devem garantir que os objetos colocados no dicionário de estado podem ser serializados pelo ASP.NET <xref:System.Web.UI.ObjectStateFormatter> classe. Na prática, isso significa que o seguinte:  
  
-   Tipos primitivos do .NET Framework, cadeias de caracteres e orientada a coleção de tipos de .NET Framework como matrizes, listas de matriz, tabelas de hash e dicionários híbridos, são automaticamente serializáveis.  
  
-   Tipos personalizados que fornecem seus próprios <xref:System.ComponentModel.TypeConverter> classes capazes de serializar para e a desserialização de cadeias de caracteres são consideradas serializáveis.  
  
-   Tipos personalizados que podem ser serializados pelo <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter> classe são considerados serializável.  
  
> [!IMPORTANT]
>  Você não deve adicionar os tipos com base em classes definidas no diretório App_Code e dependem, em seguida, o mecanismo de serialização binária padrão. Com base em App_Code artefatos não são consistentemente binário serializável devido ao fato de que eles podem ter seus nomes de assembly alterados em momentos aleatórios no tempo.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como implementar o <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Save%2A> método em um personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> controle. Para o código completo necessário para executar este exemplo, consulte a seção de exemplo no <xref:System.Web.UI.WebControls.WebParts.IPersonalizable> visão geral da classe.  
  
 [!code-csharp[WebParts_IPersonalizable_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/CS/urllistwebpart.cs#2)]
 [!code-vb[WebParts_IPersonalizable_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/VB/urllistwebpart.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>