<Type Name="SpeakProgressEventArgs" FullName="System.Speech.Synthesis.SpeakProgressEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5ad1b44ffb76626304234c6c3814b274fa5c085a" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58691459" /></Metadata><TypeSignature Language="C#" Value="public class SpeakProgressEventArgs : System.Speech.Synthesis.PromptEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SpeakProgressEventArgs extends System.Speech.Synthesis.PromptEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.SpeakProgressEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class SpeakProgressEventArgs&#xA;Inherits PromptEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class SpeakProgressEventArgs : System::Speech::Synthesis::PromptEventArgs" />
  <TypeSignature Language="F#" Value="type SpeakProgressEventArgs = class&#xA;    inherit PromptEventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Speech.Synthesis.PromptEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Retorna os dados do evento <see cref="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uma instância do <xref:System.Speech.Synthesis.SpeakProgressEventArgs> é criado quando o <xref:System.Speech.Synthesis.SpeechSynthesizer> objeto gera o <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> eventos. O <xref:System.Speech.Synthesis.SpeechSynthesizer> gera esse evento para cada nova palavra que participa como palestrante em um prompt usando qualquer um dos <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, ou <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> métodos.  
  
 Os dados retornados são baseados na fala Synthesis Markup Language (SSML) que gera o código. Os valores retornados para <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A> incluem espaços e os caracteres e o conteúdo das marcas SSML gerados pelo código.  
  
   
  
## Examples  
 O exemplo a seguir demonstra as informações que está disponíveis no <xref:System.Speech.Synthesis.SpeakProgressEventArgs>. Observe como o <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>, <xref:System.Speech.Synthesis.PromptBuilder.EndParagraph%2A>, <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A>, e <xref:System.Speech.Synthesis.PromptBuilder.EndSentence%2A> métodos afetam o <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A> com sua adição de  **\<p >**,  **\< /p >**,  **\<s >**, e  **\</s >** marcas para o SSML gerado. Além disso, há duas entradas na saída para "30%", uma para cada palavra falar essa cadeia de caracteres numérica (30 por cento). O <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A> e <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> são os mesmos para cada entrada e representar os caracteres "30%. No entanto, o <xref:System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition%2A> é alterado para refletir a fala das palavras "trinta" e "porcentagem" pelo <xref:System.Speech.Synthesis.SpeechSynthesizer>.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\test\weather.wav");  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =  
          new System.Media.SoundPlayer(@"C:\test\weather.wav");  
  
        // Build a prompt containing a paragraph and two sentences.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.StartParagraph();  
        builder.StartSentence();  
        builder.AppendText(  
          "The weather forecast for today is partly cloudy with some sun breaks.");  
        builder.EndSentence();  
        builder.StartSentence();  
        builder.AppendText(  
          "Tonight's weather will be cloudy with a 30% chance of showers.");  
        builder.EndSentence();  
        builder.EndParagraph();  
  
        // Add a handler for the SpeakProgress event.  
        synth.SpeakProgress +=  
          new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write each word and its character position to the console.  
    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  
    {  
      Console.WriteLine("CharPos: {0}   CharCount: {1}   AudioPos: {2}    \"{3}\"",  
        e.CharacterPosition, e.CharacterCount, e.AudioPosition, e.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AudioPosition">
      <MemberSignature Language="C#" Value="public TimeSpan AudioPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan AudioPosition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioPosition As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan AudioPosition { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.AudioPosition : TimeSpan" Usage="System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém a posição de áudio do evento.</summary>
        <value>Retorna a posição do evento no fluxo de saída de áudio.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Speech.Synthesis.SpeechSynthesizer> normaliza números para as palavras que correspondem a como o número será ser falado. Por exemplo, o sintetizador de fala o número "4003" como "três de mil quatro". Ele gera uma <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> evento para cada uma das palavras faladas e retorna o <xref:System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition%2A> para cada palavra.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CharacterCount">
      <MemberSignature Language="C#" Value="public int CharacterCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CharacterCount" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CharacterCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CharacterCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CharacterCount : int" Usage="System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o número de caracteres na palavra que foi falada imediatamente antes do acionamento do evento.</summary>
        <value>Retorna o número de caracteres na palavra que foi falada imediatamente antes que o evento foi acionado.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Speech.Synthesis.SpeechSynthesizer> normaliza números para as palavras que correspondem a como o número será ser falado. Por exemplo, o sintetizador de fala o número "4003" como "três de mil quatro". Ele gera um <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> evento para cada uma das palavras faladas. No entanto, o <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A> propriedade para cada uma das três palavras é a mesma. É a contagem dos caracteres no número "4003" no texto de prompt, nesse caso, quatro.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CharacterPosition">
      <MemberSignature Language="C#" Value="public int CharacterPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CharacterPosition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CharacterPosition As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CharacterPosition { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CharacterPosition : int" Usage="System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o número de caracteres e espaços desde o início do prompt até a posição antes da primeira letra da palavra que acabou de ser falada.</summary>
        <value>Retorna o número de caracteres e espaços desde o início do prompt para a posição antes da primeira letra da palavra que acabou de ser falada.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> inclui a contagem de caracteres em marcas XML, incluindo os colchetes. Ao usar qualquer um dos <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>, ou <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A> métodos, o conteúdo é adicionado a um prompt SSML que inclui a abertura e fechamento `speak` elementos. A abertura `speak` elemento adiciona um deslocamento de 82 caracteres e espaços para o <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> de todas as palavras e letras no prompt. Por exemplo, no trecho a seguir, o <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> da primeira palavra, "this" é 82.  
  
```csharp  
builder.AppendText("This is a test");  
Synthesizer.Speak(builder);  
```  
  
 No exemplo acima a <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> da palavra "test" é 92. No trecho a seguir a <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> da palavra "test" é o mais alto de 23 caracteres (115) porque a abertura  **\<tom prosody = "high" >** marca que precede contém 23 caracteres e espaços (o dois de escape caracteres "\\" não são contadas).  
  
```csharp  
builder.AppendSsmlMarkup("This is a <prosody pitch=\"high\"> test </prosody>.");   
Synthesizer.Speak(builder);  
```  
  
 Se você usar o <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> métodos para adicionar conteúdo a um prompt, especificando um arquivo, a abertura `xml` declaração e `speak` elementos no arquivo não são usados ou contados. O primeiro caractere no arquivo após a abertura `speak` marca será na posição 82 se for o primeiro conteúdo no prompt.  
  
 Por outro lado, o parâmetro de cadeia de caracteres de um <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> método não é adicionado a um prompt SSML antes que está sendo falado. Portanto, o <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> da primeira palavra, "this", no trecho a seguir é zero.  
  
```csharp  
Synthesizer.Speak("This is a test.");  
```  
  
 O <xref:System.Speech.Synthesis.SpeechSynthesizer> normaliza números para as palavras que correspondem a como o número será ser falado. Por exemplo, o sintetizador de fala o número "4003" como "três de mil quatro". Ele gera um <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> evento para cada uma das três palavras faladas. No entanto, o <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> propriedade para cada uma das três palavras é a mesma. É a posição antes do primeiro caractere do número "4003" no texto do aviso.  
  
   
  
## Examples  
 O exemplo a seguir cria uma <xref:System.Speech.Synthesis.PromptBuilder> e acrescenta o conteúdo SSML de um arquivo XML usando <xref:System.Xml.XmlReader>. O exemplo produz a conversão de fala em um arquivo WAV para reprodução. O conteúdo do arquivo XML que contém o SSML aparece abaixo o exemplo de código.  
  
```csharp  
using System;  
using System.Xml;  
using System.IO;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a path to the file that contains SSML.  
        string weatherFile = Path.GetFullPath("c:\\test\\Weather.ssml");  
  
        // Create an XML Reader from the file, create a PromptBuilder and   
        // append the XmlReader.  
        PromptBuilder builder = new PromptBuilder();  
  
        if (File.Exists(weatherFile))  
        {  
          XmlReader reader = XmlReader.Create(weatherFile);  
          builder.AppendSsml(reader);  
          reader.Close();  
        }  
  
        // Add a handler for the SpeakProgress event.  
        synth.SpeakProgress +=  
          new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write each word and its character position to the console.  
    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  
    {  
      Console.WriteLine("Speak progress: {0} {1}",  
        e.CharacterPosition, e.Text);  
    }  
  }  
}  
  
```  
  
```xml  
<!-- The following are the contents of the file Weather.ssml.   
Note that because of the <p> tag and the space that follows it,   
that the character position of the first word "The" will be 86. -->  
  
<?xml version="1.0" encoding="ISO-8859-1"?>  
<speak version="1.0"  
 xmlns="http://www.w3.org/2001/10/synthesis"  
 xml:lang="en-US">  
  
  <p> The weather forecast for today is partly cloudy with   
some sun breaks. </p>  
  
  <break strength="medium" />  
  
  <p> Tonight's weather will be cloudy with a 30% chance of   
showers. </p>  
  
</speak>  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeakProgressEventArgs.Text" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Text : string" Usage="System.Speech.Synthesis.SpeakProgressEventArgs.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>O texto que foi falado imediatamente antes do acionamento do evento.</summary>
        <value>Retorna o texto que acabou de ser falado quando o evento foi acionado.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Speech.Synthesis.SpeechSynthesizer> normaliza números para as palavras que correspondem a como o número será ser falado. Por exemplo, o sintetizador de fala o número "4003" como "três de mil quatro". Ele gera um <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> evento para cada uma das palavras faladas. No entanto, o <xref:System.Speech.Synthesis.SpeakProgressEventArgs.Text%2A> propriedade para cada uma das três palavras é a mesma. É o texto "4003" no prompt de.  
  
   
  
## Examples  
 O exemplo a seguir ilustra como o <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> relatórios de eventos do <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> e <xref:System.Speech.Synthesis.SpeakProgressEventArgs.Text%2A> propriedades para cadeias de caracteres que contêm números.  
  
```csharp  
using System;  
using System.Xml;  
using System.IO;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create an XML Reader from the file, create a PromptBuilder and   
        // append the XmlReader.  
        PromptBuilder builder = new PromptBuilder();  
        builder.AppendText("4003");  
  
        // Add a handler for the SpeakProgress event.  
        synth.SpeakProgress +=  
          new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write each word and its character position to the console.  
    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  
    {  
      Console.WriteLine("Speak progress -    Character position:  {0}    Text:  {1}",  
        e.CharacterPosition, e.Text);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>