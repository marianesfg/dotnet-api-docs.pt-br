<Type Name="PromptBuilder" FullName="System.Speech.Synthesis.PromptBuilder">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="253ce5087a2e9931ca23b5de7c061c20b1ab18bd" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48651340" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class PromptBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit PromptBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.PromptBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class PromptBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class PromptBuilder" />
  <TypeSignature Language="F#" Value="type PromptBuilder = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="9e39d-101">Cria um objeto <see cref="T:System.Speech.Synthesis.Prompt" /> vazio e fornece métodos para adicionar conteúdo, selecionar vozes, controlar atributos de voz e a pronúncia de palavras faladas.</span>
      <span class="sxs-lookup">
        <span data-stu-id="9e39d-101">Creates an empty <see cref="T:System.Speech.Synthesis.Prompt" /> object and provides methods for adding content, selecting voices, controlling voice attributes, and controlling the pronunciation of spoken words.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e39d-102">Com o <xref:System.Speech.Synthesis.PromptBuilder>, você pode adicionar áudio gravado de uma variedade de tipos de conteúdo a um prompt, incluindo texto sem formatação, marcação SSML (como uma cadeia de caracteres ou um arquivo), ou até mesmo outro <xref:System.Speech.Synthesis.PromptBuilder> objeto.</span><span class="sxs-lookup"><span data-stu-id="9e39d-102">With <xref:System.Speech.Synthesis.PromptBuilder>, you can add a variety of content types to a prompt, including plain text, SSML markup (as a string or a file), recorded audio, or even another <xref:System.Speech.Synthesis.PromptBuilder> object.</span></span>  
  
 <span data-ttu-id="9e39d-103">Para acrescentar texto a um <xref:System.Speech.Synthesis.PromptBuilder> do objeto e, opcionalmente, controlar atributos de voz como ênfase, taxa e volume, usam um do <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="9e39d-103">To append text to a <xref:System.Speech.Synthesis.PromptBuilder> object and optionally control voice attributes such as emphasis, rate, and volume, use one of the <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> methods.</span></span>  <span data-ttu-id="9e39d-104">Você também pode controlar os atributos de voz como um grupo com o <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> e <xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="9e39d-104">You can also control voice attributes as a group with the <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> and <xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A> methods.</span></span>  
  
 <span data-ttu-id="9e39d-105">Você pode acrescentar texto e controlar o que é falado ou como ele é pronunciado usando o <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A>, ou <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="9e39d-105">You can append text and control what is spoken or how it is pronounced using the <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A>,  <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A>, or <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A> methods.</span></span>  
  
 <span data-ttu-id="9e39d-106">Alterar a voz falada selecionada no momento no prompt do usando um dos sobrecarregado <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> necessária de métodos, uma voz específica para uso ou a especificação de nomenclatura características de voz, como idade e sexo.</span><span class="sxs-lookup"><span data-stu-id="9e39d-106">Change the currently selected speaking voice in the prompt using one of the overloaded <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> methods, naming a specific voice to use or specifying required voice characteristics, such as age and gender.</span></span>  
  
 <span data-ttu-id="9e39d-107">Para gerar fala de um <xref:System.Speech.Synthesis.PromptBuilder> do objeto, você pode passá-lo como um argumento para o <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> método.</span><span class="sxs-lookup"><span data-stu-id="9e39d-107">To generate speech from a <xref:System.Speech.Synthesis.PromptBuilder> object, you can pass it as an argument to the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> method.</span></span>  
  
 <span data-ttu-id="9e39d-108">Para obter mais informações, consulte [construindo um Prompt complexos](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361616(v%3doffice.14)).</span><span class="sxs-lookup"><span data-stu-id="9e39d-108">For more information, see [Constructing a Complex Prompt](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361616(v%3doffice.14)).</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9e39d-109">Cria uma nova instância da classe <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-109">Creates a new instance of the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PromptBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PromptBuilder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9e39d-110">Cria uma nova instância da classe <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-110">Creates a new instance of the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9e39d-111">O exemplo a seguir cria um novo <xref:System.Speech.Synthesis.PromptBuilder> da instância e adiciona uma cadeia de caracteres de texto a ele.</span><span class="sxs-lookup"><span data-stu-id="9e39d-111">The following example creates a new <xref:System.Speech.Synthesis.PromptBuilder> instance and adds a text string to it.</span></span>  
  
```csharp  
using System.Speech.Synthesis;  
  
public void MySimpleText ()  
{  
    PromptBuilder builder = new PromptBuilder ();  
    builder.AppendText("Hello world!");  
}  
```  
  
 <span data-ttu-id="9e39d-112">A marcação a seguir mostra o equivalente no Synthesis Markup Language (SSML) de fala, (`xml:lang` é um atributo obrigatório do `speak` elemento):</span><span class="sxs-lookup"><span data-stu-id="9e39d-112">The following markup shows the equivalent in Speech Synthesis Markup Language (SSML), (`xml:lang` is a required attribute of the `speak` element):</span></span>  
  
```xml  
<speak version="1.0"  
 xmlns="http://www.w3.org/2001/10/synthesis" xml:lang="en-US">  
  Hello world!  
</speak>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PromptBuilder (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.#ctor(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (culture As CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PromptBuilder(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="new System.Speech.Synthesis.PromptBuilder : System.Globalization.CultureInfo -&gt; System.Speech.Synthesis.PromptBuilder" Usage="new System.Speech.Synthesis.PromptBuilder culture" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture">
          <span data-ttu-id="9e39d-113">Fornece informações sobre uma cultura específica, como o idioma, o nome da cultura, o sistema de escrita, o calendário usado e como formatar datas e classificar as cadeias de caracteres.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-113">Provides information about a specific culture, such as its language, the name of the culture, the writing system, the calendar used, and how to format dates and sort strings.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9e39d-114">Cria uma nova instância da classe <see cref="T:System.Speech.Synthesis.PromptBuilder" /> e especifica uma cultura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-114">Creates a new instance of the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> class and specifies a culture.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e39d-115">Este construtor define o valor para o <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="9e39d-115">This constructor sets the value for the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property.</span></span> <span data-ttu-id="9e39d-116">O <xref:System.Speech.Synthesis.SpeechSynthesizer> objeto será tentar selecionar uma voz instalada que dá suporte ao idioma especificado pela `culture` parâmetro para processar o prompt.</span><span class="sxs-lookup"><span data-stu-id="9e39d-116">The <xref:System.Speech.Synthesis.SpeechSynthesizer> object will attempt to select an installed voice that supports the language specified by the `culture` parameter to process the prompt.</span></span> <span data-ttu-id="9e39d-117">Se uma voz com a cultura especificada for encontrada, ele será usado.</span><span class="sxs-lookup"><span data-stu-id="9e39d-117">If a voice with the specified culture is found, it will be used.</span></span> <span data-ttu-id="9e39d-118">Se não for encontrada uma voz com a cultura especificada, a voz padrão será usada.</span><span class="sxs-lookup"><span data-stu-id="9e39d-118">If a voice with the specified culture cannot be found, the default voice will be used.</span></span>  
  
 <span data-ttu-id="9e39d-119">A pronunciar corretamente palavras no idioma especificado pelo `culture` parâmetro, um mecanismo de síntese (fala ou TTS) de fala que ofereça suporte o idioma deve ser instalado.</span><span class="sxs-lookup"><span data-stu-id="9e39d-119">To correctly pronounce words in the language specified by the `culture` parameter, a speech synthesis (text-to-speech or TTS) engine that supports the language must be installed.</span></span> <span data-ttu-id="9e39d-120">Um mecanismo de TTS instalado é chamado uma voz.</span><span class="sxs-lookup"><span data-stu-id="9e39d-120">An installed TTS engine is called a voice.</span></span> <span data-ttu-id="9e39d-121">Para obter informações sobre o qual as vozes são instaladas para uma cultura específica, use o <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> método.</span><span class="sxs-lookup"><span data-stu-id="9e39d-121">To get information about which voices are installed for a specific culture, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method.</span></span>  
  
 <span data-ttu-id="9e39d-122">Microsoft Windows e a API de System. Speech aceitam todos os códigos de idioma-país válidos como valores para `culture`.</span><span class="sxs-lookup"><span data-stu-id="9e39d-122">Microsoft Windows and the System.Speech API accept all valid language-country codes as values for `culture`.</span></span> <span data-ttu-id="9e39d-123">Os mecanismos TTS que acompanham o Windows 7 suportam os seguintes códigos de idioma-país:</span><span class="sxs-lookup"><span data-stu-id="9e39d-123">The TTS engines that shipped with Windows 7 support the following language-country codes:</span></span>  
  
-   <span data-ttu-id="9e39d-124">en-US.</span><span class="sxs-lookup"><span data-stu-id="9e39d-124">en-US.</span></span> <span data-ttu-id="9e39d-125">Inglês (Estados Unidos)</span><span class="sxs-lookup"><span data-stu-id="9e39d-125">English (United States)</span></span>  
  
-   <span data-ttu-id="9e39d-126">zh-CN.</span><span class="sxs-lookup"><span data-stu-id="9e39d-126">zh-CN.</span></span> <span data-ttu-id="9e39d-127">Chinês (China)</span><span class="sxs-lookup"><span data-stu-id="9e39d-127">Chinese (China)</span></span>  
  
-   <span data-ttu-id="9e39d-128">zh-TW.</span><span class="sxs-lookup"><span data-stu-id="9e39d-128">zh-TW.</span></span> <span data-ttu-id="9e39d-129">Chinês (Taiwan)</span><span class="sxs-lookup"><span data-stu-id="9e39d-129">Chinese (Taiwan)</span></span>  
  
 <span data-ttu-id="9e39d-130">Códigos de idioma de duas letras, como "en" também são permitidos.</span><span class="sxs-lookup"><span data-stu-id="9e39d-130">Two-letter language codes such as "en" are also permitted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e39d-131">O exemplo a seguir cria uma <xref:System.Speech.Synthesis.PromptBuilder> da instância e especifica seu <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>.</span><span class="sxs-lookup"><span data-stu-id="9e39d-131">The example that follows creates a <xref:System.Speech.Synthesis.PromptBuilder> instance and specifies its <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>.</span></span>  
  
```csharp  
using System.Speech.Synthesis;  
  
public void MySimpleText ()  
{  
    PromptBuilder builder = new PromptBuilder(new System.Globalization.CultureInfo("en-US"));  
    builder.AppendText("Hello world!");  
}  
```  
  
 <span data-ttu-id="9e39d-132">A marcação a seguir mostra o equivalente SSML:</span><span class="sxs-lookup"><span data-stu-id="9e39d-132">The following markup shows the equivalent SSML:</span></span>  
  
```xml  
<speak version="1.0"  
 xmlns="http://www.w3.org/2001/10/synthesis" xml:lang="en-US">  
  Hello world!  
</speak>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AppendAudio">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9e39d-133">Acrescenta um arquivo de áudio especificado a um objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-133">Appends a specified audio file to a <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppendAudio">
      <MemberSignature Language="C#" Value="public void AppendAudio (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendAudio(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendAudio(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendAudio (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendAudio(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.AppendAudio : string -&gt; unit" Usage="promptBuilder.AppendAudio path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="9e39d-134">Um caminho totalmente qualificado para o arquivo de áudio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-134">A fully qualified path to the audio file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9e39d-135">Acrescenta o arquivo de áudio especificado ao <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-135">Appends the specified audio file to the <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendAudio">
      <MemberSignature Language="C#" Value="public void AppendAudio (Uri audioFile);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendAudio(class System.Uri audioFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendAudio(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendAudio (audioFile As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendAudio(Uri ^ audioFile);" />
      <MemberSignature Language="F#" Value="member this.AppendAudio : Uri -&gt; unit" Usage="promptBuilder.AppendAudio audioFile" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioFile" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="audioFile">
          <span data-ttu-id="9e39d-136">URI para o arquivo de áudio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-136">URI for the audio file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9e39d-137">Acrescenta o arquivo de áudio no URI especificado ao <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-137">Appends the audio file at the specified URI to the <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9e39d-138">O exemplo a seguir inicializa uma nova instância do <xref:System.Speech.Synthesis.PromptBuilder> de classe e, em seguida, adiciona texto a ele, seguido por um arquivo de áudio.</span><span class="sxs-lookup"><span data-stu-id="9e39d-138">The following example initializes a new instance of the <xref:System.Speech.Synthesis.PromptBuilder> class and then adds text to it, followed by an audio file.</span></span>  
  
```csharp  
using System.Speech.PromptBuilder;  
  
public void SimpleConcatenation()  
{  
    // Add a prompt fragment from a .wav file.  
    PromptBuilder builder = new PromptBuilder ();  
    builder.AppendText("How are you today?");  
    builder.AppendAudio(new Uri ("http://www.speech.microsoft.com/ding.wav"));  
}  
```  
  
 <span data-ttu-id="9e39d-139">A marcação a seguir mostra a marcação SSML equivalente.</span><span class="sxs-lookup"><span data-stu-id="9e39d-139">The following markup shows the equivalent SSML markup.</span></span>  
  
```xml  
<speak xmlns="http://www.w3.org/2001/10/synthesis"  
       xmlns:ms="http://www.microsoft.com/speech/synthesis" xml:lang="en">  
  
  How are you today?  
  <audio src="http://www.speech.microsoft.com/ding.wav" />  
  
</speak>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendAudio">
      <MemberSignature Language="C#" Value="public void AppendAudio (Uri audioFile, string alternateText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendAudio(class System.Uri audioFile, string alternateText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendAudio(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendAudio (audioFile As Uri, alternateText As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendAudio(Uri ^ audioFile, System::String ^ alternateText);" />
      <MemberSignature Language="F#" Value="member this.AppendAudio : Uri * string -&gt; unit" Usage="promptBuilder.AppendAudio (audioFile, alternateText)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioFile" Type="System.Uri" />
        <Parameter Name="alternateText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="audioFile">
          <span data-ttu-id="9e39d-140">URI para o arquivo de áudio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-140">URI for the audio file.</span>
          </span>
        </param>
        <param name="alternateText">
          <span data-ttu-id="9e39d-141">Uma cadeia de caracteres que contém o texto alternativo que representa o áudio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-141">A string containing alternate text representing the audio.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9e39d-142">Acrescenta o arquivo de áudio especificado e o texto alternativo ao <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-142">Appends the specified audio file and alternate text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e39d-143">O mecanismo de síntese de fala irá falar o texto alternativo se o arquivo de áudio não pode ser reproduzido.</span><span class="sxs-lookup"><span data-stu-id="9e39d-143">The speech synthesis engine will speak the alternate text if the audio file cannot be played.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e39d-144">Os exemplos a seguir adiciona um arquivo de áudio para um <xref:System.Speech.Synthesis.PromptBuilder> da instância e especifica o texto para fala se o arquivo de áudio não pode ser reproduzido.</span><span class="sxs-lookup"><span data-stu-id="9e39d-144">The following examples adds an audio file to a <xref:System.Speech.Synthesis.PromptBuilder> instance and specifies text to speak if the audio file cannot be played.</span></span>  
  
```csharp  
using System.Speech.PromptBuilder;  
  
public void SimpleConcatenation()  
{  
  
    // Concatenate a prompt fragment from a .wav file.  
    PromptBuilder builder = new PromptBuilder ();  
    builder.AppendAudio(new Uri ("C:\\OnHold.wav"), "Your call will be answered in the order it was received");  
}  
```  
  
 <span data-ttu-id="9e39d-145">A marcação a seguir mostra a marcação SSML equivalente.</span><span class="sxs-lookup"><span data-stu-id="9e39d-145">The following markup shows the equivalent SSML markup.</span></span>  
  
```xml  
<speak xmlns="http://www.w3.org/2001/10/synthesis"  
       xmlns:ms="http://www.microsoft.com/speech/synthesis" xml:lang="en">  
  
  <audio src="C:\OnHold.wav"> Your call will be answered in the order it was received. </audio>  
  
</speak>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendBookmark">
      <MemberSignature Language="C#" Value="public void AppendBookmark (string bookmarkName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendBookmark(string bookmarkName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendBookmark(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendBookmark (bookmarkName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendBookmark(System::String ^ bookmarkName);" />
      <MemberSignature Language="F#" Value="member this.AppendBookmark : string -&gt; unit" Usage="promptBuilder.AppendBookmark bookmarkName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bookmarkName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="bookmarkName">
          <span data-ttu-id="9e39d-146">Uma cadeia de caracteres que contém o nome do indicador adicionado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-146">A string containing the name of the appended bookmark.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9e39d-147">Acrescenta um indicador ao objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-147">Appends a bookmark to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e39d-148">Um mecanismo de síntese de fala gerará uma <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached> evento se ele encontra um indicador durante a fala de um prompt usando qualquer um dos <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, ou <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="9e39d-148">A speech synthesis engine will generate a <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached> event if it encounters a bookmark while speaking a prompt using any of the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, or <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e39d-149">O exemplo a seguir cria um prompt que inclui os dois indicadores e envia a saída para um arquivo WAV para reprodução.</span><span class="sxs-lookup"><span data-stu-id="9e39d-149">The following example creates a prompt that includes two bookmarks and sends the output to a WAV file for playback.</span></span> <span data-ttu-id="9e39d-150">O manipulador para o <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached> do evento que grava o nome do indicador e sua posição no fluxo de áudio, quando o evento foi gerado para o console.</span><span class="sxs-lookup"><span data-stu-id="9e39d-150">The handler for the <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached> event writes the name of the bookmark and its position in the audio stream when the event was raised to the console.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\test\weather.wav");  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =  
          new System.Media.SoundPlayer(@"C:\test\weather.wav");  
  
        // Build a prompt and append bookmarks.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.AppendText(  
          "The weather forecast for today is partly cloudy with some sun breaks.");  
        builder.AppendBookmark("Daytime forecast");  
        builder.AppendText(  
          "Tonight's weather will be cloudy with a 30% chance of showers.");  
        builder.AppendBookmark("Nightime forecast");  
  
        // Add a handler for the BookmarkReached event.  
        synth.BookmarkReached +=  
          new EventHandler<BookmarkReachedEventArgs>(synth_BookmarkReached);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write the name and position of the bookmark to the console.  
    static void synth_BookmarkReached(object sender, BookmarkReachedEventArgs e)  
    {  
      Console.WriteLine("Bookmark ({0}) reached at: {1} ",  
        e.Bookmark, e.AudioPosition);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AppendBreak">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9e39d-151">Insere uma quebra (pausa) no conteúdo de um objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-151">Inserts a break (pause) in the content of a <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppendBreak">
      <MemberSignature Language="C#" Value="public void AppendBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendBreak() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendBreak" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendBreak ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendBreak();" />
      <MemberSignature Language="F#" Value="member this.AppendBreak : unit -&gt; unit" Usage="promptBuilder.AppendBreak " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9e39d-152">Acrescenta uma interrupção ao objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-152">Appends a break to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e39d-153">Esse método não especifica uma duração para a interrupção.</span><span class="sxs-lookup"><span data-stu-id="9e39d-153">This method does not specify a duration for the break.</span></span> <span data-ttu-id="9e39d-154">O <xref:System.Speech.Synthesis.SpeechSynthesizer> determina um valor de duração com base no contexto de linguística.</span><span class="sxs-lookup"><span data-stu-id="9e39d-154">The <xref:System.Speech.Synthesis.SpeechSynthesizer> will determine a duration value based on the linguistic context.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e39d-155">O exemplo a seguir cria um prompt que contém duas frases separadas por uma quebra e fala o prompt para o dispositivo de áudio padrão no computador.</span><span class="sxs-lookup"><span data-stu-id="9e39d-155">The following example builds a prompt containing two sentences separated by a break and speaks the prompt to the default audio device on the computer.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Build a prompt with two sentences separated by a break.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.AppendText(  
          "Tonight's movie showings in theater A are at 5:45, 7:15, and 8:45.");  
        builder.AppendBreak();  
        builder.AppendText(  
          "Tonight's movie showings in theater B are at 5:15, 7:30, and 9:15.");  
  
        // Speak the prompt.  
        synth.Speak(builder);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendBreak">
      <MemberSignature Language="C#" Value="public void AppendBreak (System.Speech.Synthesis.PromptBreak strength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendBreak(valuetype System.Speech.Synthesis.PromptBreak strength) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendBreak(System.Speech.Synthesis.PromptBreak)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendBreak (strength As PromptBreak)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendBreak(System::Speech::Synthesis::PromptBreak strength);" />
      <MemberSignature Language="F#" Value="member this.AppendBreak : System.Speech.Synthesis.PromptBreak -&gt; unit" Usage="promptBuilder.AppendBreak strength" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strength" Type="System.Speech.Synthesis.PromptBreak" />
      </Parameters>
      <Docs>
        <param name="strength">
          <span data-ttu-id="9e39d-156">Indica a duração da quebra, com aumento dos seguintes valores:</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-156">Indicates the duration of the break, with the following increasing values:</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9e39d-157">Acrescenta uma interrupção ao objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" /> e especifica sua intensidade (duração).</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-157">Appends a break to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies its strength (duration).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e39d-158">Os valores de <xref:System.Speech.Synthesis.PromptBreak> enumeração representam um intervalo de intervalos de separação (pausa) entre limites de palavra.</span><span class="sxs-lookup"><span data-stu-id="9e39d-158">The values in the <xref:System.Speech.Synthesis.PromptBreak> enumeration represent a range of separation intervals (pauses) between word boundaries.</span></span> <span data-ttu-id="9e39d-159">O mecanismo de síntese de fala determina a duração exata do intervalo.</span><span class="sxs-lookup"><span data-stu-id="9e39d-159">The speech synthesis engine determines the exact duration of the interval.</span></span> <span data-ttu-id="9e39d-160">Quando uma quebra é solicitada, um desses valores é passado para o mecanismo de texto em fala (TTS), que contém um mapeamento entre esses valores e os valores correspondentes de quebra de milissegundo.</span><span class="sxs-lookup"><span data-stu-id="9e39d-160">When a break is requested, one of these values is passed to the text-to-speech (TTS) engine, which contains a mapping between these values and the corresponding millisecond break values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e39d-161">O exemplo a seguir cria um prompt que contém duas frases separadas por uma quebra e envia a saída para um arquivo WAV para reprodução.</span><span class="sxs-lookup"><span data-stu-id="9e39d-161">The following example builds a prompt containing two sentences separated by a break and sends the output to a WAV file for playback.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\test\weather.wav");  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =  
          new System.Media.SoundPlayer(@"C:\test\weather.wav");  
  
        // Build a prompt with two sentences separated by a break.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.AppendText(  
          "Tonight's movie showings in theater A are at 5:45, 7:15, and 8:45");  
        builder.AppendBreak(PromptBreak.Medium);  
        builder.AppendText(  
          "Tonight's movie showings in theater B are at 5:15, 7:15, and 9:15");  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendBreak">
      <MemberSignature Language="C#" Value="public void AppendBreak (TimeSpan duration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendBreak(valuetype System.TimeSpan duration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendBreak(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendBreak (duration As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendBreak(TimeSpan duration);" />
      <MemberSignature Language="F#" Value="member this.AppendBreak : TimeSpan -&gt; unit" Usage="promptBuilder.AppendBreak duration" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="duration" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="duration">
          <span data-ttu-id="9e39d-162">A hora, em tiques, em que um tique é igual a 100 nanossegundos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-162">The time in ticks, where one tick equals 100 nanoseconds.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9e39d-163">Acrescenta uma interrupção da duração especificada ao objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-163">Appends a break of the specified duration to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e39d-164">Uma quebra de pode ser usada para controlar a pausa ou outros limites prosódica entre palavras.</span><span class="sxs-lookup"><span data-stu-id="9e39d-164">A break can be used to control pauses or other prosodic boundaries between words.</span></span> <span data-ttu-id="9e39d-165">Uma quebra é opcional.</span><span class="sxs-lookup"><span data-stu-id="9e39d-165">A break is optional.</span></span> <span data-ttu-id="9e39d-166">Se não houver uma interrupção, o sintetizador determina a quebra entre palavras, dependendo do contexto linguística.</span><span class="sxs-lookup"><span data-stu-id="9e39d-166">If a break is not present, the synthesizer determines the break between words depending on the linguistic context.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e39d-167">O exemplo a seguir cria um prompt que contém duas frases separadas por uma quebra de 15,000,000 tiques (1,5 segundos) e fala o prompt para o dispositivo de áudio padrão no computador.</span><span class="sxs-lookup"><span data-stu-id="9e39d-167">The following example builds a prompt containing two sentences separated by a break of 15,000,000 ticks (1.5 seconds), and speaks the prompt to the default audio device on the computer.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Build a prompt with two sentences separated by a break.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.AppendText(  
          "Tonight's movie showings in theater A are at 5:45, 7:15, and 8:45");  
        builder.AppendBreak(new TimeSpan(15000000));  
        builder.AppendText(  
          "Tonight's movie showings in theater B are at 5:15, 7:15, and 9:15");  
  
        // Speak the prompt.  
        synth.Speak(builder);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendPromptBuilder">
      <MemberSignature Language="C#" Value="public void AppendPromptBuilder (System.Speech.Synthesis.PromptBuilder promptBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendPromptBuilder(class System.Speech.Synthesis.PromptBuilder promptBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendPromptBuilder(System.Speech.Synthesis.PromptBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendPromptBuilder(System::Speech::Synthesis::PromptBuilder ^ promptBuilder);" />
      <MemberSignature Language="F#" Value="member this.AppendPromptBuilder : System.Speech.Synthesis.PromptBuilder -&gt; unit" Usage="promptBuilder.AppendPromptBuilder promptBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="promptBuilder" Type="System.Speech.Synthesis.PromptBuilder" />
      </Parameters>
      <Docs>
        <param name="promptBuilder">
          <span data-ttu-id="9e39d-168">O conteúdo a ser acrescentado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-168">The content to append.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9e39d-169">Acrescenta um objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" /> a outro objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-169">Appends a <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object to another <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9e39d-170">O exemplo a seguir cria dois <xref:System.Speech.Synthesis.PromptBuilder> instâncias e, em seguida, acrescenta-o para um terceiro <xref:System.Speech.Synthesis.PromptBuilder>.</span><span class="sxs-lookup"><span data-stu-id="9e39d-170">The example that follows creates two <xref:System.Speech.Synthesis.PromptBuilder> instances and then appends them to a third <xref:System.Speech.Synthesis.PromptBuilder>.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\test\showtimes.wav");  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =  
          new System.Media.SoundPlayer(@"C:\test\showtimes.wav");  
  
        // Build child prompts.  
        PromptBuilder theatreA = new PromptBuilder();  
        theatreA.AppendText(  
          "Tonight's movie showings in theater A are at 5:45, 7:15, and 9:30");  
        theatreA.AppendBreak(PromptBreak.Large);  
        PromptBuilder theatreB = new PromptBuilder();  
        theatreB.AppendText(  
          "Tonight's movie showings in theater B are at 5:15, 7:15, and 9:15");  
  
        // Build the parent prompt and append the two child prompts.  
        PromptBuilder showTimes = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        showTimes.AppendText(  
          "The following are the show times for tonight's movies:");  
        showTimes.AppendPromptBuilder(theatreA);  
        showTimes.AppendPromptBuilder(theatreB);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(showTimes);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AppendSsml">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9e39d-171">Acrescenta um arquivo SSML a um objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-171">Appends an SSML file to a <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppendSsml">
      <MemberSignature Language="C#" Value="public void AppendSsml (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendSsml(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendSsml(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendSsml (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendSsml(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.AppendSsml : string -&gt; unit" Usage="promptBuilder.AppendSsml path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="9e39d-172">Um caminho totalmente qualificado para o arquivo SSML a ser acrescentado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-172">A fully qualified path to the SSML file to append.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9e39d-173">Acrescenta o arquivo SSML no caminho especificado ao objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-173">Appends the SSML file at the specified path to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e39d-174">O arquivo SSML deve ser um arquivo de formato XML que está de acordo com o [Speech Synthesis Markup Language (SSML) versão 1.0](http://go.microsoft.com/fwlink/?LinkId=201763) especificação.</span><span class="sxs-lookup"><span data-stu-id="9e39d-174">The SSML file must be an XML-format file that conforms to the [Speech Synthesis Markup Language (SSML) Version 1.0](http://go.microsoft.com/fwlink/?LinkId=201763) specification.</span></span>  
  
 <span data-ttu-id="9e39d-175">Você também pode acrescentar a marcação SSML como uma cadeia de caracteres usando <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</span><span class="sxs-lookup"><span data-stu-id="9e39d-175">You can also append SSML markup as a string using <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e39d-176">O exemplo a seguir cria uma <xref:System.Speech.Synthesis.PromptBuilder> do objeto e acrescenta o conteúdo de um arquivo SSML usando o <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> método.</span><span class="sxs-lookup"><span data-stu-id="9e39d-176">The example that follows creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends the contents of an SSML file using the <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> method.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and append a file that defines an SSML prompt.  
        PromptBuilder ssmlFile = new PromptBuilder();  
        ssmlFile.AppendSsml("c:\\test\\Weather.ssml");  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(ssmlFile);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 <span data-ttu-id="9e39d-177">Este é o arquivo SSML que referencia o exemplo anterior.</span><span class="sxs-lookup"><span data-stu-id="9e39d-177">The following is the SSML file that the preceding example references.</span></span>  
  
```xml  
<?xml version="1.0" encoding="ISO-8859-1"?>  
<speak version="1.0"  
 xmlns="http://www.w3.org/2001/10/synthesis"  
 xml:lang="en-US">  
  
  <s> The weather forecast for today is partly cloudy with some sun breaks. </s>  
  
</speak>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendSsml">
      <MemberSignature Language="C#" Value="public void AppendSsml (Uri ssmlFile);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendSsml(class System.Uri ssmlFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendSsml(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendSsml (ssmlFile As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendSsml(Uri ^ ssmlFile);" />
      <MemberSignature Language="F#" Value="member this.AppendSsml : Uri -&gt; unit" Usage="promptBuilder.AppendSsml ssmlFile" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ssmlFile" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="ssmlFile">
          <span data-ttu-id="9e39d-178">Um URI totalmente qualificado para o arquivo SSML a ser acrescentado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-178">A fully qualified URI to the SSML file to append.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9e39d-179">Acrescenta o arquivo SSML no URI especificado ao objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-179">Appends the SSML file at the specified URI to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e39d-180">O arquivo SSML deve ser um arquivo de formato XML que está de acordo com o [Speech Synthesis Markup Language (SSML) versão 1.0](https://www.w3.org/TR/speech-synthesis/) especificação.</span><span class="sxs-lookup"><span data-stu-id="9e39d-180">The SSML file must be an XML-format file that conforms to the [Speech Synthesis Markup Language (SSML) Version 1.0](https://www.w3.org/TR/speech-synthesis/) specification.</span></span>  
  
 <span data-ttu-id="9e39d-181">Você também pode acrescentar a marcação SSML como uma cadeia de caracteres usando <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</span><span class="sxs-lookup"><span data-stu-id="9e39d-181">You can also append SSML markup as a string using <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e39d-182">O exemplo a seguir cria uma <xref:System.Speech.Synthesis.PromptBuilder> do objeto e acrescenta o conteúdo de um arquivo SSML usando o <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> método.</span><span class="sxs-lookup"><span data-stu-id="9e39d-182">The example that follows creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends the contents of an SSML file using the <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> method.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and append a file that defines an SSML prompt.  
        PromptBuilder ssmlFile = new PromptBuilder();  
        ssmlFile.AppendSsml(new Uri("c:\\test\\Weather.ssml"));  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(ssmlFile);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 <span data-ttu-id="9e39d-183">Este é o arquivo SSML que referencia o exemplo anterior.</span><span class="sxs-lookup"><span data-stu-id="9e39d-183">The following is the SSML file that the preceding example references.</span></span>  
  
```xml  
<?xml version="1.0" encoding="ISO-8859-1"?>  
<speak version="1.0"  
 xmlns="http://www.w3.org/2001/10/synthesis"  
 xml:lang="en-US">  
  
  <s> The weather forecast for today is partly cloudy with some sun breaks. </s>  
  
</speak>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendSsml">
      <MemberSignature Language="C#" Value="public void AppendSsml (System.Xml.XmlReader ssmlFile);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendSsml(class System.Xml.XmlReader ssmlFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendSsml(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendSsml (ssmlFile As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendSsml(System::Xml::XmlReader ^ ssmlFile);" />
      <MemberSignature Language="F#" Value="member this.AppendSsml : System.Xml.XmlReader -&gt; unit" Usage="promptBuilder.AppendSsml ssmlFile" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ssmlFile" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="ssmlFile">
          <span data-ttu-id="9e39d-184">Um nome totalmente qualificado para o arquivo XML a ser acrescentado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-184">A fully qualified name to the XML file to append.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9e39d-185">Acrescenta um objeto <c>XMLReader</c> que faz referência a um prompt SSML para o objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-185">Appends an <c>XMLReader</c> object that references an SSML prompt to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e39d-186">O arquivo SSML deve ser um arquivo de formato XML que está de acordo com o [Speech Synthesis Markup Language (SSML) versão 1.0](https://www.w3.org/TR/speech-synthesis/) especificação.</span><span class="sxs-lookup"><span data-stu-id="9e39d-186">The SSML file must be an XML-format file that conforms to the [Speech Synthesis Markup Language (SSML) Version 1.0](https://www.w3.org/TR/speech-synthesis/) specification.</span></span>  
  
 <span data-ttu-id="9e39d-187">Você também pode acrescentar a marcação SSML como uma cadeia de caracteres usando <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</span><span class="sxs-lookup"><span data-stu-id="9e39d-187">You can also append SSML markup as a string using <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e39d-188">O exemplo a seguir cria uma <xref:System.Speech.Synthesis.PromptBuilder> do objeto de um <xref:System.Xml.XmlReader> objeto que faz referência a um arquivo que contém a marcação do Speech Synthesis Markup Language (SSML).</span><span class="sxs-lookup"><span data-stu-id="9e39d-188">The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object from an <xref:System.Xml.XmlReader> object that references a file containing Speech Synthesis Markup Language (SSML) markup.</span></span>  
  
```csharp  
using System;  
using System.Xml;  
using System.IO;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\test\weather.wav");  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =  
          new System.Media.SoundPlayer(@"C:\test\weather.wav");  
  
        // Create the path to the SSML file.  
        string weatherFile = Path.GetFullPath("c:\\test\\Weather.xml");  
        PromptBuilder builder = null;  
  
        // Create an XML Reader from the file, create a PromptBuilder and   
        // append the XmlReader.  
        if (File.Exists(weatherFile))  
        {  
          XmlReader reader = XmlReader.Create(weatherFile);  
          builder = new PromptBuilder();  
          builder.AppendSsml(reader);  
          reader.Close();  
        }  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendSsmlMarkup">
      <MemberSignature Language="C#" Value="public void AppendSsmlMarkup (string ssmlMarkup);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendSsmlMarkup(string ssmlMarkup) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendSsmlMarkup (ssmlMarkup As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendSsmlMarkup(System::String ^ ssmlMarkup);" />
      <MemberSignature Language="F#" Value="member this.AppendSsmlMarkup : string -&gt; unit" Usage="promptBuilder.AppendSsmlMarkup ssmlMarkup" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ssmlMarkup" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ssmlMarkup">
          <span data-ttu-id="9e39d-189">Uma cadeia de caracteres que contém a marcação de SSML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-189">A string containing SSML markup.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9e39d-190">Acrescenta a cadeia de caracteres especificada que contém marcação SSML ao objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-190">Appends the specified string containing SSML markup to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e39d-191">Você deve usar os caracteres de escape apropriadas ao anexar a marcação SSML.</span><span class="sxs-lookup"><span data-stu-id="9e39d-191">You must use the appropriate escape characters when appending SSML markup.</span></span> <span data-ttu-id="9e39d-192">Observe os-invertidas anterior as aspas que incluem o valor da `interpret-as` atributo no exemplo a seguir:</span><span class="sxs-lookup"><span data-stu-id="9e39d-192">Notice the backward-slashes preceding the quotation marks enclosing the value of the `interpret-as` attribute in the following example:</span></span>  
  
```csharp  
builder.AppendSsmlMarkup("<say-as interpret-as = \"characters\"> chair </say-as>");  
```  
  
> [!NOTE]
>  <span data-ttu-id="9e39d-193">A cadeia de caracteres usada como um argumento para <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A> não pode incluir um `speak` elemento.</span><span class="sxs-lookup"><span data-stu-id="9e39d-193">The string used as an argument to <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A> cannot include a `speak` element.</span></span>  
  
 <span data-ttu-id="9e39d-194">Ao usar <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A> para especificar a pronúncia embutido em um `phoneme` elemento, você pode usar telefones de qualquer um dos alfabetos fonéticos seguintes, desde que o mecanismo de fala atual dê suporte a ele:</span><span class="sxs-lookup"><span data-stu-id="9e39d-194">When using <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A> to specify inline pronunciations in a `phoneme` element, you can use phones from any of the following phonetic alphabets, provided that the current speech engine supports it:</span></span>  
  
-   <span data-ttu-id="9e39d-195">Alfabeto fonético de internacional (IPA)</span><span class="sxs-lookup"><span data-stu-id="9e39d-195">International Phonetic Alphabet (IPA)</span></span>  
  
-   <span data-ttu-id="9e39d-196">Conjunto de telefone universal (no-break)</span><span class="sxs-lookup"><span data-stu-id="9e39d-196">Universal Phone Set (UPS)</span></span>  
  
-   <span data-ttu-id="9e39d-197">SAPI telefone definido</span><span class="sxs-lookup"><span data-stu-id="9e39d-197">SAPI Phone Set</span></span>  
  
 <span data-ttu-id="9e39d-198">Qualquer mecanismo de fala em conformidade SSML falará telefones de IPA.</span><span class="sxs-lookup"><span data-stu-id="9e39d-198">Any SSML-compliant speech engine will speak phones from the IPA.</span></span>  
  
 <span data-ttu-id="9e39d-199">Você também pode acrescentar um arquivo que contém marcação SSML usando um do <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="9e39d-199">You can also append a file containing SSML markup using one of the <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> methods.</span></span> <span data-ttu-id="9e39d-200">Para acrescentar texto a ser falado que não está formatado com a linguagem de marcação, use um dos <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>, ou <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="9e39d-200">To append text to be spoken that is not formatted with markup language, use one of the <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>, or <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AppendText">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9e39d-201">Acrescenta texto ao objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-201">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppendText">
      <MemberSignature Language="C#" Value="public void AppendText (string textToSpeak);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendText(string textToSpeak) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendText (textToSpeak As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendText(System::String ^ textToSpeak);" />
      <MemberSignature Language="F#" Value="member this.AppendText : string -&gt; unit" Usage="promptBuilder.AppendText textToSpeak" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">
          <span data-ttu-id="9e39d-202">Uma cadeia de caracteres que contém o texto a ser falado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-202">A string containing the text to be spoken.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9e39d-203">Especifica o texto a ser acrescentado ao objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-203">Specifies text to append to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e39d-204">Para acrescentar texto formatado como linguagem de marcação SSML, use <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</span><span class="sxs-lookup"><span data-stu-id="9e39d-204">To append text that is formatted as SSML markup language, use <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e39d-205">O exemplo a seguir cria uma <xref:System.Speech.Synthesis.PromptBuilder> do objeto e acrescenta uma cadeia de caracteres de texto usando o <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> método.</span><span class="sxs-lookup"><span data-stu-id="9e39d-205">The example that follows creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends a text string using the <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> method.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and append a text string.  
        PromptBuilder speakText = new PromptBuilder();  
        speakText.AppendText("Say the name of the song you want to hear");  
  
        // Speak the contents of the prompt.  
        synth.Speak(speakText);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendText">
      <MemberSignature Language="C#" Value="public void AppendText (string textToSpeak, System.Speech.Synthesis.PromptEmphasis emphasis);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendText(string textToSpeak, valuetype System.Speech.Synthesis.PromptEmphasis emphasis) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptEmphasis)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendText (textToSpeak As String, emphasis As PromptEmphasis)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendText(System::String ^ textToSpeak, System::Speech::Synthesis::PromptEmphasis emphasis);" />
      <MemberSignature Language="F#" Value="member this.AppendText : string * System.Speech.Synthesis.PromptEmphasis -&gt; unit" Usage="promptBuilder.AppendText (textToSpeak, emphasis)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="emphasis" Type="System.Speech.Synthesis.PromptEmphasis" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">
          <span data-ttu-id="9e39d-206">Uma cadeia de caracteres que contém o texto a ser falado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-206">A string containing the text to be spoken.</span>
          </span>
        </param>
        <param name="emphasis">
          <span data-ttu-id="9e39d-207">O valor para a ênfase ou realce a ser aplicado no texto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-207">The value for the emphasis or stress to apply to the text.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9e39d-208">Acrescenta texto ao objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" /> e especifica o grau de ênfase do texto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-208">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the degree of emphasis for the text.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e39d-209">Os mecanismos de síntese de fala no Windows não suportam o parâmetro de ênfase no momento.</span><span class="sxs-lookup"><span data-stu-id="9e39d-209">The speech synthesis engines in Windows do not support the emphasis parameter at this time.</span></span> <span data-ttu-id="9e39d-210">Definir valores para o parâmetro de ênfase não produzirá nenhuma alteração audível na saída de voz sintetizada.</span><span class="sxs-lookup"><span data-stu-id="9e39d-210">Setting values for the emphasis parameter will produce no audible change in the synthesized speech output.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendText">
      <MemberSignature Language="C#" Value="public void AppendText (string textToSpeak, System.Speech.Synthesis.PromptRate rate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendText(string textToSpeak, valuetype System.Speech.Synthesis.PromptRate rate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptRate)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendText (textToSpeak As String, rate As PromptRate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendText(System::String ^ textToSpeak, System::Speech::Synthesis::PromptRate rate);" />
      <MemberSignature Language="F#" Value="member this.AppendText : string * System.Speech.Synthesis.PromptRate -&gt; unit" Usage="promptBuilder.AppendText (textToSpeak, rate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="rate" Type="System.Speech.Synthesis.PromptRate" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">
          <span data-ttu-id="9e39d-211">Uma cadeia de caracteres que contém o texto a ser falado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-211">A string containing the text to be spoken.</span>
          </span>
        </param>
        <param name="rate">
          <span data-ttu-id="9e39d-212">O valor do ritmo de fala a ser aplicado ao texto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-212">The value for the speaking rate to apply to the text.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9e39d-213">Acrescenta texto ao objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" /> e especifica o ritmo de fala do texto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-213">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the speaking rate for the text.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9e39d-214">O exemplo a seguir cria um <xref:System.Speech.Synthesis.PromptBuilder> do objeto e acrescenta cadeias de caracteres de texto.</span><span class="sxs-lookup"><span data-stu-id="9e39d-214">The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends text strings.</span></span> <span data-ttu-id="9e39d-215">O exemplo usa o <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> método para especificar um falando lenta de taxa para a cadeia de caracteres que está sendo adicionada, que enumera o conteúdo de um pedido.</span><span class="sxs-lookup"><span data-stu-id="9e39d-215">The example uses the <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> method to specify a slow speaking rate for the string being added, which enumerates the contents of an order.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and add content.  
        PromptBuilder speakRate = new PromptBuilder();  
        speakRate.AppendText("Your order for");  
        speakRate.AppendText("one kitchen sink and one faucet", PromptRate.Slow);  
        speakRate.AppendText("has been confirmed.");  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(speakRate);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendText">
      <MemberSignature Language="C#" Value="public void AppendText (string textToSpeak, System.Speech.Synthesis.PromptVolume volume);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendText(string textToSpeak, valuetype System.Speech.Synthesis.PromptVolume volume) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptVolume)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendText (textToSpeak As String, volume As PromptVolume)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendText(System::String ^ textToSpeak, System::Speech::Synthesis::PromptVolume volume);" />
      <MemberSignature Language="F#" Value="member this.AppendText : string * System.Speech.Synthesis.PromptVolume -&gt; unit" Usage="promptBuilder.AppendText (textToSpeak, volume)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="volume" Type="System.Speech.Synthesis.PromptVolume" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">
          <span data-ttu-id="9e39d-216">Uma cadeia de caracteres que contém o texto a ser falado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-216">A string containing the text to be spoken.</span>
          </span>
        </param>
        <param name="volume">
          <span data-ttu-id="9e39d-217">O valor do volume de fala (altura) a ser aplicado ao texto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-217">The value for the speaking volume (loudness) to apply to the text.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9e39d-218">Acrescenta texto ao objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" /> e especifica o volume de fala do texto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-218">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the volume to speak the text.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e39d-219">O <xref:System.Speech.Synthesis.PromptVolume.Default> definindo para <xref:System.Speech.Synthesis.PromptVolume> é um volume completo, que é o mesmo como <xref:System.Speech.Synthesis.PromptVolume.ExtraLoud>.</span><span class="sxs-lookup"><span data-stu-id="9e39d-219">The <xref:System.Speech.Synthesis.PromptVolume.Default> setting for <xref:System.Speech.Synthesis.PromptVolume> is full volume, which is the same as <xref:System.Speech.Synthesis.PromptVolume.ExtraLoud>.</span></span> <span data-ttu-id="9e39d-220">As outras configurações diminuir o volume de saída de fala em relação ao volume completo.</span><span class="sxs-lookup"><span data-stu-id="9e39d-220">The other settings decrease the volume of speech output relative to full volume.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e39d-221">O exemplo a seguir usa o <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> método para especificar as configurações de volume que o <xref:System.Speech.Synthesis.SpeechSynthesizer> devem ser aplicados a saída de fala.</span><span class="sxs-lookup"><span data-stu-id="9e39d-221">The following example uses the <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> method to specify volume settings that the <xref:System.Speech.Synthesis.SpeechSynthesizer> should apply to speech output.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Build a prompt that applies different volume settings.  
        PromptBuilder builder = new PromptBuilder();  
        builder.AppendText("This is the default speaking volume.", PromptVolume.Default);  
        builder.AppendBreak();  
        builder.AppendText("This is the extra loud speaking volume.", PromptVolume.ExtraLoud);  
        builder.AppendBreak();  
        builder.AppendText("This is the medium speaking volume.", PromptVolume.Medium);  
  
        // Speak the prompt.  
        synth.Speak(builder);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendTextWithAlias">
      <MemberSignature Language="C#" Value="public void AppendTextWithAlias (string textToSpeak, string substitute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendTextWithAlias(string textToSpeak, string substitute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendTextWithAlias (textToSpeak As String, substitute As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendTextWithAlias(System::String ^ textToSpeak, System::String ^ substitute);" />
      <MemberSignature Language="F#" Value="member this.AppendTextWithAlias : string * string -&gt; unit" Usage="promptBuilder.AppendTextWithAlias (textToSpeak, substitute)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="substitute" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">
          <span data-ttu-id="9e39d-222">Uma cadeia de caracteres que contém a representação do texto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-222">A string containing the text representation.</span>
          </span>
        </param>
        <param name="substitute">
          <span data-ttu-id="9e39d-223">Uma cadeia de caracteres que contém o texto a ser falado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-223">A string containing the text to be spoken.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9e39d-224">Acrescenta texto ao objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" /> e especifica o texto de alias a ser falado em vez do texto acrescentado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-224">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the alias text to be spoken in place of the appended text.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e39d-225">Isso permite que um documento conter um falado e uma forma escrita para um prompt.</span><span class="sxs-lookup"><span data-stu-id="9e39d-225">This allows a document to contain both a spoken and a written form for a prompt.</span></span> <span data-ttu-id="9e39d-226">Por exemplo, a forma escrita pode ser um acrônimo, como o SAPI, e a forma falada poderia ser o texto expandido para o acrônimo, entre este caso Speech Application Programming Interface.</span><span class="sxs-lookup"><span data-stu-id="9e39d-226">For example, the written form could be an acronym, such as SAPI, and the spoken form could be the expanded text for the acronym, in this case Speech Application Programming Interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e39d-227">O exemplo a seguir acrescenta uma cadeia de caracteres de texto ("Speech Synthesis Markup Language") e seu alias "SSML (") para um <xref:System.Speech.Synthesis.PromptBuilder> objeto.</span><span class="sxs-lookup"><span data-stu-id="9e39d-227">The following example appends a text string ("Speech Synthesis Markup Language") and its alias ("SSML") to a <xref:System.Speech.Synthesis.PromptBuilder> object.</span></span> <span data-ttu-id="9e39d-228">O sintetizador será pronunciar "S S M L".</span><span class="sxs-lookup"><span data-stu-id="9e39d-228">The synthesizer will pronounce "S S M L".</span></span>  
  
```  
PromptBuilder alias = new PromptBuilder();  
alias.AppendTextWithAlias("Speech Synthesis Markup Language","SSML");   
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AppendTextWithHint">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9e39d-229">Acrescenta texto ao objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" /> e especifica o tipo de conteúdo do texto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-229">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the content type of the text.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppendTextWithHint">
      <MemberSignature Language="C#" Value="public void AppendTextWithHint (string textToSpeak, System.Speech.Synthesis.SayAs sayAs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendTextWithHint(string textToSpeak, valuetype System.Speech.Synthesis.SayAs sayAs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint(System.String,System.Speech.Synthesis.SayAs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendTextWithHint(System::String ^ textToSpeak, System::Speech::Synthesis::SayAs sayAs);" />
      <MemberSignature Language="F#" Value="member this.AppendTextWithHint : string * System.Speech.Synthesis.SayAs -&gt; unit" Usage="promptBuilder.AppendTextWithHint (textToSpeak, sayAs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="sayAs" Type="System.Speech.Synthesis.SayAs" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">
          <span data-ttu-id="9e39d-230">Uma cadeia de caracteres que contém o texto a ser falado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-230">A string containing the text to be spoken.</span>
          </span>
        </param>
        <param name="sayAs">
          <span data-ttu-id="9e39d-231">O tipo de conteúdo do texto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-231">The content type of the text.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9e39d-232">Acrescenta texto ao objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" /> e especifica o tipo de conteúdo usando um membro da enumeração <see cref="T:System.Speech.Synthesis.SayAs" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-232">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the content type using a member of the <see cref="T:System.Speech.Synthesis.SayAs" /> enumeration.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e39d-233">O tipo de conteúdo especificado por `sayAs` pode fornecer orientação para o mecanismo de síntese de fala sobre como pronunciá o conteúdo de `textToSpeak`.</span><span class="sxs-lookup"><span data-stu-id="9e39d-233">The content type specified by `sayAs` can provide guidance to the speech synthesis engine about how to pronounce the contents of `textToSpeak`.</span></span>  
  
   
  
## Examples  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and define the data types for some of the added strings.  
        PromptBuilder sayAs = new PromptBuilder();  
        sayAs.AppendText("Your");  
        sayAs.AppendTextWithHint("1st", SayAs.NumberOrdinal);  
        sayAs.AppendText("request was for");  
        sayAs.AppendTextWithHint("1", SayAs.NumberCardinal);  
        sayAs.AppendText("room, on");  
        sayAs.AppendTextWithHint("10/19/2012,", SayAs.MonthDayYear);  
        sayAs.AppendText("with early arrival at");  
        sayAs.AppendTextWithHint("12:35pm", SayAs.Time12);  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(sayAs);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendTextWithHint">
      <MemberSignature Language="C#" Value="public void AppendTextWithHint (string textToSpeak, string sayAs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendTextWithHint(string textToSpeak, string sayAs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendTextWithHint (textToSpeak As String, sayAs As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendTextWithHint(System::String ^ textToSpeak, System::String ^ sayAs);" />
      <MemberSignature Language="F#" Value="member this.AppendTextWithHint : string * string -&gt; unit" Usage="promptBuilder.AppendTextWithHint (textToSpeak, sayAs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="sayAs" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">
          <span data-ttu-id="9e39d-234">Uma cadeia de caracteres que contém o texto a ser falado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-234">A string containing the text to be spoken.</span>
          </span>
        </param>
        <param name="sayAs">
          <span data-ttu-id="9e39d-235">O tipo de conteúdo do texto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-235">The content type of the text.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9e39d-236">Acrescenta texto ao objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" /> e um <see cref="T:System.String" /> que especifica o tipo de conteúdo do texto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-236">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and a <see cref="T:System.String" /> that specifies the content type of the text.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e39d-237">Você pode usar esse método para especificar um tipo de conteúdo que não está incluído no <xref:System.Speech.Synthesis.SayAs> enumeração.</span><span class="sxs-lookup"><span data-stu-id="9e39d-237">You can use this method to specify a content type that is not included in the <xref:System.Speech.Synthesis.SayAs> enumeration.</span></span> <span data-ttu-id="9e39d-238">No entanto, o mecanismo TTS deve dar suporte a parâmetro que você especificar.</span><span class="sxs-lookup"><span data-stu-id="9e39d-238">However, the TTS engine must support the parameter that you specify.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendTextWithPronunciation">
      <MemberSignature Language="C#" Value="public void AppendTextWithPronunciation (string textToSpeak, string pronunciation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendTextWithPronunciation(string textToSpeak, string pronunciation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendTextWithPronunciation (textToSpeak As String, pronunciation As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendTextWithPronunciation(System::String ^ textToSpeak, System::String ^ pronunciation);" />
      <MemberSignature Language="F#" Value="member this.AppendTextWithPronunciation : string * string -&gt; unit" Usage="promptBuilder.AppendTextWithPronunciation (textToSpeak, pronunciation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="pronunciation" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">
          <span data-ttu-id="9e39d-239">Uma cadeia de caracteres que contém a forma escrita da palavra usando o alfabeto convencional para um idioma.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-239">A string containing the written form of the word using the conventional alphabet for a language.</span>
          </span>
        </param>
        <param name="pronunciation">
          <span data-ttu-id="9e39d-240">Uma cadeia de caracteres que contém os fonemas do IPA (alfabeto fonético internacional) a pronunciar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-240">A string containing phones to be spoken from the International Phonetic Alphabet (IPA).</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9e39d-241">Acrescenta texto ao objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" /> e especifica a pronúncia do texto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-241">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the pronunciation for the text.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e39d-242">O sintetizador de fala o conteúdo do `pronunciation` parâmetro, não o conteúdo a `textToSpeak` parâmetro.</span><span class="sxs-lookup"><span data-stu-id="9e39d-242">The synthesizer speaks the contents of the `pronunciation` parameter, not the contents of the `textToSpeak` parameter.</span></span>  
  
 <span data-ttu-id="9e39d-243">Pronúncia especificadas como embutidas nos prompts se aplicam apenas à ocorrência individual de uma palavra e substituem a pronúncia do mecanismo de fala ou qualquer um dos seus dicionários ativos no momento.</span><span class="sxs-lookup"><span data-stu-id="9e39d-243">Pronunciations specified inline in prompts apply only to the individual occurrence of a word and override pronunciations of the speech engine or any of its currently active lexicons.</span></span> <span data-ttu-id="9e39d-244">Normalmente, você usará pronúncia embutido para personalizado pronúncia de palavras existentes ou para a pronúncia de palavras incomuns, como nomes próprios, que o mecanismo de síntese de fala não pode pronunciar bem como esperado.</span><span class="sxs-lookup"><span data-stu-id="9e39d-244">Typically, you will use inline pronunciations for custom pronunciations of existing words or for pronunciation of uncommon words, such as proper names, which the speech synthesis engine may not pronounce as well as expected.</span></span>  
  
 <span data-ttu-id="9e39d-245">Pronúncia embutido deve ser especificada usando telefones do alfabeto fonético internacional (IPA).</span><span class="sxs-lookup"><span data-stu-id="9e39d-245">Inline pronunciations must be specified using phones from the International Phonetic Alphabet (IPA).</span></span> <span data-ttu-id="9e39d-246">Um telefone é uma letra ou um caractere que representa um som discreto de fala.</span><span class="sxs-lookup"><span data-stu-id="9e39d-246">A phone is a letter or character that represents a discreet sound of speech.</span></span> <span data-ttu-id="9e39d-247">Mecanismos de fala que estão em conformidade com o [Speech Synthesis Markup Language (SSML) versão 1.0](http://go.microsoft.com/fwlink/?LinkId=201763) especificação será pronunciar telefones de IPA.</span><span class="sxs-lookup"><span data-stu-id="9e39d-247">Speech engines that comply with the [Speech Synthesis Markup Language (SSML) Version 1.0](http://go.microsoft.com/fwlink/?LinkId=201763) specification will pronounce phones from the IPA.</span></span> <span data-ttu-id="9e39d-248">Para especificar a pronúncia embutido usando outros alfabetos fonéticos, consulte <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</span><span class="sxs-lookup"><span data-stu-id="9e39d-248">To specify inline pronunciations using other phonetic alphabets, see <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</span></span>  
  
 <span data-ttu-id="9e39d-249">O IPA publica uma [gráfico](http://go.microsoft.com/fwlink/?LinkId=58362) que lista seus telefones e mapeá-las para números de Unicode.</span><span class="sxs-lookup"><span data-stu-id="9e39d-249">The IPA publishes a [chart](http://go.microsoft.com/fwlink/?LinkId=58362) that lists its phones and maps them to Unicode numbers.</span></span>  
  
 <span data-ttu-id="9e39d-250">Alguns telefones do alfabeto de IPA têm as mesmas representações como letras do alfabeto latino.</span><span class="sxs-lookup"><span data-stu-id="9e39d-250">Some phones in the IPA alphabet have the same representations as letters in the Latin alphabet.</span></span> <span data-ttu-id="9e39d-251">Nesses casos, é possível digitar os caracteres latinos e têm a representação adequada para um telefone.</span><span class="sxs-lookup"><span data-stu-id="9e39d-251">In those cases, it is possible to type the Latin character and have the proper representation for a phone.</span></span> <span data-ttu-id="9e39d-252">Porque os caracteres latinos que são usados em texto podem representar vários telefones do conjunto de telefone de IPA, simplesmente digitar os caracteres latinos pode não resultar no telefone de IPA exato desejado.</span><span class="sxs-lookup"><span data-stu-id="9e39d-252">Because the Latin characters as commonly used in text may represent several phones of the IPA phone set, simply typing the Latin character might not result in the precise IPA phone desired.</span></span> <span data-ttu-id="9e39d-253">Outros telefones de IPA alfabeto precisar ser representado no código como caracteres referências consiste em um e comercial (&), o sinal de número (#), e um número de Unicode para o telefone desejado em hexadecimal ou decimal, todos seguido por um ponto e vírgula (;).</span><span class="sxs-lookup"><span data-stu-id="9e39d-253">Other phones of the IPA alphabet need to be represented in code as character references consisting of an ampersand (&), the number sign (#), and a Unicode number for the desired phone in hexadecimal or decimal, all followed by a semicolon (;).</span></span> <span data-ttu-id="9e39d-254">Por exemplo, um schwa (&\#x0259;) seria representada pelo `&#x0259;`.</span><span class="sxs-lookup"><span data-stu-id="9e39d-254">For example, a schwa (&\#x0259;) would be represented by `&#x0259;`.</span></span>  
  
 <span data-ttu-id="9e39d-255">Para adicionar nova ou personalizada pronúncia por várias palavras, por exemplo para dialetos express regionais ou para adicionar nomes próprios ou vocabulário específico para uma disciplina educacional ou médica, crie um léxico e adicioná-lo para o <xref:System.Speech.Synthesis.SpeechSynthesizer> usando <xref:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon%2A>.</span><span class="sxs-lookup"><span data-stu-id="9e39d-255">To add new or custom pronunciations for multiple words, for example to express regional dialects or to add proper names or vocabulary that is specific to an educational or medical discipline, build a lexicon and add it to the <xref:System.Speech.Synthesis.SpeechSynthesizer> using <xref:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e39d-256">O exemplo a seguir inicializa uma nova instância do <xref:System.Speech.Synthesis.PromptBuilder> classe.</span><span class="sxs-lookup"><span data-stu-id="9e39d-256">The following example initializes a new instance of the <xref:System.Speech.Synthesis.PromptBuilder> class.</span></span> <span data-ttu-id="9e39d-257">Ele, em seguida, acrescenta a cadeia de caracteres de texto "meu nome é" para a instância.</span><span class="sxs-lookup"><span data-stu-id="9e39d-257">It then appends the text string "My name is" to the instance.</span></span> <span data-ttu-id="9e39d-258">Por fim, ele acrescenta uma cadeia de caracteres que contém o nome adequado "DuBois" e especifica a pronúncia do nome.</span><span class="sxs-lookup"><span data-stu-id="9e39d-258">Finally, it appends a string containing the proper name "DuBois" and specifies the pronunciation of the name.</span></span>  
  
```csharp  
public void ProperName()  
{  
    PromptBuilder builder = new PromptBuilder();  
    builder.AppendText("My name is");  
  
    // Add a proper name and its pronunciation.  
    builder.AppendTextWithPronunciation("DuBois", "duˈbwɑ");     
}  
```  
  
 <span data-ttu-id="9e39d-259">A marcação a seguir mostra o SSML que este <xref:System.Speech.Synthesis.PromptBuilder> gera do objeto.</span><span class="sxs-lookup"><span data-stu-id="9e39d-259">The following markup shows the SSML that this <xref:System.Speech.Synthesis.PromptBuilder> object generates.</span></span>  
  
```xml  
<speak xmlns="http://www.w3.org/2001/10/synthesis" xml:lang="en-us">  
  My name is <phoneme ph="duˈbwɑ"> DuBois </phoneme>  
</speak>  
```  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="http://go.microsoft.com/fwlink/?LinkId=58363">
          <span data-ttu-id="9e39d-260">Associação fonética internacional</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-260">International Phonetic Association</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ClearContent">
      <MemberSignature Language="C#" Value="public void ClearContent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearContent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.ClearContent" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearContent ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearContent();" />
      <MemberSignature Language="F#" Value="member this.ClearContent : unit -&gt; unit" Usage="promptBuilder.ClearContent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9e39d-261">Limpa todo o conteúdo do objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-261">Clears the content from the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Culture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Culture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Culture" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.PromptBuilder.Culture" />
      <MemberSignature Language="VB.NET" Value="Public Property Culture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Culture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Culture : System.Globalization.CultureInfo with get, set" Usage="System.Speech.Synthesis.PromptBuilder.Culture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9e39d-262">Obtém ou define as informações de cultura do objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-262">Gets or sets the culture information for the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e39d-263">O <xref:System.Speech.Synthesis.SpeechSynthesizer> objeto será tentar selecionar uma voz instalada que dá suporte ao idioma especificado pela <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> propriedade para processar o prompt.</span><span class="sxs-lookup"><span data-stu-id="9e39d-263">The <xref:System.Speech.Synthesis.SpeechSynthesizer> object will attempt to select an installed voice that supports the language specified by the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property to process the prompt.</span></span> <span data-ttu-id="9e39d-264">Se uma voz com a cultura especificada for encontrada, ele será usado.</span><span class="sxs-lookup"><span data-stu-id="9e39d-264">If a voice with the specified culture is found, it will be used.</span></span> <span data-ttu-id="9e39d-265">Se não for encontrada uma voz com a cultura especificada, a voz padrão será usada.</span><span class="sxs-lookup"><span data-stu-id="9e39d-265">If a voice with the specified culture cannot be found, the default voice will be used.</span></span>  
  
 <span data-ttu-id="9e39d-266">Uma cultura também pode ser especificada dentro do prompt de discreto pelas seções de conteúdo usando o <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>, <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>, e <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="9e39d-266">A culture may also be specified within the prompt for discreet sections of content using the <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>, <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>, and <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A> methods.</span></span> <span data-ttu-id="9e39d-267">Uma cultura especificada para uma parte do conteúdo usando um dos métodos acima substituirá a <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> propriedade enquanto em vigor e o <xref:System.Speech.Synthesis.SpeechSynthesizer> tentar selecionar uma voz instalada que dá suporte ao idioma especificado pela `culture` parâmetro do método.</span><span class="sxs-lookup"><span data-stu-id="9e39d-267">A culture specified for a portion of content using one of the above methods will override the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property while in effect, and the <xref:System.Speech.Synthesis.SpeechSynthesizer> will attempt to select an installed voice that supports the language specified by the `culture` parameter of the method.</span></span>  
  
 <span data-ttu-id="9e39d-268">A pronunciar corretamente palavras no idioma especificado pelo <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> propriedade, um mecanismo de síntese (fala ou TTS) de fala que ofereça suporte o idioma deve ser instalada.</span><span class="sxs-lookup"><span data-stu-id="9e39d-268">To correctly pronounce words in the language specified by the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property, a speech synthesis (text-to-speech or TTS) engine that supports the language must be installed.</span></span> <span data-ttu-id="9e39d-269">Um mecanismo de TTS instalado é chamado uma voz.</span><span class="sxs-lookup"><span data-stu-id="9e39d-269">An installed TTS engine is called a voice.</span></span> <span data-ttu-id="9e39d-270">Para obter informações sobre o qual as vozes são instaladas para uma cultura específica, use o <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> método.</span><span class="sxs-lookup"><span data-stu-id="9e39d-270">To get information about which voices are installed for a specific culture, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method.</span></span>  
  
 <span data-ttu-id="9e39d-271">Microsoft Windows e a API de System. Speech aceitam todos os códigos de idioma-país válidos como valores para `culture`.</span><span class="sxs-lookup"><span data-stu-id="9e39d-271">Microsoft Windows and the System.Speech API accept all valid language-country codes as values for `culture`.</span></span> <span data-ttu-id="9e39d-272">Os mecanismos TTS que acompanham o Windows 7 suportam os seguintes códigos de idioma-país:</span><span class="sxs-lookup"><span data-stu-id="9e39d-272">The TTS engines that shipped with Windows 7 support the following language-country codes:</span></span>  
  
-   <span data-ttu-id="9e39d-273">en-US.</span><span class="sxs-lookup"><span data-stu-id="9e39d-273">en-US.</span></span> <span data-ttu-id="9e39d-274">Inglês (Estados Unidos)</span><span class="sxs-lookup"><span data-stu-id="9e39d-274">English (United States)</span></span>  
  
-   <span data-ttu-id="9e39d-275">zh-CN.</span><span class="sxs-lookup"><span data-stu-id="9e39d-275">zh-CN.</span></span> <span data-ttu-id="9e39d-276">Chinês (China)</span><span class="sxs-lookup"><span data-stu-id="9e39d-276">Chinese (China)</span></span>  
  
-   <span data-ttu-id="9e39d-277">zh-TW.</span><span class="sxs-lookup"><span data-stu-id="9e39d-277">zh-TW.</span></span> <span data-ttu-id="9e39d-278">Chinês (Taiwan)</span><span class="sxs-lookup"><span data-stu-id="9e39d-278">Chinese (Taiwan)</span></span>  
  
 <span data-ttu-id="9e39d-279">Códigos de idioma de duas letras, como "en" também são permitidos.</span><span class="sxs-lookup"><span data-stu-id="9e39d-279">Two-letter language codes such as "en" are also permitted.</span></span>  <span data-ttu-id="9e39d-280">Ver [cadeias de caracteres e constantes de identificador de idioma](http://msdn.microsoft.com/library/dd318693\(VS.85\).aspx) para obter uma lista abrangente dos códigos de idioma.</span><span class="sxs-lookup"><span data-stu-id="9e39d-280">See [Language Identifier Constants and Strings](http://msdn.microsoft.com/library/dd318693\(VS.85\).aspx) for a comprehensive list of language codes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndParagraph">
      <MemberSignature Language="C#" Value="public void EndParagraph ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndParagraph() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.EndParagraph" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndParagraph ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndParagraph();" />
      <MemberSignature Language="F#" Value="member this.EndParagraph : unit -&gt; unit" Usage="promptBuilder.EndParagraph " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9e39d-281">Especifica o final de um parágrafo no objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-281">Specifies the end of a paragraph in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e39d-282">Prompts longo podem ser renderizados mais parecido com fala humana se eles são divididos em frases e parágrafos.</span><span class="sxs-lookup"><span data-stu-id="9e39d-282">Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.</span></span> <span data-ttu-id="9e39d-283">Para ver um exemplo, consulte <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>.</span><span class="sxs-lookup"><span data-stu-id="9e39d-283">See <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A> for an example.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndSentence">
      <MemberSignature Language="C#" Value="public void EndSentence ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndSentence() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.EndSentence" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndSentence ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndSentence();" />
      <MemberSignature Language="F#" Value="member this.EndSentence : unit -&gt; unit" Usage="promptBuilder.EndSentence " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9e39d-284">Especifica o final de uma frase no objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-284">Specifies the end of a sentence in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e39d-285">Prompts longo podem ser renderizados mais parecido com fala humana se eles são divididos em frases e parágrafos.</span><span class="sxs-lookup"><span data-stu-id="9e39d-285">Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.</span></span> <span data-ttu-id="9e39d-286">Para ver um exemplo, consulte <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A>.</span><span class="sxs-lookup"><span data-stu-id="9e39d-286">See <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A> for an example.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndStyle">
      <MemberSignature Language="C#" Value="public void EndStyle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndStyle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.EndStyle" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndStyle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndStyle();" />
      <MemberSignature Language="F#" Value="member this.EndStyle : unit -&gt; unit" Usage="promptBuilder.EndStyle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9e39d-287">Especifica o final de um estilo no objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-287">Specifies the end of a style in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e39d-288">O <xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A> método interrompe o estilo de fala atual.</span><span class="sxs-lookup"><span data-stu-id="9e39d-288">The <xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A> method stops the current speaking style.</span></span> <span data-ttu-id="9e39d-289">O estilo de fala é revertida para a configuração que estava em vigor antes de <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> método iniciou um novo estilo de fala.</span><span class="sxs-lookup"><span data-stu-id="9e39d-289">The speaking style reverts to the setting that was in effect before the <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> method initiated a new speaking style.</span></span> <span data-ttu-id="9e39d-290">Para ver um exemplo, consulte <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A>.</span><span class="sxs-lookup"><span data-stu-id="9e39d-290">See <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> for an example.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndVoice">
      <MemberSignature Language="C#" Value="public void EndVoice ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndVoice() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.EndVoice" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndVoice ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndVoice();" />
      <MemberSignature Language="F#" Value="member this.EndVoice : unit -&gt; unit" Usage="promptBuilder.EndVoice " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9e39d-291">Especifica o final do uso de uma voz no objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-291">Specifies the end of use of a voice in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e39d-292">O <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A> método interrompe o uso da voz atual para a saída de fala.</span><span class="sxs-lookup"><span data-stu-id="9e39d-292">The <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A> method stops the use of the current voice for speech output.</span></span> <span data-ttu-id="9e39d-293">A voz é revertida para a configuração que estava em vigor antes de <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> método iniciou uma nova voz.</span><span class="sxs-lookup"><span data-stu-id="9e39d-293">The voice reverts to the setting that was in effect before the <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> method initiated a new voice.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.PromptBuilder.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEmpty : bool" Usage="System.Speech.Synthesis.PromptBuilder.IsEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9e39d-294">Obtém se o <see cref="T:System.Speech.Synthesis.PromptBuilder" /> está vazio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-294">Gets whether the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> is empty.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="StartParagraph">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9e39d-295">Especifica o início de um parágrafo no objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" /> e, opcionalmente, especifica um idioma.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-295">Specifies the start of a paragraph in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object, and optionally specifies a language.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e39d-296">Prompts longo podem ser renderizados mais parecido com fala humana se eles são divididos em frases e parágrafos.</span><span class="sxs-lookup"><span data-stu-id="9e39d-296">Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="StartParagraph">
      <MemberSignature Language="C#" Value="public void StartParagraph ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartParagraph() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartParagraph" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartParagraph ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartParagraph();" />
      <MemberSignature Language="F#" Value="member this.StartParagraph : unit -&gt; unit" Usage="promptBuilder.StartParagraph " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9e39d-297">Especifica o início de um parágrafo no objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-297">Specifies the start of a paragraph in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e39d-298">Prompts longo podem ser renderizados mais parecido com fala humana se eles são divididos em frases e parágrafos.</span><span class="sxs-lookup"><span data-stu-id="9e39d-298">Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e39d-299">O exemplo a seguir cria um <xref:System.Speech.Synthesis.PromptBuilder> objeto, acrescenta o conteúdo e organiza o conteúdo em parágrafos e frases.</span><span class="sxs-lookup"><span data-stu-id="9e39d-299">The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object, appends content, and organizes the content into paragraphs and sentences.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and add content as paragraphs and sentences.  
        PromptBuilder parSent = new PromptBuilder();  
        parSent.StartParagraph();  
        parSent.StartSentence();  
        parSent.AppendText("Introducing the sentence element.");  
        parSent.EndSentence();  
        parSent.StartSentence();  
        parSent.AppendText("You can use it to mark individual sentences.");  
        parSent.EndSentence();  
        parSent.EndParagraph();  
        parSent.StartParagraph();  
        parSent.AppendText("Another simple paragraph. Sentence structure in this paragraph" +  
          "is not explicitly marked.");  
        parSent.EndParagraph();  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(parSent);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartParagraph">
      <MemberSignature Language="C#" Value="public void StartParagraph (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartParagraph(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartParagraph(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartParagraph (culture As CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartParagraph(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.StartParagraph : System.Globalization.CultureInfo -&gt; unit" Usage="promptBuilder.StartParagraph culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture">
          <span data-ttu-id="9e39d-300">Fornece informações sobre uma cultura específica, como o idioma, o nome da cultura, o sistema de escrita, o calendário usado e como formatar datas e classificar cadeias de caracteres.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-300">Provides information about a specific culture, such as the language, the name of the culture, the writing system, the calendar used, and how to format dates and sort strings.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9e39d-301">Especifica o início de um parágrafo na cultura especificada no objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-301">Specifies the start of a paragraph in the specified culture in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e39d-302">Prompts longo podem ser renderizados mais parecido com fala humana se eles são divididos em frases e parágrafos.</span><span class="sxs-lookup"><span data-stu-id="9e39d-302">Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.</span></span>  
  
 <span data-ttu-id="9e39d-303">O `culture` parâmetro para um parágrafo pode ser diferente de <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> propriedade do <xref:System.Speech.Synthesis.PromptBuilder> objeto que o contém.</span><span class="sxs-lookup"><span data-stu-id="9e39d-303">The `culture` parameter for a paragraph can be different than the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property of the <xref:System.Speech.Synthesis.PromptBuilder> object that contains it.</span></span> <span data-ttu-id="9e39d-304">Na verdade, enquanto o valor da `culture` parâmetro substituirá o <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="9e39d-304">While in effect, the value of the `culture` parameter will override the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property.</span></span> <span data-ttu-id="9e39d-305">O <xref:System.Speech.Synthesis.SpeechSynthesizer> tenta selecionar uma voz instalada que dá suporte ao idioma especificado pela `culture` parâmetro falar do parágrafo.</span><span class="sxs-lookup"><span data-stu-id="9e39d-305">The <xref:System.Speech.Synthesis.SpeechSynthesizer> will attempt to select an installed voice that supports the language specified by the `culture` parameter to speak the paragraph.</span></span> <span data-ttu-id="9e39d-306">Se uma voz com a cultura especificada for encontrada, ele será usado.</span><span class="sxs-lookup"><span data-stu-id="9e39d-306">If a voice with the specified culture is found, it will be used.</span></span> <span data-ttu-id="9e39d-307">Se não for encontrada uma voz com a cultura especificada, a voz padrão será usada.</span><span class="sxs-lookup"><span data-stu-id="9e39d-307">If a voice with the specified culture cannot be found, the default voice will be used.</span></span> <span data-ttu-id="9e39d-308">Para parar de usar a voz especificada por <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>, chame <xref:System.Speech.Synthesis.PromptBuilder.EndParagraph%2A>.</span><span class="sxs-lookup"><span data-stu-id="9e39d-308">To stop using the voice specified by <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>, call <xref:System.Speech.Synthesis.PromptBuilder.EndParagraph%2A>.</span></span>  
  
 <span data-ttu-id="9e39d-309">A pronunciar corretamente palavras no idioma especificado pelo `culture` parâmetro, um mecanismo de síntese (fala ou TTS) de fala que ofereça suporte o idioma deve ser instalado.</span><span class="sxs-lookup"><span data-stu-id="9e39d-309">To correctly pronounce words in the language specified by the `culture` parameter, a speech synthesis (text-to-speech or TTS) engine that supports the language must be installed.</span></span> <span data-ttu-id="9e39d-310">Um mecanismo de TTS instalado é chamado uma voz.</span><span class="sxs-lookup"><span data-stu-id="9e39d-310">An installed TTS engine is called a voice.</span></span> <span data-ttu-id="9e39d-311">Para obter informações sobre o qual as vozes são instaladas para uma cultura específica, use o <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> método.</span><span class="sxs-lookup"><span data-stu-id="9e39d-311">To get information about which voices are installed for a specific culture, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method.</span></span>  
  
 <span data-ttu-id="9e39d-312">Microsoft Windows e a API de System. Speech aceitam todos os códigos de idioma-país válidos como valores para `culture`.</span><span class="sxs-lookup"><span data-stu-id="9e39d-312">Microsoft Windows and the System.Speech API accept all valid language-country codes as values for `culture`.</span></span> <span data-ttu-id="9e39d-313">Os mecanismos TTS que acompanham o Windows 7 suportam os seguintes códigos de idioma-país:</span><span class="sxs-lookup"><span data-stu-id="9e39d-313">The TTS engines that shipped with Windows 7 support the following language-country codes:</span></span>  
  
-   <span data-ttu-id="9e39d-314">en-US.</span><span class="sxs-lookup"><span data-stu-id="9e39d-314">en-US.</span></span> <span data-ttu-id="9e39d-315">Inglês (Estados Unidos)</span><span class="sxs-lookup"><span data-stu-id="9e39d-315">English (United States)</span></span>  
  
-   <span data-ttu-id="9e39d-316">zh-CN.</span><span class="sxs-lookup"><span data-stu-id="9e39d-316">zh-CN.</span></span> <span data-ttu-id="9e39d-317">Chinês (China)</span><span class="sxs-lookup"><span data-stu-id="9e39d-317">Chinese (China)</span></span>  
  
-   <span data-ttu-id="9e39d-318">zh-TW.</span><span class="sxs-lookup"><span data-stu-id="9e39d-318">zh-TW.</span></span> <span data-ttu-id="9e39d-319">Chinês (Taiwan)</span><span class="sxs-lookup"><span data-stu-id="9e39d-319">Chinese (Taiwan)</span></span>  
  
 <span data-ttu-id="9e39d-320">Códigos de idioma de duas letras, como "en" também são permitidos.</span><span class="sxs-lookup"><span data-stu-id="9e39d-320">Two-letter language codes such as "en" are also permitted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="StartSentence">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9e39d-321">Especifica o início de uma frase no objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" /> e, opcionalmente, especifica um idioma.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-321">Specifies the start of a sentence in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object, and optionally specifies a language.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e39d-322">Prompts longo podem ser renderizados mais parecido com fala humana se eles são divididos em frases e parágrafos.</span><span class="sxs-lookup"><span data-stu-id="9e39d-322">Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="StartSentence">
      <MemberSignature Language="C#" Value="public void StartSentence ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartSentence() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartSentence" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartSentence ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartSentence();" />
      <MemberSignature Language="F#" Value="member this.StartSentence : unit -&gt; unit" Usage="promptBuilder.StartSentence " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9e39d-323">Especifica o início de uma frase no objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-323">Specifies the start of a sentence in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e39d-324">Prompts longo podem ser renderizados mais parecido com fala humana se eles são divididos em frases e parágrafos.</span><span class="sxs-lookup"><span data-stu-id="9e39d-324">Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e39d-325">O exemplo a seguir cria um <xref:System.Speech.Synthesis.PromptBuilder> objeto, acrescenta o conteúdo e organiza o conteúdo em parágrafos e frases.</span><span class="sxs-lookup"><span data-stu-id="9e39d-325">The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object, appends content, and organizes the content into paragraphs and sentences.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and add content as paragraphs and sentences.  
        PromptBuilder parSent = new PromptBuilder();  
        parSent.StartParagraph();  
        parSent.StartSentence();  
        parSent.AppendText("Introducing the sentence element.");  
        parSent.EndSentence();  
        parSent.StartSentence();  
        parSent.AppendText("You can use it to mark individual sentences.");  
        parSent.EndSentence();  
        parSent.EndParagraph();  
        parSent.StartParagraph();  
        parSent.AppendText("Another simple paragraph. Sentence structure in this paragraph" +  
          "is not explicitly marked.");  
        parSent.EndParagraph();  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(parSent);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartSentence">
      <MemberSignature Language="C#" Value="public void StartSentence (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartSentence(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartSentence(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartSentence (culture As CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartSentence(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.StartSentence : System.Globalization.CultureInfo -&gt; unit" Usage="promptBuilder.StartSentence culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture">
          <span data-ttu-id="9e39d-326">Fornece informações sobre uma cultura específica, como o idioma, o nome da cultura, o sistema de escrita, o calendário usado e como formatar datas e classificar cadeias de caracteres.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-326">Provides information about a specific culture, such as the language, the name of the culture, the writing system, the calendar used, and how to format dates and sort strings.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9e39d-327">Especifica o início de uma frase na cultura especificada no objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-327">Specifies the start of a sentence in the specified culture in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e39d-328">Prompts longo podem ser renderizados mais parecido com fala humana se eles são divididos em frases e parágrafos.</span><span class="sxs-lookup"><span data-stu-id="9e39d-328">Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.</span></span>  
  
 <span data-ttu-id="9e39d-329">O `culture` parâmetro para uma frase pode ser diferente a `culture` parâmetro para o parágrafo que contém a frase ou o <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> propriedade do <xref:System.Speech.Synthesis.PromptBuilder> objeto que os contém.</span><span class="sxs-lookup"><span data-stu-id="9e39d-329">The `culture` parameter for a sentence can be different than the `culture` parameter for the paragraph that contains the sentence or the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property of the <xref:System.Speech.Synthesis.PromptBuilder> object that contains them.</span></span>  
  
 <span data-ttu-id="9e39d-330">Na verdade, enquanto o valor da `culture` parâmetro substituirá o <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> propriedade e o `culture` parâmetro para o parágrafo que contém a frase.</span><span class="sxs-lookup"><span data-stu-id="9e39d-330">While in effect, the value of the `culture` parameter will override the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property and the `culture` parameter for the paragraph that contains the sentence.</span></span> <span data-ttu-id="9e39d-331">O <xref:System.Speech.Synthesis.SpeechSynthesizer> tenta selecionar uma voz instalada que dá suporte ao idioma especificado pela `culture` parâmetro fale a frase.</span><span class="sxs-lookup"><span data-stu-id="9e39d-331">The <xref:System.Speech.Synthesis.SpeechSynthesizer> will attempt to select an installed voice that supports the language specified by the `culture` parameter to speak the sentence.</span></span> <span data-ttu-id="9e39d-332">Se uma voz com a cultura especificada for encontrada, ele será usado.</span><span class="sxs-lookup"><span data-stu-id="9e39d-332">If a voice with the specified culture is found, it will be used.</span></span> <span data-ttu-id="9e39d-333">Se não for encontrada uma voz com a cultura especificada, a voz padrão será usada.</span><span class="sxs-lookup"><span data-stu-id="9e39d-333">If a voice with the specified culture cannot be found, the default voice will be used.</span></span> <span data-ttu-id="9e39d-334">Para parar de usar a voz especificada por <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A>, chame <xref:System.Speech.Synthesis.PromptBuilder.EndSentence%2A>.</span><span class="sxs-lookup"><span data-stu-id="9e39d-334">To stop using the voice specified by <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A>, call <xref:System.Speech.Synthesis.PromptBuilder.EndSentence%2A>.</span></span>  
  
 <span data-ttu-id="9e39d-335">A pronunciar corretamente palavras no idioma especificado pelo `culture` parâmetro, um mecanismo de síntese (fala ou TTS) de fala que ofereça suporte o idioma deve ser instalado.</span><span class="sxs-lookup"><span data-stu-id="9e39d-335">To correctly pronounce words in the language specified by the `culture` parameter, a speech synthesis (text-to-speech or TTS) engine that supports the language must be installed.</span></span> <span data-ttu-id="9e39d-336">Um mecanismo de TTS instalado é chamado uma voz.</span><span class="sxs-lookup"><span data-stu-id="9e39d-336">An installed TTS engine is called a voice.</span></span> <span data-ttu-id="9e39d-337">Para obter informações sobre o qual as vozes são instaladas para uma cultura específica, use o <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> método.</span><span class="sxs-lookup"><span data-stu-id="9e39d-337">To get information about which voices are installed for a specific culture, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method.</span></span>  
  
 <span data-ttu-id="9e39d-338">Microsoft Windows e a API de System. Speech aceitam todos os códigos de idioma-país válidos como valores para `culture`.</span><span class="sxs-lookup"><span data-stu-id="9e39d-338">Microsoft Windows and the System.Speech API accept all valid language-country codes as values for `culture`.</span></span> <span data-ttu-id="9e39d-339">Os mecanismos TTS que acompanham o Windows 7 suportam os seguintes códigos de idioma-país:</span><span class="sxs-lookup"><span data-stu-id="9e39d-339">The TTS engines that shipped with Windows 7 support the following language-country codes:</span></span>  
  
-   <span data-ttu-id="9e39d-340">en-US.</span><span class="sxs-lookup"><span data-stu-id="9e39d-340">en-US.</span></span> <span data-ttu-id="9e39d-341">Inglês (Estados Unidos)</span><span class="sxs-lookup"><span data-stu-id="9e39d-341">English (United States)</span></span>  
  
-   <span data-ttu-id="9e39d-342">zh-CN.</span><span class="sxs-lookup"><span data-stu-id="9e39d-342">zh-CN.</span></span> <span data-ttu-id="9e39d-343">Chinês (China)</span><span class="sxs-lookup"><span data-stu-id="9e39d-343">Chinese (China)</span></span>  
  
-   <span data-ttu-id="9e39d-344">zh-TW.</span><span class="sxs-lookup"><span data-stu-id="9e39d-344">zh-TW.</span></span> <span data-ttu-id="9e39d-345">Chinês (Taiwan)</span><span class="sxs-lookup"><span data-stu-id="9e39d-345">Chinese (Taiwan)</span></span>  
  
 <span data-ttu-id="9e39d-346">Códigos de idioma de duas letras, como "en" também são permitidos.</span><span class="sxs-lookup"><span data-stu-id="9e39d-346">Two-letter language codes such as "en" are also permitted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartStyle">
      <MemberSignature Language="C#" Value="public void StartStyle (System.Speech.Synthesis.PromptStyle style);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartStyle(class System.Speech.Synthesis.PromptStyle style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartStyle(System.Speech.Synthesis.PromptStyle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartStyle (style As PromptStyle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartStyle(System::Speech::Synthesis::PromptStyle ^ style);" />
      <MemberSignature Language="F#" Value="member this.StartStyle : System.Speech.Synthesis.PromptStyle -&gt; unit" Usage="promptBuilder.StartStyle style" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Speech.Synthesis.PromptStyle" />
      </Parameters>
      <Docs>
        <param name="style">
          <span data-ttu-id="9e39d-347">O estilo para iniciar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-347">The style to start.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9e39d-348">Especifica o início de um estilo no objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-348">Specifies the start of a style in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e39d-349">O <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> leva um <xref:System.Speech.Synthesis.PromptStyle> objeto como seu argumento.</span><span class="sxs-lookup"><span data-stu-id="9e39d-349">The <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> method takes a <xref:System.Speech.Synthesis.PromptStyle> object as its argument.</span></span> <span data-ttu-id="9e39d-350">Você pode usar as propriedades do <xref:System.Speech.Synthesis.PromptStyle> objeto para definir a ênfase, taxa e volume (intensidade) para aplicar a fala enquanto o estilo estiver em vigor de saída de fala.</span><span class="sxs-lookup"><span data-stu-id="9e39d-350">You can use the properties of the <xref:System.Speech.Synthesis.PromptStyle> object to set the emphasis, speaking rate, and volume (loudness) to apply to speech output while the style is in effect.</span></span> <span data-ttu-id="9e39d-351">Para parar de usar o estilo atual, chame o <xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A> método.</span><span class="sxs-lookup"><span data-stu-id="9e39d-351">To stop using the current style, call the <xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A> method.</span></span>  
  
> [!NOTE]
>  -   <span data-ttu-id="9e39d-352">Os mecanismos de síntese de fala no Windows não suportam o parâmetro de ênfase no momento.</span><span class="sxs-lookup"><span data-stu-id="9e39d-352">The speech synthesis engines in Windows do not support the emphasis parameter at this time.</span></span> <span data-ttu-id="9e39d-353">Definir valores para o parâmetro de ênfase não produzirá nenhuma alteração audível na saída de voz sintetizada.</span><span class="sxs-lookup"><span data-stu-id="9e39d-353">Setting values for the emphasis parameter will produce no audible change in the synthesized speech output.</span></span>  
> -   <span data-ttu-id="9e39d-354">O <xref:System.Speech.Synthesis.PromptVolume.Default> definindo para <xref:System.Speech.Synthesis.PromptVolume> é um volume completo, que é o mesmo como <xref:System.Speech.Synthesis.PromptVolume.ExtraLoud>.</span><span class="sxs-lookup"><span data-stu-id="9e39d-354">The <xref:System.Speech.Synthesis.PromptVolume.Default> setting for <xref:System.Speech.Synthesis.PromptVolume> is full volume, which is the same as <xref:System.Speech.Synthesis.PromptVolume.ExtraLoud>.</span></span> <span data-ttu-id="9e39d-355">As outras configurações diminuir o volume de saída de fala em relação ao volume completo.</span><span class="sxs-lookup"><span data-stu-id="9e39d-355">The other settings decrease the volume of speech output relative to full volume.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e39d-356">O exemplo a seguir cria um <xref:System.Speech.Synthesis.PromptBuilder> do objeto e acrescenta cadeias de caracteres de texto.</span><span class="sxs-lookup"><span data-stu-id="9e39d-356">The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends text strings.</span></span> <span data-ttu-id="9e39d-357">O exemplo usa o <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> método para especificar um falando lenta de taxa para a cadeia de caracteres que está sendo adicionada, que enumera o conteúdo de um pedido.</span><span class="sxs-lookup"><span data-stu-id="9e39d-357">The example uses the <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> method to specify a slow speaking rate for the string being added, which enumerates the contents of an order.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and add content.  
        PromptBuilder style = new PromptBuilder();  
        style.AppendText("Your order for");  
        style.StartStyle(new PromptStyle(PromptRate.Slow));  
        style.AppendText("one kitchen sink and one faucet");  
        style.EndStyle();  
        style.AppendText("has been confirmed.");  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(style);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="StartVoice">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9e39d-358">Instrui o sintetizador para alterar a voz em um objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-358">Instructs the synthesizer to change the voice in a <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e39d-359">Uma voz representa um mecanismo de TTS instalado.</span><span class="sxs-lookup"><span data-stu-id="9e39d-359">A voice represents an installed TTS engine.</span></span> <span data-ttu-id="9e39d-360">Use o <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> métodos e <xref:System.Speech.Synthesis.VoiceInfo> instalado de classe para obter os nomes e os atributos de vozes de texto em fala (TTS) que você pode selecionar.</span><span class="sxs-lookup"><span data-stu-id="9e39d-360">Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names and attributes of installed text-to-speech (TTS) voices that you can select.</span></span>  
  
 <span data-ttu-id="9e39d-361">Quando um aplicativo chama <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, o método verifica que cada uma das vozes encontra no registro atende a determinados critérios mínimos.</span><span class="sxs-lookup"><span data-stu-id="9e39d-361">When an application calls <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, the method verifies that each of the voices it finds in the registry meets certain minimum criteria.</span></span> <span data-ttu-id="9e39d-362">Para qualquer que falha na verificação, voz <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> define seu <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> propriedade `False`.</span><span class="sxs-lookup"><span data-stu-id="9e39d-362">For any voice that fails verification, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> sets its <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property to `False`.</span></span> <span data-ttu-id="9e39d-363">Um aplicativo não pode chamar qualquer uma da <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> métodos em uma voz cujos <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> é de propriedade `False`.</span><span class="sxs-lookup"><span data-stu-id="9e39d-363">An application cannot call any of the <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> methods on a voice whose <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property is `False`.</span></span> <span data-ttu-id="9e39d-364">Normalmente, aplicativos não definirá uma voz <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="9e39d-364">Typically, applications will not set a voice’s <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="StartVoice">
      <MemberSignature Language="C#" Value="public void StartVoice (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartVoice(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartVoice(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartVoice (culture As CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartVoice(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.StartVoice : System.Globalization.CultureInfo -&gt; unit" Usage="promptBuilder.StartVoice culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture">
          <span data-ttu-id="9e39d-365">Fornece informações sobre uma cultura específica, como o idioma, o nome da cultura, o sistema de escrita, o calendário usado e como formatar datas e classificar cadeias de caracteres.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-365">Provides information about a specific culture, such as the language, the name of the culture, the writing system, the calendar used, and how to format dates and sort strings.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9e39d-366">Instrui o sintetizador a alterar a voz no objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" /> e especifica a cultura da voz a ser usada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-366">Instructs the synthesizer to change the voice in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the culture of the voice to use.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e39d-367">O `culture` parâmetro para <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> pode ser diferente de <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> propriedade do <xref:System.Speech.Synthesis.PromptBuilder> objeto que o contém.</span><span class="sxs-lookup"><span data-stu-id="9e39d-367">The `culture` parameter for <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> can be different than the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property of the <xref:System.Speech.Synthesis.PromptBuilder> object that contains it.</span></span>  <span data-ttu-id="9e39d-368">Na verdade, enquanto o valor da `culture` parâmetro substituirá o <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="9e39d-368">While in effect, the value of the `culture` parameter will override the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property.</span></span> <span data-ttu-id="9e39d-369">O <xref:System.Speech.Synthesis.SpeechSynthesizer> tenta selecionar uma voz instalada que dá suporte ao idioma especificado pela `culture` parâmetro falar o conteúdo circundado pelo <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> e <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span><span class="sxs-lookup"><span data-stu-id="9e39d-369">The <xref:System.Speech.Synthesis.SpeechSynthesizer> will attempt to select an installed voice that supports the language specified by the `culture` parameter to speak the content enclosed by <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> and <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span></span> <span data-ttu-id="9e39d-370">Se uma voz com a cultura especificada for encontrada, ele será usado.</span><span class="sxs-lookup"><span data-stu-id="9e39d-370">If a voice with the specified culture is found, it will be used.</span></span> <span data-ttu-id="9e39d-371">Se não for encontrada uma voz com a cultura especificada, a voz padrão será usada.</span><span class="sxs-lookup"><span data-stu-id="9e39d-371">If a voice with the specified culture cannot be found, the default voice will be used.</span></span> <span data-ttu-id="9e39d-372">Para parar de usar a voz especificada por <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>, chame <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span><span class="sxs-lookup"><span data-stu-id="9e39d-372">To stop using the voice specified by <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>, call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span></span>  
  
 <span data-ttu-id="9e39d-373">A pronunciar corretamente palavras no idioma especificado pelo `culture` parâmetro, um mecanismo de síntese (fala ou TTS) de fala que ofereça suporte o idioma deve ser instalado.</span><span class="sxs-lookup"><span data-stu-id="9e39d-373">To correctly pronounce words in the language specified by the `culture` parameter, a speech synthesis (text-to-speech or TTS) engine that supports the language must be installed.</span></span> <span data-ttu-id="9e39d-374">Um mecanismo de TTS instalado é chamado uma voz.</span><span class="sxs-lookup"><span data-stu-id="9e39d-374">An installed TTS engine is called a voice.</span></span> <span data-ttu-id="9e39d-375">Para obter informações sobre o qual as vozes são instaladas para uma cultura específica, use o <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> método.</span><span class="sxs-lookup"><span data-stu-id="9e39d-375">To get information about which voices are installed for a specific culture, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method.</span></span>  
  
 <span data-ttu-id="9e39d-376">Microsoft Windows e a API de System. Speech aceitam todos os códigos de idioma-país válidos como valores para `culture`.</span><span class="sxs-lookup"><span data-stu-id="9e39d-376">Microsoft Windows and the System.Speech API accept all valid language-country codes as values for `culture`.</span></span> <span data-ttu-id="9e39d-377">Os mecanismos TTS que acompanham o Windows 7 suportam os seguintes códigos de idioma-país:</span><span class="sxs-lookup"><span data-stu-id="9e39d-377">The TTS engines that shipped with Windows 7 support the following language-country codes:</span></span>  
  
-   <span data-ttu-id="9e39d-378">en-US.</span><span class="sxs-lookup"><span data-stu-id="9e39d-378">en-US.</span></span> <span data-ttu-id="9e39d-379">Inglês (Estados Unidos)</span><span class="sxs-lookup"><span data-stu-id="9e39d-379">English (United States)</span></span>  
  
-   <span data-ttu-id="9e39d-380">zh-CN.</span><span class="sxs-lookup"><span data-stu-id="9e39d-380">zh-CN.</span></span> <span data-ttu-id="9e39d-381">Chinês (China)</span><span class="sxs-lookup"><span data-stu-id="9e39d-381">Chinese (China)</span></span>  
  
-   <span data-ttu-id="9e39d-382">zh-TW.</span><span class="sxs-lookup"><span data-stu-id="9e39d-382">zh-TW.</span></span> <span data-ttu-id="9e39d-383">Chinês (Taiwan)</span><span class="sxs-lookup"><span data-stu-id="9e39d-383">Chinese (Taiwan)</span></span>  
  
 <span data-ttu-id="9e39d-384">Códigos de idioma de duas letras, como "en" também são permitidos.</span><span class="sxs-lookup"><span data-stu-id="9e39d-384">Two-letter language codes such as "en" are also permitted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartVoice">
      <MemberSignature Language="C#" Value="public void StartVoice (System.Speech.Synthesis.VoiceGender gender);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartVoice(valuetype System.Speech.Synthesis.VoiceGender gender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartVoice (gender As VoiceGender)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartVoice(System::Speech::Synthesis::VoiceGender gender);" />
      <MemberSignature Language="F#" Value="member this.StartVoice : System.Speech.Synthesis.VoiceGender -&gt; unit" Usage="promptBuilder.StartVoice gender" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gender" Type="System.Speech.Synthesis.VoiceGender" />
      </Parameters>
      <Docs>
        <param name="gender">
          <span data-ttu-id="9e39d-385">O gênero da voz a ser usada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-385">The gender of the voice to use.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9e39d-386">Instrui o sintetizador a alterar a voz no objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" /> e especifica o gênero da voz a ser usada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-386">Instructs the synthesizer to change the voice in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the gender of the voice to use.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e39d-387">Use o <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> métodos e <xref:System.Speech.Synthesis.VoiceInfo> instalado de classe para obter os nomes e os atributos de vozes de texto em fala (TTS) que você pode selecionar.</span><span class="sxs-lookup"><span data-stu-id="9e39d-387">Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names and attributes of installed text-to-speech (TTS) voices that you can select.</span></span>  
  
 <span data-ttu-id="9e39d-388">Para parar de usar a voz especificada por <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> chamar <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span><span class="sxs-lookup"><span data-stu-id="9e39d-388">To stop using the voice specified by <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartVoice">
      <MemberSignature Language="C#" Value="public void StartVoice (System.Speech.Synthesis.VoiceInfo voice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartVoice(class System.Speech.Synthesis.VoiceInfo voice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartVoice (voice As VoiceInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartVoice(System::Speech::Synthesis::VoiceInfo ^ voice);" />
      <MemberSignature Language="F#" Value="member this.StartVoice : System.Speech.Synthesis.VoiceInfo -&gt; unit" Usage="promptBuilder.StartVoice voice" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="voice" Type="System.Speech.Synthesis.VoiceInfo" />
      </Parameters>
      <Docs>
        <param name="voice">
          <span data-ttu-id="9e39d-389">Os critérios da voz a ser usada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-389">The criteria for the voice to use.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9e39d-390">Instrui o sintetizador a alterar a voz no objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" /> e especifica os critérios da voz a ser usada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-390">Instructs the synthesizer to change the voice in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies criteria for the new voice.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e39d-391">Use o <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> métodos e <xref:System.Speech.Synthesis.VoiceInfo> instalado de classe para obter os nomes e os atributos de vozes de texto em fala (TTS) que você pode selecionar.</span><span class="sxs-lookup"><span data-stu-id="9e39d-391">Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names and attributes of installed text-to-speech (TTS) voices that you can select.</span></span>  
  
 <span data-ttu-id="9e39d-392">Para parar de usar a voz especificada por <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> chamar <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span><span class="sxs-lookup"><span data-stu-id="9e39d-392">To stop using the voice specified by <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartVoice">
      <MemberSignature Language="C#" Value="public void StartVoice (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartVoice(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartVoice(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartVoice (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartVoice(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.StartVoice : string -&gt; unit" Usage="promptBuilder.StartVoice name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="9e39d-393">O nome da voz a ser usada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-393">The name of the voice to use.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9e39d-394">Instrui o sintetizador a alterar a voz no objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" /> e especifica o nome da voz a ser usada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-394">Instructs the synthesizer to change the voice in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the name of the voice to use.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e39d-395">Para obter informações sobre o qual as vozes são instaladas, use um do <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="9e39d-395">To get information about which voices are installed, use one of the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods.</span></span>  
  
 <span data-ttu-id="9e39d-396">Para parar de usar a voz especificada por <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> chamar <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span><span class="sxs-lookup"><span data-stu-id="9e39d-396">To stop using the voice specified by <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartVoice">
      <MemberSignature Language="C#" Value="public void StartVoice (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartVoice(valuetype System.Speech.Synthesis.VoiceGender gender, valuetype System.Speech.Synthesis.VoiceAge age) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartVoice (gender As VoiceGender, age As VoiceAge)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartVoice(System::Speech::Synthesis::VoiceGender gender, System::Speech::Synthesis::VoiceAge age);" />
      <MemberSignature Language="F#" Value="member this.StartVoice : System.Speech.Synthesis.VoiceGender * System.Speech.Synthesis.VoiceAge -&gt; unit" Usage="promptBuilder.StartVoice (gender, age)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gender" Type="System.Speech.Synthesis.VoiceGender" />
        <Parameter Name="age" Type="System.Speech.Synthesis.VoiceAge" />
      </Parameters>
      <Docs>
        <param name="gender">
          <span data-ttu-id="9e39d-397">O gênero da nova voz a ser usada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-397">The gender of the new voice to use.</span>
          </span>
        </param>
        <param name="age">
          <span data-ttu-id="9e39d-398">A idade da voz a ser usada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-398">The age of the voice to use.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9e39d-399">Instrui o sintetizador a alterar a voz no objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" /> e especifica o gênero e a idade da nova voz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-399">Instructs the synthesizer to change the voice in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the gender and the age of the new voice.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e39d-400">Use o <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> métodos e <xref:System.Speech.Synthesis.VoiceInfo> instalado de classe para obter os nomes e os atributos de vozes de texto em fala (TTS) que você pode selecionar.</span><span class="sxs-lookup"><span data-stu-id="9e39d-400">Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names and attributes of installed text-to-speech (TTS) voices that you can select.</span></span>  
  
 <span data-ttu-id="9e39d-401">Para parar de usar a voz especificada por <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> chamar <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span><span class="sxs-lookup"><span data-stu-id="9e39d-401">To stop using the voice specified by <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartVoice">
      <MemberSignature Language="C#" Value="public void StartVoice (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age, int voiceAlternate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartVoice(valuetype System.Speech.Synthesis.VoiceGender gender, valuetype System.Speech.Synthesis.VoiceAge age, int32 voiceAlternate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartVoice (gender As VoiceGender, age As VoiceAge, voiceAlternate As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartVoice(System::Speech::Synthesis::VoiceGender gender, System::Speech::Synthesis::VoiceAge age, int voiceAlternate);" />
      <MemberSignature Language="F#" Value="member this.StartVoice : System.Speech.Synthesis.VoiceGender * System.Speech.Synthesis.VoiceAge * int -&gt; unit" Usage="promptBuilder.StartVoice (gender, age, voiceAlternate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gender" Type="System.Speech.Synthesis.VoiceGender" />
        <Parameter Name="age" Type="System.Speech.Synthesis.VoiceAge" />
        <Parameter Name="voiceAlternate" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="gender">
          <span data-ttu-id="9e39d-402">O gênero da voz a ser usada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-402">The gender of the voice to use.</span>
          </span>
        </param>
        <param name="age">
          <span data-ttu-id="9e39d-403">A idade da voz a ser usada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-403">The age of the voice to use.</span>
          </span>
        </param>
        <param name="voiceAlternate">
          <span data-ttu-id="9e39d-404">Um inteiro que especifica uma voz preferencial quando mais de uma voz corresponde aos parâmetros de <c>gênero</c> e <c>idade</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-404">An integer that specifies a preferred voice when more than one voice matches the <c>gender</c> and <c>age</c> parameters.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9e39d-405">Instrui o sintetizador a alterar a voz no objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" /> e especifica seu gênero, idade e uma voz preferencial que corresponde à idade e ao gênero especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-405">Instructs the synthesizer to change the voice in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies its gender, age, and a preferred voice that matches the specified gender and age.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e39d-406">Um mecanismo de síntese de fala conta as correspondências encontradas para os parâmetros especificados e retorna a voz quando a contagem for igual a `voiceAlternate` parâmetro.</span><span class="sxs-lookup"><span data-stu-id="9e39d-406">A speech synthesis engine counts the matches it finds for the specified parameters, and returns the voice when the count equals the `voiceAlternate` parameter.</span></span>  
  
 <span data-ttu-id="9e39d-407">Use o <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> métodos e <xref:System.Speech.Synthesis.VoiceInfo> instalado de classe para obter os nomes e os atributos de vozes de texto em fala (TTS) que você pode selecionar.</span><span class="sxs-lookup"><span data-stu-id="9e39d-407">Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names and attributes of installed text-to-speech (TTS) voices that you can select.</span></span>  
  
 <span data-ttu-id="9e39d-408">Para parar de usar a voz especificada por <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> chamar <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span><span class="sxs-lookup"><span data-stu-id="9e39d-408">To stop using the voice specified by <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge)" />
      </Docs>
    </Member>
    <Member MemberName="ToXml">
      <MemberSignature Language="C#" Value="public string ToXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.ToXml" />
      <MemberSignature Language="VB.NET" Value="Public Function ToXml () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToXml();" />
      <MemberSignature Language="F#" Value="member this.ToXml : unit -&gt; string" Usage="promptBuilder.ToXml " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9e39d-409">Retorna o SSML gerado com base no objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-409">Returns the SSML generated from the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9e39d-410">Retorna o SSML gerado com base no objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" /> como uma única linha.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9e39d-410">Returns the SSML generated from the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object as a single line.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e39d-411">O <xref:System.Speech.Synthesis.PromptBuilder.ToXml%2A> método não faz nenhuma tentativa de formatar o SSML retornado de qualquer forma.</span><span class="sxs-lookup"><span data-stu-id="9e39d-411">The <xref:System.Speech.Synthesis.PromptBuilder.ToXml%2A> method makes no attempt to format the returned SSML in any way.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e39d-412">O exemplo a seguir cria um <xref:System.Speech.Synthesis.PromptBuilder> objeto, acrescenta o texto e grava o equivalente SSML do prompt de para o console antes de falar o conteúdo da solicitação de.</span><span class="sxs-lookup"><span data-stu-id="9e39d-412">The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object, appends text, and then writes the SSML equivalent of the prompt to the console before speaking the contents of the prompt.</span></span>  
  
```csharp  
  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and add content.  
        PromptBuilder style = new PromptBuilder();  
        style.AppendText("Your order for");  
        style.StartStyle(new PromptStyle(PromptRate.Slow));  
        style.AppendText("one kitchen sink and one faucet");  
        style.EndStyle();  
        style.AppendText("has been confirmed.");  
  
        // Write the contents of the PromptBuilder object to the console as  
        // an SSML-compatible XML file.  
        string myXml = style.ToXml();  
        Console.WriteLine("This is the SSML equivalent of the PromptBuilder: \n\n" + myXml);  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(style);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>