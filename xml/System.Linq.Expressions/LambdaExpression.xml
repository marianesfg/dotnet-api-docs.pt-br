<Type Name="LambdaExpression" FullName="System.Linq.Expressions.LambdaExpression">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d8b722c20d33383537791903a1600c6041db3c6f" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37757358" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class LambdaExpression : System.Linq.Expressions.Expression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit LambdaExpression extends System.Linq.Expressions.Expression" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Expressions.LambdaExpression" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class LambdaExpression&#xA;Inherits Expression" />
  <TypeSignature Language="C++ CLI" Value="public ref class LambdaExpression abstract : System::Linq::Expressions::Expression" />
  <TypeSignature Language="F#" Value="type LambdaExpression = class&#xA;    inherit Expression" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Linq.Expressions.Expression</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Linq.Expressions.Expression/LambdaExpressionProxy))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="a4b07-101">Descreve uma expressão lambda.</span>
      <span class="sxs-lookup">
        <span data-stu-id="a4b07-101">Describes a lambda expression.</span>
      </span>
      <span data-ttu-id="a4b07-102">Isso captura um bloco de código semelhante a um corpo de método do .NET.</span>
      <span class="sxs-lookup">
        <span data-stu-id="a4b07-102">This captures a block of code that is similar to a .NET method body.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a4b07-103">O <xref:System.Linq.Expressions.LambdaExpression> tipo representa uma expressão lambda na forma de uma árvore de expressão.</span><span class="sxs-lookup"><span data-stu-id="a4b07-103">The <xref:System.Linq.Expressions.LambdaExpression> type represents a lambda expression in the form of an expression tree.</span></span> <span data-ttu-id="a4b07-104">O <xref:System.Linq.Expressions.Expression%601> tipo, que deriva de <xref:System.Linq.Expressions.LambdaExpression> e o tipo da expressão lambda mais explicitamente, também podem ser usado para representar uma expressão lambda de captura.</span><span class="sxs-lookup"><span data-stu-id="a4b07-104">The <xref:System.Linq.Expressions.Expression%601> type, which derives from <xref:System.Linq.Expressions.LambdaExpression> and captures the type of the lambda expression more explicitly, can also be used to represent a lambda expression.</span></span> <span data-ttu-id="a4b07-105">Em tempo de execução, um nó de árvore de expressão que representa uma expressão lambda é sempre do tipo <xref:System.Linq.Expressions.Expression%601>.</span><span class="sxs-lookup"><span data-stu-id="a4b07-105">At runtime, an expression tree node that represents a lambda expression is always of type <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a4b07-106">O valor da <xref:System.Linq.Expressions.Expression.NodeType%2A> propriedade de um <xref:System.Linq.Expressions.LambdaExpression> é <xref:System.Linq.Expressions.ExpressionType.Lambda>.</span><span class="sxs-lookup"><span data-stu-id="a4b07-106">The value of the <xref:System.Linq.Expressions.Expression.NodeType%2A> property of a <xref:System.Linq.Expressions.LambdaExpression> is <xref:System.Linq.Expressions.ExpressionType.Lambda>.</span></span>  
  
 <span data-ttu-id="a4b07-107">Use o <xref:System.Linq.Expressions.Expression.Lambda%2A> métodos de fábrica para criar um <xref:System.Linq.Expressions.LambdaExpression> objeto.</span><span class="sxs-lookup"><span data-stu-id="a4b07-107">Use the <xref:System.Linq.Expressions.Expression.Lambda%2A> factory methods to create a <xref:System.Linq.Expressions.LambdaExpression> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a4b07-108">O exemplo a seguir demonstra como criar uma expressão que representa uma expressão lambda que adiciona 1 para o argumento passado usando o <xref:System.Linq.Expressions.Expression.Lambda%2A> método.</span><span class="sxs-lookup"><span data-stu-id="a4b07-108">The following example demonstrates how to create an expression that represents a lambda expression that adds 1 to the passed argument by using the <xref:System.Linq.Expressions.Expression.Lambda%2A> method.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#42](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#42)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#42](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#42)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Body">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression Body { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.Expression Body" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.LambdaExpression.Body" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Body As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Linq::Expressions::Expression ^ Body { System::Linq::Expressions::Expression ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Body : System.Linq.Expressions.Expression" Usage="System.Linq.Expressions.LambdaExpression.Body" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a4b07-109">Obtém o corpo da expressão lambda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a4b07-109">Gets the body of the lambda expression.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a4b07-110">Um <see cref="T:System.Linq.Expressions.Expression" /> que representa o corpo da expressão lambda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a4b07-110">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the body of the lambda expression.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Compile">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="a4b07-111">Produz um delegado que representa a expressão lambda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a4b07-111">Produces a delegate that represents the lambda expression.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Compile">
      <MemberSignature Language="C#" Value="public Delegate Compile ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Delegate Compile() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.LambdaExpression.Compile" />
      <MemberSignature Language="VB.NET" Value="Public Function Compile () As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Delegate ^ Compile();" />
      <MemberSignature Language="F#" Value="member this.Compile : unit -&gt; Delegate" Usage="lambdaExpression.Compile " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a4b07-112">Produz um delegado que representa a expressão lambda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a4b07-112">Produces a delegate that represents the lambda expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a4b07-113">Um <see cref="T:System.Delegate" /> que contém a versão compilada da expressão lambda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a4b07-113">A <see cref="T:System.Delegate" /> that contains the compiled version of the lambda expression.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a4b07-114">O <xref:System.Linq.Expressions.LambdaExpression.Compile%2A> método pode ser usado para converter um <xref:System.Linq.Expressions.LambdaExpression> árvore de expressão para o delegado que ele representa.</span><span class="sxs-lookup"><span data-stu-id="a4b07-114">The <xref:System.Linq.Expressions.LambdaExpression.Compile%2A> method can be used to convert a <xref:System.Linq.Expressions.LambdaExpression> expression tree into the delegate that it represents.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Compile">
      <MemberSignature Language="C#" Value="public Delegate Compile (bool preferInterpretation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Delegate Compile(bool preferInterpretation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.LambdaExpression.Compile(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Compile (preferInterpretation As Boolean) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Delegate ^ Compile(bool preferInterpretation);" />
      <MemberSignature Language="F#" Value="member this.Compile : bool -&gt; Delegate" Usage="lambdaExpression.Compile preferInterpretation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="preferInterpretation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="preferInterpretation">
          <span data-ttu-id="a4b07-115">
            <see langword="true" /> para indicar que a expressão deverá ser compilada em um formato interpretado, se ele estiver disponível; <see langword="false" /> caso contrário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a4b07-115">
              <see langword="true" /> to indicate that the expression should be compiled to an interpreted form, if it's available; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a4b07-116">Produz um delegado interpretado ou compilado que representa a expressão lambda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a4b07-116">Produces an interpreted or compiled delegate that represents the lambda expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a4b07-117">Um delegado que representa a expressão lambda compilada descrita pelo objeto <see cref="T:System.Linq.Expressions.LambdaExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a4b07-117">A delegate that represents the compiled lambda expression described by the <see cref="T:System.Linq.Expressions.LambdaExpression" /> object.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Compile">
      <MemberSignature Language="C#" Value="public Delegate Compile (System.Runtime.CompilerServices.DebugInfoGenerator debugInfoGenerator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Delegate Compile(class System.Runtime.CompilerServices.DebugInfoGenerator debugInfoGenerator) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.LambdaExpression.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Delegate ^ Compile(System::Runtime::CompilerServices::DebugInfoGenerator ^ debugInfoGenerator);" />
      <MemberSignature Language="F#" Value="member this.Compile : System.Runtime.CompilerServices.DebugInfoGenerator -&gt; Delegate" Usage="lambdaExpression.Compile debugInfoGenerator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="debugInfoGenerator" Type="System.Runtime.CompilerServices.DebugInfoGenerator" />
      </Parameters>
      <Docs>
        <param name="debugInfoGenerator">
          <span data-ttu-id="a4b07-118">O gerador de informações de depuração usado pelo compilador para marcar pontos de sequência e anotar as variáveis locais.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a4b07-118">Debugging information generator used by the compiler to mark sequence points and annotate local variables.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a4b07-119">Produz um delegado que representa a expressão lambda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a4b07-119">Produces a delegate that represents the lambda expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a4b07-120">Um delegado que contém a versão compilada da expressão lambda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a4b07-120">A delegate containing the compiled version of the lambda.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CompileToMethod">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="a4b07-121">Compila o lambda em uma definição de método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a4b07-121">Compiles the lambda into a method definition.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompileToMethod">
      <MemberSignature Language="C#" Value="public void CompileToMethod (System.Reflection.Emit.MethodBuilder method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CompileToMethod(class System.Reflection.Emit.MethodBuilder method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.LambdaExpression.CompileToMethod(System.Reflection.Emit.MethodBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CompileToMethod (method As MethodBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CompileToMethod(System::Reflection::Emit::MethodBuilder ^ method);" />
      <MemberSignature Language="F#" Value="member this.CompileToMethod : System.Reflection.Emit.MethodBuilder -&gt; unit" Usage="lambdaExpression.CompileToMethod method" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.Emit.MethodBuilder" />
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="a4b07-122">Um <see cref="T:System.Reflection.Emit.MethodBuilder" /> que será usado para manter a nível de integridade de lambda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a4b07-122">A <see cref="T:System.Reflection.Emit.MethodBuilder" /> which will be used to hold the lambda's IL.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a4b07-123">Compila o lambda em uma definição de método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a4b07-123">Compiles the lambda into a method definition.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileToMethod">
      <MemberSignature Language="C#" Value="public void CompileToMethod (System.Reflection.Emit.MethodBuilder method, System.Runtime.CompilerServices.DebugInfoGenerator debugInfoGenerator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CompileToMethod(class System.Reflection.Emit.MethodBuilder method, class System.Runtime.CompilerServices.DebugInfoGenerator debugInfoGenerator) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.LambdaExpression.CompileToMethod(System.Reflection.Emit.MethodBuilder,System.Runtime.CompilerServices.DebugInfoGenerator)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CompileToMethod(System::Reflection::Emit::MethodBuilder ^ method, System::Runtime::CompilerServices::DebugInfoGenerator ^ debugInfoGenerator);" />
      <MemberSignature Language="F#" Value="member this.CompileToMethod : System.Reflection.Emit.MethodBuilder * System.Runtime.CompilerServices.DebugInfoGenerator -&gt; unit" Usage="lambdaExpression.CompileToMethod (method, debugInfoGenerator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.Emit.MethodBuilder" />
        <Parameter Name="debugInfoGenerator" Type="System.Runtime.CompilerServices.DebugInfoGenerator" />
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="a4b07-124">Um <see cref="T:System.Reflection.Emit.MethodBuilder" /> que será usado para manter a nível de integridade de lambda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a4b07-124">A <see cref="T:System.Reflection.Emit.MethodBuilder" /> which will be used to hold the lambda's IL.</span>
          </span>
        </param>
        <param name="debugInfoGenerator">
          <span data-ttu-id="a4b07-125">O gerador de informações de depuração usado pelo compilador para marcar pontos de sequência e anotar as variáveis locais.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a4b07-125">Debugging information generator used by the compiler to mark sequence points and annotate local variables.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a4b07-126">Compila o lambda em uma definição de método e as informações de depuração personalizada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a4b07-126">Compiles the lambda into a method definition and custom debug information.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.LambdaExpression.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Linq.Expressions.LambdaExpression.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a4b07-127">Obtém o nome da expressão lambda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a4b07-127">Gets the name of the lambda expression.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a4b07-128">O nome da expressão lambda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a4b07-128">The name of the lambda expression.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a4b07-129">Usado para depuração.</span><span class="sxs-lookup"><span data-stu-id="a4b07-129">Used for debugging.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public override sealed System.Linq.Expressions.ExpressionType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Linq.Expressions.ExpressionType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.LambdaExpression.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable ReadOnly Property NodeType As ExpressionType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Linq::Expressions::ExpressionType NodeType { System::Linq::Expressions::ExpressionType get(); };" />
      <MemberSignature Language="F#" Value="member this.NodeType : System.Linq.Expressions.ExpressionType" Usage="System.Linq.Expressions.LambdaExpression.NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a4b07-130">Retorna o tipo de nó deste <see cref="T:System.Linq.Expressions.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a4b07-130">Returns the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a4b07-131">O <see cref="T:System.Linq.Expressions.ExpressionType" /> que representa essa expressão.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a4b07-131">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that represents this expression.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parameters">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Linq.Expressions.ParameterExpression&gt; Parameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Linq.Expressions.ParameterExpression&gt; Parameters" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.LambdaExpression.Parameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parameters As ReadOnlyCollection(Of ParameterExpression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ Parameters { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parameters : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Linq.Expressions.ParameterExpression&gt;" Usage="System.Linq.Expressions.LambdaExpression.Parameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Linq.Expressions.ParameterExpression&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a4b07-132">Obtém os parâmetros da expressão lambda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a4b07-132">Gets the parameters of the lambda expression.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a4b07-133">Um <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> de objetos <see cref="T:System.Linq.Expressions.ParameterExpression" /> que representam os parâmetros da expressão lambda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a4b07-133">A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects that represent the parameters of the lambda expression.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnType">
      <MemberSignature Language="C#" Value="public Type ReturnType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReturnType" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.LambdaExpression.ReturnType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReturnType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ ReturnType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReturnType : Type" Usage="System.Linq.Expressions.LambdaExpression.ReturnType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a4b07-134">Obtém o tipo de retorno da expressão lambda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a4b07-134">Gets the return type of the lambda expression.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a4b07-135">O <see cref="T:System.Type" /> objeto que representa o tipo da expressão lambda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a4b07-135">The <see cref="T:System.Type" /> object representing the type of the lambda expression.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TailCall">
      <MemberSignature Language="C#" Value="public bool TailCall { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TailCall" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.LambdaExpression.TailCall" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TailCall As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TailCall { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.TailCall : bool" Usage="System.Linq.Expressions.LambdaExpression.TailCall" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a4b07-136">Obtém o valor que indica se a expressão lambda será compilada com a otimização de chamada tail.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a4b07-136">Gets the value that indicates if the lambda expression will be compiled with the tail call optimization.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a4b07-137">True se a expressão lambda será compilada com a otimização de chamada tail, caso contrário, false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a4b07-137">True if the lambda expression will be compiled with the tail call optimization, otherwise false.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public override sealed Type Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Type" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.LambdaExpression.Type" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable ReadOnly Property Type As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ Type { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Type : Type" Usage="System.Linq.Expressions.LambdaExpression.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a4b07-138">Obtém o tipo estático da expressão que esse <see cref="T:System.Linq.Expressions.Expression" /> representa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a4b07-138">Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a4b07-139">O <see cref="P:System.Linq.Expressions.LambdaExpression.Type" /> que representa o tipo estático da expressão.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a4b07-139">The <see cref="P:System.Linq.Expressions.LambdaExpression.Type" /> that represents the static type of the expression.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>