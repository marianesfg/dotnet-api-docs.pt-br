<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="LambdaExpression.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac506678ae260a607f724ddeef2eb2b7e55f15afead.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">06678ae260a607f724ddeef2eb2b7e55f15afead</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.LambdaExpression">
          <source>Describes a lambda expression.</source>
          <target state="translated">Descreve uma expressão lambda.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.LambdaExpression">
          <source>This captures a block of code that is similar to a .NET method body.</source>
          <target state="translated">Isso captura um bloco de código semelhante a um corpo de método do .NET.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.LambdaExpression">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.LambdaExpression&gt;</ph> type represents a lambda expression in the form of an expression tree.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Expressions.LambdaExpression&gt;</ph> tipo representa uma expressão lambda na forma de uma árvore de expressão.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.LambdaExpression">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> type, which derives from <ph id="ph2">&lt;xref:System.Linq.Expressions.LambdaExpression&gt;</ph> and captures the type of the lambda expression more explicitly, can also be used to represent a lambda expression.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> tipo, que deriva de <ph id="ph2">&lt;xref:System.Linq.Expressions.LambdaExpression&gt;</ph> e captura o tipo da expressão lambda mais explicitamente, também podem ser usado para representar uma expressão lambda.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.LambdaExpression">
          <source>At runtime, an expression tree node that represents a lambda expression is always of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Em tempo de execução, um nó de árvore de expressão que representa uma expressão lambda é sempre do tipo <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.LambdaExpression">
          <source>The value of the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt;</ph> property of a <ph id="ph2">&lt;xref:System.Linq.Expressions.LambdaExpression&gt;</ph> is <ph id="ph3">&lt;xref:System.Linq.Expressions.ExpressionType.Lambda&gt;</ph>.</source>
          <target state="translated">O valor de <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt;</ph> propriedade de um <ph id="ph2">&lt;xref:System.Linq.Expressions.LambdaExpression&gt;</ph> é <ph id="ph3">&lt;xref:System.Linq.Expressions.ExpressionType.Lambda&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.LambdaExpression">
          <source>Use the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Lambda%2A&gt;</ph> factory methods to create a <ph id="ph2">&lt;xref:System.Linq.Expressions.LambdaExpression&gt;</ph> object.</source>
          <target state="translated">Use o <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Lambda%2A&gt;</ph> métodos de fábrica para criar um <ph id="ph2">&lt;xref:System.Linq.Expressions.LambdaExpression&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.LambdaExpression">
          <source>The following example demonstrates how to create an expression that represents a lambda expression that adds 1 to the passed argument by using the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Lambda%2A&gt;</ph> method.</source>
          <target state="translated">O exemplo a seguir demonstra como criar uma expressão que representa uma expressão lambda que adiciona 1 para o argumento passado usando o <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Lambda%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.LambdaExpression.Body">
          <source>Gets the body of the lambda expression.</source>
          <target state="translated">Obtém o corpo da expressão lambda.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.LambdaExpression.Body">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> that represents the body of the lambda expression.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> que representa o corpo da expressão lambda.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.LambdaExpression">
          <source>Produces a delegate that represents the lambda expression.</source>
          <target state="translated">Produz um delegado que representa a expressão lambda.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.LambdaExpression.Compile">
          <source>Produces a delegate that represents the lambda expression.</source>
          <target state="translated">Produz um delegado que representa a expressão lambda.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.LambdaExpression.Compile">
          <source>A <ph id="ph1">&lt;see cref="T:System.Delegate" /&gt;</ph> that contains the compiled version of the lambda expression.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Delegate" /&gt;</ph> que contém a versão compilada da expressão lambda.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.LambdaExpression.Compile">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.LambdaExpression.Compile%2A&gt;</ph> method can be used to convert a <ph id="ph2">&lt;xref:System.Linq.Expressions.LambdaExpression&gt;</ph> expression tree into the delegate that it represents.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Expressions.LambdaExpression.Compile%2A&gt;</ph> método pode ser usado para converter um <ph id="ph2">&lt;xref:System.Linq.Expressions.LambdaExpression&gt;</ph> árvore de expressão para o delegado que ele representa.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.LambdaExpression.Compile(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the expression should be compiled to an interpreted form, if it's available; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> para indicar que a expressão deverá ser compilada em um formato interpretado, se ele estiver disponível; <ph id="ph2">&lt;see langword="false" /&gt;</ph> caso contrário.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.LambdaExpression.Compile(System.Boolean)">
          <source>Produces an interpreted or compiled delegate that represents the lambda expression.</source>
          <target state="translated">Produz um delegado interpretado ou compilado que representa a expressão lambda.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.LambdaExpression.Compile(System.Boolean)">
          <source>A delegate that represents the compiled lambda expression described by the <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> object.</source>
          <target state="translated">Um delegado que representa a expressão lambda compilada descrita pelo objeto <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.LambdaExpression.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)">
          <source>Debugging information generator used by the compiler to mark sequence points and annotate local variables.</source>
          <target state="translated">O gerador de informações de depuração usado pelo compilador para marcar pontos de sequência e anotar as variáveis locais.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.LambdaExpression.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)">
          <source>Produces a delegate that represents the lambda expression.</source>
          <target state="translated">Produz um delegado que representa a expressão lambda.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.LambdaExpression.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)">
          <source>A delegate containing the compiled version of the lambda.</source>
          <target state="translated">Um delegado que contém a versão compilada da expressão lambda.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.LambdaExpression">
          <source>Compiles the lambda into a method definition.</source>
          <target state="translated">Compila o lambda em uma definição de método.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.LambdaExpression.CompileToMethod(System.Reflection.Emit.MethodBuilder)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.MethodBuilder" /&gt;</ph> which will be used to hold the lambda's IL.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.MethodBuilder" /&gt;</ph> que será usado para manter a nível de integridade de lambda.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.LambdaExpression.CompileToMethod(System.Reflection.Emit.MethodBuilder)">
          <source>Compiles the lambda into a method definition.</source>
          <target state="translated">Compila o lambda em uma definição de método.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.LambdaExpression.CompileToMethod(System.Reflection.Emit.MethodBuilder,System.Runtime.CompilerServices.DebugInfoGenerator)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.MethodBuilder" /&gt;</ph> which will be used to hold the lambda's IL.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.MethodBuilder" /&gt;</ph> que será usado para manter a nível de integridade de lambda.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.LambdaExpression.CompileToMethod(System.Reflection.Emit.MethodBuilder,System.Runtime.CompilerServices.DebugInfoGenerator)">
          <source>Debugging information generator used by the compiler to mark sequence points and annotate local variables.</source>
          <target state="translated">O gerador de informações de depuração usado pelo compilador para marcar pontos de sequência e anotar as variáveis locais.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.LambdaExpression.CompileToMethod(System.Reflection.Emit.MethodBuilder,System.Runtime.CompilerServices.DebugInfoGenerator)">
          <source>Compiles the lambda into a method definition and custom debug information.</source>
          <target state="translated">Compila o lambda em uma definição de método e as informações de depuração personalizada.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.LambdaExpression.Name">
          <source>Gets the name of the lambda expression.</source>
          <target state="translated">Obtém o nome da expressão lambda.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.LambdaExpression.Name">
          <source>The name of the lambda expression.</source>
          <target state="translated">O nome da expressão lambda.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.LambdaExpression.Name">
          <source>Used for debugging.</source>
          <target state="translated">Usado para depuração.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.LambdaExpression.NodeType">
          <source>Returns the node type of this <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>.</source>
          <target state="translated">Retorna o tipo de nó deste <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.LambdaExpression.NodeType">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ExpressionType" /&gt;</ph> that represents this expression.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ExpressionType" /&gt;</ph> que representa essa expressão.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.LambdaExpression.Parameters">
          <source>Gets the parameters of the lambda expression.</source>
          <target state="translated">Obtém os parâmetros da expressão lambda.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.LambdaExpression.Parameters">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /&gt;</ph> of <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> objects that represent the parameters of the lambda expression.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /&gt;</ph> de objetos <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> que representam os parâmetros da expressão lambda.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.LambdaExpression.ReturnType">
          <source>Gets the return type of the lambda expression.</source>
          <target state="translated">Obtém o tipo de retorno da expressão lambda.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.LambdaExpression.ReturnType">
          <source>The <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object representing the type of the lambda expression.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objeto que representa o tipo da expressão lambda.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.LambdaExpression.TailCall">
          <source>Gets the value that indicates if the lambda expression will be compiled with the tail call optimization.</source>
          <target state="translated">Obtém o valor que indica se a expressão lambda será compilada com a otimização de chamada tail.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.LambdaExpression.TailCall">
          <source>True if the lambda expression will be compiled with the tail call optimization, otherwise false.</source>
          <target state="translated">True se a expressão lambda será compilada com a otimização de chamadas tail, caso contrário, false.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.LambdaExpression.Type">
          <source>Gets the static type of the expression that this <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> represents.</source>
          <target state="translated">Obtém o tipo estático da expressão que esse <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> representa.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.LambdaExpression.Type">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Type" /&gt;</ph> that represents the static type of the expression.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Type" /&gt;</ph> que representa o tipo estático da expressão.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>