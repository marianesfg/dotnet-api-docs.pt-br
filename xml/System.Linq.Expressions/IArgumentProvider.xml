<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IArgumentProvider.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5bb1b0a12225c49cd06302a4822210d08cda2957f.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bb1b0a12225c49cd06302a4822210d08cda2957f</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>Provides an internal interface for accessing the arguments of multiple tree nodes (DynamicExpression, ElementInit, MethodCallExpression, InvocationExpression, NewExpression, and InexExpression).</source>
          <target state="translated">Fornece uma interface interna para acessar os argumentos de vários nós de árvore (DynamicExpression, ElementInit, MethodCallExpression, InvocationExpression, NewExpression e InexExpression).</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>You should not use this API.</source>
          <target state="translated">Você não deve usar essa API.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>It is only public due to DLL refactoring and exists only for internal performance optimizations.</source>
          <target state="translated">Ela só é pública devido à refatoração de DLL e existe somente para otimizações de desempenho internas.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>This enables two optimizations which reduce the size of expression trees.</source>
          <target state="translated">Isso habilita duas otimizações que reduzem o tamanho das árvores de expressão.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>The first enables the tree nodes to hold onto an IList<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph> instead of a ReadOnlyCollection.</source>
          <target state="translated">A primeira permite que os nós de árvore retenham uma IList<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph> em vez de uma ReadOnlyCollection.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>IList<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph> saves the cost of allocating the ReadOnlyCollection for each node.</source>
          <target state="translated">IList<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph> economiza o custo de alocar o ReadOnlyCollection para cada nó.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>The second enables creating specialized subclasses that hold onto a specific number of arguments (for example, Block2, Block3, Block4).</source>
          <target state="translated">A segunda permite a criação de subclasses especializadas que retêm um número específico de argumentos (por exemplo, Block2, Block3, Block4).</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>Therefore, these nodes avoid allocating both a ReadOnlyCollection and an array for storing their elements, saving 32 bytes per node.</source>
          <target state="translated">Assim, esses nós evitam alocar uma ReadOnlyCollection e uma matriz para armazenar os elementos deles, economizando 32 bytes por nó.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>The expression tree nodes continue to expose the original LINQ properties of ReadOnlyCollections.</source>
          <target state="translated">Os nós de árvore de expressão continuam a expor as propriedades do LINQ originais de ReadOnlyCollections.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>The nodes do this by re-using a field for storing both the array or an element that would normally be stored in the array.</source>
          <target state="translated">Os nós fazem isso ao reutilizar um campo para o armazenamento da matriz ou de um elemento que normalmente seria armazenado na matriz.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>For the array case, the collection is typed to IList<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph> instead of ReadOnlyCollection<ph id="ph3">&amp;lt;</ph>T<ph id="ph4">&amp;gt;</ph>.</source>
          <target state="translated">Para o caso de matriz, a coleção é tipada para IList<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph> em vez de ReadOnlyCollection<ph id="ph3">&amp;lt;</ph>T<ph id="ph4">&amp;gt;</ph>.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>When the node is initially constructed it is an array.</source>
          <target state="translated">Quando o nó é inicialmente construído, ele é uma matriz.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>When the compiler accesses the members it uses this interface.</source>
          <target state="translated">Quando o compilador acessa os membros, ele usa essa interface.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>Accessing array elements promotes the array to a ReadOnlyCollection.</source>
          <target state="translated">Acessar elementos da matriz promove a matriz a uma ReadOnlyCollection.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>For the object case we store the first argument in a field typed to object.</source>
          <target state="translated">Para o caso do objeto, armazenamos o primeiro argumento em um campo tipado para o objeto.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>When the node is initially constructed, the field holds the Expression.</source>
          <target state="translated">Quando o nó é inicialmente construído, o campo contém a Expression.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>The compiler accesses arguments through this interface, and the accessor for the first argument uses Expression.ReturnObject to return the object that handles the Expression or ReadOnlyCollection case.</source>
          <target state="translated">O compilador acessa argumentos por meio dessa interface e o acessador para o primeiro argumento usa Expression.ReturnObject para retornar o objeto que manipula o caso de Expression ou de ReadOnlyCollection.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>When the user accesses the ReadOnlyCollection, then the object field is updated to hold directly onto the ReadOnlyCollection.</source>
          <target state="translated">Quando o usuário acessa a ReadOnlyCollection, o campo de objeto é atualizado para ater-se diretamente à ReadOnlyCollection.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>It is important that the Expressions consistently return the same ReadOnlyCollection.</source>
          <target state="translated">É importante que as expressões retornam consistentemente a mesma ReadOnlyCollection.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>Otherwise, the re-writer tree walker will break.</source>
          <target state="translated">Caso contrário, o tree walker usado para regravação será interrompido.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>It is a breaking change from LINQ v1 to return different ReadOnlyCollections form the same Expression node.</source>
          <target state="translated">É uma alteração significativa de LINQ v1 para retornar diferentes ReadOnlyCollections do mesmo nó de expressão.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>Currently users can rely on object identity to tell if the node has changed.</source>
          <target state="translated">No momento, os usuários podem confiar na identidade do objeto para saber se o nó foi alterado.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>Storing the ReadOnlyCollection in an overloaded field both reduces memory usage and maintains compatibility for the public API.</source>
          <target state="translated">Armazenar a ReadOnlyCollection em um campo sobrecarregado reduz o uso de memória e também mantém a compatibilidade para a API pública.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount">
          <source>Returns the number of arguments to the expression tree node.</source>
          <target state="translated">Retorna o número de argumentos para o nó de árvore de expressão.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount">
          <source>You should not use this type.</source>
          <target state="translated">Você não deve usar esse tipo.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount">
          <source>It is only public due to assembly refactoring, and it is used internally for performance optimizations.</source>
          <target state="translated">Ele só é público devido a refatoração de assembly e é usado internamente para otimizações de desempenho.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount">
          <source>The number of arguments to the expression tree node as <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>.</source>
          <target state="translated">O número de argumentos para o nó de árvore de expressão como <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)">
          <source>The index of the argument.</source>
          <target state="translated">O índice do argumento.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)">
          <source>Returns the argument at index, throwing if index is out of bounds.</source>
          <target state="translated">Retorna o argumento no índice, lançando se o índice estiver fora dos limites.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)">
          <source>You should not use this type.</source>
          <target state="translated">Você não deve usar esse tipo.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)">
          <source>It is only public due to assembly refactoring, and it is used internally for performance optimizations.</source>
          <target state="translated">Ele só é público devido a refatoração de assembly e é usado internamente para otimizações de desempenho.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)">
          <source>The argument at index, throwing if index is out of bounds as <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>.</source>
          <target state="translated">O argumento no índice, gerando exceção se o índice está fora dos limites como <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>