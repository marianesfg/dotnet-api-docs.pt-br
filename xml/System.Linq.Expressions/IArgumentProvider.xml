<Type Name="IArgumentProvider" FullName="System.Linq.Expressions.IArgumentProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bb1b0a12225c49cd06302a4822210d08cda2957f" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30425050" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IArgumentProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IArgumentProvider" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Expressions.IArgumentProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IArgumentProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IArgumentProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Fornece uma interface interna para acessar os argumentos de vários nós de árvore (DynamicExpression, ElementInit, MethodCallExpression, InvocationExpression, NewExpression e InexExpression).  Você não deve usar essa API.  Ela só é pública devido à refatoração de DLL e existe somente para otimizações de desempenho internas.  
  
 Isso habilita duas otimizações que reduzem o tamanho das árvores de expressão.  A primeira permite que os nós de árvore retenham uma IList&lt;T&gt; em vez de uma ReadOnlyCollection.  IList&lt;T&gt; economiza o custo de alocar o ReadOnlyCollection para cada nó.  A segunda permite a criação de subclasses especializadas que retêm um número específico de argumentos (por exemplo, Block2, Block3, Block4).  Assim, esses nós evitam alocar uma ReadOnlyCollection e uma matriz para armazenar os elementos deles, economizando 32 bytes por nó.  
  
 Os nós de árvore de expressão continuam a expor as propriedades do LINQ originais de ReadOnlyCollections.  Os nós fazem isso ao reutilizar um campo para o armazenamento da matriz ou de um elemento que normalmente seria armazenado na matriz.  
  
 Para o caso de matriz, a coleção é tipada para IList&lt;T&gt; em vez de ReadOnlyCollection&lt;T&gt;.  Quando o nó é inicialmente construído, ele é uma matriz.  Quando o compilador acessa os membros, ele usa essa interface.  Acessar elementos da matriz promove a matriz a uma ReadOnlyCollection.  
  
 Para o caso do objeto, armazenamos o primeiro argumento em um campo tipado para o objeto.  Quando o nó é inicialmente construído, o campo contém a Expression.  O compilador acessa argumentos por meio dessa interface e o acessador para o primeiro argumento usa Expression.ReturnObject para retornar o objeto que manipula o caso de Expression ou de ReadOnlyCollection.  Quando o usuário acessa a ReadOnlyCollection, o campo de objeto é atualizado para ater-se diretamente à ReadOnlyCollection.  
  
 É importante que as expressões retornam consistentemente a mesma ReadOnlyCollection.  Caso contrário, o tree walker usado para regravação será interrompido.  É uma alteração significativa de LINQ v1 para retornar diferentes ReadOnlyCollections do mesmo nó de expressão.  No momento, os usuários podem confiar na identidade do objeto para saber se o nó foi alterado.  Armazenar a ReadOnlyCollection em um campo sobrecarregado reduz o uso de memória e também mantém a compatibilidade para a API pública.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ArgumentCount">
      <MemberSignature Language="C#" Value="public int ArgumentCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ArgumentCount" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ArgumentCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ArgumentCount { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retorna o número de argumentos para o nó de árvore de expressão.  Você não deve usar esse tipo.  Ele só é público devido a refatoração de assembly e é usado internamente para otimizações de desempenho.</summary>
        <value>O número de argumentos para o nó de árvore de expressão como <see cref="T:System.Int32" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArgument">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression GetArgument (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression GetArgument(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetArgument (index As Integer) As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Linq::Expressions::Expression ^ GetArgument(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">O índice do argumento.</param>
        <summary>Retorna o argumento no índice, lançando se o índice estiver fora dos limites.  Você não deve usar esse tipo.  Ele só é público devido a refatoração de assembly e é usado internamente para otimizações de desempenho.</summary>
        <returns>O argumento no índice, gerando exceção se o índice está fora dos limites como <see cref="T:System.Linq.Expressions.Expression" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>