<Type Name="IArgumentProvider" FullName="System.Linq.Expressions.IArgumentProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c1987bffe3d2cba01471534c9b3fac3e0c152c07" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="36555642" /></Metadata><TypeSignature Language="C#" Value="public interface IArgumentProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IArgumentProvider" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Expressions.IArgumentProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IArgumentProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IArgumentProvider" />
  <TypeSignature Language="F#" Value="type IArgumentProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="a86d7-101">Fornece uma interface interna para acessar os argumentos de vários nós de árvore (DynamicExpression, ElementInit, MethodCallExpression, InvocationExpression, NewExpression e InexExpression).</span><span class="sxs-lookup"><span data-stu-id="a86d7-101">Provides an internal interface for accessing the arguments of multiple tree nodes (DynamicExpression, ElementInit, MethodCallExpression, InvocationExpression, NewExpression, and InexExpression).</span></span>  <span data-ttu-id="a86d7-102">Você não deve usar essa API.</span><span class="sxs-lookup"><span data-stu-id="a86d7-102">You should not use this API.</span></span>  <span data-ttu-id="a86d7-103">Ela só é pública devido à refatoração de DLL e existe somente para otimizações de desempenho internas.</span><span class="sxs-lookup"><span data-stu-id="a86d7-103">It is only public due to DLL refactoring and exists only for internal performance optimizations.</span></span>  
  
<span data-ttu-id="a86d7-104">Isso habilita duas otimizações que reduzem o tamanho das árvores de expressão.</span><span class="sxs-lookup"><span data-stu-id="a86d7-104">This enables two optimizations which reduce the size of expression trees.</span></span>  <span data-ttu-id="a86d7-105">A primeira permite que os nós de árvore retenham uma IList&lt;T&gt; em vez de uma ReadOnlyCollection.</span><span class="sxs-lookup"><span data-stu-id="a86d7-105">The first enables the tree nodes to hold onto an IList&lt;T&gt; instead of a ReadOnlyCollection.</span></span>  <span data-ttu-id="a86d7-106">IList&lt;T&gt; economiza o custo de alocar o ReadOnlyCollection para cada nó.</span><span class="sxs-lookup"><span data-stu-id="a86d7-106">IList&lt;T&gt; saves the cost of allocating the ReadOnlyCollection for each node.</span></span>  <span data-ttu-id="a86d7-107">A segunda permite a criação de subclasses especializadas que retêm um número específico de argumentos (por exemplo, Block2, Block3, Block4).</span><span class="sxs-lookup"><span data-stu-id="a86d7-107">The second enables creating specialized subclasses that hold onto a specific number of arguments (for example, Block2, Block3, Block4).</span></span>  <span data-ttu-id="a86d7-108">Assim, esses nós evitam alocar uma ReadOnlyCollection e uma matriz para armazenar os elementos deles, economizando 32 bytes por nó.</span><span class="sxs-lookup"><span data-stu-id="a86d7-108">Therefore, these nodes avoid allocating both a ReadOnlyCollection and an array for storing their elements, saving 32 bytes per node.</span></span>  
  
<span data-ttu-id="a86d7-109">Os nós de árvore de expressão continuam a expor as propriedades do LINQ originais de ReadOnlyCollections.</span><span class="sxs-lookup"><span data-stu-id="a86d7-109">The expression tree nodes continue to expose the original LINQ properties of ReadOnlyCollections.</span></span>  <span data-ttu-id="a86d7-110">Os nós fazem isso ao reutilizar um campo para o armazenamento da matriz ou de um elemento que normalmente seria armazenado na matriz.</span><span class="sxs-lookup"><span data-stu-id="a86d7-110">The nodes do this by re-using a field for storing both the array or an element that would normally be stored in the array.</span></span>  
  
<span data-ttu-id="a86d7-111">Para o caso de matriz, a coleção é tipada para IList&lt;T&gt; em vez de ReadOnlyCollection&lt;T&gt;.</span><span class="sxs-lookup"><span data-stu-id="a86d7-111">For the array case, the collection is typed to IList&lt;T&gt; instead of ReadOnlyCollection&lt;T&gt;.</span></span>  <span data-ttu-id="a86d7-112">Quando o nó é inicialmente construído, ele é uma matriz.</span><span class="sxs-lookup"><span data-stu-id="a86d7-112">When the node is initially constructed it is an array.</span></span>  <span data-ttu-id="a86d7-113">Quando o compilador acessa os membros, ele usa essa interface.</span><span class="sxs-lookup"><span data-stu-id="a86d7-113">When the compiler accesses the members it uses this interface.</span></span>  <span data-ttu-id="a86d7-114">Acessar elementos da matriz promove a matriz a uma ReadOnlyCollection.</span><span class="sxs-lookup"><span data-stu-id="a86d7-114">Accessing array elements promotes the array to a ReadOnlyCollection.</span></span>  
  
<span data-ttu-id="a86d7-115">Para o caso do objeto, armazenamos o primeiro argumento em um campo tipado para o objeto.</span><span class="sxs-lookup"><span data-stu-id="a86d7-115">For the object case we store the first argument in a field typed to object.</span></span>  <span data-ttu-id="a86d7-116">Quando o nó é inicialmente construído, o campo contém a Expression.</span><span class="sxs-lookup"><span data-stu-id="a86d7-116">When the node is initially constructed, the field holds the Expression.</span></span>  <span data-ttu-id="a86d7-117">O compilador acessa argumentos por meio dessa interface e o acessador para o primeiro argumento usa Expression.ReturnObject para retornar o objeto que manipula o caso de Expression ou de ReadOnlyCollection.</span><span class="sxs-lookup"><span data-stu-id="a86d7-117">The compiler accesses arguments through this interface, and the accessor for the first argument uses Expression.ReturnObject to return the object that handles the Expression or ReadOnlyCollection case.</span></span>  <span data-ttu-id="a86d7-118">Quando o usuário acessa a ReadOnlyCollection, o campo de objeto é atualizado para ater-se diretamente à ReadOnlyCollection.</span><span class="sxs-lookup"><span data-stu-id="a86d7-118">When the user accesses the ReadOnlyCollection, then the object field is updated to hold directly onto the ReadOnlyCollection.</span></span>  
  
<span data-ttu-id="a86d7-119">É importante que as expressões retornam consistentemente a mesma ReadOnlyCollection.</span><span class="sxs-lookup"><span data-stu-id="a86d7-119">It is important that the Expressions consistently return the same ReadOnlyCollection.</span></span>  <span data-ttu-id="a86d7-120">Caso contrário, o tree walker usado para regravação será interrompido.</span><span class="sxs-lookup"><span data-stu-id="a86d7-120">Otherwise, the re-writer tree walker will break.</span></span>  <span data-ttu-id="a86d7-121">É uma alteração significativa de LINQ v1 para retornar diferentes ReadOnlyCollections do mesmo nó de expressão.</span><span class="sxs-lookup"><span data-stu-id="a86d7-121">It is a breaking change from LINQ v1 to return different ReadOnlyCollections form the same Expression node.</span></span>  <span data-ttu-id="a86d7-122">No momento, os usuários podem confiar na identidade do objeto para saber se o nó foi alterado.</span><span class="sxs-lookup"><span data-stu-id="a86d7-122">Currently users can rely on object identity to tell if the node has changed.</span></span>  <span data-ttu-id="a86d7-123">Armazenar a ReadOnlyCollection em um campo sobrecarregado reduz o uso de memória e também mantém a compatibilidade para a API pública.</span><span class="sxs-lookup"><span data-stu-id="a86d7-123">Storing the ReadOnlyCollection in an overloaded field both reduces memory usage and maintains compatibility for the public API.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ArgumentCount">
      <MemberSignature Language="C#" Value="public int ArgumentCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ArgumentCount" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ArgumentCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ArgumentCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ArgumentCount : int" Usage="System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a86d7-124">Retorna o número de argumentos para o nó de árvore de expressão.</span><span class="sxs-lookup"><span data-stu-id="a86d7-124">Returns the number of arguments to the expression tree node.</span></span>  <span data-ttu-id="a86d7-125">Você não deve usar esse tipo.</span><span class="sxs-lookup"><span data-stu-id="a86d7-125">You should not use this type.</span></span>  <span data-ttu-id="a86d7-126">Ele só é público devido a refatoração de assembly e é usado internamente para otimizações de desempenho.</span><span class="sxs-lookup"><span data-stu-id="a86d7-126">It is only public due to assembly refactoring, and it is used internally for performance optimizations.</span></span></summary>
        <value><span data-ttu-id="a86d7-127">O número de argumentos para o nó de árvore de expressão como <see cref="T:System.Int32" />.</span><span class="sxs-lookup"><span data-stu-id="a86d7-127">The number of arguments to the expression tree node as <see cref="T:System.Int32" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArgument">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression GetArgument (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression GetArgument(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetArgument (index As Integer) As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Linq::Expressions::Expression ^ GetArgument(int index);" />
      <MemberSignature Language="F#" Value="abstract member GetArgument : int -&gt; System.Linq.Expressions.Expression" Usage="iArgumentProvider.GetArgument index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="a86d7-128">O índice do argumento.</span><span class="sxs-lookup"><span data-stu-id="a86d7-128">The index of the argument.</span></span></param>
        <summary><span data-ttu-id="a86d7-129">Retorna o argumento no índice, lançando se o índice estiver fora dos limites.</span><span class="sxs-lookup"><span data-stu-id="a86d7-129">Returns the argument at index, throwing if index is out of bounds.</span></span>  <span data-ttu-id="a86d7-130">Você não deve usar esse tipo.</span><span class="sxs-lookup"><span data-stu-id="a86d7-130">You should not use this type.</span></span>  <span data-ttu-id="a86d7-131">Ele só é público devido a refatoração de assembly e é usado internamente para otimizações de desempenho.</span><span class="sxs-lookup"><span data-stu-id="a86d7-131">It is only public due to assembly refactoring, and it is used internally for performance optimizations.</span></span></summary>
        <returns><span data-ttu-id="a86d7-132">O argumento no índice, gerando exceção se o índice está fora dos limites como <see cref="T:System.Linq.Expressions.Expression" />.</span><span class="sxs-lookup"><span data-stu-id="a86d7-132">The argument at index, throwing if index is out of bounds as <see cref="T:System.Linq.Expressions.Expression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>