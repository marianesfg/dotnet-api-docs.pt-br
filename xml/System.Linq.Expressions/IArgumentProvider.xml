<Type Name="IArgumentProvider" FullName="System.Linq.Expressions.IArgumentProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4abd0b0508fdc62e37d2117e5823a54dfc7dfdce" /><Meta Name="ms.sourcegitcommit" Value="d3dcd8c426adcf1bbe5ff78a76dee13bd8ad6efd" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="05/28/2019" /><Meta Name="ms.locfileid" Value="66251520" /></Metadata><TypeSignature Language="C#" Value="public interface IArgumentProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IArgumentProvider" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Expressions.IArgumentProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IArgumentProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IArgumentProvider" />
  <TypeSignature Language="F#" Value="type IArgumentProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Fornece uma interface interna para acessar os argumentos de vários nós de árvore (DynamicExpression, ElementInit, MethodCallExpression, InvocationExpression, NewExpression e IndexExpression).  Esta API é somente para uso interno.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[
      
## Remarks

Você não deve usar essa API.  Ele é público apenas devido à refatoração de assembly e ele existe somente para otimizações de desempenho internas. Ele habilita duas otimizações que reduzem o tamanho das árvores de:
  
1. Ele permite que os nós retenham uma <xref:System.Collections.Generic.IList%601> em vez de um <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.  Isso economiza o custo da alocação a coleção somente leitura para cada nó.
  
2. Ele permite que as subclasses especializadas a ser criado que espera no como um número específico de argumentos (por exemplo, `Block2`, `Block2`, `Block4`).  Portanto, esses nós evitam alocar ambos um <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> e uma matriz para armazenar seus elementos, economizando 32 bytes por nó.  Essa técnica é usada por vários nós, incluindo <xref:System.Linq.Expressions.BlockExpression>, <xref:System.Linq.Expressions.InvocationExpression>, e <xref:System.Linq.Expressions.MethodCallExpression>.
            
Os nós de árvore de expressão continuam a expor as propriedades originais do LINQ do <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> objetos. Eles fazem isso com a reutilização de um campo para armazenar a matriz ou um elemento que normalmente seria armazenado na matriz.
            
No caso de matriz, a coleção é digitada para a <xref:System.Collections.Generic.IList%601> em vez de <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>. Quando o nó é inicialmente construído, ele é uma matriz.  O compilador ou utilitários na biblioteca de acessar os elementos por meio dessa interface. Acessar elementos da matriz promove a matriz a um <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.
            
No caso do objeto, o primeiro argumento é armazenado em um campo tipado para <xref:System.Object>. Quando o nó é inicialmente construído, este campo contém o <xref:System.Linq.Expressions.Expression> do primeiro argumento.  Quando o compilador e utilitários na biblioteca de acessam os argumentos, eles usam novamente essa interface e o acessador para o primeiro argumento usa o `Expression.ReturnObject<T>(System.Object)` o método auxiliar para retornar o objeto que manipula a <xref:System.Linq.Expressions.Expression> ou <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> caso. Quando o usuário acessa o <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>, o campo de objeto é atualizado para conter diretamente para o <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.
            
É importante que <xref:System.Linq.Expressions.Expression> propriedades retornam consistentemente a mesma <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>. Caso contrário, o caminhador de árvore regravador usado pelos visitantes de expressão será interrompido. É uma alteração significativa de LINQ v1 para retornar diferentes <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> da mesma <xref:System.Linq.Expressions.Expression> nó. Atualmente, os usuários podem confiar na identidade do objeto para informar se o nó foi alterado.  Armazenando o <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> em um campo sobrecarregado ambos reduz o uso de memória e mantém a compatibilidade para a API pública.

      ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ArgumentCount">
      <MemberSignature Language="C#" Value="public int ArgumentCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ArgumentCount" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ArgumentCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ArgumentCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ArgumentCount : int" Usage="System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retorna o número de argumentos para o nó de árvore de expressão. Esta API é somente para uso interno.</summary>
        <value>O número de argumentos para o nó de árvore de expressão como <see cref="T:System.Int32" />.</value>
        <remarks>Você não deve usar essa API. Ele é público apenas devido à refatoração de assembly e é usada internamente para otimizações de desempenho.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArgument">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression GetArgument (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression GetArgument(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetArgument (index As Integer) As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Linq::Expressions::Expression ^ GetArgument(int index);" />
      <MemberSignature Language="F#" Value="abstract member GetArgument : int -&gt; System.Linq.Expressions.Expression" Usage="iArgumentProvider.GetArgument index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">O índice do argumento.</param>
        <summary>Retorna o argumento no <paramref name="index" />, gerando se o <paramref name="index" /> estiver fora dos limites. Esta API é somente para uso interno.</summary>
        <returns>O argumento no índice.</returns>
        <remarks>Você não deve usar essa API.  Ele só é público devido a refatoração de assembly e é usado internamente para otimizações de desempenho.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
