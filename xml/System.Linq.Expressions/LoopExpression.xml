<Type Name="LoopExpression" FullName="System.Linq.Expressions.LoopExpression">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5b886a6619a4e1cfdbdec515117cf9a2b020328b" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36479153" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class LoopExpression : System.Linq.Expressions.Expression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LoopExpression extends System.Linq.Expressions.Expression" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Expressions.LoopExpression" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LoopExpression&#xA;Inherits Expression" />
  <TypeSignature Language="C++ CLI" Value="public ref class LoopExpression sealed : System::Linq::Expressions::Expression" />
  <TypeSignature Language="F#" Value="type LoopExpression = class&#xA;    inherit Expression" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Linq.Expressions.Expression</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Linq.Expressions.Expression/LoopExpressionProxy))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="1f99f-101">Representa um loop infinito.</span>
      <span class="sxs-lookup">
        <span data-stu-id="1f99f-101">Represents an infinite loop.</span>
      </span>
      <span data-ttu-id="1f99f-102">Pode ser encerrado com "quebra".</span>
      <span class="sxs-lookup">
        <span data-stu-id="1f99f-102">It can be exited with "break".</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1f99f-103">O exemplo a seguir demonstra como criar uma expressão de bloco que contém um <xref:System.Linq.Expressions.LoopExpression> objeto usando o <xref:System.Linq.Expressions.Expression.Loop%2A> método.</span><span class="sxs-lookup"><span data-stu-id="1f99f-103">The following example demonstrates how to create a block expression that contains a <xref:System.Linq.Expressions.LoopExpression> object by using the <xref:System.Linq.Expressions.Expression.Loop%2A> method.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#44](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#44)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#44](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#44)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="protected internal override System.Linq.Expressions.Expression Accept (System.Linq.Expressions.ExpressionVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class System.Linq.Expressions.Expression Accept(class System.Linq.Expressions.ExpressionVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.LoopExpression.Accept(System.Linq.Expressions.ExpressionVisitor)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function Accept (visitor As ExpressionVisitor) As Expression" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::Linq::Expressions::Expression ^ Accept(System::Linq::Expressions::ExpressionVisitor ^ visitor);" />
      <MemberSignature Language="F#" Value="override this.Accept : System.Linq.Expressions.ExpressionVisitor -&gt; System.Linq.Expressions.Expression" Usage="loopExpression.Accept visitor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="System.Linq.Expressions.ExpressionVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Body">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression Body { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.Expression Body" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.LoopExpression.Body" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Body As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Linq::Expressions::Expression ^ Body { System::Linq::Expressions::Expression ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Body : System.Linq.Expressions.Expression" Usage="System.Linq.Expressions.LoopExpression.Body" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1f99f-104">Obtém o <see cref="T:System.Linq.Expressions.Expression" /> que é o corpo do loop.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1f99f-104">Gets the <see cref="T:System.Linq.Expressions.Expression" /> that is the body of the loop.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1f99f-105">O <see cref="T:System.Linq.Expressions.Expression" /> que é o corpo do loop.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1f99f-105">The <see cref="T:System.Linq.Expressions.Expression" /> that is the body of the loop.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BreakLabel">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.LabelTarget BreakLabel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.LabelTarget BreakLabel" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.LoopExpression.BreakLabel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BreakLabel As LabelTarget" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Linq::Expressions::LabelTarget ^ BreakLabel { System::Linq::Expressions::LabelTarget ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BreakLabel : System.Linq.Expressions.LabelTarget" Usage="System.Linq.Expressions.LoopExpression.BreakLabel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelTarget</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1f99f-106">Obtém o <see cref="T:System.Linq.Expressions.LabelTarget" /> que é usado pelo corpo do loop como um destino de instrução de interromper.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1f99f-106">Gets the <see cref="T:System.Linq.Expressions.LabelTarget" /> that is used by the loop body as a break statement target.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1f99f-107">O <see cref="T:System.Linq.Expressions.LabelTarget" /> que é usada pelo corpo do loop como um destino de instrução break.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1f99f-107">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that is used by the loop body as a break statement target.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContinueLabel">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.LabelTarget ContinueLabel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.LabelTarget ContinueLabel" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.LoopExpression.ContinueLabel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContinueLabel As LabelTarget" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Linq::Expressions::LabelTarget ^ ContinueLabel { System::Linq::Expressions::LabelTarget ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ContinueLabel : System.Linq.Expressions.LabelTarget" Usage="System.Linq.Expressions.LoopExpression.ContinueLabel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelTarget</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1f99f-108">Obtém o <see cref="T:System.Linq.Expressions.LabelTarget" /> que é usado pelo corpo do loop como um destino de instrução de continuar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1f99f-108">Gets the <see cref="T:System.Linq.Expressions.LabelTarget" /> that is used by the loop body as a continue statement target.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1f99f-109">O <see cref="T:System.Linq.Expressions.LabelTarget" /> que é usada pelo corpo do loop como um destino de instrução de continuar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1f99f-109">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that is used by the loop body as a continue statement target.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public override sealed System.Linq.Expressions.ExpressionType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Linq.Expressions.ExpressionType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.LoopExpression.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable ReadOnly Property NodeType As ExpressionType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Linq::Expressions::ExpressionType NodeType { System::Linq::Expressions::ExpressionType get(); };" />
      <MemberSignature Language="F#" Value="member this.NodeType : System.Linq.Expressions.ExpressionType" Usage="System.Linq.Expressions.LoopExpression.NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1f99f-110">Retorna o tipo de nó dessa expressão.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1f99f-110">Returns the node type of this expression.</span>
          </span>
          <span data-ttu-id="1f99f-111">Nós de extensão devem retornar <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> ao substituírem esse método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1f99f-111">Extension nodes should return <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> when overriding this method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1f99f-112">O <see cref="T:System.Linq.Expressions.ExpressionType" /> da expressão.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1f99f-112">The <see cref="T:System.Linq.Expressions.ExpressionType" /> of the expression.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public override sealed Type Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Type" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.LoopExpression.Type" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable ReadOnly Property Type As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ Type { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Type : Type" Usage="System.Linq.Expressions.LoopExpression.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1f99f-113">Obtém o tipo estático da expressão que esse <see cref="T:System.Linq.Expressions.Expression" /> representa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1f99f-113">Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1f99f-114">O <see cref="P:System.Linq.Expressions.LoopExpression.Type" /> que representa o tipo estático da expressão.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1f99f-114">The <see cref="P:System.Linq.Expressions.LoopExpression.Type" /> that represents the static type of the expression.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.LoopExpression Update (System.Linq.Expressions.LabelTarget breakLabel, System.Linq.Expressions.LabelTarget continueLabel, System.Linq.Expressions.Expression body);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.Expressions.LoopExpression Update(class System.Linq.Expressions.LabelTarget breakLabel, class System.Linq.Expressions.LabelTarget continueLabel, class System.Linq.Expressions.Expression body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.LoopExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (breakLabel As LabelTarget, continueLabel As LabelTarget, body As Expression) As LoopExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Linq::Expressions::LoopExpression ^ Update(System::Linq::Expressions::LabelTarget ^ breakLabel, System::Linq::Expressions::LabelTarget ^ continueLabel, System::Linq::Expressions::Expression ^ body);" />
      <MemberSignature Language="F#" Value="member this.Update : System.Linq.Expressions.LabelTarget * System.Linq.Expressions.LabelTarget * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.LoopExpression" Usage="loopExpression.Update (breakLabel, continueLabel, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LoopExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="breakLabel" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="continueLabel" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="breakLabel">
          <span data-ttu-id="1f99f-115">A propriedade <see cref="P:System.Linq.Expressions.LoopExpression.BreakLabel" /> do resultado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1f99f-115">The <see cref="P:System.Linq.Expressions.LoopExpression.BreakLabel" /> property of the result.</span>
          </span>
        </param>
        <param name="continueLabel">
          <span data-ttu-id="1f99f-116">A propriedade <see cref="P:System.Linq.Expressions.LoopExpression.ContinueLabel" /> do resultado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1f99f-116">The <see cref="P:System.Linq.Expressions.LoopExpression.ContinueLabel" /> property of the result.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="1f99f-117">A propriedade <see cref="P:System.Linq.Expressions.LoopExpression.Body" /> do resultado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1f99f-117">The <see cref="P:System.Linq.Expressions.LoopExpression.Body" /> property of the result.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1f99f-118">Cria uma nova expressão que é parecida com esta, mas usando os filhos fornecidos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1f99f-118">Creates a new expression that is like this one, but using the supplied children.</span>
          </span>
          <span data-ttu-id="1f99f-119">Se todos os filhos forem os mesmos, ela retornará esta expressão.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1f99f-119">If all of the children are the same, it will return this expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1f99f-120">Essa expressão se nenhum filho foi alterado ou uma expressão com os filhos atualizados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1f99f-120">This expression if no children are changed or an expression with the updated children.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>