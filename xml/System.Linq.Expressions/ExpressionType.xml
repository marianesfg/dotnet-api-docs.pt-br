<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ExpressionType.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac597b00cdbc05b371d9b513979ff3d9cc101c14345.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">97b00cdbc05b371d9b513979ff3d9cc101c14345</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.ExpressionType">
          <source>Describes the node types for the nodes of an expression tree.</source>
          <target state="translated">Descreve os tipos de nós para os nós de uma árvore de expressão.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.ExpressionType">
          <source>For more information about each enumeration value of this type, see <bpt id="p1">[</bpt>Dynamic Language Runtime Overview<ept id="p1">](~/docs/framework/reflection-and-codedom/dynamic-language-runtime-overview.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre cada valor de enumeração desse tipo, consulte <bpt id="p1">[</bpt>visão geral do Dynamic Language Runtime<ept id="p1">](~/docs/framework/reflection-and-codedom/dynamic-language-runtime-overview.md)</ept>.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Add">
          <source>An addition operation, such as <bpt id="p1">&lt;c&gt;</bpt>a + b<ept id="p1">&lt;/c&gt;</ept>, without overflow checking, for numeric operands.</source>
          <target state="translated">Uma operação de adição, tal como <bpt id="p1">&lt;c&gt;</bpt>a + b<ept id="p1">&lt;/c&gt;</ept>, sem verificação de estouro, para operandos numéricos.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.AddAssign">
          <source>An addition compound assignment operation, such as <bpt id="p1">&lt;c&gt;</bpt>(a += b)<ept id="p1">&lt;/c&gt;</ept>, without overflow checking, for numeric operands.</source>
          <target state="translated">Uma operação de adição de atribuição composta, tal como <bpt id="p1">&lt;c&gt;</bpt>(a += b)<ept id="p1">&lt;/c&gt;</ept>, sem verificação de estouro, para operandos numéricos.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.AddAssignChecked">
          <source>An addition compound assignment operation, such as <bpt id="p1">&lt;c&gt;</bpt>(a += b)<ept id="p1">&lt;/c&gt;</ept>, with overflow checking, for numeric operands.</source>
          <target state="translated">Uma operação de adição de atribuição composta, tal como <bpt id="p1">&lt;c&gt;</bpt>(a += b)<ept id="p1">&lt;/c&gt;</ept>, com verificação de estouro, para operandos numéricos.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.AddChecked">
          <source>An addition operation, such as <bpt id="p1">&lt;c&gt;</bpt>(a + b)<ept id="p1">&lt;/c&gt;</ept>, with overflow checking, for numeric operands.</source>
          <target state="translated">Uma operação de adição, tal como <bpt id="p1">&lt;c&gt;</bpt>(a + b)<ept id="p1">&lt;/c&gt;</ept>, com verificação de estouro, para operandos numéricos.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.And">
          <source>A bitwise or logical <ph id="ph1">&lt;see langword="AND" /&gt;</ph> operation, such as <bpt id="p1">&lt;c&gt;</bpt>(a <ph id="ph2">&amp;amp;</ph> b)<ept id="p1">&lt;/c&gt;</ept> in C# and <bpt id="p2">&lt;c&gt;</bpt>(a And b)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic.</source>
          <target state="translated">Uma operação <ph id="ph1">&lt;see langword="AND" /&gt;</ph> lógica ou bit a bit, tal como <bpt id="p1">&lt;c&gt;</bpt>(a <ph id="ph2">&amp;amp;</ph> b)<ept id="p1">&lt;/c&gt;</ept> em C# e <bpt id="p2">&lt;c&gt;</bpt>(a And b)<ept id="p2">&lt;/c&gt;</ept> no Visual Basic.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.AndAlso">
          <source>A conditional <ph id="ph1">&lt;see langword="AND" /&gt;</ph> operation that evaluates the second operand only if the first operand evaluates to <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">Uma operação <ph id="ph1">&lt;see langword="AND" /&gt;</ph> condicional que avalia o segundo operando somente se o primeiro operando é avaliado como <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.AndAlso">
          <source>It corresponds to <bpt id="p1">&lt;c&gt;</bpt>(a <ph id="ph1">&amp;amp;</ph><ph id="ph2">&amp;amp;</ph> b)<ept id="p1">&lt;/c&gt;</ept> in C# and <bpt id="p2">&lt;c&gt;</bpt>(a AndAlso b)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic.</source>
          <target state="translated">Ele corresponde a <bpt id="p1">&lt;c&gt;</bpt>(a <ph id="ph1">&amp;amp;</ph><ph id="ph2">&amp;amp;</ph> b)<ept id="p1">&lt;/c&gt;</ept> em C# e <bpt id="p2">&lt;c&gt;</bpt>(a AndAlso b)<ept id="p2">&lt;/c&gt;</ept> no Visual Basic.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.AndAssign">
          <source>A bitwise or logical <ph id="ph1">&lt;see langword="AND" /&gt;</ph> compound assignment operation, such as <bpt id="p1">&lt;c&gt;</bpt>(a <ph id="ph2">&amp;amp;</ph>= b)<ept id="p1">&lt;/c&gt;</ept> in C#.</source>
          <target state="translated">Uma operação de atribuição composta <ph id="ph1">&lt;see langword="AND" /&gt;</ph> lógica ou bit a bit, tal como <bpt id="p1">&lt;c&gt;</bpt>(a <ph id="ph2">&amp;amp;</ph>= b)<ept id="p1">&lt;/c&gt;</ept> em C#.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.ArrayIndex">
          <source>An indexing operation in a one-dimensional array, such as <bpt id="p1">&lt;c&gt;</bpt>array[index]<ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>array(index)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic.</source>
          <target state="translated">Uma operação de indexação em uma matriz unidimensional, tal como <bpt id="p1">&lt;c&gt;</bpt>array[index]<ept id="p1">&lt;/c&gt;</ept> em C# ou <bpt id="p2">&lt;c&gt;</bpt>array(index)<ept id="p2">&lt;/c&gt;</ept> no Visual Basic.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.ArrayLength">
          <source>An operation that obtains the length of a one-dimensional array, such as <bpt id="p1">&lt;c&gt;</bpt>array.Length<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Uma operação que obtém o tamanho de uma matriz unidimensional, tal como <bpt id="p1">&lt;c&gt;</bpt>array.Length<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Assign">
          <source>An assignment operation, such as <bpt id="p1">&lt;c&gt;</bpt>(a = b)<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Uma operação de atribuição, tal como <bpt id="p1">&lt;c&gt;</bpt>(a = b)<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Block">
          <source>A block of expressions.</source>
          <target state="translated">Um bloco de expressões.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Call">
          <source>A method call, such as in the <bpt id="p1">&lt;c&gt;</bpt>obj.sampleMethod()<ept id="p1">&lt;/c&gt;</ept> expression.</source>
          <target state="translated">Uma chamada de método, como na expressão <bpt id="p1">&lt;c&gt;</bpt>obj.sampleMethod()<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Coalesce">
          <source>A node that represents a null coalescing operation, such as <bpt id="p1">&lt;c&gt;</bpt>(a ?? b)<ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>If(a, b)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic.</source>
          <target state="translated">Um nó que representa uma operação de união nula, tal como <bpt id="p1">&lt;c&gt;</bpt>(a ?? b)<ept id="p1">&lt;/c&gt;</ept> em C# ou <bpt id="p2">&lt;c&gt;</bpt>If(a, b)<ept id="p2">&lt;/c&gt;</ept> no Visual Basic.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Conditional">
          <source>A conditional operation, such as <bpt id="p1">&lt;c&gt;</bpt>a <ph id="ph1">&amp;gt;</ph> b ? a : b<ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>If(a <ph id="ph2">&amp;gt;</ph> b, a, b)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic.</source>
          <target state="translated">Uma operação condicional, tal como <bpt id="p1">&lt;c&gt;</bpt>a <ph id="ph1">&amp;gt;</ph> b ? a : b<ept id="p1">&lt;/c&gt;</ept> em C# ou <bpt id="p2">&lt;c&gt;</bpt>If(a <ph id="ph2">&amp;gt;</ph> b, a, b)<ept id="p2">&lt;/c&gt;</ept> no Visual Basic.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Constant">
          <source>A constant value.</source>
          <target state="translated">Um valor constante.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Convert">
          <source>A cast or conversion operation, such as <bpt id="p1">&lt;c&gt;</bpt>(SampleType)obj<ept id="p1">&lt;/c&gt;</ept> in C#or <bpt id="p2">&lt;c&gt;</bpt>CType(obj, SampleType)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic.</source>
          <target state="translated">Uma operação de conversão ou transmissão, tal como <bpt id="p1">&lt;c&gt;</bpt>(SampleType)obj<ept id="p1">&lt;/c&gt;</ept> em C# ou <bpt id="p2">&lt;c&gt;</bpt>CType(obj, SampleType)<ept id="p2">&lt;/c&gt;</ept> no Visual Basic.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Convert">
          <source>For a numeric conversion, if the converted value is too large for the destination type, no exception is thrown.</source>
          <target state="translated">Para uma conversão numérica, se o valor convertido é muito grande para o tipo de destino, nenhuma exceção é lançada.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.ConvertChecked">
          <source>A cast or conversion operation, such as <bpt id="p1">&lt;c&gt;</bpt>(SampleType)obj<ept id="p1">&lt;/c&gt;</ept> in C#or <bpt id="p2">&lt;c&gt;</bpt>CType(obj, SampleType)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic.</source>
          <target state="translated">Uma operação de conversão ou transmissão, tal como <bpt id="p1">&lt;c&gt;</bpt>(SampleType)obj<ept id="p1">&lt;/c&gt;</ept> em C# ou <bpt id="p2">&lt;c&gt;</bpt>CType(obj, SampleType)<ept id="p2">&lt;/c&gt;</ept> no Visual Basic.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.ConvertChecked">
          <source>For a numeric conversion, if the converted value does not fit the destination type, an exception is thrown.</source>
          <target state="translated">Para uma conversão numérica, se o valor convertido não se ajusta ao tipo de destino, nenhuma exceção será lançada.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.DebugInfo">
          <source>Debugging information.</source>
          <target state="translated">Informações de depuração.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Decrement">
          <source>A unary decrement operation, such as <bpt id="p1">&lt;c&gt;</bpt>(a - 1)<ept id="p1">&lt;/c&gt;</ept> in C# and Visual Basic.</source>
          <target state="translated">Uma operação de decremento unária, tal como <bpt id="p1">&lt;c&gt;</bpt>(a – 1)<ept id="p1">&lt;/c&gt;</ept> em C# e Visual Basic.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Decrement">
          <source>The object <bpt id="p1">&lt;c&gt;</bpt>a<ept id="p1">&lt;/c&gt;</ept> should not be modified in place.</source>
          <target state="translated">O objeto <bpt id="p1">&lt;c&gt;</bpt>a<ept id="p1">&lt;/c&gt;</ept> não deve ser modificado no lugar em que se encontra.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Default">
          <source>A default value.</source>
          <target state="translated">Um valor padrão.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Divide">
          <source>A division operation, such as <bpt id="p1">&lt;c&gt;</bpt>(a / b)<ept id="p1">&lt;/c&gt;</ept>, for numeric operands.</source>
          <target state="translated">Uma operação de divisão, tal como <bpt id="p1">&lt;c&gt;</bpt>(a / b)<ept id="p1">&lt;/c&gt;</ept>, para operandos numéricos.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.DivideAssign">
          <source>An division compound assignment operation, such as <bpt id="p1">&lt;c&gt;</bpt>(a /= b)<ept id="p1">&lt;/c&gt;</ept>, for numeric operands.</source>
          <target state="translated">Uma operação de divisão de atribuição composta, tal como <bpt id="p1">&lt;c&gt;</bpt>(a /= b)<ept id="p1">&lt;/c&gt;</ept>, para operandos numéricos.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Dynamic">
          <source>A dynamic operation.</source>
          <target state="translated">Uma operação dinâmica.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Equal">
          <source>A node that represents an equality comparison, such as <bpt id="p1">&lt;c&gt;</bpt>(a == b)<ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>(a = b)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic.</source>
          <target state="translated">Um nó que representa uma comparação de igualdade, tal como <bpt id="p1">&lt;c&gt;</bpt>(a == b)<ept id="p1">&lt;/c&gt;</ept> em C# ou <bpt id="p2">&lt;c&gt;</bpt>(a = b)<ept id="p2">&lt;/c&gt;</ept> no Visual Basic.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.ExclusiveOr">
          <source>A bitwise or logical <ph id="ph1">&lt;see langword="XOR" /&gt;</ph> operation, such as <bpt id="p1">&lt;c&gt;</bpt>(a ^ b)<ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>(a Xor b)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic.</source>
          <target state="translated">Uma operação <ph id="ph1">&lt;see langword="XOR" /&gt;</ph> lógica ou bit a bit, tal como <bpt id="p1">&lt;c&gt;</bpt>(a ^ b)<ept id="p1">&lt;/c&gt;</ept> em C# e <bpt id="p2">&lt;c&gt;</bpt>(a Xor b)<ept id="p2">&lt;/c&gt;</ept> no Visual Basic.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign">
          <source>A bitwise or logical <ph id="ph1">&lt;see langword="XOR" /&gt;</ph> compound assignment operation, such as <bpt id="p1">&lt;c&gt;</bpt>(a ^= b)<ept id="p1">&lt;/c&gt;</ept> in C#.</source>
          <target state="translated">Uma operação de atribuição composta <ph id="ph1">&lt;see langword="XOR" /&gt;</ph> lógica ou bit a bit como <bpt id="p1">&lt;c&gt;</bpt>(a ^= b)<ept id="p1">&lt;/c&gt;</ept> em C#.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Extension">
          <source>An extension expression.</source>
          <target state="translated">Uma expressão de extensão.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Goto">
          <source>A "go to" expression, such as <bpt id="p1">&lt;c&gt;</bpt>goto Label<ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>GoTo Label<ept id="p2">&lt;/c&gt;</ept> in Visual Basic.</source>
          <target state="translated">Uma expressão "go to", tal como <bpt id="p1">&lt;c&gt;</bpt>goto Rótulo<ept id="p1">&lt;/c&gt;</ept> em C# ou <bpt id="p2">&lt;c&gt;</bpt>GoTo Rótulo<ept id="p2">&lt;/c&gt;</ept> no Visual Basic.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.GreaterThan">
          <source>A "greater than" comparison, such as <bpt id="p1">&lt;c&gt;</bpt>(a <ph id="ph1">&amp;gt;</ph> b)<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Uma comparação "maior que", tal como <bpt id="p1">&lt;c&gt;</bpt>(a <ph id="ph1">&amp;gt;</ph> b)<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual">
          <source>A "greater than or equal to" comparison, such as <bpt id="p1">&lt;c&gt;</bpt>(a <ph id="ph1">&amp;gt;</ph>= b)<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Uma comparação "maior que ou igual a" como <bpt id="p1">&lt;c&gt;</bpt>(a <ph id="ph1">&amp;gt;</ph>= b)<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Increment">
          <source>A unary increment operation, such as <bpt id="p1">&lt;c&gt;</bpt>(a + 1)<ept id="p1">&lt;/c&gt;</ept> in C# and Visual Basic.</source>
          <target state="translated">Uma operação de incremento unária como <bpt id="p1">&lt;c&gt;</bpt>(a + 1)<ept id="p1">&lt;/c&gt;</ept> em C# e Visual Basic.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Increment">
          <source>The object <bpt id="p1">&lt;c&gt;</bpt>a<ept id="p1">&lt;/c&gt;</ept> should not be modified in place.</source>
          <target state="translated">O objeto <bpt id="p1">&lt;c&gt;</bpt>a<ept id="p1">&lt;/c&gt;</ept> não deve ser modificado no lugar em que se encontra.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Index">
          <source>An index operation or an operation that accesses a property that takes arguments.</source>
          <target state="translated">Uma operação de índice ou uma operação que acessa uma propriedade que aceita argumentos.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Invoke">
          <source>An operation that invokes a delegate or lambda expression, such as <bpt id="p1">&lt;c&gt;</bpt>sampleDelegate.Invoke()<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Uma operação que invoca uma expressão delegada ou lambda, tal como <bpt id="p1">&lt;c&gt;</bpt>sampleDelegate.Invoke()<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.IsFalse">
          <source>A <ph id="ph1">&lt;see langword="false" /&gt;</ph> condition value.</source>
          <target state="translated">Um valor de condição <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.IsTrue">
          <source>A <ph id="ph1">&lt;see langword="true" /&gt;</ph> condition value.</source>
          <target state="translated">Um valor de condição <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Label">
          <source>A label.</source>
          <target state="translated">Um rótulo.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Lambda">
          <source>A lambda expression, such as <bpt id="p1">&lt;c&gt;</bpt>a =<ph id="ph1">&amp;gt;</ph> a + a<ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Function(a) a + a<ept id="p2">&lt;/c&gt;</ept> in Visual Basic.</source>
          <target state="translated">Uma expressão lambda, tal como <bpt id="p1">&lt;c&gt;</bpt>a =<ph id="ph1">&amp;gt;</ph> a + a<ept id="p1">&lt;/c&gt;</ept> em C# ou <bpt id="p2">&lt;c&gt;</bpt>Function(a) a + a<ept id="p2">&lt;/c&gt;</ept> no Visual Basic.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.LeftShift">
          <source>A bitwise left-shift operation, such as <bpt id="p1">&lt;c&gt;</bpt>(a <ph id="ph1">&amp;lt;</ph><ph id="ph2">&amp;lt;</ph> b)<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Uma operação bit a bit de deslocamento à esquerda, tal como <bpt id="p1">&lt;c&gt;</bpt>(a <ph id="ph1">&amp;lt;</ph><ph id="ph2">&amp;lt;</ph> b)<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign">
          <source>A bitwise left-shift compound assignment, such as <bpt id="p1">&lt;c&gt;</bpt>(a <ph id="ph1">&amp;lt;</ph><ph id="ph2">&amp;lt;</ph>= b)<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Uma atribuição composta bit a bit de deslocamento à esquerda, tal como <bpt id="p1">&lt;c&gt;</bpt>(a <ph id="ph1">&amp;lt;</ph><ph id="ph2">&amp;lt;</ph>= b)<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.LessThan">
          <source>A "less than" comparison, such as <bpt id="p1">&lt;c&gt;</bpt>(a <ph id="ph1">&amp;lt;</ph> b)<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Uma comparação "menor que", tal como <bpt id="p1">&lt;c&gt;</bpt>(a <ph id="ph1">&amp;lt;</ph> b)<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual">
          <source>A "less than or equal to" comparison, such as <bpt id="p1">&lt;c&gt;</bpt>(a <ph id="ph1">&amp;lt;</ph>= b)<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Uma comparação "menor que ou igual a", tal como <bpt id="p1">&lt;c&gt;</bpt>(a <ph id="ph1">&amp;lt;</ph>= b)<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.ListInit">
          <source>An operation that creates a new <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph> object and initializes it from a list of elements, such as <bpt id="p1">&lt;c&gt;</bpt>new List<ph id="ph2">&amp;lt;</ph>SampleType<ph id="ph3">&amp;gt;</ph>(){ a, b, c }<ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Dim sampleList = { a, b, c }<ept id="p2">&lt;/c&gt;</ept> in Visual Basic.</source>
          <target state="translated">Uma operação que cria um novo objeto <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph> e o inicializa de uma lista de elementos, tais como <bpt id="p1">&lt;c&gt;</bpt>new List<ph id="ph2">&amp;lt;</ph>SampleType<ph id="ph3">&amp;gt;</ph>(){ a, b, c }<ept id="p1">&lt;/c&gt;</ept> em C# ou <bpt id="p2">&lt;c&gt;</bpt>Dim sampleList = { a, b, c }<ept id="p2">&lt;/c&gt;</ept> no Visual Basic.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Loop">
          <source>A loop, such as <bpt id="p1">&lt;c&gt;</bpt>for<ept id="p1">&lt;/c&gt;</ept> or <bpt id="p2">&lt;c&gt;</bpt>while<ept id="p2">&lt;/c&gt;</ept>.</source>
          <target state="translated">Um loop, assim como <bpt id="p1">&lt;c&gt;</bpt>for<ept id="p1">&lt;/c&gt;</ept> ou <bpt id="p2">&lt;c&gt;</bpt>while<ept id="p2">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.MemberAccess">
          <source>An operation that reads from a field or property, such as <bpt id="p1">&lt;c&gt;</bpt>obj.SampleProperty<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Uma operação que lê de um campo ou propriedade, tal como <bpt id="p1">&lt;c&gt;</bpt>obj.SampleProperty<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.MemberInit">
          <source>An operation that creates a new object and initializes one or more of its members, such as <bpt id="p1">&lt;c&gt;</bpt>new Point { X = 1, Y = 2 }<ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>New Point With {.X = 1, .Y = 2}<ept id="p2">&lt;/c&gt;</ept> in Visual Basic.</source>
          <target state="translated">Uma operação que cria um novo objeto e inicializa um ou mais de seus membros, tal como <bpt id="p1">&lt;c&gt;</bpt>new Point { X = 1, Y = 2 }<ept id="p1">&lt;/c&gt;</ept> em C# ou <bpt id="p2">&lt;c&gt;</bpt>New Point With {.X = 1, .Y = 2}<ept id="p2">&lt;/c&gt;</ept> no Visual Basic.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Modulo">
          <source>An arithmetic remainder operation, such as <bpt id="p1">&lt;c&gt;</bpt>(a % b)<ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>(a Mod b)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic.</source>
          <target state="translated">Uma operação aritmética restante, tal como <bpt id="p1">&lt;c&gt;</bpt>(a % b)<ept id="p1">&lt;/c&gt;</ept> em C# ou <bpt id="p2">&lt;c&gt;</bpt>(a Mod b)<ept id="p2">&lt;/c&gt;</ept> no Visual Basic.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.ModuloAssign">
          <source>An arithmetic remainder compound assignment operation, such as <bpt id="p1">&lt;c&gt;</bpt>(a %= b)<ept id="p1">&lt;/c&gt;</ept> in C#.</source>
          <target state="translated">Uma operação aritmética restante de atribuição composta, tal como <bpt id="p1">&lt;c&gt;</bpt>(a %= b)<ept id="p1">&lt;/c&gt;</ept> em C#.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Multiply">
          <source>A multiplication operation, such as <bpt id="p1">&lt;c&gt;</bpt>(a * b)<ept id="p1">&lt;/c&gt;</ept>, without overflow checking, for numeric operands.</source>
          <target state="translated">Uma operação de multiplicação, tal como <bpt id="p1">&lt;c&gt;</bpt>(a * b)<ept id="p1">&lt;/c&gt;</ept>, sem verificação de estouro, para operandos numéricos.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.MultiplyAssign">
          <source>A multiplication compound assignment operation, such as <bpt id="p1">&lt;c&gt;</bpt>(a *= b)<ept id="p1">&lt;/c&gt;</ept>, without overflow checking, for numeric operands.</source>
          <target state="translated">Uma operação de multiplicação de atribuição composta, tal como <bpt id="p1">&lt;c&gt;</bpt>(a *= b)<ept id="p1">&lt;/c&gt;</ept>, sem verificação de estouro, para operandos numéricos.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked">
          <source>A multiplication compound assignment operation, such as <bpt id="p1">&lt;c&gt;</bpt>(a *= b)<ept id="p1">&lt;/c&gt;</ept>, that has overflow checking, for numeric operands.</source>
          <target state="translated">Uma operação de multiplicação de atribuição composta, tal como <bpt id="p1">&lt;c&gt;</bpt>(a *= b)<ept id="p1">&lt;/c&gt;</ept>, que tem verificação de estouro, para operandos numéricos.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.MultiplyChecked">
          <source>An multiplication operation, such as <bpt id="p1">&lt;c&gt;</bpt>(a * b)<ept id="p1">&lt;/c&gt;</ept>, that has overflow checking, for numeric operands.</source>
          <target state="translated">Uma operação de multiplicação, tal como <bpt id="p1">&lt;c&gt;</bpt>(a * b)<ept id="p1">&lt;/c&gt;</ept>, com verificação de estouro, para operandos numéricos.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Negate">
          <source>An arithmetic negation operation, such as <bpt id="p1">&lt;c&gt;</bpt>(-a)<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Uma operação de negação aritmética, tal como <bpt id="p1">&lt;c&gt;</bpt>(-a)<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Negate">
          <source>The object <bpt id="p1">&lt;c&gt;</bpt>a<ept id="p1">&lt;/c&gt;</ept> should not be modified in place.</source>
          <target state="translated">O objeto <bpt id="p1">&lt;c&gt;</bpt>a<ept id="p1">&lt;/c&gt;</ept> não deve ser modificado no lugar em que se encontra.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.NegateChecked">
          <source>An arithmetic negation operation, such as <bpt id="p1">&lt;c&gt;</bpt>(-a)<ept id="p1">&lt;/c&gt;</ept>, that has overflow checking.</source>
          <target state="translated">Uma operação de negação aritmética, tal como <bpt id="p1">&lt;c&gt;</bpt>(-a)<ept id="p1">&lt;/c&gt;</ept>, que tem a verificação de estouro.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.NegateChecked">
          <source>The object <bpt id="p1">&lt;c&gt;</bpt>a<ept id="p1">&lt;/c&gt;</ept> should not be modified in place.</source>
          <target state="translated">O objeto <bpt id="p1">&lt;c&gt;</bpt>a<ept id="p1">&lt;/c&gt;</ept> não deve ser modificado no lugar em que se encontra.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.New">
          <source>An operation that calls a constructor to create a new object, such as <bpt id="p1">&lt;c&gt;</bpt>new SampleType()<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Uma operação que chama um construtor para criar um novo objeto, tal como <bpt id="p1">&lt;c&gt;</bpt>new SampleType()<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.NewArrayBounds">
          <source>An operation that creates a new array, in which the bounds for each dimension are specified, such as <bpt id="p1">&lt;c&gt;</bpt>new SampleType[dim1, dim2]<ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>New SampleType(dim1, dim2)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic.</source>
          <target state="translated">Uma operação que cria uma nova matriz e na qual os limites de cada dimensão são especificados, tal como <bpt id="p1">&lt;c&gt;</bpt>new SampleType[dim1, dim2]<ept id="p1">&lt;/c&gt;</ept> em C# ou <bpt id="p2">&lt;c&gt;</bpt>New SampleType(dim1, dim2)<ept id="p2">&lt;/c&gt;</ept> no Visual Basic.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.NewArrayInit">
          <source>An operation that creates a new one-dimensional array and initializes it from a list of elements, such as <bpt id="p1">&lt;c&gt;</bpt>new SampleType[]{a, b, c}<ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>New SampleType(){a, b, c}<ept id="p2">&lt;/c&gt;</ept> in Visual Basic.</source>
          <target state="translated">Uma operação que cria uma nova matriz unidirecional e a inicializa de uma lista de elementos, tal como <bpt id="p1">&lt;c&gt;</bpt>new SampleType[]{a, b, c}<ept id="p1">&lt;/c&gt;</ept> em C# ou <bpt id="p2">&lt;c&gt;</bpt>New SampleType(){a, b, c}<ept id="p2">&lt;/c&gt;</ept> no Visual Basic.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Not">
          <source>A bitwise complement or logical negation operation.</source>
          <target state="translated">Uma operação de negação lógica ou de complemento bit a bit.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Not">
          <source>In C#, it is equivalent to <bpt id="p1">&lt;c&gt;</bpt>(~a)<ept id="p1">&lt;/c&gt;</ept> for integral types and to <bpt id="p2">&lt;c&gt;</bpt>(!a)<ept id="p2">&lt;/c&gt;</ept> for Boolean values.</source>
          <target state="translated">Em C#, é equivalente a <bpt id="p1">&lt;c&gt;</bpt>(~a)<ept id="p1">&lt;/c&gt;</ept> para tipos integrais e a <bpt id="p2">&lt;c&gt;</bpt>(!a)<ept id="p2">&lt;/c&gt;</ept> para valores boolianos.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Not">
          <source>In Visual Basic, it is equivalent to <bpt id="p1">&lt;c&gt;</bpt>(Not a)<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">No Visual Basic, é equivalente a <bpt id="p1">&lt;c&gt;</bpt>(Not a)<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Not">
          <source>The object <bpt id="p1">&lt;c&gt;</bpt>a<ept id="p1">&lt;/c&gt;</ept> should not be modified in place.</source>
          <target state="translated">O objeto <bpt id="p1">&lt;c&gt;</bpt>a<ept id="p1">&lt;/c&gt;</ept> não deve ser modificado no lugar em que se encontra.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.NotEqual">
          <source>An inequality comparison, such as <bpt id="p1">&lt;c&gt;</bpt>(a != b)<ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>(a <ph id="ph1">&amp;lt;</ph><ph id="ph2">&amp;gt;</ph> b)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic.</source>
          <target state="translated">Uma comparação de desigualdade, tal como <bpt id="p1">&lt;c&gt;</bpt>(a != b)<ept id="p1">&lt;/c&gt;</ept> em C# ou <bpt id="p2">&lt;c&gt;</bpt>(a <ph id="ph1">&amp;lt;</ph><ph id="ph2">&amp;gt;</ph> b)<ept id="p2">&lt;/c&gt;</ept> no Visual Basic.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.OnesComplement">
          <source>A ones complement operation, such as <bpt id="p1">&lt;c&gt;</bpt>(~a)<ept id="p1">&lt;/c&gt;</ept> in C#.</source>
          <target state="translated">Uma operação de um complemento, tal como <bpt id="p1">&lt;c&gt;</bpt>(~a)<ept id="p1">&lt;/c&gt;</ept> em C#.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Or">
          <source>A bitwise or logical <ph id="ph1">&lt;see langword="OR" /&gt;</ph> operation, such as <bpt id="p1">&lt;c&gt;</bpt>(a | b)<ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>(a Or b)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic.</source>
          <target state="translated">Uma operação <ph id="ph1">&lt;see langword="OR" /&gt;</ph> lógica ou bit a bit, tal como <bpt id="p1">&lt;c&gt;</bpt>(a ^ b)<ept id="p1">&lt;/c&gt;</ept> em C# e <bpt id="p2">&lt;c&gt;</bpt>(a Or b)<ept id="p2">&lt;/c&gt;</ept> no Visual Basic.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.OrAssign">
          <source>A bitwise or logical <ph id="ph1">&lt;see langword="OR" /&gt;</ph> compound assignment, such as <bpt id="p1">&lt;c&gt;</bpt>(a |= b)<ept id="p1">&lt;/c&gt;</ept> in C#.</source>
          <target state="translated">Uma atribuição composta <ph id="ph1">&lt;see langword="OR" /&gt;</ph> lógica ou bit a bit, tal como <bpt id="p1">&lt;c&gt;</bpt>(a |= b)<ept id="p1">&lt;/c&gt;</ept> em C#.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.OrElse">
          <source>A short-circuiting conditional <ph id="ph1">&lt;see langword="OR" /&gt;</ph> operation, such as <bpt id="p1">&lt;c&gt;</bpt>(a || b)<ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>(a OrElse b)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic.</source>
          <target state="translated">Uma operação <ph id="ph1">&lt;see langword="OR" /&gt;</ph> condicional de curto-circuito, tal como <bpt id="p1">&lt;c&gt;</bpt>(a || b)<ept id="p1">&lt;/c&gt;</ept> em C# ou <bpt id="p2">&lt;c&gt;</bpt>(a OrElse b)<ept id="p2">&lt;/c&gt;</ept> no Visual Basic.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Parameter">
          <source>A reference to a parameter or variable that is defined in the context of the expression.</source>
          <target state="translated">Uma referência a um parâmetro ou uma variável que é definida no contexto da expressão.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Parameter">
          <source>For more information, see <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph>.</source>
          <target state="translated">Para obter mais informações, consulte <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.PostDecrementAssign">
          <source>A unary postfix decrement, such as <bpt id="p1">&lt;c&gt;</bpt>(a--)<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Um decremento de sufixo unário, tal como <bpt id="p1">&lt;c&gt;</bpt>(a--)<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.PostDecrementAssign">
          <source>The object <bpt id="p1">&lt;c&gt;</bpt>a<ept id="p1">&lt;/c&gt;</ept> should be modified in place.</source>
          <target state="translated">O objeto <bpt id="p1">&lt;c&gt;</bpt>a<ept id="p1">&lt;/c&gt;</ept> deve ser modificado no lugar.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.PostIncrementAssign">
          <source>A unary postfix increment, such as <bpt id="p1">&lt;c&gt;</bpt>(a++)<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Um incremento de sufixo unário, tal como <bpt id="p1">&lt;c&gt;</bpt>(a++)<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.PostIncrementAssign">
          <source>The object <bpt id="p1">&lt;c&gt;</bpt>a<ept id="p1">&lt;/c&gt;</ept> should be modified in place.</source>
          <target state="translated">O objeto <bpt id="p1">&lt;c&gt;</bpt>a<ept id="p1">&lt;/c&gt;</ept> deve ser modificado no lugar.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Power">
          <source>A mathematical operation that raises a number to a power, such as <bpt id="p1">&lt;c&gt;</bpt>(a ^ b)<ept id="p1">&lt;/c&gt;</ept> in Visual Basic.</source>
          <target state="translated">Uma operação matemática que eleva um número a uma potência, tal como <bpt id="p1">&lt;c&gt;</bpt>(a ^ b)<ept id="p1">&lt;/c&gt;</ept> no Visual Basic.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.PowerAssign">
          <source>A compound assignment operation that raises a number to a power, such as <bpt id="p1">&lt;c&gt;</bpt>(a ^= b)<ept id="p1">&lt;/c&gt;</ept> in Visual Basic.</source>
          <target state="translated">Uma operação de atribuição composta que eleva um número a uma potência, tal como <bpt id="p1">&lt;c&gt;</bpt>(a ^= b)<ept id="p1">&lt;/c&gt;</ept> no Visual Basic.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.PreDecrementAssign">
          <source>A unary prefix decrement, such as <bpt id="p1">&lt;c&gt;</bpt>(--a)<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Um decremento de prefixo unário, tal como <bpt id="p1">&lt;c&gt;</bpt>(--a)<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.PreDecrementAssign">
          <source>The object <bpt id="p1">&lt;c&gt;</bpt>a<ept id="p1">&lt;/c&gt;</ept> should be modified in place.</source>
          <target state="translated">O objeto <bpt id="p1">&lt;c&gt;</bpt>a<ept id="p1">&lt;/c&gt;</ept> deve ser modificado no lugar.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.PreIncrementAssign">
          <source>A unary prefix increment, such as <bpt id="p1">&lt;c&gt;</bpt>(++a)<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Um incremento de prefixo unário, como <bpt id="p1">&lt;c&gt;</bpt>(++a)<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.PreIncrementAssign">
          <source>The object <bpt id="p1">&lt;c&gt;</bpt>a<ept id="p1">&lt;/c&gt;</ept> should be modified in place.</source>
          <target state="translated">O objeto <bpt id="p1">&lt;c&gt;</bpt>a<ept id="p1">&lt;/c&gt;</ept> deve ser modificado no lugar.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Quote">
          <source>An expression that has a constant value of type <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>.</source>
          <target state="translated">Uma expressão que tem um valor constante do tipo <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Quote">
          <source>A <ph id="ph1">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Quote" /&gt;</ph> node can contain references to parameters that are defined in the context of the expression it represents.</source>
          <target state="translated">Um nó <ph id="ph1">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Quote" /&gt;</ph> pode conter referências a parâmetros que são definidas no contexto da expressão que ele representa.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.RightShift">
          <source>A bitwise right-shift operation, such as <bpt id="p1">&lt;c&gt;</bpt>(a <ph id="ph1">&amp;gt;</ph><ph id="ph2">&amp;gt;</ph> b)<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Uma operação bit a bit de deslocamento à direita, tal como <bpt id="p1">&lt;c&gt;</bpt>(a <ph id="ph1">&amp;gt;</ph><ph id="ph2">&amp;gt;</ph> b)<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.RightShiftAssign">
          <source>A bitwise right-shift compound assignment operation, such as <bpt id="p1">&lt;c&gt;</bpt>(a <ph id="ph1">&amp;gt;</ph><ph id="ph2">&amp;gt;</ph>= b)<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Uma operação de atribuição composta de deslocamento à direita, tal como <bpt id="p1">&lt;c&gt;</bpt>(a <ph id="ph1">&amp;gt;</ph><ph id="ph2">&amp;gt;</ph>= b)<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.RuntimeVariables">
          <source>A list of run-time variables.</source>
          <target state="translated">Uma lista de variáveis de tempo de execução.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.RuntimeVariables">
          <source>For more information, see <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /&gt;</ph>.</source>
          <target state="translated">Para obter mais informações, consulte <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Subtract">
          <source>A subtraction operation, such as <bpt id="p1">&lt;c&gt;</bpt>(a - b)<ept id="p1">&lt;/c&gt;</ept>, without overflow checking, for numeric operands.</source>
          <target state="translated">Uma operação de subtração como <bpt id="p1">&lt;c&gt;</bpt>(a – b)<ept id="p1">&lt;/c&gt;</ept>, sem verificação de estouro, para operandos numéricos.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.SubtractAssign">
          <source>A subtraction compound assignment operation, such as <bpt id="p1">&lt;c&gt;</bpt>(a -= b)<ept id="p1">&lt;/c&gt;</ept>, without overflow checking, for numeric operands.</source>
          <target state="translated">Uma operação de subtração de atribuição composta como <bpt id="p1">&lt;c&gt;</bpt>(a -= b)<ept id="p1">&lt;/c&gt;</ept>, sem verificação de estouro, para operandos numéricos.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked">
          <source>A subtraction compound assignment operation, such as <bpt id="p1">&lt;c&gt;</bpt>(a -= b)<ept id="p1">&lt;/c&gt;</ept>, that has overflow checking, for numeric operands.</source>
          <target state="translated">Uma operação de subtração de atribuição composta como <bpt id="p1">&lt;c&gt;</bpt>(a -= b)<ept id="p1">&lt;/c&gt;</ept>, com verificação de estouro, para operandos numéricos.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.SubtractChecked">
          <source>An arithmetic subtraction operation, such as <bpt id="p1">&lt;c&gt;</bpt>(a - b)<ept id="p1">&lt;/c&gt;</ept>, that has overflow checking, for numeric operands.</source>
          <target state="translated">Uma operação aritmética de subtração, como <bpt id="p1">&lt;c&gt;</bpt>(a – b)<ept id="p1">&lt;/c&gt;</ept>, com verificação de estouro, para operandos numéricos.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Switch">
          <source>A switch operation, such as <ph id="ph1">&lt;see langword="switch" /&gt;</ph> in C# or <ph id="ph2">&lt;see langword="Select Case" /&gt;</ph> in Visual Basic.</source>
          <target state="translated">Uma operação do comutador, como <ph id="ph1">&lt;see langword="switch" /&gt;</ph> em C# ou <ph id="ph2">&lt;see langword="Select Case" /&gt;</ph> no Visual Basic.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Throw">
          <source>An operation that throws an exception, such as <bpt id="p1">&lt;c&gt;</bpt>throw new Exception()<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Uma operação que gera uma exceção, tal como <bpt id="p1">&lt;c&gt;</bpt>throw new Exception()<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Try">
          <source>A <ph id="ph1">&lt;see langword="try-catch" /&gt;</ph> expression.</source>
          <target state="translated">Uma expressão <ph id="ph1">&lt;see langword="try-catch" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.TypeAs">
          <source>An explicit reference or boxing conversion in which <ph id="ph1">&lt;see langword="null" /&gt;</ph> is supplied if the conversion fails, such as <bpt id="p1">&lt;c&gt;</bpt>(obj as SampleType)<ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>TryCast(obj, SampleType)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic.</source>
          <target state="translated">Uma referência explícita ou conversão boxing na qual <ph id="ph1">&lt;see langword="null" /&gt;</ph> será fornecido se a conversão falhar, como <bpt id="p1">&lt;c&gt;</bpt>(obj as SampleType)<ept id="p1">&lt;/c&gt;</ept> em C# ou <bpt id="p2">&lt;c&gt;</bpt>TryCast(obj, SampleType)<ept id="p2">&lt;/c&gt;</ept> no Visual Basic.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.TypeEqual">
          <source>An exact type test.</source>
          <target state="translated">Um teste de tipo exato.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.TypeIs">
          <source>A type test, such as <bpt id="p1">&lt;c&gt;</bpt>obj is SampleType<ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>TypeOf obj is SampleType<ept id="p2">&lt;/c&gt;</ept> in Visual Basic.</source>
          <target state="translated">Um tipo de teste, tal como <bpt id="p1">&lt;c&gt;</bpt>obj is SampleType<ept id="p1">&lt;/c&gt;</ept> em C# ou <bpt id="p2">&lt;c&gt;</bpt>TypeOf obj is SampleType<ept id="p2">&lt;/c&gt;</ept> no Visual Basic.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.UnaryPlus">
          <source>A unary plus operation, such as <bpt id="p1">&lt;c&gt;</bpt>(+a)<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Uma operação de mais unária, tal como <bpt id="p1">&lt;c&gt;</bpt>(+a)<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.UnaryPlus">
          <source>The result of a predefined unary plus operation is the value of the operand, but user-defined implementations might have unusual results.</source>
          <target state="translated">O resultado de uma operação de mais unária predefinida é o valor do operando, mas implementações definidas pelo usuário podem ter resultados incomuns.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Unbox">
          <source>An unbox value type operation, such as <ph id="ph1">&lt;see langword="unbox" /&gt;</ph> and <ph id="ph2">&lt;see langword="unbox.any" /&gt;</ph> instructions in MSIL.</source>
          <target state="translated">Uma operação do tipo valor de unbox, como instruções <ph id="ph1">&lt;see langword="unbox" /&gt;</ph> e <ph id="ph2">&lt;see langword="unbox.any" /&gt;</ph> no MSIL.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>