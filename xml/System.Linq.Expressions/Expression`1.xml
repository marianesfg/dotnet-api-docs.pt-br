<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Expression`1.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5852b4062c851ab4301c9efb34c1ebacc0ca1b9fe.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">852b4062c851ab4301c9efb34c1ebacc0ca1b9fe</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.Expression`1">
          <source>The type of the delegate that the <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression`1" /&gt;</ph> represents.</source>
          <target state="translated">O tipo do delegado que o <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression`1" /&gt;</ph> representa.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression`1">
          <source>Represents a strongly typed lambda expression as a data structure in the form of an expression tree.</source>
          <target state="translated">Representa uma expressão lambda fortemente tipada como uma estrutura de dados na forma de uma árvore de expressão.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression`1">
          <source>This class cannot be inherited.</source>
          <target state="translated">Essa classe não pode ser herdada.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.Expression`1">
          <source>When a lambda expression is assigned to a variable, field, or parameter whose type is <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>, the compiler emits instructions to build an expression tree.</source>
          <target state="translated">Quando uma expressão lambda é atribuída a uma variável, um campo ou um parâmetro cujo tipo é <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>, o compilador emite as instruções para criar uma árvore de expressão.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.Expression`1">
          <source>A conversion from a lambda expression to type <ph id="ph1">`Expression&lt;D&gt;`</ph> (<ph id="ph2">`Expression(Of D)`</ph> in Visual Basic) exists if a conversion from the lambda expression to a delegate of type <ph id="ph3">`D`</ph> exists.</source>
          <target state="translated">Uma conversão de uma expressão lambda para o tipo <ph id="ph1">`Expression&lt;D&gt;`</ph> (<ph id="ph2">`Expression(Of D)`</ph> no Visual Basic) se houver uma conversão de expressão lambda em um delegate do tipo <ph id="ph3">`D`</ph> existe.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.Expression`1">
          <source>However, the conversion may fail, for example, if the body of the lambda expression is a block.</source>
          <target state="translated">No entanto, a conversão pode falhar, por exemplo, se o corpo da expressão lambda é um bloco.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.Expression`1">
          <source>This means that delegates and expression trees behave similarly with regard to overload resolution.</source>
          <target state="translated">Isso significa que delegados e árvores de expressão se comportam da mesma forma em relação a resolução de sobrecarga.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.Expression`1">
          <source>The expression tree is an in-memory data representation of the lambda expression.</source>
          <target state="translated">A árvore de expressão é uma representação de dados na memória da expressão lambda.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.Expression`1">
          <source>The expression tree makes the structure of the lambda expression transparent and explicit.</source>
          <target state="translated">A árvore de expressão torna a estrutura da expressão lambda explícita e transparente.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.Expression`1">
          <source>You can interact with the data in the expression tree just as you can with any other data structure.</source>
          <target state="translated">Você pode interagir com os dados na árvore de expressão, exatamente como faria com qualquer outra estrutura de dados.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.Expression`1">
          <source>The ability to treat expressions as data structures enables APIs to receive user code in a format that can be inspected, transformed, and processed in a custom manner.</source>
          <target state="translated">A capacidade para tratar as expressões como estruturas de dados permite APIs receber o código do usuário em um formato que pode ser inspecionado, transformado e processado de maneira personalizada.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.Expression`1">
          <source>For example, the <ph id="ph1">[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]</ph> data access implementation uses this facility to translate expression trees to Transact-SQL statements that can be evaluated by the database.</source>
          <target state="translated">Por exemplo, o <ph id="ph1">[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]</ph> implementação de acesso de dados usa esse recurso para traduzir árvores de expressão para instruções Transact-SQL que podem ser avaliadas pelo banco de dados.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.Expression`1">
          <source>Many standard query operators defined in the <ph id="ph1">&lt;xref:System.Linq.Queryable&gt;</ph> class have one or more parameters of type <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Muitos operadores de consulta padrão definidas no <ph id="ph1">&lt;xref:System.Linq.Queryable&gt;</ph> classe tem um ou mais parâmetros de tipo <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.Expression`1">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt;</ph> of an <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> is <ph id="ph3">&lt;xref:System.Linq.Expressions.ExpressionType.Lambda&gt;</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt;</ph> de um <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> é <ph id="ph3">&lt;xref:System.Linq.Expressions.ExpressionType.Lambda&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.Expression`1">
          <source>Use the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Lambda%60%601%28System.Linq.Expressions.Expression%2CSystem.Collections.Generic.IEnumerable%7BSystem.Linq.Expressions.ParameterExpression%7D%29&gt;</ph> or <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression.Lambda%60%601%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.ParameterExpression%5B%5D%29&gt;</ph> method to create an <ph id="ph3">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> object.</source>
          <target state="translated">Use o <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Lambda%60%601%28System.Linq.Expressions.Expression%2CSystem.Collections.Generic.IEnumerable%7BSystem.Linq.Expressions.ParameterExpression%7D%29&gt;</ph> ou <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression.Lambda%60%601%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.ParameterExpression%5B%5D%29&gt;</ph> método para criar um <ph id="ph3">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.Expression`1">
          <source>The following code example demonstrates how to represent a lambda expression both as executable code in the form of a delegate and as data in the form of an expression tree.</source>
          <target state="translated">O exemplo de código a seguir demonstra como representar uma expressão lambda como código executável na forma de um delegado e dados na forma de uma árvore de expressão.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.Expression`1">
          <source>It also demonstrates how to turn the expression tree back into executable code by using the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601.Compile%2A&gt;</ph> method.</source>
          <target state="translated">Ele também demonstra como transformar a árvore de expressão de volta em código executável usando o <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601.Compile%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression`1.Compile">
          <source>Compiles the lambda expression described by the expression tree into executable code and produces a delegate that represents the lambda expression.</source>
          <target state="translated">Compila a expressão lambda descrita pela árvore de expressão em um código executável e produz um delegado que representa a expressão lambda.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression`1.Compile">
          <source>A delegate of type <ph id="ph1">&lt;paramref name="TDelegate" /&gt;</ph> that represents the compiled lambda expression described by the <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.Expression`1" /&gt;</ph>.</source>
          <target state="translated">Um delegado do tipo <ph id="ph1">&lt;paramref name="TDelegate" /&gt;</ph> que representa a expressão lambda compilada descrita pelo <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.Expression`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression`1.Compile">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601.Compile%2A&gt;</ph> method produces a delegate of type <ph id="ph2">`TDelegate`</ph> at runtime.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601.Compile%2A&gt;</ph> método produz um delegate do tipo <ph id="ph2">`TDelegate`</ph> em tempo de execução.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression`1.Compile">
          <source>When that delegate is executed, it has the behavior described by the semantics of the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Quando esse delegado é executado, ele tem o comportamento descrito para a semântica do <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression`1.Compile">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601.Compile%2A&gt;</ph> method can be used to obtain the value of any expression tree.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601.Compile%2A&gt;</ph> método pode ser usado para obter o valor de qualquer árvore de expressão.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression`1.Compile">
          <source>First, create a lambda expression that has the expression as its body by using the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Lambda%2A&gt;</ph> method.</source>
          <target state="translated">Primeiro, crie uma expressão lambda que contém a expressão como corpo usando o <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Lambda%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression`1.Compile">
          <source>Then call <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601.Compile%2A&gt;</ph> to obtain a delegate, and execute the delegate to obtain the value of the expression.</source>
          <target state="translated">Em seguida, chame <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601.Compile%2A&gt;</ph> para obter um delegado e executar o representante para obter o valor da expressão.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression`1.Compile">
          <source>The following code example demonstrates how <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601.Compile%2A&gt;</ph> is used to execute an expression tree.</source>
          <target state="translated">O exemplo de código a seguir demonstra como <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601.Compile%2A&gt;</ph> é usada para executar uma árvore de expressão.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression`1.Compile(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the expression should be compiled to an interpreted form, if it is available; <ph id="ph2">&lt;see langword="false" /&gt;</ph> otherwise.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> para indicar que a expressão deverá ser compilada em um formato interpretado, se ele estiver disponível; <ph id="ph2">&lt;see langword="false" /&gt;</ph> caso contrário.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression`1.Compile(System.Boolean)">
          <source>Compiles the lambda expression described by the expression tree into interpreted or compiled code and produces a delegate that represents the lambda expression.</source>
          <target state="translated">Compila a expressão lambda descrita pela árvore de expressão em um código interpretado ou compilado e produz um delegado que representa a expressão lambda.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression`1.Compile(System.Boolean)">
          <source>A delegate that represents the compiled lambda expression described by the <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression`1" /&gt;</ph>.</source>
          <target state="translated">Um delegado que representa a expressão lambda compilada descrita pelo <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression`1.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)">
          <source>Debugging information generator used by the compiler to mark sequence points and annotate local variables.</source>
          <target state="translated">O gerador de informações de depuração usado pelo compilador para marcar pontos de sequência e anotar as variáveis locais.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression`1.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)">
          <source>Produces a delegate that represents the lambda expression.</source>
          <target state="translated">Produz um delegado que representa a expressão lambda.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression`1.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)">
          <source>A delegate containing the compiled version of the lambda.</source>
          <target state="translated">Um delegado que contém a versão compilada da expressão lambda.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression`1.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> property of the result.</source>
          <target state="translated">A propriedade <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> do resultado.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression`1.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> property of the result.</source>
          <target state="translated">A propriedade <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> do resultado.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression`1.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>Creates a new expression that is like this one, but using the supplied children.</source>
          <target state="translated">Cria uma nova expressão que é parecida com esta, mas usando os filhos fornecidos.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression`1.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>If all of the children are the same, it will return this expression.</source>
          <target state="translated">Se todos os filhos forem os mesmos, ela retornará esta expressão.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression`1.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>This expression if no children are changed or an expression with the updated children.</source>
          <target state="translated">Essa expressão se nenhum filho foi alterado ou uma expressão com os filhos atualizados.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>