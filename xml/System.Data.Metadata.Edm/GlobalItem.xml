<Type Name="GlobalItem" FullName="System.Data.Metadata.Edm.GlobalItem">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6ddb50744db9f61387cffbc6c62092192325ce8b" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36688101" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class GlobalItem : System.Data.Metadata.Edm.MetadataItem" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit GlobalItem extends System.Data.Metadata.Edm.MetadataItem" />
  <TypeSignature Language="DocId" Value="T:System.Data.Metadata.Edm.GlobalItem" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class GlobalItem&#xA;Inherits MetadataItem" />
  <TypeSignature Language="C++ CLI" Value="public ref class GlobalItem abstract : System::Data::Metadata::Edm::MetadataItem" />
  <TypeSignature Language="F#" Value="type GlobalItem = class&#xA;    inherit MetadataItem" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Metadata.Edm.MetadataItem</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="08941-101">Representa a classe do item base para todos os tipos de modelos conceituais e contêineres de entidade.</span>
      <span class="sxs-lookup">
        <span data-stu-id="08941-101">Represents the base item class for all the  conceptual model types and entity containers.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08941-102">Para obter mais informações, consulte [visão geral de hierarquia de tipo de metadados](http://msdn.microsoft.com/library/d2b18fe0-60a5-4a5c-940d-21d07e5165d4).</span><span class="sxs-lookup"><span data-stu-id="08941-102">For more information, see [Metadata Type Hierarchy Overview](http://msdn.microsoft.com/library/d2b18fe0-60a5-4a5c-940d-21d07e5165d4).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="08941-103">O exemplo de código a seguir demonstra como obter um espaço de trabalho de metadados da conexão e, em seguida, usar esse espaço de trabalho de metadados para procurar a hierarquia de tipo de metadados.</span><span class="sxs-lookup"><span data-stu-id="08941-103">The following code sample demonstrates how to get a metadata workspace from the connection and then use that metadata workspace to browse the metadata type hierarchy.</span></span> <span data-ttu-id="08941-104">Observe que o espaço de trabalho de metadados é um componente de serviço de tempo de execução que oferece suporte para recuperação de metadados.</span><span class="sxs-lookup"><span data-stu-id="08941-104">Note that the metadata workspace is a runtime service component that provides support for retrieving metadata.</span></span>  
  
 <span data-ttu-id="08941-105">O exemplo de código usa um <xref:System.Data.Metadata.Edm.DataSpace.CSpace> para especificar o modelo.</span><span class="sxs-lookup"><span data-stu-id="08941-105">The code sample uses a <xref:System.Data.Metadata.Edm.DataSpace.CSpace> to specify the model.</span></span> <span data-ttu-id="08941-106">O <xref:System.Data.Metadata.Edm.DataSpace.CSpace> representa o nome padrão para o modelo conceitual.</span><span class="sxs-lookup"><span data-stu-id="08941-106">The <xref:System.Data.Metadata.Edm.DataSpace.CSpace> represents the default name for the conceptual model.</span></span> <span data-ttu-id="08941-107">O exemplo de código usa a cadeia de conexão que é fornecida no arquivo de configuração do aplicativo.</span><span class="sxs-lookup"><span data-stu-id="08941-107">The code sample uses the connection string that is provided in the application config file.</span></span> <span data-ttu-id="08941-108">Para obter um exemplo do arquivo de configuração do aplicativo, consulte [modelo de objeto do Adventure Works em aplicativos (EDM)](http://msdn.microsoft.com/library/84c01270-90ba-467b-ad24-df10c1ca8f45).</span><span class="sxs-lookup"><span data-stu-id="08941-108">For an example of the application config file, see [Adventure Works Object Model in Applications (EDM)](http://msdn.microsoft.com/library/84c01270-90ba-467b-ad24-df10c1ca8f45).</span></span>  
  
```csharp  
using System;  
using System.Data;  
using System.Data.EntityClient;  
using System.Data.Metadata.Edm;  
using System.Collections.ObjectModel;  
  
class BrowseTypes  
{  
  static void Main()  
  {  
    try  
    {  
      // Establish a connection to the underlying data provider by  
      // using the connection string specified in the config file.  
      using (EntityConnection connection =  
             new EntityConnection("Name=AdventureworksContext"))  
      {  
         // Access the metadata workspace.  
         MetadataWorkspace workspace =   
              connection.GetMetadataWorkspace();  
         // Browse the metadata type hierarchy.  
         BrowseTypesExample(workspace);  
      }  
    }  
    catch (MetadataException exceptionMetadata)  
    {  
       Console.WriteLine("MetadataException: {0}",  
                         exceptionMetadata.Message);  
     }  
     catch (System.Data.MappingException exceptionMapping)  
     {  
        Console.WriteLine("MappingException: {0}",  
                          exceptionMapping.Message);  
     }  
  }  
  
  private static void BrowseTypesExample(MetadataWorkspace workspace)  
  {  
    // Get a collection of the GlobalItems.   
    // An GlobalItem class is the base class for   
    // the conceptual model types and entity containers.  
    ReadOnlyCollection<GlobalItem> items =   
         workspace.GetItems<GlobalItem>(DataSpace.CSpace);  
  
    // Iterate through the collection to get each item.  
    foreach (GlobalItem item in items)  
    {  
       Console.WriteLine(  
           "Item BuiltInTypeKind: {0}, Type: {1} ",   
           item.BuiltInTypeKind, item.GetType().FullName);  
  
       EntityContainer entityContainer = item as EntityContainer;  
       if (entityContainer != null)  
       {  
          Console.WriteLine(  
               "EntityContainer Name: {0}",  
               entityContainer.Name);  
          continue;  
       }  
  
       EntityType entityType = item as EntityType;  
       if (entityType != null)  
       {  
         Console.WriteLine(  
             "EntityType Name: {0}, Namespace: {1}",  
             entityType.Name, entityType.NamespaceName);  
        continue;  
       }  
  
       AssociationType associationType = item as AssociationType;  
       if (associationType != null)  
       {  
          Console.WriteLine(  
             "AssociationType Name: {0}, Namespace: {1}",  
             associationType.Name, associationType.NamespaceName);  
          continue;  
       }  
  
       PrimitiveType primType = item as PrimitiveType;  
       if (primType != null)  
       {  
         Console.WriteLine(  
             "PrimitiveType Name: {0}, Namespace: {1}",   
             primType.Name, primType.NamespaceName);  
         continue;  
       }  
  
       EdmFunction function = item as EdmFunction;  
       if (function != null)  
       {  
         Console.WriteLine(  
           "EdmFunction Name: {0}, Namespace: {1}",  
           function.Name, function.NamespaceName);  
         continue;  
       }  
    }  
  }  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>