<Type Name="TransactionMessageProperty" FullName="System.ServiceModel.Channels.TransactionMessageProperty">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1236e8ad18181b960065ffd385981cffe0faa4da" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30507280" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class TransactionMessageProperty" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit TransactionMessageProperty extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Channels.TransactionMessageProperty" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TransactionMessageProperty" />
  <TypeSignature Language="C++ CLI" Value="public ref class TransactionMessageProperty sealed" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Permite que um canal personalizado, que usa um mecanismo de fluxo de transação proprietárias, insira sua transação o Framework do Windows Communication Foundation (WCF). Essa classe não pode ser herdada.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa classe permite que os desenvolvedores de canal de terceiros que usam um mecanismo de fluxo de transação de proprietário para o canal, para apresentar suas transações na estrutura de ServiceModel. A transação é usada ao executar o método de serviço. Esse mecanismo não pode ser usado em conjunto com o <xref:System.ServiceModel.TransactionFlowAttribute>.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public static void Set (System.Transactions.Transaction transaction, System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Set(class System.Transactions.Transaction transaction, class System.ServiceModel.Channels.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.TransactionMessageProperty.Set(System.Transactions.Transaction,System.ServiceModel.Channels.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Set(System::Transactions::Transaction ^ transaction, System::ServiceModel::Channels::Message ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Transactions.Transaction" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
      </Parameters>
      <Docs>
        <param name="transaction">A transação que será usada ao executar o método de serviço.</param>
        <param name="message">A mensagem de entrada que resulta em chamar o método de serviço.</param>
        <summary>Define a transação que será usada ao executar o método de serviço.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um canal de entrada personalizado (que faz parte da pilha de canais do serviço) pode chamar esse método para adicionar um <xref:System.ServiceModel.Channels.TransactionMessageProperty>, que contém o `transaction` parâmetro, como o `Properties` coleção do `message` parâmetro. Isso solicitará a infraestrutura para criar um <xref:System.Transactions.TransactionScope> instância usando a transação aprovada, antes de chamar o método de serviço solicitado na mensagem de entrada. O método de serviço deve ter o <xref:System.ServiceModel.OperationBehaviorAttribute.TransactionScopeRequired%2A> propriedade definida como `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ServiceModel.FaultException">A propriedade já foi definida em <paramref name="message" />.</exception>
        <exception cref="T:System.Transactions.TransactionException">
          <paramref name="transaction" /> precisa ser desempacotada e que a operação falhará.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transaction">
      <MemberSignature Language="C#" Value="public System.Transactions.Transaction Transaction { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Transactions.Transaction Transaction" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Channels.TransactionMessageProperty.Transaction" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Transaction As Transaction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Transactions::Transaction ^ Transaction { System::Transactions::Transaction ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Transactions.Transaction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém a transação que será usada ao executar o método de serviço.</summary>
        <value>Um <see cref="T:System.Transactions.Transaction" /> instância que será usada ao executar o método de serviço.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>