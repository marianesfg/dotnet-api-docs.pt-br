<Type Name="IInputChannel" FullName="System.ServiceModel.Channels.IInputChannel">
  <TypeSignature Language="C#" Value="public interface IInputChannel : System.ServiceModel.Channels.IChannel" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInputChannel implements class System.ServiceModel.Channels.IChannel, class System.ServiceModel.ICommunicationObject" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Channels.IInputChannel" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInputChannel&#xA;Implements IChannel" />
  <TypeSignature Language="C++ CLI" Value="public interface class IInputChannel : System::ServiceModel::Channels::IChannel" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ServiceModel.Channels.IChannel</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="c5244-101">Define a interface que um canal deve implementar para receber uma mensagem.</span><span class="sxs-lookup"><span data-stu-id="c5244-101">Defines the interface that a channel must implement to receive a message.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5244-102">O <xref:System.ServiceModel.Channels.IInputChannel> contrato inclui síncronas e assíncronas variantes de recebimento, funcionalidade tente para receber e de espera de mensagem.</span><span class="sxs-lookup"><span data-stu-id="c5244-102">The <xref:System.ServiceModel.Channels.IInputChannel> contract includes synchronous and asynchronous variants of receive, try-to-receive and wait-for-a-message functionality.</span></span>  
  
 <span data-ttu-id="c5244-103">O modelo de pull é usado normalmente com um <xref:System.ServiceModel.Channels.IInputChannel> para receber mensagens: chamar <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> (para uma mensagem fora do canal de "pull") e, em seguida, aguarde a chegada de uma mensagem.</span><span class="sxs-lookup"><span data-stu-id="c5244-103">The pull model is used typically with an <xref:System.ServiceModel.Channels.IInputChannel> to receive messages: you call <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> (to "pull" a message out of the channel) and then wait for a message to arrive.</span></span> <span data-ttu-id="c5244-104">Um padrão de uso alternativo é chamar <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> ou <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>e, em seguida, chame <xref:System.ServiceModel.Channels.IInputChannel.Receive%28System.TimeSpan%29>.</span><span class="sxs-lookup"><span data-stu-id="c5244-104">An alternative usage pattern is to call <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> or <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>, and then call <xref:System.ServiceModel.Channels.IInputChannel.Receive%28System.TimeSpan%29>.</span></span> <span data-ttu-id="c5244-105">Essa abordagem é comum para usos transacionais, onde você pode iniciar a transação entre as chamadas para <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> e <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>.</span><span class="sxs-lookup"><span data-stu-id="c5244-105">This approach is common for transactional usages where you start the transaction between the calls to <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> and <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>.</span></span>  
  
 <span data-ttu-id="c5244-106">Um <xref:System.ServiceModel.Channels.IInputChannel> não é necessariamente associado a um único remetente.</span><span class="sxs-lookup"><span data-stu-id="c5244-106">An <xref:System.ServiceModel.Channels.IInputChannel> is not necessarily bound to a single sender.</span></span> <span data-ttu-id="c5244-107">Outras interfaces de canal e canais podem fornecer uma correlação entre remetentes específicos e um <xref:System.ServiceModel.Channels.IInputChannel>, mas nenhuma restrição faz com que o contrato básico.</span><span class="sxs-lookup"><span data-stu-id="c5244-107">Other channels and channel interfaces can provide a correlation between particular senders and an <xref:System.ServiceModel.Channels.IInputChannel>, but the base contract makes no such restriction.</span></span> <span data-ttu-id="c5244-108">Uma implementação pode criar um novo <xref:System.ServiceModel.Channels.IInputChannel> para cada mensagem ou reutilizar o mesmo <xref:System.ServiceModel.Channels.IInputChannel> para vários remetentes e mensagens.</span><span class="sxs-lookup"><span data-stu-id="c5244-108">An implementation can create a new <xref:System.ServiceModel.Channels.IInputChannel> for each message or reuse the same <xref:System.ServiceModel.Channels.IInputChannel> for multiple messages and senders.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="BeginReceive">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c5244-109">Inicia uma operação de recebimento assíncrona.</span><span class="sxs-lookup"><span data-stu-id="c5244-109">Begins an asynchronous receive operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5244-110">Use o assíncrona <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> método quando desejar que o processamento do aplicativo para continuar sem aguardar a solicitação a ser recebida.</span><span class="sxs-lookup"><span data-stu-id="c5244-110">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> method when you want the application processing to continue without waiting for the request to be received.</span></span> <span data-ttu-id="c5244-111">Use o síncrona <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> método quando ele é aceitável para o thread atual a ser bloqueada até que a mensagem de solicitação é recebida ou o intervalo de tempo especificado pelo `timeout` foi excedido.</span><span class="sxs-lookup"><span data-stu-id="c5244-111">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> method when it is acceptable for the current thread to be blocked until the request message is received or the interval of time specified by the `timeout` has been exceeded.</span></span> <span data-ttu-id="c5244-112">A operação assíncrona está disponível com ou sem um tempo limite explícito.</span><span class="sxs-lookup"><span data-stu-id="c5244-112">The asynchronous operation is available with or without an explicit timeout.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceive (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginReceive(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceive (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceive(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="c5244-113">O delegado de <see cref="T:System.AsyncCallback" /> que receberá a notificação da conclusão da operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="c5244-113">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation completion.</span></span></param>
        <param name="state"><span data-ttu-id="c5244-114">Um objeto, especificado pelo aplicativo, que contém informações associadas à operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="c5244-114">An object, specified by the application, that contains state information associated with the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="c5244-115">Inicia uma operação assíncrona para receber uma mensagem que tem um objeto de estado associado.</span><span class="sxs-lookup"><span data-stu-id="c5244-115">Begins an asynchronous operation to receive a message that has a state object associated with it.</span></span></summary>
        <returns><span data-ttu-id="c5244-116">O <see cref="T:System.IAsyncResult" /> que faz referência à recepção de mensagens assíncronas.</span><span class="sxs-lookup"><span data-stu-id="c5244-116">The <see cref="T:System.IAsyncResult" /> that references the asynchronous message reception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5244-117">Use o assíncrona <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> método quando desejar que o processamento do aplicativo para continuar sem aguardar a solicitação a ser recebida.</span><span class="sxs-lookup"><span data-stu-id="c5244-117">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> method when you want the application processing to continue without waiting for the request to be received.</span></span> <span data-ttu-id="c5244-118">Use o síncrona <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> método quando ele é aceitável para o thread atual a ser bloqueada até que a mensagem de solicitação é recebida ou o intervalo de tempo especificado pelo `timeout` foi excedido.</span><span class="sxs-lookup"><span data-stu-id="c5244-118">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> method when it is acceptable for the current thread to be blocked until the request message is received or the interval of time specified by the `timeout` has been exceeded.</span></span> <span data-ttu-id="c5244-119">A operação assíncrona está disponível com ou sem um tempo limite explícito.</span><span class="sxs-lookup"><span data-stu-id="c5244-119">The asynchronous operation is available with or without an explicit timeout.</span></span>  
  
 <span data-ttu-id="c5244-120">Este método recebe notificação por meio de um retorno de chamada da identidade do manipulador de eventos para a operação.</span><span class="sxs-lookup"><span data-stu-id="c5244-120">This method receives notification, through a callback, of the identity of the event handler for the operation.</span></span> <span data-ttu-id="c5244-121">A operação não é completa até que uma mensagem esteja disponível no canal.</span><span class="sxs-lookup"><span data-stu-id="c5244-121">The operation is not complete until a message becomes available in the channel.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5244-122">O código a seguir ilustra como implementar esse método:</span><span class="sxs-lookup"><span data-stu-id="c5244-122">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#15](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceive (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginReceive(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceive (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceive(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="c5244-123">O <see cref="T:System.TimeSpan" /> especifica o intervalo de tempo durante o qual aguardar a disponibilidade de uma mensagem.</span><span class="sxs-lookup"><span data-stu-id="c5244-123">The <see cref="T:System.TimeSpan" /> that specifies the interval of time to wait for a message to become available.</span></span></param>
        <param name="callback"><span data-ttu-id="c5244-124">O delegado de <see cref="T:System.AsyncCallback" /> que receberá a notificação da conclusão da operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="c5244-124">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation completion.</span></span></param>
        <param name="state"><span data-ttu-id="c5244-125">Um objeto, especificado pelo aplicativo, que contém informações associadas à operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="c5244-125">An object, specified by the application, that contains state information associated with the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="c5244-126">Inicia uma operação assíncrona para receber uma mensagem que tem um tempo limite e um objeto de estado especificados associados.</span><span class="sxs-lookup"><span data-stu-id="c5244-126">Begins an asynchronous operation to receive a message that has a specified time out and state object associated with it.</span></span></summary>
        <returns><span data-ttu-id="c5244-127">O <see cref="T:System.IAsyncResult" /> que referencia a operação de recebimento assíncrona.</span><span class="sxs-lookup"><span data-stu-id="c5244-127">The <see cref="T:System.IAsyncResult" /> that references the asynchronous receive operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5244-128">Use o assíncrona <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> método quando desejar que o processamento do aplicativo para continuar sem aguardar a solicitação a ser recebida.</span><span class="sxs-lookup"><span data-stu-id="c5244-128">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> method when you want the application processing to continue without waiting for the request to be received.</span></span> <span data-ttu-id="c5244-129">Use o síncrona <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> método quando ele é aceitável para o thread atual a ser bloqueada até que a mensagem de solicitação é recebida ou o intervalo de tempo especificado pelo `timeout` foi excedido.</span><span class="sxs-lookup"><span data-stu-id="c5244-129">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> method when it is acceptable for the current thread to be blocked until the request message is received or the interval of time specified by the `timeout` has been exceeded.</span></span> <span data-ttu-id="c5244-130">A operação assíncrona está disponível com ou sem um tempo limite explícito.</span><span class="sxs-lookup"><span data-stu-id="c5244-130">The asynchronous operation is available with or without an explicit timeout.</span></span>  
  
 <span data-ttu-id="c5244-131">A operação não é completa até que uma mensagem se torna disponível no canal ou o tempo limite seja atingido.</span><span class="sxs-lookup"><span data-stu-id="c5244-131">The operation is not complete until either a message becomes available in the channel or the time out occurs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5244-132">O código a seguir ilustra como implementar esse método:</span><span class="sxs-lookup"><span data-stu-id="c5244-132">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#16](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException"><span data-ttu-id="c5244-133">O <paramref name="timeout" /> especificado é ultrapassado antes que a operação seja concluída.</span><span class="sxs-lookup"><span data-stu-id="c5244-133">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c5244-134">O tempo limite especificado é menor que zero.</span><span class="sxs-lookup"><span data-stu-id="c5244-134">The timeout specified is less than zero.</span></span></exception>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="c5244-135">A operação gerará um <see cref="T:System.TimeoutException" /> se especificado <paramref name="timeout" /> for excedido antes de ser concluída.</span><span class="sxs-lookup"><span data-stu-id="c5244-135">The operation throws a <see cref="T:System.TimeoutException" /> if the specified <paramref name="timeout" /> is exceeded before it completes.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="BeginTryReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginTryReceive (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginTryReceive(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginTryReceive (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginTryReceive(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="c5244-136">O <see cref="T:System.TimeSpan" /> especifica o intervalo de tempo durante o qual aguardar a disponibilidade de uma mensagem.</span><span class="sxs-lookup"><span data-stu-id="c5244-136">The <see cref="T:System.TimeSpan" /> that specifies the interval of time to wait for a message to become available.</span></span></param>
        <param name="callback"><span data-ttu-id="c5244-137">O delegado de <see cref="T:System.AsyncCallback" /> que receberá a notificação da conclusão da operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="c5244-137">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation completion.</span></span></param>
        <param name="state"><span data-ttu-id="c5244-138">Um objeto, especificado pelo aplicativo, que contém informações associadas à operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="c5244-138">An object, specified by the application, that contains state information associated with the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="c5244-139">Inicia uma operação assíncrona para receber uma mensagem que tem um tempo limite e um objeto de estado especificados associados.</span><span class="sxs-lookup"><span data-stu-id="c5244-139">Begins an asynchronous operation to receive a message that has a specified time out and state object associated with it.</span></span></summary>
        <returns><span data-ttu-id="c5244-140">O <see cref="T:System.IAsyncResult" /> que referencia a operação de recebimento assíncrona.</span><span class="sxs-lookup"><span data-stu-id="c5244-140">The <see cref="T:System.IAsyncResult" /> that references the asynchronous receive operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5244-141">Use o assíncrona <xref:System.ServiceModel.Channels.IInputChannel.BeginTryReceive%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> método quando desejar que o processamento do aplicativo para continuar sem aguardar.</span><span class="sxs-lookup"><span data-stu-id="c5244-141">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginTryReceive%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method when you want the application processing to continue without waiting.</span></span> <span data-ttu-id="c5244-142">Use o síncrona <xref:System.ServiceModel.Channels.IInputChannel.TryReceive%28System.TimeSpan%2CSystem.ServiceModel.Channels.Message%40%29> método quando ele é aceitável para o thread atual a ser bloqueada enquanto ele responde à mensagem de solicitação ou até que o intervalo de tempo limite for excedido.</span><span class="sxs-lookup"><span data-stu-id="c5244-142">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.TryReceive%28System.TimeSpan%2CSystem.ServiceModel.Channels.Message%40%29> method when it is acceptable for the current thread to be blocked while it replies to the request message or until the timeout interval is exceeded.</span></span>  
  
 <span data-ttu-id="c5244-143">A operação não é completa até que uma mensagem se torna disponível no canal ou o tempo limite ocorre.</span><span class="sxs-lookup"><span data-stu-id="c5244-143">The operation is not complete until either a message becomes available in the channel or the timeout occurs.</span></span>  
  
 <span data-ttu-id="c5244-144">Se você for para lidar com tempos limite e não apenas gerar novamente ou encapsular o <xref:System.TimeoutException>, em seguida, você deve chamar <xref:System.ServiceModel.Channels.IInputChannel.BeginTryReceive%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> em vez de <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A>.</span><span class="sxs-lookup"><span data-stu-id="c5244-144">If you are going to handle timeouts and not just re-throw or wrap the <xref:System.TimeoutException>, then you should call <xref:System.ServiceModel.Channels.IInputChannel.BeginTryReceive%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> instead of <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A>.</span></span>  
  
 <span data-ttu-id="c5244-145">Se você não vai tratar tempos limite especialmente apenas chamar <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A>, caso contrário, você perde as informações de erro.</span><span class="sxs-lookup"><span data-stu-id="c5244-145">If you are not going to treat timeouts specially then just call <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A>, otherwise you lose error information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5244-146">O código a seguir ilustra como implementar esse método:</span><span class="sxs-lookup"><span data-stu-id="c5244-146">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#19](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException"><span data-ttu-id="c5244-147">O <paramref name="timeout" /> especificado é ultrapassado antes que a operação seja concluída.</span><span class="sxs-lookup"><span data-stu-id="c5244-147">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c5244-148">O tempo limite especificado é menor que zero.</span><span class="sxs-lookup"><span data-stu-id="c5244-148">The timeout specified is less than zero.</span></span></exception>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="c5244-149">A operação retorna <see langword="false" /> de <see cref="M:System.ServiceModel.Channels.IInputChannel.EndTryReceive(System.IAsyncResult,System.ServiceModel.Channels.Message@)" /> se especificado <paramref name="timeout" /> for excedido.</span><span class="sxs-lookup"><span data-stu-id="c5244-149">The operation returns <see langword="false" /> from <see cref="M:System.ServiceModel.Channels.IInputChannel.EndTryReceive(System.IAsyncResult,System.ServiceModel.Channels.Message@)" /> if the specified <paramref name="timeout" /> is exceeded.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="BeginWaitForMessage">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginWaitForMessage (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginWaitForMessage(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginWaitForMessage (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginWaitForMessage(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="c5244-150">O <see cref="T:System.TimeSpan" /> especifica o intervalo de tempo durante o qual aguardar a disponibilidade de uma mensagem.</span><span class="sxs-lookup"><span data-stu-id="c5244-150">The <see cref="T:System.TimeSpan" /> that specifies the interval of time to wait for a message to become available.</span></span></param>
        <param name="callback"><span data-ttu-id="c5244-151">O delegado de <see cref="T:System.AsyncCallback" /> que receberá a notificação da conclusão da operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="c5244-151">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation completion.</span></span></param>
        <param name="state"><span data-ttu-id="c5244-152">Um objeto, especificado pelo aplicativo, que contém informações associadas à operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="c5244-152">An object, specified by the application, that contains state information associated with the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="c5244-153">Inicia uma operação assíncrona para aguardar o recebimento de uma mensagem que tem um tempo limite e um objeto de estado especificados associados.</span><span class="sxs-lookup"><span data-stu-id="c5244-153">Begins an asynchronous wait-for-a-message-to-arrive operation that has a specified time out and state object associated with it.</span></span></summary>
        <returns><span data-ttu-id="c5244-154">O <see cref="T:System.IAsyncResult" /> que referencia a operação assíncrona para aguardar uma mensagem chegar.</span><span class="sxs-lookup"><span data-stu-id="c5244-154">The <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to wait for a message to arrive.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5244-155">Use o assíncrona <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> método se você precisar que o processamento do aplicativo para continuar sem esperar que a mensagem chegar.</span><span class="sxs-lookup"><span data-stu-id="c5244-155">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method if you need the application processing to continue without waiting for the message to arrive.</span></span> <span data-ttu-id="c5244-156">Use o síncrona <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> método quando ele é aceitável para o thread atual a ser bloqueado enquanto aguarda uma mensagem para chegar na fila.</span><span class="sxs-lookup"><span data-stu-id="c5244-156">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> method when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue.</span></span> <span data-ttu-id="c5244-157">O thread está bloqueado para cima especificado `timeout`.</span><span class="sxs-lookup"><span data-stu-id="c5244-157">The thread is blocked up to the specified `timeout`.</span></span>  
  
 <span data-ttu-id="c5244-158">Este método recebe notificação por meio de um retorno de chamada da identidade do manipulador de eventos para a operação.</span><span class="sxs-lookup"><span data-stu-id="c5244-158">This method receives notification, through a callback, of the identity of the event handler for the operation.</span></span> <span data-ttu-id="c5244-159">A operação não é completa até que uma mensagem se torna disponível no canal ou o tempo limite seja atingido.</span><span class="sxs-lookup"><span data-stu-id="c5244-159">The operation is not complete until either a message becomes available in the channel or the time out occurs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5244-160">O código a seguir ilustra como implementar esse método:</span><span class="sxs-lookup"><span data-stu-id="c5244-160">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#22](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException"><span data-ttu-id="c5244-161">O <paramref name="timeout" /> especificado é ultrapassado antes que a operação seja concluída.</span><span class="sxs-lookup"><span data-stu-id="c5244-161">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c5244-162">O tempo limite especificado é menor que zero.</span><span class="sxs-lookup"><span data-stu-id="c5244-162">The timeout specified is less than zero.</span></span></exception>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="c5244-163">A operação retorna <see langword="false" /> se especificado <paramref name="timeout" /> for excedido, não é uma exceção de tempo limite.</span><span class="sxs-lookup"><span data-stu-id="c5244-163">The operation returns <see langword="false" /> if the specified <paramref name="timeout" /> is exceeded, not a timeout exception.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="EndReceive">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.Message EndReceive (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.Message EndReceive(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.EndReceive(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceive (result As IAsyncResult) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::Message ^ EndReceive(IAsyncResult ^ result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="c5244-164">O <see cref="T:System.IAsyncResult" /> retornado por uma chamada para um dos métodos <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" />.</span><span class="sxs-lookup"><span data-stu-id="c5244-164">The <see cref="T:System.IAsyncResult" /> returned by a call to one of the <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /> methods.</span></span></param>
        <summary><span data-ttu-id="c5244-165">Conclui uma operação assíncrona para receber uma mensagem.</span><span class="sxs-lookup"><span data-stu-id="c5244-165">Completes an asynchronous operation to receive a message.</span></span></summary>
        <returns><span data-ttu-id="c5244-166">O <see cref="T:System.ServiceModel.Channels.Message" /> recebido.</span><span class="sxs-lookup"><span data-stu-id="c5244-166">The <see cref="T:System.ServiceModel.Channels.Message" /> received.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c5244-167">O código a seguir ilustra como implementar esse método:</span><span class="sxs-lookup"><span data-stu-id="c5244-167">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#17](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndTryReceive">
      <MemberSignature Language="C#" Value="public bool EndTryReceive (IAsyncResult result, out System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EndTryReceive(class System.IAsyncResult result, [out] class System.ServiceModel.Channels.Message&amp; message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.EndTryReceive(System.IAsyncResult,System.ServiceModel.Channels.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndTryReceive (result As IAsyncResult, ByRef message As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndTryReceive(IAsyncResult ^ result, [Runtime::InteropServices::Out] System::ServiceModel::Channels::Message ^ % message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="c5244-168">O <see cref="T:System.IAsyncResult" /> retornado por uma chamada ao método <see cref="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)" />.</span><span class="sxs-lookup"><span data-stu-id="c5244-168">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)" /> method.</span></span></param>
        <param name="message"><span data-ttu-id="c5244-169">O <see cref="T:System.ServiceModel.Channels.Message" /> recebido.</span><span class="sxs-lookup"><span data-stu-id="c5244-169">The <see cref="T:System.ServiceModel.Channels.Message" /> received.</span></span></param>
        <summary><span data-ttu-id="c5244-170">Conclui a operação assíncrona especificada para receber uma mensagem.</span><span class="sxs-lookup"><span data-stu-id="c5244-170">Completes the specified asynchronous operation to receive a message.</span></span></summary>
        <returns>
          <span data-ttu-id="c5244-171"><see langword="true" /> se uma mensagem for recebida antes que o intervalo de tempo especificado seja decorrido; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c5244-171"><see langword="true" /> if a message is received before the specified interval of time elapses; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c5244-172">O código a seguir ilustra como implementar esse método:</span><span class="sxs-lookup"><span data-stu-id="c5244-172">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#20](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndWaitForMessage">
      <MemberSignature Language="C#" Value="public bool EndWaitForMessage (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EndWaitForMessage(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.EndWaitForMessage(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndWaitForMessage (result As IAsyncResult) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndWaitForMessage(IAsyncResult ^ result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="c5244-173">O <see cref="T:System.IAsyncResult" /> que identifica a operação <see cref="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)" /> a ser concluída e da qual se deve receber um resultado final.</span><span class="sxs-lookup"><span data-stu-id="c5244-173">The <see cref="T:System.IAsyncResult" /> that identifies the <see cref="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)" /> operation to finish, and from which to retrieve an end result.</span></span></param>
        <summary><span data-ttu-id="c5244-174">Conclui a operação assíncrona de especificada de aguardar uma mensagem.</span><span class="sxs-lookup"><span data-stu-id="c5244-174">Completes the specified asynchronous wait-for-a-message operation.</span></span></summary>
        <returns>
          <span data-ttu-id="c5244-175"><see langword="true" /> se uma mensagem chegar antes que o <paramref name="timeout" /> seja excedido; caso contrário <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c5244-175"><see langword="true" /> if a message has arrived before the <paramref name="timeout" /> has been exceeded; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c5244-176">O código a seguir ilustra como implementar esse método:</span><span class="sxs-lookup"><span data-stu-id="c5244-176">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#23](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalAddress">
      <MemberSignature Language="C#" Value="public System.ServiceModel.EndpointAddress LocalAddress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.EndpointAddress LocalAddress" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Channels.IInputChannel.LocalAddress" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalAddress As EndpointAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::EndpointAddress ^ LocalAddress { System::ServiceModel::EndpointAddress ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.EndpointAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c5244-177">Obtém o endereço no qual o canal de entrada recebe mensagens.</span><span class="sxs-lookup"><span data-stu-id="c5244-177">Gets the address on which the input channel receives messages.</span></span></summary>
        <value><span data-ttu-id="c5244-178">O <see cref="T:System.ServiceModel.EndpointAddress" /> no qual o canal de entrada recebe mensagens.</span><span class="sxs-lookup"><span data-stu-id="c5244-178">The <see cref="T:System.ServiceModel.EndpointAddress" /> on which the input channel receives messages.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5244-179">Se esse canal de entrada não tem um endereço autônomo (por exemplo, é o lado de entrada de um canal TCP iniciada pelo cliente), em seguida, essa propriedade é `null`.</span><span class="sxs-lookup"><span data-stu-id="c5244-179">If this input channel does not have a standalone address (for example, it is the input-side of a client-initiated TCP channel), then this property is `null`.</span></span>  
  
 <span data-ttu-id="c5244-180">Essa propriedade pode ser usada pelos canais de nível superior para fins de correlação.</span><span class="sxs-lookup"><span data-stu-id="c5244-180">This property can be used by higher-level channels for correlation purposes.</span></span> <span data-ttu-id="c5244-181">Por exemplo, se um canal de nível superior implementa solicitação-resposta na parte superior de um <xref:System.ServiceModel.Channels.IDuplexChannel>, ele pode usar o <xref:System.ServiceModel.Channels.IInputChannel.LocalAddress%2A> propriedade no cabeçalho WS-Addressing ReplyTo.</span><span class="sxs-lookup"><span data-stu-id="c5244-181">For example, if a higher-level channel implements request-reply on top of a <xref:System.ServiceModel.Channels.IDuplexChannel>, it can use the <xref:System.ServiceModel.Channels.IInputChannel.LocalAddress%2A> property in the WS-Addressing ReplyTo header.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5244-182">O código a seguir ilustra como implementar essa propriedade:</span><span class="sxs-lookup"><span data-stu-id="c5244-182">The following code illustrates how to implement this property:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#12](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Receive">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.ServiceProcess.TimeoutException"><span data-ttu-id="c5244-183">A operação não foi concluída no intervalo de limite.</span><span class="sxs-lookup"><span data-stu-id="c5244-183">The operation did not complete with the timeout interval.</span></span></exception>
        <exception cref="T:System.ServiceModel.CommunicationException"><span data-ttu-id="c5244-184">O canal de entrada falhou.</span><span class="sxs-lookup"><span data-stu-id="c5244-184">The input channel failed.</span></span></exception>
        <exception cref="T:System.ServiceModel.CommunicationObjectAbortedException"><span data-ttu-id="c5244-185">O canal de entrada foi anulado.</span><span class="sxs-lookup"><span data-stu-id="c5244-185">The input channel has been aborted.</span></span></exception>
        <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException"><span data-ttu-id="c5244-186">O canal de entrada apresentou falha.</span><span class="sxs-lookup"><span data-stu-id="c5244-186">The input channel faulted.</span></span></exception>
        <summary><span data-ttu-id="c5244-187">Retornará uma mensagem recebida pelo canal de entrada, se houver um disponível com um intervalo de tempo definido implícita ou explicitamente.</span><span class="sxs-lookup"><span data-stu-id="c5244-187">Returns a message received by the input channel, if one is available with an interval of time that is explicitly or implicitly defined.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5244-188">Use o síncrona <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> método quando ele é aceitável para o thread atual a ser bloqueada até que ele recebe a mensagem de solicitação ou excede o intervalo de tempo especificado por `timeout`.</span><span class="sxs-lookup"><span data-stu-id="c5244-188">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> method when it is acceptable for the current thread to be blocked until it receives the request message or exceeds the interval of time specified by `timeout`.</span></span> <span data-ttu-id="c5244-189">Use o assíncrona <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> método quando desejar que o processamento do aplicativo para continuar sem aguardar a solicitação a ser recebida.</span><span class="sxs-lookup"><span data-stu-id="c5244-189">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> method when you need the application processing to continue without waiting for the request to be received.</span></span>  
  
 <span data-ttu-id="c5244-190">Síncronos <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> operação está disponível com ou sem um tempo limite explícito.</span><span class="sxs-lookup"><span data-stu-id="c5244-190">The synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> operation is available with or without an explicit timeout.</span></span>  
  
 <span data-ttu-id="c5244-191">Se uma mensagem não estiver disponível, ele bloqueia até que um esteja disponível ou até que o tempo limite é excedido.</span><span class="sxs-lookup"><span data-stu-id="c5244-191">If a message is not available, it blocks until one is available or until the timeout is exceeded.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.Message Receive ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.Message Receive() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.Receive" />
      <MemberSignature Language="VB.NET" Value="Public Function Receive () As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::Message ^ Receive();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.Message</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c5244-192">Retornará a mensagem recebida, se houver uma disponível.</span><span class="sxs-lookup"><span data-stu-id="c5244-192">Returns the message received, if one is available.</span></span> <span data-ttu-id="c5244-193">Se uma mensagem não estiver disponível, será bloqueado por um intervalo de tempo padrão.</span><span class="sxs-lookup"><span data-stu-id="c5244-193">If a message is not available, blocks for a default interval of time.</span></span></summary>
        <returns><span data-ttu-id="c5244-194">O <see cref="T:System.ServiceModel.Channels.Message" /> recebido.</span><span class="sxs-lookup"><span data-stu-id="c5244-194">The <see cref="T:System.ServiceModel.Channels.Message" /> received.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5244-195">Use o síncrona <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> método quando ele é aceitável para o thread atual a ser bloqueada até que ele recebe a mensagem de solicitação ou excede o intervalo de tempo especificado por `timeout`.</span><span class="sxs-lookup"><span data-stu-id="c5244-195">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> method when it is acceptable for the current thread to be blocked until it receives the request message or exceeds the interval of time specified by `timeout`.</span></span> <span data-ttu-id="c5244-196">Use o assíncrona <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> método quando desejar que o processamento do aplicativo para continuar sem aguardar a solicitação a ser recebida.</span><span class="sxs-lookup"><span data-stu-id="c5244-196">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> method when you want the application processing to continue without waiting for the request to be received.</span></span>  
  
 <span data-ttu-id="c5244-197">Síncronos <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> operação está disponível com ou sem um tempo limite explícito.</span><span class="sxs-lookup"><span data-stu-id="c5244-197">The synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> operation is available with or without an explicit timeout.</span></span>  
  
 <span data-ttu-id="c5244-198">Se uma mensagem não estiver disponível, ele bloqueia até que um esteja disponível ou até que o tempo limite é excedido.</span><span class="sxs-lookup"><span data-stu-id="c5244-198">If a message is not available, it blocks until one is available or until the timeout is exceeded.</span></span>  
  
 <span data-ttu-id="c5244-199"><xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> pode ser chamado várias vezes ou simultaneamente.</span><span class="sxs-lookup"><span data-stu-id="c5244-199"><xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> can be called multiple times or concurrently.</span></span> <span data-ttu-id="c5244-200">Apenas um <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> chamada pode ser concluída para cada mensagem recebida.</span><span class="sxs-lookup"><span data-stu-id="c5244-200">Only one <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> call can complete for each message received.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5244-201">O código a seguir ilustra como implementar esse método:</span><span class="sxs-lookup"><span data-stu-id="c5244-201">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#13](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.Message Receive (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.Message Receive(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.Receive(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Receive (timeout As TimeSpan) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::Message ^ Receive(TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="c5244-202">O <see cref="T:System.TimeSpan" /> que especifica quanto tempo a operação de recebimento tem para ser concluída antes de atingir o tempo limite e retornar <see cref="T:System.TimeoutException" />.</span><span class="sxs-lookup"><span data-stu-id="c5244-202">The <see cref="T:System.TimeSpan" /> that specifies how long the receive operation has to complete before timing out and throwing a <see cref="T:System.TimeoutException" />.</span></span></param>
        <summary><span data-ttu-id="c5244-203">Retornará a mensagem recebida, se houver uma disponível.</span><span class="sxs-lookup"><span data-stu-id="c5244-203">Returns the message received, if one is available.</span></span> <span data-ttu-id="c5244-204">Se uma mensagem não estiver disponível, será bloqueado por um intervalo de tempo especificado.</span><span class="sxs-lookup"><span data-stu-id="c5244-204">If a message is not available, blocks for a specified interval of time.</span></span></summary>
        <returns><span data-ttu-id="c5244-205">O <see cref="T:System.ServiceModel.Channels.Message" /> recebido.</span><span class="sxs-lookup"><span data-stu-id="c5244-205">The <see cref="T:System.ServiceModel.Channels.Message" /> received.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5244-206">Use o síncrona <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> método quando ele é aceitável para o thread atual a ser bloqueada até que ele recebe a mensagem de solicitação ou excede o intervalo de tempo especificado por `timeout`.</span><span class="sxs-lookup"><span data-stu-id="c5244-206">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> method when it is acceptable for the current thread to be blocked until it receives the request message or exceeds the interval of time specified by `timeout`.</span></span> <span data-ttu-id="c5244-207">Use o assíncrona <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> método quando desejar que o processamento do aplicativo para continuar sem aguardar a solicitação a ser recebida.</span><span class="sxs-lookup"><span data-stu-id="c5244-207">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> method when you want the application processing to continue without waiting for the request to be received.</span></span>  
  
 <span data-ttu-id="c5244-208">Síncronos <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> operação está disponível com ou sem um tempo limite explícito.</span><span class="sxs-lookup"><span data-stu-id="c5244-208">The synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> operation is available with or without an explicit timeout.</span></span>  
  
 <span data-ttu-id="c5244-209">Se uma mensagem não estiver disponível, ele bloqueia até que um esteja disponível ou até que o tempo limite é excedido.</span><span class="sxs-lookup"><span data-stu-id="c5244-209">If a message is not available, it blocks until one is available or until the timeout is exceeded.</span></span>  
  
 <span data-ttu-id="c5244-210"><xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> pode ser chamado várias vezes ou simultaneamente.</span><span class="sxs-lookup"><span data-stu-id="c5244-210"><xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> can be called multiple times or concurrently.</span></span> <span data-ttu-id="c5244-211">Apenas um <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> chamada pode ser concluída para cada mensagem recebida.</span><span class="sxs-lookup"><span data-stu-id="c5244-211">Only one <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> call can complete for each message received.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5244-212">O código a seguir ilustra como implementar esse método:</span><span class="sxs-lookup"><span data-stu-id="c5244-212">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#14](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException"><span data-ttu-id="c5244-213">O <paramref name="timeout" /> especificado é ultrapassado antes que a operação seja concluída.</span><span class="sxs-lookup"><span data-stu-id="c5244-213">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c5244-214">O tempo limite especificado é menor que zero.</span><span class="sxs-lookup"><span data-stu-id="c5244-214">The timeout specified is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryReceive">
      <MemberSignature Language="C#" Value="public bool TryReceive (TimeSpan timeout, out System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryReceive(valuetype System.TimeSpan timeout, [out] class System.ServiceModel.Channels.Message&amp; message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.TryReceive(System.TimeSpan,System.ServiceModel.Channels.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReceive (timeout As TimeSpan, ByRef message As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryReceive(TimeSpan timeout, [Runtime::InteropServices::Out] System::ServiceModel::Channels::Message ^ % message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="c5244-215">O <see cref="T:System.IAsyncResult" /> retornado por uma chamada para um dos métodos <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" />.</span><span class="sxs-lookup"><span data-stu-id="c5244-215">The <see cref="T:System.IAsyncResult" /> returned by a call to one of the <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /> methods.</span></span></param>
        <param name="message"><span data-ttu-id="c5244-216">O <see cref="T:System.ServiceModel.Channels.Message" /> recebido.</span><span class="sxs-lookup"><span data-stu-id="c5244-216">The <see cref="T:System.ServiceModel.Channels.Message" /> received.</span></span></param>
        <summary><span data-ttu-id="c5244-217">Tentar receber uma mensagem dentro de um intervalo de tempo especificado.</span><span class="sxs-lookup"><span data-stu-id="c5244-217">Tries to receive a message within a specified interval of time.</span></span></summary>
        <returns>
          <span data-ttu-id="c5244-218"><see langword="true" /> se uma mensagem for recebida antes que o <paramref name="timeout" /> seja excedido; caso contrário <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c5244-218"><see langword="true" /> if a message is received before the <paramref name="timeout" /> has been exceeded; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5244-219">Se você for para lidar com tempos limite e não apenas gerar novamente ou encapsular o <xref:System.TimeoutException>, em seguida, você deve chamar <xref:System.ServiceModel.Channels.IInputChannel.TryReceive%28System.TimeSpan%2CSystem.ServiceModel.Channels.Message%40%29> em vez de <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>.</span><span class="sxs-lookup"><span data-stu-id="c5244-219">If you are going to handle timeouts and not just re-throw or wrap the <xref:System.TimeoutException>, then you should call <xref:System.ServiceModel.Channels.IInputChannel.TryReceive%28System.TimeSpan%2CSystem.ServiceModel.Channels.Message%40%29> instead of <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>.</span></span>  
  
 <span data-ttu-id="c5244-220">Se você não vai tratar tempos limite especialmente apenas chamar <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>, caso contrário, você perderá informações de erro.</span><span class="sxs-lookup"><span data-stu-id="c5244-220">If you are not going to treat timeouts specially then just call <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>, otherwise you will lose error information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5244-221">O código a seguir ilustra como implementar esse método:</span><span class="sxs-lookup"><span data-stu-id="c5244-221">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#18](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException"><span data-ttu-id="c5244-222">O <paramref name="timeout" /> especificado é ultrapassado antes que a operação seja concluída.</span><span class="sxs-lookup"><span data-stu-id="c5244-222">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c5244-223">O tempo limite especificado é menor que zero.</span><span class="sxs-lookup"><span data-stu-id="c5244-223">The timeout specified is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitForMessage">
      <MemberSignature Language="C#" Value="public bool WaitForMessage (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitForMessage(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.WaitForMessage(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForMessage (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool WaitForMessage(TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="c5244-224">O <see cref="T:System.TimeSpan" /> especifica o intervalo de tempo máximo durante o qual aguardar a chegada de uma mensagem antes do tempo limite.</span><span class="sxs-lookup"><span data-stu-id="c5244-224">The <see cref="T:System.TimeSpan" /> specifies the maximum interval of time to wait for a message to arrive before timing out.</span></span></param>
        <summary><span data-ttu-id="c5244-225">Retorna um valor que indica se uma mensagem foi recebida dentro de um intervalo de tempo especificado.</span><span class="sxs-lookup"><span data-stu-id="c5244-225">Returns a value that indicates whether a message has arrived within a specified interval of time.</span></span></summary>
        <returns>
          <span data-ttu-id="c5244-226"><see langword="true" /> se uma mensagem chegar antes que o <paramref name="timeout" /> seja excedido; caso contrário <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c5244-226"><see langword="true" /> if a message has arrived before the <paramref name="timeout" /> has been exceeded; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5244-227">Chamando <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> não resulta em uma mensagem que está sendo recebidos ou processados de forma alguma.</span><span class="sxs-lookup"><span data-stu-id="c5244-227">Calling <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> does not result in a message being received or processed in any other way.</span></span>  
  
 <span data-ttu-id="c5244-228">O <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> método existe principalmente para transacionado cenários em que o usuário deseja receber a mensagem de uso de uma transação.</span><span class="sxs-lookup"><span data-stu-id="c5244-228">The <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> method exists primarily for transacted scenarios where the user wants to receive the message using a transaction.</span></span> <span data-ttu-id="c5244-229">Ao usar apenas <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> normalmente para isso, o usuário deve criar a transação e, em seguida, chamar <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> e esperamos que a mensagem chegar antes da transação de tempo limite, que pode não ser possível.</span><span class="sxs-lookup"><span data-stu-id="c5244-229">When using just <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> normally for this, the user must create the transaction and then call <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> and hope the message arrives before the transaction times out, which may not be possible.</span></span>  
  
 <span data-ttu-id="c5244-230">Em vez disso, o usuário pode chamar <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> com qualquer tempo limite desejado (mesmo infinitos), em seguida, quando uma mensagem chega, eles poderão abrir a transação, chame <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> e ter certeza de que eles podem obter a mensagem antes de expira a transação.</span><span class="sxs-lookup"><span data-stu-id="c5244-230">Instead, the user can call <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> with whatever time out they want (even infinite), then when a message arrives they can open the transaction, call <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> and be confident that they can get the message back before the transaction expires.</span></span>  
  
 <span data-ttu-id="c5244-231">Esse método é síncrono, portanto ele bloqueia o thread atual até que uma mensagem está disponível ou o tempo limite seja atingido.</span><span class="sxs-lookup"><span data-stu-id="c5244-231">This method is synchronous, so it blocks the current thread until a message is available or the time out occurs.</span></span> <span data-ttu-id="c5244-232">Use <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> quando é aceitável para o thread atual a ser bloqueado enquanto aguarda uma mensagem para chegar na fila.</span><span class="sxs-lookup"><span data-stu-id="c5244-232">Use <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue.</span></span> <span data-ttu-id="c5244-233">O thread está bloqueado para cima especificado `timeout`.</span><span class="sxs-lookup"><span data-stu-id="c5244-233">The thread is blocked up to the specified `timeout`.</span></span> <span data-ttu-id="c5244-234">Se você precisar continuar sem aguardar o processamento de aplicativo, use o assíncrona <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> método.</span><span class="sxs-lookup"><span data-stu-id="c5244-234">If you need the application processing to continue without waiting, use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5244-235">O código a seguir ilustra como implementar esse método:</span><span class="sxs-lookup"><span data-stu-id="c5244-235">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#21](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException"><span data-ttu-id="c5244-236">O <paramref name="timeout" /> especificado é ultrapassado antes que a operação seja concluída.</span><span class="sxs-lookup"><span data-stu-id="c5244-236">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c5244-237">O tempo limite especificado é menor que zero.</span><span class="sxs-lookup"><span data-stu-id="c5244-237">The timeout specified is less than zero.</span></span></exception>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="c5244-238">A operação retorna <see langword="false" /> se especificado <paramref name="timeout" /> for excedido, não é uma exceção de tempo limite.</span><span class="sxs-lookup"><span data-stu-id="c5244-238">The operation returns <see langword="false" /> if the specified <paramref name="timeout" /> is exceeded, not a timeout exception.</span></span></para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>