<Type Name="IInputChannel" FullName="System.ServiceModel.Channels.IInputChannel">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="73371f76db2d9423c8ff9eb31a980d7e95096d7b" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37621688" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IInputChannel : System.ServiceModel.Channels.IChannel" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInputChannel implements class System.ServiceModel.Channels.IChannel, class System.ServiceModel.ICommunicationObject" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Channels.IInputChannel" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInputChannel&#xA;Implements IChannel" />
  <TypeSignature Language="C++ CLI" Value="public interface class IInputChannel : System::ServiceModel::Channels::IChannel" />
  <TypeSignature Language="F#" Value="type IInputChannel = interface&#xA;    interface IChannel&#xA;    interface ICommunicationObject" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ServiceModel.Channels.IChannel</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Define a interface que um canal deve implementar para receber uma mensagem.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.ServiceModel.Channels.IInputChannel> contrato inclui variantes síncronas e assíncronas de recebimento, funcionalidade try para receber e espera de mensagem.  
  
 O modelo de pull é usado normalmente com uma <xref:System.ServiceModel.Channels.IInputChannel> para receber mensagens: chamar <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> (para "pull" uma mensagem de canal) e, em seguida, aguarde a chegada de uma mensagem. Um padrão de uso alternativa é chamar <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> ou <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>e, em seguida, chamar <xref:System.ServiceModel.Channels.IInputChannel.Receive%28System.TimeSpan%29>. Essa abordagem é comum para usos transacionais em que você iniciar a transação entre as chamadas para <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> e <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>.  
  
 Um <xref:System.ServiceModel.Channels.IInputChannel> não está necessariamente associado a um único remetente. Outros canais e interfaces de canal podem fornecer uma correlação entre remetentes específicos e um <xref:System.ServiceModel.Channels.IInputChannel>, mas o contrato de base não faz nenhuma restrição. Uma implementação pode criar um novo <xref:System.ServiceModel.Channels.IInputChannel> para cada mensagem ou reutilizar o mesmo <xref:System.ServiceModel.Channels.IInputChannel> para vários remetentes e mensagens.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="BeginReceive">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicia uma operação de recebimento assíncrona.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usar assíncrona <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> método quando desejar que o processamento do aplicativo para continuar sem aguardar a solicitação ser recebida. Usar o síncrono <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> método quando ele é aceitável para o thread atual seja bloqueado até que a mensagem de solicitação é recebida ou o intervalo de tempo especificado pelo `timeout` foi excedido. A operação assíncrona está disponível com ou sem um tempo limite explícito.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceive (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginReceive(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceive (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceive(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginReceive : AsyncCallback * obj -&gt; IAsyncResult" Usage="iInputChannel.BeginReceive (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">O delegado de <see cref="T:System.AsyncCallback" /> que receberá a notificação da conclusão da operação assíncrona.</param>
        <param name="state">Um objeto, especificado pelo aplicativo, que contém informações associadas à operação assíncrona.</param>
        <summary>Inicia uma operação assíncrona para receber uma mensagem que tem um objeto de estado associado.</summary>
        <returns>O <see cref="T:System.IAsyncResult" /> que faz referência à recepção de mensagens assíncronas.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usar assíncrona <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> método quando desejar que o processamento do aplicativo para continuar sem aguardar a solicitação ser recebida. Usar o síncrono <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> método quando ele é aceitável para o thread atual seja bloqueado até que a mensagem de solicitação é recebida ou o intervalo de tempo especificado pelo `timeout` foi excedido. A operação assíncrona está disponível com ou sem um tempo limite explícito.  
  
 Esse método recebe a notificação, por meio de um retorno de chamada da identidade do manipulador de eventos para a operação. A operação não será concluída até que uma mensagem fique disponível no canal.  
  
   
  
## Examples  
 O código a seguir ilustra como implementar esse método:  
  
 [!code-csharp[S_UE_MessageInterceptor#15](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceive (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginReceive(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceive (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceive(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginReceive : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="iInputChannel.BeginReceive (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">O <see cref="T:System.TimeSpan" /> especifica o intervalo de tempo durante o qual aguardar a disponibilidade de uma mensagem.</param>
        <param name="callback">O delegado de <see cref="T:System.AsyncCallback" /> que receberá a notificação da conclusão da operação assíncrona.</param>
        <param name="state">Um objeto, especificado pelo aplicativo, que contém informações associadas à operação assíncrona.</param>
        <summary>Inicia uma operação assíncrona para receber uma mensagem que tem um tempo limite e um objeto de estado especificados associados.</summary>
        <returns>O <see cref="T:System.IAsyncResult" /> que referencia a operação de recebimento assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usar assíncrona <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> método quando desejar que o processamento do aplicativo para continuar sem aguardar a solicitação ser recebida. Usar o síncrono <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> método quando ele é aceitável para o thread atual seja bloqueado até que a mensagem de solicitação é recebida ou o intervalo de tempo especificado pelo `timeout` foi excedido. A operação assíncrona está disponível com ou sem um tempo limite explícito.  
  
 A operação não será concluída até que uma mensagem fique disponível no canal ou o tempo limite ocorre.  
  
   
  
## Examples  
 O código a seguir ilustra como implementar esse método:  
  
 [!code-csharp[S_UE_MessageInterceptor#16](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException">O <paramref name="timeout" /> especificado é ultrapassado antes que a operação seja concluída.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">O tempo limite especificado é menor que zero.</exception>
        <block subset="none" type="overrides">
          <para>A operação gera uma <see cref="T:System.TimeoutException" /> se especificado <paramref name="timeout" /> for excedido antes de ser concluída.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="BeginTryReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginTryReceive (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginTryReceive(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginTryReceive (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginTryReceive(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginTryReceive : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="iInputChannel.BeginTryReceive (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">O <see cref="T:System.TimeSpan" /> especifica o intervalo de tempo durante o qual aguardar a disponibilidade de uma mensagem.</param>
        <param name="callback">O delegado de <see cref="T:System.AsyncCallback" /> que receberá a notificação da conclusão da operação assíncrona.</param>
        <param name="state">Um objeto, especificado pelo aplicativo, que contém informações associadas à operação assíncrona.</param>
        <summary>Inicia uma operação assíncrona para receber uma mensagem que tem um tempo limite e um objeto de estado especificados associados.</summary>
        <returns>O <see cref="T:System.IAsyncResult" /> que referencia a operação de recebimento assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usar assíncrona <xref:System.ServiceModel.Channels.IInputChannel.BeginTryReceive%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> método quando desejar que o processamento do aplicativo para continuar sem espera. Usar o síncrono <xref:System.ServiceModel.Channels.IInputChannel.TryReceive%28System.TimeSpan%2CSystem.ServiceModel.Channels.Message%40%29> método quando ele é aceitável para o thread atual a ser bloqueada enquanto ele responde à mensagem de solicitação ou até que o intervalo de tempo limite for excedido.  
  
 A operação não será concluída até que uma mensagem fique disponível no canal ou o tempo limite ocorre.  
  
 Se você for para lidar com tempos limite e não apenas gerar novamente ou encapsular o <xref:System.TimeoutException>, em seguida, você deve chamar <xref:System.ServiceModel.Channels.IInputChannel.BeginTryReceive%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> em vez de <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A>.  
  
 Se você não vai tratar de tempos limite especialmente, em seguida, basta chamar <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A>, caso contrário, você perderá informações de erro.  
  
   
  
## Examples  
 O código a seguir ilustra como implementar esse método:  
  
 [!code-csharp[S_UE_MessageInterceptor#19](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException">O <paramref name="timeout" /> especificado é ultrapassado antes que a operação seja concluída.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">O tempo limite especificado é menor que zero.</exception>
        <block subset="none" type="overrides">
          <para>A operação retorna <see langword="false" /> partir <see cref="M:System.ServiceModel.Channels.IInputChannel.EndTryReceive(System.IAsyncResult,System.ServiceModel.Channels.Message@)" /> se especificado <paramref name="timeout" /> for excedido.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="BeginWaitForMessage">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginWaitForMessage (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginWaitForMessage(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginWaitForMessage (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginWaitForMessage(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginWaitForMessage : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="iInputChannel.BeginWaitForMessage (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">O <see cref="T:System.TimeSpan" /> especifica o intervalo de tempo durante o qual aguardar a disponibilidade de uma mensagem.</param>
        <param name="callback">O delegado de <see cref="T:System.AsyncCallback" /> que receberá a notificação da conclusão da operação assíncrona.</param>
        <param name="state">Um objeto, especificado pelo aplicativo, que contém informações associadas à operação assíncrona.</param>
        <summary>Inicia uma operação assíncrona para aguardar o recebimento de uma mensagem que tem um tempo limite e um objeto de estado especificados associados.</summary>
        <returns>O <see cref="T:System.IAsyncResult" /> que referencia a operação assíncrona para aguardar uma mensagem chegar.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usar assíncrona <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> método se você precisar de processamento do aplicativo para continuar sem aguardar a chegada de mensagem. Usar o síncrono <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> método quando ele é aceitável para o thread atual a ser bloqueada enquanto aguarda uma mensagem chegar na fila. O thread está bloqueado para cima especificado `timeout`.  
  
 Esse método recebe a notificação, por meio de um retorno de chamada da identidade do manipulador de eventos para a operação. A operação não será concluída até que uma mensagem fique disponível no canal ou o tempo limite ocorre.  
  
   
  
## Examples  
 O código a seguir ilustra como implementar esse método:  
  
 [!code-csharp[S_UE_MessageInterceptor#22](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException">O <paramref name="timeout" /> especificado é ultrapassado antes que a operação seja concluída.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">O tempo limite especificado é menor que zero.</exception>
        <block subset="none" type="overrides">
          <para>A operação retorna <see langword="false" /> se especificado <paramref name="timeout" /> for excedido, não uma exceção de tempo limite.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="EndReceive">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.Message EndReceive (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.Message EndReceive(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.EndReceive(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceive (result As IAsyncResult) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::Message ^ EndReceive(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndReceive : IAsyncResult -&gt; System.ServiceModel.Channels.Message" Usage="iInputChannel.EndReceive result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">O <see cref="T:System.IAsyncResult" /> retornado por uma chamada para um dos métodos <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" />.</param>
        <summary>Conclui uma operação assíncrona para receber uma mensagem.</summary>
        <returns>O <see cref="T:System.ServiceModel.Channels.Message" /> recebido.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O código a seguir ilustra como implementar esse método:  
  
 [!code-csharp[S_UE_MessageInterceptor#17](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndTryReceive">
      <MemberSignature Language="C#" Value="public bool EndTryReceive (IAsyncResult result, out System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EndTryReceive(class System.IAsyncResult result, [out] class System.ServiceModel.Channels.Message&amp; message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.EndTryReceive(System.IAsyncResult,System.ServiceModel.Channels.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndTryReceive (result As IAsyncResult, ByRef message As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndTryReceive(IAsyncResult ^ result, [Runtime::InteropServices::Out] System::ServiceModel::Channels::Message ^ % message);" />
      <MemberSignature Language="F#" Value="abstract member EndTryReceive : IAsyncResult *  -&gt; bool" Usage="iInputChannel.EndTryReceive (result, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="result">O <see cref="T:System.IAsyncResult" /> retornado por uma chamada ao método <see cref="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)" />.</param>
        <param name="message">O <see cref="T:System.ServiceModel.Channels.Message" /> recebido.</param>
        <summary>Conclui a operação assíncrona especificada para receber uma mensagem.</summary>
        <returns>
          <see langword="true" /> se uma mensagem for recebida antes que o intervalo de tempo especificado seja decorrido; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O código a seguir ilustra como implementar esse método:  
  
 [!code-csharp[S_UE_MessageInterceptor#20](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndWaitForMessage">
      <MemberSignature Language="C#" Value="public bool EndWaitForMessage (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EndWaitForMessage(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.EndWaitForMessage(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndWaitForMessage (result As IAsyncResult) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndWaitForMessage(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndWaitForMessage : IAsyncResult -&gt; bool" Usage="iInputChannel.EndWaitForMessage result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">O <see cref="T:System.IAsyncResult" /> que identifica a operação <see cref="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)" /> a ser concluída e da qual se deve receber um resultado final.</param>
        <summary>Conclui a operação assíncrona de especificada de aguardar uma mensagem.</summary>
        <returns>
          <see langword="true" /> se uma mensagem chegar antes que o <paramref name="timeout" /> seja excedido; caso contrário <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O código a seguir ilustra como implementar esse método:  
  
 [!code-csharp[S_UE_MessageInterceptor#23](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalAddress">
      <MemberSignature Language="C#" Value="public System.ServiceModel.EndpointAddress LocalAddress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.EndpointAddress LocalAddress" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Channels.IInputChannel.LocalAddress" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalAddress As EndpointAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::EndpointAddress ^ LocalAddress { System::ServiceModel::EndpointAddress ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalAddress : System.ServiceModel.EndpointAddress" Usage="System.ServiceModel.Channels.IInputChannel.LocalAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.EndpointAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o endereço no qual o canal de entrada recebe mensagens.</summary>
        <value>O <see cref="T:System.ServiceModel.EndpointAddress" /> no qual o canal de entrada recebe mensagens.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se o canal de entrada não tiver um endereço autônomo (por exemplo, é o lado de entrada de um canal TCP iniciadas pelo cliente), essa propriedade será `null`.  
  
 Essa propriedade pode ser usada pelos canais de nível mais altos para fins de correlação. Por exemplo, se um canal de nível mais alto implementa solicitação-resposta na parte superior de uma <xref:System.ServiceModel.Channels.IDuplexChannel>, ele pode usar o <xref:System.ServiceModel.Channels.IInputChannel.LocalAddress%2A> propriedade no cabeçalho de WS-Addressing ReplyTo.  
  
   
  
## Examples  
 O código a seguir ilustra como implementar essa propriedade:  
  
 [!code-csharp[S_UE_MessageInterceptor#12](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Receive">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.ServiceProcess.TimeoutException">A operação não foi concluída no intervalo de limite.</exception>
        <exception cref="T:System.ServiceModel.CommunicationException">O canal de entrada falhou.</exception>
        <exception cref="T:System.ServiceModel.CommunicationObjectAbortedException">O canal de entrada foi anulado.</exception>
        <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">O canal de entrada apresentou falha.</exception>
        <summary>Retornará uma mensagem recebida pelo canal de entrada, se houver um disponível com um intervalo de tempo definido implícita ou explicitamente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usar o síncrono <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> método quando ele é aceitável para o thread atual seja bloqueado até que ele recebe a mensagem de solicitação ou excede o intervalo de tempo especificado pelo `timeout`. Usar assíncrona <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> método quando você precisar de processamento do aplicativo para continuar sem aguardar a solicitação ser recebida.  
  
 Assíncrono <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> operação está disponível com ou sem um tempo limite explícito.  
  
 Se uma mensagem não estiver disponível, ele bloqueia até que uma esteja disponível ou até que o tempo limite for excedido.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.Message Receive ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.Message Receive() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.Receive" />
      <MemberSignature Language="VB.NET" Value="Public Function Receive () As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::Message ^ Receive();" />
      <MemberSignature Language="F#" Value="abstract member Receive : unit -&gt; System.ServiceModel.Channels.Message" Usage="iInputChannel.Receive " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.Message</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retornará a mensagem recebida, se houver uma disponível. Se uma mensagem não estiver disponível, será bloqueado por um intervalo de tempo padrão.</summary>
        <returns>O <see cref="T:System.ServiceModel.Channels.Message" /> recebido.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usar o síncrono <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> método quando ele é aceitável para o thread atual seja bloqueado até que ele recebe a mensagem de solicitação ou excede o intervalo de tempo especificado pelo `timeout`. Usar assíncrona <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> método quando desejar que o processamento do aplicativo para continuar sem aguardar a solicitação ser recebida.  
  
 Assíncrono <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> operação está disponível com ou sem um tempo limite explícito.  
  
 Se uma mensagem não estiver disponível, ele bloqueia até que uma esteja disponível ou até que o tempo limite for excedido.  
  
 <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> pode ser chamado várias vezes ou simultaneamente. Apenas um <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> chamada pode ser concluída para cada mensagem recebida.  
  
   
  
## Examples  
 O código a seguir ilustra como implementar esse método:  
  
 [!code-csharp[S_UE_MessageInterceptor#13](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.Message Receive (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.Message Receive(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.Receive(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Receive (timeout As TimeSpan) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::Message ^ Receive(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member Receive : TimeSpan -&gt; System.ServiceModel.Channels.Message" Usage="iInputChannel.Receive timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">O <see cref="T:System.TimeSpan" /> que especifica quanto tempo a operação de recebimento tem para ser concluída antes de atingir o tempo limite e retornar <see cref="T:System.TimeoutException" />.</param>
        <summary>Retornará a mensagem recebida, se houver uma disponível. Se uma mensagem não estiver disponível, será bloqueado por um intervalo de tempo especificado.</summary>
        <returns>O <see cref="T:System.ServiceModel.Channels.Message" /> recebido.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usar o síncrono <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> método quando ele é aceitável para o thread atual seja bloqueado até que ele recebe a mensagem de solicitação ou excede o intervalo de tempo especificado pelo `timeout`. Usar assíncrona <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> método quando desejar que o processamento do aplicativo para continuar sem aguardar a solicitação ser recebida.  
  
 Assíncrono <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> operação está disponível com ou sem um tempo limite explícito.  
  
 Se uma mensagem não estiver disponível, ele bloqueia até que uma esteja disponível ou até que o tempo limite for excedido.  
  
 <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> pode ser chamado várias vezes ou simultaneamente. Apenas um <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> chamada pode ser concluída para cada mensagem recebida.  
  
   
  
## Examples  
 O código a seguir ilustra como implementar esse método:  
  
 [!code-csharp[S_UE_MessageInterceptor#14](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException">O <paramref name="timeout" /> especificado é ultrapassado antes que a operação seja concluída.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">O tempo limite especificado é menor que zero.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryReceive">
      <MemberSignature Language="C#" Value="public bool TryReceive (TimeSpan timeout, out System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryReceive(valuetype System.TimeSpan timeout, [out] class System.ServiceModel.Channels.Message&amp; message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.TryReceive(System.TimeSpan,System.ServiceModel.Channels.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReceive (timeout As TimeSpan, ByRef message As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryReceive(TimeSpan timeout, [Runtime::InteropServices::Out] System::ServiceModel::Channels::Message ^ % message);" />
      <MemberSignature Language="F#" Value="abstract member TryReceive : TimeSpan *  -&gt; bool" Usage="iInputChannel.TryReceive (timeout, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="timeout">O <see cref="T:System.IAsyncResult" /> retornado por uma chamada para um dos métodos <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" />.</param>
        <param name="message">O <see cref="T:System.ServiceModel.Channels.Message" /> recebido.</param>
        <summary>Tentar receber uma mensagem dentro de um intervalo de tempo especificado.</summary>
        <returns>
          <see langword="true" /> se uma mensagem for recebida antes que o <paramref name="timeout" /> seja excedido; caso contrário <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se você for para lidar com tempos limite e não apenas gerar novamente ou encapsular o <xref:System.TimeoutException>, em seguida, você deve chamar <xref:System.ServiceModel.Channels.IInputChannel.TryReceive%28System.TimeSpan%2CSystem.ServiceModel.Channels.Message%40%29> em vez de <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>.  
  
 Se você não vai tratar de tempos limite especialmente, em seguida, basta chamar <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>, caso contrário, você perderá informações de erro.  
  
   
  
## Examples  
 O código a seguir ilustra como implementar esse método:  
  
 [!code-csharp[S_UE_MessageInterceptor#18](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException">O <paramref name="timeout" /> especificado é ultrapassado antes que a operação seja concluída.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">O tempo limite especificado é menor que zero.</exception>
      </Docs>
    </Member>
    <Member MemberName="WaitForMessage">
      <MemberSignature Language="C#" Value="public bool WaitForMessage (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitForMessage(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.WaitForMessage(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForMessage (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool WaitForMessage(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member WaitForMessage : TimeSpan -&gt; bool" Usage="iInputChannel.WaitForMessage timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">O <see cref="T:System.TimeSpan" /> especifica o intervalo de tempo máximo durante o qual aguardar a chegada de uma mensagem antes do tempo limite.</param>
        <summary>Retorna um valor que indica se uma mensagem foi recebida dentro de um intervalo de tempo especificado.</summary>
        <returns>
          <see langword="true" /> se uma mensagem chegar antes que o <paramref name="timeout" /> seja excedido; caso contrário <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chamar <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> não resulta em uma mensagem que está sendo recebidos ou processados em qualquer outra forma.  
  
 O <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> método existe principalmente para transacionado cenários em que o usuário deseja receber a mensagem usando uma transação. Ao usar apenas <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> normalmente, por isso, o usuário deve criar a transação e, em seguida, chamar <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> e esperamos que a mensagem chegar antes que o tempo limite de transação, que pode não ser possível.  
  
 Em vez disso, o usuário pode chamar <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> com qualquer tempo limite que desejam (mesmo infinitos), em seguida, quando uma mensagem chega, eles podem abrir a transação, chame <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> e ter certeza de que eles podem obter a mensagem antes de expira a transação.  
  
 Esse método é síncrono, portanto, ele bloqueia o thread atual até que uma mensagem esteja disponível ou o tempo limite ocorre. Use <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> quando ele é aceitável para o thread atual a ser bloqueada enquanto aguarda uma mensagem chegar na fila. O thread está bloqueado para cima especificado `timeout`. Se você precisar continuar sem aguardar o processamento de aplicativo, use assíncrona <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> método.  
  
   
  
## Examples  
 O código a seguir ilustra como implementar esse método:  
  
 [!code-csharp[S_UE_MessageInterceptor#21](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException">O <paramref name="timeout" /> especificado é ultrapassado antes que a operação seja concluída.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">O tempo limite especificado é menor que zero.</exception>
        <block subset="none" type="overrides">
          <para>A operação retorna <see langword="false" /> se especificado <paramref name="timeout" /> for excedido, não uma exceção de tempo limite.</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>