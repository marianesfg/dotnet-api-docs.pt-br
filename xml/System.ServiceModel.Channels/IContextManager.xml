<Type Name="IContextManager" FullName="System.ServiceModel.Channels.IContextManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="201b988b459f1722c1209014d5473e630e59c8f6" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57914822" /></Metadata><TypeSignature Language="C#" Value="public interface IContextManager" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IContextManager" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Channels.IContextManager" />
  <TypeSignature Language="VB.NET" Value="Public Interface IContextManager" />
  <TypeSignature Language="C++ CLI" Value="public interface class IContextManager" />
  <TypeSignature Language="F#" Value="type IContextManager = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.WorkflowServices</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.WorkflowServices, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Define uma interface que permite obter e definir o contexto no canal.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para os canais que usam <xref:System.ServiceModel.WSHttpContextBinding> com o <xref:System.ServiceModel.SessionMode.NotAllowed> valor definido, o contexto não pode ser recuperado no cliente usando <xref:System.ServiceModel.Channels.IContextManager> porque um novo canal que estabelece uma sessão é criado toda vez <xref:System.ServiceModel.Channels.IChannelFactory.GetProperty%2A> é chamado para impor <xref:System.ServiceModel.SessionMode.NotAllowed> semântica de um canal. Isso significa que, embora o contexto corretamente é propagado para o cliente nesse caso, ele não pode ser recuperado usando <xref:System.ServiceModel.Channels.IContextManager>. Você ainda pode recuperá-la usando <xref:System.ServiceModel.Channels.ContextMessageProperty> conforme mostrado no código a seguir.  
  
```csharp  
using (new OperationContextScope((IContextChannel)channel))  
{  
    channel.MyChannel("Test");  
    ContextMessageProperty context;  
    if (ContextMessageProperty.TryGet(OperationContext.Current.IncomingMessageProperties, out context))  
    {  
        Console.WriteLine(context.Count);  
    }  
}  
  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Channels.IContextManager.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.ServiceModel.Channels.IContextManager.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define um valor que indica se o gerenciamento de contexto está habilitado.</summary>
        <value><see langword="true" /> Se o contexto estiver habilitado; Caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando o gerenciamento de contexto está habilitado o canal de contexto armazena em cache o contexto no tempo de vida. Contexto pode ser recuperado do canal por meio de `IContextManager` propriedade de canal chamando <xref:System.ServiceModel.Channels.IContextManager.GetContext%2A> método nele. O canal também pode ser inicializado previamente com o contexto antes de serem abertas ao chamar o <xref:System.ServiceModel.Channels.IContextManager.SetContext%2A> método na propriedade de canal. Depois que o canal é inicializado com o contexto não pode ser redefinida.  
  
 A seguir estão as invariáveis nesse modo:  
  
-   Qualquer chamada para <xref:System.ServiceModel.Channels.IContextManager.SetContext%2A> depois de abrir o canal lança um `InvalidOperationException`.  
  
-   Qualquer tentativa de enviar o contexto por meio de `ContextMessageProperty` lança uma mensagem de saída `InvalidOperationException`.  
  
-   Se uma mensagem é recebida do servidor com o contexto, quando o canal já foi inicializado com um contexto de um `ProtocolException` é gerada. Observe que você pode receber o contexto inicial de um servidor se o canal é aberto sem definir explicitamente o contexto.  
  
-   O `ContextMessageProperty` em uma mensagem de entrada é sempre `null`.  
  
 Quando o gerenciamento de contexto não estiver habilitado, o canal de contexto não gerencia o contexto. É responsabilidade do aplicativo para recuperar, gerenciar e aplicar o contexto por meio de `ContextMessageProperty`. Qualquer tentativa de chamar <xref:System.ServiceModel.Channels.IContextManager.GetContext%2A> ou <xref:System.ServiceModel.Channels.IContextManager.SetContext%2A> usando por meio de `IContextManager` resultado na propriedade de canal `InvalidOperationException`.  
  
 Todos os cookies HTTP, com exceção de cookies do contexto HTTP, são tratados no nível do canal. Os cookies do contexto HTTP são gerenciados no nível do aplicativo. Isso pode ter consequências inesperadas quando os canais são compartilhados para se comunicar com instâncias diferentes direcionadas por <xref:System.ServiceModel.Channels.ContextMessageProperty>. A tabela a seguir mostra como os cookies HTTP são afetados quando <xref:System.ServiceModel.Channels.IContextManager.Enabled%2A> está definida como `true` ou `false`.  
  
|Associação|Valor IContextManager|Escopo de Cookie HTTP do contexto|Outro escopo de Cookies HTTP|  
|-------------|-----------------------------------|-------------------------------|------------------------------|  
|BasicHttpBinding|N/D|ChannelFactory|ChannelFactory|  
|BasicHttpContextBinding|true|Canal|Canal|  
|BasicHttpContextBinding|false|Para cada mensagem (explicitamente gerenciada pelo aplicativo)|Canal|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContext">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,string&gt; GetContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IDictionary`2&lt;string, string&gt; GetContext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IContextManager.GetContext" />
      <MemberSignature Language="VB.NET" Value="Public Function GetContext () As IDictionary(Of String, String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ GetContext();" />
      <MemberSignature Language="F#" Value="abstract member GetContext : unit -&gt; System.Collections.Generic.IDictionary&lt;string, string&gt;" Usage="iContextManager.GetContext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtém o contexto.</summary>
        <returns>O <see cref="T:System.Collections.Generic.IDictionary`2" /> de pares chave/valor com o namespace e o nome do contexto.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O código a seguir mostra como o contexto pode ser obtido de uma instância do proxy tipado no cliente.  
  
```  
IDictionary<string, string> context;  
CalculatorProxy proxy;  
IContextManager cm = proxy.InnerChannel.GetProperty<IContextManager>();  
if (cm != null)  
    context = cm.GetContext();  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetContext">
      <MemberSignature Language="C#" Value="public void SetContext (System.Collections.Generic.IDictionary&lt;string,string&gt; context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetContext(class System.Collections.Generic.IDictionary`2&lt;string, string&gt; context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IContextManager.SetContext(System.Collections.Generic.IDictionary{System.String,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetContext (context As IDictionary(Of String, String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetContext(System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ context);" />
      <MemberSignature Language="F#" Value="abstract member SetContext : System.Collections.Generic.IDictionary&lt;string, string&gt; -&gt; unit" Usage="iContextManager.SetContext context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" Index="0" FrameworkAlternate="netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="context">O <see cref="T:System.Collections.Generic.IDictionary`2" /> de pares chave/valor com o namespace e o nome do contexto definido.</param>
        <summary>Define o contexto.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O código a seguir mostra como o contexto pode ser definido no cliente.  
  
```  
IDictionary<string, string> context;  
CalculatorProxy proxy;  
IContextManager cm = proxy.InnerChannel.GetProperty<IContextManager>();  
if (cm != null)  
    cm.SetContext(context);  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>