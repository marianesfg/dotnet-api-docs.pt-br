<Type Name="ImmutableList&lt;T&gt;" FullName="System.Collections.Immutable.ImmutableList&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7b7343ed28426a387151cc4f78163bf03b73c397" /><Meta Name="ms.sourcegitcommit" Value="4ee26ac79338b0bf99fa1e0913e8a06b21994d8e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="03/26/2019" /><Meta Name="ms.locfileid" Value="58454995" /></Metadata><TypeSignature Language="C#" Value="public sealed class ImmutableList&lt;T&gt; : System.Collections.Generic.ICollection&lt;T&gt;, System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.Generic.IList&lt;T&gt;, System.Collections.Generic.IReadOnlyCollection&lt;T&gt;, System.Collections.Generic.IReadOnlyList&lt;T&gt;, System.Collections.IList, System.Collections.Immutable.IImmutableList&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ImmutableList`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.ICollection`1&lt;!T&gt;, class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.Generic.IList`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyList`1&lt;!T&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList, class System.Collections.Immutable.IImmutableList`1&lt;!T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Immutable.ImmutableList`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ImmutableList(Of T)&#xA;Implements ICollection(Of T), IEnumerable(Of T), IImmutableList(Of T), IList, IList(Of T), IReadOnlyCollection(Of T), IReadOnlyList(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class ImmutableList sealed : System::Collections::Generic::ICollection&lt;T&gt;, System::Collections::Generic::IEnumerable&lt;T&gt;, System::Collections::Generic::IList&lt;T&gt;, System::Collections::Generic::IReadOnlyCollection&lt;T&gt;, System::Collections::Generic::IReadOnlyList&lt;T&gt;, System::Collections::IList, System::Collections::Immutable::IImmutableList&lt;T&gt;" />
  <TypeSignature Language="F#" Value="type ImmutableList&lt;'T&gt; = class&#xA;    interface ICollection&lt;'T&gt;&#xA;    interface seq&lt;'T&gt;&#xA;    interface IEnumerable&#xA;    interface IList&lt;'T&gt;&#xA;    interface IReadOnlyCollection&lt;'T&gt;&#xA;    interface IReadOnlyList&lt;'T&gt;&#xA;    interface ICollection&#xA;    interface IList&#xA;    interface IImmutableList&lt;'T&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.Immutable</AssemblyName>
    <AssemblyVersion>1.1.37.0</AssemblyVersion>
    <AssemblyVersion>1.2.0.0</AssemblyVersion>
    <AssemblyVersion>1.2.1.0</AssemblyVersion>
    <AssemblyVersion>1.2.2.0</AssemblyVersion>
    <AssemblyVersion>1.2.3.0</AssemblyVersion>
    <AssemblyVersion>1.2.4.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IList&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyCollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyList&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Immutable.IImmutableList&lt;T&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;dotnet-uwp-10.0">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;dotnet-uwp-10.0">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Immutable.ImmutableListDebuggerProxy`1))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T"><span data-ttu-id="55814-101">O tipo dos elementos na lista.</span><span class="sxs-lookup"><span data-stu-id="55814-101">The type of elements in the list.</span></span></typeparam>
    <summary><span data-ttu-id="55814-102">Representa uma lista imutável, que é uma lista fortemente tipada de objetos que podem ser acessados por índice.</span><span class="sxs-lookup"><span data-stu-id="55814-102">Represents an immutable list, which is a strongly typed list of objects that can be accessed by index.</span></span>  
  
 <span data-ttu-id="55814-103">**Pacote NuGet**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">sobre coleções imutáveis e como instalá-las</see>)</span><span class="sxs-lookup"><span data-stu-id="55814-103">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks

<span data-ttu-id="55814-104">`ImmutableList<T>` não tem nenhum construtor público; Comece recuperando vazia `ImmutableList<T>` usando o <xref:System.Collections.Immutable.ImmutableList%601.Empty?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="55814-104">`ImmutableList<T>` has no public constructor; you begin by retrieving an empty `ImmutableList<T>` by using the <xref:System.Collections.Immutable.ImmutableList%601.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="55814-105">Em seguida, você pode chamar métodos, como <xref:System.Collections.Immutable.ImmutableList%601.Add%2A> e <xref:System.Collections.Immutable.ImmutableList%601.AddRange%2A>, para popular a coleção.</span><span class="sxs-lookup"><span data-stu-id="55814-105">You can then call methods, such as <xref:System.Collections.Immutable.ImmutableList%601.Add%2A> and <xref:System.Collections.Immutable.ImmutableList%601.AddRange%2A>, to populate the collection.</span></span> <span data-ttu-id="55814-106">Observe que esses métodos retornam um novo objeto.</span><span class="sxs-lookup"><span data-stu-id="55814-106">Note that these methods return a new object.</span></span> <span data-ttu-id="55814-107">Quando você adiciona ou remove itens de uma lista imutável, é feita uma cópia da lista original com os itens adicionados ou removidos, e a lista original permanece inalterada.</span><span class="sxs-lookup"><span data-stu-id="55814-107">When you add or remove items from an immutable list, a copy of the original list is made with the items added or removed, and the original list is unchanged.</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="55814-108">Este tipo é thread-safe.</span><span class="sxs-lookup"><span data-stu-id="55814-108">This type is thread safe.</span></span></threadsafe>
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableList&lt;T&gt; Add (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableList`1&lt;!T&gt; Add(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.Add(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (value As T) As ImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableList&lt;T&gt; ^ Add(T value);" />
      <MemberSignature Language="F#" Value="member this.Add : 'T -&gt; System.Collections.Immutable.ImmutableList&lt;'T&gt;" Usage="immutableList.Add value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="55814-109">O objeto a adicionar.</span><span class="sxs-lookup"><span data-stu-id="55814-109">The object to add.</span></span></param>
        <summary><span data-ttu-id="55814-110">Adiciona o objeto especificado ao final da lista imutável.</span><span class="sxs-lookup"><span data-stu-id="55814-110">Adds the specified object to the end of the immutable list.</span></span></summary>
        <returns><span data-ttu-id="55814-111">Uma nova lista imutável com o objeto adicionado.</span><span class="sxs-lookup"><span data-stu-id="55814-111">A new immutable list with the object added.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableList&lt;T&gt; AddRange (System.Collections.Generic.IEnumerable&lt;T&gt; items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableList`1&lt;!T&gt; AddRange(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function AddRange (items As IEnumerable(Of T)) As ImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableList&lt;T&gt; ^ AddRange(System::Collections::Generic::IEnumerable&lt;T&gt; ^ items);" />
      <MemberSignature Language="F#" Value="member this.AddRange : seq&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableList&lt;'T&gt;" Usage="immutableList.AddRange items" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="items"><span data-ttu-id="55814-112">A coleção cujos elementos serão adicionados ao final da lista.</span><span class="sxs-lookup"><span data-stu-id="55814-112">The collection whose elements will be added to the end of the list.</span></span></param>
        <summary><span data-ttu-id="55814-113">Adiciona os elementos da coleção especificada ao final da lista imutável.</span><span class="sxs-lookup"><span data-stu-id="55814-113">Adds the elements of the specified collection to the end of the immutable list.</span></span></summary>
        <returns><span data-ttu-id="55814-114">Uma nova lista imutável com os elementos adicionados.</span><span class="sxs-lookup"><span data-stu-id="55814-114">A new immutable list with the elements added.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BinarySearch">
      <MemberSignature Language="C#" Value="public int BinarySearch (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 BinarySearch(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function BinarySearch (item As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int BinarySearch(T item);" />
      <MemberSignature Language="F#" Value="member this.BinarySearch : 'T -&gt; int" Usage="immutableList.BinarySearch item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="55814-115">O objeto a ser localizado.</span><span class="sxs-lookup"><span data-stu-id="55814-115">The object to locate.</span></span> <span data-ttu-id="55814-116">O valor pode ser <see langword="null" /> para tipos de referência.</span><span class="sxs-lookup"><span data-stu-id="55814-116">The value can be <see langword="null" /> for reference types.</span></span></param>
        <summary><span data-ttu-id="55814-117">Pesquisa todo a lista classificada para um elemento usando o comparador padrão e retorna o índice baseado em zero do elemento.</span><span class="sxs-lookup"><span data-stu-id="55814-117">Searches the entire sorted list for an element using the default comparer and returns the zero-based index of the element.</span></span></summary>
        <returns><span data-ttu-id="55814-118">O índice baseado em zero do item na Lista classificada, se o item for encontrado; caso contrário, um número negativo que é o complemento bit a bit do índice do próximo elemento que é maior que o item ou, se não houver nenhum elemento maior, o complemento bit a bit de <see cref="P:System.Collections.ICollection.Count" />.</span><span class="sxs-lookup"><span data-stu-id="55814-118">The zero-based index of item in the sorted List, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of <see cref="P:System.Collections.ICollection.Count" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="55814-119">O comparador padrão não é capaz de encontrar uma implementação de comparador para o tipo T.</span><span class="sxs-lookup"><span data-stu-id="55814-119">The default comparer cannot find a comparer implementation of the for type T.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BinarySearch">
      <MemberSignature Language="C#" Value="public int BinarySearch (T item, System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 BinarySearch(!T item, class System.Collections.Generic.IComparer`1&lt;!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function BinarySearch (item As T, comparer As IComparer(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int BinarySearch(T item, System::Collections::Generic::IComparer&lt;T&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="member this.BinarySearch : 'T * System.Collections.Generic.IComparer&lt;'T&gt; -&gt; int" Usage="immutableList.BinarySearch (item, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="55814-120">O objeto a ser localizado.</span><span class="sxs-lookup"><span data-stu-id="55814-120">The object to locate.</span></span> <span data-ttu-id="55814-121">O valor pode ser nulo para tipos de referência.</span><span class="sxs-lookup"><span data-stu-id="55814-121">The value can be null for reference types.</span></span></param>
        <param name="comparer"><span data-ttu-id="55814-122">A implementação de comparador a ser usada na comparação de elementos ou nulo para usar o comparador padrão.</span><span class="sxs-lookup"><span data-stu-id="55814-122">The  comparer implementation to use when comparing elements or null to use the default comparer.</span></span></param>
        <summary><span data-ttu-id="55814-123">Pesquisa um elemento em toda a lista classificada usando o comparador especificado e retorna o índice baseado em zero do elemento.</span><span class="sxs-lookup"><span data-stu-id="55814-123">Searches the entire sorted list for an element using the specified comparer and returns the zero-based index of the element.</span></span></summary>
        <returns><span data-ttu-id="55814-124">O índice baseado em zero do item na Lista classificada, se o item for encontrado; caso contrário, um número negativo que é o complemento bit a bit do índice do próximo elemento que é maior que o item ou, se não houver nenhum elemento maior, o complemento bit a bit de <see cref="P:System.Collections.ICollection.Count" />.</span><span class="sxs-lookup"><span data-stu-id="55814-124">The zero-based index of item in the sorted List, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of <see cref="P:System.Collections.ICollection.Count" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="55814-125">O comparador é <see langword="null" /> e o comparador padrão não é capaz de encontrar uma implementação de comparador para o tipo T.</span><span class="sxs-lookup"><span data-stu-id="55814-125">comparer is <see langword="null" />, and the default comparer cannot find an comparer implementation for type T.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BinarySearch">
      <MemberSignature Language="C#" Value="public int BinarySearch (int index, int count, T item, System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 BinarySearch(int32 index, int32 count, !T item, class System.Collections.Generic.IComparer`1&lt;!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function BinarySearch (index As Integer, count As Integer, item As T, comparer As IComparer(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int BinarySearch(int index, int count, T item, System::Collections::Generic::IComparer&lt;T&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="member this.BinarySearch : int * int * 'T * System.Collections.Generic.IComparer&lt;'T&gt; -&gt; int" Usage="immutableList.BinarySearch (index, count, item, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="item" Type="T" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="55814-126">O índice baseado em zero inicial do intervalo a ser pesquisado.</span><span class="sxs-lookup"><span data-stu-id="55814-126">The zero-based starting index of the range to search.</span></span></param>
        <param name="count"><span data-ttu-id="55814-127">O tamanho do intervalo a ser procurado.</span><span class="sxs-lookup"><span data-stu-id="55814-127">The length of the range to search.</span></span></param>
        <param name="item"><span data-ttu-id="55814-128">O objeto a ser localizado.</span><span class="sxs-lookup"><span data-stu-id="55814-128">The object to locate.</span></span> <span data-ttu-id="55814-129">O valor pode ser nulo para tipos de referência.</span><span class="sxs-lookup"><span data-stu-id="55814-129">The value can be null for reference types.</span></span></param>
        <param name="comparer"><span data-ttu-id="55814-130">A implementação de comparador a ser usada na comparação de elementos ou <see langword="null" /> para usar o comparador padrão.</span><span class="sxs-lookup"><span data-stu-id="55814-130">The comparer implementation to use when comparing elements, or <see langword="null" /> to use the default comparer.</span></span></param>
        <summary><span data-ttu-id="55814-131">Pesquisa um intervalo de elementos na lista classificada para encontrar um elemento que usa o comparador especificado e retorna o índice baseado em zero do elemento.</span><span class="sxs-lookup"><span data-stu-id="55814-131">Searches a range of elements in the sorted list for an element using the specified comparer and returns the zero-based index of the element.</span></span></summary>
        <returns><span data-ttu-id="55814-132">O índice baseado em zero do item na lista classificada, se o item for encontrado; caso contrário, um número negativo que é o complemento bit a bit do índice do próximo elemento que é maior que o item ou, se não houver nenhum elemento maior, o complemento bit a bit de <paramref name="count" />.</span><span class="sxs-lookup"><span data-stu-id="55814-132">The zero-based index of item in the sorted list, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of <paramref name="count" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="55814-133">índice é menor que 0 ou <paramref name="count" /> é menor que 0.</span><span class="sxs-lookup"><span data-stu-id="55814-133">index is less than 0 or <paramref name="count" /> is less than 0.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="55814-134">índice e <paramref name="count" /> não denotam um intervalo válido na lista.</span><span class="sxs-lookup"><span data-stu-id="55814-134">index and <paramref name="count" /> do not denote a valid range in the list.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="55814-135">O <see langword="null" /> é <paramref name="comparer" /> e o comparador padrão não é capaz de encontrar uma implementação de comparador para o tipo T.</span><span class="sxs-lookup"><span data-stu-id="55814-135"><paramref name="comparer" /> is <see langword="null" />, and the default comparer cannot find an comparer implementation for type T.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableList&lt;T&gt; Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableList`1&lt;!T&gt; Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Function Clear () As ImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableList&lt;T&gt; ^ Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; System.Collections.Immutable.ImmutableList&lt;'T&gt;" Usage="immutableList.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="55814-136">Remove todos os elementos da lista imutável.</span><span class="sxs-lookup"><span data-stu-id="55814-136">Removes all elements from the immutable list.</span></span></summary>
        <returns><span data-ttu-id="55814-137">Uma lista vazia que mantém a mesma classificação ou semântica não ordenada que esta instância tem.</span><span class="sxs-lookup"><span data-stu-id="55814-137">An empty list that retains the same sort or unordered semantics that this instance has.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(T value);" />
      <MemberSignature Language="F#" Value="abstract member Contains : 'T -&gt; bool&#xA;override this.Contains : 'T -&gt; bool" Usage="immutableList.Contains value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Contains(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="55814-138">O valor a ser localizado.</span><span class="sxs-lookup"><span data-stu-id="55814-138">The value to locate.</span></span></param>
        <summary><span data-ttu-id="55814-139">Determina se esta lista imutável contém o valor especificado.</span><span class="sxs-lookup"><span data-stu-id="55814-139">Determines whether this immutable list contains the specified value.</span></span></summary>
        <returns><span data-ttu-id="55814-140"><see langword="true" /> se a lista contém o valor especificado; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="55814-140"><see langword="true" /> if the list contains the specified value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertAll&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableList&lt;TOutput&gt; ConvertAll&lt;TOutput&gt; (Func&lt;T,TOutput&gt; converter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableList`1&lt;!!TOutput&gt; ConvertAll&lt;TOutput&gt;(class System.Func`2&lt;!T, !!TOutput&gt; converter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.ConvertAll``1(System.Func{`0,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function ConvertAll(Of TOutput) (converter As Func(Of T, TOutput)) As ImmutableList(Of TOutput)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA; System::Collections::Immutable::ImmutableList&lt;TOutput&gt; ^ ConvertAll(Func&lt;T, TOutput&gt; ^ converter);" />
      <MemberSignature Language="F#" Value="member this.ConvertAll : Func&lt;'T, 'Output&gt; -&gt; System.Collections.Immutable.ImmutableList&lt;'Output&gt;" Usage="immutableList.ConvertAll converter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableList&lt;TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="converter" Type="System.Func&lt;T,TOutput&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput"><span data-ttu-id="55814-141">O tipo dos elementos da matriz de destino.</span><span class="sxs-lookup"><span data-stu-id="55814-141">The type of the elements of the target array.</span></span></typeparam>
        <param name="converter"><span data-ttu-id="55814-142">Um delegado que converte cada elemento de um tipo em outro tipo.</span><span class="sxs-lookup"><span data-stu-id="55814-142">A delegate that converts each element from one type to another type.</span></span></param>
        <summary><span data-ttu-id="55814-143">Converte os elementos na lista imutável atual em outro tipo e retorna uma lista contendo os elementos convertidos.</span><span class="sxs-lookup"><span data-stu-id="55814-143">Converts the elements in the current immutable list to another type, and returns a list containing the converted elements.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (T[] array);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(!T[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.CopyTo(`0[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As T())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;T&gt; ^ array);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : 'T[] -&gt; unit" Usage="immutableList.CopyTo array" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="55814-144">A matriz unidimensional que é o destino dos elementos copiados da lista imutável.</span><span class="sxs-lookup"><span data-stu-id="55814-144">The one-dimensional array that is the destination of the elements copied from the immutable list.</span></span> <span data-ttu-id="55814-145">A matriz deve ter indexação com base em zero.</span><span class="sxs-lookup"><span data-stu-id="55814-145">The array must have zero-based indexing.</span></span></param>
        <summary><span data-ttu-id="55814-146">Copia toda a lista imutável em uma matriz unidimensional compatível, começando pelo início da matriz de destino.</span><span class="sxs-lookup"><span data-stu-id="55814-146">Copies the entire immutable list to a compatible one-dimensional array, starting at the beginning of the target array.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (T[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(!T[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.CopyTo(`0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As T(), arrayIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(cli::array &lt;T&gt; ^ array, int arrayIndex);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : 'T[] * int -&gt; unit&#xA;override this.CopyTo : 'T[] * int -&gt; unit" Usage="immutableList.CopyTo (array, arrayIndex)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="55814-147">A matriz unidimensional que é o destino dos elementos copiados da lista imutável.</span><span class="sxs-lookup"><span data-stu-id="55814-147">The one-dimensional array that is the destination of the elements copied from the immutable list.</span></span> <span data-ttu-id="55814-148">A matriz deve ter indexação com base em zero.</span><span class="sxs-lookup"><span data-stu-id="55814-148">The array must have zero-based indexing.</span></span></param>
        <param name="arrayIndex"><span data-ttu-id="55814-149">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</span><span class="sxs-lookup"><span data-stu-id="55814-149">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="55814-150">Copia toda a lista imutável para uma matriz unidimensional compatível, iniciando no índice especificado da matriz de destino.</span><span class="sxs-lookup"><span data-stu-id="55814-150">Copies the entire immutable list to a compatible one-dimensional array, starting at the specified index of the target array.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (int index, T[] array, int arrayIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(int32 index, !T[] array, int32 arrayIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (index As Integer, array As T(), arrayIndex As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(int index, cli::array &lt;T&gt; ^ array, int arrayIndex, int count);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : int * 'T[] * int * int -&gt; unit" Usage="immutableList.CopyTo (index, array, arrayIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="55814-151">O índice baseado em zero na lista imutável de origem em que a cópia começa.</span><span class="sxs-lookup"><span data-stu-id="55814-151">The zero-based index in the source immutable list at which copying begins.</span></span></param>
        <param name="array"><span data-ttu-id="55814-152">A matriz unidimensional que é o destino dos elementos copiados da lista imutável.</span><span class="sxs-lookup"><span data-stu-id="55814-152">The one-dimensional array that is the destination of the elements copied from the immutable list.</span></span> <span data-ttu-id="55814-153">A matriz deve ter indexação com base em zero.</span><span class="sxs-lookup"><span data-stu-id="55814-153">The array must have zero-based indexing.</span></span></param>
        <param name="arrayIndex"><span data-ttu-id="55814-154">O índice de base zero na matriz no qual a cópia começa.</span><span class="sxs-lookup"><span data-stu-id="55814-154">The zero-based index in array at which copying begins.</span></span></param>
        <param name="count"><span data-ttu-id="55814-155">O número de elementos a serem copiados.</span><span class="sxs-lookup"><span data-stu-id="55814-155">The number of elements to copy.</span></span></param>
        <summary><span data-ttu-id="55814-156">Copia um intervalo de elementos da lista imutável para uma matriz unidimensional compatível, começando pelo índice especificado da matriz de destino.</span><span class="sxs-lookup"><span data-stu-id="55814-156">Copies a range of elements from the immutable list to a compatible one-dimensional array, starting at the specified index of the target array.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableList`1.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Collections.Immutable.ImmutableList&lt;'T&gt;.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.Count</InterfaceMember>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyCollection`1.Count</InterfaceMember>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="55814-157">Obtém o número de elementos contidos na lista.</span><span class="sxs-lookup"><span data-stu-id="55814-157">Gets the number of elements contained in the list.</span></span></summary>
        <value><span data-ttu-id="55814-158">O número de elementos na lista.</span><span class="sxs-lookup"><span data-stu-id="55814-158">The number of elements in the list.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static readonly System.Collections.Immutable.ImmutableList&lt;T&gt; Empty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Collections.Immutable.ImmutableList`1&lt;!T&gt; Empty" />
      <MemberSignature Language="DocId" Value="F:System.Collections.Immutable.ImmutableList`1.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Empty As ImmutableList(Of T) " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Collections::Immutable::ImmutableList&lt;T&gt; ^ Empty;" />
      <MemberSignature Language="F#" Value=" staticval mutable Empty : System.Collections.Immutable.ImmutableList&lt;'T&gt;" Usage="System.Collections.Immutable.ImmutableList&lt;'T&gt;.Empty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="55814-159">Obtém um conjunto vazio com o comparador de classificação padrão.</span><span class="sxs-lookup"><span data-stu-id="55814-159">Gets an empty set with the default sort comparer.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exists">
      <MemberSignature Language="C#" Value="public bool Exists (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Exists(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.Exists(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Exists (match As Predicate(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Exists(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.Exists : Predicate&lt;'T&gt; -&gt; bool" Usage="immutableList.Exists match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match"><span data-ttu-id="55814-160">O delegado que define as condições dos elementos a serem pesquisados.</span><span class="sxs-lookup"><span data-stu-id="55814-160">The delegate that defines the conditions of the elements to search for.</span></span></param>
        <summary><span data-ttu-id="55814-161">Determina se a lista imutável contém elementos que correspondem às condições definidas pelo predicado especificado.</span><span class="sxs-lookup"><span data-stu-id="55814-161">Determines whether the immutable list contains elements that match the conditions defined by the specified predicate.</span></span></summary>
        <returns><span data-ttu-id="55814-162"><see langword="true" /> se a lista imutável contiver um ou mais elementos que correspondem às condições definidas pelo predicado especificado; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="55814-162"><see langword="true" /> if the immutable list contains one or more elements that match the conditions defined by the specified predicate; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public T Find (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T Find(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.Find(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (match As Predicate(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T Find(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.Find : Predicate&lt;'T&gt; -&gt; 'T" Usage="immutableList.Find match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match"><span data-ttu-id="55814-163">O delegado que define as condições do elemento a ser pesquisado.</span><span class="sxs-lookup"><span data-stu-id="55814-163">The delegate that defines the conditions of the element to search for.</span></span></param>
        <summary><span data-ttu-id="55814-164">Pesquisa um elemento que corresponde às condições definidas pelo predicado especificado e retorna a primeira ocorrência em toda a lista imutável.</span><span class="sxs-lookup"><span data-stu-id="55814-164">Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire immutable list.</span></span></summary>
        <returns><span data-ttu-id="55814-165">O primeiro elemento que corresponde às condições definidas pelo predicado especificado, se encontrado; caso contrário, o valor padrão para o tipo <paramref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="55814-165">The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <paramref name="T" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindAll">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableList&lt;T&gt; FindAll (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableList`1&lt;!T&gt; FindAll(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.FindAll(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindAll (match As Predicate(Of T)) As ImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableList&lt;T&gt; ^ FindAll(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.FindAll : Predicate&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableList&lt;'T&gt;" Usage="immutableList.FindAll match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match"><span data-ttu-id="55814-166">O delegado que define as condições dos elementos a serem pesquisados.</span><span class="sxs-lookup"><span data-stu-id="55814-166">The delegate that defines the conditions of the elements to search for.</span></span></param>
        <summary><span data-ttu-id="55814-167">Recupera todos os elementos que correspondem às condições definidas pelo predicado especificado.</span><span class="sxs-lookup"><span data-stu-id="55814-167">Retrieves all the elements that match the conditions defined by the specified predicate.</span></span></summary>
        <returns><span data-ttu-id="55814-168">Uma lista imutável que contém todos os elementos que correspondem às condições definidas pelo predicado especificado, se encontrado; caso contrário, uma lista imutável vazia.</span><span class="sxs-lookup"><span data-stu-id="55814-168">An immutable list that contains all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty immutable list.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindIndex">
      <MemberSignature Language="C#" Value="public int FindIndex (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindIndex(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindIndex (match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindIndex(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.FindIndex : Predicate&lt;'T&gt; -&gt; int" Usage="immutableList.FindIndex match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match"><span data-ttu-id="55814-169">O delegado que define as condições do elemento a ser pesquisado.</span><span class="sxs-lookup"><span data-stu-id="55814-169">The delegate that defines the conditions of the element to search for.</span></span></param>
        <summary><span data-ttu-id="55814-170">Pesquisa um elemento que corresponde às condições definidas pelo predicado especificado e retorna o índice baseado em zero da primeira ocorrência em toda a lista imutável.</span><span class="sxs-lookup"><span data-stu-id="55814-170">Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire immutable list.</span></span></summary>
        <returns><span data-ttu-id="55814-171">O índice baseado em zero da primeira ocorrência de um elemento que corresponde às condições definidas por correspondência, se for encontrado; caso contrário, ?1.</span><span class="sxs-lookup"><span data-stu-id="55814-171">The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, ?1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindIndex">
      <MemberSignature Language="C#" Value="public int FindIndex (int startIndex, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindIndex(int32 startIndex, class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindIndex (startIndex As Integer, match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindIndex(int startIndex, Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.FindIndex : int * Predicate&lt;'T&gt; -&gt; int" Usage="immutableList.FindIndex (startIndex, match)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="startIndex"><span data-ttu-id="55814-172">O índice inicial com base em zero da pesquisa.</span><span class="sxs-lookup"><span data-stu-id="55814-172">The zero-based starting index of the search.</span></span></param>
        <param name="match"><span data-ttu-id="55814-173">O delegado que define as condições do elemento a ser pesquisado.</span><span class="sxs-lookup"><span data-stu-id="55814-173">The delegate that defines the conditions of the element to search for.</span></span></param>
        <summary><span data-ttu-id="55814-174">Pesquisa um elemento que corresponda às condições definidas pelo predicado especificado e retorna o índice baseado em zero da primeira ocorrência dentro do intervalo de elementos na lista imutável que se estende do índice especificado ao último elemento.</span><span class="sxs-lookup"><span data-stu-id="55814-174">Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.</span></span></summary>
        <returns><span data-ttu-id="55814-175">O índice baseado em zero da primeira ocorrência de um elemento que corresponde às condições definidas por correspondência, se for encontrado; caso contrário, ?1.</span><span class="sxs-lookup"><span data-stu-id="55814-175">The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, ?1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindIndex">
      <MemberSignature Language="C#" Value="public int FindIndex (int startIndex, int count, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindIndex(int32 startIndex, int32 count, class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindIndex (startIndex As Integer, count As Integer, match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindIndex(int startIndex, int count, Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.FindIndex : int * int * Predicate&lt;'T&gt; -&gt; int" Usage="immutableList.FindIndex (startIndex, count, match)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="startIndex"><span data-ttu-id="55814-176">O índice inicial com base em zero da pesquisa.</span><span class="sxs-lookup"><span data-stu-id="55814-176">The zero-based starting index of the search.</span></span></param>
        <param name="count"><span data-ttu-id="55814-177">O número de elementos na seção a ser pesquisada.</span><span class="sxs-lookup"><span data-stu-id="55814-177">The number of elements in the section to search.</span></span></param>
        <param name="match"><span data-ttu-id="55814-178">O delegado que define as condições do elemento a ser pesquisado.</span><span class="sxs-lookup"><span data-stu-id="55814-178">The delegate that defines the conditions of the element to search for.</span></span></param>
        <summary><span data-ttu-id="55814-179">Pesquisa um elemento que corresponda às condições definidas pelo predicado especificado e retorna o índice baseado em zero da primeira ocorrência dentro do intervalo de elementos na lista imutável, que começa no índice especificado e contém o número de elementos especificado.</span><span class="sxs-lookup"><span data-stu-id="55814-179">Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that starts at the specified index and contains the specified number of elements.</span></span></summary>
        <returns><span data-ttu-id="55814-180">O índice baseado em zero da primeira ocorrência de um elemento que corresponde às condições definidas por correspondência, se for encontrado; caso contrário, ?1.</span><span class="sxs-lookup"><span data-stu-id="55814-180">The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, ?1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindLast">
      <MemberSignature Language="C#" Value="public T FindLast (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T FindLast(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.FindLast(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindLast (match As Predicate(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T FindLast(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.FindLast : Predicate&lt;'T&gt; -&gt; 'T" Usage="immutableList.FindLast match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match"><span data-ttu-id="55814-181">O delegado que define as condições do elemento a ser pesquisado.</span><span class="sxs-lookup"><span data-stu-id="55814-181">The delegate that defines the conditions of the element to search for.</span></span></param>
        <summary><span data-ttu-id="55814-182">Pesquisa um elemento que corresponda às condições definidas pelo predicado especificado e retorna a primeira ocorrência em toda a lista imutável.</span><span class="sxs-lookup"><span data-stu-id="55814-182">Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire immutable list.</span></span></summary>
        <returns><span data-ttu-id="55814-183">O último elemento que corresponde às condições definidas pelo predicado especificado, se encontrado; caso contrário, o valor padrão para o tipo <paramref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="55814-183">The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <paramref name="T" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindLastIndex">
      <MemberSignature Language="C#" Value="public int FindLastIndex (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindLastIndex(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindLastIndex (match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindLastIndex(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.FindLastIndex : Predicate&lt;'T&gt; -&gt; int" Usage="immutableList.FindLastIndex match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match"><span data-ttu-id="55814-184">O delegado que define as condições do elemento a ser pesquisado.</span><span class="sxs-lookup"><span data-stu-id="55814-184">The delegate that defines the conditions of the element to search for.</span></span></param>
        <summary><span data-ttu-id="55814-185">Pesquisa um elemento que corresponde às condições definidas pelo predicado especificado e retorna o índice baseado em zero da última ocorrência em toda a lista imutável.</span><span class="sxs-lookup"><span data-stu-id="55814-185">Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire immutable list.</span></span></summary>
        <returns><span data-ttu-id="55814-186">O índice baseado em zero da última ocorrência de um elemento que corresponde às condições definidas por <paramref name="match" />, se for encontrado; caso contrário, ?1.</span><span class="sxs-lookup"><span data-stu-id="55814-186">The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, ?1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindLastIndex">
      <MemberSignature Language="C#" Value="public int FindLastIndex (int startIndex, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindLastIndex(int32 startIndex, class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindLastIndex (startIndex As Integer, match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindLastIndex(int startIndex, Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.FindLastIndex : int * Predicate&lt;'T&gt; -&gt; int" Usage="immutableList.FindLastIndex (startIndex, match)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="startIndex"><span data-ttu-id="55814-187">O índice inicial com base em zero da pesquisa inversa.</span><span class="sxs-lookup"><span data-stu-id="55814-187">The zero-based starting index of the backward search.</span></span></param>
        <param name="match"><span data-ttu-id="55814-188">O delegado que define as condições do elemento a ser pesquisado.</span><span class="sxs-lookup"><span data-stu-id="55814-188">The delegate that defines the conditions of the element to search for.</span></span></param>
        <summary><span data-ttu-id="55814-189">Pesquisa um elemento que corresponde às condições definidas pelo predicado especificado e retorna o índice baseado em zero da última ocorrência dentro do intervalo de elementos na lista imutável que se estende do primeiro elemento ao índice especificado.</span><span class="sxs-lookup"><span data-stu-id="55814-189">Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.</span></span></summary>
        <returns><span data-ttu-id="55814-190">O índice baseado em zero da última ocorrência de um elemento que corresponde às condições definidas por <paramref name="match" />, se for encontrado; caso contrário, ?1.</span><span class="sxs-lookup"><span data-stu-id="55814-190">The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, ?1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindLastIndex">
      <MemberSignature Language="C#" Value="public int FindLastIndex (int startIndex, int count, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindLastIndex(int32 startIndex, int32 count, class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindLastIndex (startIndex As Integer, count As Integer, match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindLastIndex(int startIndex, int count, Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.FindLastIndex : int * int * Predicate&lt;'T&gt; -&gt; int" Usage="immutableList.FindLastIndex (startIndex, count, match)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="startIndex"><span data-ttu-id="55814-191">O índice inicial com base em zero da pesquisa inversa.</span><span class="sxs-lookup"><span data-stu-id="55814-191">The zero-based starting index of the backward search.</span></span></param>
        <param name="count"><span data-ttu-id="55814-192">O número de elementos na seção a ser pesquisada.</span><span class="sxs-lookup"><span data-stu-id="55814-192">The number of elements in the section to search.</span></span></param>
        <param name="match"><span data-ttu-id="55814-193">O delegado que define as condições do elemento a ser pesquisado.</span><span class="sxs-lookup"><span data-stu-id="55814-193">The delegate that defines the conditions of the element to search for.</span></span></param>
        <summary><span data-ttu-id="55814-194">Pesquisa por um elemento que corresponda às condições definidas pelo predicado especificado e retorna o índice baseado em zero da última ocorrência no intervalo de elementos na lista imutável que contém o número de elementos especificado e termina no índice especificado.</span><span class="sxs-lookup"><span data-stu-id="55814-194">Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that contains the specified number of elements and ends at the specified index.</span></span></summary>
        <returns><span data-ttu-id="55814-195">O índice baseado em zero da última ocorrência de um elemento que corresponde às condições definidas por <paramref name="match" />, se for encontrado; caso contrário, ?1.</span><span class="sxs-lookup"><span data-stu-id="55814-195">The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, ?1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForEach">
      <MemberSignature Language="C#" Value="public void ForEach (Action&lt;T&gt; action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ForEach(class System.Action`1&lt;!T&gt; action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.ForEach(System.Action{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub ForEach (action As Action(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ForEach(Action&lt;T&gt; ^ action);" />
      <MemberSignature Language="F#" Value="member this.ForEach : Action&lt;'T&gt; -&gt; unit" Usage="immutableList.ForEach action" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="55814-196">O delegado a ser executado em cada elemento da lista imutável.</span><span class="sxs-lookup"><span data-stu-id="55814-196">The delegate to perform on each element of the immutable list.</span></span></param>
        <summary><span data-ttu-id="55814-197">Executa a ação especificada em cada elemento da lista imutável.</span><span class="sxs-lookup"><span data-stu-id="55814-197">Performs the specified action on each element of the immutable list.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableList&lt;T&gt;.Enumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableList`1/Enumerator&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As ImmutableList(Of T).Enumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableList&lt;T&gt;::Enumerator GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Collections.Immutable.ImmutableList&lt;'T&gt;.Enumerator" Usage="immutableList.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableList&lt;T&gt;+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="55814-198">Retorna um enumerador que itera na lista imutável.</span><span class="sxs-lookup"><span data-stu-id="55814-198">Returns an enumerator that iterates through the immutable list.</span></span></summary>
        <returns><span data-ttu-id="55814-199">Um enumerador que pode ser usado para iterar na lista imutável.</span><span class="sxs-lookup"><span data-stu-id="55814-199">An enumerator  that can be used to iterate through the immutable list.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!CAUTION]
>  <span data-ttu-id="55814-200">Quando este enumerador é usado como um valor de tipo (ou seja, quando ele não é convertido), não copie-o, atribuindo-lo a uma segunda variável ou passá-la para outro método.</span><span class="sxs-lookup"><span data-stu-id="55814-200">When this enumerator is used as a value type (that is, when it isn't boxed), do not copy it by assigning it to a second variable or by passing it to another method.</span></span> <span data-ttu-id="55814-201">Quando este enumerador é descartado, ele retorna uma pilha de tipo de referência mutável para um pool de recursos e se o enumerador de tipo de valor é copiado (que pode acontecer facilmente, inadvertidamente, se você passar o valor em torno de), há um risco de que uma pilha que já foi retornado para o recurso o pool ainda pode estar em uso por uma das cópias de enumerador, levando à corrupção de dados ou exceções.</span><span class="sxs-lookup"><span data-stu-id="55814-201">When this enumerator is disposed of, it returns a mutable reference type stack to a resource pool, and if the value type enumerator is copied (which can easily happen unintentionally if you pass the value around), there is a risk that a stack that has already been returned to the resource pool may still be in use by one of the enumerator copies, leading to data corruption or exceptions.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableList&lt;T&gt; GetRange (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableList`1&lt;!T&gt; GetRange(int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.GetRange(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRange (index As Integer, count As Integer) As ImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableList&lt;T&gt; ^ GetRange(int index, int count);" />
      <MemberSignature Language="F#" Value="member this.GetRange : int * int -&gt; System.Collections.Immutable.ImmutableList&lt;'T&gt;" Usage="immutableList.GetRange (index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="55814-202">O índice baseado em zero no qual é iniciado o intervalo.</span><span class="sxs-lookup"><span data-stu-id="55814-202">The zero-based index at which the range starts.</span></span></param>
        <param name="count"><span data-ttu-id="55814-203">O número de elementos no intervalo.</span><span class="sxs-lookup"><span data-stu-id="55814-203">The number of elements in the range.</span></span></param>
        <summary><span data-ttu-id="55814-204">Cria uma cópia superficial de um intervalo de elementos na lista imutável de origem.</span><span class="sxs-lookup"><span data-stu-id="55814-204">Creates a shallow copy of a range of elements in the source immutable list.</span></span></summary>
        <returns><span data-ttu-id="55814-205">Uma cópia superficial de um intervalo de elementos na lista imutável de origem.</span><span class="sxs-lookup"><span data-stu-id="55814-205">A shallow copy of a range of elements in the source immutable list.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.IndexOf(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(T value);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : 'T -&gt; int&#xA;override this.IndexOf : 'T -&gt; int" Usage="immutableList.IndexOf value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.IndexOf(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="55814-206">O objeto a ser localizado na lista imutável.</span><span class="sxs-lookup"><span data-stu-id="55814-206">The object to locate in the immutable list.</span></span> <span data-ttu-id="55814-207">O valor pode ser <c>nulo</c> para tipos de referência.</span><span class="sxs-lookup"><span data-stu-id="55814-207">The value can be <c>null</c> for reference types.</span></span></param>
        <summary><span data-ttu-id="55814-208">Pesquisa o objeto especificado e retorna o índice baseado em zero da primeira ocorrência dentro de toda a lista imutável.</span><span class="sxs-lookup"><span data-stu-id="55814-208">Searches for the specified object and returns the zero-based index of the first occurrence within the entire immutable list.</span></span></summary>
        <returns><span data-ttu-id="55814-209">O índice baseado em zero da primeira ocorrência de <paramref name="value" /> em toda a lista imutável, se encontrado; caso contrário, ?1.</span><span class="sxs-lookup"><span data-stu-id="55814-209">The zero-based index of the first occurrence of <paramref name="value" /> within the entire immutable list, if found; otherwise, ?1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (T item, int index, int count, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(!T item, int32 index, int32 count, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (item As T, index As Integer, count As Integer, equalityComparer As IEqualityComparer(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(T item, int index, int count, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : 'T * int * int * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; int&#xA;override this.IndexOf : 'T * int * int * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; int" Usage="immutableList.IndexOf (item, index, count, equalityComparer)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="55814-210">O objeto a ser localizado na lista; o valor pode ser nulo para tipos de referência.</span><span class="sxs-lookup"><span data-stu-id="55814-210">The object to locate in the list The value can be null for reference types.</span></span></param>
        <param name="index"><span data-ttu-id="55814-211">O índice inicial com base em zero da pesquisa.</span><span class="sxs-lookup"><span data-stu-id="55814-211">The zero-based starting index of the search.</span></span> <span data-ttu-id="55814-212">0 (zero) é válido em uma lista vazia.</span><span class="sxs-lookup"><span data-stu-id="55814-212">0 (zero) is valid in an empty list.</span></span></param>
        <param name="count"><span data-ttu-id="55814-213">O número de elementos na seção a ser pesquisada.</span><span class="sxs-lookup"><span data-stu-id="55814-213">The number of elements in the section to search.</span></span></param>
        <param name="equalityComparer"><span data-ttu-id="55814-214">O comparador de igualdade a ser usado na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="55814-214">The equality comparer to use in the search.</span></span></param>
        <summary><span data-ttu-id="55814-215">Pesquisa o objeto especificado e retorna o índice baseado em zero da primeira ocorrência em um intervalo de elementos na lista que começa no índice especificado e contém o número de elementos especificado.</span><span class="sxs-lookup"><span data-stu-id="55814-215">Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the list that starts at the specified index and contains the specified number of elements.</span></span></summary>
        <returns><span data-ttu-id="55814-216">O índice baseado em zero da primeira ocorrência do item no intervalo de elementos na lista que começa no índice e contém a contagem de número de elementos, se encontrado; caso contrário, -1.</span><span class="sxs-lookup"><span data-stu-id="55814-216">The zero-based index of the first occurrence of item within the range of elements in the list that starts at index and contains count number of elements, if found; otherwise, -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableList&lt;T&gt; Insert (int index, T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableList`1&lt;!T&gt; Insert(int32 index, !T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.Insert(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (index As Integer, item As T) As ImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableList&lt;T&gt; ^ Insert(int index, T item);" />
      <MemberSignature Language="F#" Value="member this.Insert : int * 'T -&gt; System.Collections.Immutable.ImmutableList&lt;'T&gt;" Usage="immutableList.Insert (index, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="55814-217">O índice baseado em zero no qual inserir o objeto.</span><span class="sxs-lookup"><span data-stu-id="55814-217">The zero-based index at which to insert the object.</span></span></param>
        <param name="item"><span data-ttu-id="55814-218">O objeto a ser inserido.</span><span class="sxs-lookup"><span data-stu-id="55814-218">The object to insert.</span></span></param>
        <summary><span data-ttu-id="55814-219">Insere o objeto especificado na lista imutável no índice especificado.</span><span class="sxs-lookup"><span data-stu-id="55814-219">Inserts the specified object into the immutable list at the specified index.</span></span></summary>
        <returns><span data-ttu-id="55814-220">A nova lista imutável depois que o objeto é inserido.</span><span class="sxs-lookup"><span data-stu-id="55814-220">The new immutable list after the object is inserted.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableList&lt;T&gt; InsertRange (int index, System.Collections.Generic.IEnumerable&lt;T&gt; items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableList`1&lt;!T&gt; InsertRange(int32 index, class System.Collections.Generic.IEnumerable`1&lt;!T&gt; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function InsertRange (index As Integer, items As IEnumerable(Of T)) As ImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableList&lt;T&gt; ^ InsertRange(int index, System::Collections::Generic::IEnumerable&lt;T&gt; ^ items);" />
      <MemberSignature Language="F#" Value="member this.InsertRange : int * seq&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableList&lt;'T&gt;" Usage="immutableList.InsertRange (index, items)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="55814-221">O índice baseado em zero no qual inserir os elementos.</span><span class="sxs-lookup"><span data-stu-id="55814-221">The zero-based index at which to insert the elements.</span></span></param>
        <param name="items"><span data-ttu-id="55814-222">A coleção cujos elementos devem ser inseridos.</span><span class="sxs-lookup"><span data-stu-id="55814-222">The collection whose elements should be inserted.</span></span></param>
        <summary><span data-ttu-id="55814-223">Insere os elementos de uma coleção na lista imutável no índice especificado.</span><span class="sxs-lookup"><span data-stu-id="55814-223">Inserts the elements of a collection into the immutable list at the specified index.</span></span></summary>
        <returns><span data-ttu-id="55814-224">A nova lista imutável depois que os elementos foram inseridos.</span><span class="sxs-lookup"><span data-stu-id="55814-224">The new immutable list after the elements are inserted.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableList`1.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEmpty : bool" Usage="System.Collections.Immutable.ImmutableList&lt;'T&gt;.IsEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;dotnet-uwp-10.0">
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="55814-225">Obtém um valor que indica se essa lista está vazia.</span><span class="sxs-lookup"><span data-stu-id="55814-225">Gets a value that indicates whether this list is empty.</span></span></summary>
        <value><span data-ttu-id="55814-226"><see langword="true" /> Se a lista estiver vazia; Caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="55814-226"><see langword="true" /> if the list is empty; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public T this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableList`1.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(index As Integer) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T default[int] { T get(int index); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : 'T" Usage="System.Collections.Immutable.ImmutableList&lt;'T&gt;.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="55814-227">O índice do elemento a ser recuperado.</span><span class="sxs-lookup"><span data-stu-id="55814-227">The index of the element to retrieve.</span></span></param>
        <summary><span data-ttu-id="55814-228">Obtém o elemento no índice especificado da lista.</span><span class="sxs-lookup"><span data-stu-id="55814-228">Gets the element at the specified index of the list.</span></span></summary>
        <value><span data-ttu-id="55814-229">O elemento no índice especificado.</span><span class="sxs-lookup"><span data-stu-id="55814-229">The element at the specified index.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemRef">
      <MemberSignature Language="C#" Value="public ref readonly T&amp; ItemRef (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance T&amp; modreq(System.Runtime.InteropServices.InAttribute) ItemRef(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.ItemRef(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ItemRef (index As Integer) As T&amp;" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T&amp; ^ ItemRef(int index);" />
      <MemberSignature Language="F#" Value="member this.ItemRef : int -&gt; T&amp;" Usage="immutableList.ItemRef index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Readonly">
        <ReturnType>T</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="netcore-2.1">
            <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.1" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (T item, int index, int count, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(!T item, int32 index, int32 count, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (item As T, index As Integer, count As Integer, equalityComparer As IEqualityComparer(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(T item, int index, int count, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : 'T * int * int * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; int&#xA;override this.LastIndexOf : 'T * int * int * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; int" Usage="immutableList.LastIndexOf (item, index, count, equalityComparer)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="55814-230">O objeto a ser localizado na lista.</span><span class="sxs-lookup"><span data-stu-id="55814-230">The object to locate in the list.</span></span> <span data-ttu-id="55814-231">O valor pode ser nulo para tipos de referência.</span><span class="sxs-lookup"><span data-stu-id="55814-231">The value can be null for reference types.</span></span></param>
        <param name="index"><span data-ttu-id="55814-232">O índice inicial com base em zero da pesquisa inversa.</span><span class="sxs-lookup"><span data-stu-id="55814-232">The zero-based starting index of the backward search.</span></span></param>
        <param name="count"><span data-ttu-id="55814-233">O número de elementos na seção a ser pesquisada.</span><span class="sxs-lookup"><span data-stu-id="55814-233">The number of elements in the section to search.</span></span></param>
        <param name="equalityComparer"><span data-ttu-id="55814-234">O comparador de igualdade a ser usado na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="55814-234">The equality comparer to use in the search.</span></span></param>
        <summary><span data-ttu-id="55814-235">Pesquisa o objeto especificado e retorna o índice baseado em zero da última ocorrência no intervalo de elementos na lista que contém o número de elementos especificado e termina no índice especificado.</span><span class="sxs-lookup"><span data-stu-id="55814-235">Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the list that contains the specified number of elements and ends at the specified index.</span></span></summary>
        <returns><span data-ttu-id="55814-236">O índice baseado em zero da última ocorrência do item dentro do intervalo de elementos na lista que contém a contagem de número de elementos e termina no índice, se encontrado; caso contrário, -1.</span><span class="sxs-lookup"><span data-stu-id="55814-236">The zero-based index of the last occurrence of item within the range of elements in the list that contains count number of elements and ends at index, if found; otherwise, -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableList&lt;T&gt; Remove (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableList`1&lt;!T&gt; Remove(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (value As T) As ImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableList&lt;T&gt; ^ Remove(T value);" />
      <MemberSignature Language="F#" Value="member this.Remove : 'T -&gt; System.Collections.Immutable.ImmutableList&lt;'T&gt;" Usage="immutableList.Remove value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="55814-237">O objeto a ser removido.</span><span class="sxs-lookup"><span data-stu-id="55814-237">The object to remove.</span></span></param>
        <summary><span data-ttu-id="55814-238">Remove a primeira ocorrência do objeto especificado dessa lista imutável.</span><span class="sxs-lookup"><span data-stu-id="55814-238">Removes the first occurrence of the specified object from this immutable list.</span></span></summary>
        <returns><span data-ttu-id="55814-239">Uma nova lista com o objeto removido ou essa lista se o objeto especificado não estiver nessa lista.</span><span class="sxs-lookup"><span data-stu-id="55814-239">A new list with the object removed, or this list if the specified object is not in this list.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableList&lt;T&gt; Remove (T value, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableList`1&lt;!T&gt; Remove(!T value, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (value As T, equalityComparer As IEqualityComparer(Of T)) As ImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableList&lt;T&gt; ^ Remove(T value, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="member this.Remove : 'T * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableList&lt;'T&gt;" Usage="immutableList.Remove (value, equalityComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="55814-240">O valor do elemento a ser removido da lista.</span><span class="sxs-lookup"><span data-stu-id="55814-240">The value of the element to remove from the list.</span></span></param>
        <param name="equalityComparer"><span data-ttu-id="55814-241">O comparador de igualdade a ser usado na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="55814-241">The equality comparer to use in the search.</span></span></param>
        <summary><span data-ttu-id="55814-242">Remove a primeira ocorrência do objeto que corresponde ao valor especificado dessa lista imutável.</span><span class="sxs-lookup"><span data-stu-id="55814-242">Removes the first occurrence of the object that matches the specified value from this immutable list.</span></span></summary>
        <returns><span data-ttu-id="55814-243">Uma nova lista com o objeto removido ou essa lista se o objeto especificado não estiver nessa lista.</span><span class="sxs-lookup"><span data-stu-id="55814-243">A new list with the object removed, or this list if the specified object is not in this list.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAll">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableList&lt;T&gt; RemoveAll (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableList`1&lt;!T&gt; RemoveAll(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.RemoveAll(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAll (match As Predicate(Of T)) As ImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableList&lt;T&gt; ^ RemoveAll(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.RemoveAll : Predicate&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableList&lt;'T&gt;" Usage="immutableList.RemoveAll match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match"><span data-ttu-id="55814-244">O delegado que define as condições dos elementos a serem removidos.</span><span class="sxs-lookup"><span data-stu-id="55814-244">The delegate that defines the conditions of the elements to remove.</span></span></param>
        <summary><span data-ttu-id="55814-245">Remove todos os elementos que correspondem às condições definidas pelo predicado especificado.</span><span class="sxs-lookup"><span data-stu-id="55814-245">Removes all the elements that match the conditions defined by the specified predicate.</span></span></summary>
        <returns><span data-ttu-id="55814-246">A nova lista com os elementos removidos.</span><span class="sxs-lookup"><span data-stu-id="55814-246">The new list with the elements removed.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableList&lt;T&gt; RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableList`1&lt;!T&gt; RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAt (index As Integer) As ImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableList&lt;T&gt; ^ RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="member this.RemoveAt : int -&gt; System.Collections.Immutable.ImmutableList&lt;'T&gt;" Usage="immutableList.RemoveAt index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="55814-247">O índice de base zero do elemento a ser removido.</span><span class="sxs-lookup"><span data-stu-id="55814-247">The zero-based index of the element to remove.</span></span></param>
        <summary><span data-ttu-id="55814-248">Remove o elemento no índice especificado.</span><span class="sxs-lookup"><span data-stu-id="55814-248">Removes the element at the specified index.</span></span></summary>
        <returns><span data-ttu-id="55814-249">Uma nova lista com o elemento removido.</span><span class="sxs-lookup"><span data-stu-id="55814-249">A new list with the element removed.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableList&lt;T&gt; RemoveRange (System.Collections.Generic.IEnumerable&lt;T&gt; items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableList`1&lt;!T&gt; RemoveRange(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveRange (items As IEnumerable(Of T)) As ImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableList&lt;T&gt; ^ RemoveRange(System::Collections::Generic::IEnumerable&lt;T&gt; ^ items);" />
      <MemberSignature Language="F#" Value="member this.RemoveRange : seq&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableList&lt;'T&gt;" Usage="immutableList.RemoveRange items" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="items"><span data-ttu-id="55814-250">A coleção cujos elementos devem ser removidos se correspondências forem encontradas nessa lista.</span><span class="sxs-lookup"><span data-stu-id="55814-250">The collection whose elements should be removed if matches are found in this list.</span></span></param>
        <summary><span data-ttu-id="55814-251">Remove um intervalo de elementos dessa lista imutável.</span><span class="sxs-lookup"><span data-stu-id="55814-251">Removes a range of elements from this immutable list.</span></span></summary>
        <returns><span data-ttu-id="55814-252">Uma nova lista com os elementos removidos.</span><span class="sxs-lookup"><span data-stu-id="55814-252">A new list with the elements removed.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableList&lt;T&gt; RemoveRange (System.Collections.Generic.IEnumerable&lt;T&gt; items, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableList`1&lt;!T&gt; RemoveRange(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; items, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveRange (items As IEnumerable(Of T), equalityComparer As IEqualityComparer(Of T)) As ImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableList&lt;T&gt; ^ RemoveRange(System::Collections::Generic::IEnumerable&lt;T&gt; ^ items, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="member this.RemoveRange : seq&lt;'T&gt; * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableList&lt;'T&gt;" Usage="immutableList.RemoveRange (items, equalityComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="items"><span data-ttu-id="55814-253">Os itens a serem removidos se correspondências forem encontradas nessa lista.</span><span class="sxs-lookup"><span data-stu-id="55814-253">The items to remove if matches are found in this list.</span></span></param>
        <param name="equalityComparer"><span data-ttu-id="55814-254">O comparador de igualdade a ser usado na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="55814-254">The equality comparer to use in the search.</span></span></param>
        <summary><span data-ttu-id="55814-255">Remove os valores especificados dessa lista.</span><span class="sxs-lookup"><span data-stu-id="55814-255">Removes the specified values from this list.</span></span></summary>
        <returns><span data-ttu-id="55814-256">Uma nova lista com os elementos removidos.</span><span class="sxs-lookup"><span data-stu-id="55814-256">A new list with the elements removed.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableList&lt;T&gt; RemoveRange (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableList`1&lt;!T&gt; RemoveRange(int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveRange (index As Integer, count As Integer) As ImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableList&lt;T&gt; ^ RemoveRange(int index, int count);" />
      <MemberSignature Language="F#" Value="member this.RemoveRange : int * int -&gt; System.Collections.Immutable.ImmutableList&lt;'T&gt;" Usage="immutableList.RemoveRange (index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="55814-257">O índice inicial para iniciar a remoção.</span><span class="sxs-lookup"><span data-stu-id="55814-257">The starting index to begin removal.</span></span></param>
        <param name="count"><span data-ttu-id="55814-258">O número de elementos a serem removidos.</span><span class="sxs-lookup"><span data-stu-id="55814-258">The number of elements to remove.</span></span></param>
        <summary><span data-ttu-id="55814-259">Remove um intervalo de elementos dessa lista imutável, começando pelo índice especificado e que contém o número especificado de elementos.</span><span class="sxs-lookup"><span data-stu-id="55814-259">Removes a range of elements, starting from the specified index and containing the specified number of elements, from this immutable list.</span></span></summary>
        <returns><span data-ttu-id="55814-260">Uma nova lista com os elementos removidos.</span><span class="sxs-lookup"><span data-stu-id="55814-260">A new list with the elements removed.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableList&lt;T&gt; Replace (T oldValue, T newValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableList`1&lt;!T&gt; Replace(!T oldValue, !T newValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.Replace(`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (oldValue As T, newValue As T) As ImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableList&lt;T&gt; ^ Replace(T oldValue, T newValue);" />
      <MemberSignature Language="F#" Value="member this.Replace : 'T * 'T -&gt; System.Collections.Immutable.ImmutableList&lt;'T&gt;" Usage="immutableList.Replace (oldValue, newValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldValue" Type="T" />
        <Parameter Name="newValue" Type="T" />
      </Parameters>
      <Docs>
        <param name="oldValue"><span data-ttu-id="55814-261">O elemento a ser substituído.</span><span class="sxs-lookup"><span data-stu-id="55814-261">The element to replace.</span></span></param>
        <param name="newValue"><span data-ttu-id="55814-262">O elemento com o qual substituir <paramref name="oldValue" />.</span><span class="sxs-lookup"><span data-stu-id="55814-262">The element to replace <paramref name="oldValue" /> with.</span></span></param>
        <summary><span data-ttu-id="55814-263">Substitui o elemento especificado na lista imutável por um novo elemento.</span><span class="sxs-lookup"><span data-stu-id="55814-263">Replaces the specified element in the immutable list with a new element.</span></span></summary>
        <returns><span data-ttu-id="55814-264">A nova lista com o elemento substituído, mesmo que ele seja igual ao elemento antigo.</span><span class="sxs-lookup"><span data-stu-id="55814-264">The new list with the replaced element, even if it is equal to the old element.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="55814-265"><paramref name="oldValue" /> não existe na lista imutável.</span><span class="sxs-lookup"><span data-stu-id="55814-265"><paramref name="oldValue" /> does not exist in the immutable list.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableList&lt;T&gt; Replace (T oldValue, T newValue, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableList`1&lt;!T&gt; Replace(!T oldValue, !T newValue, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (oldValue As T, newValue As T, equalityComparer As IEqualityComparer(Of T)) As ImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableList&lt;T&gt; ^ Replace(T oldValue, T newValue, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="member this.Replace : 'T * 'T * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableList&lt;'T&gt;" Usage="immutableList.Replace (oldValue, newValue, equalityComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldValue" Type="T" />
        <Parameter Name="newValue" Type="T" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="oldValue"><span data-ttu-id="55814-266">O elemento a ser substituído na lista.</span><span class="sxs-lookup"><span data-stu-id="55814-266">The element to replace in the list.</span></span></param>
        <param name="newValue"><span data-ttu-id="55814-267">O elemento com o qual substituir <paramref name="oldValue" />.</span><span class="sxs-lookup"><span data-stu-id="55814-267">The element to replace <paramref name="oldValue" /> with.</span></span></param>
        <param name="equalityComparer"><span data-ttu-id="55814-268">O comparador a ser usado para verificar quanto à igualdade.</span><span class="sxs-lookup"><span data-stu-id="55814-268">The comparer to use to check for equality.</span></span></param>
        <summary><span data-ttu-id="55814-269">Substitui o elemento especificado na lista imutável por um novo elemento.</span><span class="sxs-lookup"><span data-stu-id="55814-269">Replaces the specified element in the immutable list with a new element.</span></span></summary>
        <returns><span data-ttu-id="55814-270">Uma nova lista com o objeto substituído ou essa lista se o objeto especificado não estiver nessa lista.</span><span class="sxs-lookup"><span data-stu-id="55814-270">A new list with the object replaced, or this list if the specified object is not in this list.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reverse">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableList&lt;T&gt; Reverse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableList`1&lt;!T&gt; Reverse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.Reverse" />
      <MemberSignature Language="VB.NET" Value="Public Function Reverse () As ImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableList&lt;T&gt; ^ Reverse();" />
      <MemberSignature Language="F#" Value="member this.Reverse : unit -&gt; System.Collections.Immutable.ImmutableList&lt;'T&gt;" Usage="immutableList.Reverse " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="55814-271">Inverte a ordem dos elementos em toda a lista imutável.</span><span class="sxs-lookup"><span data-stu-id="55814-271">Reverses the order of the elements in the entire immutable list.</span></span></summary>
        <returns><span data-ttu-id="55814-272">A lista invertida.</span><span class="sxs-lookup"><span data-stu-id="55814-272">The reversed list.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reverse">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableList&lt;T&gt; Reverse (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableList`1&lt;!T&gt; Reverse(int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.Reverse(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Reverse (index As Integer, count As Integer) As ImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableList&lt;T&gt; ^ Reverse(int index, int count);" />
      <MemberSignature Language="F#" Value="member this.Reverse : int * int -&gt; System.Collections.Immutable.ImmutableList&lt;'T&gt;" Usage="immutableList.Reverse (index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="55814-273">O índice inicial baseado em zero do intervalo a ser revertido.</span><span class="sxs-lookup"><span data-stu-id="55814-273">The zero-based starting index of the range to reverse.</span></span></param>
        <param name="count"><span data-ttu-id="55814-274">O número de elementos no intervalo a serem revertidos.</span><span class="sxs-lookup"><span data-stu-id="55814-274">The number of elements in the range to reverse.</span></span></param>
        <summary><span data-ttu-id="55814-275">Inverte a ordem dos elementos no intervalo especificado da lista imutável.</span><span class="sxs-lookup"><span data-stu-id="55814-275">Reverses the order of the elements in the specified range of the immutable list.</span></span></summary>
        <returns><span data-ttu-id="55814-276">A lista invertida.</span><span class="sxs-lookup"><span data-stu-id="55814-276">The reversed list.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetItem">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableList&lt;T&gt; SetItem (int index, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableList`1&lt;!T&gt; SetItem(int32 index, !T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.SetItem(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetItem (index As Integer, value As T) As ImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableList&lt;T&gt; ^ SetItem(int index, T value);" />
      <MemberSignature Language="F#" Value="member this.SetItem : int * 'T -&gt; System.Collections.Immutable.ImmutableList&lt;'T&gt;" Usage="immutableList.SetItem (index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="55814-277">A posição na lista do elemento a ser substituído.</span><span class="sxs-lookup"><span data-stu-id="55814-277">The position in the list of the element to replace.</span></span></param>
        <param name="value"><span data-ttu-id="55814-278">O elemento pelo qual substituir o elemento antigo.</span><span class="sxs-lookup"><span data-stu-id="55814-278">The element to replace the old element with.</span></span></param>
        <summary><span data-ttu-id="55814-279">Substitui um elemento em uma posição especificada na lista imutável pelo elemento especificado.</span><span class="sxs-lookup"><span data-stu-id="55814-279">Replaces an element at a given position in the immutable list with the specified element.</span></span></summary>
        <returns><span data-ttu-id="55814-280">A nova lista com o elemento substituído, mesmo que ele seja igual ao elemento antigo naquela posição.</span><span class="sxs-lookup"><span data-stu-id="55814-280">The new list with the replaced element, even if it is equal to the old element at that position.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableList&lt;T&gt; Sort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableList`1&lt;!T&gt; Sort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.Sort" />
      <MemberSignature Language="VB.NET" Value="Public Function Sort () As ImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableList&lt;T&gt; ^ Sort();" />
      <MemberSignature Language="F#" Value="member this.Sort : unit -&gt; System.Collections.Immutable.ImmutableList&lt;'T&gt;" Usage="immutableList.Sort " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="55814-281">Classifica os elementos em toda a lista imutável usando o comparador padrão.</span><span class="sxs-lookup"><span data-stu-id="55814-281">Sorts the elements in the entire immutable list using the default comparer.</span></span></summary>
        <returns><span data-ttu-id="55814-282">A lista classificada.</span><span class="sxs-lookup"><span data-stu-id="55814-282">The sorted list.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableList&lt;T&gt; Sort (System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableList`1&lt;!T&gt; Sort(class System.Collections.Generic.IComparer`1&lt;!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Collections.Generic.IComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Sort (comparer As IComparer(Of T)) As ImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableList&lt;T&gt; ^ Sort(System::Collections::Generic::IComparer&lt;T&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="member this.Sort : System.Collections.Generic.IComparer&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableList&lt;'T&gt;" Usage="immutableList.Sort comparer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="comparer"><span data-ttu-id="55814-283">A implementação a ser usada na comparação de elementos ou <see langword="null" /> para usar o comparador padrão (<see cref="P:System.Collections.Generic.Comparer`1.Default" />).</span><span class="sxs-lookup"><span data-stu-id="55814-283">The  implementation to use when comparing elements, or <see langword="null" /> to use the default comparer (<see cref="P:System.Collections.Generic.Comparer`1.Default" />).</span></span></param>
        <summary><span data-ttu-id="55814-284">Classifica os elementos em toda a lista imutável usando o comparador especificado.</span><span class="sxs-lookup"><span data-stu-id="55814-284">Sorts the elements in the entire immutable list using the specified comparer.</span></span></summary>
        <returns><span data-ttu-id="55814-285">A lista classificada.</span><span class="sxs-lookup"><span data-stu-id="55814-285">The sorted list.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableList&lt;T&gt; Sort (Comparison&lt;T&gt; comparison);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableList`1&lt;!T&gt; Sort(class System.Comparison`1&lt;!T&gt; comparison) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Comparison{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Sort (comparison As Comparison(Of T)) As ImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableList&lt;T&gt; ^ Sort(Comparison&lt;T&gt; ^ comparison);" />
      <MemberSignature Language="F#" Value="member this.Sort : Comparison&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableList&lt;'T&gt;" Usage="immutableList.Sort comparison" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparison" Type="System.Comparison&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="comparison"><span data-ttu-id="55814-286">O delegado a ser usado na comparação de elementos.</span><span class="sxs-lookup"><span data-stu-id="55814-286">The delegate to use when comparing elements.</span></span></param>
        <summary><span data-ttu-id="55814-287">Classifica os elementos em toda a lista imutável usando o comparador especificado.</span><span class="sxs-lookup"><span data-stu-id="55814-287">Sorts the elements in the entire immutable list using the specified comparer.</span></span></summary>
        <returns><span data-ttu-id="55814-288">A lista classificada.</span><span class="sxs-lookup"><span data-stu-id="55814-288">The sorted list.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableList&lt;T&gt; Sort (int index, int count, System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableList`1&lt;!T&gt; Sort(int32 index, int32 count, class System.Collections.Generic.IComparer`1&lt;!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Sort (index As Integer, count As Integer, comparer As IComparer(Of T)) As ImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableList&lt;T&gt; ^ Sort(int index, int count, System::Collections::Generic::IComparer&lt;T&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="member this.Sort : int * int * System.Collections.Generic.IComparer&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableList&lt;'T&gt;" Usage="immutableList.Sort (index, count, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="55814-289">O índice inicial baseado em zero do intervalo a ser classificado.</span><span class="sxs-lookup"><span data-stu-id="55814-289">The zero-based starting index of the range to sort.</span></span></param>
        <param name="count"><span data-ttu-id="55814-290">O tamanho do intervalo a ser classificado.</span><span class="sxs-lookup"><span data-stu-id="55814-290">The length of the range to sort.</span></span></param>
        <param name="comparer"><span data-ttu-id="55814-291">A implementação a ser usada na comparação de elementos ou <see langword="null" /> para usar o comparador padrão (<see cref="P:System.Collections.Generic.Comparer`1.Default" />).</span><span class="sxs-lookup"><span data-stu-id="55814-291">The implementation to use when comparing elements, or <see langword="null" /> to use the default comparer (<see cref="P:System.Collections.Generic.Comparer`1.Default" />).</span></span></param>
        <summary><span data-ttu-id="55814-292">Classifica um intervalo de elementos na lista imutável usando o comparador especificado.</span><span class="sxs-lookup"><span data-stu-id="55814-292">Sorts a range of elements in the immutable list using the specified comparer.</span></span></summary>
        <returns><span data-ttu-id="55814-293">A lista classificada.</span><span class="sxs-lookup"><span data-stu-id="55814-293">The sorted list.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;T&gt;.Add">
      <MemberSignature Language="C#" Value="void ICollection&lt;T&gt;.Add (T item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ICollection&lt;T&gt;.Add(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection&lt;T&gt;#Add(`0)" />
      <MemberSignature Language="VB.NET" Value="Sub Add (item As T) Implements ICollection(Of T).Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ICollection&lt;T&gt;.Add(T item) = System::Collections::Generic::ICollection&lt;T&gt;::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="55814-294">O item a ser adicionado.</span><span class="sxs-lookup"><span data-stu-id="55814-294">The item to add.</span></span></param>
        <summary><span data-ttu-id="55814-295">Adiciona o item especificado à lista imutável.</span><span class="sxs-lookup"><span data-stu-id="55814-295">Adds the specified item to the immutable list.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="55814-296">Este membro é uma implementação do membro de interface explícita.</span><span class="sxs-lookup"><span data-stu-id="55814-296">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="55814-297">Ele só pode ser usado quando a instância de <xref:System.Collections.Immutable.ImmutableList%601> é convertida em uma interface de <xref:System.Collections.Generic.ICollection%601>.</span><span class="sxs-lookup"><span data-stu-id="55814-297">It can be used only when the <xref:System.Collections.Immutable.ImmutableList%601> instance is cast to an <xref:System.Collections.Generic.ICollection%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;T&gt;.Clear">
      <MemberSignature Language="C#" Value="void ICollection&lt;T&gt;.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ICollection&lt;T&gt;.Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection&lt;T&gt;#Clear" />
      <MemberSignature Language="VB.NET" Value="Sub Clear () Implements ICollection(Of T).Clear" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ICollection&lt;T&gt;.Clear() = System::Collections::Generic::ICollection&lt;T&gt;::Clear;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="55814-298">Remove todos os itens da lista imutável.</span><span class="sxs-lookup"><span data-stu-id="55814-298">Removes all items from the immutable list.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="55814-299">Este membro é uma implementação do membro de interface explícita.</span><span class="sxs-lookup"><span data-stu-id="55814-299">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="55814-300">Ele só pode ser usado quando a instância de <xref:System.Collections.Immutable.ImmutableList%601> é convertida em uma interface de <xref:System.Collections.Generic.ICollection%601>.</span><span class="sxs-lookup"><span data-stu-id="55814-300">It can be used only when the <xref:System.Collections.Immutable.ImmutableList%601> instance is cast to an <xref:System.Collections.Generic.ICollection%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection&lt;T&gt;#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements ICollection(Of T).IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::Generic::ICollection&lt;T&gt;::IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="55814-301">Obtém um valor que indica se o <see cref="T:System.Collections.Generic.ICollection`1" /> é somente leitura.</span><span class="sxs-lookup"><span data-stu-id="55814-301">Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</span></span></summary>
        <value><span data-ttu-id="55814-302"><see langword="true" /> se o <see cref="T:System.Collections.Generic.ICollection`1" /> for somente leitura; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="55814-302"><see langword="true" /> if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;T&gt;.Remove">
      <MemberSignature Language="C#" Value="bool ICollection&lt;T&gt;.Remove (T item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.Generic.ICollection&lt;T&gt;.Remove(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection&lt;T&gt;#Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Function Remove (item As T) As Boolean Implements ICollection(Of T).Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.Generic.ICollection&lt;T&gt;.Remove(T item) = System::Collections::Generic::ICollection&lt;T&gt;::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="55814-303">O objeto a ser removido.</span><span class="sxs-lookup"><span data-stu-id="55814-303">The object to remove.</span></span></param>
        <summary><span data-ttu-id="55814-304">Remove a primeira ocorrência de um objeto específico da lista imutável.</span><span class="sxs-lookup"><span data-stu-id="55814-304">Removes the first occurrence of a specific object from the immutable list.</span></span></summary>
        <returns><span data-ttu-id="55814-305"><see langword="true" /> se <paramref name="item" /> tiver sido removido com êxito da lista; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="55814-305"><see langword="true" /> if <paramref name="item" /> was successfully removed from the list; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="55814-306">Esse método também retornará <see langword="false" /> se o <paramref name="item" /> não for encontrado na lista original.</span><span class="sxs-lookup"><span data-stu-id="55814-306">This method also returns <see langword="false" /> if <paramref name="item" /> is not found in the original list.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="55814-307">Este membro é uma implementação do membro de interface explícita.</span><span class="sxs-lookup"><span data-stu-id="55814-307">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="55814-308">Ele só pode ser usado quando a instância de <xref:System.Collections.Immutable.ImmutableList%601> é convertida em uma interface de <xref:System.Collections.Generic.ICollection%601>.</span><span class="sxs-lookup"><span data-stu-id="55814-308">It can be used only when the <xref:System.Collections.Immutable.ImmutableList%601> instance is cast to an <xref:System.Collections.Generic.ICollection%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;T&gt; IEnumerable&lt;T&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IEnumerable&lt;T&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;T&gt; ^ System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;T&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="55814-309">Retorna um enumerador que itera na lista imutável.</span><span class="sxs-lookup"><span data-stu-id="55814-309">Returns an enumerator that iterates through the immutable list.</span></span></summary>
        <returns><span data-ttu-id="55814-310">Um enumerador que pode ser usado para iterar na lista.</span><span class="sxs-lookup"><span data-stu-id="55814-310">An enumerator that can be used to iterate through the list.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="55814-311">Este membro é uma implementação do membro de interface explícita.</span><span class="sxs-lookup"><span data-stu-id="55814-311">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="55814-312">Ele só pode ser usado quando a instância de <xref:System.Collections.Immutable.ImmutableList%601> é convertida em uma interface de <xref:System.Collections.Generic.IEnumerable%601>.</span><span class="sxs-lookup"><span data-stu-id="55814-312">It can be used only when the <xref:System.Collections.Immutable.ImmutableList%601> instance is cast to an <xref:System.Collections.Generic.IEnumerable%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;T&gt;.Insert">
      <MemberSignature Language="C#" Value="void IList&lt;T&gt;.Insert (int index, T item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.IList&lt;T&gt;.Insert(int32 index, !T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList&lt;T&gt;#Insert(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, item As T) Implements IList(Of T).Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.IList&lt;T&gt;.Insert(int index, T item) = System::Collections::Generic::IList&lt;T&gt;::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="55814-313">O índice de base zero no qual o <paramref name="item" /> deve ser inserido.</span><span class="sxs-lookup"><span data-stu-id="55814-313">The zero-based index at which <paramref name="item" /> should be inserted.</span></span></param>
        <param name="item"><span data-ttu-id="55814-314">O objeto a ser inserido.</span><span class="sxs-lookup"><span data-stu-id="55814-314">The object to insert.</span></span></param>
        <summary><span data-ttu-id="55814-315">Insere um objeto na lista imutável no índice especificado.</span><span class="sxs-lookup"><span data-stu-id="55814-315">Inserts an object in the immutable list at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="55814-316">Este membro é uma implementação do membro de interface explícita.</span><span class="sxs-lookup"><span data-stu-id="55814-316">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="55814-317">Ele só pode ser usado quando a instância de <xref:System.Collections.Immutable.ImmutableList%601> é convertida em uma interface de <xref:System.Collections.Generic.IList%601>.</span><span class="sxs-lookup"><span data-stu-id="55814-317">It can be used only when the <xref:System.Collections.Immutable.ImmutableList%601> instance is cast to an <xref:System.Collections.Generic.IList%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;T&gt;.Item">
      <MemberSignature Language="C#" Value="T System.Collections.Generic.IList&lt;T&gt;.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T System.Collections.Generic.IList&lt;T&gt;.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList&lt;T&gt;#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As T Implements IList(Of T).Item" />
      <MemberSignature Language="C++ CLI" Value="property T System::Collections::Generic::IList&lt;T&gt;::Item[int] { T get(int index); void set(int index, T value); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Generic.IList&lt;T&gt;.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IList`1.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary><span data-ttu-id="55814-318">Obtém ou define o valor no índice especificado.</span><span class="sxs-lookup"><span data-stu-id="55814-318">Gets or sets the value at the specified index.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IndexOutOfRangeException"><span data-ttu-id="55814-319">Gerado de getter quando <paramref name="index" /> for negativo ou não for menor que <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />.</span><span class="sxs-lookup"><span data-stu-id="55814-319">Thrown from getter when <paramref name="index" /> is negative or not less than <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="55814-320">Sempre lançado de setter.</span><span class="sxs-lookup"><span data-stu-id="55814-320">Always thrown from the setter.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;T&gt;.RemoveAt">
      <MemberSignature Language="C#" Value="void IList&lt;T&gt;.RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.IList&lt;T&gt;.RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList&lt;T&gt;#RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub RemoveAt (index As Integer) Implements IList(Of T).RemoveAt" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.IList&lt;T&gt;.RemoveAt(int index) = System::Collections::Generic::IList&lt;T&gt;::RemoveAt;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="55814-321">O índice com base em zero do item a ser removido.</span><span class="sxs-lookup"><span data-stu-id="55814-321">The zero-based index of the item to remove.</span></span></param>
        <summary><span data-ttu-id="55814-322">Remove o valor no índice especificado.</span><span class="sxs-lookup"><span data-stu-id="55814-322">Removes the value at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="55814-323">Este membro é uma implementação do membro de interface explícita.</span><span class="sxs-lookup"><span data-stu-id="55814-323">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="55814-324">Ele só pode ser usado quando a instância de <xref:System.Collections.Immutable.ImmutableList%601> é convertida em uma interface de <xref:System.Collections.Generic.IList%601>.</span><span class="sxs-lookup"><span data-stu-id="55814-324">It can be used only when the <xref:System.Collections.Immutable.ImmutableList%601> instance is cast to an <xref:System.Collections.Generic.IList%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int arrayIndex) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="55814-325">A matriz unidimensional que é o destino dos elementos copiados da lista imutável.</span><span class="sxs-lookup"><span data-stu-id="55814-325">The one-dimensional array that is the destination of the elements copied from immutable list.</span></span></param>
        <param name="arrayIndex"><span data-ttu-id="55814-326">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</span><span class="sxs-lookup"><span data-stu-id="55814-326">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="55814-327">Copia toda a lista imutável para uma matriz unidimensional compatível, iniciando no índice especificado da matriz.</span><span class="sxs-lookup"><span data-stu-id="55814-327">Copies the entire immutable list to a compatible one-dimensional array, starting at the specified array index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="55814-328">Este membro é uma implementação do membro de interface explícita.</span><span class="sxs-lookup"><span data-stu-id="55814-328">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="55814-329">Ele só pode ser usado quando a instância de <xref:System.Collections.Immutable.ImmutableList%601> é convertida em uma interface de <xref:System.Collections.ICollection>.</span><span class="sxs-lookup"><span data-stu-id="55814-329">It can be used only when the <xref:System.Collections.Immutable.ImmutableList%601> instance is cast to an <xref:System.Collections.ICollection> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;dotnet-uwp-10.0">
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="55814-330">Consulte a interface <see cref="T:System.Collections.ICollection" />.</span><span class="sxs-lookup"><span data-stu-id="55814-330">See the <see cref="T:System.Collections.ICollection" /> interface.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;dotnet-uwp-10.0">
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="55814-331">Consulte <see cref="T:System.Collections.ICollection" />.</span><span class="sxs-lookup"><span data-stu-id="55814-331">See <see cref="T:System.Collections.ICollection" />.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="55814-332">Retorna um enumerador que itera na lista imutável.</span><span class="sxs-lookup"><span data-stu-id="55814-332">Returns an enumerator that iterates through the immutable list.</span></span></summary>
        <returns><span data-ttu-id="55814-333">Um enumerador que pode ser usado para iterar na lista.</span><span class="sxs-lookup"><span data-stu-id="55814-333">An enumerator that can be used to iterate through the list.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="55814-334">Este membro é uma implementação do membro de interface explícita.</span><span class="sxs-lookup"><span data-stu-id="55814-334">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="55814-335">Ele só pode ser usado quando a instância de <xref:System.Collections.Immutable.ImmutableList%601> é convertida em uma interface de <xref:System.Collections.IEnumerable>.</span><span class="sxs-lookup"><span data-stu-id="55814-335">It can be used only when the <xref:System.Collections.Immutable.ImmutableList%601> instance is cast to an <xref:System.Collections.IEnumerable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Add (value As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.Add(System::Object ^ value) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="55814-336">O objeto a ser adicionado à lista.</span><span class="sxs-lookup"><span data-stu-id="55814-336">The object to add to the list.</span></span></param>
        <summary><span data-ttu-id="55814-337">Adiciona um item à lista imutável.</span><span class="sxs-lookup"><span data-stu-id="55814-337">Adds an item to the immutable list.</span></span></summary>
        <returns><span data-ttu-id="55814-338">A posição na qual o novo elemento foi inserido ou -1 para indicar que o item não foi inserido na lista.</span><span class="sxs-lookup"><span data-stu-id="55814-338">The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the list.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="55814-339">Este membro é uma implementação do membro de interface explícita.</span><span class="sxs-lookup"><span data-stu-id="55814-339">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="55814-340">Ele só pode ser usado quando a instância de <xref:System.Collections.Immutable.ImmutableList%601> é convertida em uma interface de <xref:System.Collections.IList>.</span><span class="sxs-lookup"><span data-stu-id="55814-340">It can be used only when the <xref:System.Collections.Immutable.ImmutableList%601> instance is cast to an <xref:System.Collections.IList> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Clear">
      <MemberSignature Language="C#" Value="void IList.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Clear" />
      <MemberSignature Language="VB.NET" Value="Sub Clear () Implements IList.Clear" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Clear() = System::Collections::IList::Clear;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="55814-341">Remove todos os itens da lista imutável.</span><span class="sxs-lookup"><span data-stu-id="55814-341">Removes all items from the immutable list.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="55814-342">Este membro é uma implementação do membro de interface explícita.</span><span class="sxs-lookup"><span data-stu-id="55814-342">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="55814-343">Ele só pode ser usado quando a instância de <xref:System.Collections.Immutable.ImmutableList%601> é convertida em uma interface de <xref:System.Collections.IList>.</span><span class="sxs-lookup"><span data-stu-id="55814-343">It can be used only when the <xref:System.Collections.Immutable.ImmutableList%601> instance is cast to an <xref:System.Collections.IList> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (value As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IList.Contains(System::Object ^ value) = System::Collections::IList::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="55814-344">O objeto a ser localizado na lista.</span><span class="sxs-lookup"><span data-stu-id="55814-344">The object to locate in the list.</span></span></param>
        <summary><span data-ttu-id="55814-345">Determina se a lista imutável contém um valor específico.</span><span class="sxs-lookup"><span data-stu-id="55814-345">Determines whether the immutable list contains a specific value.</span></span></summary>
        <returns><span data-ttu-id="55814-346"><see langword="true" /> se o objeto for encontrado na lista; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="55814-346"><see langword="true" /> if the object is found in the list; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="55814-347">Este membro é uma implementação do membro de interface explícita.</span><span class="sxs-lookup"><span data-stu-id="55814-347">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="55814-348">Ele só pode ser usado quando a instância de <xref:System.Collections.Immutable.ImmutableList%601> é convertida em uma interface de <xref:System.Collections.IList>.</span><span class="sxs-lookup"><span data-stu-id="55814-348">It can be used only when the <xref:System.Collections.Immutable.ImmutableList%601> instance is cast to an <xref:System.Collections.IList> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (value As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.IndexOf(System::Object ^ value) = System::Collections::IList::IndexOf;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.IndexOf(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="55814-349">O objeto a ser localizado na lista.</span><span class="sxs-lookup"><span data-stu-id="55814-349">The object to locate in the list.</span></span></param>
        <summary><span data-ttu-id="55814-350">Determina o índice de um item específico na lista imutável.</span><span class="sxs-lookup"><span data-stu-id="55814-350">Determines the index of a specific item in the immutable list.</span></span></summary>
        <returns><span data-ttu-id="55814-351">O índice de <paramref name="value" /> se encontrado na lista; caso contrário, -1.</span><span class="sxs-lookup"><span data-stu-id="55814-351">The index of <paramref name="value" /> if found in the list; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="55814-352">Este membro é uma implementação do membro de interface explícita.</span><span class="sxs-lookup"><span data-stu-id="55814-352">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="55814-353">Ele só pode ser usado quando a instância de <xref:System.Collections.Immutable.ImmutableList%601> é convertida em uma interface de <xref:System.Collections.IList>.</span><span class="sxs-lookup"><span data-stu-id="55814-353">It can be used only when the <xref:System.Collections.Immutable.ImmutableList%601> instance is cast to an <xref:System.Collections.IList> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Insert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, value As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Insert(int index, System::Object ^ value) = System::Collections::IList::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Insert(System.Int32,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="55814-354">O índice de base zero no qual o <paramref name="value" /> deve ser inserido.</span><span class="sxs-lookup"><span data-stu-id="55814-354">The zero-based index at which <paramref name="value" /> should be inserted.</span></span></param>
        <param name="value"><span data-ttu-id="55814-355">O objeto a ser inserido na lista.</span><span class="sxs-lookup"><span data-stu-id="55814-355">The object to insert into the list.</span></span></param>
        <summary><span data-ttu-id="55814-356">Insere um item na lista imutável no índice especificado.</span><span class="sxs-lookup"><span data-stu-id="55814-356">Inserts an item into the immutable list at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="55814-357">Este membro é uma implementação do membro de interface explícita.</span><span class="sxs-lookup"><span data-stu-id="55814-357">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="55814-358">Ele só pode ser usado quando a instância de <xref:System.Collections.Immutable.ImmutableList%601> é convertida em uma interface de <xref:System.Collections.IList>.</span><span class="sxs-lookup"><span data-stu-id="55814-358">It can be used only when the <xref:System.Collections.Immutable.ImmutableList%601> instance is cast to an <xref:System.Collections.IList> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.IsFixedSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="55814-359">Obtém um valor que indica se o <see cref="T:System.Collections.IList" /> tem um tamanho fixo.</span><span class="sxs-lookup"><span data-stu-id="55814-359">Gets a value indicating whether the <see cref="T:System.Collections.IList" /> has a fixed size.</span></span></summary>
        <value><span data-ttu-id="55814-360"><see langword="true" /> se o <see cref="T:System.Collections.IList" /> tiver um valor fixo; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="55814-360"><see langword="true" /> if the <see cref="T:System.Collections.IList" /> has a fixed size; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements IList.IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="55814-361">Obtém um valor que indica se o <see cref="T:System.Collections.Generic.ICollection`1" /> é somente leitura.</span><span class="sxs-lookup"><span data-stu-id="55814-361">Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</span></span></summary>
        <value><span data-ttu-id="55814-362"><see langword="true" /> se o <see cref="T:System.Collections.Generic.ICollection`1" /> for somente leitura; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="55814-362"><see langword="true" /> if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As Object Implements IList.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IList::Item[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="55814-363">O índice.</span><span class="sxs-lookup"><span data-stu-id="55814-363">The index.</span></span></param>
        <summary><span data-ttu-id="55814-364">Obtém ou define o <see cref="T:System.Object" /> no índice especificado.</span><span class="sxs-lookup"><span data-stu-id="55814-364">Gets or sets the <see cref="T:System.Object" /> at the specified index.</span></span></summary>
        <value><span data-ttu-id="55814-365">O valor no índice especificado.</span><span class="sxs-lookup"><span data-stu-id="55814-365">The value at the specified index.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IndexOutOfRangeException"><span data-ttu-id="55814-366">Gerado de getter quando <paramref name="index" /> for negativo ou não for menor que <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />.</span><span class="sxs-lookup"><span data-stu-id="55814-366">Thrown from getter when <paramref name="index" /> is negative or not less than <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="55814-367">Sempre lançado de setter.</span><span class="sxs-lookup"><span data-stu-id="55814-367">Always thrown from the setter.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (value As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Remove(System::Object ^ value) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="55814-368">O objeto a ser removido da lista.</span><span class="sxs-lookup"><span data-stu-id="55814-368">The object to remove from the list.</span></span></param>
        <summary><span data-ttu-id="55814-369">Remove a primeira ocorrência de um objeto específico da lista imutável.</span><span class="sxs-lookup"><span data-stu-id="55814-369">Removes the first occurrence of a specific object from the immutable list.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="55814-370">Este membro é uma implementação do membro de interface explícita.</span><span class="sxs-lookup"><span data-stu-id="55814-370">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="55814-371">Ele só pode ser usado quando a instância de <xref:System.Collections.Immutable.ImmutableList%601> é convertida em uma interface de <xref:System.Collections.IList>.</span><span class="sxs-lookup"><span data-stu-id="55814-371">It can be used only when the <xref:System.Collections.Immutable.ImmutableList%601> instance is cast to an <xref:System.Collections.IList> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.RemoveAt">
      <MemberSignature Language="C#" Value="void IList.RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub RemoveAt (index As Integer) Implements IList.RemoveAt" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.RemoveAt(int index) = System::Collections::IList::RemoveAt;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="55814-372">O índice com base em zero do item a ser removido.</span><span class="sxs-lookup"><span data-stu-id="55814-372">The zero-based index of the item to remove.</span></span></param>
        <summary><span data-ttu-id="55814-373">Remove o item no índice especificado da lista imutável.</span><span class="sxs-lookup"><span data-stu-id="55814-373">Removes the item at the specified index of the immutable list.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="55814-374">Este membro é uma implementação do membro de interface explícita.</span><span class="sxs-lookup"><span data-stu-id="55814-374">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="55814-375">Ele só pode ser usado quando a instância de <xref:System.Collections.Immutable.ImmutableList%601> é convertida em uma interface de <xref:System.Collections.IList>.</span><span class="sxs-lookup"><span data-stu-id="55814-375">It can be used only when the <xref:System.Collections.Immutable.ImmutableList%601> instance is cast to an <xref:System.Collections.IList> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableList&lt;T&gt;.Add">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableList&lt;T&gt; IImmutableList&lt;T&gt;.Add (T value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; System.Collections.Immutable.IImmutableList&lt;T&gt;.Add(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList&lt;T&gt;#Add(`0)" />
      <MemberSignature Language="VB.NET" Value="Function Add (value As T) As IImmutableList(Of T) Implements IImmutableList(Of T).Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableList&lt;T&gt; ^ System.Collections.Immutable.IImmutableList&lt;T&gt;.Add(T value) = System::Collections::Immutable::IImmutableList&lt;T&gt;::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableList`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="55814-376">O valor a ser adicionado.</span><span class="sxs-lookup"><span data-stu-id="55814-376">The value to add.</span></span></param>
        <summary><span data-ttu-id="55814-377">Adiciona o valor especificado a essa lista imutável.</span><span class="sxs-lookup"><span data-stu-id="55814-377">Adds the specified value to this immutable list.</span></span></summary>
        <returns><span data-ttu-id="55814-378">Uma nova lista com o elemento adicionado.</span><span class="sxs-lookup"><span data-stu-id="55814-378">A new list with the element added.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="55814-379">Este membro é uma implementação do membro de interface explícita.</span><span class="sxs-lookup"><span data-stu-id="55814-379">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="55814-380">Ele só pode ser usado quando a instância de <xref:System.Collections.Immutable.ImmutableList%601> é convertida em uma interface de <xref:System.Collections.Immutable.IImmutableList%601>.</span><span class="sxs-lookup"><span data-stu-id="55814-380">It can be used only when the <xref:System.Collections.Immutable.ImmutableList%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableList%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableList&lt;T&gt;.AddRange">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableList&lt;T&gt; IImmutableList&lt;T&gt;.AddRange (System.Collections.Generic.IEnumerable&lt;T&gt; items);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; System.Collections.Immutable.IImmutableList&lt;T&gt;.AddRange(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList&lt;T&gt;#AddRange(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Function AddRange (items As IEnumerable(Of T)) As IImmutableList(Of T) Implements IImmutableList(Of T).AddRange" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableList&lt;T&gt; ^ System.Collections.Immutable.IImmutableList&lt;T&gt;.AddRange(System::Collections::Generic::IEnumerable&lt;T&gt; ^ items) = System::Collections::Immutable::IImmutableList&lt;T&gt;::AddRange;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="items"><span data-ttu-id="55814-381">Os valores a serem adicionados.</span><span class="sxs-lookup"><span data-stu-id="55814-381">The values to add.</span></span></param>
        <summary><span data-ttu-id="55814-382">Adiciona os valores especificados a essa lista imutável.</span><span class="sxs-lookup"><span data-stu-id="55814-382">Adds the specified values to this immutable list.</span></span></summary>
        <returns><span data-ttu-id="55814-383">Uma nova lista com os elementos adicionados.</span><span class="sxs-lookup"><span data-stu-id="55814-383">A new list with the elements added.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="55814-384">Este membro é uma implementação do membro de interface explícita.</span><span class="sxs-lookup"><span data-stu-id="55814-384">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="55814-385">Ele só pode ser usado quando a instância de <xref:System.Collections.Immutable.ImmutableList%601> é convertida em uma interface de <xref:System.Collections.Immutable.IImmutableList%601>.</span><span class="sxs-lookup"><span data-stu-id="55814-385">It can be used only when the <xref:System.Collections.Immutable.ImmutableList%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableList%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableList&lt;T&gt;.Clear">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableList&lt;T&gt; IImmutableList&lt;T&gt;.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; System.Collections.Immutable.IImmutableList&lt;T&gt;.Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList&lt;T&gt;#Clear" />
      <MemberSignature Language="VB.NET" Value="Function Clear () As IImmutableList(Of T) Implements IImmutableList(Of T).Clear" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableList&lt;T&gt; ^ System.Collections.Immutable.IImmutableList&lt;T&gt;.Clear() = System::Collections::Immutable::IImmutableList&lt;T&gt;::Clear;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableList`1.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="55814-386">Recupera uma lista vazia que tem as mesmas semânticas de classificação e ordenação que essa instância.</span><span class="sxs-lookup"><span data-stu-id="55814-386">Retrieves an empty list that has the same sorting and ordering semantics as this instance.</span></span></summary>
        <returns><span data-ttu-id="55814-387">Uma lista vazia que tem as mesmas semânticas de classificação e ordenação que essa instância.</span><span class="sxs-lookup"><span data-stu-id="55814-387">An empty list that has the same sorting and ordering semantics as this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="55814-388">Este membro é uma implementação do membro de interface explícita.</span><span class="sxs-lookup"><span data-stu-id="55814-388">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="55814-389">Ele só pode ser usado quando a instância de <xref:System.Collections.Immutable.ImmutableList%601> é convertida em uma interface de <xref:System.Collections.Immutable.IImmutableList%601>.</span><span class="sxs-lookup"><span data-stu-id="55814-389">It can be used only when the <xref:System.Collections.Immutable.ImmutableList%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableList%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableList&lt;T&gt;.Insert">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableList&lt;T&gt; IImmutableList&lt;T&gt;.Insert (int index, T item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; System.Collections.Immutable.IImmutableList&lt;T&gt;.Insert(int32 index, !T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList&lt;T&gt;#Insert(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Function Insert (index As Integer, item As T) As IImmutableList(Of T) Implements IImmutableList(Of T).Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableList&lt;T&gt; ^ System.Collections.Immutable.IImmutableList&lt;T&gt;.Insert(int index, T item) = System::Collections::Immutable::IImmutableList&lt;T&gt;::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableList`1.Insert(System.Int32,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="55814-390">O índice no qual inserir o valor.</span><span class="sxs-lookup"><span data-stu-id="55814-390">The index at which to insert the value.</span></span></param>
        <param name="item"><span data-ttu-id="55814-391">O elemento a ser inserido.</span><span class="sxs-lookup"><span data-stu-id="55814-391">The element to insert.</span></span></param>
        <summary><span data-ttu-id="55814-392">Insere o elemento especificado no índice especificado na lista imutável.</span><span class="sxs-lookup"><span data-stu-id="55814-392">Inserts the specified element at the specified index in the immutable list.</span></span></summary>
        <returns><span data-ttu-id="55814-393">Uma nova lista imutável que inclui o elemento especificado.</span><span class="sxs-lookup"><span data-stu-id="55814-393">A new immutable list that includes the specified element.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="55814-394">Este membro é uma implementação do membro de interface explícita.</span><span class="sxs-lookup"><span data-stu-id="55814-394">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="55814-395">Ele só pode ser usado quando a instância de <xref:System.Collections.Immutable.ImmutableList%601> é convertida em uma interface de <xref:System.Collections.Immutable.IImmutableList%601>.</span><span class="sxs-lookup"><span data-stu-id="55814-395">It can be used only when the <xref:System.Collections.Immutable.ImmutableList%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableList%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableList&lt;T&gt;.InsertRange">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableList&lt;T&gt; IImmutableList&lt;T&gt;.InsertRange (int index, System.Collections.Generic.IEnumerable&lt;T&gt; items);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; System.Collections.Immutable.IImmutableList&lt;T&gt;.InsertRange(int32 index, class System.Collections.Generic.IEnumerable`1&lt;!T&gt; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList&lt;T&gt;#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Function InsertRange (index As Integer, items As IEnumerable(Of T)) As IImmutableList(Of T) Implements IImmutableList(Of T).InsertRange" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableList&lt;T&gt; ^ System.Collections.Immutable.IImmutableList&lt;T&gt;.InsertRange(int index, System::Collections::Generic::IEnumerable&lt;T&gt; ^ items) = System::Collections::Immutable::IImmutableList&lt;T&gt;::InsertRange;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="55814-396">O índice no qual inserir os elementos.</span><span class="sxs-lookup"><span data-stu-id="55814-396">The index at which to insert the elements.</span></span></param>
        <param name="items"><span data-ttu-id="55814-397">Os elementos a serem inseridos.</span><span class="sxs-lookup"><span data-stu-id="55814-397">The elements to insert.</span></span></param>
        <summary><span data-ttu-id="55814-398">Insere os elementos especificados no índice especificado na lista imutável.</span><span class="sxs-lookup"><span data-stu-id="55814-398">Inserts the specified elements at the specified index in the immutable list.</span></span></summary>
        <returns><span data-ttu-id="55814-399">Uma nova lista imutável que inclui os elementos especificados.</span><span class="sxs-lookup"><span data-stu-id="55814-399">A new immutable list that includes the specified elements.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="55814-400">Este membro é uma implementação do membro de interface explícita.</span><span class="sxs-lookup"><span data-stu-id="55814-400">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="55814-401">Ele só pode ser usado quando a instância de <xref:System.Collections.Immutable.ImmutableList%601> é convertida em uma interface de <xref:System.Collections.Immutable.IImmutableList%601>.</span><span class="sxs-lookup"><span data-stu-id="55814-401">It can be used only when the <xref:System.Collections.Immutable.ImmutableList%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableList%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableList&lt;T&gt;.Remove">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableList&lt;T&gt; IImmutableList&lt;T&gt;.Remove (T value, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; System.Collections.Immutable.IImmutableList&lt;T&gt;.Remove(!T value, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList&lt;T&gt;#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Function Remove (value As T, equalityComparer As IEqualityComparer(Of T)) As IImmutableList(Of T) Implements IImmutableList(Of T).Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableList&lt;T&gt; ^ System.Collections.Immutable.IImmutableList&lt;T&gt;.Remove(T value, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer) = System::Collections::Immutable::IImmutableList&lt;T&gt;::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="55814-402">O valor do elemento a ser removido da lista.</span><span class="sxs-lookup"><span data-stu-id="55814-402">The value of the element to remove from the list.</span></span></param>
        <param name="equalityComparer"><span data-ttu-id="55814-403">O comparador a ser usado para comparar elementos quanto à igualdade.</span><span class="sxs-lookup"><span data-stu-id="55814-403">The comparer to use to compare elements for equality.</span></span></param>
        <summary><span data-ttu-id="55814-404">Remove o elemento com o valor especificado da lista.</span><span class="sxs-lookup"><span data-stu-id="55814-404">Removes the element with the specified value from the list.</span></span></summary>
        <returns><span data-ttu-id="55814-405">Um novo <see cref="T:System.Collections.Immutable.ImmutableList`1" /> com o elemento especificado removido.</span><span class="sxs-lookup"><span data-stu-id="55814-405">A new <see cref="T:System.Collections.Immutable.ImmutableList`1" /> with the specified element removed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="55814-406">Este membro é uma implementação do membro de interface explícita.</span><span class="sxs-lookup"><span data-stu-id="55814-406">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="55814-407">Ele só pode ser usado quando a instância de <xref:System.Collections.Immutable.ImmutableList%601> é convertida em uma interface de <xref:System.Collections.Immutable.IImmutableList%601>.</span><span class="sxs-lookup"><span data-stu-id="55814-407">It can be used only when the <xref:System.Collections.Immutable.ImmutableList%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableList%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableList&lt;T&gt;.RemoveAll">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableList&lt;T&gt; IImmutableList&lt;T&gt;.RemoveAll (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; System.Collections.Immutable.IImmutableList&lt;T&gt;.RemoveAll(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList&lt;T&gt;#RemoveAll(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Function RemoveAll (match As Predicate(Of T)) As IImmutableList(Of T) Implements IImmutableList(Of T).RemoveAll" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableList&lt;T&gt; ^ System.Collections.Immutable.IImmutableList&lt;T&gt;.RemoveAll(Predicate&lt;T&gt; ^ match) = System::Collections::Immutable::IImmutableList&lt;T&gt;::RemoveAll;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableList`1.RemoveAll(System.Predicate{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match"><span data-ttu-id="55814-408">O delegado que define as condições dos elementos a serem removidos.</span><span class="sxs-lookup"><span data-stu-id="55814-408">The delegate that defines the conditions of the elements to remove.</span></span></param>
        <summary><span data-ttu-id="55814-409">Remove todos os elementos que correspondem às condições definidas pelo predicado especificado.</span><span class="sxs-lookup"><span data-stu-id="55814-409">Removes all the elements that match the conditions defined by the specified predicate.</span></span></summary>
        <returns><span data-ttu-id="55814-410">Uma nova lista imutável com os elementos removidos.</span><span class="sxs-lookup"><span data-stu-id="55814-410">A new immutable list with the elements removed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="55814-411">Este membro é uma implementação do membro de interface explícita.</span><span class="sxs-lookup"><span data-stu-id="55814-411">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="55814-412">Ele só pode ser usado quando a instância de <xref:System.Collections.Immutable.ImmutableList%601> é convertida em uma interface de <xref:System.Collections.Immutable.IImmutableList%601>.</span><span class="sxs-lookup"><span data-stu-id="55814-412">It can be used only when the <xref:System.Collections.Immutable.ImmutableList%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableList%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableList&lt;T&gt;.RemoveAt">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableList&lt;T&gt; IImmutableList&lt;T&gt;.RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; System.Collections.Immutable.IImmutableList&lt;T&gt;.RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList&lt;T&gt;#RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Function RemoveAt (index As Integer) As IImmutableList(Of T) Implements IImmutableList(Of T).RemoveAt" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableList&lt;T&gt; ^ System.Collections.Immutable.IImmutableList&lt;T&gt;.RemoveAt(int index) = System::Collections::Immutable::IImmutableList&lt;T&gt;::RemoveAt;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableList`1.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="55814-413">O índice do elemento a ser removido.</span><span class="sxs-lookup"><span data-stu-id="55814-413">The index of the element to remove.</span></span></param>
        <summary><span data-ttu-id="55814-414">Remove o elemento no índice especificado da lista imutável.</span><span class="sxs-lookup"><span data-stu-id="55814-414">Removes the element at the specified index of the immutable list.</span></span></summary>
        <returns><span data-ttu-id="55814-415">Uma nova lista com o elemento removido.</span><span class="sxs-lookup"><span data-stu-id="55814-415">A new list with the element removed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="55814-416">Este membro é uma implementação do membro de interface explícita.</span><span class="sxs-lookup"><span data-stu-id="55814-416">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="55814-417">Ele só pode ser usado quando a instância de <xref:System.Collections.Immutable.ImmutableList%601> é convertida em uma interface de <xref:System.Collections.Immutable.IImmutableList%601>.</span><span class="sxs-lookup"><span data-stu-id="55814-417">It can be used only when the <xref:System.Collections.Immutable.ImmutableList%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableList%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="System.Collections.Immutable.IImmutableList&lt;T&gt;.RemoveRange">
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="55814-418">Remove um intervalo de elementos dessa lista imutável.</span><span class="sxs-lookup"><span data-stu-id="55814-418">Removes a range of elements from this immutable list.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="55814-419">Este membro é uma implementação do membro de interface explícita.</span><span class="sxs-lookup"><span data-stu-id="55814-419">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="55814-420">Ele só pode ser usado quando a instância de <xref:System.Collections.Immutable.ImmutableList%601> é convertida em uma interface de <xref:System.Collections.Immutable.IImmutableList%601>.</span><span class="sxs-lookup"><span data-stu-id="55814-420">It can be used only when the <xref:System.Collections.Immutable.ImmutableList%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableList%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="System.Collections.Immutable.IImmutableList&lt;T&gt;.RemoveRange">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableList&lt;T&gt; IImmutableList&lt;T&gt;.RemoveRange (System.Collections.Generic.IEnumerable&lt;T&gt; items, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; System.Collections.Immutable.IImmutableList&lt;T&gt;.RemoveRange(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; items, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList&lt;T&gt;#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Function RemoveRange (items As IEnumerable(Of T), equalityComparer As IEqualityComparer(Of T)) As IImmutableList(Of T) Implements IImmutableList(Of T).RemoveRange" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableList&lt;T&gt; ^ System.Collections.Immutable.IImmutableList&lt;T&gt;.RemoveRange(System::Collections::Generic::IEnumerable&lt;T&gt; ^ items, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer) = System::Collections::Immutable::IImmutableList&lt;T&gt;::RemoveRange;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="items"><span data-ttu-id="55814-421">O intervalo de itens a serem removidos da lista, se encontrado.</span><span class="sxs-lookup"><span data-stu-id="55814-421">The range of items to remove from the list, if found.</span></span></param>
        <param name="equalityComparer"><span data-ttu-id="55814-422">O comparador de igualdade a ser usado para comparar os elementos.</span><span class="sxs-lookup"><span data-stu-id="55814-422">The equality comparer to use to compare elements.</span></span></param>
        <summary><span data-ttu-id="55814-423">Remove um intervalo de elementos dessa lista imutável que correspondem aos itens especificados.</span><span class="sxs-lookup"><span data-stu-id="55814-423">Removes a range of elements from this immutable list that match the items specified.</span></span></summary>
        <returns><span data-ttu-id="55814-424">Uma lista imutável com os itens removidos.</span><span class="sxs-lookup"><span data-stu-id="55814-424">An immutable list with the items removed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="55814-425">Este membro é uma implementação do membro de interface explícita.</span><span class="sxs-lookup"><span data-stu-id="55814-425">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="55814-426">Ele só pode ser usado quando a instância de <xref:System.Collections.Immutable.ImmutableList%601> é convertida em uma interface de <xref:System.Collections.Immutable.IImmutableList%601>.</span><span class="sxs-lookup"><span data-stu-id="55814-426">It can be used only when the <xref:System.Collections.Immutable.ImmutableList%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableList%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="55814-427"><paramref name="items" /> ou <paramref name="equalityComparer" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="55814-427"><paramref name="items" /> or <paramref name="equalityComparer" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableList&lt;T&gt;.RemoveRange">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableList&lt;T&gt; IImmutableList&lt;T&gt;.RemoveRange (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; System.Collections.Immutable.IImmutableList&lt;T&gt;.RemoveRange(int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList&lt;T&gt;#RemoveRange(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Function RemoveRange (index As Integer, count As Integer) As IImmutableList(Of T) Implements IImmutableList(Of T).RemoveRange" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableList&lt;T&gt; ^ System.Collections.Immutable.IImmutableList&lt;T&gt;.RemoveRange(int index, int count) = System::Collections::Immutable::IImmutableList&lt;T&gt;::RemoveRange;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Int32,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="55814-428">O índice inicial do intervalo de elementos a serem removidos.</span><span class="sxs-lookup"><span data-stu-id="55814-428">The starting index of the range of elements to remove.</span></span></param>
        <param name="count"><span data-ttu-id="55814-429">O número de elementos a serem removidos.</span><span class="sxs-lookup"><span data-stu-id="55814-429">The number of elements to remove.</span></span></param>
        <summary><span data-ttu-id="55814-430">Remove o número especificado de elementos no local especificado dessa lista.</span><span class="sxs-lookup"><span data-stu-id="55814-430">Removes the specified number of elements at the specified location from this list.</span></span></summary>
        <returns><span data-ttu-id="55814-431">Uma nova lista com os elementos removidos.</span><span class="sxs-lookup"><span data-stu-id="55814-431">A new list with the elements removed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="55814-432">Este membro é uma implementação do membro de interface explícita.</span><span class="sxs-lookup"><span data-stu-id="55814-432">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="55814-433">Ele só pode ser usado quando a instância de <xref:System.Collections.Immutable.ImmutableList%601> é convertida em uma interface de <xref:System.Collections.Immutable.IImmutableList%601>.</span><span class="sxs-lookup"><span data-stu-id="55814-433">It can be used only when the <xref:System.Collections.Immutable.ImmutableList%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableList%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableList&lt;T&gt;.Replace">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableList&lt;T&gt; IImmutableList&lt;T&gt;.Replace (T oldValue, T newValue, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; System.Collections.Immutable.IImmutableList&lt;T&gt;.Replace(!T oldValue, !T newValue, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList&lt;T&gt;#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Function Replace (oldValue As T, newValue As T, equalityComparer As IEqualityComparer(Of T)) As IImmutableList(Of T) Implements IImmutableList(Of T).Replace" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableList&lt;T&gt; ^ System.Collections.Immutable.IImmutableList&lt;T&gt;.Replace(T oldValue, T newValue, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer) = System::Collections::Immutable::IImmutableList&lt;T&gt;::Replace;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldValue" Type="T" />
        <Parameter Name="newValue" Type="T" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="oldValue"><span data-ttu-id="55814-434">O elemento a ser substituído.</span><span class="sxs-lookup"><span data-stu-id="55814-434">The element to replace.</span></span></param>
        <param name="newValue"><span data-ttu-id="55814-435">O elemento pelo qual substituir o elemento antigo.</span><span class="sxs-lookup"><span data-stu-id="55814-435">The element to replace the old element with.</span></span></param>
        <param name="equalityComparer"><span data-ttu-id="55814-436">O comparador de igualdade a ser usado na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="55814-436">The equality comparer to use in the search.</span></span></param>
        <summary><span data-ttu-id="55814-437">Substitui um elemento na lista pelo elemento especificado.</span><span class="sxs-lookup"><span data-stu-id="55814-437">Replaces an element in the list with the specified element.</span></span></summary>
        <returns><span data-ttu-id="55814-438">A nova lista.</span><span class="sxs-lookup"><span data-stu-id="55814-438">The new list.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="55814-439">Gerado quando o valor antigo não existe na lista.</span><span class="sxs-lookup"><span data-stu-id="55814-439">Thrown when the old value does not exist in the list.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableList&lt;T&gt;.SetItem">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableList&lt;T&gt; IImmutableList&lt;T&gt;.SetItem (int index, T value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; System.Collections.Immutable.IImmutableList&lt;T&gt;.SetItem(int32 index, !T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList&lt;T&gt;#SetItem(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Function SetItem (index As Integer, value As T) As IImmutableList(Of T) Implements IImmutableList(Of T).SetItem" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableList&lt;T&gt; ^ System.Collections.Immutable.IImmutableList&lt;T&gt;.SetItem(int index, T value) = System::Collections::Immutable::IImmutableList&lt;T&gt;::SetItem;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableList`1.SetItem(System.Int32,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="55814-440">A posição na lista do elemento a ser substituído.</span><span class="sxs-lookup"><span data-stu-id="55814-440">The position in the list of the element to replace.</span></span></param>
        <param name="value"><span data-ttu-id="55814-441">O elemento pelo qual substituir o elemento antigo.</span><span class="sxs-lookup"><span data-stu-id="55814-441">The element to replace the old element with.</span></span></param>
        <summary><span data-ttu-id="55814-442">Substitui um elemento na lista na posição especificada, pelo elemento especificado.</span><span class="sxs-lookup"><span data-stu-id="55814-442">Replaces an element in the list at a given position with the specified element.</span></span></summary>
        <returns><span data-ttu-id="55814-443">A nova lista.</span><span class="sxs-lookup"><span data-stu-id="55814-443">The new list.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="55814-444">Este membro é uma implementação do membro de interface explícita.</span><span class="sxs-lookup"><span data-stu-id="55814-444">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="55814-445">Ele só pode ser usado quando a instância de <xref:System.Collections.Immutable.ImmutableList%601> é convertida em uma interface de <xref:System.Collections.Immutable.IImmutableList%601>.</span><span class="sxs-lookup"><span data-stu-id="55814-445">It can be used only when the <xref:System.Collections.Immutable.ImmutableList%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableList%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToBuilder">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableList&lt;T&gt;.Builder ToBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableList`1/Builder&lt;!T&gt; ToBuilder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.ToBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Function ToBuilder () As ImmutableList(Of T).Builder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableList&lt;T&gt;::Builder ^ ToBuilder();" />
      <MemberSignature Language="F#" Value="member this.ToBuilder : unit -&gt; System.Collections.Immutable.ImmutableList&lt;'T&gt;.Builder" Usage="immutableList.ToBuilder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableList&lt;T&gt;+Builder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="55814-446">Cria uma lista que tem o mesmo conteúdo que essa lista e pode ser modificada com eficiência em várias operações usando interfaces mutáveis padrão.</span><span class="sxs-lookup"><span data-stu-id="55814-446">Creates a list that has the same contents as this list and can be efficiently mutated across multiple operations using standard mutable interfaces.</span></span></summary>
        <returns><span data-ttu-id="55814-447">A lista criada com o mesmo conteúdo que essa lista.</span><span class="sxs-lookup"><span data-stu-id="55814-447">The created list with the same contents as this list.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="55814-448">Isso é uma operação de (1) e resulta em apenas uma alocação de memória (pequeno) único.</span><span class="sxs-lookup"><span data-stu-id="55814-448">This is an O(1) operation and results in only a single (small) memory allocation.</span></span> <span data-ttu-id="55814-449">A lista mutável que é retornada não é thread-safe.</span><span class="sxs-lookup"><span data-stu-id="55814-449">The mutable list that is returned is not thread-safe.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrueForAll">
      <MemberSignature Language="C#" Value="public bool TrueForAll (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TrueForAll(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.TrueForAll(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function TrueForAll (match As Predicate(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TrueForAll(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.TrueForAll : Predicate&lt;'T&gt; -&gt; bool" Usage="immutableList.TrueForAll match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match"><span data-ttu-id="55814-450">O delegado que define as condições a serem verificadas nos elementos.</span><span class="sxs-lookup"><span data-stu-id="55814-450">The delegate that defines the conditions to check against the elements.</span></span></param>
        <summary><span data-ttu-id="55814-451">Determina se cada elemento da lista imutável coincide com as condições definidas pelo predicado especificado.</span><span class="sxs-lookup"><span data-stu-id="55814-451">Determines whether every element in the immutable list matches the conditions defined by the specified predicate.</span></span></summary>
        <returns><span data-ttu-id="55814-452"><see langword="true" /> se cada elemento da lista imutável corresponder às condições definidas pelo predicado especificado; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="55814-452"><see langword="true" /> if every element in the immutable list matches the conditions defined by the specified predicate; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="55814-453">Se a lista não tiver elementos, o valor retornado será <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="55814-453">If the list has no elements, the return value is <see langword="true" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
