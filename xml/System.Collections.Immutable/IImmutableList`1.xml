<Type Name="IImmutableList&lt;T&gt;" FullName="System.Collections.Immutable.IImmutableList&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="563588464570c3aca10459a0fd75d09773f76efb" /><Meta Name="ms.sourcegitcommit" Value="d8bd5d494445ce3fcad1321267cb87548d23a45b" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="12/15/2018" /><Meta Name="ms.locfileid" Value="53448666" /></Metadata><TypeSignature Language="C#" Value="public interface IImmutableList&lt;T&gt; : System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.Generic.IReadOnlyCollection&lt;T&gt;, System.Collections.Generic.IReadOnlyList&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IImmutableList`1&lt;T&gt; implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyList`1&lt;!T&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Immutable.IImmutableList`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IImmutableList(Of T)&#xA;Implements IEnumerable(Of T), IReadOnlyCollection(Of T), IReadOnlyList(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IImmutableList : System::Collections::Generic::IEnumerable&lt;T&gt;, System::Collections::Generic::IReadOnlyCollection&lt;T&gt;, System::Collections::Generic::IReadOnlyList&lt;T&gt;" />
  <TypeSignature Language="F#" Value="type IImmutableList&lt;'T&gt; = interface&#xA;    interface seq&lt;'T&gt;&#xA;    interface IEnumerable&#xA;    interface IReadOnlyCollection&lt;'T&gt;&#xA;    interface IReadOnlyList&lt;'T&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.Immutable</AssemblyName>
    <AssemblyVersion>1.2.0.0</AssemblyVersion>
    <AssemblyVersion>1.2.1.0</AssemblyVersion>
    <AssemblyVersion>1.2.2.0</AssemblyVersion>
    <AssemblyVersion>1.2.3.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyCollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyList&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T"><span data-ttu-id="b3927-101">O tipo dos elementos na lista.</span><span class="sxs-lookup"><span data-stu-id="b3927-101">The type of elements in the list.</span></span></typeparam>
    <summary><span data-ttu-id="b3927-102">Representa uma lista de elementos que não pode ser modificada.</span><span class="sxs-lookup"><span data-stu-id="b3927-102">Represents a list of elements that cannot be modified.</span></span>  
  
 <span data-ttu-id="b3927-103">**Pacote NuGet**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">sobre coleções imutáveis e como instalá-las</see>)</span><span class="sxs-lookup"><span data-stu-id="b3927-103">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3927-104">Quando você adicionar ou remover itens de um <xref:System.Collections.Immutable.IImmutableList%601>, uma cópia da lista original é criada, com as alterações sejam aplicadas...</span><span class="sxs-lookup"><span data-stu-id="b3927-104">When you add or remove items from an <xref:System.Collections.Immutable.IImmutableList%601>, a copy of the original list is created, with the changes applied..</span></span> <span data-ttu-id="b3927-105">Alterações incrementais para uma lista de compartilham o máximo de memória possível com versões anteriores de uma lista e habilitar a coleta de lixo limpar os dados de lista exclusiva que não está sendo referenciados.</span><span class="sxs-lookup"><span data-stu-id="b3927-105">Incremental changes to a list share as much memory as possible with earlier versions of a list and enable garbage collection to clean up any unique list data that is no longer being referenced.</span></span>  
  
 <span data-ttu-id="b3927-106">Para criar uma nova lista, use o método Create.</span><span class="sxs-lookup"><span data-stu-id="b3927-106">To create a new list, use the Create method.</span></span>  
  
 <span data-ttu-id="b3927-107">O <xref:System.Collections.Immutable.IImmutableList%601> não tem nenhum construtor público, pois isso criaria uma lista imutável vazia.</span><span class="sxs-lookup"><span data-stu-id="b3927-107">The <xref:System.Collections.Immutable.IImmutableList%601> has no public constructor, as this would create an empty immutable list.</span></span> <span data-ttu-id="b3927-108">Você deve criar uma nova lista usando o método Create.</span><span class="sxs-lookup"><span data-stu-id="b3927-108">You should create a new list using the Create method.</span></span> <span data-ttu-id="b3927-109">Você pode adicionar novos itens para uma cópia da lista original usando o <xref:System.Collections.Immutable.ImmutableList%601.Add%2A>, e <xref:System.Collections.Immutable.ImmutableList%601.AddRange%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="b3927-109">You can add new items to a copy of the original list using the <xref:System.Collections.Immutable.ImmutableList%601.Add%2A>, and <xref:System.Collections.Immutable.ImmutableList%601.AddRange%2A> methods.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; Add (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; Add(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.Add(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (value As T) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ Add(T value);" />
      <MemberSignature Language="F#" Value="abstract member Add : 'T -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.Add value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b3927-110">O objeto a ser adicionado à lista.</span><span class="sxs-lookup"><span data-stu-id="b3927-110">The object to add to the list.</span></span></param>
        <summary><span data-ttu-id="b3927-111">Faz uma cópia da lista e adiciona o objeto especificado ao final da lista copiada.</span><span class="sxs-lookup"><span data-stu-id="b3927-111">Makes a copy of the list, and adds the specified object to the end of the  copied list.</span></span></summary>
        <returns><span data-ttu-id="b3927-112">Uma nova lista com o objeto adicionado ou essa lista se o objeto já estiver na lista.</span><span class="sxs-lookup"><span data-stu-id="b3927-112">A new list with the object added, or this list if the object is already in the list.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; AddRange (System.Collections.Generic.IEnumerable&lt;T&gt; items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; AddRange(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function AddRange (items As IEnumerable(Of T)) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ AddRange(System::Collections::Generic::IEnumerable&lt;T&gt; ^ items);" />
      <MemberSignature Language="F#" Value="abstract member AddRange : seq&lt;'T&gt; -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.AddRange items" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="items"><span data-ttu-id="b3927-113">Os objetos a serem adicionados à lista.</span><span class="sxs-lookup"><span data-stu-id="b3927-113">The objects to add to the list.</span></span></param>
        <summary><span data-ttu-id="b3927-114">Faz uma cópia da lista e adiciona os objetos especificados ao final da lista copiada.</span><span class="sxs-lookup"><span data-stu-id="b3927-114">Makes a copy of the list and adds the specified objects to the end of the copied list.</span></span></summary>
        <returns><span data-ttu-id="b3927-115">Uma nova lista com os elementos adicionados ou essa lista se os elementos já existirem na lista.</span><span class="sxs-lookup"><span data-stu-id="b3927-115">A new list with the elements added, or this list if the elements already exist in the list.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Function Clear () As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b3927-116">Cria uma lista com todos os itens removidos, mas com a mesma semântica de classificação e ordenação desta lista.</span><span class="sxs-lookup"><span data-stu-id="b3927-116">Creates  a list with all the items removed, but with the same sorting and ordering semantics as this list.</span></span></summary>
        <returns><span data-ttu-id="b3927-117">Uma lista vazia que tem as mesmas semânticas de classificação e ordenação que essa instância.</span><span class="sxs-lookup"><span data-stu-id="b3927-117">An empty list that has the same sorting and ordering semantics as this instance.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (T item, int index, int count, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(!T item, int32 index, int32 count, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (item As T, index As Integer, count As Integer, equalityComparer As IEqualityComparer(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(T item, int index, int count, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : 'T * int * int * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; int" Usage="iImmutableList.IndexOf (item, index, count, equalityComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="b3927-118">O objeto a ser localizado no <see cref="T:System.Collections.Immutable.IImmutableList`1" />.</span><span class="sxs-lookup"><span data-stu-id="b3927-118">The object to locate in the <see cref="T:System.Collections.Immutable.IImmutableList`1" />.</span></span> <span data-ttu-id="b3927-119">Esse valor pode ser nulo para tipos de referência.</span><span class="sxs-lookup"><span data-stu-id="b3927-119">This value can be null for reference types.</span></span></param>
        <param name="index"><span data-ttu-id="b3927-120">O índice inicial com base em zero da pesquisa.</span><span class="sxs-lookup"><span data-stu-id="b3927-120">The zero-based starting indes of the search.</span></span> <span data-ttu-id="b3927-121">0 (zero) é válido em uma lista vazia.</span><span class="sxs-lookup"><span data-stu-id="b3927-121">0 (zero) is valid in an empty list.</span></span></param>
        <param name="count"><span data-ttu-id="b3927-122">O número de elementos na seção a ser pesquisada.</span><span class="sxs-lookup"><span data-stu-id="b3927-122">The number of elements in the section to search.</span></span></param>
        <param name="equalityComparer"><span data-ttu-id="b3927-123">O comparador de igualdade a ser usado para localizar <paramref name="item" />.</span><span class="sxs-lookup"><span data-stu-id="b3927-123">The equality comparer to use to locate <paramref name="item" />.</span></span></param>
        <summary><span data-ttu-id="b3927-124">Pesquisa o objeto especificado e retorna o índice baseado em zero da primeira ocorrência em um intervalo de elementos no <see cref="T:System.Collections.Immutable.IImmutableList`1" /> que começa no índice especificado e contém o número de elementos especificado.</span><span class="sxs-lookup"><span data-stu-id="b3927-124">Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Collections.Immutable.IImmutableList`1" /> that starts at the specified index and contains the specified number of elements.</span></span></summary>
        <returns><span data-ttu-id="b3927-125">O índice baseado em zero da primeira ocorrência de <paramref name="item" /> no intervalo de elementos na <see cref="T:System.Collections.Immutable.IImmutableList`1" /> que começa em <paramref name="index" /> e contém o número de elementos <paramref name="count" />, se encontrado; caso contrário, -1.</span><span class="sxs-lookup"><span data-stu-id="b3927-125">The zero-based index of the first occurrence of <paramref name="item" /> within the range of elements in the <see cref="T:System.Collections.Immutable.IImmutableList`1" /> that starts at <paramref name="index" /> and contains <paramref name="count" /> number of elements if found; otherwise -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; Insert (int index, T element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; Insert(int32 index, !T element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.Insert(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (index As Integer, element As T) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ Insert(int index, T element);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * 'T -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.Insert (index, element)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="element" Type="T" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="b3927-126">O índice baseado em zero no qual inserir o valor.</span><span class="sxs-lookup"><span data-stu-id="b3927-126">The zero-based index at which to insert the value.</span></span></param>
        <param name="element"><span data-ttu-id="b3927-127">O objeto a ser inserido.</span><span class="sxs-lookup"><span data-stu-id="b3927-127">The object to insert.</span></span></param>
        <summary><span data-ttu-id="b3927-128">Insere o elemento especificado no índice especificado na lista imutável.</span><span class="sxs-lookup"><span data-stu-id="b3927-128">Inserts the specified element at the specified index in the immutable list.</span></span></summary>
        <returns><span data-ttu-id="b3927-129">Uma nova lista imutável que inclui o elemento especificado.</span><span class="sxs-lookup"><span data-stu-id="b3927-129">A new immutable list that includes the specified element.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; InsertRange (int index, System.Collections.Generic.IEnumerable&lt;T&gt; items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; InsertRange(int32 index, class System.Collections.Generic.IEnumerable`1&lt;!T&gt; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function InsertRange (index As Integer, items As IEnumerable(Of T)) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ InsertRange(int index, System::Collections::Generic::IEnumerable&lt;T&gt; ^ items);" />
      <MemberSignature Language="F#" Value="abstract member InsertRange : int * seq&lt;'T&gt; -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.InsertRange (index, items)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="b3927-130">O índice baseado em zero no qual os novos elementos devem ser inseridos.</span><span class="sxs-lookup"><span data-stu-id="b3927-130">The zero-based index at which the new elements should be inserted.</span></span></param>
        <param name="items"><span data-ttu-id="b3927-131">Os elementos a serem inseridos.</span><span class="sxs-lookup"><span data-stu-id="b3927-131">The elements to insert.</span></span></param>
        <summary><span data-ttu-id="b3927-132">Insere os elementos especificados no índice especificado na lista imutável.</span><span class="sxs-lookup"><span data-stu-id="b3927-132">Inserts the specified elements at the specified index in the immutable list.</span></span></summary>
        <returns><span data-ttu-id="b3927-133">Uma nova lista imutável que inclui os elementos especificados.</span><span class="sxs-lookup"><span data-stu-id="b3927-133">A new immutable list that includes the specified elements.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (T item, int index, int count, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(!T item, int32 index, int32 count, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (item As T, index As Integer, count As Integer, equalityComparer As IEqualityComparer(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(T item, int index, int count, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : 'T * int * int * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; int" Usage="iImmutableList.LastIndexOf (item, index, count, equalityComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="b3927-134">O objeto a ser localizado na lista.</span><span class="sxs-lookup"><span data-stu-id="b3927-134">The object to locate in the list.</span></span> <span data-ttu-id="b3927-135">O valor pode ser <see langword="null" /> para tipos de referência.</span><span class="sxs-lookup"><span data-stu-id="b3927-135">The value can be <see langword="null" /> for reference types.</span></span></param>
        <param name="index"><span data-ttu-id="b3927-136">O índice inicial com base em zero da pesquisa.</span><span class="sxs-lookup"><span data-stu-id="b3927-136">The zero-based starting index of the search.</span></span> <span data-ttu-id="b3927-137">0 (zero) é válido em uma lista vazia.</span><span class="sxs-lookup"><span data-stu-id="b3927-137">0 (zero) is valid in an empty list.</span></span></param>
        <param name="count"><span data-ttu-id="b3927-138">O número de elementos na seção a ser pesquisada.</span><span class="sxs-lookup"><span data-stu-id="b3927-138">The number of elements in the section to search.</span></span></param>
        <param name="equalityComparer"><span data-ttu-id="b3927-139">O comparador de igualdade para corresponder a <paramref name="item" />.</span><span class="sxs-lookup"><span data-stu-id="b3927-139">The equality comparer to match <paramref name="item" />.</span></span></param>
        <summary><span data-ttu-id="b3927-140">Pesquisa o objeto especificado e retorna o índice baseado em zero da última ocorrência no intervalo de elementos na <see cref="T:System.Collections.Immutable.IImmutableList`1" /> que contém o número de elementos especificado e termina no índice especificado.</span><span class="sxs-lookup"><span data-stu-id="b3927-140">Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Collections.Immutable.IImmutableList`1" /> that contains the specified number of elements and ends at the specified index.</span></span></summary>
        <returns><span data-ttu-id="b3927-141">Retorna <see cref="T:System.Int32" />.</span><span class="sxs-lookup"><span data-stu-id="b3927-141">Returns <see cref="T:System.Int32" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; Remove (T value, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; Remove(!T value, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (value As T, equalityComparer As IEqualityComparer(Of T)) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ Remove(T value, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="abstract member Remove : 'T * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.Remove (value, equalityComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b3927-142">O objeto a ser removido da lista.</span><span class="sxs-lookup"><span data-stu-id="b3927-142">The object to remove from the list.</span></span></param>
        <param name="equalityComparer"><span data-ttu-id="b3927-143">O comparador de igualdade a ser usado para localizar <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="b3927-143">The equality comparer to use to locate <paramref name="value" />.</span></span></param>
        <summary><span data-ttu-id="b3927-144">Remove a primeira ocorrência de um objeto especificado dessa lista imutável.</span><span class="sxs-lookup"><span data-stu-id="b3927-144">Removes the first occurrence of a specified object from this immutable list.</span></span></summary>
        <returns><span data-ttu-id="b3927-145">Uma nova lista com o objeto especificado removido.</span><span class="sxs-lookup"><span data-stu-id="b3927-145">A new list with the specified object removed.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAll">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; RemoveAll (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; RemoveAll(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.RemoveAll(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAll (match As Predicate(Of T)) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ RemoveAll(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="abstract member RemoveAll : Predicate&lt;'T&gt; -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.RemoveAll match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match"><span data-ttu-id="b3927-146">O delegado que define as condições dos elementos a serem removidos.</span><span class="sxs-lookup"><span data-stu-id="b3927-146">The delegate that defines the conditions of the elements to remove.</span></span></param>
        <summary><span data-ttu-id="b3927-147">Remove todos os elementos que correspondem às condições definidas pelo predicado especificado.</span><span class="sxs-lookup"><span data-stu-id="b3927-147">Removes all the elements that match the conditions defined by the specified predicate.</span></span></summary>
        <returns><span data-ttu-id="b3927-148">Uma nova lista imutável com os elementos removidos.</span><span class="sxs-lookup"><span data-stu-id="b3927-148">A new immutable list with the elements removed.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAt (index As Integer) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="abstract member RemoveAt : int -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.RemoveAt index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="b3927-149">O índice do elemento a ser removido.</span><span class="sxs-lookup"><span data-stu-id="b3927-149">The index of the element to remove.</span></span></param>
        <summary><span data-ttu-id="b3927-150">Remove o elemento no índice especificado da lista imutável.</span><span class="sxs-lookup"><span data-stu-id="b3927-150">Removes the element at the specified index of the immutable list.</span></span></summary>
        <returns><span data-ttu-id="b3927-151">Uma nova lista com o elemento removido.</span><span class="sxs-lookup"><span data-stu-id="b3927-151">A new list with the element removed.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; RemoveRange (System.Collections.Generic.IEnumerable&lt;T&gt; items, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; RemoveRange(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; items, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveRange (items As IEnumerable(Of T), equalityComparer As IEqualityComparer(Of T)) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ RemoveRange(System::Collections::Generic::IEnumerable&lt;T&gt; ^ items, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="abstract member RemoveRange : seq&lt;'T&gt; * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.RemoveRange (items, equalityComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="items"><span data-ttu-id="b3927-152">Os objetos a serem removidos da lista.</span><span class="sxs-lookup"><span data-stu-id="b3927-152">The objects to remove from the list.</span></span></param>
        <param name="equalityComparer"><span data-ttu-id="b3927-153">O comparador de igualdade a ser usado para determinar se <paramref name="items" /> corresponde a todos os objetos na lista.</span><span class="sxs-lookup"><span data-stu-id="b3927-153">The equality comparer to use to determine if <paramref name="items" /> match any objects in the list.</span></span></param>
        <summary><span data-ttu-id="b3927-154">Remove o objeto especificado da lista.</span><span class="sxs-lookup"><span data-stu-id="b3927-154">Removes the specified object from the list.</span></span></summary>
        <returns><span data-ttu-id="b3927-155">Uma nova lista imutável com os objetos especificados removidos, se <paramref name="items" /> tiver correspondido a objetos na lista.</span><span class="sxs-lookup"><span data-stu-id="b3927-155">A new immutable list with the specified objects removed, if <paramref name="items" /> matched objects in the list.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; RemoveRange (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; RemoveRange(int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveRange (index As Integer, count As Integer) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ RemoveRange(int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member RemoveRange : int * int -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.RemoveRange (index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="b3927-156">O índice inicial baseado em zero do intervalo de elementos a serem removidos.</span><span class="sxs-lookup"><span data-stu-id="b3927-156">The zero-based starting index of the range of elements to remove.</span></span></param>
        <param name="count"><span data-ttu-id="b3927-157">O número de elementos a serem removidos.</span><span class="sxs-lookup"><span data-stu-id="b3927-157">The number of elements to remove.</span></span></param>
        <summary><span data-ttu-id="b3927-158">Remove um intervalo de elementos do <see cref="T:System.Collections.Immutable.IImmutableList`1" />.</span><span class="sxs-lookup"><span data-stu-id="b3927-158">Removes a range of elements from the <see cref="T:System.Collections.Immutable.IImmutableList`1" />.</span></span></summary>
        <returns><span data-ttu-id="b3927-159">Uma nova lista imutável com os elementos removidos.</span><span class="sxs-lookup"><span data-stu-id="b3927-159">A new immutable list with the elements removed.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; Replace (T oldValue, T newValue, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; Replace(!T oldValue, !T newValue, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (oldValue As T, newValue As T, equalityComparer As IEqualityComparer(Of T)) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ Replace(T oldValue, T newValue, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="abstract member Replace : 'T * 'T * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.Replace (oldValue, newValue, equalityComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldValue" Type="T" />
        <Parameter Name="newValue" Type="T" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="oldValue"><span data-ttu-id="b3927-160">O elemento a ser substituído.</span><span class="sxs-lookup"><span data-stu-id="b3927-160">The element to be replaced.</span></span></param>
        <param name="newValue"><span data-ttu-id="b3927-161">O elemento com o qual substituir a primeira ocorrência de <paramref name="oldValue" /></span><span class="sxs-lookup"><span data-stu-id="b3927-161">The element to replace the  the first occurrence of <paramref name="oldValue" /> with</span></span></param>
        <param name="equalityComparer"><span data-ttu-id="b3927-162">O comparador de igualdade a ser usado para a correspondência com <paramref name="oldValue" />.</span><span class="sxs-lookup"><span data-stu-id="b3927-162">The equality comparer to use for matching <paramref name="oldValue" />.</span></span></param>
        <summary><span data-ttu-id="b3927-163">Retorna uma nova lista com o elemento de primeira correspondência na lista substituída pelo elemento especificado.</span><span class="sxs-lookup"><span data-stu-id="b3927-163">Returns a new list with the first matching element in the list replaced with the specified element.</span></span></summary>
        <returns><span data-ttu-id="b3927-164">Uma nova lista que contém <paramref name="newValue" />, mesmo que <paramref name="oldvalue" /> seja o mesmo que <paramref name="newValue" />.</span><span class="sxs-lookup"><span data-stu-id="b3927-164">A new list that contains <paramref name="newValue" />, even if <paramref name="oldvalue" /> is the same as <paramref name="newValue" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b3927-165"><paramref name="oldValue" /> não existe na lista.</span><span class="sxs-lookup"><span data-stu-id="b3927-165"><paramref name="oldValue" /> does not exist in the list.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SetItem">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; SetItem (int index, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; SetItem(int32 index, !T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.SetItem(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetItem (index As Integer, value As T) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ SetItem(int index, T value);" />
      <MemberSignature Language="F#" Value="abstract member SetItem : int * 'T -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.SetItem (index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="b3927-166">A posição na lista do elemento a ser substituído.</span><span class="sxs-lookup"><span data-stu-id="b3927-166">The position in the list of the element to replace.</span></span></param>
        <param name="value"><span data-ttu-id="b3927-167">O elemento pelo qual substituir o elemento antigo.</span><span class="sxs-lookup"><span data-stu-id="b3927-167">The element to replace the old element with.</span></span></param>
        <summary><span data-ttu-id="b3927-168">Substitui um elemento na lista na posição especificada, pelo elemento especificado.</span><span class="sxs-lookup"><span data-stu-id="b3927-168">Replaces an element in the list at a given position with the specified element.</span></span></summary>
        <returns><span data-ttu-id="b3927-169">Uma nova lista que contém o novo elemento, mesmo que o elemento no local especificado seja o mesmo que o novo elemento.</span><span class="sxs-lookup"><span data-stu-id="b3927-169">A new list that contains the new element, even if the element at the specified location is the same as the new element.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>