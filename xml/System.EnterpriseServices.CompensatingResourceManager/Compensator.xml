<Type Name="Compensator" FullName="System.EnterpriseServices.CompensatingResourceManager.Compensator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="80fda2da9a31fdc0c1ae9794294584e706cfab36" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51872036" /></Metadata><TypeSignature Language="C#" Value="public class Compensator : System.EnterpriseServices.ServicedComponent" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Compensator extends System.EnterpriseServices.ServicedComponent" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.CompensatingResourceManager.Compensator" />
  <TypeSignature Language="VB.NET" Value="Public Class Compensator&#xA;Inherits ServicedComponent" />
  <TypeSignature Language="C++ CLI" Value="public ref class Compensator : System::EnterpriseServices::ServicedComponent" />
  <TypeSignature Language="F#" Value="type Compensator = class&#xA;    inherit ServicedComponent" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EnterpriseServices.ServicedComponent</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="2b0af-101">Representa a classe base de todos os compensadores do CRM (Compensating Resource Manager).</span><span class="sxs-lookup"><span data-stu-id="2b0af-101">Represents the base class for all Compensating Resource Manager (CRM) Compensators.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b0af-102">O usuário deve estender deste objeto para gravar uma transação personalizada compensador.</span><span class="sxs-lookup"><span data-stu-id="2b0af-102">The user should extend from this object in order to write a custom transaction Compensator.</span></span>  
  
 <span data-ttu-id="2b0af-103">Um Compensador deve sempre ter um construtor público; Caso contrário, o mecanismo de recuperação não pode criá-lo.</span><span class="sxs-lookup"><span data-stu-id="2b0af-103">A Compensator must always have a public constructor; otherwise, the recovery engine cannot create it.</span></span>  
  
 <span data-ttu-id="2b0af-104">Para obter mais informações, consulte [como: criar um Gerenciador de CRM (Compensating Resource)](https://msdn.microsoft.com/library/0a8a024b-0be1-4519-a659-076577278029).</span><span class="sxs-lookup"><span data-stu-id="2b0af-104">For more information, see [How to: Create a Compensating Resource Manager (CRM)](https://msdn.microsoft.com/library/0a8a024b-0be1-4519-a659-076577278029).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2b0af-105">O exemplo de código a seguir demonstra o uso dessa classe.</span><span class="sxs-lookup"><span data-stu-id="2b0af-105">The following code example demonstrates the use of this class.</span></span>  
  
 [!code-cpp[EnterpriseServices_Crm#20](~/samples/snippets/cpp/VS_Snippets_Remoting/EnterpriseServices_Crm/cpp/crmserver.cpp#20)]
 [!code-csharp[EnterpriseServices_Crm#20](~/samples/snippets/csharp/VS_Snippets_Remoting/EnterpriseServices_Crm/CS/crmserver.cs#20)]
 [!code-vb[EnterpriseServices_Crm#20](~/samples/snippets/visualbasic/VS_Snippets_Remoting/EnterpriseServices_Crm/VB/crmserver.vb#20)]  
  
 <span data-ttu-id="2b0af-106">Este compensador é usado pela classe de trabalho a seguir.</span><span class="sxs-lookup"><span data-stu-id="2b0af-106">This compensator is used by the following worker class.</span></span>  
  
 [!code-cpp[EnterpriseServices_Crm#10](~/samples/snippets/cpp/VS_Snippets_Remoting/EnterpriseServices_Crm/cpp/crmserver.cpp#10)]
 [!code-csharp[EnterpriseServices_Crm#10](~/samples/snippets/csharp/VS_Snippets_Remoting/EnterpriseServices_Crm/CS/crmserver.cs#10)]
 [!code-vb[EnterpriseServices_Crm#10](~/samples/snippets/visualbasic/VS_Snippets_Remoting/EnterpriseServices_Crm/VB/crmserver.vb#10)]  
  
 <span data-ttu-id="2b0af-107">O exemplo de código a seguir demonstra um cliente que exercita essa compensador e trabalho.</span><span class="sxs-lookup"><span data-stu-id="2b0af-107">The following code example demonstrates a client that exercises this compensator and worker.</span></span>  
  
 [!code-cpp[EnterpriseServices_Crm#30](~/samples/snippets/cpp/VS_Snippets_Remoting/EnterpriseServices_Crm/cpp/crmclient.cpp#30)]
 [!code-csharp[EnterpriseServices_Crm#30](~/samples/snippets/csharp/VS_Snippets_Remoting/EnterpriseServices_Crm/CS/crmclient.cs#30)]
 [!code-vb[EnterpriseServices_Crm#30](~/samples/snippets/visualbasic/VS_Snippets_Remoting/EnterpriseServices_Crm/VB/crmclient.vb#30)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Compensator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.CompensatingResourceManager.Compensator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Compensator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2b0af-108">Inicializa uma nova instância da classe <see cref="T:System.EnterpriseServices.CompensatingResourceManager.Compensator" />.</span><span class="sxs-lookup"><span data-stu-id="2b0af-108">Initializes a new instance of the <see cref="T:System.EnterpriseServices.CompensatingResourceManager.Compensator" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AbortRecord">
      <MemberSignature Language="C#" Value="public virtual bool AbortRecord (System.EnterpriseServices.CompensatingResourceManager.LogRecord rec);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool AbortRecord(class System.EnterpriseServices.CompensatingResourceManager.LogRecord rec) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.CompensatingResourceManager.Compensator.AbortRecord(System.EnterpriseServices.CompensatingResourceManager.LogRecord)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AbortRecord (rec As LogRecord) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool AbortRecord(System::EnterpriseServices::CompensatingResourceManager::LogRecord ^ rec);" />
      <MemberSignature Language="F#" Value="abstract member AbortRecord : System.EnterpriseServices.CompensatingResourceManager.LogRecord -&gt; bool&#xA;override this.AbortRecord : System.EnterpriseServices.CompensatingResourceManager.LogRecord -&gt; bool" Usage="compensator.AbortRecord rec" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rec" Type="System.EnterpriseServices.CompensatingResourceManager.LogRecord" />
      </Parameters>
      <Docs>
        <param name="rec"><span data-ttu-id="2b0af-109">O registro de log a ser entregue.</span><span class="sxs-lookup"><span data-stu-id="2b0af-109">The log record to be delivered.</span></span></param>
        <summary><span data-ttu-id="2b0af-110">Fornece um registro de log ao CRM (Compensating Resource Manager) durante a fase de anulação.</span><span class="sxs-lookup"><span data-stu-id="2b0af-110">Delivers a log record to the Compensating Resource Manager (CRM) Compensator during the abort phase.</span></span></summary>
        <returns><span data-ttu-id="2b0af-111"><see langword="true" /> se o registro fornecido deve ser esquecido, caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="2b0af-111"><see langword="true" /> if the delivered record should be forgotten; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2b0af-112">O exemplo de código a seguir demonstra a implementação desse método.</span><span class="sxs-lookup"><span data-stu-id="2b0af-112">The following code example demonstrates the implementation of this method.</span></span>  
  
 [!code-cpp[EnterpriseServices_Crm#28](~/samples/snippets/cpp/VS_Snippets_Remoting/EnterpriseServices_Crm/cpp/crmserver.cpp#28)]
 [!code-csharp[EnterpriseServices_Crm#28](~/samples/snippets/csharp/VS_Snippets_Remoting/EnterpriseServices_Crm/CS/crmserver.cs#28)]
 [!code-vb[EnterpriseServices_Crm#28](~/samples/snippets/visualbasic/VS_Snippets_Remoting/EnterpriseServices_Crm/VB/crmserver.vb#28)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginAbort">
      <MemberSignature Language="C#" Value="public virtual void BeginAbort (bool fRecovery);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAbort(bool fRecovery) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.CompensatingResourceManager.Compensator.BeginAbort(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub BeginAbort (fRecovery As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginAbort(bool fRecovery);" />
      <MemberSignature Language="F#" Value="abstract member BeginAbort : bool -&gt; unit&#xA;override this.BeginAbort : bool -&gt; unit" Usage="compensator.BeginAbort fRecovery" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fRecovery" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="fRecovery"><span data-ttu-id="2b0af-113"><see langword="true" /> para iniciar a fase de anulação, caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="2b0af-113"><see langword="true" /> to begin abort phase; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="2b0af-114">Notifica o CRM (Compensating Resource Manager) sobre a fase de anulação da conclusão da transação e a próxima entrega de registros.</span><span class="sxs-lookup"><span data-stu-id="2b0af-114">Notifies the Compensating Resource Manager (CRM) Compensator of the abort phase of the transaction completion, and the upcoming delivery of records.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2b0af-115">O exemplo de código a seguir demonstra a implementação desse método.</span><span class="sxs-lookup"><span data-stu-id="2b0af-115">The following code example demonstrates the implementation of this method.</span></span>  
  
 [!code-cpp[EnterpriseServices_Crm#27](~/samples/snippets/cpp/VS_Snippets_Remoting/EnterpriseServices_Crm/cpp/crmserver.cpp#27)]
 [!code-csharp[EnterpriseServices_Crm#27](~/samples/snippets/csharp/VS_Snippets_Remoting/EnterpriseServices_Crm/CS/crmserver.cs#27)]
 [!code-vb[EnterpriseServices_Crm#27](~/samples/snippets/visualbasic/VS_Snippets_Remoting/EnterpriseServices_Crm/VB/crmserver.vb#27)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginCommit">
      <MemberSignature Language="C#" Value="public virtual void BeginCommit (bool fRecovery);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginCommit(bool fRecovery) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.CompensatingResourceManager.Compensator.BeginCommit(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub BeginCommit (fRecovery As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginCommit(bool fRecovery);" />
      <MemberSignature Language="F#" Value="abstract member BeginCommit : bool -&gt; unit&#xA;override this.BeginCommit : bool -&gt; unit" Usage="compensator.BeginCommit fRecovery" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fRecovery" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="fRecovery"><span data-ttu-id="2b0af-116"><see langword="true" /> para iniciar a fase de confirmação, caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="2b0af-116"><see langword="true" /> to begin commit phase; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="2b0af-117">Notifica o CRM (Compensating Resource Manager) sobre a fase de confirmação da conclusão da transação e a próxima entrega de registros.</span><span class="sxs-lookup"><span data-stu-id="2b0af-117">Notifies the Compensating Resource Manager (CRM) Compensator of the commit phase of the transaction completion and the upcoming delivery of records.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2b0af-118">O exemplo de código a seguir demonstra a implementação desse método.</span><span class="sxs-lookup"><span data-stu-id="2b0af-118">The following code example demonstrates the implementation of this method.</span></span>  
  
 [!code-cpp[EnterpriseServices_Crm#24](~/samples/snippets/cpp/VS_Snippets_Remoting/EnterpriseServices_Crm/cpp/crmserver.cpp#24)]
 [!code-csharp[EnterpriseServices_Crm#24](~/samples/snippets/csharp/VS_Snippets_Remoting/EnterpriseServices_Crm/CS/crmserver.cs#24)]
 [!code-vb[EnterpriseServices_Crm#24](~/samples/snippets/visualbasic/VS_Snippets_Remoting/EnterpriseServices_Crm/VB/crmserver.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginPrepare">
      <MemberSignature Language="C#" Value="public virtual void BeginPrepare ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginPrepare() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.CompensatingResourceManager.Compensator.BeginPrepare" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub BeginPrepare ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginPrepare();" />
      <MemberSignature Language="F#" Value="abstract member BeginPrepare : unit -&gt; unit&#xA;override this.BeginPrepare : unit -&gt; unit" Usage="compensator.BeginPrepare " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2b0af-119">Notifica o CRM (Compensating Resource Manager) sobre a fase de preparação da conclusão da transação e a próxima entrega de registros.</span><span class="sxs-lookup"><span data-stu-id="2b0af-119">Notifies the Compensating Resource Manager (CRM) Compensator of the prepare phase of the transaction completion and the upcoming delivery of records.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2b0af-120">O exemplo de código a seguir demonstra a implementação desse método.</span><span class="sxs-lookup"><span data-stu-id="2b0af-120">The following code example demonstrates the implementation of this method.</span></span>  
  
 [!code-cpp[EnterpriseServices_Crm#21](~/samples/snippets/cpp/VS_Snippets_Remoting/EnterpriseServices_Crm/cpp/crmserver.cpp#21)]
 [!code-csharp[EnterpriseServices_Crm#21](~/samples/snippets/csharp/VS_Snippets_Remoting/EnterpriseServices_Crm/CS/crmserver.cs#21)]
 [!code-vb[EnterpriseServices_Crm#21](~/samples/snippets/visualbasic/VS_Snippets_Remoting/EnterpriseServices_Crm/VB/crmserver.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clerk">
      <MemberSignature Language="C#" Value="public System.EnterpriseServices.CompensatingResourceManager.Clerk Clerk { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.EnterpriseServices.CompensatingResourceManager.Clerk Clerk" />
      <MemberSignature Language="DocId" Value="P:System.EnterpriseServices.CompensatingResourceManager.Compensator.Clerk" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Clerk As Clerk" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::EnterpriseServices::CompensatingResourceManager::Clerk ^ Clerk { System::EnterpriseServices::CompensatingResourceManager::Clerk ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Clerk : System.EnterpriseServices.CompensatingResourceManager.Clerk" Usage="System.EnterpriseServices.CompensatingResourceManager.Compensator.Clerk" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EnterpriseServices.CompensatingResourceManager.Clerk</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2b0af-121">Obtém um valor que representa o objeto <see cref="T:System.EnterpriseServices.CompensatingResourceManager.Clerk" /> do CRM (Compensating Resource Manager).</span><span class="sxs-lookup"><span data-stu-id="2b0af-121">Gets a value representing the Compensating Resource Manager (CRM) <see cref="T:System.EnterpriseServices.CompensatingResourceManager.Clerk" /> object.</span></span></summary>
        <value><span data-ttu-id="2b0af-122">O objeto <see cref="T:System.EnterpriseServices.CompensatingResourceManager.Clerk" />.</span><span class="sxs-lookup"><span data-stu-id="2b0af-122">The <see cref="T:System.EnterpriseServices.CompensatingResourceManager.Clerk" /> object.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommitRecord">
      <MemberSignature Language="C#" Value="public virtual bool CommitRecord (System.EnterpriseServices.CompensatingResourceManager.LogRecord rec);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CommitRecord(class System.EnterpriseServices.CompensatingResourceManager.LogRecord rec) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.CompensatingResourceManager.Compensator.CommitRecord(System.EnterpriseServices.CompensatingResourceManager.LogRecord)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CommitRecord (rec As LogRecord) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CommitRecord(System::EnterpriseServices::CompensatingResourceManager::LogRecord ^ rec);" />
      <MemberSignature Language="F#" Value="abstract member CommitRecord : System.EnterpriseServices.CompensatingResourceManager.LogRecord -&gt; bool&#xA;override this.CommitRecord : System.EnterpriseServices.CompensatingResourceManager.LogRecord -&gt; bool" Usage="compensator.CommitRecord rec" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rec" Type="System.EnterpriseServices.CompensatingResourceManager.LogRecord" />
      </Parameters>
      <Docs>
        <param name="rec"><span data-ttu-id="2b0af-123">O registro de log a ser encaminhado.</span><span class="sxs-lookup"><span data-stu-id="2b0af-123">The log record to forward.</span></span></param>
        <summary><span data-ttu-id="2b0af-124">Fornece um registro de log em ordem de encaminhamento durante a fase de confirmação.</span><span class="sxs-lookup"><span data-stu-id="2b0af-124">Delivers a log record in forward order during the commit phase.</span></span></summary>
        <returns><span data-ttu-id="2b0af-125"><see langword="true" /> se o registro fornecido deve ser esquecido, caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="2b0af-125"><see langword="true" /> if the delivered record should be forgotten; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2b0af-126">O exemplo de código a seguir demonstra a implementação desse método.</span><span class="sxs-lookup"><span data-stu-id="2b0af-126">The following code example demonstrates the implementation of this method.</span></span>  
  
 [!code-cpp[EnterpriseServices_Crm#25](~/samples/snippets/cpp/VS_Snippets_Remoting/EnterpriseServices_Crm/cpp/crmserver.cpp#25)]
 [!code-csharp[EnterpriseServices_Crm#25](~/samples/snippets/csharp/VS_Snippets_Remoting/EnterpriseServices_Crm/CS/crmserver.cs#25)]
 [!code-vb[EnterpriseServices_Crm#25](~/samples/snippets/visualbasic/VS_Snippets_Remoting/EnterpriseServices_Crm/VB/crmserver.vb#25)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndAbort">
      <MemberSignature Language="C#" Value="public virtual void EndAbort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndAbort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.CompensatingResourceManager.Compensator.EndAbort" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndAbort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndAbort();" />
      <MemberSignature Language="F#" Value="abstract member EndAbort : unit -&gt; unit&#xA;override this.EndAbort : unit -&gt; unit" Usage="compensator.EndAbort " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2b0af-127">Notifica o compensador do CRM (Compensating Resource Manager) que ele recebeu todos os registros de log disponíveis durante a fase de anulação.</span><span class="sxs-lookup"><span data-stu-id="2b0af-127">Notifies the Compensating Resource Manager (CRM) Compensator that it has received all the log records available during the abort phase.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2b0af-128">O exemplo de código a seguir demonstra a implementação desse método.</span><span class="sxs-lookup"><span data-stu-id="2b0af-128">The following code example demonstrates the implementation of this method.</span></span>  
  
 [!code-cpp[EnterpriseServices_Crm#29](~/samples/snippets/cpp/VS_Snippets_Remoting/EnterpriseServices_Crm/cpp/crmserver.cpp#29)]
 [!code-csharp[EnterpriseServices_Crm#29](~/samples/snippets/csharp/VS_Snippets_Remoting/EnterpriseServices_Crm/CS/crmserver.cs#29)]
 [!code-vb[EnterpriseServices_Crm#29](~/samples/snippets/visualbasic/VS_Snippets_Remoting/EnterpriseServices_Crm/VB/crmserver.vb#29)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndCommit">
      <MemberSignature Language="C#" Value="public virtual void EndCommit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndCommit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.CompensatingResourceManager.Compensator.EndCommit" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndCommit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndCommit();" />
      <MemberSignature Language="F#" Value="abstract member EndCommit : unit -&gt; unit&#xA;override this.EndCommit : unit -&gt; unit" Usage="compensator.EndCommit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2b0af-129">Notifica o compensador do CRM (Compensating Resource Manager) que ele recebeu todos os registros de log disponíveis durante a fase de confirmação.</span><span class="sxs-lookup"><span data-stu-id="2b0af-129">Notifies the Compensating Resource Manager (CRM) Compensator that it has delivered all the log records available during the commit phase.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2b0af-130">O exemplo de código a seguir demonstra a implementação desse método.</span><span class="sxs-lookup"><span data-stu-id="2b0af-130">The following code example demonstrates the implementation of this method.</span></span>  
  
 [!code-cpp[EnterpriseServices_Crm#26](~/samples/snippets/cpp/VS_Snippets_Remoting/EnterpriseServices_Crm/cpp/crmserver.cpp#26)]
 [!code-csharp[EnterpriseServices_Crm#26](~/samples/snippets/csharp/VS_Snippets_Remoting/EnterpriseServices_Crm/CS/crmserver.cs#26)]
 [!code-vb[EnterpriseServices_Crm#26](~/samples/snippets/visualbasic/VS_Snippets_Remoting/EnterpriseServices_Crm/VB/crmserver.vb#26)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndPrepare">
      <MemberSignature Language="C#" Value="public virtual bool EndPrepare ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EndPrepare() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.CompensatingResourceManager.Compensator.EndPrepare" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EndPrepare () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool EndPrepare();" />
      <MemberSignature Language="F#" Value="abstract member EndPrepare : unit -&gt; bool&#xA;override this.EndPrepare : unit -&gt; bool" Usage="compensator.EndPrepare " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2b0af-131">Notifica o compensador do CRM (Compensating Resource Manager) que ele recebeu todos os registros de log disponíveis durante a fase de preparação.</span><span class="sxs-lookup"><span data-stu-id="2b0af-131">Notifies the Compensating Resource Manager (CRM) Compensator that it has had all the log records available during the prepare phase.</span></span></summary>
        <returns><span data-ttu-id="2b0af-132"><see langword="true" /> se for bem-sucedido, caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="2b0af-132"><see langword="true" /> if successful; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2b0af-133">O exemplo de código a seguir demonstra a implementação desse método.</span><span class="sxs-lookup"><span data-stu-id="2b0af-133">The following code example demonstrates the implementation of this method.</span></span>  
  
 [!code-cpp[EnterpriseServices_Crm#23](~/samples/snippets/cpp/VS_Snippets_Remoting/EnterpriseServices_Crm/cpp/crmserver.cpp#23)]
 [!code-csharp[EnterpriseServices_Crm#23](~/samples/snippets/csharp/VS_Snippets_Remoting/EnterpriseServices_Crm/CS/crmserver.cs#23)]
 [!code-vb[EnterpriseServices_Crm#23](~/samples/snippets/visualbasic/VS_Snippets_Remoting/EnterpriseServices_Crm/VB/crmserver.vb#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PrepareRecord">
      <MemberSignature Language="C#" Value="public virtual bool PrepareRecord (System.EnterpriseServices.CompensatingResourceManager.LogRecord rec);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool PrepareRecord(class System.EnterpriseServices.CompensatingResourceManager.LogRecord rec) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.CompensatingResourceManager.Compensator.PrepareRecord(System.EnterpriseServices.CompensatingResourceManager.LogRecord)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PrepareRecord (rec As LogRecord) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool PrepareRecord(System::EnterpriseServices::CompensatingResourceManager::LogRecord ^ rec);" />
      <MemberSignature Language="F#" Value="abstract member PrepareRecord : System.EnterpriseServices.CompensatingResourceManager.LogRecord -&gt; bool&#xA;override this.PrepareRecord : System.EnterpriseServices.CompensatingResourceManager.LogRecord -&gt; bool" Usage="compensator.PrepareRecord rec" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rec" Type="System.EnterpriseServices.CompensatingResourceManager.LogRecord" />
      </Parameters>
      <Docs>
        <param name="rec"><span data-ttu-id="2b0af-134">O registro de log a ser encaminhado.</span><span class="sxs-lookup"><span data-stu-id="2b0af-134">The log record to forward.</span></span></param>
        <summary><span data-ttu-id="2b0af-135">Fornece um registro de log em ordem subsequente durante a fase de preparação.</span><span class="sxs-lookup"><span data-stu-id="2b0af-135">Delivers a log record in forward order during the prepare phase.</span></span></summary>
        <returns><span data-ttu-id="2b0af-136"><see langword="true" /> se o registro fornecido deve ser esquecido, caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="2b0af-136"><see langword="true" /> if the delivered record should be forgotten; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2b0af-137">O exemplo de código a seguir demonstra a implementação desse método.</span><span class="sxs-lookup"><span data-stu-id="2b0af-137">The following code example demonstrates the implementation of this method.</span></span>  
  
 [!code-cpp[EnterpriseServices_Crm#22](~/samples/snippets/cpp/VS_Snippets_Remoting/EnterpriseServices_Crm/cpp/crmserver.cpp#22)]
 [!code-csharp[EnterpriseServices_Crm#22](~/samples/snippets/csharp/VS_Snippets_Remoting/EnterpriseServices_Crm/CS/crmserver.cs#22)]
 [!code-vb[EnterpriseServices_Crm#22](~/samples/snippets/visualbasic/VS_Snippets_Remoting/EnterpriseServices_Crm/VB/crmserver.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>