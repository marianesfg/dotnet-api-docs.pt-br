<Type Name="ISynchronizedInputProvider" FullName="System.Windows.Automation.Provider.ISynchronizedInputProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4210b594b0569d3486a26fd3d5c83bf4e5cae999" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30614930" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ISynchronizedInputProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ISynchronizedInputProvider" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.Provider.ISynchronizedInputProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface ISynchronizedInputProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class ISynchronizedInputProvider" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationProvider</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("29db1a06-02ce-4cf7-9b42-565d4fab20ee")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="54538-101">Expõe métodos para facilitar o acesso para cliente de Automação da Interface do Usuário para controles compatíveis com entrada sincronizada.</span>
      <span class="sxs-lookup">
        <span data-stu-id="54538-101">Exposes methods to facilitate UI Automation client access to controls that support synchronized input.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54538-102">Implementar essa interface em um provedor de automação de interface do usuário que deve dar suporte a <xref:System.Windows.Automation.SynchronizedInputPattern> padrão de controle.</span><span class="sxs-lookup"><span data-stu-id="54538-102">Implement this interface on a UI Automation provider that must support the <xref:System.Windows.Automation.SynchronizedInputPattern> control pattern.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public void Cancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Cancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ISynchronizedInputProvider.Cancel" />
      <MemberSignature Language="VB.NET" Value="Public Sub Cancel ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Cancel();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="54538-103">Interrompe a escuta de entrada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="54538-103">Stops listening for input.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54538-104">Se o provedor está escutando no momento para a entrada, ele reverterá para a operação normal.</span><span class="sxs-lookup"><span data-stu-id="54538-104">If the provider is currently listening for input, it reverts to normal operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartListening">
      <MemberSignature Language="C#" Value="public void StartListening (System.Windows.Automation.SynchronizedInputType inputType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartListening(valuetype System.Windows.Automation.SynchronizedInputType inputType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ISynchronizedInputProvider.StartListening(System.Windows.Automation.SynchronizedInputType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartListening (inputType As SynchronizedInputType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartListening(System::Windows::Automation::SynchronizedInputType inputType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputType" Type="System.Windows.Automation.SynchronizedInputType" />
      </Parameters>
      <Docs>
        <param name="inputType">
          <span data-ttu-id="54538-105">O tipo de entrada pela qual escutar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="54538-105">The type of input to listen for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="54538-106">Designa que o provedor comece a escutar a entrada do tipo especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="54538-106">Designates that the provider start listening for input of the specified type.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54538-107">Quando o WPF encontra correspondência de entrada, ele verifica a rota do evento de entrada.</span><span class="sxs-lookup"><span data-stu-id="54538-107">When WPF finds matching input, it checks the route of the incoming event.</span></span> <span data-ttu-id="54538-108">Se o elemento de automação que está aguardando a entrada não está na rota, a entrada será descartada e o <xref:System.Windows.Automation.SynchronizedInputPattern.InputDiscardedEvent> é gerado.</span><span class="sxs-lookup"><span data-stu-id="54538-108">If the automation element that is listening for the input is not in the route, the input is discarded and the <xref:System.Windows.Automation.SynchronizedInputPattern.InputDiscardedEvent> event is raised.</span></span> <span data-ttu-id="54538-109">Se a entrada é recebida, o elemento de automação de escuta para o tipo, o <xref:System.Windows.Automation.SynchronizedInputPattern.InputReachedTargetEvent> evento é gerado; caso contrário, o <xref:System.Windows.Automation.SynchronizedInputPattern.InputReachedOtherElementEvent> é gerado.</span><span class="sxs-lookup"><span data-stu-id="54538-109">If the input is received by the automation element listening for that type, the <xref:System.Windows.Automation.SynchronizedInputPattern.InputReachedTargetEvent> event is raised; otherwise, the <xref:System.Windows.Automation.SynchronizedInputPattern.InputReachedOtherElementEvent> event is raised.</span></span>  
  
 <span data-ttu-id="54538-110">Depois de receber a entrada, o provedor para de escutar e continuará normalmente.</span><span class="sxs-lookup"><span data-stu-id="54538-110">After receiving the input, the provider stops listening and continues normally.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>