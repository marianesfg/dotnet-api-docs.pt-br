<Type Name="IValueProvider" FullName="System.Windows.Automation.Provider.IValueProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bee90840138700ed137e4585b3702c8af4711402" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48604851" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IValueProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IValueProvider" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.Provider.IValueProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IValueProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IValueProvider" />
  <TypeSignature Language="F#" Value="type IValueProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationProvider</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.Guid("c7935180-6fb3-4201-b174-7df73adbf64a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.InterfaceType</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Expõe métodos e propriedades para oferecer suporte ao acesso de cliente à Automação da Interface do Usuário para controles que têm um valor intrínseco que não abrange um intervalo e que pode ser representado como uma cadeia de caracteres.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor do controle pode ou não poderão ser editado dependendo do controle e suas configurações.  
  
 Implementado em um provedor de automação de interface do usuário que deve dar suporte a <xref:System.Windows.Automation.ValuePattern> padrão de controle.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Automation.ValuePattern" />
    <related type="Article" href="~/docs/framework/ui-automation/ui-automation-control-patterns-overview.md">Visão Geral de Padrões de Controle de Automação de Interface de Usuário</related>
    <related type="Article" href="http://msdn.microsoft.com/library/6acc6d08-bd67-4e2e-915c-9c1d34eb86fe">Implementação de provedor de automação de interface do usuário do lado do servidor</related>
    <related type="Article" href="http://msdn.microsoft.com/library/3584c0a1-9cd0-4968-8b63-b06390890ef6">Implementação de provedor de automação de interface do usuário do lado do cliente</related>
    <related type="Article" href="http://msdn.microsoft.com/library/0d635c35-ffa8-4dc8-bbc9-12fcd5445776">Padrões de controle de suporte em um provedor de automação da interface do usuário</related>
    <related type="Article" href="http://msdn.microsoft.com/library/b0fcdd87-3add-4345-bca9-e891205e02ba">Implementando o Padrão Controle de Value de Automação de Interface de Usuário</related>
  </Docs>
  <Members>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IValueProvider.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Windows.Automation.Provider.IValueProvider.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que especifica se o valor de um controle é somente leitura.</summary>
        <value>
          <see langword="true" /> Se o valor for somente leitura; <see langword="false" /> se ele pode ser modificado.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um controle deve ter sua <xref:System.Windows.Automation.AutomationElement.IsEnabledProperty> definido como `true` e seu <xref:System.Windows.Automation.ValuePattern.IsReadOnlyProperty> definido como `false` antes de permitir que uma chamada para <xref:System.Windows.Automation.Provider.IValueProvider.SetValue%2A>.  
  
   
  
## Examples  
 O exemplo a seguir mostra uma implementação desse método para um controle que permite que seu valor a ser alterado.  
  
 [!code-csharp[UIAIValueProvider_snip#IsReadOnly](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAIValueProvider_snip/CSharp/ValueFragment.cs#isreadonly)]
 [!code-vb[UIAIValueProvider_snip#IsReadOnly](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAIValueProvider_snip/visualbasic/valuefragment.vb#isreadonly)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetValue(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.IValueProvider.SetValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member SetValue : string -&gt; unit" Usage="iValueProvider.SetValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">O valor a ser definido. O provedor é responsável por converter o valor no tipo de dados apropriado.</param>
        <summary>Define o valor de um controle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Controles de edição de linha única oferecem suporte a acesso programático aos seus conteúdos implementando <xref:System.Windows.Automation.Provider.IValueProvider>. No entanto, os controles de edição de várias linhas não implementam <xref:System.Windows.Automation.Provider.IValueProvider>; em vez disso, eles oferecem acesso a seus conteúdos implementando <xref:System.Windows.Automation.Provider.ITextProvider>.  
  
 Controles como <xref:System.Windows.Automation.ControlType.ListItem> e <xref:System.Windows.Automation.ControlType.TreeItem> deve implementar <xref:System.Windows.Automation.Provider.IValueProvider> se o valor de qualquer um dos itens for editável, independentemente do atual modo de edição do controle. O controle pai também deve implementar <xref:System.Windows.Automation.Provider.IValueProvider> se os itens filhos são editáveis.  
  
 ![Item de lista editável. ] (~/add/media/uia-valuepattern-editable-listitem.PNG "Item de lista editável.")  
Exemplo de um Item de lista editável  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra um controle personalizado que permite que seu valor a ser definido como uma cadeia de caracteres de tamanho limitado.  
  
 [!code-csharp[UIAIValueProvider_snip#SetValue](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAIValueProvider_snip/CSharp/ValueFragment.cs#setvalue)]
 [!code-vb[UIAIValueProvider_snip#SetValue](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAIValueProvider_snip/visualbasic/valuefragment.vb#setvalue)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Se informações específicas a uma localidade são passadas para um controle em um formato incorreto, tal como uma data formatada incorretamente.</exception>
        <exception cref="T:System.ArgumentException">Se um novo valor não pode ser convertido de uma cadeia de caracteres em um formato que o controle reconhece.</exception>
        <exception cref="T:System.Windows.Automation.ElementNotEnabledException">Quando é feita uma tentativa de manipular um controle que não está habilitado.</exception>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public string Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IValueProvider.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Value { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : string" Usage="System.Windows.Automation.Provider.IValueProvider.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o valor do controle.</summary>
        <value>O valor do controle como uma cadeia de caracteres.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Controles de edição de linha única oferecem suporte a acesso programático aos seus conteúdos implementando <xref:System.Windows.Automation.Provider.IValueProvider> (além <xref:System.Windows.Automation.Provider.ITextProvider>). No entanto, os controles de edição de várias linhas não implementam <xref:System.Windows.Automation.Provider.IValueProvider>.  
  
 Para recuperar o conteúdo textual dos controles de edição de várias linhas, os controles devem implementar <xref:System.Windows.Automation.Provider.ITextProvider>. No entanto, <xref:System.Windows.Automation.Provider.ITextProvider> não oferece suporte para a definição do valor de um controle.  
  
 <xref:System.Windows.Automation.Provider.IValueProvider> não oferece suporte a recuperação de informações ou valores de subcadeia de caracteres de formatação. Implemente <xref:System.Windows.Automation.Provider.ITextProvider> nesses cenários.  
  
   
  
## Examples  
 O exemplo a seguir mostra uma implementação desse método para um controle que permite que seu valor a ser recuperado.  
  
 [!code-csharp[UIAIValueProvider_snip#Value](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAIValueProvider_snip/CSharp/ValueFragment.cs#value)]
 [!code-vb[UIAIValueProvider_snip#Value](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAIValueProvider_snip/visualbasic/valuefragment.vb#value)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>