<Type Name="AutomationInteropProvider" FullName="System.Windows.Automation.Provider.AutomationInteropProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c777bed6739a42a6ed7e5e0e5627d10ad500804f" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37583580" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class AutomationInteropProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit AutomationInteropProvider extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.Provider.AutomationInteropProvider" />
  <TypeSignature Language="VB.NET" Value="Public Class AutomationInteropProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class AutomationInteropProvider abstract sealed" />
  <TypeSignature Language="F#" Value="type AutomationInteropProvider = class" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationProvider</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornece suporte para a comunicação entre os provedores de Automação da Interface do Usuário e os aplicativos cliente de Automação da Interface do Usuário.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AppendRuntimeId">
      <MemberSignature Language="C#" Value="public const int AppendRuntimeId = 3;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 AppendRuntimeId = (3)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.Provider.AutomationInteropProvider.AppendRuntimeId" />
      <MemberSignature Language="VB.NET" Value="Public Const AppendRuntimeId As Integer  = 3" />
      <MemberSignature Language="C++ CLI" Value="public: int AppendRuntimeId = 3;" />
      <MemberSignature Language="F#" Value="val mutable AppendRuntimeId : int" Usage="System.Windows.Automation.Provider.AutomationInteropProvider.AppendRuntimeId" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary>Contém um valor que, quando retornado como o primeiro elemento da matriz passada pelo provedor de Automação da Interface do Usuário para <see cref="M:System.Windows.Automation.Provider.IRawElementProviderFragment.GetRuntimeId" />, indica que a ID é parcial e deve ser acrescentada à ID fornecida pelo provedor de base.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalmente, esse campo é usado na implementação de <xref:System.Windows.Automation.Provider.IRawElementProviderFragment.GetRuntimeId%2A> para elementos em um fragmento que não são hospedados diretamente em uma janela.  
  
   
  
## Examples  
 O exemplo a seguir é uma implementação de <xref:System.Windows.Automation.Provider.IRawElementProviderFragment.GetRuntimeId%2A?displayProperty=nameWithType> para um item de lista.  
  
 [!code-csharp[UIAFragmentProvider_snip#101](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAFragmentProvider_snip/CSharp/ListItemFragment.cs#101)]
 [!code-vb[UIAFragmentProvider_snip#101](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAFragmentProvider_snip/VisualBasic/ListItemFragment.vb#101)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClientsAreListening">
      <MemberSignature Language="C#" Value="public static bool ClientsAreListening { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool ClientsAreListening" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.AutomationInteropProvider.ClientsAreListening" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ClientsAreListening As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool ClientsAreListening { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ClientsAreListening : bool" Usage="System.Windows.Automation.Provider.AutomationInteropProvider.ClientsAreListening" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que especifica se qualquer aplicativo cliente da Automação da Interface do Usuário está inscrito em eventos [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)].</summary>
        <value>
          <see langword="true" /> Se um cliente assina eventos; Caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[UIAFragmentProvider_snip#122](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAFragmentProvider_snip/CSharp/ListFragment.cs#122)]
 [!code-vb[UIAFragmentProvider_snip#122](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAFragmentProvider_snip/VisualBasic/ListFragment.vb#122)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HostProviderFromHandle">
      <MemberSignature Language="C#" Value="public static System.Windows.Automation.Provider.IRawElementProviderSimple HostProviderFromHandle (IntPtr hwnd);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Automation.Provider.IRawElementProviderSimple HostProviderFromHandle(native int hwnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.AutomationInteropProvider.HostProviderFromHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HostProviderFromHandle (hwnd As IntPtr) As IRawElementProviderSimple" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Automation::Provider::IRawElementProviderSimple ^ HostProviderFromHandle(IntPtr hwnd);" />
      <MemberSignature Language="F#" Value="static member HostProviderFromHandle : nativeint -&gt; System.Windows.Automation.Provider.IRawElementProviderSimple" Usage="System.Windows.Automation.Provider.AutomationInteropProvider.HostProviderFromHandle hwnd" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Provider.IRawElementProviderSimple</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hwnd" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hwnd">O identificador de janela.</param>
        <summary>Retorna um provedor de Automação da Interface do Usuário que representa a janela especificada.</summary>
        <returns>O provedor de elemento bruto para a janela especificada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A interface retornada por esse método só pode ser passada de volta para [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]. A tentativa de chamar um método na interface para gerar uma exceção.  
  
   
  
## Examples  
 [!code-csharp[UIAFragmentProvider_snip#121](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAFragmentProvider_snip/CSharp/ListFragment.cs#121)]
 [!code-vb[UIAFragmentProvider_snip#121](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAFragmentProvider_snip/VisualBasic/ListFragment.vb#121)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateLimit">
      <MemberSignature Language="C#" Value="public const int InvalidateLimit = 20;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 InvalidateLimit = (20)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.Provider.AutomationInteropProvider.InvalidateLimit" />
      <MemberSignature Language="VB.NET" Value="Public Const InvalidateLimit As Integer  = 20" />
      <MemberSignature Language="C++ CLI" Value="public: int InvalidateLimit = 20;" />
      <MemberSignature Language="F#" Value="val mutable InvalidateLimit : int" Usage="System.Windows.Automation.Provider.AutomationInteropProvider.InvalidateLimit" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>20</MemberValue>
      <Docs>
        <summary>Especifica o número máximo de eventos a serem enviados antes do envio em lote.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse valor determina se notificação recebe eventos individuais, como <xref:System.Windows.Automation.StructureChangeType.ChildAdded> ou de eventos em massa, como <xref:System.Windows.Automation.StructureChangeType.ChildrenBulkAdded>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemsInvalidateLimit">
      <MemberSignature Language="C#" Value="public const int ItemsInvalidateLimit = 5;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 ItemsInvalidateLimit = (5)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.Provider.AutomationInteropProvider.ItemsInvalidateLimit" />
      <MemberSignature Language="VB.NET" Value="Public Const ItemsInvalidateLimit As Integer  = 5" />
      <MemberSignature Language="C++ CLI" Value="public: int ItemsInvalidateLimit = 5;" />
      <MemberSignature Language="F#" Value="val mutable ItemsInvalidateLimit : int" Usage="System.Windows.Automation.Provider.AutomationInteropProvider.ItemsInvalidateLimit" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>5</MemberValue>
      <Docs>
        <summary>O número máximo de eventos a serem enviados antes do envio em lote para itens em contêineres.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseAutomationEvent">
      <MemberSignature Language="C#" Value="public static void RaiseAutomationEvent (System.Windows.Automation.AutomationEvent eventId, System.Windows.Automation.Provider.IRawElementProviderSimple provider, System.Windows.Automation.AutomationEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RaiseAutomationEvent(class System.Windows.Automation.AutomationEvent eventId, class System.Windows.Automation.Provider.IRawElementProviderSimple provider, class System.Windows.Automation.AutomationEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.AutomationInteropProvider.RaiseAutomationEvent(System.Windows.Automation.AutomationEvent,System.Windows.Automation.Provider.IRawElementProviderSimple,System.Windows.Automation.AutomationEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RaiseAutomationEvent (eventId As AutomationEvent, provider As IRawElementProviderSimple, e As AutomationEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RaiseAutomationEvent(System::Windows::Automation::AutomationEvent ^ eventId, System::Windows::Automation::Provider::IRawElementProviderSimple ^ provider, System::Windows::Automation::AutomationEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="static member RaiseAutomationEvent : System.Windows.Automation.AutomationEvent * System.Windows.Automation.Provider.IRawElementProviderSimple * System.Windows.Automation.AutomationEventArgs -&gt; unit" Usage="System.Windows.Automation.Provider.AutomationInteropProvider.RaiseAutomationEvent (eventId, provider, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventId" Type="System.Windows.Automation.AutomationEvent" />
        <Parameter Name="provider" Type="System.Windows.Automation.Provider.IRawElementProviderSimple" />
        <Parameter Name="e" Type="System.Windows.Automation.AutomationEventArgs" />
      </Parameters>
      <Docs>
        <param name="eventId">O identificador de evento.</param>
        <param name="provider">O elemento associado ao evento.</param>
        <param name="e">Informações sobre o evento.</param>
        <summary>Gera um evento padrão ou um evento personalizado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Os eventos padrão não devem ser gerados apenas por uma implementação do padrão. Por exemplo, um <xref:System.Windows.Automation.InvokePatternIdentifiers.InvokedEvent> deve ser acionado sempre que o controle é invocado, por meio do <xref:System.Windows.Automation.InvokePattern.Invoke%2A> ou por meio do teclado ou mouse. Dessa forma, os clientes podem ser informados sobre eventos do sistema.  
  
   
  
## Examples  
 [!code-csharp[UIAFragmentProvider_snip#122](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAFragmentProvider_snip/CSharp/ListFragment.cs#122)]
 [!code-vb[UIAFragmentProvider_snip#122](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAFragmentProvider_snip/VisualBasic/ListFragment.vb#122)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseAutomationPropertyChangedEvent">
      <MemberSignature Language="C#" Value="public static void RaiseAutomationPropertyChangedEvent (System.Windows.Automation.Provider.IRawElementProviderSimple element, System.Windows.Automation.AutomationPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RaiseAutomationPropertyChangedEvent(class System.Windows.Automation.Provider.IRawElementProviderSimple element, class System.Windows.Automation.AutomationPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.AutomationInteropProvider.RaiseAutomationPropertyChangedEvent(System.Windows.Automation.Provider.IRawElementProviderSimple,System.Windows.Automation.AutomationPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RaiseAutomationPropertyChangedEvent (element As IRawElementProviderSimple, e As AutomationPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RaiseAutomationPropertyChangedEvent(System::Windows::Automation::Provider::IRawElementProviderSimple ^ element, System::Windows::Automation::AutomationPropertyChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="static member RaiseAutomationPropertyChangedEvent : System.Windows.Automation.Provider.IRawElementProviderSimple * System.Windows.Automation.AutomationPropertyChangedEventArgs -&gt; unit" Usage="System.Windows.Automation.Provider.AutomationInteropProvider.RaiseAutomationPropertyChangedEvent (element, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.Automation.Provider.IRawElementProviderSimple" />
        <Parameter Name="e" Type="System.Windows.Automation.AutomationPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="element">O elemento associado ao evento.</param>
        <param name="e">Informações sobre o evento.</param>
        <summary>Gera um evento quando uma propriedade [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] foi alterada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[UIAFragmentProvider_snip#123](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAFragmentProvider_snip/CSharp/ListFragment.cs#123)]
 [!code-vb[UIAFragmentProvider_snip#123](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAFragmentProvider_snip/VisualBasic/ListFragment.vb#123)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseStructureChangedEvent">
      <MemberSignature Language="C#" Value="public static void RaiseStructureChangedEvent (System.Windows.Automation.Provider.IRawElementProviderSimple provider, System.Windows.Automation.StructureChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RaiseStructureChangedEvent(class System.Windows.Automation.Provider.IRawElementProviderSimple provider, class System.Windows.Automation.StructureChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.AutomationInteropProvider.RaiseStructureChangedEvent(System.Windows.Automation.Provider.IRawElementProviderSimple,System.Windows.Automation.StructureChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RaiseStructureChangedEvent (provider As IRawElementProviderSimple, e As StructureChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RaiseStructureChangedEvent(System::Windows::Automation::Provider::IRawElementProviderSimple ^ provider, System::Windows::Automation::StructureChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="static member RaiseStructureChangedEvent : System.Windows.Automation.Provider.IRawElementProviderSimple * System.Windows.Automation.StructureChangedEventArgs -&gt; unit" Usage="System.Windows.Automation.Provider.AutomationInteropProvider.RaiseStructureChangedEvent (provider, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.Windows.Automation.Provider.IRawElementProviderSimple" />
        <Parameter Name="e" Type="System.Windows.Automation.StructureChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="provider">O elemento associado ao evento.</param>
        <param name="e">Informações sobre o evento.</param>
        <summary>Gera um evento quando a árvore [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] foi alterada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um exemplo de uma alteração na estrutura de árvore está elementos filho que está sendo adicionados ao ou removido de uma caixa de listagem, ou que está sendo expandido ou recolhido em uma exibição de árvore.  
  
 Quando um elemento filho é removido, o identificador de tempo de execução do elemento ou de seu contêiner, é passado para o <xref:System.Windows.Automation.StructureChangedEventArgs> construtor. Na versão atual do [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)], no entanto, não há nenhuma maneira fácil para uma instância de um provedor para descobrir seu identificador de tempo de execução. O <xref:System.Windows.Automation.Provider.IRawElementProviderFragment.GetRuntimeId%2A> método normalmente retorna uma matriz que contém <xref:System.Windows.Automation.Provider.AutomationInteropProvider.AppendRuntimeId>, um número mágico que instrui o [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] sistema para criar um identificador exclusivo para cada instância do controle. O valor bruto fornecido pelo <xref:System.Windows.Automation.Provider.IRawElementProviderFragment.GetRuntimeId%2A> não deve ser usado em eventos, porque ele não faz sentido para os clientes e não pode ser usado para identificar uma instância específica.  
  
 Devido a essa limitação, os eventos do tipo <xref:System.Windows.Automation.StructureChangeType.ChildAdded> e <xref:System.Windows.Automation.StructureChangeType.ChildRemoved> não são muito úteis. Como alternativa, sempre use <xref:System.Windows.Automation.StructureChangeType.ChildrenBulkAdded> e <xref:System.Windows.Automation.StructureChangeType.ChildrenBulkRemoved>, passando 0 como o identificador de tempo de execução. Não é possível usar `null`, pois isso irá gerar uma exceção. Os clientes serão notificados de que uma alteração foi feita no contêiner (identificado pela `sender` parâmetro passado para o <xref:System.Windows.Automation.StructureChangedEventHandler>), sem aviso específico de quais filhos foram adicionados ou removidos.  
  
   
  
## Examples  
 O exemplo a seguir mostra como disparar um evento quando filhos são adicionados ao ou removido de uma caixa de listagem personalizado.  
  
 [!code-csharp[FragmentProvider#101](~/samples/snippets/csharp/VS_Snippets_Wpf/FragmentProvider/CSharp/ListFragment.cs#101)]
 [!code-vb[FragmentProvider#101](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FragmentProvider/VisualBasic/ListFragment.vb#101)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Automation.StructureChangedEventArgs.#ctor(System.Windows.Automation.StructureChangeType,System.Int32[])" />
      </Docs>
    </Member>
    <Member MemberName="ReturnRawElementProvider">
      <MemberSignature Language="C#" Value="public static IntPtr ReturnRawElementProvider (IntPtr hwnd, IntPtr wParam, IntPtr lParam, System.Windows.Automation.Provider.IRawElementProviderSimple el);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int ReturnRawElementProvider(native int hwnd, native int wParam, native int lParam, class System.Windows.Automation.Provider.IRawElementProviderSimple el) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.AutomationInteropProvider.ReturnRawElementProvider(System.IntPtr,System.IntPtr,System.IntPtr,System.Windows.Automation.Provider.IRawElementProviderSimple)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReturnRawElementProvider (hwnd As IntPtr, wParam As IntPtr, lParam As IntPtr, el As IRawElementProviderSimple) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr ReturnRawElementProvider(IntPtr hwnd, IntPtr wParam, IntPtr lParam, System::Windows::Automation::Provider::IRawElementProviderSimple ^ el);" />
      <MemberSignature Language="F#" Value="static member ReturnRawElementProvider : nativeint * nativeint * nativeint * System.Windows.Automation.Provider.IRawElementProviderSimple -&gt; nativeint" Usage="System.Windows.Automation.Provider.AutomationInteropProvider.ReturnRawElementProvider (hwnd, wParam, lParam, el)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hwnd" Type="System.IntPtr" />
        <Parameter Name="wParam" Type="System.IntPtr" />
        <Parameter Name="lParam" Type="System.IntPtr" />
        <Parameter Name="el" Type="System.Windows.Automation.Provider.IRawElementProviderSimple" />
      </Parameters>
      <Docs>
        <param name="hwnd">O identificador da janela do elemento.</param>
        <param name="wParam">O membro <see langword="wParam" /> da mensagem <see langword="WM_GETOBJECT" />.</param>
        <param name="lParam">O membro <see langword="lParam" /> da mensagem <see langword="WM_GETOBJECT" />.</param>
        <param name="el">O provedor de Automação da Interface do Usuário do elemento.</param>
        <summary>Retorna o provedor de Automação da Interface do Usuário para um elemento em resposta a uma mensagem <see langword="WM_GETOBJECT" />.</summary>
        <returns>Um ponteiro para dados que devem ser atribuídos a <see cref="P:System.Windows.Forms.Message.Result" /> antes de transmitir a mensagem para o procedimento da janela base.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[UIAFragmentProvider_snip#116](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAFragmentProvider_snip/CSharp/ListFragment.cs#116)]
 [!code-vb[UIAFragmentProvider_snip#116](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAFragmentProvider_snip/VisualBasic/ListFragment.vb#116)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RootObjectId">
      <MemberSignature Language="C#" Value="public const int RootObjectId = -25;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 RootObjectId = (-25)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.Provider.AutomationInteropProvider.RootObjectId" />
      <MemberSignature Language="VB.NET" Value="Public Const RootObjectId As Integer  = -25" />
      <MemberSignature Language="C++ CLI" Value="public: int RootObjectId = -25;" />
      <MemberSignature Language="F#" Value="val mutable RootObjectId : int" Usage="System.Windows.Automation.Provider.AutomationInteropProvider.RootObjectId" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>-25</MemberValue>
      <Docs>
        <summary>Contém um valor usado membro <see langword="lParam" /> de uma mensagem <see langword="WM_GETOBJECT" />, indicando que o servidor deve retornar uma referência ao provedor de elemento bruto raiz.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>