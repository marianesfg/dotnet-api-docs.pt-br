<Type Name="VirtualPathProvider" FullName="System.Web.Hosting.VirtualPathProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e2640aa878f7b33bfcd1f27557d40bf6cedb6016" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36600281" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class VirtualPathProvider : MarshalByRefObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit VirtualPathProvider extends System.MarshalByRefObject" />
  <TypeSignature Language="DocId" Value="T:System.Web.Hosting.VirtualPathProvider" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class VirtualPathProvider&#xA;Inherits MarshalByRefObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class VirtualPathProvider abstract : MarshalByRefObject" />
  <TypeSignature Language="F#" Value="type VirtualPathProvider = class&#xA;    inherit MarshalByRefObject" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornece um conjunto de métodos que permitem que um aplicativo Web recupere recursos de um sistema de arquivos virtual.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.Hosting.VirtualPathProvider> classe fornece um conjunto de métodos para implementar um sistema de arquivos virtual para um aplicativo Web. Em um sistema de arquivos virtual, os arquivos e diretórios são gerenciados por um repositório de dados diferentes do sistema de arquivo fornecido pelo sistema operacional do servidor. Por exemplo, você pode usar um sistema de arquivos virtual para armazenar conteúdo em um banco de dados do SQL Server.  
  
 Você pode armazenar qualquer arquivo que é processado na solicitação em um sistema de arquivos virtual. Isso inclui:  
  
-   Páginas ASP.NET, páginas mestras, controles de usuário e outros objetos.  
  
-   Páginas da Web padrão com extensões como. htm e. jpg.  
  
-   Qualquer extensão personalizada é mapeado para um <xref:System.Web.Compilation.BuildProvider> instância.  
  
-   Qualquer tema nomeado a `App_Theme` pasta.  
  
 Você não pode armazenar arquivos que geram os assemblies de nível de aplicativo em um sistema de arquivos virtual ou pastas de aplicativo do ASP.NET. Isso inclui:  
  
-   O arquivo global. asax.  
  
-   Arquivos Web. config.  
  
-   Arquivos de dados de mapa usados do site o <xref:System.Web.XmlSiteMapProvider>.  
  
-   Diretórios que contêm assemblies de aplicativo ou que gerar assemblies de aplicativo: `Bin`, `App_Code`, `App_GlobalResources`, qualquer `App_LocalResources`.  
  
-   A pasta de dados de aplicativo, `App_Data`.  
  
> [!NOTE]
>  Se um site da Web é pré-compilado para implantação, o conteúdo fornecido por um <xref:System.Web.Hosting.VirtualPathProvider> instância não está compilada e não <xref:System.Web.Hosting.VirtualPathProvider> instâncias são usadas pelo site pré-compilado.  
  
## <a name="registering-a-virtualpathprovider"></a>Registrando um VirtualPathProvider  
 Um personalizado <xref:System.Web.Hosting.VirtualPathProvider> instância deve ser registrada com o sistema de compilação do ASP.NET usando o <xref:System.Web.Hosting.HostingEnvironment.RegisterVirtualPathProvider%2A?displayProperty=nameWithType> método antes de qualquer compilação ou a análise da página é executada pelo aplicativo da Web.  
  
 Normalmente, um <xref:System.Web.Hosting.VirtualPathProvider> instância é registrada em um `AppInitialize` método definido no `App_Code` diretório, ou durante o `Application_Start` evento no `Global.asax` arquivo. Para obter um exemplo de registro de um <xref:System.Web.Hosting.VirtualPathProvider> instância em um `AppInitialize` método, consulte a seção de exemplo.  
  
 Você pode registrar um <xref:System.Web.Hosting.VirtualPathProvider> instância durante a outros eventos, mas páginas compilado e armazenado em cache antes do <xref:System.Web.Hosting.VirtualPathProvider> instância é registrada não serão invalidados, mesmo se o novo <xref:System.Web.Hosting.VirtualPathProvider> instância agora ofereceria a fonte para o anteriormente página compilada.  
  
   
  
## Examples  
 O exemplo de código a seguir é um <xref:System.Web.Hosting.VirtualPathProvider> implementação da classe que cria um sistema de arquivos virtual usando informações armazenadas em um <xref:System.Data.DataSet> objeto. O exemplo de código funciona com os exemplos de código para o <xref:System.Web.Hosting.VirtualFile> e <xref:System.Web.Hosting.VirtualDirectory> classes para fornecer recursos virtuais de dados de um repositório que são carregados em um <xref:System.Data.DataSet> objeto.  
  
 Este exemplo tem quatro partes: o <xref:System.Web.Hosting.VirtualPathProvider> implementação da classe, um arquivo de dados XML usados para popular o <xref:System.Data.DataSet> objeto, um `AppStart` objeto que contém um `AppInitialize` método usado para registrar o <xref:System.Web.Hosting.VirtualPathProvider> classe com a compilação sistema e uma página ASP.NET que fornece links para os arquivos virtuais.  
  
 Para usar esse código de exemplo em um aplicativo, siga estas etapas.  
  
1.  Crie um aplicativo de exemplo em seu servidor Web.  
  
2.  Copie o código-fonte para personalizado <xref:System.Web.Hosting.VirtualPathProvider> objeto (veja abaixo) em um arquivo do aplicativo `App_Code` directory.  
  
3.  Copie o código-fonte para personalizado <xref:System.Web.Hosting.VirtualDirectory> objeto (consulte a seção exemplo o <xref:System.Web.Hosting.VirtualDirectory> tópico de visão geral de classe) em um arquivo do aplicativo `App_Code` directory.  
  
4.  Copie o código-fonte para personalizado <xref:System.Web.Hosting.VirtualFile> objeto (consulte a seção exemplo o <xref:System.Web.Hosting.VirtualFile> tópico de visão geral de classe) em um arquivo do aplicativo `App_Code` directory.  
  
5.  Copie o código-fonte para o `AppStart` objeto (veja abaixo) em um arquivo do aplicativo `App_Code` directory.  
  
6.  Copie os dados XML (veja abaixo) para um arquivo chamado `XMLData.xml` em um arquivo do aplicativo `App_Data` directory.  
  
7.  Copie o `default.aspx` arquivo (veja abaixo) no diretório raiz do aplicativo de exemplo. Usar um navegador da Web para abrir o `default.aspx` de arquivo e, em seguida, clique nos links na página para ver o conteúdo dos arquivos virtuais.  
  
 O primeiro exemplo é um personalizado <xref:System.Web.Hosting.VirtualPathProvider> classe. O <xref:System.Web.Hosting.VirtualPathProvider.DirectoryExists%2A> e <xref:System.Web.Hosting.VirtualPathProvider.FileExists%2A> métodos são substituídos para indicar se um diretório solicitado está presente no sistema de arquivos virtual. O <xref:System.Web.Hosting.VirtualPathProvider.GetDirectory%2A> e <xref:System.Web.Hosting.VirtualPathProvider.GetFile%2A> métodos são substituídos para retornar personalizado <xref:System.Web.Hosting.VirtualDirectory> e <xref:System.Web.Hosting.VirtualFile> instâncias que contém informações do sistema de arquivos virtual.  
  
 A classe também fornece um `GetVirtualData` método usado pelo <xref:System.Web.Hosting.VirtualDirectory> e <xref:System.Web.Hosting.VirtualFile> classes para acessar o <xref:System.Data.DataSet> objeto que contém os dados do sistema de arquivos virtual. Em uma implementação de produção, esse método normalmente poderia ser implementado em um objeto comercial responsável para interagir com o repositório de dados.  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#20](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SamplePathProvider.cs#20)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#20](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SamplePathProvider.vb#20)]  
  
 O segundo exemplo é o arquivo de dados XML usado para popular o <xref:System.Data.DataSet> objeto retornado por personalizado <xref:System.Web.Hosting.VirtualPathProvider> objeto. Esses dados XML são usados para demonstrar o uso de <xref:System.Web.Hosting.VirtualPathProvider>, <xref:System.Web.Hosting.VirtualDirectory>, e <xref:System.Web.Hosting.VirtualFile> objetos para recuperar dados de dados externos e não se destina para representar um repositório de dados de qualidade de produção.  
  
```  
<?xml version="1.0" encoding="utf-8" ?>  
  <resource type="dir"   
    path="/vrDir"   
    parentPath=""   
    content="">  
    <resource type="file"   
      path="/vrDir/Level1FileA.vrf"  
      parentPath="/vrDir"   
      content="This is the content of file Level1FileA.">  
    </resource>  
    <resource type="file"   
      path="/vrDir/Level1FileB.vrf"  
      parentPath="/vrDir"   
      content="This is the content of file Level1FileB.">  
    </resource>  
    <resource type="dir"   
      path="/vrDir/Level2DirA"   
      parentPath="/vrDir"   
      content="">  
    <resource type="file"   
      path="/vrDir/Level2DirA/Level2FileA.vrf"   
      parentPath="/vrDir/Level2DirA"   
      content="This is the content of file Level2FileA.">  
    </resource>  
    <resource type="file"   
      path="/vrDir/Level2DirA/Level2FileB.vrf"  
      parentPath="/vrDir/Level2DirA"   
      content="This is the content of file Level2FileB.">  
    </resource>  
  </resource>  
  <resource type="dir"   
    path="/vrDir/Level2DirB"   
    parentPath="/vrDir"   
    content="">  
    <resource type="file"   
      path="/vrDir/Level2DirB/Level2FileA.vrf"   
      parentPath="/vrDir/Level2DirB"   
      content="This is the content of file Level2FileA.">  
    </resource>  
    <resource type="file"   
      path="/vrDir/Level2DirB/Level2FileB.vrf"  
      parentPath="/vrDir/Level2DirB"   
      content="This is the content of file Level2FileB.">  
    </resource>  
  </resource>  
</resource>  
```  
  
 O terceiro exemplo fornece uma `AppStart` objeto que contém um `AppInitialize` método. Esse método é chamado durante a inicialização de um aplicativo ASP.NET para executar qualquer inicialização personalizada necessária. Nesse caso, ele registra personalizado <xref:System.Web.Hosting.VirtualPathProvider> sistema de compilação do objeto com o ASP.NET.  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#10](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/AppStart.cs#10)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/AppStart.vb#10)]  
  
 O último exemplo é uma página ASP.NET que contém links para os arquivos virtuais contidos no sistema de arquivos virtual.  
  
 [!code-aspx-csharp[System.Web.Hosting.VirtualPathProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.Hosting.VirtualPathProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/Default.aspx#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Ao herdar de <see cref="T:System.Web.Hosting.VirtualPathProvider" />, você deve substituir os seguintes membros:- <see cref="M:System.Web.Hosting.VirtualPathProvider.FileExists(System.String)" />   
  
-    <see cref="M:System.Web.Hosting.VirtualPathProvider.GetFile(System.String)" /> se personalizados <see cref="T:System.Web.Hosting.VirtualPathProvider" /> classe oferece suporte a diretórios no sistema de arquivos virtual, você deve substituir os seguintes membros.  - <see cref="M:System.Web.Hosting.VirtualPathProvider.DirectoryExists(System.String)" />   
  
-    <see cref="M:System.Web.Hosting.VirtualPathProvider.GetDirectory(System.String)" /><block subset="none" type="note"><para> Se seu sistema de arquivos virtual conterá temas para o site da Web (Criando uma máquina virtual <c>App_Themes</c> directory), personalizados <see cref="T:System.Web.Hosting.VirtualPathProvider" /> classe deve oferecer suporte a diretórios.  </para></block>  Um personalizado <see cref="T:System.Web.Hosting.VirtualPathProvider" /> classe funciona com classes derivadas do <see cref="T:System.Web.Hosting.VirtualFile" /> e <see cref="T:System.Web.Hosting.VirtualDirectory" /> classes. Você deve implementar classes derivadas desses tipos para fornecer informações de arquivo e diretório do seu sistema de arquivos virtual. Para obter um exemplo de um personalizado <see cref="T:System.Web.Hosting.VirtualFile" /> implementação, consulte a seção exemplo de <see cref="T:System.Web.Hosting.VirtualFile" /> tópico de visão geral da classe. Para obter um exemplo de um personalizado <see cref="T:System.Web.Hosting.VirtualDirectory" /> implementação, consulte a seção exemplo de <see cref="T:System.Web.Hosting.VirtualDirectory" /> tópico de visão geral da classe.</para>
    </block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected VirtualPathProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; VirtualPathProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa a classe para uso por uma instância de classe herdada. Esse construtor pode ser chamado apenas por uma classe herdada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ao substituir o <xref:System.Web.Hosting.VirtualPathProvider.%23ctor%2A> construtor, adiar qualquer inicialização que deve ocorrer após o <xref:System.Web.Hosting.VirtualPathProvider> o objeto foi registrado para o <xref:System.Web.Hosting.VirtualPathProvider.Initialize%2A> método.  
  
   
  
## Examples  
 O exemplo de código a seguir é uma implementação de <xref:System.Web.Hosting.VirtualPathProvider.%23ctor%2A> construtor que inicializa um personalizado <xref:System.Web.Hosting.VirtualPathProvider> classe. Para o necessário para executar o exemplo de código completo, consulte a seção exemplo de <xref:System.Web.Hosting.VirtualPathProvider> tópico de visão geral da classe.  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#25](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SamplePathProvider.cs#25)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#25](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SamplePathProvider.vb#25)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CombineVirtualPaths">
      <MemberSignature Language="C#" Value="public virtual string CombineVirtualPaths (string basePath, string relativePath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string CombineVirtualPaths(string basePath, string relativePath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.CombineVirtualPaths(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CombineVirtualPaths (basePath As String, relativePath As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ CombineVirtualPaths(System::String ^ basePath, System::String ^ relativePath);" />
      <MemberSignature Language="F#" Value="abstract member CombineVirtualPaths : string * string -&gt; string&#xA;override this.CombineVirtualPaths : string * string -&gt; string" Usage="virtualPathProvider.CombineVirtualPaths (basePath, relativePath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="basePath" Type="System.String" />
        <Parameter Name="relativePath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="basePath">O caminho base para o aplicativo.</param>
        <param name="relativePath">O caminho para o recurso virtual, relativo ao caminho base.</param>
        <summary>Combina um caminho base com um caminho relativo para retornar um caminho completo para um recurso virtual.</summary>
        <returns>O caminho completo para um recurso virtual.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Web.Hosting.VirtualPathProvider.CombineVirtualPaths%2A> método para inspecionar o conteúdo de um caminho relativo para um recurso virtual e executar as modificações necessárias.  
  
 A implementação padrão combina o `basePath` e `relativePath` parâmetros de acordo com o processamento de caminho padrão do ASP.NET.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Se você substituir a implementação padrão da <see cref="M:System.Web.Hosting.VirtualPathProvider.CombineVirtualPaths(System.String,System.String)" /> método, é necessário para converter qualquer sintaxe especial com o <paramref name="relativePath" /> parâmetro para um caminho virtual válido. Você é responsável pela sintaxe de verificação de validação de caminho e tratamento de entrada malformada, bem como casos de borda para entrada bem formado.  Na maioria dos casos não será necessário substituir o padrão <see cref="M:System.Web.Hosting.VirtualPathProvider.CombineVirtualPaths(System.String,System.String)" /> método. No entanto, se você precisar modificar o caminho, é recomendável que você limite o <see cref="M:System.Web.Hosting.VirtualPathProvider.CombineVirtualPaths(System.String,System.String)" /> implementação à modificação de tokens específicos ao provedor de caminho virtual a <paramref name="relativeUrl" /> parâmetro e, em seguida, chame a implementação base para executar normal Processamento de caminho do ASP.NET</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="DirectoryExists">
      <MemberSignature Language="C#" Value="public virtual bool DirectoryExists (string virtualDir);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DirectoryExists(string virtualDir) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.DirectoryExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DirectoryExists (virtualDir As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool DirectoryExists(System::String ^ virtualDir);" />
      <MemberSignature Language="F#" Value="abstract member DirectoryExists : string -&gt; bool&#xA;override this.DirectoryExists : string -&gt; bool" Usage="virtualPathProvider.DirectoryExists virtualDir" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualDir" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualDir">O caminho para o diretório virtual.</param>
        <summary>Obtém um valor que indica se um diretório existe no sistema de arquivos virtual.</summary>
        <returns>
          <see langword="true" /> se o diretório existir no sistema de arquivos virtual; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Substituir o <xref:System.Web.Hosting.VirtualPathProvider.DirectoryExists%2A> método para indicar para o sistema de compilação que o recurso representado por `virtualDir` existe no sistema de arquivos virtual fornecido por esse <xref:System.Web.Hosting.VirtualPathProvider> instância.  
  
 Se seu personalizado <xref:System.Web.Hosting.VirtualPathProvider> classe não oferece suporte a diretórios, o <xref:System.Web.Hosting.VirtualPathProvider.DirectoryExists%2A> método deve retornar `false`.  
  
> [!NOTE]
>  Se o seu sistema de arquivos virtual conterá temas para o site da Web (Criando uma máquina virtual `App_Themes` diretório), personalizados <xref:System.Web.Hosting.VirtualPathProvider> classe deve oferecer suporte a diretórios.  
  
   
  
## Examples  
 O exemplo de código a seguir é uma implementação de <xref:System.Web.Hosting.VirtualPathProvider.DirectoryExists%2A> método em um personalizado <xref:System.Web.Hosting.VirtualPathProvider> classe. Para o necessário para executar o exemplo de código completo, consulte a seção exemplo de <xref:System.Web.Hosting.VirtualPathProvider> tópico de visão geral da classe.  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#22](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SamplePathProvider.cs#22)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#22](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SamplePathProvider.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FileExists">
      <MemberSignature Language="C#" Value="public virtual bool FileExists (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool FileExists(string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.FileExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FileExists (virtualPath As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool FileExists(System::String ^ virtualPath);" />
      <MemberSignature Language="F#" Value="abstract member FileExists : string -&gt; bool&#xA;override this.FileExists : string -&gt; bool" Usage="virtualPathProvider.FileExists virtualPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">O caminho para o arquivo virtual.</param>
        <summary>Obtém um valor que indica se um arquivo existe no sistema de arquivos virtual.</summary>
        <returns>
          <see langword="true" /> se o arquivo existir no sistema de arquivos virtual; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Substituir o <xref:System.Web.Hosting.VirtualPathProvider.FileExists%2A> método para indicar para o sistema de compilação que o recurso representado por `virtualPath` existe no sistema de arquivos virtual fornecido por esse <xref:System.Web.Hosting.VirtualPathProvider> instância.  
  
   
  
## Examples  
 O exemplo de código a seguir é uma implementação de <xref:System.Web.Hosting.VirtualPathProvider.FileExists%2A> método em um personalizado <xref:System.Web.Hosting.VirtualPathProvider> classe. Para o necessário para executar o exemplo de código completo, consulte a seção exemplo de <xref:System.Web.Hosting.VirtualPathProvider> tópico de visão geral da classe.  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#21](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SamplePathProvider.cs#21)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#21](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SamplePathProvider.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCacheDependency">
      <MemberSignature Language="C#" Value="public virtual System.Web.Caching.CacheDependency GetCacheDependency (string virtualPath, System.Collections.IEnumerable virtualPathDependencies, DateTime utcStart);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.Caching.CacheDependency GetCacheDependency(string virtualPath, class System.Collections.IEnumerable virtualPathDependencies, valuetype System.DateTime utcStart) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.GetCacheDependency(System.String,System.Collections.IEnumerable,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCacheDependency (virtualPath As String, virtualPathDependencies As IEnumerable, utcStart As DateTime) As CacheDependency" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::Caching::CacheDependency ^ GetCacheDependency(System::String ^ virtualPath, System::Collections::IEnumerable ^ virtualPathDependencies, DateTime utcStart);" />
      <MemberSignature Language="F#" Value="abstract member GetCacheDependency : string * System.Collections.IEnumerable * DateTime -&gt; System.Web.Caching.CacheDependency&#xA;override this.GetCacheDependency : string * System.Collections.IEnumerable * DateTime -&gt; System.Web.Caching.CacheDependency" Usage="virtualPathProvider.GetCacheDependency (virtualPath, virtualPathDependencies, utcStart)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Caching.CacheDependency</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
        <Parameter Name="virtualPathDependencies" Type="System.Collections.IEnumerable" />
        <Parameter Name="utcStart" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="virtualPath">O caminho para o recurso virtual primário.</param>
        <param name="virtualPathDependencies">Uma matriz de caminhos para outros recursos exigidos pelo recurso virtual primário.</param>
        <param name="utcStart">A hora UTC em que os recursos virtuais foram lidos.</param>
        <summary>Cria uma dependência de cache com base nos caminhos virtuais especificados.</summary>
        <returns>Um objeto <see cref="T:System.Web.Caching.CacheDependency" /> para os recursos virtuais especificados.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A implementação padrão da <xref:System.Web.Hosting.VirtualPathProvider.GetCacheDependency%2A> método retornará `null`. Para recursos virtuais de cache para uso posterior é necessário substituir o <xref:System.Web.Hosting.VirtualPathProvider.GetCacheDependency%2A> método ou o <xref:System.Web.Hosting.VirtualPathProvider.GetFileHash%2A> método.  
  
   
  
## Examples  
 O seguinte código exemplo implementa o <xref:System.Web.Hosting.VirtualPathProvider.GetCacheDependency%2A> método para um personalizado <xref:System.Web.Hosting.VirtualPathProvider> classe. Para o necessário para executar o exemplo de código completo, consulte a seção exemplo de <xref:System.Web.Hosting.VirtualPathProvider> tópico de visão geral da classe.  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#28](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SamplePathProvider.cs#28)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#28](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SamplePathProvider.vb#28)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCacheKey">
      <MemberSignature Language="C#" Value="public virtual string GetCacheKey (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetCacheKey(string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.GetCacheKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCacheKey (virtualPath As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetCacheKey(System::String ^ virtualPath);" />
      <MemberSignature Language="F#" Value="abstract member GetCacheKey : string -&gt; string&#xA;override this.GetCacheKey : string -&gt; string" Usage="virtualPathProvider.GetCacheKey virtualPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">O caminho para o recurso virtual.</param>
        <summary>Retorna uma chave de cache a ser usada para o caminho virtual especificado.</summary>
        <returns>Uma chave de cache para o recurso virtual especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Web.Hosting.VirtualPathProvider.GetCacheKey%2A> método para fornecer uma chave de cache personalizada para recursos virtuais. Se você não substituir o <xref:System.Web.Hosting.VirtualPathProvider.GetCacheKey%2A> método, o caminho virtual é usado para a chave de cache.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Apenas substituir o padrão <see cref="M:System.Web.Hosting.VirtualPathProvider.GetCacheKey(System.String)" /> método se criar uma chave de cache com base no caminho virtual não funcionará para seu aplicativo.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetDirectory">
      <MemberSignature Language="C#" Value="public virtual System.Web.Hosting.VirtualDirectory GetDirectory (string virtualDir);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.Hosting.VirtualDirectory GetDirectory(string virtualDir) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.GetDirectory(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDirectory (virtualDir As String) As VirtualDirectory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::Hosting::VirtualDirectory ^ GetDirectory(System::String ^ virtualDir);" />
      <MemberSignature Language="F#" Value="abstract member GetDirectory : string -&gt; System.Web.Hosting.VirtualDirectory&#xA;override this.GetDirectory : string -&gt; System.Web.Hosting.VirtualDirectory" Usage="virtualPathProvider.GetDirectory virtualDir" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Hosting.VirtualDirectory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualDir" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualDir">O caminho para o diretório virtual.</param>
        <summary>Obtém um diretório virtual do sistema de arquivos virtual.</summary>
        <returns>Um descendente da classe <see cref="T:System.Web.Hosting.VirtualDirectory" /> que representa um diretório no sistema de arquivos virtual.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.Hosting.VirtualPathProvider.GetDirectory%2A> método retorna um descendente do <xref:System.Web.Hosting.VirtualDirectory> classe que contém os arquivos e diretórios contidos no diretório especificado no `virtualDir` parâmetro.  
  
 Se seu personalizado <xref:System.Web.Hosting.VirtualPathProvider> classe não oferece suporte a diretórios, o <xref:System.Web.Hosting.VirtualPathProvider.GetDirectory%2A> método deve retornar `null`.  
  
> [!NOTE]
>  Se o seu sistema de arquivos virtual conterá temas para o site da Web (Criando uma máquina virtual `App_Themes` diretório), personalizados <xref:System.Web.Hosting.VirtualPathProvider> classe deve oferecer suporte a diretórios.  
  
   
  
## Examples  
 O exemplo de código a seguir é uma implementação de <xref:System.Web.Hosting.VirtualPathProvider.GetDirectory%2A> método em um personalizado <xref:System.Web.Hosting.VirtualPathProvider> classe. Para o necessário para executar o exemplo de código completo, consulte a seção exemplo de <xref:System.Web.Hosting.VirtualPathProvider> tópico de visão geral da classe.  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#24](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SamplePathProvider.cs#24)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#24](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SamplePathProvider.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFile">
      <MemberSignature Language="C#" Value="public virtual System.Web.Hosting.VirtualFile GetFile (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.Hosting.VirtualFile GetFile(string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.GetFile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFile (virtualPath As String) As VirtualFile" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::Hosting::VirtualFile ^ GetFile(System::String ^ virtualPath);" />
      <MemberSignature Language="F#" Value="abstract member GetFile : string -&gt; System.Web.Hosting.VirtualFile&#xA;override this.GetFile : string -&gt; System.Web.Hosting.VirtualFile" Usage="virtualPathProvider.GetFile virtualPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Hosting.VirtualFile</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">O caminho para o arquivo virtual.</param>
        <summary>Obtém um arquivo virtual do sistema de arquivos virtual.</summary>
        <returns>Um descendente da classe <see cref="T:System.Web.Hosting.VirtualFile" /> que representa um arquivo no sistema de arquivos virtual.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.Hosting.VirtualPathProvider.GetFile%2A> método retorna um descendente do <xref:System.Web.Hosting.VirtualFile> a classe que representa o arquivo especificado pelo `virtualPath` parâmetro.  
  
   
  
## Examples  
 O exemplo de código a seguir é uma implementação de <xref:System.Web.Hosting.VirtualPathProvider.GetFile%2A> método em um personalizado <xref:System.Web.Hosting.VirtualPathProvider> classe. Para o necessário para executar o exemplo de código completo, consulte a seção exemplo de <xref:System.Web.Hosting.VirtualPathProvider> tópico de visão geral da classe.  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#23](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SamplePathProvider.cs#23)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#23](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SamplePathProvider.vb#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFileHash">
      <MemberSignature Language="C#" Value="public virtual string GetFileHash (string virtualPath, System.Collections.IEnumerable virtualPathDependencies);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetFileHash(string virtualPath, class System.Collections.IEnumerable virtualPathDependencies) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.GetFileHash(System.String,System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFileHash (virtualPath As String, virtualPathDependencies As IEnumerable) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetFileHash(System::String ^ virtualPath, System::Collections::IEnumerable ^ virtualPathDependencies);" />
      <MemberSignature Language="F#" Value="abstract member GetFileHash : string * System.Collections.IEnumerable -&gt; string&#xA;override this.GetFileHash : string * System.Collections.IEnumerable -&gt; string" Usage="virtualPathProvider.GetFileHash (virtualPath, virtualPathDependencies)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
        <Parameter Name="virtualPathDependencies" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="virtualPath">O caminho para o recurso virtual primário.</param>
        <param name="virtualPathDependencies">Uma matriz de caminhos para outros recursos exigidos pelo recurso virtual primário.</param>
        <summary>Retorna um hash de caminhos virtuais especificados.</summary>
        <returns>Um hash de caminhos virtuais especificados.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Web.Hosting.VirtualPathProvider.GetFileHash%2A> método para fornecer um hash das dependências para um recurso do sistema de arquivos virtual.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="protected virtual void Initialize ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Initialize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.Initialize" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Initialize ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Initialize();" />
      <MemberSignature Language="F#" Value="abstract member Initialize : unit -&gt; unit&#xA;override this.Initialize : unit -&gt; unit" Usage="virtualPathProvider.Initialize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Inicializa a instância <see cref="T:System.Web.Hosting.VirtualPathProvider" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.Hosting.VirtualPathProvider.Initialize%2A> método é chamado depois que o provedor está registrado com o sistema de compilação do ASP.NET. O <xref:System.Web.Hosting.VirtualPathProvider.Initialize%2A> método é usado para fornecer qualquer inicialização necessária após a <xref:System.Web.Hosting.VirtualPathProvider> instância é colocada no ambiente ocupa o aplicativo.  
  
   
  
## Examples  
 O exemplo de código a seguir é uma implementação de <xref:System.Web.Hosting.VirtualPathProvider.Initialize%2A> método que define o caminho para um arquivo de dados do aplicativo de <xref:System.Web.Hosting.HostingEnvironment> instância. Para o necessário para executar o exemplo de código completo, consulte a seção exemplo de <xref:System.Web.Hosting.VirtualPathProvider> tópico de visão geral da classe.  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#26](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SamplePathProvider.cs#26)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#26](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SamplePathProvider.vb#26)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeLifetimeService">
      <MemberSignature Language="C#" Value="public override object InitializeLifetimeService ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object InitializeLifetimeService() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.InitializeLifetimeService" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function InitializeLifetimeService () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ InitializeLifetimeService();" />
      <MemberSignature Language="F#" Value="override this.InitializeLifetimeService : unit -&gt; obj" Usage="virtualPathProvider.InitializeLifetimeService " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Fornece ao objeto <see cref="T:System.Web.Hosting.VirtualPathProvider" /> um tempo de vida infinito ao impedir que uma concessão seja criada.</summary>
        <returns>Sempre <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método substitui o <xref:System.MarshalByRefObject.InitializeLifetimeService%2A> método na sua classe base. Sempre retorna `null` e, portanto, impede que uma concessão de ser criado que limita o <xref:System.Web.Hosting.VirtualPathProvider> tempo de vida do objeto.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenFile">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenFile (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenFile(string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.OpenFile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenFile (virtualPath As String) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Stream ^ OpenFile(System::String ^ virtualPath);" />
      <MemberSignature Language="F#" Value="static member OpenFile : string -&gt; System.IO.Stream" Usage="System.Web.Hosting.VirtualPathProvider.OpenFile virtualPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">O caminho para o arquivo virtual.</param>
        <summary>Retorna um fluxo de um arquivo virtual.</summary>
        <returns>Um objeto <see cref="T:System.IO.Stream" /> somente leitura para o arquivo virtual ou um recurso especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.Hosting.VirtualPathProvider.OpenFile%2A> é um método de conveniência que permite que você obtenha um fluxo de um arquivo virtual sem criar um <xref:System.Web.Hosting.VirtualPathProvider> instância.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Previous">
      <MemberSignature Language="C#" Value="protected internal System.Web.Hosting.VirtualPathProvider Previous { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.Hosting.VirtualPathProvider Previous" />
      <MemberSignature Language="DocId" Value="P:System.Web.Hosting.VirtualPathProvider.Previous" />
      <MemberSignature Language="VB.NET" Value="Protected Friend ReadOnly Property Previous As VirtualPathProvider" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Web::Hosting::VirtualPathProvider ^ Previous { System::Web::Hosting::VirtualPathProvider ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Previous : System.Web.Hosting.VirtualPathProvider" Usage="System.Web.Hosting.VirtualPathProvider.Previous" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Hosting.VirtualPathProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém uma referência a um objeto <see cref="T:System.Web.Hosting.VirtualPathProvider" /> registrado anteriormente no sistema de compilação.</summary>
        <value>A próxima <see cref="T:System.Web.Hosting.VirtualPathProvider" /> objeto no sistema de compilação.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando um <xref:System.Web.Hosting.VirtualPathProvider> objeto é registrado com o sistema de compilação do ASP.NET, ele é adicionado a uma cadeia de fornecedores. Use o <xref:System.Web.Hosting.VirtualPathProvider.Previous%2A> propriedade ao processamento de mão off para a versão anterior <xref:System.Web.Hosting.VirtualPathProvider> na cadeia de objetos se o caminho solicitado não é fornecido por esse <xref:System.Web.Hosting.VirtualPathProvider> instância.  
  
 A cadeia de caminho de provedor sempre termina com o provedor padrão do ASP.NET, que serve de arquivos do sistema de arquivos.  
  
   
  
## Examples  
 O exemplo de código a seguir é uma implementação do <xref:System.Web.Hosting.VirtualPathProvider.GetFile%2A> método. Se o diretório virtual solicitado não começa com a cadeia de caracteres `"/vrdir"`, o método usa o <xref:System.Web.Hosting.VirtualPathProvider.Previous%2A> propriedade para passar a solicitação para o próximo <xref:System.Web.Hosting.VirtualPathProvider> objeto da cadeia. Para o necessário para executar o exemplo de código completo, consulte a seção exemplo de <xref:System.Web.Hosting.VirtualPathProvider> tópico de visão geral da classe.  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#23](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SamplePathProvider.cs#23)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#23](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SamplePathProvider.vb#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>