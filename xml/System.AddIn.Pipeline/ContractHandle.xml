<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ContractHandle.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac55565bfb6f9f3ce8255c0ca1ca8bf3a4c0c2e3bdc.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5565bfb6f9f3ce8255c0ca1ca8bf3a4c0c2e3bdc</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.AddIn.Pipeline.ContractHandle">
          <source>Provides methods that control the lifetime of an add-in.</source>
          <target state="translated">Fornece métodos que controlam o tempo de vida de um suplemento.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AddIn.Pipeline.ContractHandle">
          <source>Because the add-in model provides the ability for add-ins to communicate between application domains and between processes, it cannot rely on the garbage collector to reclaim them.</source>
          <target state="translated">Como o modelo fornece a capacidade para suplementos para se comunicar entre domínios de aplicativo e entre processos, ele não pode contar o coletor de lixo para recuperá-los.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AddIn.Pipeline.ContractHandle">
          <source>This class provides a reference counting mechanism for the add-in by obtaining a lifetime token to its contract.</source>
          <target state="translated">Essa classe fornece uma mecanismo para o suplemento de contagem obtendo um token de tempo de vida para seu contrato de referência.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AddIn.Pipeline.ContractHandle">
          <source>When a <ph id="ph1">&lt;xref:System.AddIn.Pipeline.ContractHandle&gt;</ph> object is constructed, it calls the <ph id="ph2">&lt;xref:System.AddIn.Pipeline.ContractBase.AcquireLifetimeToken%2A&gt;</ph> method on the contract that is passed to the constructor.</source>
          <target state="translated">Quando um <ph id="ph1">&lt;xref:System.AddIn.Pipeline.ContractHandle&gt;</ph> objeto for construído, ele chama o <ph id="ph2">&lt;xref:System.AddIn.Pipeline.ContractBase.AcquireLifetimeToken%2A&gt;</ph> método no contrato que é transmitido ao construtor.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AddIn.Pipeline.ContractHandle">
          <source>When the <ph id="ph1">&lt;xref:System.AddIn.Pipeline.ContractHandle&gt;</ph> object is disposed or finalized, it calls the <ph id="ph2">&lt;xref:System.AddIn.Pipeline.ContractBase.RevokeLifetimeToken%2A&gt;</ph> method on the contract, which removes its hold on the contract.</source>
          <target state="translated">Quando o <ph id="ph1">&lt;xref:System.AddIn.Pipeline.ContractHandle&gt;</ph> objeto é descartado ou finalizado, ele chama o <ph id="ph2">&lt;xref:System.AddIn.Pipeline.ContractBase.RevokeLifetimeToken%2A&gt;</ph> método no contrato, que remove sua retenção no contrato.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AddIn.Pipeline.ContractHandle">
          <source>Adapters implement the contract.</source>
          <target state="translated">Adaptadores de implementam o contrato.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AddIn.Pipeline.ContractHandle">
          <source>The <ph id="ph1">&lt;xref:System.AddIn.Pipeline.ContractHandle&gt;</ph> class is designed to be used in a contract-to-view adapter to help pipeline developers manage the lifetime of the contract that is being adapted.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.AddIn.Pipeline.ContractHandle&gt;</ph> classe foi projetada para ser usado em um adaptador de contrato para exibição para ajudar os desenvolvedores de pipeline a gerenciar o tempo de vida do contrato que está sendo adaptado.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AddIn.Pipeline.ContractHandle">
          <source>Typically, an instance of this class is instantiated during the construction of the adapter class and is stored in an instance field of the adapter.</source>
          <target state="translated">Normalmente, uma instância dessa classe é criada durante a construção da classe de adaptador e é armazenada em um campo de instância do adaptador.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AddIn.Pipeline.ContractHandle">
          <source>When the adapter class is garbage-collected, the <ph id="ph1">&lt;xref:System.AddIn.Pipeline.ContractHandle&gt;</ph> object will also be collected and the <ph id="ph2">&lt;xref:System.AddIn.Pipeline.ContractHandle&gt;</ph> object will revoke the lifetime token on the contract.</source>
          <target state="translated">Quando a classe de adaptador é coletado como lixo, a <ph id="ph1">&lt;xref:System.AddIn.Pipeline.ContractHandle&gt;</ph> objeto também será coletado e <ph id="ph2">&lt;xref:System.AddIn.Pipeline.ContractHandle&gt;</ph> objeto revogará o token de tempo de vida do contrato.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AddIn.Pipeline.ContractHandle">
          <source>It is recommended that your view-to-contract adapters inherit from the <ph id="ph1">&lt;xref:System.AddIn.Pipeline.ContractBase&gt;</ph> class.</source>
          <target state="translated">É recomendável que os adaptadores de contrato de exibição herdam o <ph id="ph1">&lt;xref:System.AddIn.Pipeline.ContractBase&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AddIn.Pipeline.ContractHandle">
          <source>You can then use a default implementation for the members of <ph id="ph1">&lt;xref:System.AddIn.Contract.IContract&gt;</ph>, which means you need to implement only the members of your specific contract.</source>
          <target state="translated">Você pode usar uma implementação padrão para os membros de <ph id="ph1">&lt;xref:System.AddIn.Contract.IContract&gt;</ph>, que significa que você precisa implementar apenas os membros do seu contrato específico.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AddIn.Pipeline.ContractHandle">
          <source>The following example shows how to set the lifetime token handle in a contract-to-view adapter on the add-in side of a pipeline.</source>
          <target state="translated">O exemplo a seguir mostra como definir o identificador de token de tempo de vida de um adaptador de exibição de contrato no lado do suplemento de um pipeline.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.AddIn.Pipeline.ContractHandle.#ctor(System.AddIn.Contract.IContract)">
          <source>The contract to use in the pipeline.</source>
          <target state="translated">O contrato a ser usado no pipeline.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.AddIn.Pipeline.ContractHandle.#ctor(System.AddIn.Contract.IContract)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.AddIn.Pipeline.ContractHandle" /&gt;</ph> class.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.AddIn.Pipeline.ContractHandle" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.AddIn.Pipeline.ContractHandle.#ctor(System.AddIn.Contract.IContract)">
          <source><ph id="ph1">&lt;paramref name="contract" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="contract" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.AddIn.Pipeline.ContractHandle.AppDomainOwner(System.AppDomain)">
          <source>The application domain to check.</source>
          <target state="translated">Um domínio de aplicativo a ser verificado.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.AddIn.Pipeline.ContractHandle.AppDomainOwner(System.AppDomain)">
          <source>Gets the instance of the add-in-side adapter when the application domain was created.</source>
          <target state="translated">Obtém a instância do adaptador no lado do suplemento quando o domínio do aplicativo foi criado.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.AddIn.Pipeline.ContractHandle.AppDomainOwner(System.AppDomain)">
          <source>An <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.IContract" /&gt;</ph> object that represents the owner of the application domain.</source>
          <target state="translated">Um objeto <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.IContract" /&gt;</ph> que representa o proprietário desse domínio do aplicativo.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Pipeline.ContractHandle.AppDomainOwner(System.AppDomain)">
          <source>The add-in-side adapters are typed as <ph id="ph1">&lt;xref:System.AddIn.Contract.IContract&gt;</ph>.</source>
          <target state="translated">Os adaptadores do lado do suplemento são digitados como <ph id="ph1">&lt;xref:System.AddIn.Contract.IContract&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Pipeline.ContractHandle.AppDomainOwner(System.AppDomain)">
          <source>If the application domain was previously created by a user, there is no owner.</source>
          <target state="translated">Se o domínio do aplicativo tiver sido criado por um usuário, não há nenhum proprietário.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.AddIn.Pipeline.ContractHandle.AppDomainOwner(System.AppDomain)">
          <source><ph id="ph1">&lt;paramref name="domain" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="domain" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="P:System.AddIn.Pipeline.ContractHandle.Contract">
          <source>Gets the contract used by a pipeline.</source>
          <target state="translated">Obtém o contrato usado por um pipeline.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AddIn.Pipeline.ContractHandle.Contract">
          <source>The contract, which is derived from <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.IContract" /&gt;</ph>.</source>
          <target state="translated">O contrato, que é derivado de <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.IContract" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.AddIn.Pipeline.ContractHandle.ContractOwnsAppDomain(System.AddIn.Contract.IContract,System.AppDomain)">
          <source>The contract to check.</source>
          <target state="translated">O contrato a ser verificado.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.AddIn.Pipeline.ContractHandle.ContractOwnsAppDomain(System.AddIn.Contract.IContract,System.AppDomain)">
          <source>The application domain to check.</source>
          <target state="translated">Um domínio de aplicativo a ser verificado.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.AddIn.Pipeline.ContractHandle.ContractOwnsAppDomain(System.AddIn.Contract.IContract,System.AppDomain)">
          <source>Determines whether an application domain is owned by the specified contract.</source>
          <target state="translated">Determina se um domínio do aplicativo é de propriedade do contrato especificado.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.AddIn.Pipeline.ContractHandle.ContractOwnsAppDomain(System.AddIn.Contract.IContract,System.AppDomain)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the contract owns the application domain; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se o contrato for proprietário do domínio do aplicativo; caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.AddIn.Pipeline.ContractHandle.ContractOwnsAppDomain(System.AddIn.Contract.IContract,System.AppDomain)">
          <source><ph id="ph1">&lt;paramref name="contract" /&gt;</ph> or <ph id="ph2">&lt;paramref name="domain" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="contract" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="domain" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="T:System.AddIn.Pipeline.ContractHandle">
          <source>Revokes the lifetime token on a contract.</source>
          <target state="translated">Revoga o token de tempo de vida em um contrato.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.AddIn.Pipeline.ContractHandle.Dispose">
          <source>Revokes the lifetime token on a contract, regardless of input.</source>
          <target state="translated">Revoga o token de tempo de vida em um contrato, independentemente da entrada.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.AddIn.Pipeline.ContractHandle.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> para liberar recursos gerenciados e não gerenciados; <ph id="ph2">&lt;see langword="false" /&gt;</ph> para liberar apenas recursos não gerenciados.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.AddIn.Pipeline.ContractHandle.Dispose(System.Boolean)">
          <source>Revokes the lifetime token on the contract regardless of input and optionally releases the managed resources.</source>
          <target state="translated">Revoga o token de tempo de vida no contrato, independentemente da entrada e, como opção, libera os recursos gerenciados.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.AddIn.Pipeline.ContractHandle.Finalize">
          <source>Releases the resources associated with the <ph id="ph1">&lt;see cref="T:System.AddIn.Pipeline.ContractHandle" /&gt;</ph> instance.</source>
          <target state="translated">Libera todos os recursos associados à instância <ph id="ph1">&lt;see cref="T:System.AddIn.Pipeline.ContractHandle" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Pipeline.ContractHandle.Finalize">
          <source>This method overrides <ph id="ph1">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Este método substitui <ph id="ph1">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Pipeline.ContractHandle.Finalize">
          <source>Application code should not call this method; an object's <ph id="ph1">&lt;xref:System.AddIn.Pipeline.ContractHandle.Finalize%2A&gt;</ph> method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <ph id="ph2">&lt;xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">O código do aplicativo não deve chamar este método; o método <ph id="ph1">&lt;xref:System.AddIn.Pipeline.ContractHandle.Finalize%2A&gt;</ph> de um objeto é invocado automaticamente durante a coleta de lixo, a menos que a finalização pelo coletor de lixo tenha sido desabilitada por uma chamada para o método <ph id="ph2">&lt;xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Pipeline.ContractHandle.Finalize">
          <source>When called by the garbage collector, this method calls the <ph id="ph1">&lt;xref:System.AddIn.Pipeline.ContractHandle.Dispose%28System.Boolean%29&gt;</ph> method.</source>
          <target state="translated">Quando chamado pelo coletor de lixo, este método chama o <ph id="ph1">&lt;xref:System.AddIn.Pipeline.ContractHandle.Dispose%28System.Boolean%29&gt;</ph> método.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>