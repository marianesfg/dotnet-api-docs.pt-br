<Type Name="ParallelLoopState" FullName="System.Threading.Tasks.ParallelLoopState">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3e4244160069333f5d930b81c7b54173c2ad6d6a" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30530210" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ParallelLoopState" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ParallelLoopState extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.ParallelLoopState" />
  <TypeSignature Language="VB.NET" Value="Public Class ParallelLoopState" />
  <TypeSignature Language="C++ CLI" Value="public ref class ParallelLoopState" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("ShouldExitCurrentIteration = {ShouldExitCurrentIteration}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="8ebaf-101">Permite que iterações de loops paralelos interajam com outras iterações.</span>
      <span class="sxs-lookup">
        <span data-stu-id="8ebaf-101">Enables iterations of parallel loops to interact with other iterations.</span>
      </span>
      <span data-ttu-id="8ebaf-102">Uma instância dessa classe é fornecida pela classe <see cref="T:System.Threading.Tasks.Parallel" /> a cada loop. Você não pode criar instâncias no seu código.</span>
      <span class="sxs-lookup">
        <span data-stu-id="8ebaf-102">An instance of this class is provided by the <see cref="T:System.Threading.Tasks.Parallel" /> class to each loop; you can not create instances in your code.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ebaf-103">Observe que não é possível instanciar uma instância dessa classe.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-103">Note that you cannot instantiate an instance of this class.</span></span> <span data-ttu-id="8ebaf-104">Ele é gerado automaticamente pelo compilador como um argumento em uma chamada para o <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> ou <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-104">It is automatically generated by the compiler as an argument in a call to the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> or <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="8ebaf-105">O exemplo fornece uma ilustração.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-105">The example provides an illustration.</span></span>  
  
 <span data-ttu-id="8ebaf-106">Constrói como `for` e `foreach` (em c#) e `For` e `For Each` (no Visual Basic) execute sequencialmente do índice mais baixo para o mais alto ou do primeiro objeto em um conjunto para o último.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-106">Constructs such as `for` and `foreach` (in C#) and `For` and `For Each` (in Visual Basic) execute sequentially from the lowest index to the highest or from the first object in a set to the last.</span></span> <span data-ttu-id="8ebaf-107">Em contraste, o <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> e <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> métodos não.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-107">In contrast, the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> and <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> methods do not.</span></span> <span data-ttu-id="8ebaf-108">Como individuais iterações do loop são executados em paralelo, eles podem começam e terminam em qualquer ordem.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-108">Because individual iterations of the loop run in parallel, they can begin and end in any order.</span></span> <span data-ttu-id="8ebaf-109">O <xref:System.Threading.Tasks.ParallelLoopState> classe permite individuais iterações de loops paralelos para interação com uma da outra.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-109">The <xref:System.Threading.Tasks.ParallelLoopState> class allows individual iterations of parallel loops to interact with one another.</span></span> <span data-ttu-id="8ebaf-110">O <xref:System.Threading.Tasks.ParallelLoopState> classe permite que você:</span><span class="sxs-lookup"><span data-stu-id="8ebaf-110">The <xref:System.Threading.Tasks.ParallelLoopState> class allows you to:</span></span>  
  
-   <span data-ttu-id="8ebaf-111">Sair a iteração atual e evitar qualquer iterações adicionais sejam iniciados ao chamar o <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-111">Exit the current iteration and prevent any additional iterations from starting by calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span> <span data-ttu-id="8ebaf-112">Isso não afeta a iterações que já começou a execução.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-112">This does not affect iterations that have already begun execution.</span></span>  
  
-   <span data-ttu-id="8ebaf-113">Impedir que qualquer iterações com um índice maior que o índice atual em execução chamando o <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-113">Prevent any iterations with an index greater than the current index from executing by calling the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="8ebaf-114">Isso não afeta a iterações que já começou a execução.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-114">This does not affect iterations that have already begun execution.</span></span>  
  
-   <span data-ttu-id="8ebaf-115">Determinar se uma exceção ocorreu em qualquer iteração do loop, recuperando o valor de <xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-115">Determine whether an exception has occurred in any loop iteration by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A> property.</span></span>  
  
-   <span data-ttu-id="8ebaf-116">Determinar se qualquer iteração do loop chamou o <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método por recuperar o valor da <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-116">Determine whether any iteration of the loop has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property.</span></span> <span data-ttu-id="8ebaf-117">Você pode usar essa propriedade para retornar de iterações do loop que iniciados antes da chamada para o <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método mas ainda estão em execução.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-117">You can use this property to return from iterations of the loop that started before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method but are still executing.</span></span>  
  
-   <span data-ttu-id="8ebaf-118">Determinar se qualquer iteração do loop chamou o <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> ou <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método ou gerou uma exceção ao recuperar o valor da <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-118">Determine whether any iteration of the loop has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> or <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method or has thrown an exception by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property.</span></span>  
  
-   <span data-ttu-id="8ebaf-119">Sair de uma iteração de longa execução cujo índice é maior que o índice de uma iteração quebra foi chamada por recuperar o valor da <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-119">Exit from a long-running iteration whose index is greater than the index of an iteration in which Break was called by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ebaf-120">O exemplo a seguir executa até 100 iterações de um loop em paralelo.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-120">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="8ebaf-121">Cada iteração pausa por um intervalo aleatório de 1 para 1.000 milissegundos.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-121">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="8ebaf-122">Um valor gerado aleatoriamente determina em qual iteração do loop de <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método é chamado.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-122">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="8ebaf-123">Como a saída mostra o exemplo, nenhum iterações cujo índice é maior do que o <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> início do valor de propriedade após a chamada para o <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-123">As the output from the example shows, no iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value start after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="8ebaf-124">Como iterações do loop são ainda podem estar em execução quando o <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método é chamado, chamadas de cada iteração a <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> propriedade para verificar se a outra iteração chamou o <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-124">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="8ebaf-125">Se o valor da propriedade é `true`, a iteração verifica o valor da <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> propriedade e, se for maior que o valor de índice de iteração atual, retorna imediatamente.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-125">If  the property value is `true`, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="8ebaf-126">Um <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instância deve ser usado somente dentro do corpo do loop para o qual uma instância foi fornecida.</span>
      <span class="sxs-lookup">
        <span data-stu-id="8ebaf-126">A <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance is meant to be used only within the body of the loop to which an instance was provided.</span>
      </span>
      <span data-ttu-id="8ebaf-127">Não é seguro usar um fornecido <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instância após o loop associado termina, nem é seguro explicitamente entregá-lo a outros segmentos e tem esses threads acessá-lo a qualquer momento.</span>
      <span class="sxs-lookup">
        <span data-stu-id="8ebaf-127">It is not safe to use a provided <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance after the associated loop ends, nor is it safe to explicitly hand it off to other threads and have those threads access it at any time.</span>
      </span>
      <span data-ttu-id="8ebaf-128">Outro <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instância será fornecida para cada thread envolvidos em um loop.</span>
      <span class="sxs-lookup">
        <span data-stu-id="8ebaf-128">A different <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance will be provided to each thread involved in a loop.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public void Break ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Break() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Break" />
      <MemberSignature Language="VB.NET" Value="Public Sub Break ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Break();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8ebaf-129">Comunica que o loop de <see cref="T:System.Threading.Tasks.Parallel" /> deve encerrar a execução de iterações além da iteração atual, conforme a necessidade mais recente do sistema.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8ebaf-129">Communicates that the <see cref="T:System.Threading.Tasks.Parallel" /> loop should cease execution of iterations beyond the current iteration at the system's earliest convenience.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ebaf-130"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> indica que nenhuma iterações após a iteração atual devem ser executadas.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-130"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> indicates that no iterations after the current iteration should be run.</span></span> <span data-ttu-id="8ebaf-131">Efetivamente, ele cancela qualquer adicionais iterações do loop.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-131">It effectively cancels any additional iterations of the loop.</span></span> <span data-ttu-id="8ebaf-132">No entanto, ela não interrompe qualquer iterações que já começou a execução.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-132">However, it does not stop any iterations that have already begun execution.</span></span> <span data-ttu-id="8ebaf-133">Por exemplo, se <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> é chamado de 100 vezes iteração de um loop paralelo iteração de 0 a 1.000, todas as iterações menor que 100 devem ainda ser executado, mas as iterações de 101 a 1000 que ainda não foram iniciados não são executados.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-133">For example, if <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is called from the 100th iteration of a parallel loop iterating from 0 to 1,000, all iterations less than 100 should still be run, but the iterations from 101 through to 1000 that have not yet started are not executed.</span></span>  
  
 <span data-ttu-id="8ebaf-134">Iterações de longa execução que podem já estar em execução, <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> define o <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> índice de iteração atual se o índice atual for menor que o valor atual da propriedade <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-134">For long-running iterations that may already be executing, <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> sets the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property to the current iteration's index if the current index is less than the current value of <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>.</span></span> <span data-ttu-id="8ebaf-135">Para interromper iterações cujo índice é maior do que a iteração de quebra mais baixa de execução concorrente, faça o seguinte:</span><span class="sxs-lookup"><span data-stu-id="8ebaf-135">To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:</span></span>  
  
1.  <span data-ttu-id="8ebaf-136">Verifique se o <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> é de propriedade `true`.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-136">Check whether the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is `true`.</span></span>  
  
2.  <span data-ttu-id="8ebaf-137">Sair da iteração, se o índice é maior do que o <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> o valor da propriedade.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-137">Exit from the iteration if its index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value.</span></span>  
  
 <span data-ttu-id="8ebaf-138">O exemplo fornece uma ilustração.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-138">The example provides an illustration.</span></span>  
  
 <span data-ttu-id="8ebaf-139"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> normalmente é utilizado em algoritmos de pesquisa com base em onde uma ordenação está presente na fonte de dados.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-139"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is typically employed in search-based algorithms where an ordering is present in the data source.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ebaf-140">O exemplo a seguir executa até 100 iterações de um loop em paralelo.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-140">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="8ebaf-141">Cada iteração pausa por um intervalo aleatório de 1 para 1.000 milissegundos.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-141">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="8ebaf-142">Um valor gerado aleatoriamente determina em qual iteração do loop de <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método é chamado.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-142">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="8ebaf-143">Como a saída mostra o exemplo, nenhum iterações cujo índice é maior do que o <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> início do valor de propriedade após a chamada para o <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-143">As the output from the example shows, no iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value start after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="8ebaf-144">Como iterações do loop são ainda podem estar em execução quando o <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método é chamado, chamadas de cada iteração a <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> propriedade para verificar se a outra iteração chamou o <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-144">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="8ebaf-145">Se o valor da propriedade é `true`, a iteração verifica o valor da <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> propriedade e, se for maior que o valor de índice de iteração atual, retorna imediatamente.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-145">If  the property value is `true`, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8ebaf-146">O método <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> foi chamado anteriormente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8ebaf-146">The <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method was previously called.</span>
          </span>
          <span data-ttu-id="8ebaf-147">
            <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> e <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> não podem ser usados em combinação por iterações do mesmo loop.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8ebaf-147">
              <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> and <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> may not be used in combination by iterations of the same loop.</span>
          </span>
        </exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      </Docs>
    </Member>
    <Member MemberName="IsExceptional">
      <MemberSignature Language="C#" Value="public bool IsExceptional { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExceptional" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExceptional As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExceptional { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8ebaf-148">Obtém se qualquer iteração do loop gerou uma exceção que ficou sem tratamento por aquela iteração.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8ebaf-148">Gets whether any iteration of the loop has thrown an exception that went unhandled by that iteration.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8ebaf-149">
            <see langword="true" /> Se tiver sido lançada uma exceção sem tratamento. Caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8ebaf-149">
              <see langword="true" /> if an unhandled exception was thrown; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStopped">
      <MemberSignature Language="C#" Value="public bool IsStopped { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStopped" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStopped As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStopped { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8ebaf-150">Obtém se qualquer iteração do loop chamou o método <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8ebaf-150">Gets whether any iteration of the loop has called the <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8ebaf-151">
            <see langword="true" /> Se qualquer iteração parou o loop chamando o <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> método; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8ebaf-151">
              <see langword="true" /> if any iteration has stopped the loop by calling the <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ebaf-152">Iterações de longa execução do loop, você pode recuperar o valor da <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> propriedade para determinar se qualquer iterações do loop que começou a execução antes da chamada para o <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método ainda estão em execução.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-152">For long-running iterations of the loop, you can retrieve the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to determine whether any iterations of the loop that began execution before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method are still executing.</span></span> <span data-ttu-id="8ebaf-153">Você pode usar o valor da <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> propriedade para determinar se eles devem retornar imediatamente ou executar normalmente.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-153">You can then use the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to determine whether they should return immediately or execute normally.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ebaf-154">O exemplo a seguir executa até 10.000 iterações de um loop em paralelo.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-154">The following example executes up to 10,000 iterations of a loop in parallel.</span></span> <span data-ttu-id="8ebaf-155">Cada iteração pausa por um intervalo aleatório de 1 para 1.000 milissegundos.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-155">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="8ebaf-156">Um valor gerado aleatoriamente determina em qual iteração do loop de <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método é chamado.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-156">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called.</span></span> <span data-ttu-id="8ebaf-157">Como iterações do loop são ainda podem estar em execução quando o <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método é chamado, a expressão de lambda chama o <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> método para verificar se a outra iteração chamou o <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-157">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called, the lambda expression calls the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span> <span data-ttu-id="8ebaf-158">Se ele retornar `true`, a iteração retorna imediatamente.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-158">If it returns `true`, the iteration returns immediately.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LowestBreakIteration">
      <MemberSignature Language="C#" Value="public Nullable&lt;long&gt; LowestBreakIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int64&gt; LowestBreakIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LowestBreakIteration As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;long&gt; LowestBreakIteration { Nullable&lt;long&gt; get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8ebaf-159">Obtém a menor iteração do loop do qual <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> foi chamado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8ebaf-159">Gets the lowest iteration of the loop from which <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> was called.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8ebaf-160">A iteração menor do que <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> foi chamado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8ebaf-160">The lowest iteration from which <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> was called.</span>
          </span>
          <span data-ttu-id="8ebaf-161">No caso de um <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" /> loop, o valor é baseado em um índice gerado internamente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8ebaf-161">In the case of a <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" /> loop, the value is based on an internally-generated index.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ebaf-162">É possível que várias iterações de um loop paralelo para chamar o <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-162">It is possible for multiple iterations of a parallel loop to call the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="8ebaf-163">Se isso ocorrer, esse valor é o menor índice de uma iteração que chamou <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-163">If they do, this value is the smallest index of an iteration that called <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>.</span></span> <span data-ttu-id="8ebaf-164">Se nenhuma iteração do loop chamado <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, essa propriedade retornará `null`.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-164">If no iteration of the loop called <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, this property returns `null`.</span></span> <span data-ttu-id="8ebaf-165">Observe que o valor da propriedade não é afetado por chamadas para o <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-165">Note that the property value is unaffected by calls to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span>  
  
 <span data-ttu-id="8ebaf-166">Em iterações de longa duração em que todas as iterações após a iteração que chama o <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> não precisa executar o método, o <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> propriedade é usada para encerrar iterações que começaram a execução antes da chamada para o <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-166">In long-running iterations in which all iterations after the iteration that calls the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method need not run, the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property is used to terminate iterations that began execution before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="8ebaf-167">Para interromper iterações cujo índice é maior do que a iteração de quebra mais baixa de execução concorrente, faça o seguinte:</span><span class="sxs-lookup"><span data-stu-id="8ebaf-167">To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:</span></span>  
  
1.  <span data-ttu-id="8ebaf-168">Verifique se o <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> é de propriedade `true`.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-168">Check whether the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is `true`.</span></span>  
  
2.  <span data-ttu-id="8ebaf-169">Sair da iteração, se o índice é maior do que o <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> o valor da propriedade.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-169">Exit from the iteration if its index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value.</span></span>  
  
 <span data-ttu-id="8ebaf-170">O exemplo fornece uma ilustração.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-170">The example provides an illustration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ebaf-171">O exemplo a seguir executa até 100 iterações de um loop em paralelo.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-171">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="8ebaf-172">Cada iteração pausa por um intervalo aleatório de 1 para 1.000 milissegundos.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-172">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="8ebaf-173">Um valor gerado aleatoriamente determina em qual iteração do loop de <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método é chamado.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-173">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="8ebaf-174">Isso impede que iterações cujo índice é maior do que o <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> valor da propriedade seja iniciado após a chamada para o <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método, mas ele não afeta qualquer iterações que já começou a execução.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-174">This prevents iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value from starting after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method, but it does not affect any iterations that have already begun executing.</span></span> <span data-ttu-id="8ebaf-175">Para evitar que eles concluam, cada iteração chama o <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> método para verificar se a outra iteração chamou o <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-175">To prevent these from completing, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="8ebaf-176">Se assim, a iteração verifica o valor da <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> propriedade e, se for maior que o valor de índice de iteração atual, retorna imediatamente.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-176">If so, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="8ebaf-177">Observe que, como o <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> valor está fora do escopo fora do loop paralelo, você deve atribuí-lo a uma variável que é visível fora do loop, se você quiser preservar seu valor.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-177">Note that, because the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> value is out of scope outside of the parallel loop, you must assign it to a variable that is visible outside of the loop if you want to preserve its value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
      </Docs>
    </Member>
    <Member MemberName="ShouldExitCurrentIteration">
      <MemberSignature Language="C#" Value="public bool ShouldExitCurrentIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShouldExitCurrentIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ShouldExitCurrentIteration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShouldExitCurrentIteration { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8ebaf-178">Obtém se a iteração atual do loop deve sair com base nas solicitações feitas por esta ou outras iterações.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8ebaf-178">Gets whether the current iteration of the loop should exit based on requests made by this or other iterations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8ebaf-179">
            <see langword="true" /> Se a iteração atual deve ser encerrada; Caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8ebaf-179">
              <see langword="true" /> if the current iteration should exit; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ebaf-180">O <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> está definida como `true` em qualquer uma das seguintes condições:</span><span class="sxs-lookup"><span data-stu-id="8ebaf-180">The <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is set to `true` under any of the following conditions:</span></span>  
  
-   <span data-ttu-id="8ebaf-181">Uma iteração do loop chamadas <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> ou <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-181">An iteration of the loop calls <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> or <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>.</span></span>  
  
-   <span data-ttu-id="8ebaf-182">Uma iteração do loop gera uma exceção.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-182">An iteration of the loop throws an exception.</span></span>  
  
-   <span data-ttu-id="8ebaf-183">O loop será cancelado.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-183">The loop is canceled.</span></span>  
  
 <span data-ttu-id="8ebaf-184">Quando essa propriedade é `true`, o <xref:System.Threading.Tasks.Parallel> classe proativamente tentará proibir adicionais iterações do loop de iniciar a execução.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-184">When this property is `true`, the <xref:System.Threading.Tasks.Parallel> class will proactively attempt to prohibit additional iterations of the loop from starting execution.</span></span> <span data-ttu-id="8ebaf-185">No entanto, pode haver casos em que não é possível evitar iterações adicionais sejam iniciados.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-185">However, there may be cases where it is unable to prevent additional iterations from starting.</span></span>  
  
 <span data-ttu-id="8ebaf-186">Ele também pode ser o caso de uma iteração de longa execução já iniciou a execução.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-186">It may also be the case that a long-running iteration has already begun execution.</span></span> <span data-ttu-id="8ebaf-187">Nesses casos, iterações podem verificar explicitamente o <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> propriedade e deixará de execução se a propriedade retornar `true`.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-187">In such cases, iterations may explicitly check the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property and cease execution if the property returns `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ebaf-188">O exemplo a seguir executa até 100 iterações de um loop em paralelo.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-188">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="8ebaf-189">Cada iteração pausa por um intervalo aleatório de 1 para 1.000 milissegundos.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-189">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="8ebaf-190">Um valor gerado aleatoriamente determina em qual iteração do loop de <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método é chamado.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-190">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="8ebaf-191">Isso impede que iterações cujo índice é maior do que o <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> valor da propriedade seja iniciado após a chamada para o <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método, mas ele não afeta qualquer iterações que já começou a execução.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-191">This prevents iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value from starting after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method, but it does not affect any iterations that have already begun executing.</span></span> <span data-ttu-id="8ebaf-192">Para evitar que eles concluam, cada iteração chama o <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> método para verificar se a outra iteração chamou o <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-192">To prevent these from completing, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="8ebaf-193">Se assim, a iteração verifica o valor da <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> propriedade e, se for maior que o valor de índice de iteração atual, retorna imediatamente.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-193">If so, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8ebaf-194">Comunica que o loop <see cref="T:System.Threading.Tasks.Parallel" /> deve cessar a execução assim que for possível para o sistema.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8ebaf-194">Communicates that the <see cref="T:System.Threading.Tasks.Parallel" /> loop should cease execution at the system's earliest convenience.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ebaf-195">Chamar o <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método indica que qualquer iterações do loop que ainda não foram iniciados não precisam ser executadas.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-195">Calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method indicates that any iterations of the loop that have not yet started need not be run.</span></span> <span data-ttu-id="8ebaf-196">Efetivamente, ele cancela qualquer adicionais iterações do loop.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-196">It effectively cancels any additional iterations of the loop.</span></span> <span data-ttu-id="8ebaf-197">No entanto, ela não interrompe qualquer iterações que já começou a execução.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-197">However, it does not stop any iterations that have already begun execution.</span></span>  
  
 <span data-ttu-id="8ebaf-198">Chamando o <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método faz com que o <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> propriedade para retornar `true` para qualquer iteração do loop que ainda está em execução.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-198">Calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method causes the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to return `true` for any iteration of the loop that is still executing.</span></span> <span data-ttu-id="8ebaf-199">Isso é particularmente útil para iterações de longa execução, que podem verificar o <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> propriedade e saída no início se seu valor é `true`.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-199">This is particularly useful for long-running iterations, which can check the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property and exit early if its value is `true`.</span></span>  
  
 <span data-ttu-id="8ebaf-200"><xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> normalmente é utilizado em algoritmos com base em pesquisa, onde depois que um resultado é encontradas, nenhum outras iterações precisam ser executadas.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-200"><xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> is typically employed in search-based algorithms, where once a result is found, no other iterations need be executed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ebaf-201">O exemplo a seguir executa até 10.000 iterações de um loop em paralelo.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-201">The following example executes up to 10,000 iterations of a loop in parallel.</span></span> <span data-ttu-id="8ebaf-202">Cada iteração pausa por um intervalo aleatório de 1 para 1.000 milissegundos.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-202">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="8ebaf-203">Um valor gerado aleatoriamente determina em qual iteração do loop de <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método é chamado.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-203">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called.</span></span> <span data-ttu-id="8ebaf-204">Como mostra a saída do exemplo, nenhum iterações executar após a chamada para o <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-204">As the output from the example shows, no iterations execute after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 <span data-ttu-id="8ebaf-205">Como iterações do loop são ainda podem estar em execução quando o <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método é chamado, chamadas de cada iteração a <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> método para verificar se a outra iteração chamou o <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-205">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span> <span data-ttu-id="8ebaf-206">Se ele retornar `true`, a iteração retorna imediatamente.</span><span class="sxs-lookup"><span data-stu-id="8ebaf-206">If it returns `true`, the iteration returns immediately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8ebaf-207">O método <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> foi chamado anteriormente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8ebaf-207">The <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> method was called previously.</span>
          </span>
          <span data-ttu-id="8ebaf-208">
            <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> e <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> não podem ser usados em combinação por iterações do mesmo loop.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8ebaf-208">
              <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> and <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> may not be used in combination by iterations of the same loop.</span>
          </span>
        </exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
      </Docs>
    </Member>
  </Members>
</Type>