<Type Name="ParallelLoopState" FullName="System.Threading.Tasks.ParallelLoopState">
  <Metadata><Meta Name="ms.openlocfilehash" Value="af16a98f705e63e2ba868d464648af2e365bcb9a" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48619320" /></Metadata><TypeSignature Language="C#" Value="public class ParallelLoopState" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ParallelLoopState extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.ParallelLoopState" />
  <TypeSignature Language="VB.NET" Value="Public Class ParallelLoopState" />
  <TypeSignature Language="C++ CLI" Value="public ref class ParallelLoopState" />
  <TypeSignature Language="F#" Value="type ParallelLoopState = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("ShouldExitCurrentIteration = {ShouldExitCurrentIteration}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Permite que iterações de loops paralelos interajam com outras iterações. Uma instância dessa classe é fornecida pela classe <see cref="T:System.Threading.Tasks.Parallel" /> a cada loop. Você não pode criar instâncias no seu código.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Observe que você não pode instanciar uma instância dessa classe. Ele é gerado automaticamente pelo compilador como um argumento em uma chamada para o <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> ou <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> método. O exemplo fornece uma ilustração.  
  
 Construções, como `for` e `foreach` (em c#) e `For` e `For Each` (no Visual Basic) são executadas sequencialmente do índice menor para o mais alto ou do primeiro objeto em um conjunto para o último. Em contraste, o <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> e <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> métodos não fizer isso. Como individuais iterações do loop é executado em paralelo, elas podem começam e terminam em qualquer ordem. O <xref:System.Threading.Tasks.ParallelLoopState> classe permite que iterações individuais de loops paralelos interajam uns com os outros. O <xref:System.Threading.Tasks.ParallelLoopState> classe permite que você:  
  
-   Sair da iteração atual e evitar qualquer iterações adicionais seja iniciada chamando o <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método. Isso não afeta as iterações que já começou a execução.  
  
-   Impedir que qualquer iterações com um índice maior que o índice atual em execução chamando o <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método. Isso não afeta as iterações que já começou a execução.  
  
-   Determinar se uma exceção ocorreu em qualquer iteração do loop, recuperando o valor da <xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A> propriedade.  
  
-   Determinar se qualquer iteração do loop chamou o <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método recuperando o valor da <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> propriedade. Você pode usar essa propriedade para retornar de iterações do loop que foi iniciado antes de chamar o <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método, mas ainda estão sendo executadas.  
  
-   Determinar se qualquer iteração do loop chamou o <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> ou <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método ou uma exceção foi gerada ao recuperar o valor da <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> propriedade.  
  
-   Sair de uma iteração de execução longa, cujo índice é maior que o índice de uma iteração que quebra foi chamada por recuperar o valor da <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> propriedade.  
  
   
  
## Examples  
 O exemplo a seguir executa até 100 iterações de um loop em paralelo. Cada iteração pausa por um intervalo aleatório de 1 a 1.000 milissegundos. Um valor gerado aleatoriamente determina em qual iteração do loop de <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método é chamado. Como a saída do exemplo mostra, nenhuma iteração cujo índice é maior que o <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> início do valor de propriedade após a chamada para o <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 Como as iterações do loop são ainda podem estar em execução quando o <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método é chamado, as chamadas de cada iteração a <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> propriedade para verificar se a outra iteração tiver chamado o <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método. Se o valor da propriedade for `true`, a iteração verifica o valor da <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> propriedade e, se ele for maior que o valor de índice da iteração atual, retorna imediatamente.  
  
 ]]></format>
    </remarks>
    <threadsafe>Um <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instância destina-se a ser usado somente dentro do corpo do loop para o qual uma instância foi fornecida.  Não é seguro usar uma fornecida <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instância após o loop associado termina, nem é seguro explicitamente entregá-lo a outros threads e ter esses threads acessá-lo a qualquer momento.  Outro <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instância será fornecida para cada thread envolvido em um loop.</threadsafe>
    <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">Paralelismo de dados (biblioteca de tarefas paralelas)</related>
  </Docs>
  <Members>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public void Break ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Break() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Break" />
      <MemberSignature Language="VB.NET" Value="Public Sub Break ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Break();" />
      <MemberSignature Language="F#" Value="member this.Break : unit -&gt; unit" Usage="parallelLoopState.Break " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Comunica que o loop de <see cref="T:System.Threading.Tasks.Parallel" /> deve encerrar a execução de iterações além da iteração atual, conforme a necessidade mais recente do sistema.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> indica que nenhuma iteração após iteração atual deve ser executada. Ele efetivamente cancela qualquer adicionais iterações do loop. No entanto, não impede que qualquer iterações que já começou a execução. Por exemplo, se <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> é chamado do 100 º iteração de um loop paralelo iteração de 0 a 1.000, todas as iterações menor que 100 devem ainda ser execução, mas as iterações de 101 até 1000 que ainda não foram iniciados não são executadas.  
  
 Iterações de longa execução que podem já estar em execução, <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> define o <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> índice da iteração atual se o índice atual é menor que o valor atual da propriedade <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>. Para interromper as iterações cujo índice é maior que a menor iteração de interrupção da execução concorrente, faça o seguinte:  
  
1.  Verifique se o <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> é de propriedade `true`.  
  
2.  Sair da iteração, se o seu índice é maior que o <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> valor da propriedade.  
  
 O exemplo fornece uma ilustração.  
  
 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> normalmente é utilizado em algoritmos baseados em pesquisa, onde uma ordenação está presente na fonte de dados.  
  
   
  
## Examples  
 O exemplo a seguir executa até 100 iterações de um loop em paralelo. Cada iteração pausa por um intervalo aleatório de 1 a 1.000 milissegundos. Um valor gerado aleatoriamente determina em qual iteração do loop de <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método é chamado. Como a saída do exemplo mostra, nenhuma iteração cujo índice é maior que o <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> início do valor de propriedade após a chamada para o <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 Como as iterações do loop são ainda podem estar em execução quando o <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método é chamado, as chamadas de cada iteração a <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> propriedade para verificar se a outra iteração tiver chamado o <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método. Se o valor da propriedade for `true`, a iteração verifica o valor da <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> propriedade e, se ele for maior que o valor de índice da iteração atual, retorna imediatamente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">O método <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> foi chamado anteriormente. <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> e <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> não podem ser usados em combinação por iterações do mesmo loop.</exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">Paralelismo de dados (biblioteca de tarefas paralelas)</related>
      </Docs>
    </Member>
    <Member MemberName="IsExceptional">
      <MemberSignature Language="C#" Value="public bool IsExceptional { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExceptional" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExceptional As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExceptional { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsExceptional : bool" Usage="System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém se qualquer iteração do loop gerou uma exceção que ficou sem tratamento por aquela iteração.</summary>
        <value><see langword="true" /> Se tiver sido lançada uma exceção sem tratamento. Caso contrário, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">Paralelismo de dados (biblioteca de tarefas paralelas)</related>
      </Docs>
    </Member>
    <Member MemberName="IsStopped">
      <MemberSignature Language="C#" Value="public bool IsStopped { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStopped" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStopped As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStopped { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStopped : bool" Usage="System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém se qualquer iteração do loop chamou o método <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />.</summary>
        <value><see langword="true" /> Se qualquer iteração tiver parado o loop, chamando o <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> método; caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para iterações de longa execução do loop, você pode recuperar o valor da <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> propriedade para determinar se qualquer iterações do loop que começou a execução antes de chamar o <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método ainda estão sendo executadas. Você pode usar o valor da <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> propriedade para determinar se eles devem retornar imediatamente ou executar normalmente.  
  
   
  
## Examples  
 O exemplo a seguir executa até 10.000 iterações de um loop em paralelo. Cada iteração pausa por um intervalo aleatório de 1 a 1.000 milissegundos. Um valor gerado aleatoriamente determina em qual iteração do loop de <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método é chamado. Porque as iterações do loop provavelmente ainda estar em execução quando o <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método é chamado, a expressão de lambda chama o <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> método para verificar se a outra iteração tem chamado a <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método. Se ele retornar `true`, a iteração retorna imediatamente.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">Paralelismo de dados (biblioteca de tarefas paralelas)</related>
      </Docs>
    </Member>
    <Member MemberName="LowestBreakIteration">
      <MemberSignature Language="C#" Value="public Nullable&lt;long&gt; LowestBreakIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int64&gt; LowestBreakIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LowestBreakIteration As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;long&gt; LowestBreakIteration { Nullable&lt;long&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.LowestBreakIteration : Nullable&lt;int64&gt;" Usage="System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém a menor iteração do loop do qual <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> foi chamado.</summary>
        <value>A menor iteração do qual <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> foi chamado. No caso de um <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" /> loop, o valor é baseado em um índice gerado internamente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 É possível que várias iterações de um loop paralelo para chamar o <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método. Se Sim, esse valor é o menor índice de uma iteração que chamou <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>. Se nenhuma iteração do loop é chamado <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, essa propriedade retornará `null`. Observe que o valor da propriedade não é afetado por chamadas para o <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método.  
  
 Em iterações de longa execução na quais todas as iterações após a iteração que chama o <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> não precisará executar o método, o <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> propriedade é usada para encerrar as iterações que começaram a execução antes de chamar o <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método. Para interromper as iterações cujo índice é maior que a menor iteração de interrupção da execução concorrente, faça o seguinte:  
  
1.  Verifique se o <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> é de propriedade `true`.  
  
2.  Sair da iteração, se o seu índice é maior que o <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> valor da propriedade.  
  
 O exemplo fornece uma ilustração.  
  
   
  
## Examples  
 O exemplo a seguir executa até 100 iterações de um loop em paralelo. Cada iteração pausa por um intervalo aleatório de 1 a 1.000 milissegundos. Um valor gerado aleatoriamente determina em qual iteração do loop de <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método é chamado. Isso impede que as iterações cujo índice é maior que o <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> valor de propriedade de inicialização após a chamada para o <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método, mas ele não afeta qualquer iterações que já começou a executar. Para impedir que eles concluam, cada iteração chama o <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> método para verificar se a outra iteração tenha chamado o <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método. Se assim, a iteração verifica o valor da <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> propriedade e, se ele for maior que o valor de índice da iteração atual, retorna imediatamente.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 Observe que, como o <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> valor está fora do escopo fora do loop paralelo, você deve atribuí-lo a uma variável que é visível fora do loop, se você quiser preservar seu valor.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">Paralelismo de dados (biblioteca de tarefas paralelas)</related>
      </Docs>
    </Member>
    <Member MemberName="ShouldExitCurrentIteration">
      <MemberSignature Language="C#" Value="public bool ShouldExitCurrentIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShouldExitCurrentIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ShouldExitCurrentIteration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShouldExitCurrentIteration { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ShouldExitCurrentIteration : bool" Usage="System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém se a iteração atual do loop deve sair com base nas solicitações feitas por esta ou outras iterações.</summary>
        <value><see langword="true" /> Se a iteração atual deve sair; Caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> estiver definida como `true` em qualquer uma das seguintes condições:  
  
-   Das chamadas de loop de iteração <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> ou <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>.  
  
-   Uma iteração do loop lançará uma exceção.  
  
-   O loop será cancelado.  
  
 Quando essa propriedade é `true`, o <xref:System.Threading.Tasks.Parallel> classe proativamente tentará proibir adicionais iterações do loop de iniciar a execução. No entanto, pode haver casos em que é impossível evitar iterações adicionais seja iniciado.  
  
 Também pode ser o caso de uma iteração de longa execução já começou a execução. Nesses casos, as iterações podem verificar explicitamente o <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> propriedade e interromper a execução se a propriedade retornar `true`.  
  
   
  
## Examples  
 O exemplo a seguir executa até 100 iterações de um loop em paralelo. Cada iteração pausa por um intervalo aleatório de 1 a 1.000 milissegundos. Um valor gerado aleatoriamente determina em qual iteração do loop de <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método é chamado. Isso impede que as iterações cujo índice é maior que o <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> valor de propriedade de inicialização após a chamada para o <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método, mas ele não afeta qualquer iterações que já começou a executar. Para impedir que eles concluam, cada iteração chama o <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> método para verificar se a outra iteração tenha chamado o <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método. Se assim, a iteração verifica o valor da <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> propriedade e, se ele for maior que o valor de índice da iteração atual, retorna imediatamente.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">Paralelismo de dados (biblioteca de tarefas paralelas)</related>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="parallelLoopState.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Comunica que o loop <see cref="T:System.Threading.Tasks.Parallel" /> deve cessar a execução assim que for possível para o sistema.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chamar o <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método indica que qualquer iterações do loop que ainda não iniciaram não precisam ser executadas. Ele efetivamente cancela qualquer adicionais iterações do loop. No entanto, não impede que qualquer iterações que já começou a execução.  
  
 Chamar o <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método faz com que o <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> propriedade para retornar `true` para qualquer iteração do loop que ainda está em execução. Isso é particularmente útil para iterações de longa execução, que podem verificar a <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> propriedade e sair antecipadamente se seu valor é `true`.  
  
 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> normalmente é utilizado em algoritmos baseados em pesquisa, onde depois que um resultado for encontradas, nenhum outras iterações precisam ser executadas.  
  
   
  
## Examples  
 O exemplo a seguir executa até 10.000 iterações de um loop em paralelo. Cada iteração pausa por um intervalo aleatório de 1 a 1.000 milissegundos. Um valor gerado aleatoriamente determina em qual iteração do loop de <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método é chamado. Como mostra a saída do exemplo, não as iterações são executadas após a chamada para o <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 Como as iterações do loop são ainda podem estar em execução quando o <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método é chamado, as chamadas de cada iteração a <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> método para verificar se a outra iteração tiver chamado o <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método. Se ele retornar `true`, a iteração retorna imediatamente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">O método <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> foi chamado anteriormente. <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> e <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> não podem ser usados em combinação por iterações do mesmo loop.</exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">Paralelismo de dados (biblioteca de tarefas paralelas)</related>
      </Docs>
    </Member>
  </Members>
</Type>