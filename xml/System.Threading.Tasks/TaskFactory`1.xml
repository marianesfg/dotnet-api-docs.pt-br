<Type Name="TaskFactory&lt;TResult&gt;" FullName="System.Threading.Tasks.TaskFactory&lt;TResult&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="90cfd93df290ec5dd7f07f30a3e84f70694db8dd" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52230622" /></Metadata><TypeSignature Language="C#" Value="public class TaskFactory&lt;TResult&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TaskFactory`1&lt;TResult&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.TaskFactory`1" />
  <TypeSignature Language="VB.NET" Value="Public Class TaskFactory(Of TResult)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA;public ref class TaskFactory" />
  <TypeSignature Language="F#" Value="type TaskFactory&lt;'Result&gt; = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TResult" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TResult"><span data-ttu-id="b3869-101">O valor retornado dos objetos <see cref="T:System.Threading.Tasks.Task`1" /> criados pelos métodos dessa classe.</span><span class="sxs-lookup"><span data-stu-id="b3869-101">The return value of the <see cref="T:System.Threading.Tasks.Task`1" /> objects that the methods of this class create.</span></span></typeparam>
    <summary><span data-ttu-id="b3869-102">Fornece suporte para criação e agendamento de objetos <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-102">Provides support for creating and scheduling <see cref="T:System.Threading.Tasks.Task`1" /> objects.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3869-103">O .NET Framework fornece duas fábricas para criar e agendar tarefas:</span><span class="sxs-lookup"><span data-stu-id="b3869-103">The .NET Framework provides two factories for creating and scheduling tasks:</span></span>  
  
-   <span data-ttu-id="b3869-104">O <xref:System.Threading.Tasks.TaskFactory> classe, que cria <xref:System.Threading.Tasks.Task> e <xref:System.Threading.Tasks.Task%601> objetos.</span><span class="sxs-lookup"><span data-stu-id="b3869-104">The <xref:System.Threading.Tasks.TaskFactory> class, which creates <xref:System.Threading.Tasks.Task> and <xref:System.Threading.Tasks.Task%601> objects.</span></span>  
  
-   <span data-ttu-id="b3869-105">O <xref:System.Threading.Tasks.TaskFactory%601> classe, que cria <xref:System.Threading.Tasks.Task%601> objetos.</span><span class="sxs-lookup"><span data-stu-id="b3869-105">The <xref:System.Threading.Tasks.TaskFactory%601> class, which creates <xref:System.Threading.Tasks.Task%601> objects.</span></span>  
  
 <span data-ttu-id="b3869-106">O <xref:System.Threading.Tasks.TaskFactory%601> classe permite que você faça o seguinte:</span><span class="sxs-lookup"><span data-stu-id="b3869-106">The <xref:System.Threading.Tasks.TaskFactory%601> class allows you to do the following:</span></span>  
  
-   <span data-ttu-id="b3869-107">Criar uma tarefa e iniciá-lo imediatamente, chamando o <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> método.</span><span class="sxs-lookup"><span data-stu-id="b3869-107">Create a task and start it immediately by calling the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method.</span></span> <span data-ttu-id="b3869-108">Você pode chamar as sobrecargas desse método para criar e executar uma tarefa que requer argumentos não padrão.</span><span class="sxs-lookup"><span data-stu-id="b3869-108">You can call the overloads of this method to create and execute a task that requires non-default arguments.</span></span>  
  
    > [!WARNING]
    >  <span data-ttu-id="b3869-109">Começando com o [!INCLUDE[net_v45](~/includes/net-v45-md.md)], o <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> método fornece a maneira mais fácil de criar uma tarefa padrão valores de configuração e inicie-o imediatamente.</span><span class="sxs-lookup"><span data-stu-id="b3869-109">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> method provides the easiest way to create a task with default configuration values and start it immediately.</span></span>  
  
-   <span data-ttu-id="b3869-110">Criar uma tarefa que começa quando qualquer uma das tarefas em uma matriz é concluído chamando o <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAny%2A> ou <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAny%2A> método.</span><span class="sxs-lookup"><span data-stu-id="b3869-110">Create a task that starts when any one of the tasks in an array has completed by calling the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAny%2A> or   <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAny%2A> method.</span></span>  
  
-   <span data-ttu-id="b3869-111">Criar uma tarefa que é iniciado quando todas as tarefas em uma matriz concluiu chamando o <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> ou <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> método.</span><span class="sxs-lookup"><span data-stu-id="b3869-111">Create a task that starts when all the tasks in an array have completed by calling the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> or <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> method.</span></span>  
  
 <span data-ttu-id="b3869-112">Estático <xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=nameWithType> propriedade retorna um padrão <xref:System.Threading.Tasks.TaskFactory%601> objeto.</span><span class="sxs-lookup"><span data-stu-id="b3869-112">The static <xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=nameWithType> property returns a default <xref:System.Threading.Tasks.TaskFactory%601> object.</span></span> <span data-ttu-id="b3869-113">Você também pode chamar um dos <xref:System.Threading.Tasks.TaskFactory%601> classe construtores para configurar o <xref:System.Threading.Tasks.Task%601> objetos que o <xref:System.Threading.Tasks.TaskFactory%601> classe cria.</span><span class="sxs-lookup"><span data-stu-id="b3869-113">You can also call one of the <xref:System.Threading.Tasks.TaskFactory%601> class constructors to configure the <xref:System.Threading.Tasks.Task%601> objects that  the <xref:System.Threading.Tasks.TaskFactory%601> class creates.</span></span> <span data-ttu-id="b3869-114">O exemplo a seguir configura um novo <xref:System.Threading.Tasks.TaskFactory%601> objeto para criar tarefas que têm um token de cancelamento especificado, as opções de criação de tarefa, opções de continuação e um agendador de tarefas personalizado.</span><span class="sxs-lookup"><span data-stu-id="b3869-114">The following example configures a new <xref:System.Threading.Tasks.TaskFactory%601> object to create tasks that have a specified cancellation token, task creation options, continuation options, and a customized task scheduler.</span></span>  
  
 [!code-csharp[TPL_Factories#2](~/samples/snippets/csharp/VS_Snippets_Misc/tpl_factories/cs/factoriestresult.cs#2)]
 [!code-vb[TPL_Factories#2](~/samples/snippets/visualbasic/VS_Snippets_Misc/tpl_factories/vb/factoriestresult.vb#2)]  
  
 <span data-ttu-id="b3869-115">Na maioria dos casos, você não precisa criar um novo <xref:System.Threading.Tasks.TaskFactory%601> instância.</span><span class="sxs-lookup"><span data-stu-id="b3869-115">In most cases, you do not have to instantiate a new <xref:System.Threading.Tasks.TaskFactory%601> instance.</span></span> <span data-ttu-id="b3869-116">Em vez disso, você pode usar o estático <xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=nameWithType> propriedade, que retorna um objeto de fábrica que usa valores padrão.</span><span class="sxs-lookup"><span data-stu-id="b3869-116">Instead, you can use the static <xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=nameWithType> property, which returns a factory object that uses default values.</span></span> <span data-ttu-id="b3869-117">Em seguida, você pode chamar seus métodos para iniciar novas tarefas ou definir continuações de tarefa.</span><span class="sxs-lookup"><span data-stu-id="b3869-117">You can then call its methods to start new tasks or define task continuations.</span></span> <span data-ttu-id="b3869-118">Para obter uma ilustração, consulte o exemplo.</span><span class="sxs-lookup"><span data-stu-id="b3869-118">For an illustration, see the example.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b3869-119">O exemplo a seguir usa estático <xref:System.Threading.Tasks.Task%601.Factory%2A> propriedade para fazer duas chamadas para o <xref:System.Threading.Tasks.TaskFactory%601.StartNew%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="b3869-119">The following example uses the static <xref:System.Threading.Tasks.Task%601.Factory%2A> property to make two calls to the <xref:System.Threading.Tasks.TaskFactory%601.StartNew%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="b3869-120">A primeira tarefa retorna uma matriz de cadeia de caracteres que é preenchida com os nomes dos arquivos no diretório de Meus documentos do usuário, enquanto o segundo retorna uma matriz de cadeia de caracteres que é preenchida com os nomes dos subdiretórios do diretório MyDocuments do usuário.</span><span class="sxs-lookup"><span data-stu-id="b3869-120">The first task returns a string array that is populated with the names of files in the user's MyDocuments directory, while the second returns a string array that is populated with the names of subdirectories of the user's MyDocuments directory.</span></span> <span data-ttu-id="b3869-121">Em seguida, ele chama o <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%29?displayProperty=nameWithType> método, que exibe informações sobre o número de arquivos e diretórios em matrizes retornadas por duas tarefas depois que terminar a execução.</span><span class="sxs-lookup"><span data-stu-id="b3869-121">It then calls the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%29?displayProperty=nameWithType> method, which displays information about the number of files and directories in the arrays returned by the two tasks after they have completed execution.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Factory#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.factory/cs/factory2.cs#2)]
 [!code-vb[System.Threading.Tasks.Task.Factory#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.factory/vb/factory2.vb#2)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="b3869-122">Todos os membros públicos e protegidos da <see cref="T:System.Threading.Tasks.TaskFactory`1" /> são thread-safe e podem ser usados simultaneamente de vários threads.</span><span class="sxs-lookup"><span data-stu-id="b3869-122">All public and protected members of <see cref="T:System.Threading.Tasks.TaskFactory`1" /> are thread-safe and may be used concurrently from multiple threads.</span></span></threadsafe>
    <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="b3869-123">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="b3869-123">Task Parallel Library (TPL)</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b3869-124">Inicializa uma instância <see cref="T:System.Threading.Tasks.TaskFactory`1" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-124">Initializes a <see cref="T:System.Threading.Tasks.TaskFactory`1" /> instance.</span></span></summary>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="b3869-125">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="b3869-125">Task Parallel Library (TPL)</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskFactory ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TaskFactory();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b3869-126">Inicializa uma instância de <see cref="T:System.Threading.Tasks.TaskFactory`1" /> com a configuração padrão.</span><span class="sxs-lookup"><span data-stu-id="b3869-126">Initializes a <see cref="T:System.Threading.Tasks.TaskFactory`1" /> instance with the default configuration.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3869-127">Este construtor cria um <xref:System.Threading.Tasks.TaskFactory%601> instância com uma configuração padrão.</span><span class="sxs-lookup"><span data-stu-id="b3869-127">This constructor creates a <xref:System.Threading.Tasks.TaskFactory%601> instance with a default configuration.</span></span> <span data-ttu-id="b3869-128">O <xref:System.Threading.Tasks.TaskCreationOptions> propriedade é inicializada para <xref:System.Threading.Tasks.TaskCreationOptions.None>, o <xref:System.Threading.Tasks.TaskContinuationOptions> propriedade é inicializada para <xref:System.Threading.Tasks.TaskContinuationOptions.None>e o <xref:System.Threading.Tasks.TaskScheduler> propriedade é inicializada para o Agendador atual (consulte <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span><span class="sxs-lookup"><span data-stu-id="b3869-128">The <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="b3869-129">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="b3869-129">Task Parallel Library (TPL)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskFactory (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TaskFactory(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.TaskFactory&lt;'Result&gt; : System.Threading.CancellationToken -&gt; System.Threading.Tasks.TaskFactory&lt;'Result&gt;" Usage="new System.Threading.Tasks.TaskFactory&lt;'Result&gt; cancellationToken" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"><span data-ttu-id="b3869-130">O token de cancelamento padrão que será atribuído às tarefas criadas por este <see cref="T:System.Threading.Tasks.TaskFactory" />, a menos que outro token de cancelamento seja especificado explicitamente ao chamar os métodos de fábrica.</span><span class="sxs-lookup"><span data-stu-id="b3869-130">The default cancellation token that will be assigned to tasks created by this <see cref="T:System.Threading.Tasks.TaskFactory" /> unless another cancellation token is explicitly specified when calling the factory methods.</span></span></param>
        <summary><span data-ttu-id="b3869-131">Inicializa uma instância de <see cref="T:System.Threading.Tasks.TaskFactory`1" /> com a configuração padrão.</span><span class="sxs-lookup"><span data-stu-id="b3869-131">Initializes a <see cref="T:System.Threading.Tasks.TaskFactory`1" /> instance with the default configuration.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3869-132">Este construtor cria um <xref:System.Threading.Tasks.TaskFactory%601> instância com uma configuração padrão.</span><span class="sxs-lookup"><span data-stu-id="b3869-132">This constructor creates a <xref:System.Threading.Tasks.TaskFactory%601> instance with a default configuration.</span></span> <span data-ttu-id="b3869-133">O <xref:System.Threading.Tasks.TaskCreationOptions> propriedade é inicializada para <xref:System.Threading.Tasks.TaskCreationOptions.None>, o <xref:System.Threading.Tasks.TaskContinuationOptions> propriedade é inicializada para <xref:System.Threading.Tasks.TaskContinuationOptions.None>e o <xref:System.Threading.Tasks.TaskScheduler> propriedade é inicializada para o Agendador atual (consulte <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span><span class="sxs-lookup"><span data-stu-id="b3869-133">The <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="b3869-134">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="b3869-134">Task Parallel Library (TPL)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskFactory (System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (scheduler As TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TaskFactory(System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.TaskFactory&lt;'Result&gt; : System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.TaskFactory&lt;'Result&gt;" Usage="new System.Threading.Tasks.TaskFactory&lt;'Result&gt; scheduler" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="scheduler"><span data-ttu-id="b3869-135">O agendador a ser usado para agendar as tarefas criadas com esta <see cref="T:System.Threading.Tasks.TaskFactory`1" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-135">The scheduler to use to schedule any tasks created with this <see cref="T:System.Threading.Tasks.TaskFactory`1" />.</span></span> <span data-ttu-id="b3869-136">Um valor nulo indica que o <see cref="T:System.Threading.Tasks.TaskScheduler" /> atual deve ser usado.</span><span class="sxs-lookup"><span data-stu-id="b3869-136">A null value indicates that the current <see cref="T:System.Threading.Tasks.TaskScheduler" /> should be used.</span></span></param>
        <summary><span data-ttu-id="b3869-137">Inicializa uma instância <see cref="T:System.Threading.Tasks.TaskFactory`1" /> com a configuração especificada.</span><span class="sxs-lookup"><span data-stu-id="b3869-137">Initializes a <see cref="T:System.Threading.Tasks.TaskFactory`1" /> instance with the specified configuration.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3869-138">Com esse construtor, o <xref:System.Threading.Tasks.TaskCreationOptions> propriedade é inicializada para <xref:System.Threading.Tasks.TaskCreationOptions.None>, o <xref:System.Threading.Tasks.TaskContinuationOptions> propriedade é inicializada para <xref:System.Threading.Tasks.TaskContinuationOptions.None>e o <xref:System.Threading.Tasks.TaskScheduler> propriedade é inicializada para `scheduler`, a menos que ele tem `null`, no Nesse caso, a propriedade é inicializada com o Agendador atual (consulte <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span><span class="sxs-lookup"><span data-stu-id="b3869-138">With this constructor, the <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to `scheduler`, unless it's `null`, in which case the property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.Tasks.TaskScheduler" />
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="b3869-139">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="b3869-139">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="b3869-140">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="b3869-140">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="b3869-141">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="b3869-141">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskFactory (System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (creationOptions As TaskCreationOptions, continuationOptions As TaskContinuationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TaskFactory(System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.TaskFactory&lt;'Result&gt; : System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.TaskFactory&lt;'Result&gt;" Usage="new System.Threading.Tasks.TaskFactory&lt;'Result&gt; (creationOptions, continuationOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <param name="creationOptions"><span data-ttu-id="b3869-142">As opções padrão a serem usadas ao criar tarefas com esta <see cref="T:System.Threading.Tasks.TaskFactory`1" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-142">The default options to use when creating tasks with this <see cref="T:System.Threading.Tasks.TaskFactory`1" />.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="b3869-143">As opções padrão a serem usadas ao criar tarefas de continuação com esta <see cref="T:System.Threading.Tasks.TaskFactory`1" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-143">The default options to use when creating continuation tasks with this <see cref="T:System.Threading.Tasks.TaskFactory`1" />.</span></span></param>
        <summary><span data-ttu-id="b3869-144">Inicializa uma instância <see cref="T:System.Threading.Tasks.TaskFactory`1" /> com a configuração especificada.</span><span class="sxs-lookup"><span data-stu-id="b3869-144">Initializes a <see cref="T:System.Threading.Tasks.TaskFactory`1" /> instance with the specified configuration.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3869-145">Com esse construtor, o <xref:System.Threading.Tasks.TaskCreationOptions> propriedade é inicializada para `creationOptions`, o <xref:System.Threading.Tasks.TaskContinuationOptions> propriedade é inicializada para `continuationOptions`e o <xref:System.Threading.Tasks.TaskScheduler> propriedade é inicializada para o Agendador atual (consulte <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span><span class="sxs-lookup"><span data-stu-id="b3869-145">With this constructor, the <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to `creationOptions`, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to `continuationOptions`, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b3869-146"><paramref name="creationOptions" /> ou <paramref name="continuationOptions" /> especifica um valor inválido.</span><span class="sxs-lookup"><span data-stu-id="b3869-146"><paramref name="creationOptions" /> or <paramref name="continuationOptions" /> specifies an invalid value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="b3869-147">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="b3869-147">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="b3869-148">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="b3869-148">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="b3869-149">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="b3869-149">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskFactory (System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TaskFactory(System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.TaskFactory&lt;'Result&gt; : System.Threading.CancellationToken * System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.TaskFactory&lt;'Result&gt;" Usage="new System.Threading.Tasks.TaskFactory&lt;'Result&gt; (cancellationToken, creationOptions, continuationOptions, scheduler)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"><span data-ttu-id="b3869-150">O token de cancelamento padrão que será atribuído às tarefas criadas por este <see cref="T:System.Threading.Tasks.TaskFactory" />, a menos que outro token de cancelamento seja especificado explicitamente ao chamar os métodos de fábrica.</span><span class="sxs-lookup"><span data-stu-id="b3869-150">The default cancellation token that will be assigned to tasks created by this <see cref="T:System.Threading.Tasks.TaskFactory" /> unless another cancellation token is explicitly specified when calling the factory methods.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="b3869-151">As opções padrão a serem usadas ao criar tarefas com esta <see cref="T:System.Threading.Tasks.TaskFactory`1" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-151">The default options to use when creating tasks with this <see cref="T:System.Threading.Tasks.TaskFactory`1" />.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="b3869-152">As opções padrão a serem usadas ao criar tarefas de continuação com esta <see cref="T:System.Threading.Tasks.TaskFactory`1" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-152">The default options to use when creating continuation tasks with this <see cref="T:System.Threading.Tasks.TaskFactory`1" />.</span></span></param>
        <param name="scheduler"><span data-ttu-id="b3869-153">O agendador padrão a ser usado para agendar as tarefas criadas com esta <see cref="T:System.Threading.Tasks.TaskFactory`1" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-153">The default scheduler to use to schedule any tasks created with this <see cref="T:System.Threading.Tasks.TaskFactory`1" />.</span></span> <span data-ttu-id="b3869-154">Um valor nulo indica que <see cref="P:System.Threading.Tasks.TaskScheduler.Current" /> deve ser usado.</span><span class="sxs-lookup"><span data-stu-id="b3869-154">A null value indicates that <see cref="P:System.Threading.Tasks.TaskScheduler.Current" /> should be used.</span></span></param>
        <summary><span data-ttu-id="b3869-155">Inicializa uma instância <see cref="T:System.Threading.Tasks.TaskFactory`1" /> com a configuração especificada.</span><span class="sxs-lookup"><span data-stu-id="b3869-155">Initializes a <see cref="T:System.Threading.Tasks.TaskFactory`1" /> instance with the specified configuration.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3869-156">Com esse construtor, o <xref:System.Threading.Tasks.TaskCreationOptions> propriedade é inicializada para `creationOptions`, o <xref:System.Threading.Tasks.TaskContinuationOptions> propriedade é inicializada para `continuationOptions`e o <xref:System.Threading.Tasks.TaskScheduler> propriedade é inicializada para `scheduler`, a menos que ele tem `null`, no Nesse caso, a propriedade é inicializada com o Agendador atual (consulte <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span><span class="sxs-lookup"><span data-stu-id="b3869-156">With this constructor, the <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to `creationOptions`, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to `continuationOptions`, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to `scheduler`, unless it's `null`, in which case the property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b3869-157"><paramref name="creationOptions" /> ou <paramref name="continuationOptions" /> especifica um valor inválido.</span><span class="sxs-lookup"><span data-stu-id="b3869-157"><paramref name="creationOptions" /> or <paramref name="continuationOptions" /> specifies an invalid value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="b3869-158">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="b3869-158">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="b3869-159">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="b3869-159">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="b3869-160">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="b3869-160">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CancellationToken">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationToken CancellationToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.CancellationToken CancellationToken" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.TaskFactory`1.CancellationToken" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CancellationToken As CancellationToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::CancellationToken CancellationToken { System::Threading::CancellationToken get(); };" />
      <MemberSignature Language="F#" Value="member this.CancellationToken : System.Threading.CancellationToken" Usage="System.Threading.Tasks.TaskFactory&lt;'Result&gt;.CancellationToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b3869-161">Obtém o token de cancelamento padrão desta fábrica de tarefas.</span><span class="sxs-lookup"><span data-stu-id="b3869-161">Gets the default cancellation token for this task factory.</span></span></summary>
        <value><span data-ttu-id="b3869-162">O token de cancelamento padrão para esta fábrica de tarefas.</span><span class="sxs-lookup"><span data-stu-id="b3869-162">The default cancellation token for this task factory.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3869-163">Essa propriedade retorna o token de cancelamento padrão que será atribuído a todas as tarefas criadas por essa fábrica, a menos que outro valor de token de cancelamento é explicitamente especificado durante a chamada para os métodos de fábrica de tarefas.</span><span class="sxs-lookup"><span data-stu-id="b3869-163">This property returns the default cancellation token that will be assigned to all tasks created by this factory unless another cancellation token value is explicitly specified during the call to the task factory methods.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="b3869-164">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="b3869-164">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="b3869-165">Usando TPL com outros padrões assíncronos</span><span class="sxs-lookup"><span data-stu-id="b3869-165">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinuationOptions">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.TaskContinuationOptions ContinuationOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.Tasks.TaskContinuationOptions ContinuationOptions" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.TaskFactory`1.ContinuationOptions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContinuationOptions As TaskContinuationOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Tasks::TaskContinuationOptions ContinuationOptions { System::Threading::Tasks::TaskContinuationOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.ContinuationOptions : System.Threading.Tasks.TaskContinuationOptions" Usage="System.Threading.Tasks.TaskFactory&lt;'Result&gt;.ContinuationOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskContinuationOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b3869-166">Obtém o valor de enumeração <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> para esta fábrica de tarefas.</span><span class="sxs-lookup"><span data-stu-id="b3869-166">Gets the <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> enumeration value for this task factory.</span></span></summary>
        <value><span data-ttu-id="b3869-167">Um dos valores de enumeração que especifica as opções de continuação de padrão para esta fábrica de tarefas.</span><span class="sxs-lookup"><span data-stu-id="b3869-167">One of the enumeration values that specifies the default continuation options for this task factory.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3869-168">Essa propriedade retorna o padrão de opções de continuação para esta fábrica.</span><span class="sxs-lookup"><span data-stu-id="b3869-168">This property returns the default continuation options for this factory.</span></span> <span data-ttu-id="b3869-169">Eles serão usados para criar todas as tarefas de continuação, a menos que outras opções são especificadas explicitamente durante as chamadas para métodos dessa fábrica.</span><span class="sxs-lookup"><span data-stu-id="b3869-169">They will be used to create all continuation tasks unless other options are explicitly specified during calls to this factory's methods.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="b3869-170">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="b3869-170">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="b3869-171">Usando TPL com outros padrões assíncronos</span><span class="sxs-lookup"><span data-stu-id="b3869-171">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ContinueWhenAll">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b3869-172">Cria uma tarefa de continuação que será iniciada após a conclusão de um conjunto de tarefas fornecidas.</span><span class="sxs-lookup"><span data-stu-id="b3869-172">Creates a continuation task that will be started upon the completion of a set of provided tasks.</span></span></summary>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="b3869-173">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="b3869-173">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="b3869-174">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="b3869-174">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="b3869-175">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="b3869-175">Task Cancellation</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ContinueWhenAll">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task[],TResult&gt; continuationFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAll(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task[], !TResult&gt; continuationFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAll (tasks As Task(), continuationFunction As Func(Of Task(), TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task ^&gt; ^, TResult&gt; ^ continuationFunction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task[], 'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task[],TResult&gt;" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="b3869-176">A matriz de tarefas da qual continuar.</span><span class="sxs-lookup"><span data-stu-id="b3869-176">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="b3869-177">O delegado de função a ser executado de forma assíncrona quando todas as tarefas na matriz <paramref name="tasks" /> forem concluídas.</span><span class="sxs-lookup"><span data-stu-id="b3869-177">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <summary><span data-ttu-id="b3869-178">Cria uma tarefa de continuação que será iniciada após a conclusão de um conjunto de tarefas fornecidas.</span><span class="sxs-lookup"><span data-stu-id="b3869-178">Creates a continuation task that will be started upon the completion of a set of provided tasks.</span></span></summary>
        <returns><span data-ttu-id="b3869-179">A nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="b3869-179">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3869-180">Após a conclusão, uma tarefa estiver em um desses estados: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, ou <xref:System.Threading.Tasks.TaskStatus.Canceled> estados.</span><span class="sxs-lookup"><span data-stu-id="b3869-180">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b3869-181">Um dos elementos na matriz <paramref name="tasks" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="b3869-181">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b3869-182">A matriz <paramref name="tasks" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-182"><paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b3869-183">- ou -</span><span class="sxs-lookup"><span data-stu-id="b3869-183">-or-</span></span> 
<span data-ttu-id="b3869-184">O <paramref name="continuationFunction" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-184">The <paramref name="continuationFunction" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b3869-185">A matriz <paramref name="tasks" /> contém um valor nulo ou está vazia.</span><span class="sxs-lookup"><span data-stu-id="b3869-185">The <paramref name="tasks" /> array contains a null value or is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="b3869-186">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="b3869-186">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="b3869-187">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="b3869-187">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="b3869-188">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="b3869-188">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task[],TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAll(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task[], !TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task ^&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task[], 'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task[],TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="b3869-189">A matriz de tarefas da qual continuar.</span><span class="sxs-lookup"><span data-stu-id="b3869-189">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="b3869-190">O delegado de função a ser executado de forma assíncrona quando todas as tarefas na matriz <paramref name="tasks" /> forem concluídas.</span><span class="sxs-lookup"><span data-stu-id="b3869-190">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="b3869-191">O token de cancelamento que será atribuído à nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="b3869-191">The cancellation token that will be assigned to the new continuation task.</span></span></param>
        <summary><span data-ttu-id="b3869-192">Cria uma tarefa de continuação que será iniciada após a conclusão de um conjunto de tarefas fornecidas.</span><span class="sxs-lookup"><span data-stu-id="b3869-192">Creates a continuation task that will be started upon the completion of a set of provided tasks.</span></span></summary>
        <returns><span data-ttu-id="b3869-193">A nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="b3869-193">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3869-194">Após a conclusão, uma tarefa estiver em um desses estados: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, ou <xref:System.Threading.Tasks.TaskStatus.Canceled> estados.</span><span class="sxs-lookup"><span data-stu-id="b3869-194">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b3869-195">Um dos elementos na matriz <paramref name="tasks" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="b3869-195">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="b3869-196">- ou -</span><span class="sxs-lookup"><span data-stu-id="b3869-196">-or-</span></span> 
<span data-ttu-id="b3869-197">O <see cref="T:System.Threading.CancellationTokenSource" /> que criou <paramref name="cancellationToken" /> já foi descartado.</span><span class="sxs-lookup"><span data-stu-id="b3869-197">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b3869-198">A matriz do <paramref name="tasks" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-198">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b3869-199">- ou -</span><span class="sxs-lookup"><span data-stu-id="b3869-199">-or-</span></span> 
 <span data-ttu-id="b3869-200"><paramref name="continuationFunction" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-200"><paramref name="continuationFunction" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b3869-201">A matriz <paramref name="tasks" /> contém um valor nulo ou está vazia.</span><span class="sxs-lookup"><span data-stu-id="b3869-201">The <paramref name="tasks" /> array contains a null value or is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="b3869-202">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="b3869-202">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="b3869-203">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="b3869-203">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="b3869-204">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="b3869-204">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task[],TResult&gt; continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAll(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task[], !TResult&gt; continuationFunction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAll (tasks As Task(), continuationFunction As Func(Of Task(), TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task ^&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task[], 'Result&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task[],TResult&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="b3869-205">A matriz de tarefas da qual continuar.</span><span class="sxs-lookup"><span data-stu-id="b3869-205">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="b3869-206">O delegado de função a ser executado de forma assíncrona quando todas as tarefas na matriz <paramref name="tasks" /> forem concluídas.</span><span class="sxs-lookup"><span data-stu-id="b3869-206">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="b3869-207">Um dos valores de enumeração que controla o comportamento da tarefa de continuação criada.</span><span class="sxs-lookup"><span data-stu-id="b3869-207">One of the enumeration values that controls the behavior of the created continuation task.</span></span> <span data-ttu-id="b3869-208">Os valores NotOn\* ou OnlyOn\* não são válidos.</span><span class="sxs-lookup"><span data-stu-id="b3869-208">The NotOn\* or OnlyOn\* values are not valid.</span></span></param>
        <summary><span data-ttu-id="b3869-209">Cria uma tarefa de continuação que será iniciada após a conclusão de um conjunto de Tarefas fornecidas.</span><span class="sxs-lookup"><span data-stu-id="b3869-209">Creates a continuation task that will be started upon the completion of a set of provided Tasks.</span></span></summary>
        <returns><span data-ttu-id="b3869-210">A nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="b3869-210">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3869-211">Após a conclusão, uma tarefa estiver em um desses estados: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, ou <xref:System.Threading.Tasks.TaskStatus.Canceled> estados.</span><span class="sxs-lookup"><span data-stu-id="b3869-211">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b3869-212">Um dos elementos na matriz <paramref name="tasks" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="b3869-212">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b3869-213">A matriz do <paramref name="tasks" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-213">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b3869-214">- ou -</span><span class="sxs-lookup"><span data-stu-id="b3869-214">-or-</span></span> 
<span data-ttu-id="b3869-215">O argumento <paramref name="continuationFunction" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-215">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b3869-216">O argumento <paramref name="continuationOptions" /> especifica um valor inválido.</span><span class="sxs-lookup"><span data-stu-id="b3869-216">The <paramref name="continuationOptions" /> argument specifies an invalid value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b3869-217">A matriz <paramref name="tasks" /> contém um valor nulo ou está vazia.</span><span class="sxs-lookup"><span data-stu-id="b3869-217">The <paramref name="tasks" /> array contains a null value or is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="b3869-218">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="b3869-218">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="b3869-219">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="b3869-219">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="b3869-220">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="b3869-220">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task[],TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAll(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task[], !TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task ^&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task[], 'Result&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task[],TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="b3869-221">A matriz de tarefas da qual continuar.</span><span class="sxs-lookup"><span data-stu-id="b3869-221">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="b3869-222">O delegado de função a ser executado de forma assíncrona quando todas as tarefas na matriz <paramref name="tasks" /> forem concluídas.</span><span class="sxs-lookup"><span data-stu-id="b3869-222">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="b3869-223">O token de cancelamento que será atribuído à nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="b3869-223">The cancellation token that will be assigned to the new continuation task.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="b3869-224">Um dos valores de enumeração que controla o comportamento da tarefa de continuação criada.</span><span class="sxs-lookup"><span data-stu-id="b3869-224">One of the enumeration values that controls the behavior of the created continuation task.</span></span> <span data-ttu-id="b3869-225">Os valores NotOn\* ou OnlyOn\* não são válidos.</span><span class="sxs-lookup"><span data-stu-id="b3869-225">The NotOn\* or OnlyOn\* values are not valid.</span></span></param>
        <param name="scheduler"><span data-ttu-id="b3869-226">O agendador usado para agendar a tarefa de continuação criada.</span><span class="sxs-lookup"><span data-stu-id="b3869-226">The scheduler that is used to schedule the created continuation task.</span></span></param>
        <summary><span data-ttu-id="b3869-227">Cria uma tarefa de continuação que será iniciada após a conclusão de um conjunto de Tarefas fornecidas.</span><span class="sxs-lookup"><span data-stu-id="b3869-227">Creates a continuation task that will be started upon the completion of a set of provided Tasks.</span></span></summary>
        <returns><span data-ttu-id="b3869-228">A nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="b3869-228">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3869-229">Após a conclusão, uma tarefa estiver em um desses estados: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, ou <xref:System.Threading.Tasks.TaskStatus.Canceled> estados.</span><span class="sxs-lookup"><span data-stu-id="b3869-229">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b3869-230">A matriz do <paramref name="tasks" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-230">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b3869-231">- ou -</span><span class="sxs-lookup"><span data-stu-id="b3869-231">-or-</span></span> 
<span data-ttu-id="b3869-232">O argumento <paramref name="continuationFunction" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-232">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b3869-233">- ou -</span><span class="sxs-lookup"><span data-stu-id="b3869-233">-or-</span></span> 
<span data-ttu-id="b3869-234">O argumento <paramref name="scheduler" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-234">The <paramref name="scheduler" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b3869-235">A matriz <paramref name="tasks" /> contém um valor nulo ou está vazia.</span><span class="sxs-lookup"><span data-stu-id="b3869-235">The <paramref name="tasks" /> array contains a null value or is empty.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b3869-236"><paramref name="continuationOptions" /> especifica um valor inválido.</span><span class="sxs-lookup"><span data-stu-id="b3869-236"><paramref name="continuationOptions" /> specifies an invalid value.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b3869-237">Um dos elementos na matriz <paramref name="tasks" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="b3869-237">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="b3869-238">- ou -</span><span class="sxs-lookup"><span data-stu-id="b3869-238">-or-</span></span> 
<span data-ttu-id="b3869-239">O <see cref="T:System.Threading.CancellationTokenSource" /> que criou <paramref name="cancellationToken" /> já foi descartado.</span><span class="sxs-lookup"><span data-stu-id="b3869-239">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="b3869-240">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="b3869-240">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="b3869-241">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="b3869-241">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="b3869-242">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="b3869-242">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt; continuationFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAll&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[], !TResult&gt; continuationFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAll(Of TAntecedentResult) (tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult)(), TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^, TResult&gt; ^ continuationFunction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[], 'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="b3869-243">O tipo do resultado da antecessora <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-243">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="b3869-244">A matriz de tarefas da qual continuar.</span><span class="sxs-lookup"><span data-stu-id="b3869-244">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="b3869-245">O delegado de função a ser executado de forma assíncrona quando todas as tarefas na matriz <paramref name="tasks" /> forem concluídas.</span><span class="sxs-lookup"><span data-stu-id="b3869-245">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <summary><span data-ttu-id="b3869-246">Cria uma tarefa de continuação que será iniciada após a conclusão de um conjunto de tarefas fornecidas.</span><span class="sxs-lookup"><span data-stu-id="b3869-246">Creates a continuation task that will be started upon the completion of a set of provided tasks.</span></span></summary>
        <returns><span data-ttu-id="b3869-247">A nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="b3869-247">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3869-248">Após a conclusão, uma tarefa estiver em um desses estados: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, ou <xref:System.Threading.Tasks.TaskStatus.Canceled> estados.</span><span class="sxs-lookup"><span data-stu-id="b3869-248">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b3869-249">Um dos elementos na matriz <paramref name="tasks" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="b3869-249">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b3869-250">A matriz do <paramref name="tasks" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-250">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b3869-251">- ou -</span><span class="sxs-lookup"><span data-stu-id="b3869-251">-or-</span></span> 
<span data-ttu-id="b3869-252">O argumento <paramref name="continuationFunction" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-252">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b3869-253">A matriz <paramref name="tasks" /> contém um valor nulo ou está vazia.</span><span class="sxs-lookup"><span data-stu-id="b3869-253">The <paramref name="tasks" /> array contains a null value or is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="b3869-254">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="b3869-254">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="b3869-255">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="b3869-255">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="b3869-256">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="b3869-256">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAll&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[], !TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[], 'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="b3869-257">O tipo do resultado da antecessora <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-257">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="b3869-258">A matriz de tarefas da qual continuar.</span><span class="sxs-lookup"><span data-stu-id="b3869-258">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="b3869-259">O delegado de função a ser executado de forma assíncrona quando todas as tarefas na matriz <paramref name="tasks" /> forem concluídas.</span><span class="sxs-lookup"><span data-stu-id="b3869-259">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="b3869-260">O token de cancelamento que será atribuído à nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="b3869-260">The cancellation token that will be assigned to the new continuation task.</span></span></param>
        <summary><span data-ttu-id="b3869-261">Cria uma tarefa de continuação que será iniciada após a conclusão de um conjunto de tarefas fornecidas.</span><span class="sxs-lookup"><span data-stu-id="b3869-261">Creates a continuation task that will be started upon the completion of a set of provided tasks.</span></span></summary>
        <returns><span data-ttu-id="b3869-262">A nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="b3869-262">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3869-263">Após a conclusão, uma tarefa estiver em um desses estados: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, ou <xref:System.Threading.Tasks.TaskStatus.Canceled> estados.</span><span class="sxs-lookup"><span data-stu-id="b3869-263">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b3869-264">Um dos elementos na matriz <paramref name="tasks" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="b3869-264">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="b3869-265">- ou -</span><span class="sxs-lookup"><span data-stu-id="b3869-265">-or-</span></span> 
<span data-ttu-id="b3869-266">O <see cref="T:System.Threading.CancellationTokenSource" /> que criou <paramref name="cancellationToken" /> já foi descartado.</span><span class="sxs-lookup"><span data-stu-id="b3869-266">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b3869-267">A matriz do <paramref name="tasks" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-267">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b3869-268">- ou -</span><span class="sxs-lookup"><span data-stu-id="b3869-268">-or-</span></span> 
<span data-ttu-id="b3869-269">O argumento <paramref name="continuationFunction" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-269">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b3869-270">A matriz <paramref name="tasks" /> contém um valor nulo ou está vazia.</span><span class="sxs-lookup"><span data-stu-id="b3869-270">The <paramref name="tasks" /> array contains a null value or is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="b3869-271">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="b3869-271">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="b3869-272">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="b3869-272">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="b3869-273">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="b3869-273">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt; continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAll&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[], !TResult&gt; continuationFunction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAll(Of TAntecedentResult) (tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult)(), TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[], 'Result&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="b3869-274">O tipo do resultado da antecessora <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-274">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="b3869-275">A matriz de tarefas da qual continuar.</span><span class="sxs-lookup"><span data-stu-id="b3869-275">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="b3869-276">O delegado de função a ser executado de forma assíncrona quando todas as tarefas na matriz <paramref name="tasks" /> forem concluídas.</span><span class="sxs-lookup"><span data-stu-id="b3869-276">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="b3869-277">Um dos valores de enumeração que controla o comportamento da tarefa de continuação criada.</span><span class="sxs-lookup"><span data-stu-id="b3869-277">One of the enumeration values that controls the behavior of the created continuation task.</span></span> <span data-ttu-id="b3869-278">Os valores NotOn\* ou OnlyOn\* não são válidos.</span><span class="sxs-lookup"><span data-stu-id="b3869-278">The NotOn\* or OnlyOn\* values are not valid.</span></span></param>
        <summary><span data-ttu-id="b3869-279">Cria uma tarefa de continuação que será iniciada após a conclusão de um conjunto de tarefas fornecidas.</span><span class="sxs-lookup"><span data-stu-id="b3869-279">Creates a continuation task that will be started upon the completion of a set of provided tasks.</span></span></summary>
        <returns><span data-ttu-id="b3869-280">A nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="b3869-280">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3869-281">Após a conclusão, uma tarefa estiver em um desses estados: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, ou <xref:System.Threading.Tasks.TaskStatus.Canceled> estados.</span><span class="sxs-lookup"><span data-stu-id="b3869-281">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b3869-282">Um dos elementos na matriz <paramref name="tasks" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="b3869-282">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b3869-283">A matriz do <paramref name="tasks" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-283">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b3869-284">- ou -</span><span class="sxs-lookup"><span data-stu-id="b3869-284">-or-</span></span> 
<span data-ttu-id="b3869-285">O argumento <paramref name="continuationFunction" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-285">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b3869-286">O argumento <paramref name="continuationOptions" /> especifica um valor inválido.</span><span class="sxs-lookup"><span data-stu-id="b3869-286">The <paramref name="continuationOptions" /> argument specifies an invalid value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b3869-287">A matriz <paramref name="tasks" /> contém um valor nulo ou está vazia.</span><span class="sxs-lookup"><span data-stu-id="b3869-287">The <paramref name="tasks" /> array contains a null value or is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="b3869-288">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="b3869-288">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="b3869-289">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="b3869-289">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="b3869-290">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="b3869-290">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAll&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[], !TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[], 'Result&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="b3869-291">O tipo do resultado da antecessora <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-291">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="b3869-292">A matriz de tarefas da qual continuar.</span><span class="sxs-lookup"><span data-stu-id="b3869-292">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="b3869-293">O delegado de função a ser executado de forma assíncrona quando todas as tarefas na matriz <paramref name="tasks" /> forem concluídas.</span><span class="sxs-lookup"><span data-stu-id="b3869-293">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="b3869-294">O token de cancelamento que será atribuído à nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="b3869-294">The cancellation token that will be assigned to the new continuation task.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="b3869-295">Um dos valores de enumeração que controla o comportamento da tarefa de continuação criada.</span><span class="sxs-lookup"><span data-stu-id="b3869-295">One of the enumeration values that controls the behavior of the created continuation task.</span></span> <span data-ttu-id="b3869-296">Os valores NotOn\* ou OnlyOn\* não são válidos.</span><span class="sxs-lookup"><span data-stu-id="b3869-296">The NotOn\* or OnlyOn\* values are not valid.</span></span></param>
        <param name="scheduler"><span data-ttu-id="b3869-297">O agendador usado para agendar a tarefa de continuação criada.</span><span class="sxs-lookup"><span data-stu-id="b3869-297">The scheduler that is used to schedule the created continuation task.</span></span></param>
        <summary><span data-ttu-id="b3869-298">Cria uma tarefa de continuação que será iniciada após a conclusão de um conjunto de tarefas fornecidas.</span><span class="sxs-lookup"><span data-stu-id="b3869-298">Creates a continuation task that will be started upon the completion of a set of provided tasks.</span></span></summary>
        <returns><span data-ttu-id="b3869-299">A nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="b3869-299">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3869-300">Após a conclusão, uma tarefa estiver em um desses estados: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, ou <xref:System.Threading.Tasks.TaskStatus.Canceled> estados.</span><span class="sxs-lookup"><span data-stu-id="b3869-300">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b3869-301">A matriz do <paramref name="tasks" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-301">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b3869-302">- ou -</span><span class="sxs-lookup"><span data-stu-id="b3869-302">-or-</span></span> 
<span data-ttu-id="b3869-303">O argumento <paramref name="continuationFunction" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-303">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b3869-304">- ou -</span><span class="sxs-lookup"><span data-stu-id="b3869-304">-or-</span></span> 
<span data-ttu-id="b3869-305">O argumento <paramref name="scheduler" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-305">The <paramref name="scheduler" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b3869-306">A matriz <paramref name="tasks" /> contém um valor nulo ou está vazia.</span><span class="sxs-lookup"><span data-stu-id="b3869-306">The <paramref name="tasks" /> array contains a null value or is empty.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b3869-307">O argumento <paramref name="continuationOptions" /> especifica um valor inválido.</span><span class="sxs-lookup"><span data-stu-id="b3869-307">The <paramref name="continuationOptions" /> argument specifies an invalid value.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b3869-308">Um dos elementos na matriz <paramref name="tasks" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="b3869-308">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="b3869-309">- ou -</span><span class="sxs-lookup"><span data-stu-id="b3869-309">-or-</span></span> 
<span data-ttu-id="b3869-310">O <see cref="T:System.Threading.CancellationTokenSource" /> que criou <paramref name="cancellationToken" /> já foi descartado.</span><span class="sxs-lookup"><span data-stu-id="b3869-310">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="b3869-311">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="b3869-311">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="b3869-312">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="b3869-312">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="b3869-313">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="b3869-313">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ContinueWhenAny">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b3869-314">Cria uma tarefa de continuação que será iniciada após a conclusão de qualquer tarefa no conjunto fornecido.</span><span class="sxs-lookup"><span data-stu-id="b3869-314">Creates a continuation task that will be started upon the completion of any task in the provided set.</span></span></summary>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="b3869-315">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="b3869-315">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="b3869-316">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="b3869-316">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="b3869-317">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="b3869-317">Task Cancellation</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ContinueWhenAny">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAny(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task, !TResult&gt; continuationFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAny (tasks As Task(), continuationFunction As Func(Of Task, TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task, 'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="b3869-318">A matriz de tarefas da qual continuar quando uma tarefa for concluída.</span><span class="sxs-lookup"><span data-stu-id="b3869-318">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="b3869-319">O delegado de função a ser executado de forma assíncrona quando uma tarefa na matriz <paramref name="tasks" /> for concluída.</span><span class="sxs-lookup"><span data-stu-id="b3869-319">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <summary><span data-ttu-id="b3869-320">Cria uma tarefa de continuação que será iniciada após a conclusão de qualquer tarefa no conjunto fornecido.</span><span class="sxs-lookup"><span data-stu-id="b3869-320">Creates a continuation task that will be started upon the completion of any task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="b3869-321">A nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="b3869-321">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3869-322">Após a conclusão, uma tarefa estiver em um desses estados: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, ou <xref:System.Threading.Tasks.TaskStatus.Canceled> estados.</span><span class="sxs-lookup"><span data-stu-id="b3869-322">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b3869-323">Um dos elementos na matriz <paramref name="tasks" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="b3869-323">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b3869-324">A matriz do <paramref name="tasks" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-324">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b3869-325">- ou -</span><span class="sxs-lookup"><span data-stu-id="b3869-325">-or-</span></span> 
<span data-ttu-id="b3869-326">O argumento <paramref name="continuationFunction" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-326">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b3869-327">A matriz <paramref name="tasks" /> contém um valor nulo ou está vazia.</span><span class="sxs-lookup"><span data-stu-id="b3869-327">The <paramref name="tasks" /> array contains a null value or is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="b3869-328">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="b3869-328">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="b3869-329">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="b3869-329">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="b3869-330">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="b3869-330">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAny(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task, !TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task, 'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="b3869-331">A matriz de tarefas da qual continuar quando uma tarefa for concluída.</span><span class="sxs-lookup"><span data-stu-id="b3869-331">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="b3869-332">O delegado de função a ser executado de forma assíncrona quando uma tarefa na matriz <paramref name="tasks" /> for concluída.</span><span class="sxs-lookup"><span data-stu-id="b3869-332">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="b3869-333">O token de cancelamento que será atribuído à nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="b3869-333">The cancellation token that will be assigned to the new continuation task.</span></span></param>
        <summary><span data-ttu-id="b3869-334">Cria uma tarefa de continuação que será iniciada após a conclusão de qualquer tarefa no conjunto fornecido.</span><span class="sxs-lookup"><span data-stu-id="b3869-334">Creates a continuation task that will be started upon the completion of any task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="b3869-335">A nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="b3869-335">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3869-336">Após a conclusão, uma tarefa estiver em um desses estados: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, ou <xref:System.Threading.Tasks.TaskStatus.Canceled> estados.</span><span class="sxs-lookup"><span data-stu-id="b3869-336">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b3869-337">Um dos elementos na matriz <paramref name="tasks" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="b3869-337">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="b3869-338">- ou -</span><span class="sxs-lookup"><span data-stu-id="b3869-338">-or-</span></span> 
<span data-ttu-id="b3869-339">O <see cref="T:System.Threading.CancellationTokenSource" /> que criou <paramref name="cancellationToken" /> já foi descartado.</span><span class="sxs-lookup"><span data-stu-id="b3869-339">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b3869-340">A matriz <paramref name="tasks" /> é nula.</span><span class="sxs-lookup"><span data-stu-id="b3869-340">The <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="b3869-341">- ou -</span><span class="sxs-lookup"><span data-stu-id="b3869-341">-or-</span></span> 
<span data-ttu-id="b3869-342">O argumento <paramref name="continuationFunction" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="b3869-342">The <paramref name="continuationFunction" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b3869-343">A matriz <paramref name="tasks" /> contém um valor nulo.</span><span class="sxs-lookup"><span data-stu-id="b3869-343">The <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="b3869-344">- ou -</span><span class="sxs-lookup"><span data-stu-id="b3869-344">-or-</span></span> 
<span data-ttu-id="b3869-345">A matriz <paramref name="tasks" /> está vazia.</span><span class="sxs-lookup"><span data-stu-id="b3869-345">The <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="b3869-346">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="b3869-346">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="b3869-347">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="b3869-347">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="b3869-348">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="b3869-348">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAny(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task, !TResult&gt; continuationFunction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAny (tasks As Task(), continuationFunction As Func(Of Task, TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task, 'Result&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="b3869-349">A matriz de tarefas da qual continuar quando uma tarefa for concluída.</span><span class="sxs-lookup"><span data-stu-id="b3869-349">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="b3869-350">O delegado de função a ser executado de forma assíncrona quando uma tarefa na matriz <paramref name="tasks" /> for concluída.</span><span class="sxs-lookup"><span data-stu-id="b3869-350">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="b3869-351">Um dos valores de enumeração que controla o comportamento da tarefa de continuação criada.</span><span class="sxs-lookup"><span data-stu-id="b3869-351">One of the enumeration values that controls the behavior of the created continuation task.</span></span> <span data-ttu-id="b3869-352">Os valores <see langword="NotOn*" /> ou <see langword="OnlyOn*" /> não são válidos.</span><span class="sxs-lookup"><span data-stu-id="b3869-352">The <see langword="NotOn*" /> or <see langword="OnlyOn*" /> values are not valid.</span></span></param>
        <summary><span data-ttu-id="b3869-353">Cria uma tarefa de continuação que será iniciada após a conclusão de qualquer tarefa no conjunto fornecido.</span><span class="sxs-lookup"><span data-stu-id="b3869-353">Creates a continuation task that will be started upon the completion of any task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="b3869-354">A nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="b3869-354">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3869-355">Após a conclusão, uma tarefa estiver em um desses estados: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, ou <xref:System.Threading.Tasks.TaskStatus.Canceled> estados.</span><span class="sxs-lookup"><span data-stu-id="b3869-355">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b3869-356">Um dos elementos na matriz <paramref name="tasks" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="b3869-356">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b3869-357">A matriz do <paramref name="tasks" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-357">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b3869-358">- ou -</span><span class="sxs-lookup"><span data-stu-id="b3869-358">-or-</span></span> 
<span data-ttu-id="b3869-359">O argumento <paramref name="continuationFunction" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-359">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b3869-360">O argumento <paramref name="continuationOptions" /> especifica um valor de enumeração inválido.</span><span class="sxs-lookup"><span data-stu-id="b3869-360">The <paramref name="continuationOptions" /> argument specifies an invalid enumeration value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b3869-361">A matriz <paramref name="tasks" /> contém um valor nulo.</span><span class="sxs-lookup"><span data-stu-id="b3869-361">The <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="b3869-362">- ou -</span><span class="sxs-lookup"><span data-stu-id="b3869-362">-or-</span></span> 
<span data-ttu-id="b3869-363">A matriz <paramref name="tasks" /> está vazia.</span><span class="sxs-lookup"><span data-stu-id="b3869-363">The <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="b3869-364">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="b3869-364">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="b3869-365">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="b3869-365">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="b3869-366">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="b3869-366">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAny(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task, !TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task, 'Result&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="b3869-367">A matriz de tarefas da qual continuar quando uma tarefa for concluída.</span><span class="sxs-lookup"><span data-stu-id="b3869-367">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="b3869-368">O delegado de função a ser executado de forma assíncrona quando uma tarefa na matriz <paramref name="tasks" /> for concluída.</span><span class="sxs-lookup"><span data-stu-id="b3869-368">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="b3869-369">O token de cancelamento que será atribuído à nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="b3869-369">The cancellation token that will be assigned to the new continuation task.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="b3869-370">Um dos valores de enumeração que controla o comportamento da tarefa de continuação criada.</span><span class="sxs-lookup"><span data-stu-id="b3869-370">One of the enumeration values that controls the behavior of the created continuation task.</span></span> <span data-ttu-id="b3869-371">Os valores <see langword="NotOn*" /> ou <see langword="OnlyOn*" /> não são válidos.</span><span class="sxs-lookup"><span data-stu-id="b3869-371">The <see langword="NotOn*" /> or <see langword="OnlyOn*" /> values are not valid.</span></span></param>
        <param name="scheduler"><span data-ttu-id="b3869-372">O agendador de tarefas usado para agendar a tarefa de continuação criada.</span><span class="sxs-lookup"><span data-stu-id="b3869-372">The task scheduler that is used to schedule the created continuation task.</span></span></param>
        <summary><span data-ttu-id="b3869-373">Cria uma tarefa de continuação que será iniciada após a conclusão de qualquer tarefa no conjunto fornecido.</span><span class="sxs-lookup"><span data-stu-id="b3869-373">Creates a continuation task that will be started upon the completion of any task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="b3869-374">A nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="b3869-374">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3869-375">Após a conclusão, uma tarefa estiver em um desses estados: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, ou <xref:System.Threading.Tasks.TaskStatus.Canceled> estados.</span><span class="sxs-lookup"><span data-stu-id="b3869-375">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b3869-376">A matriz do <paramref name="tasks" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-376">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b3869-377">- ou -</span><span class="sxs-lookup"><span data-stu-id="b3869-377">-or-</span></span> 
<span data-ttu-id="b3869-378">O argumento <paramref name="continuationFunction" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-378">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b3869-379">- ou -</span><span class="sxs-lookup"><span data-stu-id="b3869-379">-or-</span></span> 
<span data-ttu-id="b3869-380">O argumento <paramref name="scheduler" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-380">The <paramref name="scheduler" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b3869-381">A matriz <paramref name="tasks" /> contém um valor nulo.</span><span class="sxs-lookup"><span data-stu-id="b3869-381">The <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="b3869-382">- ou -</span><span class="sxs-lookup"><span data-stu-id="b3869-382">-or-</span></span> 
<span data-ttu-id="b3869-383">A matriz <paramref name="tasks" /> está vazia.</span><span class="sxs-lookup"><span data-stu-id="b3869-383">The <paramref name="tasks" /> array is empty.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b3869-384">O argumento <paramref name="continuationOptions" /> especifica um valor <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> inválido.</span><span class="sxs-lookup"><span data-stu-id="b3869-384">The <paramref name="continuationOptions" /> argument specifies an invalid <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b3869-385">Um dos elementos na matriz <paramref name="tasks" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="b3869-385">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="b3869-386">- ou -</span><span class="sxs-lookup"><span data-stu-id="b3869-386">-or-</span></span> 
<span data-ttu-id="b3869-387">O <see cref="T:System.Threading.CancellationTokenSource" /> que criou <paramref name="cancellationToken" /> já foi descartado.</span><span class="sxs-lookup"><span data-stu-id="b3869-387">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <altmember cref="T:System.Threading.Tasks.TaskScheduler" />
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="b3869-388">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="b3869-388">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="b3869-389">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="b3869-389">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="b3869-390">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="b3869-390">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt; continuationFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAny&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;, !TResult&gt; continuationFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAny(Of TAntecedentResult) (tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult), TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^, TResult&gt; ^ continuationFunction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;, 'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="b3869-391">O tipo do resultado da antecessora <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-391">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="b3869-392">A matriz de tarefas da qual continuar quando uma tarefa for concluída.</span><span class="sxs-lookup"><span data-stu-id="b3869-392">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="b3869-393">O delegado de função a ser executado de forma assíncrona quando uma tarefa na matriz <paramref name="tasks" /> for concluída.</span><span class="sxs-lookup"><span data-stu-id="b3869-393">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <summary><span data-ttu-id="b3869-394">Cria uma tarefa de continuação que será iniciada após a conclusão de qualquer tarefa no conjunto fornecido.</span><span class="sxs-lookup"><span data-stu-id="b3869-394">Creates a continuation task that will be started upon the completion of any task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="b3869-395">O novo <see cref="T:System.Threading.Tasks.Task`1" /> de continuação.</span><span class="sxs-lookup"><span data-stu-id="b3869-395">The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3869-396">Após a conclusão, uma tarefa estiver em um desses estados: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, ou <xref:System.Threading.Tasks.TaskStatus.Canceled> estados.</span><span class="sxs-lookup"><span data-stu-id="b3869-396">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b3869-397">Um dos elementos na matriz <paramref name="tasks" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="b3869-397">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b3869-398">A matriz do <paramref name="tasks" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-398">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b3869-399">- ou -</span><span class="sxs-lookup"><span data-stu-id="b3869-399">-or-</span></span> 
<span data-ttu-id="b3869-400">O argumento <paramref name="continuationFunction" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-400">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b3869-401">A matriz <paramref name="tasks" /> contém um valor nulo.</span><span class="sxs-lookup"><span data-stu-id="b3869-401">The <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="b3869-402">- ou -</span><span class="sxs-lookup"><span data-stu-id="b3869-402">-or-</span></span> 
<span data-ttu-id="b3869-403">A matriz <paramref name="tasks" /> está vazia.</span><span class="sxs-lookup"><span data-stu-id="b3869-403">The <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="b3869-404">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="b3869-404">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="b3869-405">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="b3869-405">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="b3869-406">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="b3869-406">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAny&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;, !TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;, 'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="b3869-407">O tipo do resultado da antecessora <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-407">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="b3869-408">A matriz de tarefas da qual continuar quando uma tarefa for concluída.</span><span class="sxs-lookup"><span data-stu-id="b3869-408">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="b3869-409">O delegado de função a ser executado de forma assíncrona quando uma tarefa na matriz <paramref name="tasks" /> for concluída.</span><span class="sxs-lookup"><span data-stu-id="b3869-409">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="b3869-410">O token de cancelamento que será atribuído à nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="b3869-410">The cancellation token that will be assigned to the new continuation task.</span></span></param>
        <summary><span data-ttu-id="b3869-411">Cria uma tarefa de continuação que será iniciada após a conclusão de qualquer tarefa no conjunto fornecido.</span><span class="sxs-lookup"><span data-stu-id="b3869-411">Creates a continuation task that will be started upon the completion of any task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="b3869-412">A nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="b3869-412">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3869-413">Após a conclusão, uma tarefa estiver em um desses estados: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, ou <xref:System.Threading.Tasks.TaskStatus.Canceled> estados.</span><span class="sxs-lookup"><span data-stu-id="b3869-413">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b3869-414">Um dos elementos na matriz <paramref name="tasks" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="b3869-414">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="b3869-415">- ou -</span><span class="sxs-lookup"><span data-stu-id="b3869-415">-or-</span></span> 
<span data-ttu-id="b3869-416">O <see cref="T:System.Threading.CancellationTokenSource" /> que criou <paramref name="cancellationToken" /> já foi descartado.</span><span class="sxs-lookup"><span data-stu-id="b3869-416">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b3869-417">A matriz do <paramref name="tasks" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-417">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b3869-418">- ou -</span><span class="sxs-lookup"><span data-stu-id="b3869-418">-or-</span></span> 
<span data-ttu-id="b3869-419">O argumento <paramref name="continuationFunction" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-419">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b3869-420">A matriz <paramref name="tasks" /> contém um valor nulo.</span><span class="sxs-lookup"><span data-stu-id="b3869-420">The <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="b3869-421">- ou -</span><span class="sxs-lookup"><span data-stu-id="b3869-421">-or-</span></span> 
<span data-ttu-id="b3869-422">A matriz <paramref name="tasks" /> está vazia.</span><span class="sxs-lookup"><span data-stu-id="b3869-422">The <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="b3869-423">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="b3869-423">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="b3869-424">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="b3869-424">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="b3869-425">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="b3869-425">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt; continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAny&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;, !TResult&gt; continuationFunction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAny(Of TAntecedentResult) (tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult), TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;, 'Result&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="b3869-426">O tipo do resultado da antecessora <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-426">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="b3869-427">A matriz de tarefas da qual continuar quando uma tarefa for concluída.</span><span class="sxs-lookup"><span data-stu-id="b3869-427">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="b3869-428">O delegado de função a ser executado de forma assíncrona quando uma tarefa na matriz <paramref name="tasks" /> for concluída.</span><span class="sxs-lookup"><span data-stu-id="b3869-428">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="b3869-429">Um dos valores de enumeração que controla o comportamento da tarefa de continuação criada.</span><span class="sxs-lookup"><span data-stu-id="b3869-429">One of the enumeration values that controls the behavior of the created continuation task.</span></span> <span data-ttu-id="b3869-430">Os valores <see langword="NotOn*" /> ou <see langword="OnlyOn*" /> não são válidos.</span><span class="sxs-lookup"><span data-stu-id="b3869-430">The <see langword="NotOn*" /> or <see langword="OnlyOn*" /> values are not valid.</span></span></param>
        <summary><span data-ttu-id="b3869-431">Cria uma tarefa de continuação que será iniciada após a conclusão de qualquer tarefa no conjunto fornecido.</span><span class="sxs-lookup"><span data-stu-id="b3869-431">Creates a continuation task that will be started upon the completion of any task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="b3869-432">O novo <see cref="T:System.Threading.Tasks.Task`1" /> de continuação.</span><span class="sxs-lookup"><span data-stu-id="b3869-432">The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3869-433">Após a conclusão, uma tarefa estiver em um desses estados: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, ou <xref:System.Threading.Tasks.TaskStatus.Canceled> estados.</span><span class="sxs-lookup"><span data-stu-id="b3869-433">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b3869-434">Um dos elementos na matriz <paramref name="tasks" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="b3869-434">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b3869-435">A matriz do <paramref name="tasks" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-435">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b3869-436">- ou -</span><span class="sxs-lookup"><span data-stu-id="b3869-436">-or-</span></span> 
<span data-ttu-id="b3869-437">O argumento <paramref name="continuationFunction" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-437">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b3869-438">O argumento <paramref name="continuationOptions" /> especifica um valor de enumeração inválido.</span><span class="sxs-lookup"><span data-stu-id="b3869-438">The <paramref name="continuationOptions" /> argument specifies an invalid enumeration value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b3869-439">A matriz <paramref name="tasks" /> contém um valor nulo.</span><span class="sxs-lookup"><span data-stu-id="b3869-439">The <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="b3869-440">- ou -</span><span class="sxs-lookup"><span data-stu-id="b3869-440">-or-</span></span> 
<span data-ttu-id="b3869-441">A matriz <paramref name="tasks" /> está vazia.</span><span class="sxs-lookup"><span data-stu-id="b3869-441">The <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="b3869-442">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="b3869-442">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="b3869-443">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="b3869-443">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="b3869-444">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="b3869-444">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAny&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;, !TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;, 'Result&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="b3869-445">O tipo do resultado da antecessora <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-445">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="b3869-446">A matriz de tarefas da qual continuar quando uma tarefa for concluída.</span><span class="sxs-lookup"><span data-stu-id="b3869-446">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="b3869-447">O delegado de função a ser executado de forma assíncrona quando uma tarefa na matriz <paramref name="tasks" /> for concluída.</span><span class="sxs-lookup"><span data-stu-id="b3869-447">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="b3869-448">O token de cancelamento que será atribuído à nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="b3869-448">The cancellation token that will be assigned to the new continuation task.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="b3869-449">Um dos valores de enumeração que controla o comportamento da tarefa de continuação criada.</span><span class="sxs-lookup"><span data-stu-id="b3869-449">One of the enumeration values that controls the behavior of the created continuation task.</span></span> <span data-ttu-id="b3869-450">Os valores <see langword="NotOn*" /> ou <see langword="OnlyOn*" /> não são válidos.</span><span class="sxs-lookup"><span data-stu-id="b3869-450">The <see langword="NotOn*" /> or <see langword="OnlyOn*" /> values are not valid.</span></span></param>
        <param name="scheduler"><span data-ttu-id="b3869-451">O <see cref="T:System.Threading.Tasks.TaskScheduler" /> usado para agendar a <see cref="T:System.Threading.Tasks.Task`1" /> de continuação criada.</span><span class="sxs-lookup"><span data-stu-id="b3869-451">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="b3869-452">Cria uma tarefa de continuação que será iniciada após a conclusão de qualquer tarefa no conjunto fornecido.</span><span class="sxs-lookup"><span data-stu-id="b3869-452">Creates a continuation task that will be started upon the completion of any task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="b3869-453">O novo <see cref="T:System.Threading.Tasks.Task`1" /> de continuação.</span><span class="sxs-lookup"><span data-stu-id="b3869-453">The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3869-454">Após a conclusão, uma tarefa estiver em um desses estados: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, ou <xref:System.Threading.Tasks.TaskStatus.Canceled> estados.</span><span class="sxs-lookup"><span data-stu-id="b3869-454">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b3869-455">A matriz do <paramref name="tasks" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-455">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b3869-456">- ou -</span><span class="sxs-lookup"><span data-stu-id="b3869-456">-or-</span></span> 
<span data-ttu-id="b3869-457">O argumento <paramref name="continuationFunction" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-457">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b3869-458">- ou -</span><span class="sxs-lookup"><span data-stu-id="b3869-458">-or-</span></span> 
<span data-ttu-id="b3869-459">O argumento <paramref name="scheduler" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="b3869-459">The <paramref name="scheduler" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b3869-460">A matriz <paramref name="tasks" /> contém um valor nulo.</span><span class="sxs-lookup"><span data-stu-id="b3869-460">The <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="b3869-461">- ou -</span><span class="sxs-lookup"><span data-stu-id="b3869-461">-or-</span></span> 
<span data-ttu-id="b3869-462">A matriz <paramref name="tasks" /> está vazia.</span><span class="sxs-lookup"><span data-stu-id="b3869-462">The <paramref name="tasks" /> array is empty.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b3869-463">O argumento <paramref name="continuationOptions" /> especifica um valor de TaskContinuationOptions inválido.</span><span class="sxs-lookup"><span data-stu-id="b3869-463">The <paramref name="continuationOptions" /> argument specifies an invalid TaskContinuationOptions value.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b3869-464">Um dos elementos na matriz <paramref name="tasks" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="b3869-464">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="b3869-465">- ou -</span><span class="sxs-lookup"><span data-stu-id="b3869-465">-or-</span></span> 
<span data-ttu-id="b3869-466">O <see cref="T:System.Threading.CancellationTokenSource" /> que criou <paramref name="cancellationToken" /> já foi descartado.</span><span class="sxs-lookup"><span data-stu-id="b3869-466">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="b3869-467">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="b3869-467">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="b3869-468">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="b3869-468">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="b3869-469">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="b3869-469">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CreationOptions">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.TaskCreationOptions CreationOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.Tasks.TaskCreationOptions CreationOptions" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.TaskFactory`1.CreationOptions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CreationOptions As TaskCreationOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Tasks::TaskCreationOptions CreationOptions { System::Threading::Tasks::TaskCreationOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.CreationOptions : System.Threading.Tasks.TaskCreationOptions" Usage="System.Threading.Tasks.TaskFactory&lt;'Result&gt;.CreationOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskCreationOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b3869-470">Obtém o valor de enumeração <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> para esta fábrica de tarefas.</span><span class="sxs-lookup"><span data-stu-id="b3869-470">Gets the <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> enumeration value for this task factory.</span></span></summary>
        <value><span data-ttu-id="b3869-471">Um dos valores de enumeração que especifica as opções de criação padrão para esta fábrica de tarefas.</span><span class="sxs-lookup"><span data-stu-id="b3869-471">One of the enumeration values that specifies the default creation options for this task factory.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3869-472">Essa propriedade retorna o padrão de opções de criação para esta fábrica.</span><span class="sxs-lookup"><span data-stu-id="b3869-472">This property returns the default creation options for this factory.</span></span> <span data-ttu-id="b3869-473">Eles serão usados para criar todas as tarefas, a menos que outras opções são especificadas explicitamente durante as chamadas para métodos dessa fábrica.</span><span class="sxs-lookup"><span data-stu-id="b3869-473">They will be used to create all tasks unless other options are explicitly specified during calls to this factory's methods.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="b3869-474">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="b3869-474">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="b3869-475">Usando TPL com outros padrões assíncronos</span><span class="sxs-lookup"><span data-stu-id="b3869-475">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="FromAsync">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b3869-476">Cria uma instância de tarefa.</span><span class="sxs-lookup"><span data-stu-id="b3869-476">Creates a task instance.</span></span></summary>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="b3869-477">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="b3869-477">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="b3869-478">Usando TPL com outros padrões assíncronos</span><span class="sxs-lookup"><span data-stu-id="b3869-478">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="FromAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync (IAsyncResult asyncResult, Func&lt;IAsyncResult,TResult&gt; endMethod);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; FromAsync(class System.IAsyncResult asyncResult, class System.Func`2&lt;class System.IAsyncResult, !TResult&gt; endMethod) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync (asyncResult As IAsyncResult, endMethod As Func(Of IAsyncResult, TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(IAsyncResult ^ asyncResult, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : IAsyncResult * Func&lt;IAsyncResult, 'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (asyncResult, endMethod)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="b3869-479">O <see cref="T:System.IAsyncResult" /> cuja conclusão deve disparar o processamento do <paramref name="endMethod" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-479">The <see cref="T:System.IAsyncResult" /> whose completion should trigger the processing of the <paramref name="endMethod" />.</span></span></param>
        <param name="endMethod"><span data-ttu-id="b3869-480">O delegado da função que processa o <paramref name="asyncResult" /> concluído.</span><span class="sxs-lookup"><span data-stu-id="b3869-480">The function delegate that processes the completed <paramref name="asyncResult" />.</span></span></param>
        <summary><span data-ttu-id="b3869-481">Cria uma tarefa que executa uma função do método de encerramento quando um <see cref="T:System.IAsyncResult" /> especificado é concluído.</span><span class="sxs-lookup"><span data-stu-id="b3869-481">Creates a task that executes an end method function when a specified <see cref="T:System.IAsyncResult" /> completes.</span></span></summary>
        <returns><span data-ttu-id="b3869-482">Um <see cref="T:System.Threading.Tasks.Task`1" /> que representa a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="b3869-482">A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b3869-483">O argumento <paramref name="asyncResult" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-483">The <paramref name="asyncResult" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b3869-484">- ou -</span><span class="sxs-lookup"><span data-stu-id="b3869-484">-or-</span></span> 
<span data-ttu-id="b3869-485">O argumento <paramref name="endMethod" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-485">The <paramref name="endMethod" /> argument is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="b3869-486">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="b3869-486">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="b3869-487">Usando TPL com outros padrões assíncronos</span><span class="sxs-lookup"><span data-stu-id="b3869-487">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync (Func&lt;AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; FromAsync(class System.Func`3&lt;class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !TResult&gt; endMethod, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync (beginMethod As Func(Of AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), state As Object) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="beginMethod"><span data-ttu-id="b3869-488">O delegado que inicia a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="b3869-488">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="b3869-489">O delegado que finaliza a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="b3869-489">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="state"><span data-ttu-id="b3869-490">Um objeto que contém dados a serem usados pelo delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-490">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <summary><span data-ttu-id="b3869-491">Cria uma tarefa que representa um par de métodos de início e de encerramento que estão em conformidade com o padrão do Modelo de Programação Assíncrona.</span><span class="sxs-lookup"><span data-stu-id="b3869-491">Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="b3869-492">A tarefa criada que representa a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="b3869-492">The created task that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3869-493">Esse método gera as exceções geradas pelo `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="b3869-493">This method throws any exceptions thrown by the `beginMethod`.</span></span> <span data-ttu-id="b3869-494">Exceções para `endmethod` são geradas quando aguardando a tarefa retornada.</span><span class="sxs-lookup"><span data-stu-id="b3869-494">Exceptions for `endmethod` are thrown when waiting on the returned task.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b3869-495">O argumento <paramref name="beginMethod" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-495">The <paramref name="beginMethod" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b3869-496">- ou -</span><span class="sxs-lookup"><span data-stu-id="b3869-496">-or-</span></span> 
<span data-ttu-id="b3869-497">O argumento <paramref name="endMethod" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-497">The <paramref name="endMethod" /> argument is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="b3869-498">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="b3869-498">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="b3869-499">Usando TPL com outros padrões assíncronos</span><span class="sxs-lookup"><span data-stu-id="b3869-499">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync (IAsyncResult asyncResult, Func&lt;IAsyncResult,TResult&gt; endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; FromAsync(class System.IAsyncResult asyncResult, class System.Func`2&lt;class System.IAsyncResult, !TResult&gt; endMethod, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync (asyncResult As IAsyncResult, endMethod As Func(Of IAsyncResult, TResult), creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(IAsyncResult ^ asyncResult, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : IAsyncResult * Func&lt;IAsyncResult, 'Result&gt; * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (asyncResult, endMethod, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="b3869-500">O <see cref="T:System.IAsyncResult" /> cuja conclusão deve disparar o processamento do <paramref name="endMethod" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-500">The <see cref="T:System.IAsyncResult" /> whose completion should trigger the processing of the <paramref name="endMethod" />.</span></span></param>
        <param name="endMethod"><span data-ttu-id="b3869-501">O delegado da função que processa o <paramref name="asyncResult" /> concluído.</span><span class="sxs-lookup"><span data-stu-id="b3869-501">The function delegate that processes the completed <paramref name="asyncResult" />.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="b3869-502">Um dos valores de enumeração que controla o comportamento da tarefa criada.</span><span class="sxs-lookup"><span data-stu-id="b3869-502">One of the enumeration values that controls the behavior of the created task.</span></span></param>
        <summary><span data-ttu-id="b3869-503">Cria uma tarefa que executa uma função do método de encerramento quando um <see cref="T:System.IAsyncResult" /> especificado é concluído.</span><span class="sxs-lookup"><span data-stu-id="b3869-503">Creates a task that executes an end method function when a specified <see cref="T:System.IAsyncResult" /> completes.</span></span></summary>
        <returns><span data-ttu-id="b3869-504">Uma tarefa que representa a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="b3869-504">A task that represents the asynchronous operation.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b3869-505">O argumento <paramref name="asyncResult" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-505">The <paramref name="asyncResult" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b3869-506">- ou -</span><span class="sxs-lookup"><span data-stu-id="b3869-506">-or-</span></span> 
<span data-ttu-id="b3869-507">O argumento <paramref name="endMethod" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-507">The <paramref name="endMethod" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b3869-508">O argumento <paramref name="creationOptions" /> especifica um valor inválido.</span><span class="sxs-lookup"><span data-stu-id="b3869-508">The <paramref name="creationOptions" /> argument specifies an invalid value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="b3869-509">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="b3869-509">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="b3869-510">Usando TPL com outros padrões assíncronos</span><span class="sxs-lookup"><span data-stu-id="b3869-510">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync (Func&lt;AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; FromAsync(class System.Func`3&lt;class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !TResult&gt; endMethod, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync (beginMethod As Func(Of AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="beginMethod"><span data-ttu-id="b3869-511">O delegado que inicia a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="b3869-511">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="b3869-512">O delegado que finaliza a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="b3869-512">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="state"><span data-ttu-id="b3869-513">Um objeto que contém dados a serem usados pelo delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-513">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="b3869-514">Um dos valores de enumeração que controla o comportamento da tarefa criada.</span><span class="sxs-lookup"><span data-stu-id="b3869-514">One of the enumeration values that controls the behavior of the created task.</span></span></param>
        <summary><span data-ttu-id="b3869-515">Cria uma tarefa que representa um par de métodos de início e de encerramento que estão em conformidade com o padrão do Modelo de Programação Assíncrona.</span><span class="sxs-lookup"><span data-stu-id="b3869-515">Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="b3869-516">O <see cref="T:System.Threading.Tasks.Task`1" /> criado que representa a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="b3869-516">The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3869-517">Esse método gera as exceções geradas pelo `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="b3869-517">This method throws any exceptions thrown by the `beginMethod`.</span></span> <span data-ttu-id="b3869-518">Exceções para `endmethod` são geradas quando aguardando a tarefa retornada.</span><span class="sxs-lookup"><span data-stu-id="b3869-518">Exceptions for `endmethod` are thrown when waiting on the returned task.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b3869-519">O argumento <paramref name="beginMethod" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-519">The <paramref name="beginMethod" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b3869-520">- ou -</span><span class="sxs-lookup"><span data-stu-id="b3869-520">-or-</span></span> 
<span data-ttu-id="b3869-521">O argumento <paramref name="endMethod" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-521">The <paramref name="endMethod" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b3869-522">O argumento <paramref name="creationOptions" /> especifica um valor inválido.</span><span class="sxs-lookup"><span data-stu-id="b3869-522">The <paramref name="creationOptions" /> argument specifies an invalid value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="b3869-523">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="b3869-523">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="b3869-524">Usando TPL com outros padrões assíncronos</span><span class="sxs-lookup"><span data-stu-id="b3869-524">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync (IAsyncResult asyncResult, Func&lt;IAsyncResult,TResult&gt; endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; FromAsync(class System.IAsyncResult asyncResult, class System.Func`2&lt;class System.IAsyncResult, !TResult&gt; endMethod, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync (asyncResult As IAsyncResult, endMethod As Func(Of IAsyncResult, TResult), creationOptions As TaskCreationOptions, scheduler As TaskScheduler) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(IAsyncResult ^ asyncResult, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : IAsyncResult * Func&lt;IAsyncResult, 'Result&gt; * System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (asyncResult, endMethod, creationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="b3869-525">O <see cref="T:System.IAsyncResult" /> cuja conclusão deve disparar o processamento do <paramref name="endMethod" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-525">The <see cref="T:System.IAsyncResult" /> whose completion should trigger the processing of the <paramref name="endMethod" />.</span></span></param>
        <param name="endMethod"><span data-ttu-id="b3869-526">O delegado da função que processa o <paramref name="asyncResult" /> concluído.</span><span class="sxs-lookup"><span data-stu-id="b3869-526">The function delegate that processes the completed <paramref name="asyncResult" />.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="b3869-527">Um dos valores de enumeração que controla o comportamento da tarefa criada.</span><span class="sxs-lookup"><span data-stu-id="b3869-527">One of the enumeration values that controls the behavior of the created task.</span></span></param>
        <param name="scheduler"><span data-ttu-id="b3869-528">O agendador de tarefas usado para agendar a tarefa que executa o método de encerramento.</span><span class="sxs-lookup"><span data-stu-id="b3869-528">The task scheduler that is used to schedule the task that executes the end method.</span></span></param>
        <summary><span data-ttu-id="b3869-529">Cria uma tarefa que executa uma função do método de encerramento quando um <see cref="T:System.IAsyncResult" /> especificado é concluído.</span><span class="sxs-lookup"><span data-stu-id="b3869-529">Creates a task that executes an end method function when a specified <see cref="T:System.IAsyncResult" /> completes.</span></span></summary>
        <returns><span data-ttu-id="b3869-530">A tarefa criada que representa a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="b3869-530">The created task that represents the asynchronous operation.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b3869-531">O argumento <paramref name="asyncResult" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-531">The <paramref name="asyncResult" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b3869-532">- ou -</span><span class="sxs-lookup"><span data-stu-id="b3869-532">-or-</span></span> 
<span data-ttu-id="b3869-533">O argumento <paramref name="endMethod" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-533">The <paramref name="endMethod" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b3869-534">- ou -</span><span class="sxs-lookup"><span data-stu-id="b3869-534">-or-</span></span> 
<span data-ttu-id="b3869-535">O argumento <paramref name="scheduler" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-535">The <paramref name="scheduler" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b3869-536">O parâmetro <paramref name="creationOptions" /> especifica um valor inválido.</span><span class="sxs-lookup"><span data-stu-id="b3869-536">The <paramref name="creationOptions" /> parameter specifies an invalid value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="b3869-537">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="b3869-537">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="b3869-538">Usando TPL com outros padrões assíncronos</span><span class="sxs-lookup"><span data-stu-id="b3869-538">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1&gt; (Func&lt;TArg1,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; FromAsync&lt;TArg1&gt;(class System.Func`4&lt;!!TArg1, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !TResult&gt; endMethod, !!TArg1 arg1, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1) (beginMethod As Func(Of TArg1, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, state As Object) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;TArg1, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, TArg1 arg1, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * 'TArg1 * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="b3869-539">O tipo do primeiro argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-539">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="b3869-540">O delegado que inicia a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="b3869-540">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="b3869-541">O delegado que finaliza a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="b3869-541">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="b3869-542">O primeiro argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-542">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="b3869-543">Um objeto que contém dados a serem usados pelo delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-543">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <summary><span data-ttu-id="b3869-544">Cria uma tarefa que representa um par de métodos de início e de encerramento que estão em conformidade com o padrão do Modelo de Programação Assíncrona.</span><span class="sxs-lookup"><span data-stu-id="b3869-544">Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="b3869-545">A tarefa criada que representa a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="b3869-545">The created task that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3869-546">Esse método gera as exceções geradas pelo `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="b3869-546">This method throws any exceptions thrown by the `beginMethod`.</span></span> <span data-ttu-id="b3869-547">Exceções para `endmethod` são geradas quando aguardando a tarefa retornada.</span><span class="sxs-lookup"><span data-stu-id="b3869-547">Exceptions for `endmethod` are thrown when waiting on the returned task.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b3869-548">O argumento <paramref name="beginMethod" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-548">The <paramref name="beginMethod" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b3869-549">- ou -</span><span class="sxs-lookup"><span data-stu-id="b3869-549">-or-</span></span> 
<span data-ttu-id="b3869-550">O argumento <paramref name="endMethod" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-550">The <paramref name="endMethod" /> argument is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="b3869-551">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="b3869-551">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="b3869-552">Usando TPL com outros padrões assíncronos</span><span class="sxs-lookup"><span data-stu-id="b3869-552">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1&gt; (Func&lt;TArg1,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; FromAsync&lt;TArg1&gt;(class System.Func`4&lt;!!TArg1, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !TResult&gt; endMethod, !!TArg1 arg1, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1) (beginMethod As Func(Of TArg1, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;TArg1, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, TArg1 arg1, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * 'TArg1 * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="b3869-553">O tipo do primeiro argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-553">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="b3869-554">O delegado que inicia a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="b3869-554">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="b3869-555">O delegado que finaliza a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="b3869-555">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="b3869-556">O primeiro argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-556">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="b3869-557">Um objeto que contém dados a serem usados pelo delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-557">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="b3869-558">Um dos valores de enumeração que controla o comportamento da tarefa criada.</span><span class="sxs-lookup"><span data-stu-id="b3869-558">One of the enumeration values that controls the behavior of the created task.</span></span></param>
        <summary><span data-ttu-id="b3869-559">Cria uma tarefa que representa um par de métodos de início e de encerramento que estão em conformidade com o padrão do Modelo de Programação Assíncrona.</span><span class="sxs-lookup"><span data-stu-id="b3869-559">Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="b3869-560">A tarefa criada que representa a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="b3869-560">The created task that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3869-561">Esse método gera as exceções geradas pelo `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="b3869-561">This method throws any exceptions thrown by the `beginMethod`.</span></span> <span data-ttu-id="b3869-562">Exceções para `endmethod` são geradas quando aguardando a tarefa retornada.</span><span class="sxs-lookup"><span data-stu-id="b3869-562">Exceptions for `endmethod` are thrown when waiting on the returned task.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b3869-563">O argumento <paramref name="beginMethod" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-563">The <paramref name="beginMethod" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b3869-564">- ou -</span><span class="sxs-lookup"><span data-stu-id="b3869-564">-or-</span></span> 
<span data-ttu-id="b3869-565">O argumento <paramref name="endMethod" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-565">The <paramref name="endMethod" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b3869-566">O parâmetro <paramref name="creationOptions" /> especifica um valor inválido.</span><span class="sxs-lookup"><span data-stu-id="b3869-566">The <paramref name="creationOptions" /> parameter specifies an invalid value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="b3869-567">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="b3869-567">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="b3869-568">Usando TPL com outros padrões assíncronos</span><span class="sxs-lookup"><span data-stu-id="b3869-568">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1,TArg2&gt; (Func&lt;TArg1,TArg2,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, TArg2 arg2, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; FromAsync&lt;TArg1, TArg2&gt;(class System.Func`5&lt;!!TArg1, !!TArg2, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !TResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TArg2) (beginMethod As Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, state As Object) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TArg2&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;TArg1, TArg2, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, TArg1 arg1, TArg2 arg2, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, 'TArg2, AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * 'TArg1 * 'TArg2 * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, arg2, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="b3869-569">O tipo do segundo argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-569">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg2"><span data-ttu-id="b3869-570">O tipo do primeiro argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-570">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="b3869-571">O delegado que inicia a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="b3869-571">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="b3869-572">O delegado que finaliza a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="b3869-572">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="b3869-573">O primeiro argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-573">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg2"><span data-ttu-id="b3869-574">O segundo argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-574">The second argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="b3869-575">Um objeto que contém dados a serem usados pelo delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-575">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <summary><span data-ttu-id="b3869-576">Cria uma tarefa que representa um par de métodos de início e de encerramento que estão em conformidade com o padrão do Modelo de Programação Assíncrona.</span><span class="sxs-lookup"><span data-stu-id="b3869-576">Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="b3869-577">A tarefa criada que representa a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="b3869-577">The created task that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3869-578">Esse método gera as exceções geradas pelo `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="b3869-578">This method throws any exceptions thrown by the `beginMethod`.</span></span> <span data-ttu-id="b3869-579">Exceções para `endmethod` são geradas quando aguardando a tarefa retornada.</span><span class="sxs-lookup"><span data-stu-id="b3869-579">Exceptions for `endmethod` are thrown when waiting on the returned task.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b3869-580">O argumento <paramref name="beginMethod" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-580">The <paramref name="beginMethod" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b3869-581">- ou -</span><span class="sxs-lookup"><span data-stu-id="b3869-581">-or-</span></span> 
<span data-ttu-id="b3869-582">O argumento <paramref name="endMethod" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-582">The <paramref name="endMethod" /> argument is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="b3869-583">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="b3869-583">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="b3869-584">Usando TPL com outros padrões assíncronos</span><span class="sxs-lookup"><span data-stu-id="b3869-584">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1,TArg2&gt; (Func&lt;TArg1,TArg2,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, TArg2 arg2, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; FromAsync&lt;TArg1, TArg2&gt;(class System.Func`5&lt;!!TArg1, !!TArg2, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !TResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TArg2) (beginMethod As Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TArg2&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;TArg1, TArg2, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, TArg1 arg1, TArg2 arg2, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, 'TArg2, AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * 'TArg1 * 'TArg2 * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, arg2, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="b3869-585">O tipo do segundo argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-585">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg2"><span data-ttu-id="b3869-586">O tipo do primeiro argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-586">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="b3869-587">O delegado que inicia a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="b3869-587">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="b3869-588">O delegado que finaliza a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="b3869-588">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="b3869-589">O primeiro argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-589">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg2"><span data-ttu-id="b3869-590">O segundo argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-590">The second argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="b3869-591">Um objeto que contém dados a serem usados pelo delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-591">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="b3869-592">Um objeto que controla o comportamento da <see cref="T:System.Threading.Tasks.Task`1" /> criada.</span><span class="sxs-lookup"><span data-stu-id="b3869-592">An object that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="b3869-593">Cria uma tarefa que representa um par de métodos de início e de encerramento que estão em conformidade com o padrão do Modelo de Programação Assíncrona.</span><span class="sxs-lookup"><span data-stu-id="b3869-593">Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="b3869-594">A tarefa criada que representa a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="b3869-594">The created task that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3869-595">Esse método gera as exceções geradas pelo `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="b3869-595">This method throws any exceptions thrown by the `beginMethod`.</span></span> <span data-ttu-id="b3869-596">Exceções para `endmethod` são geradas quando aguardando a tarefa retornada.</span><span class="sxs-lookup"><span data-stu-id="b3869-596">Exceptions for `endmethod` are thrown when waiting on the returned task.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b3869-597">O argumento <paramref name="beginMethod" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-597">The <paramref name="beginMethod" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b3869-598">- ou -</span><span class="sxs-lookup"><span data-stu-id="b3869-598">-or-</span></span> 
<span data-ttu-id="b3869-599">O argumento <paramref name="endMethod" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-599">The <paramref name="endMethod" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b3869-600">O parâmetro <paramref name="creationOptions" /> especifica um valor inválido.</span><span class="sxs-lookup"><span data-stu-id="b3869-600">The <paramref name="creationOptions" /> parameter specifies an invalid value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="b3869-601">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="b3869-601">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="b3869-602">Usando TPL com outros padrões assíncronos</span><span class="sxs-lookup"><span data-stu-id="b3869-602">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2,TArg3&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1,TArg2,TArg3&gt; (Func&lt;TArg1,TArg2,TArg3,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; FromAsync&lt;TArg1, TArg2, TArg3&gt;(class System.Func`6&lt;!!TArg1, !!TArg2, !!TArg3, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !TResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, !!TArg3 arg3, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TArg2, TArg3) (beginMethod As Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, state As Object) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TArg2, typename TArg3&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;TArg1, TArg2, TArg3, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, 'TArg2, 'TArg3, AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * 'TArg1 * 'TArg2 * 'TArg3 * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, arg2, arg3, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TArg3" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="arg3" Type="TArg3" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="b3869-603">O tipo do segundo argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-603">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg2"><span data-ttu-id="b3869-604">O tipo do terceiro argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-604">The type of the third argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg3"><span data-ttu-id="b3869-605">O tipo do primeiro argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-605">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="b3869-606">O delegado que inicia a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="b3869-606">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="b3869-607">O delegado que finaliza a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="b3869-607">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="b3869-608">O primeiro argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-608">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg2"><span data-ttu-id="b3869-609">O segundo argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-609">The second argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg3"><span data-ttu-id="b3869-610">O terceiro argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-610">The third argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="b3869-611">Um objeto que contém dados a serem usados pelo delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-611">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <summary><span data-ttu-id="b3869-612">Cria uma tarefa que representa um par de métodos de início e de encerramento que estão em conformidade com o padrão do Modelo de Programação Assíncrona.</span><span class="sxs-lookup"><span data-stu-id="b3869-612">Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="b3869-613">A tarefa criada que representa a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="b3869-613">The created task that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3869-614">Esse método gera as exceções geradas pelo `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="b3869-614">This method throws any exceptions thrown by the `beginMethod`.</span></span> <span data-ttu-id="b3869-615">Exceções para `endmethod` são geradas quando aguardando a tarefa retornada.</span><span class="sxs-lookup"><span data-stu-id="b3869-615">Exceptions for `endmethod` are thrown when waiting on the returned task.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b3869-616">O argumento <paramref name="beginMethod" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-616">The <paramref name="beginMethod" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b3869-617">- ou -</span><span class="sxs-lookup"><span data-stu-id="b3869-617">-or-</span></span> 
<span data-ttu-id="b3869-618">O argumento <paramref name="endMethod" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-618">The <paramref name="endMethod" /> argument is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="b3869-619">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="b3869-619">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="b3869-620">Usando TPL com outros padrões assíncronos</span><span class="sxs-lookup"><span data-stu-id="b3869-620">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2,TArg3&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1,TArg2,TArg3&gt; (Func&lt;TArg1,TArg2,TArg3,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; FromAsync&lt;TArg1, TArg2, TArg3&gt;(class System.Func`6&lt;!!TArg1, !!TArg2, !!TArg3, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !TResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, !!TArg3 arg3, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TArg2, TArg3) (beginMethod As Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TArg2, typename TArg3&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;TArg1, TArg2, TArg3, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, 'TArg2, 'TArg3, AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * 'TArg1 * 'TArg2 * 'TArg3 * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, arg2, arg3, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TArg3" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="arg3" Type="TArg3" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="b3869-621">O tipo do segundo argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-621">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg2"><span data-ttu-id="b3869-622">O tipo do terceiro argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-622">The type of the third argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg3"><span data-ttu-id="b3869-623">O tipo do primeiro argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-623">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="b3869-624">O delegado que inicia a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="b3869-624">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="b3869-625">O delegado que finaliza a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="b3869-625">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="b3869-626">O primeiro argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-626">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg2"><span data-ttu-id="b3869-627">O segundo argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-627">The second argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg3"><span data-ttu-id="b3869-628">O terceiro argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-628">The third argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="b3869-629">Um objeto que contém dados a serem usados pelo delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-629">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="b3869-630">Um objeto que controla o comportamento da tarefa criada.</span><span class="sxs-lookup"><span data-stu-id="b3869-630">An object that controls the behavior of the created task.</span></span></param>
        <summary><span data-ttu-id="b3869-631">Cria uma tarefa que representa um par de métodos de início e de encerramento que estão em conformidade com o padrão do Modelo de Programação Assíncrona.</span><span class="sxs-lookup"><span data-stu-id="b3869-631">Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="b3869-632">A tarefa criada que representa a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="b3869-632">The created task that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3869-633">Esse método gera as exceções geradas pelo `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="b3869-633">This method throws any exceptions thrown by the `beginMethod`.</span></span> <span data-ttu-id="b3869-634">Exceções para `endmethod` são geradas quando aguardando a tarefa retornada.</span><span class="sxs-lookup"><span data-stu-id="b3869-634">Exceptions for `endmethod` are thrown when waiting on the returned task.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b3869-635">O argumento <paramref name="beginMethod" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-635">The <paramref name="beginMethod" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b3869-636">- ou -</span><span class="sxs-lookup"><span data-stu-id="b3869-636">-or-</span></span> 
<span data-ttu-id="b3869-637">O argumento <paramref name="endMethod" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-637">The <paramref name="endMethod" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b3869-638">O parâmetro <paramref name="creationOptions" /> especifica um valor inválido.</span><span class="sxs-lookup"><span data-stu-id="b3869-638">The <paramref name="creationOptions" /> parameter specifies an invalid value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="b3869-639">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="b3869-639">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="b3869-640">Usando TPL com outros padrões assíncronos</span><span class="sxs-lookup"><span data-stu-id="b3869-640">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Scheduler">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.TaskScheduler Scheduler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.Tasks.TaskScheduler Scheduler" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.TaskFactory`1.Scheduler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Scheduler As TaskScheduler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Tasks::TaskScheduler ^ Scheduler { System::Threading::Tasks::TaskScheduler ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Scheduler : System.Threading.Tasks.TaskScheduler" Usage="System.Threading.Tasks.TaskFactory&lt;'Result&gt;.Scheduler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskScheduler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b3869-641">Obtém o agendador de tarefas para esta fábrica de tarefas.</span><span class="sxs-lookup"><span data-stu-id="b3869-641">Gets the task scheduler for this task factory.</span></span></summary>
        <value><span data-ttu-id="b3869-642">O Agendador de tarefas para esta fábrica de tarefas.</span><span class="sxs-lookup"><span data-stu-id="b3869-642">The task scheduler for this task factory.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3869-643">Essa propriedade retorna o agendador padrão para essa fábrica.</span><span class="sxs-lookup"><span data-stu-id="b3869-643">This property returns the default scheduler for this factory.</span></span> <span data-ttu-id="b3869-644">Ele será usado para agendar todas as tarefas, a menos que outro Agendador é explicitamente especificado durante as chamadas para métodos dessa fábrica.</span><span class="sxs-lookup"><span data-stu-id="b3869-644">It will be used to schedule all tasks unless another scheduler is explicitly specified during calls to this factory's methods.</span></span>  
  
 <span data-ttu-id="b3869-645">Se essa propriedade retornará `null`, <xref:System.Threading.Tasks.TaskScheduler.Current%2A> será usado.</span><span class="sxs-lookup"><span data-stu-id="b3869-645">If this property returns `null`, <xref:System.Threading.Tasks.TaskScheduler.Current%2A> will be used.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="b3869-646">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="b3869-646">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="b3869-647">Usando TPL com outros padrões assíncronos</span><span class="sxs-lookup"><span data-stu-id="b3869-647">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="StartNew">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b3869-648">Cria e inicia uma tarefa.</span><span class="sxs-lookup"><span data-stu-id="b3869-648">Creates and starts a task.</span></span></summary>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="b3869-649">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="b3869-649">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="b3869-650">Usando TPL com outros padrões assíncronos</span><span class="sxs-lookup"><span data-stu-id="b3869-650">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew (Func&lt;TResult&gt; function);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; StartNew(class System.Func`1&lt;!TResult&gt; function) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function StartNew (function As Func(Of TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;TResult&gt; ^ function);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew function" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <param name="function"><span data-ttu-id="b3869-651">Um delegado de função que retorna o resultado futuro que estará disponível por meio da tarefa.</span><span class="sxs-lookup"><span data-stu-id="b3869-651">A function delegate that returns the future result to be available through the task.</span></span></param>
        <summary><span data-ttu-id="b3869-652">Cria e inicia uma tarefa.</span><span class="sxs-lookup"><span data-stu-id="b3869-652">Creates and starts a task.</span></span></summary>
        <returns><span data-ttu-id="b3869-653">A tarefa iniciada.</span><span class="sxs-lookup"><span data-stu-id="b3869-653">The started task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3869-654">Chamando `StartNew` é funcionalmente equivalente à criação de uma tarefa usando um dos <xref:System.Threading.Tasks.Task%601> construtores e, em seguida, chamando o <xref:System.Threading.Tasks.Task.Start%2A> método agendá-lo para execução.</span><span class="sxs-lookup"><span data-stu-id="b3869-654">Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors, and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.</span></span>  
  
 <span data-ttu-id="b3869-655">No entanto, a menos que a criação e o agendamento devem ser separados, `StartNew` é a abordagem recomendada para manter a simplicidade e desempenho.</span><span class="sxs-lookup"><span data-stu-id="b3869-655">However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b3869-656">O argumento <paramref name="function" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-656">The <paramref name="function" /> argument is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="b3869-657">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="b3869-657">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="b3869-658">Usando TPL com outros padrões assíncronos</span><span class="sxs-lookup"><span data-stu-id="b3869-658">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew (Func&lt;object,TResult&gt; function, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; StartNew(class System.Func`2&lt;object, !TResult&gt; function, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartNew (function As Func(Of Object, TResult), state As Object) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;System::Object ^, TResult&gt; ^ function, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;obj, 'Result&gt; * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="function"><span data-ttu-id="b3869-659">Um delegado de função que retorna o resultado futuro que estará disponível por meio da tarefa.</span><span class="sxs-lookup"><span data-stu-id="b3869-659">A function delegate that returns the future result to be available through the task.</span></span></param>
        <param name="state"><span data-ttu-id="b3869-660">Um objeto que contém dados a serem usados pelo delegado <paramref name="function" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-660">An object that contains data to be used by the <paramref name="function" /> delegate.</span></span></param>
        <summary><span data-ttu-id="b3869-661">Cria e inicia uma tarefa.</span><span class="sxs-lookup"><span data-stu-id="b3869-661">Creates and starts a task.</span></span></summary>
        <returns><span data-ttu-id="b3869-662">A tarefa iniciada.</span><span class="sxs-lookup"><span data-stu-id="b3869-662">The started task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3869-663">Chamando `StartNew` é funcionalmente equivalente à criação de uma tarefa usando um dos <xref:System.Threading.Tasks.Task%601> construtores e em seguida, chamando o <xref:System.Threading.Tasks.Task.Start%2A> método agendá-lo para execução.</span><span class="sxs-lookup"><span data-stu-id="b3869-663">Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.</span></span>  
  
 <span data-ttu-id="b3869-664">No entanto, a menos que a criação e o agendamento devem ser separados, `StartNew` é a abordagem recomendada para manter a simplicidade e desempenho.</span><span class="sxs-lookup"><span data-stu-id="b3869-664">However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b3869-665">O argumento <paramref name="function" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-665">The <paramref name="function" /> argument is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="b3869-666">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="b3869-666">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="b3869-667">Usando TPL com outros padrões assíncronos</span><span class="sxs-lookup"><span data-stu-id="b3869-667">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew (Func&lt;TResult&gt; function, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; StartNew(class System.Func`1&lt;!TResult&gt; function, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;TResult&gt; ^ function, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="function"><span data-ttu-id="b3869-668">Um delegado de função que retorna o resultado futuro que estará disponível por meio da tarefa.</span><span class="sxs-lookup"><span data-stu-id="b3869-668">A function delegate that returns the future result to be available through the task.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="b3869-669">O token de cancelamento que será atribuído à nova tarefa.</span><span class="sxs-lookup"><span data-stu-id="b3869-669">The cancellation token that will be assigned to the new task.</span></span></param>
        <summary><span data-ttu-id="b3869-670">Cria e inicia uma tarefa.</span><span class="sxs-lookup"><span data-stu-id="b3869-670">Creates and starts a task.</span></span></summary>
        <returns><span data-ttu-id="b3869-671">A tarefa iniciada.</span><span class="sxs-lookup"><span data-stu-id="b3869-671">The started task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3869-672">Chamando `StartNew` é funcionalmente equivalente à criação de uma tarefa usando um dos <xref:System.Threading.Tasks.Task%601> construtores e em seguida, chamando o <xref:System.Threading.Tasks.Task.Start%2A> método agendá-lo para execução.</span><span class="sxs-lookup"><span data-stu-id="b3869-672">Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.</span></span>  
  
 <span data-ttu-id="b3869-673">No entanto, a menos que a criação e o agendamento devem ser separados, `StartNew` é a abordagem recomendada para manter a simplicidade e desempenho.</span><span class="sxs-lookup"><span data-stu-id="b3869-673">However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b3869-674">A origem do token de cancelamento que criou <paramref name="cancellationToken" /> já foi descartada.</span><span class="sxs-lookup"><span data-stu-id="b3869-674">The cancellation token source that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b3869-675">O argumento <paramref name="function" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-675">The <paramref name="function" /> argument is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="b3869-676">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="b3869-676">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="b3869-677">Usando TPL com outros padrões assíncronos</span><span class="sxs-lookup"><span data-stu-id="b3869-677">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew (Func&lt;TResult&gt; function, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; StartNew(class System.Func`1&lt;!TResult&gt; function, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartNew (function As Func(Of TResult), creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;TResult&gt; ^ function, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;'Result&gt; * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="function"><span data-ttu-id="b3869-678">Um delegado de função que retorna o resultado futuro que estará disponível por meio da tarefa.</span><span class="sxs-lookup"><span data-stu-id="b3869-678">A function delegate that returns the future result to be available through the task.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="b3869-679">Um dos valores de enumeração que controla o comportamento da tarefa criada.</span><span class="sxs-lookup"><span data-stu-id="b3869-679">One of the enumeration values that controls the behavior of the created task.</span></span></param>
        <summary><span data-ttu-id="b3869-680">Cria e inicia uma tarefa.</span><span class="sxs-lookup"><span data-stu-id="b3869-680">Creates and starts a task.</span></span></summary>
        <returns><span data-ttu-id="b3869-681">O <see cref="T:System.Threading.Tasks.Task`1" /> iniciado.</span><span class="sxs-lookup"><span data-stu-id="b3869-681">The started <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3869-682">Chamando `StartNew` é funcionalmente equivalente à criação de uma tarefa usando um dos <xref:System.Threading.Tasks.Task%601> construtores e em seguida, chamando o <xref:System.Threading.Tasks.Task.Start%2A> método agendá-lo para execução.</span><span class="sxs-lookup"><span data-stu-id="b3869-682">Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.</span></span>  
  
 <span data-ttu-id="b3869-683">No entanto, a menos que a criação e o agendamento devem ser separados, `StartNew` é a abordagem recomendada para manter a simplicidade e desempenho.</span><span class="sxs-lookup"><span data-stu-id="b3869-683">However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b3869-684">O argumento <paramref name="function" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-684">The <paramref name="function" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b3869-685">O parâmetro <paramref name="creationOptions" /> especifica um valor inválido.</span><span class="sxs-lookup"><span data-stu-id="b3869-685">The <paramref name="creationOptions" /> parameter specifies an invalid value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="b3869-686">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="b3869-686">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="b3869-687">Usando TPL com outros padrões assíncronos</span><span class="sxs-lookup"><span data-stu-id="b3869-687">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew (Func&lt;object,TResult&gt; function, object state, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; StartNew(class System.Func`2&lt;object, !TResult&gt; function, object state, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;System::Object ^, TResult&gt; ^ function, System::Object ^ state, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;obj, 'Result&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, state, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="function"><span data-ttu-id="b3869-688">Um delegado de função que retorna o resultado futuro que estará disponível por meio da tarefa.</span><span class="sxs-lookup"><span data-stu-id="b3869-688">A function delegate that returns the future result to be available through the task.</span></span></param>
        <param name="state"><span data-ttu-id="b3869-689">Um objeto que contém dados a serem usados pelo delegado <paramref name="function" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-689">An object that contains data to be used by the <paramref name="function" /> delegate.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="b3869-690">O token de cancelamento que será atribuído à nova tarefa.</span><span class="sxs-lookup"><span data-stu-id="b3869-690">The cancellation token that will be assigned to the new task.</span></span></param>
        <summary><span data-ttu-id="b3869-691">Cria e inicia uma tarefa.</span><span class="sxs-lookup"><span data-stu-id="b3869-691">Creates and starts a task.</span></span></summary>
        <returns><span data-ttu-id="b3869-692">A tarefa iniciada.</span><span class="sxs-lookup"><span data-stu-id="b3869-692">The started task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3869-693">Chamando `StartNew` é funcionalmente equivalente à criação de uma tarefa usando um dos <xref:System.Threading.Tasks.Task%601> construtores e em seguida, chamando o <xref:System.Threading.Tasks.Task.Start%2A> método agendá-lo para execução.</span><span class="sxs-lookup"><span data-stu-id="b3869-693">Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.</span></span>  
  
 <span data-ttu-id="b3869-694">No entanto, a menos que a criação e o agendamento devem ser separados, `StartNew` é a abordagem recomendada para manter a simplicidade e desempenho.</span><span class="sxs-lookup"><span data-stu-id="b3869-694">However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b3869-695">A origem do token de cancelamento que criou <paramref name="cancellationToken" /> já foi descartada.</span><span class="sxs-lookup"><span data-stu-id="b3869-695">The cancellation token source that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b3869-696">O argumento <paramref name="function" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-696">The <paramref name="function" /> argument is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="b3869-697">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="b3869-697">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="b3869-698">Usando TPL com outros padrões assíncronos</span><span class="sxs-lookup"><span data-stu-id="b3869-698">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew (Func&lt;object,TResult&gt; function, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; StartNew(class System.Func`2&lt;object, !TResult&gt; function, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartNew (function As Func(Of Object, TResult), state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;System::Object ^, TResult&gt; ^ function, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;obj, 'Result&gt; * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="function"><span data-ttu-id="b3869-699">Um delegado de função que retorna o resultado futuro que estará disponível por meio da tarefa.</span><span class="sxs-lookup"><span data-stu-id="b3869-699">A function delegate that returns the future result to be available through the task.</span></span></param>
        <param name="state"><span data-ttu-id="b3869-700">Um objeto que contém dados a serem usados pelo delegado <paramref name="function" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-700">An object that contains data to be used by the <paramref name="function" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="b3869-701">Um dos valores de enumeração que controla o comportamento da tarefa criada.</span><span class="sxs-lookup"><span data-stu-id="b3869-701">One of the enumeration values that controls the behavior of the created task.</span></span></param>
        <summary><span data-ttu-id="b3869-702">Cria e inicia uma tarefa.</span><span class="sxs-lookup"><span data-stu-id="b3869-702">Creates and starts a task.</span></span></summary>
        <returns><span data-ttu-id="b3869-703">A tarefa iniciada.</span><span class="sxs-lookup"><span data-stu-id="b3869-703">The started task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3869-704">Chamando `StartNew` é funcionalmente equivalente à criação de uma tarefa usando um dos <xref:System.Threading.Tasks.Task%601> construtores e em seguida, chamando o <xref:System.Threading.Tasks.Task.Start%2A> método agendá-lo para execução.</span><span class="sxs-lookup"><span data-stu-id="b3869-704">Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.</span></span>  
  
 <span data-ttu-id="b3869-705">No entanto, a menos que a criação e o agendamento devem ser separados, `StartNew` é a abordagem recomendada para manter a simplicidade e desempenho.</span><span class="sxs-lookup"><span data-stu-id="b3869-705">However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b3869-706">O argumento <paramref name="function" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-706">The <paramref name="function" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b3869-707">O parâmetro <paramref name="creationOptions" /> especifica um valor inválido.</span><span class="sxs-lookup"><span data-stu-id="b3869-707">The <paramref name="creationOptions" /> parameter specifies an invalid value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="b3869-708">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="b3869-708">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="b3869-709">Usando TPL com outros padrões assíncronos</span><span class="sxs-lookup"><span data-stu-id="b3869-709">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew (Func&lt;TResult&gt; function, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; StartNew(class System.Func`1&lt;!TResult&gt; function, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;TResult&gt; ^ function, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;'Result&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, cancellationToken, creationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="function"><span data-ttu-id="b3869-710">Um delegado de função que retorna o resultado futuro que estará disponível por meio da tarefa.</span><span class="sxs-lookup"><span data-stu-id="b3869-710">A function delegate that returns the future result to be available through the task.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="b3869-711">O token de cancelamento que será atribuído à nova tarefa.</span><span class="sxs-lookup"><span data-stu-id="b3869-711">The cancellation token that will be assigned to the new task.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="b3869-712">Um dos valores de enumeração que controla o comportamento da tarefa criada.</span><span class="sxs-lookup"><span data-stu-id="b3869-712">One of the enumeration values that controls the behavior of the created task.</span></span></param>
        <param name="scheduler"><span data-ttu-id="b3869-713">O agendador de tarefas é usado para agendar a tarefa criada.</span><span class="sxs-lookup"><span data-stu-id="b3869-713">The task scheduler that is used to schedule the created task.</span></span></param>
        <summary><span data-ttu-id="b3869-714">Cria e inicia uma tarefa.</span><span class="sxs-lookup"><span data-stu-id="b3869-714">Creates and starts a task.</span></span></summary>
        <returns><span data-ttu-id="b3869-715">A tarefa iniciada.</span><span class="sxs-lookup"><span data-stu-id="b3869-715">The started task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3869-716">Chamando `StartNew` é funcionalmente equivalente à criação de uma tarefa usando um dos <xref:System.Threading.Tasks.Task%601> construtores e em seguida, chamando o <xref:System.Threading.Tasks.Task.Start%2A> método agendá-lo para execução.</span><span class="sxs-lookup"><span data-stu-id="b3869-716">Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.</span></span>  
  
 <span data-ttu-id="b3869-717">No entanto, a menos que a criação e o agendamento devem ser separados, `StartNew` é a abordagem recomendada para manter a simplicidade e desempenho.</span><span class="sxs-lookup"><span data-stu-id="b3869-717">However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b3869-718">A origem do token de cancelamento que criou <paramref name="cancellationToken" /> já foi descartada.</span><span class="sxs-lookup"><span data-stu-id="b3869-718">The cancellation token source that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b3869-719">O argumento <paramref name="function" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-719">The <paramref name="function" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b3869-720">- ou -</span><span class="sxs-lookup"><span data-stu-id="b3869-720">-or-</span></span> 
<span data-ttu-id="b3869-721">O argumento <paramref name="scheduler" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-721">The <paramref name="scheduler" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b3869-722">O parâmetro <paramref name="creationOptions" /> especifica um valor inválido.</span><span class="sxs-lookup"><span data-stu-id="b3869-722">The <paramref name="creationOptions" /> parameter specifies an invalid value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="b3869-723">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="b3869-723">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="b3869-724">Usando TPL com outros padrões assíncronos</span><span class="sxs-lookup"><span data-stu-id="b3869-724">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew (Func&lt;object,TResult&gt; function, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; StartNew(class System.Func`2&lt;object, !TResult&gt; function, object state, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;System::Object ^, TResult&gt; ^ function, System::Object ^ state, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;obj, 'Result&gt; * obj * System.Threading.CancellationToken * System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, state, cancellationToken, creationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="function"><span data-ttu-id="b3869-725">Um delegado de função que retorna o resultado futuro que estará disponível por meio da tarefa.</span><span class="sxs-lookup"><span data-stu-id="b3869-725">A function delegate that returns the future result to be available through the task.</span></span></param>
        <param name="state"><span data-ttu-id="b3869-726">Um objeto que contém dados a serem usados pelo delegado <paramref name="function" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-726">An object that contains data to be used by the <paramref name="function" /> delegate.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="b3869-727">O token de cancelamento que será atribuído à nova tarefa.</span><span class="sxs-lookup"><span data-stu-id="b3869-727">The cancellation token that will be assigned to the new task.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="b3869-728">Um dos valores de enumeração que controla o comportamento da tarefa criada.</span><span class="sxs-lookup"><span data-stu-id="b3869-728">One of the enumeration values that controls the behavior of the created task.</span></span></param>
        <param name="scheduler"><span data-ttu-id="b3869-729">O agendador de tarefas é usado para agendar a tarefa criada.</span><span class="sxs-lookup"><span data-stu-id="b3869-729">The task scheduler that is used to schedule the created task.</span></span></param>
        <summary><span data-ttu-id="b3869-730">Cria e inicia uma tarefa.</span><span class="sxs-lookup"><span data-stu-id="b3869-730">Creates and starts a task.</span></span></summary>
        <returns><span data-ttu-id="b3869-731">A tarefa iniciada.</span><span class="sxs-lookup"><span data-stu-id="b3869-731">The started task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3869-732">Chamando `StartNew` é funcionalmente equivalente à criação de uma tarefa usando um dos <xref:System.Threading.Tasks.Task%601> construtores e em seguida, chamando o <xref:System.Threading.Tasks.Task.Start%2A> método agendá-lo para execução.</span><span class="sxs-lookup"><span data-stu-id="b3869-732">Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.</span></span>  
  
 <span data-ttu-id="b3869-733">No entanto, a menos que a criação e o agendamento devem ser separados, `StartNew` é a abordagem recomendada para manter a simplicidade e desempenho.</span><span class="sxs-lookup"><span data-stu-id="b3869-733">However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b3869-734">A origem do token de cancelamento que criou <paramref name="cancellationToken" /> já foi descartada.</span><span class="sxs-lookup"><span data-stu-id="b3869-734">The cancellation token source that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b3869-735">O argumento <paramref name="function" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-735">The <paramref name="function" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b3869-736">- ou -</span><span class="sxs-lookup"><span data-stu-id="b3869-736">-or-</span></span> 
<span data-ttu-id="b3869-737">O argumento <paramref name="scheduler" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b3869-737">The <paramref name="scheduler" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b3869-738">O parâmetro <paramref name="creationOptions" /> especifica um valor inválido.</span><span class="sxs-lookup"><span data-stu-id="b3869-738">The <paramref name="creationOptions" /> parameter specifies an invalid value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="b3869-739">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="b3869-739">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="b3869-740">Usando TPL com outros padrões assíncronos</span><span class="sxs-lookup"><span data-stu-id="b3869-740">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>