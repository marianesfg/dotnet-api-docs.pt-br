<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="TaskFactory`1.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5ac256f08add3803f1dba5244ff8fa5e37774f807.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ac256f08add3803f1dba5244ff8fa5e37774f807</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory`1">
          <source>The return value of the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> objects that the methods of this class create.</source>
          <target state="translated">O valor retornado dos objetos <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> criados pelos métodos dessa classe.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.TaskFactory`1">
          <source>Provides support for creating and scheduling <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> objects.</source>
          <target state="translated">Fornece suporte para criação e agendamento de objetos <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory`1">
          <source>The .NET Framework provides two factories for creating and scheduling tasks:</source>
          <target state="translated">O .NET Framework fornece dois fábricas para criação e agendamento de tarefas:</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory`1">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> class, which creates <ph id="ph2">&lt;xref:System.Threading.Tasks.Task&gt;</ph> and <ph id="ph3">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> objects.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> classe, que cria <ph id="ph2">&lt;xref:System.Threading.Tasks.Task&gt;</ph> e <ph id="ph3">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> objetos.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory`1">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> class, which creates <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> objects.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> classe, que cria <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> objetos.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory`1">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> class allows you to do the following:</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> classe permite que você faça o seguinte:</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory`1">
          <source>Create a task and start it immediately by calling the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> method.</source>
          <target state="translated">Criar uma tarefa e inicie-o imediatamente ao chamar o <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory`1">
          <source>You can call the overloads of this method to create and execute a task that requires non-default arguments.</source>
          <target state="translated">Você pode chamar as sobrecargas do método para criar e executar uma tarefa que requer argumentos não-padrão.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory`1">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType&gt;</ph> method provides the easiest way to create a task with default configuration values and start it immediately.</source>
          <target state="translated">Começando com o <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, o <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType&gt;</ph> método fornece a maneira mais fácil de criar uma tarefa com padrão valores de configuração e iniciá-lo imediatamente.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory`1">
          <source>Create a task that starts when any one of the tasks in an array has completed by calling the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAny%2A&gt;</ph> or   <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAny%2A&gt;</ph> method.</source>
          <target state="translated">Criar uma tarefa que é iniciado quando qualquer uma das tarefas em uma matriz tem sido concluída chamando o <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAny%2A&gt;</ph> ou <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAny%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory`1">
          <source>Create a task that starts when all the tasks in an array have completed by calling the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A&gt;</ph> method.</source>
          <target state="translated">Criar uma tarefa que é iniciado quando concluir todas as tarefas em uma matriz chamando o <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A&gt;</ph> ou <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory`1">
          <source>The static <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=nameWithType&gt;</ph> property returns a default <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> object.</source>
          <target state="translated">Estático <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=nameWithType&gt;</ph> propriedade retorna um padrão <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory`1">
          <source>You can also call one of the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> class constructors to configure the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> objects that  the <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> class creates.</source>
          <target state="translated">Você também pode chamar um do <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> classe construtores para configurar o <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> objetos que o <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> classe cria.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory`1">
          <source>The following example configures a new <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> object to create tasks that have a specified cancellation token, task creation options, continuation options, and a customized task scheduler.</source>
          <target state="translated">O exemplo a seguir configura um novo <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> objeto para criar tarefas que têm um token de cancelamento especificado, opções de criação de tarefa, opções de continuação e um agendador de tarefas personalizadas.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory`1">
          <source>In most cases, you do not have to instantiate a new <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> instance.</source>
          <target state="translated">Na maioria dos casos, você não precisa criar uma instância de um novo <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> instância.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory`1">
          <source>Instead, you can use the static <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=nameWithType&gt;</ph> property, which returns a factory object that uses default values.</source>
          <target state="translated">Em vez disso, você pode usar o static <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=nameWithType&gt;</ph> propriedade, que retorna um objeto de fábrica que usa valores padrão.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory`1">
          <source>You can then call its methods to start new tasks or define task continuations.</source>
          <target state="translated">Em seguida, você pode chamar seus métodos para iniciar novas tarefas ou definir a continuação de tarefas.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory`1">
          <source>For an illustration, see the example.</source>
          <target state="translated">Para obter uma ilustração, consulte o exemplo.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory`1">
          <source>The following example uses the static <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601.Factory%2A&gt;</ph> property to make two calls to the <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory%601.StartNew%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">O exemplo a seguir usa estático <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601.Factory%2A&gt;</ph> propriedade fazer duas chamadas para o <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory%601.StartNew%2A?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory`1">
          <source>The first task returns a string array that is populated with the names of files in the user's MyDocuments directory, while the second returns a string array that is populated with the names of subdirectories of the user's MyDocuments directory.</source>
          <target state="translated">A primeira tarefa retorna uma matriz de cadeia de caracteres que é preenchida com os nomes dos arquivos no diretório de Meus documentos do usuário, enquanto o segundo retorna uma matriz de cadeia de caracteres que é preenchida com os nomes de subpastas da pasta de Meus documentos do usuário.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory`1">
          <source>It then calls the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%29?displayProperty=nameWithType&gt;</ph> method, which displays information about the number of files and directories in the arrays returned by the two tasks after they have completed execution.</source>
          <target state="translated">Depois, ele chama o <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%29?displayProperty=nameWithType&gt;</ph> método, que exibe informações sobre o número de arquivos e diretórios em matrizes retornadas por duas tarefas depois que eles sejam completadas.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory`1">
          <source>All public and protected members of <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory`1" /&gt;</ph> are thread-safe and may be used concurrently from multiple threads.</source>
          <target state="translated">Todos os membros protegidos e públicos da <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory`1" /&gt;</ph> são thread-safe e podem ser usados simultaneamente em vários threads.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.TaskFactory`1">
          <source>Initializes a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory`1" /&gt;</ph> instance.</source>
          <target state="translated">Inicializa uma instância <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.#ctor">
          <source>Initializes a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory`1" /&gt;</ph> instance with the default configuration.</source>
          <target state="translated">Inicializa uma instância de <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory`1" /&gt;</ph> com a configuração padrão.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.#ctor">
          <source>This constructor creates a <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> instance with a default configuration.</source>
          <target state="translated">Este construtor cria um <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> instância com uma configuração padrão.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.#ctor">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCreationOptions&gt;</ph> property is initialized to <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskCreationOptions.None&gt;</ph>, the <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph> property is initialized to <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskContinuationOptions.None&gt;</ph>, and the <ph id="ph5">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph> property is initialized to the current scheduler (see <ph id="ph6">&lt;xref:System.Threading.Tasks.TaskScheduler.Current%2A&gt;</ph>).</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCreationOptions&gt;</ph> propriedade é inicializada para <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskCreationOptions.None&gt;</ph>, o <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph> propriedade é inicializada para <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskContinuationOptions.None&gt;</ph>e o <ph id="ph5">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph> propriedade é inicializada com o Agendador atual (consulte <ph id="ph6">&lt;xref:System.Threading.Tasks.TaskScheduler.Current%2A&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken)">
          <source>The default cancellation token that will be assigned to tasks created by this <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory" /&gt;</ph> unless another cancellation token is explicitly specified when calling the factory methods.</source>
          <target state="translated">O token de cancelamento padrão que será atribuído às tarefas criadas por este <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory" /&gt;</ph>, a menos que outro token de cancelamento seja especificado explicitamente ao chamar os métodos de fábrica.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken)">
          <source>Initializes a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory`1" /&gt;</ph> instance with the default configuration.</source>
          <target state="translated">Inicializa uma instância de <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory`1" /&gt;</ph> com a configuração padrão.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken)">
          <source>This constructor creates a <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> instance with a default configuration.</source>
          <target state="translated">Este construtor cria um <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> instância com uma configuração padrão.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCreationOptions&gt;</ph> property is initialized to <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskCreationOptions.None&gt;</ph>, the <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph> property is initialized to <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskContinuationOptions.None&gt;</ph>, and the <ph id="ph5">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph> property is initialized to the current scheduler (see <ph id="ph6">&lt;xref:System.Threading.Tasks.TaskScheduler.Current%2A&gt;</ph>).</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCreationOptions&gt;</ph> propriedade é inicializada para <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskCreationOptions.None&gt;</ph>, o <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph> propriedade é inicializada para <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskContinuationOptions.None&gt;</ph>e o <ph id="ph5">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph> propriedade é inicializada com o Agendador atual (consulte <ph id="ph6">&lt;xref:System.Threading.Tasks.TaskScheduler.Current%2A&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskScheduler)">
          <source>The scheduler to use to schedule any tasks created with this <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory`1" /&gt;</ph>.</source>
          <target state="translated">O agendador a ser usado para agendar as tarefas criadas com esta <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskScheduler)">
          <source>A null value indicates that the current <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> should be used.</source>
          <target state="translated">Um valor nulo indica que o <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> atual deve ser usado.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskScheduler)">
          <source>Initializes a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory`1" /&gt;</ph> instance with the specified configuration.</source>
          <target state="translated">Inicializa uma instância <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory`1" /&gt;</ph> com a configuração especificada.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskScheduler)">
          <source>With this constructor, the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCreationOptions&gt;</ph> property is initialized to <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskCreationOptions.None&gt;</ph>, the <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph> property is initialized to <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskContinuationOptions.None&gt;</ph>, and the <ph id="ph5">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph> property is initialized to <ph id="ph6">`scheduler`</ph>, unless it's <ph id="ph7">`null`</ph>, in which case the property is initialized to the current scheduler (see <ph id="ph8">&lt;xref:System.Threading.Tasks.TaskScheduler.Current%2A&gt;</ph>).</source>
          <target state="translated">Com esse construtor o <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCreationOptions&gt;</ph> propriedade é inicializada para <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskCreationOptions.None&gt;</ph>, o <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph> propriedade é inicializada para <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskContinuationOptions.None&gt;</ph>e o <ph id="ph5">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph> propriedade é inicializada para <ph id="ph6">`scheduler`</ph>, a menos que ele tenha <ph id="ph7">`null`</ph>, caso em que a propriedade é inicializada com o Agendador atual (consulte <ph id="ph8">&lt;xref:System.Threading.Tasks.TaskScheduler.Current%2A&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)">
          <source>The default options to use when creating tasks with this <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory`1" /&gt;</ph>.</source>
          <target state="translated">As opções padrão a serem usadas ao criar tarefas com esta <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)">
          <source>The default options to use when creating continuation tasks with this <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory`1" /&gt;</ph>.</source>
          <target state="translated">As opções padrão a serem usadas ao criar tarefas de continuação com esta <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)">
          <source>Initializes a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory`1" /&gt;</ph> instance with the specified configuration.</source>
          <target state="translated">Inicializa uma instância <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory`1" /&gt;</ph> com a configuração especificada.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)">
          <source>With this constructor, the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCreationOptions&gt;</ph> property is initialized to <ph id="ph2">`creationOptions`</ph>, the <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph> property is initialized to <ph id="ph4">`continuationOptions`</ph>, and the <ph id="ph5">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph> property is initialized to the current scheduler (see <ph id="ph6">&lt;xref:System.Threading.Tasks.TaskScheduler.Current%2A&gt;</ph>).</source>
          <target state="translated">Com esse construtor o <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCreationOptions&gt;</ph> propriedade é inicializada para <ph id="ph2">`creationOptions`</ph>, o <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph> propriedade é inicializada para <ph id="ph4">`continuationOptions`</ph>e o <ph id="ph5">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph> propriedade é inicializada com o Agendador atual (consulte <ph id="ph6">&lt;xref:System.Threading.Tasks.TaskScheduler.Current%2A&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)">
          <source><ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> or <ph id="ph2">&lt;paramref name="continuationOptions" /&gt;</ph> specifies an invalid value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="continuationOptions" /&gt;</ph> especifica um valor inválido.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The default cancellation token that will be assigned to tasks created by this <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory" /&gt;</ph> unless another cancellation token is explicitly specified when calling the factory methods.</source>
          <target state="translated">O token de cancelamento padrão que será atribuído às tarefas criadas por este <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory" /&gt;</ph>, a menos que outro token de cancelamento seja especificado explicitamente ao chamar os métodos de fábrica.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The default options to use when creating tasks with this <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory`1" /&gt;</ph>.</source>
          <target state="translated">As opções padrão a serem usadas ao criar tarefas com esta <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The default options to use when creating continuation tasks with this <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory`1" /&gt;</ph>.</source>
          <target state="translated">As opções padrão a serem usadas ao criar tarefas de continuação com esta <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The default scheduler to use to schedule any tasks created with this <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory`1" /&gt;</ph>.</source>
          <target state="translated">O agendador padrão a ser usado para agendar as tarefas criadas com esta <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>A null value indicates that <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskScheduler.Current" /&gt;</ph> should be used.</source>
          <target state="translated">Um valor nulo indica que <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskScheduler.Current" /&gt;</ph> deve ser usado.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Initializes a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory`1" /&gt;</ph> instance with the specified configuration.</source>
          <target state="translated">Inicializa uma instância <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory`1" /&gt;</ph> com a configuração especificada.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>With this constructor, the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCreationOptions&gt;</ph> property is initialized to <ph id="ph2">`creationOptions`</ph>, the <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph> property is initialized to <ph id="ph4">`continuationOptions`</ph>, and the <ph id="ph5">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph> property is initialized to <ph id="ph6">`scheduler`</ph>, unless it's <ph id="ph7">`null`</ph>, in which case the property is initialized to the current scheduler (see <ph id="ph8">&lt;xref:System.Threading.Tasks.TaskScheduler.Current%2A&gt;</ph>).</source>
          <target state="translated">Com esse construtor o <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCreationOptions&gt;</ph> propriedade é inicializada para <ph id="ph2">`creationOptions`</ph>, o <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph> propriedade é inicializada para <ph id="ph4">`continuationOptions`</ph>e o <ph id="ph5">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph> propriedade é inicializada para <ph id="ph6">`scheduler`</ph>, a menos que ele tenha <ph id="ph7">`null`</ph>, caso em que a propriedade é inicializada com o Agendador atual (consulte <ph id="ph8">&lt;xref:System.Threading.Tasks.TaskScheduler.Current%2A&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source><ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> or <ph id="ph2">&lt;paramref name="continuationOptions" /&gt;</ph> specifies an invalid value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="continuationOptions" /&gt;</ph> especifica um valor inválido.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.TaskFactory`1.CancellationToken">
          <source>Gets the default cancellation token for this task factory.</source>
          <target state="translated">Obtém o token de cancelamento padrão desta fábrica de tarefas.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.TaskFactory`1.CancellationToken">
          <source>The default cancellation token for this task factory.</source>
          <target state="translated">O token de cancelamento padrão para esta fábrica de tarefas.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.TaskFactory`1.CancellationToken">
          <source>This property returns the default cancellation token that will be assigned to all tasks created by this factory unless another cancellation token value is explicitly specified during the call to the task factory methods.</source>
          <target state="translated">Essa propriedade retorna o token de cancelamento padrão que será atribuído a todas as tarefas criadas por essa fábrica, a menos que outro valor de token de cancelamento é explicitamente especificado durante a chamada para os métodos de fábrica de tarefas.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.TaskFactory`1.ContinuationOptions">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph> enumeration value for this task factory.</source>
          <target state="translated">Obtém o valor de enumeração <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph> para esta fábrica de tarefas.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.TaskFactory`1.ContinuationOptions">
          <source>One of the enumeration values that specifies the default continuation options for this task factory.</source>
          <target state="translated">Um dos valores de enumeração que especifica as opções de continuação padrão para esta fábrica de tarefas.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.TaskFactory`1.ContinuationOptions">
          <source>This property returns the default continuation options for this factory.</source>
          <target state="translated">Essa propriedade retorna o padrão de opções de continuação para esta fábrica.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.TaskFactory`1.ContinuationOptions">
          <source>They will be used to create all continuation tasks unless other options are explicitly specified during calls to this factory's methods.</source>
          <target state="translated">Eles serão usados para criar todas as tarefas de continuação, a menos que outras opções são especificadas explicitamente durante as chamadas para métodos essa fábrica.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.TaskFactory`1">
          <source>Creates a continuation task that will be started upon the completion of a set of provided tasks.</source>
          <target state="translated">Cria uma tarefa de continuação que será iniciada após a conclusão de um conjunto de tarefas fornecidas.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})">
          <source>The array of tasks from which to continue.</source>
          <target state="translated">A matriz de tarefas da qual continuar.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})">
          <source>The function delegate to execute asynchronously when all tasks in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array have completed.</source>
          <target state="translated">O representante de função a ser executado de forma assíncrona quando todas as tarefas na matriz <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> forem concluídas.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})">
          <source>Creates a continuation task that will be started upon the completion of a set of provided tasks.</source>
          <target state="translated">Cria uma tarefa de continuação que será iniciada após a conclusão de um conjunto de tarefas fornecidas.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})">
          <source>The new continuation task.</source>
          <target state="translated">A nova tarefa de continuação.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})">
          <source>After completion, a task is in one of these states: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> states.</source>
          <target state="translated">Após a conclusão, uma tarefa estiver em um dos seguintes estados: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, ou <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> estados.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})">
          <source>One of the elements in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          <target state="translated">Um dos elementos na matriz <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> foi descartado.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})">
          <source><ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">A matriz <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})">
          <source>The <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array contains a null value or is empty.</source>
          <target state="translated">A matriz <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> contém um valor nulo ou está vazia.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)">
          <source>The array of tasks from which to continue.</source>
          <target state="translated">A matriz de tarefas da qual continuar.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)">
          <source>The function delegate to execute asynchronously when all tasks in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array have completed.</source>
          <target state="translated">O representante de função a ser executado de forma assíncrona quando todas as tarefas na matriz <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> forem concluídas.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)">
          <source>The cancellation token that will be assigned to the new continuation task.</source>
          <target state="translated">O token de cancelamento que será atribuído à nova tarefa de continuação.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)">
          <source>Creates a continuation task that will be started upon the completion of a set of provided tasks.</source>
          <target state="translated">Cria uma tarefa de continuação que será iniciada após a conclusão de um conjunto de tarefas fornecidas.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)">
          <source>The new continuation task.</source>
          <target state="translated">A nova tarefa de continuação.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)">
          <source>After completion, a task is in one of these states: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> states.</source>
          <target state="translated">Após a conclusão, uma tarefa estiver em um dos seguintes estados: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, ou <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> estados.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)">
          <source>One of the elements in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          <target state="translated">Um dos elementos na matriz <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> foi descartado.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> que criou <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> já foi descartado.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">A matriz do <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array contains a null value or is empty.</source>
          <target state="translated">A matriz <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> contém um valor nulo ou está vazia.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The array of tasks from which to continue.</source>
          <target state="translated">A matriz de tarefas da qual continuar.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The function delegate to execute asynchronously when all tasks in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array have completed.</source>
          <target state="translated">O representante de função a ser executado de forma assíncrona quando todas as tarefas na matriz <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> forem concluídas.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>One of the enumeration values that controls the behavior of the created continuation task.</source>
          <target state="translated">Um dos valores de enumeração que controla o comportamento da tarefa de continuação criada.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The NotOn* or OnlyOn* values are not valid.</source>
          <target state="translated">Os valores NotOn* ou OnlyOn* não são válidos.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>Creates a continuation task that will be started upon the completion of a set of provided Tasks.</source>
          <target state="translated">Cria uma tarefa de continuação que será iniciada após a conclusão de um conjunto de Tarefas fornecidas.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The new continuation task.</source>
          <target state="translated">A nova tarefa de continuação.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>After completion, a task is in one of these states: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> states.</source>
          <target state="translated">Após a conclusão, uma tarefa estiver em um dos seguintes estados: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, ou <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> estados.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>One of the elements in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          <target state="translated">Um dos elementos na matriz <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> foi descartado.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">A matriz do <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> argument specifies an invalid value.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> especifica um valor inválido.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array contains a null value or is empty.</source>
          <target state="translated">A matriz <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> contém um valor nulo ou está vazia.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The array of tasks from which to continue.</source>
          <target state="translated">A matriz de tarefas da qual continuar.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The function delegate to execute asynchronously when all tasks in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array have completed.</source>
          <target state="translated">O representante de função a ser executado de forma assíncrona quando todas as tarefas na matriz <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> forem concluídas.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The cancellation token that will be assigned to the new continuation task.</source>
          <target state="translated">O token de cancelamento que será atribuído à nova tarefa de continuação.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>One of the enumeration values that controls the behavior of the created continuation task.</source>
          <target state="translated">Um dos valores de enumeração que controla o comportamento da tarefa de continuação criada.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The NotOn* or OnlyOn* values are not valid.</source>
          <target state="translated">Os valores NotOn* ou OnlyOn* não são válidos.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The scheduler that is used to schedule the created continuation task.</source>
          <target state="translated">O agendador usado para agendar a tarefa de continuação criada.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Creates a continuation task that will be started upon the completion of a set of provided Tasks.</source>
          <target state="translated">Cria uma tarefa de continuação que será iniciada após a conclusão de um conjunto de Tarefas fornecidas.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The new continuation task.</source>
          <target state="translated">A nova tarefa de continuação.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>After completion, a task is in one of these states: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> states.</source>
          <target state="translated">Após a conclusão, uma tarefa estiver em um dos seguintes estados: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, ou <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> estados.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">A matriz do <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array contains a null value or is empty.</source>
          <target state="translated">A matriz <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> contém um valor nulo ou está vazia.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source><ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> specifies an invalid value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> especifica um valor inválido.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>One of the elements in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          <target state="translated">Um dos elementos na matriz <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> foi descartado.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> que criou <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> já foi descartado.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})">
          <source>The type of the result of the antecedent <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo do resultado do antecessor <bpt id="p1">&lt;c&gt;</bpt>tarefas<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})">
          <source>The array of tasks from which to continue.</source>
          <target state="translated">A matriz de tarefas da qual continuar.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})">
          <source>The function delegate to execute asynchronously when all tasks in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array have completed.</source>
          <target state="translated">O representante de função a ser executado de forma assíncrona quando todas as tarefas na matriz <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> forem concluídas.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})">
          <source>Creates a continuation task that will be started upon the completion of a set of provided tasks.</source>
          <target state="translated">Cria uma tarefa de continuação que será iniciada após a conclusão de um conjunto de tarefas fornecidas.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})">
          <source>The new continuation task.</source>
          <target state="translated">A nova tarefa de continuação.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})">
          <source>After completion, a task is in one of these states: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> states.</source>
          <target state="translated">Após a conclusão, uma tarefa estiver em um dos seguintes estados: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, ou <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> estados.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})">
          <source>One of the elements in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          <target state="translated">Um dos elementos na matriz <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> foi descartado.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">A matriz do <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})">
          <source>The <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array contains a null value or is empty.</source>
          <target state="translated">A matriz <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> contém um valor nulo ou está vazia.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)">
          <source>The type of the result of the antecedent <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo do resultado do antecessor <bpt id="p1">&lt;c&gt;</bpt>tarefas<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)">
          <source>The array of tasks from which to continue.</source>
          <target state="translated">A matriz de tarefas da qual continuar.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)">
          <source>The function delegate to execute asynchronously when all tasks in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array have completed.</source>
          <target state="translated">O representante de função a ser executado de forma assíncrona quando todas as tarefas na matriz <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> forem concluídas.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)">
          <source>The cancellation token that will be assigned to the new continuation task.</source>
          <target state="translated">O token de cancelamento que será atribuído à nova tarefa de continuação.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)">
          <source>Creates a continuation task that will be started upon the completion of a set of provided tasks.</source>
          <target state="translated">Cria uma tarefa de continuação que será iniciada após a conclusão de um conjunto de tarefas fornecidas.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)">
          <source>The new continuation task.</source>
          <target state="translated">A nova tarefa de continuação.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)">
          <source>After completion, a task is in one of these states: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> states.</source>
          <target state="translated">Após a conclusão, uma tarefa estiver em um dos seguintes estados: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, ou <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> estados.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)">
          <source>One of the elements in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          <target state="translated">Um dos elementos na matriz <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> foi descartado.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> que criou <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> já foi descartado.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">A matriz do <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array contains a null value or is empty.</source>
          <target state="translated">A matriz <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> contém um valor nulo ou está vazia.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The type of the result of the antecedent <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo do resultado do antecessor <bpt id="p1">&lt;c&gt;</bpt>tarefas<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The array of tasks from which to continue.</source>
          <target state="translated">A matriz de tarefas da qual continuar.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The function delegate to execute asynchronously when all tasks in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array have completed.</source>
          <target state="translated">O representante de função a ser executado de forma assíncrona quando todas as tarefas na matriz <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> forem concluídas.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>One of the enumeration values that controls the behavior of the created continuation task.</source>
          <target state="translated">Um dos valores de enumeração que controla o comportamento da tarefa de continuação criada.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The NotOn* or OnlyOn* values are not valid.</source>
          <target state="translated">Os valores NotOn* ou OnlyOn* não são válidos.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>Creates a continuation task that will be started upon the completion of a set of provided tasks.</source>
          <target state="translated">Cria uma tarefa de continuação que será iniciada após a conclusão de um conjunto de tarefas fornecidas.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The new continuation task.</source>
          <target state="translated">A nova tarefa de continuação.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>After completion, a task is in one of these states: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> states.</source>
          <target state="translated">Após a conclusão, uma tarefa estiver em um dos seguintes estados: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, ou <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> estados.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>One of the elements in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          <target state="translated">Um dos elementos na matriz <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> foi descartado.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">A matriz do <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> argument specifies an invalid value.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> especifica um valor inválido.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array contains a null value or is empty.</source>
          <target state="translated">A matriz <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> contém um valor nulo ou está vazia.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The type of the result of the antecedent <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo do resultado do antecessor <bpt id="p1">&lt;c&gt;</bpt>tarefas<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The array of tasks from which to continue.</source>
          <target state="translated">A matriz de tarefas da qual continuar.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The function delegate to execute asynchronously when all tasks in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array have completed.</source>
          <target state="translated">O representante de função a ser executado de forma assíncrona quando todas as tarefas na matriz <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> forem concluídas.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The cancellation token that will be assigned to the new continuation task.</source>
          <target state="translated">O token de cancelamento que será atribuído à nova tarefa de continuação.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>One of the enumeration values that controls the behavior of the created continuation task.</source>
          <target state="translated">Um dos valores de enumeração que controla o comportamento da tarefa de continuação criada.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The NotOn* or OnlyOn* values are not valid.</source>
          <target state="translated">Os valores NotOn* ou OnlyOn* não são válidos.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The scheduler that is used to schedule the created continuation task.</source>
          <target state="translated">O agendador usado para agendar a tarefa de continuação criada.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Creates a continuation task that will be started upon the completion of a set of provided tasks.</source>
          <target state="translated">Cria uma tarefa de continuação que será iniciada após a conclusão de um conjunto de tarefas fornecidas.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The new continuation task.</source>
          <target state="translated">A nova tarefa de continuação.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>After completion, a task is in one of these states: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> states.</source>
          <target state="translated">Após a conclusão, uma tarefa estiver em um dos seguintes estados: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, ou <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> estados.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">A matriz do <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array contains a null value or is empty.</source>
          <target state="translated">A matriz <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> contém um valor nulo ou está vazia.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> argument specifies an invalid value.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> especifica um valor inválido.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>One of the elements in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          <target state="translated">Um dos elementos na matriz <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> foi descartado.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> que criou <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> já foi descartado.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.TaskFactory`1">
          <source>Creates a continuation task that will be started upon the completion of any task in the provided set.</source>
          <target state="translated">Cria uma tarefa de continuação que será iniciada após a conclusão de qualquer tarefa no conjunto fornecido.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})">
          <source>The array of tasks from which to continue when one task completes.</source>
          <target state="translated">A matriz de tarefas da qual continuar quando uma tarefa for concluída.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})">
          <source>The function delegate to execute asynchronously when one task in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array completes.</source>
          <target state="translated">O representante de função a ser executado de forma assíncrona quando uma tarefa na matriz <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> for concluída.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})">
          <source>Creates a continuation task that will be started upon the completion of any task in the provided set.</source>
          <target state="translated">Cria uma tarefa de continuação que será iniciada após a conclusão de qualquer tarefa no conjunto fornecido.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})">
          <source>The new continuation task.</source>
          <target state="translated">A nova tarefa de continuação.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})">
          <source>After completion, a task is in one of these states: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> states.</source>
          <target state="translated">Após a conclusão, uma tarefa estiver em um dos seguintes estados: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, ou <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> estados.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})">
          <source>One of the elements in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          <target state="translated">Um dos elementos na matriz <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> foi descartado.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">A matriz do <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})">
          <source>The <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array contains a null value or is empty.</source>
          <target state="translated">A matriz <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> contém um valor nulo ou está vazia.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)">
          <source>The array of tasks from which to continue when one task completes.</source>
          <target state="translated">A matriz de tarefas da qual continuar quando uma tarefa for concluída.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)">
          <source>The function delegate to execute asynchronously when one task in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array completes.</source>
          <target state="translated">O representante de função a ser executado de forma assíncrona quando uma tarefa na matriz <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> for concluída.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)">
          <source>The cancellation token that will be assigned to the new continuation task.</source>
          <target state="translated">O token de cancelamento que será atribuído à nova tarefa de continuação.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)">
          <source>Creates a continuation task that will be started upon the completion of any task in the provided set.</source>
          <target state="translated">Cria uma tarefa de continuação que será iniciada após a conclusão de qualquer tarefa no conjunto fornecido.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)">
          <source>The new continuation task.</source>
          <target state="translated">A nova tarefa de continuação.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)">
          <source>After completion, a task is in one of these states: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> states.</source>
          <target state="translated">Após a conclusão, uma tarefa estiver em um dos seguintes estados: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, ou <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> estados.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)">
          <source>One of the elements in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          <target state="translated">Um dos elementos na matriz <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> foi descartado.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> que criou <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> já foi descartado.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is null.</source>
          <target state="translated">A matriz <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> é nula.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is null.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> é nulo.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array contains a null value.</source>
          <target state="translated">A matriz <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> contém um valor nulo.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is empty.</source>
          <target state="translated">A matriz <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> está vazia.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The array of tasks from which to continue when one task completes.</source>
          <target state="translated">A matriz de tarefas da qual continuar quando uma tarefa for concluída.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The function delegate to execute asynchronously when one task in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array completes.</source>
          <target state="translated">O representante de função a ser executado de forma assíncrona quando uma tarefa na matriz <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> for concluída.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>One of the enumeration values that controls the behavior of the created continuation task.</source>
          <target state="translated">Um dos valores de enumeração que controla o comportamento da tarefa de continuação criada.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;see langword="NotOn*" /&gt;</ph> or <ph id="ph2">&lt;see langword="OnlyOn*" /&gt;</ph> values are not valid.</source>
          <target state="translated">Os valores <ph id="ph1">&lt;see langword="NotOn*" /&gt;</ph> ou <ph id="ph2">&lt;see langword="OnlyOn*" /&gt;</ph> não são válidos.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>Creates a continuation task that will be started upon the completion of any task in the provided set.</source>
          <target state="translated">Cria uma tarefa de continuação que será iniciada após a conclusão de qualquer tarefa no conjunto fornecido.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The new continuation task.</source>
          <target state="translated">A nova tarefa de continuação.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>After completion, a task is in one of these states: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> states.</source>
          <target state="translated">Após a conclusão, uma tarefa estiver em um dos seguintes estados: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, ou <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> estados.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>One of the elements in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          <target state="translated">Um dos elementos na matriz <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> foi descartado.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">A matriz do <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> argument specifies an invalid enumeration value.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> especifica um valor de enumeração inválido.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array contains a null value.</source>
          <target state="translated">A matriz <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> contém um valor nulo.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is empty.</source>
          <target state="translated">A matriz <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> está vazia.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The array of tasks from which to continue when one task completes.</source>
          <target state="translated">A matriz de tarefas da qual continuar quando uma tarefa for concluída.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The function delegate to execute asynchronously when one task in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array completes.</source>
          <target state="translated">O representante de função a ser executado de forma assíncrona quando uma tarefa na matriz <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> for concluída.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The cancellation token that will be assigned to the new continuation task.</source>
          <target state="translated">O token de cancelamento que será atribuído à nova tarefa de continuação.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>One of the enumeration values that controls the behavior of the created continuation task.</source>
          <target state="translated">Um dos valores de enumeração que controla o comportamento da tarefa de continuação criada.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see langword="NotOn*" /&gt;</ph> or <ph id="ph2">&lt;see langword="OnlyOn*" /&gt;</ph> values are not valid.</source>
          <target state="translated">Os valores <ph id="ph1">&lt;see langword="NotOn*" /&gt;</ph> ou <ph id="ph2">&lt;see langword="OnlyOn*" /&gt;</ph> não são válidos.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The task scheduler that is used to schedule the created continuation task.</source>
          <target state="translated">O agendador de tarefas usado para agendar a tarefa de continuação criada.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Creates a continuation task that will be started upon the completion of any task in the provided set.</source>
          <target state="translated">Cria uma tarefa de continuação que será iniciada após a conclusão de qualquer tarefa no conjunto fornecido.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The new continuation task.</source>
          <target state="translated">A nova tarefa de continuação.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>After completion, a task is in one of these states: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> states.</source>
          <target state="translated">Após a conclusão, uma tarefa estiver em um dos seguintes estados: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, ou <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> estados.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">A matriz do <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array contains a null value.</source>
          <target state="translated">A matriz <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> contém um valor nulo.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is empty.</source>
          <target state="translated">A matriz <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> está vazia.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> argument specifies an invalid <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph> value.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> especifica um valor <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph> inválido.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>One of the elements in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          <target state="translated">Um dos elementos na matriz <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> foi descartado.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> que criou <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> já foi descartado.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})">
          <source>The type of the result of the antecedent <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo do resultado do antecessor <bpt id="p1">&lt;c&gt;</bpt>tarefas<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})">
          <source>The array of tasks from which to continue when one task completes.</source>
          <target state="translated">A matriz de tarefas da qual continuar quando uma tarefa for concluída.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})">
          <source>The function delegate to execute asynchronously when one task in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array completes.</source>
          <target state="translated">O representante de função a ser executado de forma assíncrona quando uma tarefa na matriz <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> for concluída.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})">
          <source>Creates a continuation task that will be started upon the completion of any task in the provided set.</source>
          <target state="translated">Cria uma tarefa de continuação que será iniciada após a conclusão de qualquer tarefa no conjunto fornecido.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})">
          <source>The new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">O novo <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> de continuação.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})">
          <source>After completion, a task is in one of these states: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> states.</source>
          <target state="translated">Após a conclusão, uma tarefa estiver em um dos seguintes estados: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, ou <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> estados.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})">
          <source>One of the elements in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          <target state="translated">Um dos elementos na matriz <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> foi descartado.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">A matriz do <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})">
          <source>The <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array contains a null value.</source>
          <target state="translated">A matriz <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> contém um valor nulo.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is empty.</source>
          <target state="translated">A matriz <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> está vazia.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)">
          <source>The type of the result of the antecedent <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo do resultado do antecessor <bpt id="p1">&lt;c&gt;</bpt>tarefas<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)">
          <source>The array of tasks from which to continue when one task completes.</source>
          <target state="translated">A matriz de tarefas da qual continuar quando uma tarefa for concluída.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)">
          <source>The function delegate to execute asynchronously when one task in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array completes.</source>
          <target state="translated">O representante de função a ser executado de forma assíncrona quando uma tarefa na matriz <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> for concluída.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)">
          <source>The cancellation token that will be assigned to the new continuation task.</source>
          <target state="translated">O token de cancelamento que será atribuído à nova tarefa de continuação.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)">
          <source>Creates a continuation task that will be started upon the completion of any task in the provided set.</source>
          <target state="translated">Cria uma tarefa de continuação que será iniciada após a conclusão de qualquer tarefa no conjunto fornecido.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)">
          <source>The new continuation task.</source>
          <target state="translated">A nova tarefa de continuação.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)">
          <source>After completion, a task is in one of these states: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> states.</source>
          <target state="translated">Após a conclusão, uma tarefa estiver em um dos seguintes estados: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, ou <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> estados.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)">
          <source>One of the elements in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          <target state="translated">Um dos elementos na matriz <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> foi descartado.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> que criou <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> já foi descartado.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">A matriz do <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array contains a null value.</source>
          <target state="translated">A matriz <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> contém um valor nulo.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is empty.</source>
          <target state="translated">A matriz <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> está vazia.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The type of the result of the antecedent <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo do resultado do antecessor <bpt id="p1">&lt;c&gt;</bpt>tarefas<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The array of tasks from which to continue when one task completes.</source>
          <target state="translated">A matriz de tarefas da qual continuar quando uma tarefa for concluída.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The function delegate to execute asynchronously when one task in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array completes.</source>
          <target state="translated">O representante de função a ser executado de forma assíncrona quando uma tarefa na matriz <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> for concluída.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>One of the enumeration values that controls the behavior of the created continuation task.</source>
          <target state="translated">Um dos valores de enumeração que controla o comportamento da tarefa de continuação criada.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;see langword="NotOn*" /&gt;</ph> or <ph id="ph2">&lt;see langword="OnlyOn*" /&gt;</ph> values are not valid.</source>
          <target state="translated">Os valores <ph id="ph1">&lt;see langword="NotOn*" /&gt;</ph> ou <ph id="ph2">&lt;see langword="OnlyOn*" /&gt;</ph> não são válidos.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>Creates a continuation task that will be started upon the completion of any task in the provided set.</source>
          <target state="translated">Cria uma tarefa de continuação que será iniciada após a conclusão de qualquer tarefa no conjunto fornecido.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">O novo <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> de continuação.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>After completion, a task is in one of these states: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> states.</source>
          <target state="translated">Após a conclusão, uma tarefa estiver em um dos seguintes estados: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, ou <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> estados.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>One of the elements in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          <target state="translated">Um dos elementos na matriz <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> foi descartado.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">A matriz do <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> argument specifies an invalid enumeration value.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> especifica um valor de enumeração inválido.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array contains a null value.</source>
          <target state="translated">A matriz <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> contém um valor nulo.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is empty.</source>
          <target state="translated">A matriz <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> está vazia.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The type of the result of the antecedent <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo do resultado do antecessor <bpt id="p1">&lt;c&gt;</bpt>tarefas<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The array of tasks from which to continue when one task completes.</source>
          <target state="translated">A matriz de tarefas da qual continuar quando uma tarefa for concluída.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The function delegate to execute asynchronously when one task in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array completes.</source>
          <target state="translated">O representante de função a ser executado de forma assíncrona quando uma tarefa na matriz <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> for concluída.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The cancellation token that will be assigned to the new continuation task.</source>
          <target state="translated">O token de cancelamento que será atribuído à nova tarefa de continuação.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>One of the enumeration values that controls the behavior of the created continuation task.</source>
          <target state="translated">Um dos valores de enumeração que controla o comportamento da tarefa de continuação criada.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see langword="NotOn*" /&gt;</ph> or <ph id="ph2">&lt;see langword="OnlyOn*" /&gt;</ph> values are not valid.</source>
          <target state="translated">Os valores <ph id="ph1">&lt;see langword="NotOn*" /&gt;</ph> ou <ph id="ph2">&lt;see langword="OnlyOn*" /&gt;</ph> não são válidos.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> that is used to schedule the created continuation <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> usado para agendar a <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> de continuação criada.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Creates a continuation task that will be started upon the completion of any task in the provided set.</source>
          <target state="translated">Cria uma tarefa de continuação que será iniciada após a conclusão de qualquer tarefa no conjunto fornecido.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">O novo <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> de continuação.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>After completion, a task is in one of these states: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> states.</source>
          <target state="translated">Após a conclusão, uma tarefa estiver em um dos seguintes estados: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, ou <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> estados.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">A matriz do <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> argument is null.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> é nulo.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array contains a null value.</source>
          <target state="translated">A matriz <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> contém um valor nulo.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is empty.</source>
          <target state="translated">A matriz <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> está vazia.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> argument specifies an invalid TaskContinuationOptions value.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> especifica um valor de TaskContinuationOptions inválido.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>One of the elements in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          <target state="translated">Um dos elementos na matriz <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> foi descartado.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> que criou <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> já foi descartado.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.TaskFactory`1.CreationOptions">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskCreationOptions" /&gt;</ph> enumeration value for this task factory.</source>
          <target state="translated">Obtém o valor de enumeração <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskCreationOptions" /&gt;</ph> para esta fábrica de tarefas.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.TaskFactory`1.CreationOptions">
          <source>One of the enumeration values that specifies the default creation options for this task factory.</source>
          <target state="translated">Um dos valores de enumeração que especifica as opções de criação padrão para esta fábrica de tarefas.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.TaskFactory`1.CreationOptions">
          <source>This property returns the default creation options for this factory.</source>
          <target state="translated">Essa propriedade retorna o padrão de opções de criação para esta fábrica.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.TaskFactory`1.CreationOptions">
          <source>They will be used to create all tasks unless other options are explicitly specified during calls to this factory's methods.</source>
          <target state="translated">Eles serão usados para criar todas as tarefas, a menos que outras opções são especificadas explicitamente durante as chamadas para métodos essa fábrica.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.TaskFactory`1">
          <source>Creates a task instance.</source>
          <target state="translated">Cria uma instância de tarefa.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> whose completion should trigger the processing of the <bpt id="p1">&lt;c&gt;</bpt>endMethod<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> cuja conclusão deve disparar o processamento do <bpt id="p1">&lt;c&gt;</bpt>endMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})">
          <source>The function delegate that processes the completed <bpt id="p1">&lt;c&gt;</bpt>asyncResult<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O representante de função que processa o <bpt id="p1">&lt;c&gt;</bpt>asyncResult<ept id="p1">&lt;/c&gt;</ept> concluído.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})">
          <source>Creates a task that executes an end method function when a specified <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> completes.</source>
          <target state="translated">Cria uma tarefa que executa uma função do método de encerramento quando um <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> especificado é concluído.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> that represents the asynchronous operation.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> que representa a operação assíncrona.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})">
          <source>The <ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})">
          <source>The <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)">
          <source>The delegate that begins the asynchronous operation.</source>
          <target state="translated">O delegado que inicia a operação assíncrona.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)">
          <source>The delegate that ends the asynchronous operation.</source>
          <target state="translated">O delegado que finaliza a operação assíncrona.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)">
          <source>An object containing data to be used by the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Um objeto que contém dados a serem usados pelo representante <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)">
          <source>Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</source>
          <target state="translated">Cria uma tarefa que representa um par de métodos de início e de encerramento que estão em conformidade com o padrão do Modelo de Programação Assíncrona.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)">
          <source>The created task that represents the asynchronous operation.</source>
          <target state="translated">A tarefa criada que representa a operação assíncrona.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)">
          <source>This method throws any exceptions thrown by the <ph id="ph1">`beginMethod`</ph>.</source>
          <target state="translated">Este método lança as exceções geradas pelo <ph id="ph1">`beginMethod`</ph>.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)">
          <source>Exceptions for <ph id="ph1">`endmethod`</ph> are thrown when waiting on the returned task.</source>
          <target state="translated">Exceções para <ph id="ph1">`endmethod`</ph> são geradas quando aguardar pela tarefa retornada.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="beginMethod" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="beginMethod" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> whose completion should trigger the processing of the <bpt id="p1">&lt;c&gt;</bpt>endMethod<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> cuja conclusão deve disparar o processamento do <bpt id="p1">&lt;c&gt;</bpt>endMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)">
          <source>The function delegate that processes the completed <bpt id="p1">&lt;c&gt;</bpt>asyncResult<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O representante de função que processa o <bpt id="p1">&lt;c&gt;</bpt>asyncResult<ept id="p1">&lt;/c&gt;</ept> concluído.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)">
          <source>One of the enumeration values that controls the behavior of the created task.</source>
          <target state="translated">Um dos valores de enumeração que controla o comportamento da tarefa criada.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)">
          <source>Creates a task that executes an end method function when a specified <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> completes.</source>
          <target state="translated">Cria uma tarefa que executa uma função do método de encerramento quando um <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> especificado é concluído.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)">
          <source>A task that represents the asynchronous operation.</source>
          <target state="translated">Uma tarefa que representa a operação assíncrona.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> argument specifies an invalid value.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> especifica um valor inválido.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The delegate that begins the asynchronous operation.</source>
          <target state="translated">O delegado que inicia a operação assíncrona.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The delegate that ends the asynchronous operation.</source>
          <target state="translated">O delegado que finaliza a operação assíncrona.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>An object containing data to be used by the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Um objeto que contém dados a serem usados pelo representante <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>One of the enumeration values that controls the behavior of the created task.</source>
          <target state="translated">Um dos valores de enumeração que controla o comportamento da tarefa criada.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</source>
          <target state="translated">Cria uma tarefa que representa um par de métodos de início e de encerramento que estão em conformidade com o padrão do Modelo de Programação Assíncrona.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> that represents the asynchronous operation.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> criado que representa a operação assíncrona.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>This method throws any exceptions thrown by the <ph id="ph1">`beginMethod`</ph>.</source>
          <target state="translated">Este método lança as exceções geradas pelo <ph id="ph1">`beginMethod`</ph>.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>Exceptions for <ph id="ph1">`endmethod`</ph> are thrown when waiting on the returned task.</source>
          <target state="translated">Exceções para <ph id="ph1">`endmethod`</ph> são geradas quando aguardar pela tarefa retornada.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="beginMethod" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="beginMethod" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> argument specifies an invalid value.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> especifica um valor inválido.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> whose completion should trigger the processing of the <bpt id="p1">&lt;c&gt;</bpt>endMethod<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> cuja conclusão deve disparar o processamento do <bpt id="p1">&lt;c&gt;</bpt>endMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The function delegate that processes the completed <bpt id="p1">&lt;c&gt;</bpt>asyncResult<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O representante de função que processa o <bpt id="p1">&lt;c&gt;</bpt>asyncResult<ept id="p1">&lt;/c&gt;</ept> concluído.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>One of the enumeration values that controls the behavior of the created task.</source>
          <target state="translated">Um dos valores de enumeração que controla o comportamento da tarefa criada.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The task scheduler that is used to schedule the task that executes the end method.</source>
          <target state="translated">O agendador de tarefas usado para agendar a tarefa que executa o método de encerramento.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Creates a task that executes an end method function when a specified <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> completes.</source>
          <target state="translated">Cria uma tarefa que executa uma função do método de encerramento quando um <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> especificado é concluído.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The created task that represents the asynchronous operation.</source>
          <target state="translated">A tarefa criada que representa a operação assíncrona.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> parameter specifies an invalid value.</source>
          <target state="translated">O parâmetro <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> especifica um valor inválido.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)">
          <source>The type of the first argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">O tipo do primeiro argumento passado para o <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)">
          <source>The delegate that begins the asynchronous operation.</source>
          <target state="translated">O delegado que inicia a operação assíncrona.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)">
          <source>The delegate that ends the asynchronous operation.</source>
          <target state="translated">O delegado que finaliza a operação assíncrona.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)">
          <source>The first argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">O primeiro argumento passado para o representante <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)">
          <source>An object containing data to be used by the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Um objeto que contém dados a serem usados pelo representante <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)">
          <source>Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</source>
          <target state="translated">Cria uma tarefa que representa um par de métodos de início e de encerramento que estão em conformidade com o padrão do Modelo de Programação Assíncrona.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)">
          <source>The created task that represents the asynchronous operation.</source>
          <target state="translated">A tarefa criada que representa a operação assíncrona.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)">
          <source>This method throws any exceptions thrown by the <ph id="ph1">`beginMethod`</ph>.</source>
          <target state="translated">Este método lança as exceções geradas pelo <ph id="ph1">`beginMethod`</ph>.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)">
          <source>Exceptions for <ph id="ph1">`endmethod`</ph> are thrown when waiting on the returned task.</source>
          <target state="translated">Exceções para <ph id="ph1">`endmethod`</ph> são geradas quando aguardar pela tarefa retornada.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="beginMethod" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="beginMethod" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The type of the first argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">O tipo do primeiro argumento passado para o <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The delegate that begins the asynchronous operation.</source>
          <target state="translated">O delegado que inicia a operação assíncrona.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The delegate that ends the asynchronous operation.</source>
          <target state="translated">O delegado que finaliza a operação assíncrona.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The first argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">O primeiro argumento passado para o representante <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>An object containing data to be used by the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Um objeto que contém dados a serem usados pelo representante <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>One of the enumeration values that controls the behavior of the created task.</source>
          <target state="translated">Um dos valores de enumeração que controla o comportamento da tarefa criada.</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</source>
          <target state="translated">Cria uma tarefa que representa um par de métodos de início e de encerramento que estão em conformidade com o padrão do Modelo de Programação Assíncrona.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The created task that represents the asynchronous operation.</source>
          <target state="translated">A tarefa criada que representa a operação assíncrona.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>This method throws any exceptions thrown by the <ph id="ph1">`beginMethod`</ph>.</source>
          <target state="translated">Este método lança as exceções geradas pelo <ph id="ph1">`beginMethod`</ph>.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>Exceptions for <ph id="ph1">`endmethod`</ph> are thrown when waiting on the returned task.</source>
          <target state="translated">Exceções para <ph id="ph1">`endmethod`</ph> são geradas quando aguardar pela tarefa retornada.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="beginMethod" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="beginMethod" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> parameter specifies an invalid value.</source>
          <target state="translated">O parâmetro <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> especifica um valor inválido.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)">
          <source>The type of the second argument passed to <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">O tipo do segundo argumento passado para <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)">
          <source>The type of the first argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">O tipo do primeiro argumento passado para o <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)">
          <source>The delegate that begins the asynchronous operation.</source>
          <target state="translated">O delegado que inicia a operação assíncrona.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)">
          <source>The delegate that ends the asynchronous operation.</source>
          <target state="translated">O delegado que finaliza a operação assíncrona.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)">
          <source>The first argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">O primeiro argumento passado para o representante <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)">
          <source>The second argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">O segundo argumento passado para o representante <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)">
          <source>An object containing data to be used by the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Um objeto que contém dados a serem usados pelo representante <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)">
          <source>Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</source>
          <target state="translated">Cria uma tarefa que representa um par de métodos de início e de encerramento que estão em conformidade com o padrão do Modelo de Programação Assíncrona.</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)">
          <source>The created task that represents the asynchronous operation.</source>
          <target state="translated">A tarefa criada que representa a operação assíncrona.</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)">
          <source>This method throws any exceptions thrown by the <ph id="ph1">`beginMethod`</ph>.</source>
          <target state="translated">Este método lança as exceções geradas pelo <ph id="ph1">`beginMethod`</ph>.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)">
          <source>Exceptions for <ph id="ph1">`endmethod`</ph> are thrown when waiting on the returned task.</source>
          <target state="translated">Exceções para <ph id="ph1">`endmethod`</ph> são geradas quando aguardar pela tarefa retornada.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="beginMethod" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="beginMethod" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The type of the second argument passed to <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">O tipo do segundo argumento passado para <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The type of the first argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">O tipo do primeiro argumento passado para o <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The delegate that begins the asynchronous operation.</source>
          <target state="translated">O delegado que inicia a operação assíncrona.</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The delegate that ends the asynchronous operation.</source>
          <target state="translated">O delegado que finaliza a operação assíncrona.</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The first argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">O primeiro argumento passado para o representante <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The second argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">O segundo argumento passado para o representante <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>An object containing data to be used by the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Um objeto que contém dados a serem usados pelo representante <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>An object that controls the behavior of the created <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Um objeto que controla o comportamento da <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> criada.</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</source>
          <target state="translated">Cria uma tarefa que representa um par de métodos de início e de encerramento que estão em conformidade com o padrão do Modelo de Programação Assíncrona.</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The created task that represents the asynchronous operation.</source>
          <target state="translated">A tarefa criada que representa a operação assíncrona.</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>This method throws any exceptions thrown by the <ph id="ph1">`beginMethod`</ph>.</source>
          <target state="translated">Este método lança as exceções geradas pelo <ph id="ph1">`beginMethod`</ph>.</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>Exceptions for <ph id="ph1">`endmethod`</ph> are thrown when waiting on the returned task.</source>
          <target state="translated">Exceções para <ph id="ph1">`endmethod`</ph> são geradas quando aguardar pela tarefa retornada.</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="beginMethod" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="beginMethod" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> parameter specifies an invalid value.</source>
          <target state="translated">O parâmetro <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> especifica um valor inválido.</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)">
          <source>The type of the second argument passed to <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">O tipo do segundo argumento passado para <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)">
          <source>The type of the third argument passed to <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">O tipo do terceiro argumento passado para <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)">
          <source>The type of the first argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">O tipo do primeiro argumento passado para o <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)">
          <source>The delegate that begins the asynchronous operation.</source>
          <target state="translated">O delegado que inicia a operação assíncrona.</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)">
          <source>The delegate that ends the asynchronous operation.</source>
          <target state="translated">O delegado que finaliza a operação assíncrona.</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)">
          <source>The first argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">O primeiro argumento passado para o representante <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)">
          <source>The second argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">O segundo argumento passado para o representante <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)">
          <source>The third argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">O terceiro argumento passado para o representante <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)">
          <source>An object containing data to be used by the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Um objeto que contém dados a serem usados pelo representante <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)">
          <source>Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</source>
          <target state="translated">Cria uma tarefa que representa um par de métodos de início e de encerramento que estão em conformidade com o padrão do Modelo de Programação Assíncrona.</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)">
          <source>The created task that represents the asynchronous operation.</source>
          <target state="translated">A tarefa criada que representa a operação assíncrona.</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)">
          <source>This method throws any exceptions thrown by the <ph id="ph1">`beginMethod`</ph>.</source>
          <target state="translated">Este método lança as exceções geradas pelo <ph id="ph1">`beginMethod`</ph>.</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)">
          <source>Exceptions for <ph id="ph1">`endmethod`</ph> are thrown when waiting on the returned task.</source>
          <target state="translated">Exceções para <ph id="ph1">`endmethod`</ph> são geradas quando aguardar pela tarefa retornada.</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="beginMethod" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="beginMethod" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The type of the second argument passed to <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">O tipo do segundo argumento passado para <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The type of the third argument passed to <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">O tipo do terceiro argumento passado para <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The type of the first argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">O tipo do primeiro argumento passado para o <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The delegate that begins the asynchronous operation.</source>
          <target state="translated">O delegado que inicia a operação assíncrona.</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The delegate that ends the asynchronous operation.</source>
          <target state="translated">O delegado que finaliza a operação assíncrona.</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The first argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">O primeiro argumento passado para o representante <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The second argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">O segundo argumento passado para o representante <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The third argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">O terceiro argumento passado para o representante <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>An object containing data to be used by the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Um objeto que contém dados a serem usados pelo representante <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>An object that controls the behavior of the created task.</source>
          <target state="translated">Um objeto que controla o comportamento da tarefa criada.</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</source>
          <target state="translated">Cria uma tarefa que representa um par de métodos de início e de encerramento que estão em conformidade com o padrão do Modelo de Programação Assíncrona.</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The created task that represents the asynchronous operation.</source>
          <target state="translated">A tarefa criada que representa a operação assíncrona.</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>This method throws any exceptions thrown by the <ph id="ph1">`beginMethod`</ph>.</source>
          <target state="translated">Este método lança as exceções geradas pelo <ph id="ph1">`beginMethod`</ph>.</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>Exceptions for <ph id="ph1">`endmethod`</ph> are thrown when waiting on the returned task.</source>
          <target state="translated">Exceções para <ph id="ph1">`endmethod`</ph> são geradas quando aguardar pela tarefa retornada.</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="beginMethod" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="beginMethod" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> parameter specifies an invalid value.</source>
          <target state="translated">O parâmetro <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> especifica um valor inválido.</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.TaskFactory`1.Scheduler">
          <source>Gets the task scheduler for this task factory.</source>
          <target state="translated">Obtém o agendador de tarefas para esta fábrica de tarefas.</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.TaskFactory`1.Scheduler">
          <source>The task scheduler for this task factory.</source>
          <target state="translated">O Agendador de tarefas para esta fábrica de tarefas.</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.TaskFactory`1.Scheduler">
          <source>This property returns the default scheduler for this factory.</source>
          <target state="translated">Essa propriedade retorna o agendador padrão para esta fábrica.</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.TaskFactory`1.Scheduler">
          <source>It will be used to schedule all tasks unless another scheduler is explicitly specified during calls to this factory's methods.</source>
          <target state="translated">Ele será usado para programar todas as tarefas, a menos que outro Agendador é especificado explicitamente durante as chamadas para métodos essa fábrica.</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.TaskFactory`1.Scheduler">
          <source>If this property returns <ph id="ph1">`null`</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskScheduler.Current%2A&gt;</ph> will be used.</source>
          <target state="translated">Se essa propriedade retorna <ph id="ph1">`null`</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskScheduler.Current%2A&gt;</ph> será usado.</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.TaskFactory`1">
          <source>Creates and starts a task.</source>
          <target state="translated">Cria e inicia uma tarefa.</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0})">
          <source>A function delegate that returns the future result to be available through the task.</source>
          <target state="translated">Um delegado de função que retorna o resultado futuro que estará disponível por meio da tarefa.</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0})">
          <source>Creates and starts a task.</source>
          <target state="translated">Cria e inicia uma tarefa.</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0})">
          <source>The started task.</source>
          <target state="translated">A tarefa iniciada.</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0})">
          <source>Calling <ph id="ph1">`StartNew`</ph> is functionally equivalent to creating a task by using one of the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> constructors, and then calling the <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> method to schedule it for execution.</source>
          <target state="translated">Chamando <ph id="ph1">`StartNew`</ph> é funcionalmente equivalente à criação de uma tarefa usando um do <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> construtores e, em seguida, chamar o <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> método agendá-lo para execução.</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0})">
          <source>However, unless creation and scheduling must be separated, <ph id="ph1">`StartNew`</ph> is the recommended approach for both simplicity and performance.</source>
          <target state="translated">No entanto, a menos que a criação e agendamento devem ser separados, <ph id="ph1">`StartNew`</ph> é a abordagem recomendada para obter simplicidade e desempenho.</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0})">
          <source>The <ph id="ph1">&lt;paramref name="function" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="function" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object)">
          <source>A function delegate that returns the future result to be available through the task.</source>
          <target state="translated">Um delegado de função que retorna o resultado futuro que estará disponível por meio da tarefa.</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object)">
          <source>An object that contains data to be used by the <bpt id="p1">&lt;c&gt;</bpt>function<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Um objeto que contém dados a serem usados pelo representante de <bpt id="p1">&lt;c&gt;</bpt>function<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object)">
          <source>Creates and starts a task.</source>
          <target state="translated">Cria e inicia uma tarefa.</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object)">
          <source>The started task.</source>
          <target state="translated">A tarefa iniciada.</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object)">
          <source>Calling <ph id="ph1">`StartNew`</ph> is functionally equivalent to creating a task by using one of the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> constructors and then calling the <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> method to schedule it for execution.</source>
          <target state="translated">Chamando <ph id="ph1">`StartNew`</ph> é funcionalmente equivalente à criação de uma tarefa usando um do <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> construtores e, em seguida, chamar o <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> método agendá-lo para execução.</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object)">
          <source>However, unless creation and scheduling must be separated, <ph id="ph1">`StartNew`</ph> is the recommended approach for both simplicity and performance.</source>
          <target state="translated">No entanto, a menos que a criação e agendamento devem ser separados, <ph id="ph1">`StartNew`</ph> é a abordagem recomendada para obter simplicidade e desempenho.</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="function" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="function" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken)">
          <source>A function delegate that returns the future result to be available through the task.</source>
          <target state="translated">Um delegado de função que retorna o resultado futuro que estará disponível por meio da tarefa.</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken)">
          <source>The cancellation token that will be assigned to the new task.</source>
          <target state="translated">O token de cancelamento que será atribuído à nova tarefa.</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken)">
          <source>Creates and starts a task.</source>
          <target state="translated">Cria e inicia uma tarefa.</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken)">
          <source>The started task.</source>
          <target state="translated">A tarefa iniciada.</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken)">
          <source>Calling <ph id="ph1">`StartNew`</ph> is functionally equivalent to creating a task by using one of the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> constructors and then calling the <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> method to schedule it for execution.</source>
          <target state="translated">Chamando <ph id="ph1">`StartNew`</ph> é funcionalmente equivalente à criação de uma tarefa usando um do <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> construtores e, em seguida, chamar o <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> método agendá-lo para execução.</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken)">
          <source>However, unless creation and scheduling must be separated, <ph id="ph1">`StartNew`</ph> is the recommended approach for both simplicity and performance.</source>
          <target state="translated">No entanto, a menos que a criação e agendamento devem ser separados, <ph id="ph1">`StartNew`</ph> é a abordagem recomendada para obter simplicidade e desempenho.</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken)">
          <source>The cancellation token source that created <ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated">A origem do token de cancelamento que criou <ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> já foi descartada.</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="function" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="function" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)">
          <source>A function delegate that returns the future result to be available through the task.</source>
          <target state="translated">Um delegado de função que retorna o resultado futuro que estará disponível por meio da tarefa.</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)">
          <source>One of the enumeration values that controls the behavior of the created task.</source>
          <target state="translated">Um dos valores de enumeração que controla o comportamento da tarefa criada.</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)">
          <source>Creates and starts a task.</source>
          <target state="translated">Cria e inicia uma tarefa.</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)">
          <source>The started <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> iniciado.</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)">
          <source>Calling <ph id="ph1">`StartNew`</ph> is functionally equivalent to creating a task by using one of the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> constructors and then calling the <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> method to schedule it for execution.</source>
          <target state="translated">Chamando <ph id="ph1">`StartNew`</ph> é funcionalmente equivalente à criação de uma tarefa usando um do <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> construtores e, em seguida, chamar o <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> método agendá-lo para execução.</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)">
          <source>However, unless creation and scheduling must be separated, <ph id="ph1">`StartNew`</ph> is the recommended approach for both simplicity and performance.</source>
          <target state="translated">No entanto, a menos que a criação e agendamento devem ser separados, <ph id="ph1">`StartNew`</ph> é a abordagem recomendada para obter simplicidade e desempenho.</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="function" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="function" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> parameter specifies an invalid value.</source>
          <target state="translated">O parâmetro <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> especifica um valor inválido.</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)">
          <source>A function delegate that returns the future result to be available through the task.</source>
          <target state="translated">Um delegado de função que retorna o resultado futuro que estará disponível por meio da tarefa.</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)">
          <source>An object that contains data to be used by the <bpt id="p1">&lt;c&gt;</bpt>function<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Um objeto que contém dados a serem usados pelo representante de <bpt id="p1">&lt;c&gt;</bpt>function<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)">
          <source>The cancellation token that will be assigned to the new task.</source>
          <target state="translated">O token de cancelamento que será atribuído à nova tarefa.</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)">
          <source>Creates and starts a task.</source>
          <target state="translated">Cria e inicia uma tarefa.</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)">
          <source>The started task.</source>
          <target state="translated">A tarefa iniciada.</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)">
          <source>Calling <ph id="ph1">`StartNew`</ph> is functionally equivalent to creating a task by using one of the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> constructors and then calling the <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> method to schedule it for execution.</source>
          <target state="translated">Chamando <ph id="ph1">`StartNew`</ph> é funcionalmente equivalente à criação de uma tarefa usando um do <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> construtores e, em seguida, chamar o <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> método agendá-lo para execução.</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)">
          <source>However, unless creation and scheduling must be separated, <ph id="ph1">`StartNew`</ph> is the recommended approach for both simplicity and performance.</source>
          <target state="translated">No entanto, a menos que a criação e agendamento devem ser separados, <ph id="ph1">`StartNew`</ph> é a abordagem recomendada para obter simplicidade e desempenho.</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)">
          <source>The cancellation token source that created <ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated">A origem do token de cancelamento que criou <ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> já foi descartada.</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="function" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="function" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>A function delegate that returns the future result to be available through the task.</source>
          <target state="translated">Um delegado de função que retorna o resultado futuro que estará disponível por meio da tarefa.</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>An object that contains data to be used by the <bpt id="p1">&lt;c&gt;</bpt>function<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Um objeto que contém dados a serem usados pelo representante de <bpt id="p1">&lt;c&gt;</bpt>function<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>One of the enumeration values that controls the behavior of the created task.</source>
          <target state="translated">Um dos valores de enumeração que controla o comportamento da tarefa criada.</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>Creates and starts a task.</source>
          <target state="translated">Cria e inicia uma tarefa.</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The started task.</source>
          <target state="translated">A tarefa iniciada.</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>Calling <ph id="ph1">`StartNew`</ph> is functionally equivalent to creating a task by using one of the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> constructors and then calling the <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> method to schedule it for execution.</source>
          <target state="translated">Chamando <ph id="ph1">`StartNew`</ph> é funcionalmente equivalente à criação de uma tarefa usando um do <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> construtores e, em seguida, chamar o <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> método agendá-lo para execução.</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>However, unless creation and scheduling must be separated, <ph id="ph1">`StartNew`</ph> is the recommended approach for both simplicity and performance.</source>
          <target state="translated">No entanto, a menos que a criação e agendamento devem ser separados, <ph id="ph1">`StartNew`</ph> é a abordagem recomendada para obter simplicidade e desempenho.</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="function" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="function" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> parameter specifies an invalid value.</source>
          <target state="translated">O parâmetro <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> especifica um valor inválido.</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>A function delegate that returns the future result to be available through the task.</source>
          <target state="translated">Um delegado de função que retorna o resultado futuro que estará disponível por meio da tarefa.</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The cancellation token that will be assigned to the new task.</source>
          <target state="translated">O token de cancelamento que será atribuído à nova tarefa.</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>One of the enumeration values that controls the behavior of the created task.</source>
          <target state="translated">Um dos valores de enumeração que controla o comportamento da tarefa criada.</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The task scheduler that is used to schedule the created task.</source>
          <target state="translated">O agendador de tarefas é usado para agendar a tarefa criada.</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Creates and starts a task.</source>
          <target state="translated">Cria e inicia uma tarefa.</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The started task.</source>
          <target state="translated">A tarefa iniciada.</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Calling <ph id="ph1">`StartNew`</ph> is functionally equivalent to creating a task by using one of the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> constructors and then calling the <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> method to schedule it for execution.</source>
          <target state="translated">Chamando <ph id="ph1">`StartNew`</ph> é funcionalmente equivalente à criação de uma tarefa usando um do <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> construtores e, em seguida, chamar o <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> método agendá-lo para execução.</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>However, unless creation and scheduling must be separated, <ph id="ph1">`StartNew`</ph> is the recommended approach for both simplicity and performance.</source>
          <target state="translated">No entanto, a menos que a criação e agendamento devem ser separados, <ph id="ph1">`StartNew`</ph> é a abordagem recomendada para obter simplicidade e desempenho.</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The cancellation token source that created <ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated">A origem do token de cancelamento que criou <ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> já foi descartada.</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="function" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="function" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> parameter specifies an invalid value.</source>
          <target state="translated">O parâmetro <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> especifica um valor inválido.</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>A function delegate that returns the future result to be available through the task.</source>
          <target state="translated">Um delegado de função que retorna o resultado futuro que estará disponível por meio da tarefa.</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>An object that contains data to be used by the <bpt id="p1">&lt;c&gt;</bpt>function<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Um objeto que contém dados a serem usados pelo representante de <bpt id="p1">&lt;c&gt;</bpt>function<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The cancellation token that will be assigned to the new task.</source>
          <target state="translated">O token de cancelamento que será atribuído à nova tarefa.</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>One of the enumeration values that controls the behavior of the created task.</source>
          <target state="translated">Um dos valores de enumeração que controla o comportamento da tarefa criada.</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The task scheduler that is used to schedule the created task.</source>
          <target state="translated">O agendador de tarefas é usado para agendar a tarefa criada.</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Creates and starts a task.</source>
          <target state="translated">Cria e inicia uma tarefa.</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The started task.</source>
          <target state="translated">A tarefa iniciada.</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Calling <ph id="ph1">`StartNew`</ph> is functionally equivalent to creating a task by using one of the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> constructors and then calling the <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> method to schedule it for execution.</source>
          <target state="translated">Chamando <ph id="ph1">`StartNew`</ph> é funcionalmente equivalente à criação de uma tarefa usando um do <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> construtores e, em seguida, chamar o <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> método agendá-lo para execução.</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>However, unless creation and scheduling must be separated, <ph id="ph1">`StartNew`</ph> is the recommended approach for both simplicity and performance.</source>
          <target state="translated">No entanto, a menos que a criação e agendamento devem ser separados, <ph id="ph1">`StartNew`</ph> é a abordagem recomendada para obter simplicidade e desempenho.</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The cancellation token source that created <ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated">A origem do token de cancelamento que criou <ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> já foi descartada.</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="function" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="function" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> parameter specifies an invalid value.</source>
          <target state="translated">O parâmetro <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> especifica um valor inválido.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>