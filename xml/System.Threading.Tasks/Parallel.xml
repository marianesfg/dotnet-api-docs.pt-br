<Type Name="Parallel" FullName="System.Threading.Tasks.Parallel">
  <Metadata><Meta Name="ms.openlocfilehash" Value="772fa50da47119d829d6c80f447fa876718c81d8" /><Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="11/29/2018" /><Meta Name="ms.locfileid" Value="52610388" /></Metadata><TypeSignature Language="C#" Value="public static class Parallel" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Parallel extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.Parallel" />
  <TypeSignature Language="VB.NET" Value="Public Class Parallel" />
  <TypeSignature Language="C++ CLI" Value="public ref class Parallel abstract sealed" />
  <TypeSignature Language="F#" Value="type Parallel = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="e2e11-101">Fornece suporte para regiões e loops paralelos.</span><span class="sxs-lookup"><span data-stu-id="e2e11-101">Provides support for parallel loops and regions.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2e11-102">O <xref:System.Threading.Tasks.Parallel> classe fornece substituições paralela de dados com base na biblioteca para operações comuns como no caso de loops, para cada loops e execução de um conjunto de instruções.</span><span class="sxs-lookup"><span data-stu-id="e2e11-102">The <xref:System.Threading.Tasks.Parallel> class provides library-based data parallel replacements for common operations such as for loops, for each loops, and execution of a set of statements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2e11-103">Este exemplo demonstra várias abordagens para implementar um loop paralelo usando várias construções de linguagem.</span><span class="sxs-lookup"><span data-stu-id="e2e11-103">This example demonstrates several approaches to implementing a parallel loop using multiple language constructs.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#07](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelintro.cs#07)]
 [!code-vb[System.Threading.Tasks.Parallel#07](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelintro.vb#07)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="e2e11-104">Todos os membros públicos e protegidos da <see cref="T:System.Threading.Tasks.Parallel" /> são thread-safe e podem ser usados simultaneamente de vários threads.</span><span class="sxs-lookup"><span data-stu-id="e2e11-104">All public and protected members of <see cref="T:System.Threading.Tasks.Parallel" /> are thread-safe and may be used concurrently from multiple threads.</span></span></threadsafe>
    <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md"><span data-ttu-id="e2e11-105">Paralelismo de dados (biblioteca de tarefas paralelas)</span><span class="sxs-lookup"><span data-stu-id="e2e11-105">Data Parallelism (Task Parallel Library)</span></span></related>
    <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/Samples-for-Parallel-b4b76364"><span data-ttu-id="e2e11-106">Exemplos de programação paralela com o .NET Framework</span><span class="sxs-lookup"><span data-stu-id="e2e11-106">Samples for Parallel Programming with the .NET Framework</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName="For">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e2e11-107">Executa um loop <see langword="for" /> (<see langword="For" /> no Visual Basic) no qual as iterações podem ser executadas em paralelo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-107">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic) loop in which iterations may run in parallel.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, Action&lt;int,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int32 fromInclusive, int32 toExclusive, class System.Action`2&lt;int32, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For (fromInclusive As Integer, toExclusive As Integer, body As Action(Of Integer, ParallelLoopState)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, Action&lt;int, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int * int * Action&lt;int, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="body" Type="System.Action&lt;System.Int32,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive"><span data-ttu-id="e2e11-108">O índice inicial, inclusivo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-108">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="e2e11-109">O índice final, exclusivo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-109">The end index, exclusive.</span></span></param>
        <param name="body"><span data-ttu-id="e2e11-110">O delegado invocado uma vez por iteração.</span><span class="sxs-lookup"><span data-stu-id="e2e11-110">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="e2e11-111">Executa um loop <see langword="for" /> (<see langword="For" /> no Visual Basic) no qual as iterações podem ser executadas em paralelo e o estado do loop pode ser monitorado e manipulado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-111">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic) loop in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="e2e11-112">Uma estrutura que contém informações sobre qual parte do loop foi concluída.</span><span class="sxs-lookup"><span data-stu-id="e2e11-112">A  structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2e11-113">O `body` delegado é invocado uma vez para cada valor no intervalo de iteração (`fromInclusive`, `toExclusive`).</span><span class="sxs-lookup"><span data-stu-id="e2e11-113">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="e2e11-114">Ele é fornecido com dois argumentos:</span><span class="sxs-lookup"><span data-stu-id="e2e11-114">It is provided with two arguments:</span></span>  
  
-   <span data-ttu-id="e2e11-115">Um <xref:System.Int32> valor que representa a contagem de iteração.</span><span class="sxs-lookup"><span data-stu-id="e2e11-115">An <xref:System.Int32> value that represents the iteration count.</span></span>  
  
-   <span data-ttu-id="e2e11-116">Um <xref:System.Threading.Tasks.ParallelLoopState> instância que pode ser usada para interromper o loop prematuramente.</span><span class="sxs-lookup"><span data-stu-id="e2e11-116">A <xref:System.Threading.Tasks.ParallelLoopState> instance that can be used to break out of the loop prematurely.</span></span> <span data-ttu-id="e2e11-117">O <xref:System.Threading.Tasks.ParallelLoopState> objeto é criado pelo compilador; ele não pode ser instanciado no código do usuário.</span><span class="sxs-lookup"><span data-stu-id="e2e11-117">The <xref:System.Threading.Tasks.ParallelLoopState> object is created by the compiler; it cannot be instantiated in user code.</span></span>  
  
 <span data-ttu-id="e2e11-118">Chamar o <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método informa o `for` operação que não é necessário executar iterações depois do atual.</span><span class="sxs-lookup"><span data-stu-id="e2e11-118">Calling the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method informs the `for` operation that iterations after the current one don't have to execute.</span></span> <span data-ttu-id="e2e11-119">No entanto, todas as iterações antes atual um ainda terá a ser executada se eles ainda não fez isso.</span><span class="sxs-lookup"><span data-stu-id="e2e11-119">However, all iterations before the current one will still have to be executed if they haven't already.</span></span>  
  
 <span data-ttu-id="e2e11-120">Portanto, chamar <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> é semelhante ao uso de uma operação de interrupção dentro de um convencional `for` loop em uma linguagem como c#, mas ele não é um substituto perfeito: por exemplo, não há nenhuma garantia de que as iterações depois do atual serão definitivamente não Execute.</span><span class="sxs-lookup"><span data-stu-id="e2e11-120">Therefore, calling <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is similar to using a break operation within a conventional `for` loop in a language like C#, but it is not a perfect substitute: For example, there is no guarantee that iterations after the current one will definitely not execute.</span></span>  
  
 <span data-ttu-id="e2e11-121">Se a execução de todas as iterações antes atual não é necessário, use o <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método em vez de usar <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>.</span><span class="sxs-lookup"><span data-stu-id="e2e11-121">If executing all iterations before the current one is not necessary, use the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method instead of using <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>.</span></span> <span data-ttu-id="e2e11-122">Chamando <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> informa o `for` loop que ele pode abandonar restantes de todas as iterações, independentemente se eles estão antes ou após a iteração atual, porque todos os necessário trabalho será já tenha sido concluído.</span><span class="sxs-lookup"><span data-stu-id="e2e11-122">Calling <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> informs the `for` loop that it may abandon all remaining iterations, regardless of whether they're before or after the current iteration, because all required work will have already been completed.</span></span> <span data-ttu-id="e2e11-123">No entanto, como com <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, há nenhuma garantia em relação a quais outras iterações não serão executado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-123">However, as with <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, there are no guarantees regarding which other iterations will not execute.</span></span>  
  
 <span data-ttu-id="e2e11-124">Se um loop é encerrado prematuramente, o <xref:System.Threading.Tasks.ParallelLoopResult> estrutura que é retornada conterá informações relevantes sobre a conclusão do loop.</span><span class="sxs-lookup"><span data-stu-id="e2e11-124">If a loop is ended prematurely, the <xref:System.Threading.Tasks.ParallelLoopResult> structure that is returned will contain relevant information about the loop's completion.</span></span>  
  
 <span data-ttu-id="e2e11-125">Se `fromInclusive` é maior que ou igual a `toExclusive`, o método retornará imediatamente sem executar qualquer iterações.</span><span class="sxs-lookup"><span data-stu-id="e2e11-125">If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2e11-126">O exemplo a seguir executa até 100 iterações de um loop em paralelo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-126">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="e2e11-127">Cada iteração pausa por um intervalo aleatório de 1 a 1.000 milissegundos.</span><span class="sxs-lookup"><span data-stu-id="e2e11-127">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="e2e11-128">Um valor gerado aleatoriamente determina em qual iteração do loop de <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> método é chamado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-128">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> method is called.</span></span> <span data-ttu-id="e2e11-129">Como a saída do exemplo mostra, nenhuma iteração cujo índice é maior que o <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A?displayProperty=nameWithType> início do valor de propriedade após a chamada para o <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="e2e11-129">As the output from the example shows, no iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A?displayProperty=nameWithType> property value start after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="e2e11-130">Como as iterações do loop são ainda podem estar em execução quando o <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> método é chamado, as chamadas de cada iteração a <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A?displayProperty=nameWithType> propriedade para verificar se a outra iteração tiver chamado o <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="e2e11-130">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A?displayProperty=nameWithType> property to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="e2e11-131">Se o valor da propriedade for `true`, a iteração verifica o valor da <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A?displayProperty=nameWithType> propriedade e, se ele for maior que o valor de índice da iteração atual, retorna imediatamente.</span><span class="sxs-lookup"><span data-stu-id="e2e11-131">If  the property value is `true`, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A?displayProperty=nameWithType> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2e11-132">O argumento <paramref name="body" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-132">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="e2e11-133">A exceção que contém todas as exceções individuais lançadas em todos os threads.</span><span class="sxs-lookup"><span data-stu-id="e2e11-133">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <altmember cref="T:System.Threading.Tasks.ParallelLoopState" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="e2e11-134">Loops paralelos</span><span class="sxs-lookup"><span data-stu-id="e2e11-134">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, Action&lt;int&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int32 fromInclusive, int32 toExclusive, class System.Action`1&lt;int32&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For (fromInclusive As Integer, toExclusive As Integer, body As Action(Of Integer)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, Action&lt;int&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int * int * Action&lt;int&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="body" Type="System.Action&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive"><span data-ttu-id="e2e11-135">O índice inicial, inclusivo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-135">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="e2e11-136">O índice final, exclusivo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-136">The end index, exclusive.</span></span></param>
        <param name="body"><span data-ttu-id="e2e11-137">O delegado invocado uma vez por iteração.</span><span class="sxs-lookup"><span data-stu-id="e2e11-137">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="e2e11-138">Executa um loop <see langword="for" /> (<see langword="For" /> no Visual Basic) no qual as iterações podem ser executadas em paralelo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-138">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic) loop in which iterations may run in parallel.</span></span></summary>
        <returns><span data-ttu-id="e2e11-139">Uma estrutura que contém informações sobre qual parte do loop foi concluída.</span><span class="sxs-lookup"><span data-stu-id="e2e11-139">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2e11-140">O `body` delegado é invocado uma vez para cada valor no intervalo de iteração (`fromInclusive`, `toExclusive`).</span><span class="sxs-lookup"><span data-stu-id="e2e11-140">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="e2e11-141">Ele é fornecido com a contagem de iteração (<xref:System.Int32>) como um parâmetro.</span><span class="sxs-lookup"><span data-stu-id="e2e11-141">It is provided with the iteration count (<xref:System.Int32>) as a parameter.</span></span>  
  
 <span data-ttu-id="e2e11-142">Se `fromInclusive` é maior que ou igual a `toExclusive`, o método retornará imediatamente sem executar qualquer iterações.</span><span class="sxs-lookup"><span data-stu-id="e2e11-142">If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2e11-143">O exemplo a seguir usa o <xref:System.Threading.Tasks.Parallel.For%2A> método 100 invocações de um delegado que gera bytes aleatórios de valores e computa sua soma.</span><span class="sxs-lookup"><span data-stu-id="e2e11-143">The following example uses the <xref:System.Threading.Tasks.Parallel.For%2A> method for 100 invocations of a delegate that generates random byte values and computes their sum.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel.For#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel.for/cs/for1.cs#1)]
 [!code-vb[System.Threading.Tasks.Parallel.For#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel.for/vb/for1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2e11-144">O argumento <paramref name="body" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-144">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="e2e11-145">A exceção que contém todas as exceções individuais lançadas em todos os threads.</span><span class="sxs-lookup"><span data-stu-id="e2e11-145">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="e2e11-146">Loops paralelos</span><span class="sxs-lookup"><span data-stu-id="e2e11-146">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, Action&lt;long,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int64 fromInclusive, int64 toExclusive, class System.Action`2&lt;int64, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For (fromInclusive As Long, toExclusive As Long, body As Action(Of Long, ParallelLoopState)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, Action&lt;long, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * Action&lt;int64, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="body" Type="System.Action&lt;System.Int64,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive"><span data-ttu-id="e2e11-147">O índice inicial, inclusivo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-147">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="e2e11-148">O índice final, exclusivo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-148">The end index, exclusive.</span></span></param>
        <param name="body"><span data-ttu-id="e2e11-149">O delegado invocado uma vez por iteração.</span><span class="sxs-lookup"><span data-stu-id="e2e11-149">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="e2e11-150">Executa um loop <see langword="for" /> (<see langword="For" /> no Visual Basic) com índices de 64 bits no qual as iterações podem ser executadas em paralelo e o estado do loop pode ser monitorado e manipulado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-150">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic) loop with 64-bit indexes in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="e2e11-151">Uma estrutura <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> que contém informações sobre qual parte do loop foi concluída.</span><span class="sxs-lookup"><span data-stu-id="e2e11-151">A <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> structure that contains information on what portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2e11-152">O `body` delegado é invocado uma vez para cada valor no intervalo de iteração (`fromInclusive`, `toExclusive`).</span><span class="sxs-lookup"><span data-stu-id="e2e11-152">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="e2e11-153">Ele é fornecido com os seguintes parâmetros: a contagem de iteração (<xref:System.Int64>) e um <xref:System.Threading.Tasks.ParallelLoopState> instância que pode ser usada para interromper o loop prematuramente.</span><span class="sxs-lookup"><span data-stu-id="e2e11-153">It is provided with the following parameters: the iteration count (<xref:System.Int64>), and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.</span></span>  
  
 <span data-ttu-id="e2e11-154">Chamar o <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método informa o `for` operação que iterações depois do atual não tem a serem executadas, mas fazer todas as iterações antes do atual.</span><span class="sxs-lookup"><span data-stu-id="e2e11-154">Calling the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method informs the `for` operation that iterations after the current one don't have to be executed, but all iterations before the current one do.</span></span>  
  
 <span data-ttu-id="e2e11-155">Portanto, chamar quebra é semelhante ao uso de uma operação de interrupção dentro de um convencional `for` loop em uma linguagem como c#, mas ele não é um substituto perfeito: por exemplo, não há nenhuma garantia de que iterações depois atual definitivamente não será executado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-155">Therefore, calling Break is similar to using a break operation within a conventional `for` loop in a language like C#, but it is not a perfect substitute: For example, there is no guarantee that iterations after the current one will definitely not execute.</span></span>  
  
 <span data-ttu-id="e2e11-156">Se a execução de todas as iterações antes atual não é necessário, use o <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método em vez de usar <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>.</span><span class="sxs-lookup"><span data-stu-id="e2e11-156">If executing all iterations before the current one is not necessary, use the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method instead of using <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>.</span></span> <span data-ttu-id="e2e11-157">Chamando <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> informa o `for` loop que ele pode abandonar restantes de todas as iterações, independentemente se eles estão antes ou após a iteração atual, porque todos os necessário trabalho será já tenha sido concluído.</span><span class="sxs-lookup"><span data-stu-id="e2e11-157">Calling <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> informs the `for` loop that it may abandon all remaining iterations, regardless of whether they're before or after the current iteration, because all required work will have already been completed.</span></span> <span data-ttu-id="e2e11-158">No entanto, como com <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, há nenhuma garantia em relação a quais outras iterações não serão executado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-158">However, as with <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, there are no guarantees regarding which other iterations will not execute.</span></span>  
  
 <span data-ttu-id="e2e11-159">Se um loop é encerrado prematuramente, o <xref:System.Threading.Tasks.ParallelLoopResult> estrutura que é retornada conterá informações relevantes sobre a conclusão do loop.</span><span class="sxs-lookup"><span data-stu-id="e2e11-159">If a loop is ended prematurely, the <xref:System.Threading.Tasks.ParallelLoopResult> structure that is returned will contain relevant information about the loop's completion.</span></span>  
  
 <span data-ttu-id="e2e11-160">Se `fromInclusive` é maior que ou igual a `toExclusive`, em seguida, o método retornará imediatamente sem executar qualquer iterações.</span><span class="sxs-lookup"><span data-stu-id="e2e11-160">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2e11-161">O argumento <paramref name="body" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-161">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="e2e11-162">A exceção que contém todas as exceções individuais lançadas em todos os threads.</span><span class="sxs-lookup"><span data-stu-id="e2e11-162">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="e2e11-163">Loops paralelos</span><span class="sxs-lookup"><span data-stu-id="e2e11-163">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, Action&lt;long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int64 fromInclusive, int64 toExclusive, class System.Action`1&lt;int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For (fromInclusive As Long, toExclusive As Long, body As Action(Of Long)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, Action&lt;long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * Action&lt;int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="body" Type="System.Action&lt;System.Int64&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive"><span data-ttu-id="e2e11-164">O índice inicial, inclusivo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-164">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="e2e11-165">O índice final, exclusivo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-165">The end index, exclusive.</span></span></param>
        <param name="body"><span data-ttu-id="e2e11-166">O delegado invocado uma vez por iteração.</span><span class="sxs-lookup"><span data-stu-id="e2e11-166">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="e2e11-167">Executa um loop <see langword="for" /> (<see langword="For" /> no Visual Basic) com índices de 64 bits no qual as iterações podem ser executadas em paralelo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-167">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic) loop with 64-bit indexes in which iterations may run in parallel.</span></span></summary>
        <returns><span data-ttu-id="e2e11-168">Uma estrutura que contém informações sobre qual parte do loop foi concluída.</span><span class="sxs-lookup"><span data-stu-id="e2e11-168">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2e11-169">O `body` delegado é invocado uma vez para cada valor no intervalo de iteração (`fromInclusive`, `toExclusive`).</span><span class="sxs-lookup"><span data-stu-id="e2e11-169">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="e2e11-170">Ele é fornecido com a contagem de iteração (<xref:System.Int64>) como um parâmetro.</span><span class="sxs-lookup"><span data-stu-id="e2e11-170">It is provided with the iteration count (<xref:System.Int64>) as a parameter.</span></span>  
  
 <span data-ttu-id="e2e11-171">Se `fromInclusive` é maior que ou igual a `toExclusive`, o método retornará imediatamente sem executar qualquer iterações.</span><span class="sxs-lookup"><span data-stu-id="e2e11-171">If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2e11-172">O argumento <paramref name="body" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-172">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="e2e11-173">A exceção que contém todas as exceções individuais lançadas em todos os threads.</span><span class="sxs-lookup"><span data-stu-id="e2e11-173">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="e2e11-174">Loops paralelos</span><span class="sxs-lookup"><span data-stu-id="e2e11-174">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;int,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int32 fromInclusive, int32 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`2&lt;int32, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;int, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int * int * System.Threading.Tasks.ParallelOptions * Action&lt;int, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;System.Int32,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive"><span data-ttu-id="e2e11-175">O índice inicial, inclusivo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-175">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="e2e11-176">O índice final, exclusivo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-176">The end index, exclusive.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="e2e11-177">Um objeto que configura o comportamento dessa operação.</span><span class="sxs-lookup"><span data-stu-id="e2e11-177">An object that configures the behavior of this operation.</span></span></param>
        <param name="body"><span data-ttu-id="e2e11-178">O delegado invocado uma vez por iteração.</span><span class="sxs-lookup"><span data-stu-id="e2e11-178">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="e2e11-179">Executa um loop <see langword="for" /> (<see langword="For" /> no Visual Basic) no qual as iterações podem ser executadas em paralelo, as opções do loop podem ser configuradas e o estado do loop pode ser monitorado e manipulado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-179">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic) loop in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="e2e11-180">Uma estrutura que contém informações sobre qual parte do loop foi concluída.</span><span class="sxs-lookup"><span data-stu-id="e2e11-180">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2e11-181">O `body` delegado é invocado uma vez para cada valor no intervalo de iteração (`fromInclusive`, `toExclusive`).</span><span class="sxs-lookup"><span data-stu-id="e2e11-181">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="e2e11-182">Ele é fornecido com os seguintes parâmetros: a contagem de iteração (<xref:System.Int32>) e um <xref:System.Threading.Tasks.ParallelLoopState> instância que pode ser usada para interromper o loop prematuramente.</span><span class="sxs-lookup"><span data-stu-id="e2e11-182">It is provided with the following parameters: the iteration count (<xref:System.Int32>), and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.</span></span>  
  
 <span data-ttu-id="e2e11-183">Se `fromInclusive` é maior que ou igual a `toExclusive`, o método retornará imediatamente sem executar qualquer iterações.</span><span class="sxs-lookup"><span data-stu-id="e2e11-183">If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="e2e11-184">O <see cref="T:System.Threading.CancellationToken" /> no argumento <paramref name="parallelOptions" /> foi cancelado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-184">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2e11-185">O argumento <paramref name="body" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-185">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-186">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-186">-or-</span></span> 
<span data-ttu-id="e2e11-187">O argumento <paramref name="parallelOptions" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-187">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="e2e11-188">A exceção que contém todas as exceções individuais lançadas em todos os threads.</span><span class="sxs-lookup"><span data-stu-id="e2e11-188">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e2e11-189">O <see cref="T:System.Threading.CancellationTokenSource" /> associado ao <see cref="T:System.Threading.CancellationToken" /> no <paramref name="parallelOptions" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-189">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="e2e11-190">Loops paralelos</span><span class="sxs-lookup"><span data-stu-id="e2e11-190">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;int&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int32 fromInclusive, int32 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`1&lt;int32&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;int&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int * int * System.Threading.Tasks.ParallelOptions * Action&lt;int&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive"><span data-ttu-id="e2e11-191">O índice inicial, inclusivo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-191">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="e2e11-192">O índice final, exclusivo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-192">The end index, exclusive.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="e2e11-193">Um objeto que configura o comportamento dessa operação.</span><span class="sxs-lookup"><span data-stu-id="e2e11-193">An object that configures the behavior of this operation.</span></span></param>
        <param name="body"><span data-ttu-id="e2e11-194">O delegado invocado uma vez por iteração.</span><span class="sxs-lookup"><span data-stu-id="e2e11-194">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="e2e11-195">Executa um loop <see langword="for" /> (<see langword="For" /> no Visual Basic) em que as iterações podem ser executadas em paralelo e as opções de loop podem ser configuradas.</span><span class="sxs-lookup"><span data-stu-id="e2e11-195">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic) loop in which iterations may run in parallel and loop options can be configured.</span></span></summary>
        <returns><span data-ttu-id="e2e11-196">Uma estrutura que contém informações sobre qual parte do loop foi concluída.</span><span class="sxs-lookup"><span data-stu-id="e2e11-196">A  structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2e11-197">O `body` delegado é invocado uma vez para cada valor no intervalo de iteração (`fromInclusive`, `toExclusive`).</span><span class="sxs-lookup"><span data-stu-id="e2e11-197">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="e2e11-198">Ele é fornecido com a contagem de iteração (<xref:System.Int32>) como um parâmetro.</span><span class="sxs-lookup"><span data-stu-id="e2e11-198">It is provided with the iteration count (<xref:System.Int32>) as a parameter.</span></span>  
  
 <span data-ttu-id="e2e11-199">Se `fromInclusive` é maior que ou igual a `toExclusive`, em seguida, o método retornará imediatamente sem executar qualquer iterações.</span><span class="sxs-lookup"><span data-stu-id="e2e11-199">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2e11-200">O exemplo a seguir mostra como cancelar um loop paralelo:</span><span class="sxs-lookup"><span data-stu-id="e2e11-200">The following example shows how to cancel a parallel loop:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#05](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelforcancel.cs#05)]
 [!code-vb[System.Threading.Tasks.Parallel#05](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelforcancel.vb#05)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="e2e11-201">O <see cref="T:System.Threading.CancellationToken" /> no argumento <paramref name="parallelOptions" /> foi cancelado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-201">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2e11-202">O argumento <paramref name="body" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-202">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-203">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-203">-or-</span></span> 
<span data-ttu-id="e2e11-204">O argumento <paramref name="parallelOptions" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-204">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="e2e11-205">A exceção que contém todas as exceções individuais lançadas em todos os threads.</span><span class="sxs-lookup"><span data-stu-id="e2e11-205">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e2e11-206">O <see cref="T:System.Threading.CancellationTokenSource" /> associado ao <see cref="T:System.Threading.CancellationToken" /> no <paramref name="parallelOptions" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-206">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="e2e11-207">Loops paralelos</span><span class="sxs-lookup"><span data-stu-id="e2e11-207">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;long,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int64 fromInclusive, int64 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`2&lt;int64, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;long, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * System.Threading.Tasks.ParallelOptions * Action&lt;int64, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;System.Int64,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive"><span data-ttu-id="e2e11-208">O índice inicial, inclusivo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-208">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="e2e11-209">O índice final, exclusivo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-209">The end index, exclusive.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="e2e11-210">Um objeto que configura o comportamento dessa operação.</span><span class="sxs-lookup"><span data-stu-id="e2e11-210">An object that configures the behavior of this operation.</span></span></param>
        <param name="body"><span data-ttu-id="e2e11-211">O delegado invocado uma vez por iteração.</span><span class="sxs-lookup"><span data-stu-id="e2e11-211">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="e2e11-212">Executa um loop <see langword="for" /> (<see langword="For" /> no Visual Basic) com índices de 64 bits no qual iterações podem ser executadas em paralelo, opções de loop podem ser configuradas e o estado de loop pode ser monitorado e manipulado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-212">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic)  loop with 64-bit indexes in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="e2e11-213">Uma estrutura que contém informações sobre qual parte do loop foi concluída.</span><span class="sxs-lookup"><span data-stu-id="e2e11-213">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2e11-214">O `body` delegado é invocado uma vez para cada valor no intervalo de iteração (`fromInclusive`, `toExclusive`).</span><span class="sxs-lookup"><span data-stu-id="e2e11-214">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="e2e11-215">Ele é fornecido com os seguintes parâmetros: a contagem de iteração (<xref:System.Int64>) e um <xref:System.Threading.Tasks.ParallelLoopState> instância que pode ser usada para interromper o loop prematuramente.</span><span class="sxs-lookup"><span data-stu-id="e2e11-215">It is provided with the following parameters: the iteration count (<xref:System.Int64>), and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.</span></span>  
  
 <span data-ttu-id="e2e11-216">Se `fromInclusive` é maior que ou igual a `toExclusive`, o método retornará imediatamente sem executar qualquer iterações.</span><span class="sxs-lookup"><span data-stu-id="e2e11-216">If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2e11-217">O exemplo a seguir mostra como usar o <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> método com um <xref:System.Threading.Tasks.ParallelOptions> objeto:</span><span class="sxs-lookup"><span data-stu-id="e2e11-217">The following example shows how to use the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> method with a <xref:System.Threading.Tasks.ParallelOptions> object:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#03](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelfor.cs#03)]
 [!code-vb[System.Threading.Tasks.Parallel#03](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelfor.vb#03)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="e2e11-218">O <see cref="T:System.Threading.CancellationToken" /> no argumento <paramref name="parallelOptions" /> foi cancelado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-218">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2e11-219">O argumento <paramref name="body" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-219">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-220">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-220">-or-</span></span> 
<span data-ttu-id="e2e11-221">O argumento <paramref name="parallelOptions" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-221">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="e2e11-222">A exceção que contém todas as exceções individuais lançadas em todos os threads.</span><span class="sxs-lookup"><span data-stu-id="e2e11-222">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e2e11-223">O <see cref="T:System.Threading.CancellationTokenSource" /> associado ao <see cref="T:System.Threading.CancellationToken" /> no <paramref name="parallelOptions" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-223">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="e2e11-224">Loops paralelos</span><span class="sxs-lookup"><span data-stu-id="e2e11-224">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int64 fromInclusive, int64 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`1&lt;int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * System.Threading.Tasks.ParallelOptions * Action&lt;int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;System.Int64&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive"><span data-ttu-id="e2e11-225">O índice inicial, inclusivo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-225">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="e2e11-226">O índice final, exclusivo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-226">The end index, exclusive.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="e2e11-227">Um objeto que configura o comportamento dessa operação.</span><span class="sxs-lookup"><span data-stu-id="e2e11-227">An object that configures the behavior of this operation.</span></span></param>
        <param name="body"><span data-ttu-id="e2e11-228">O delegado invocado uma vez por iteração.</span><span class="sxs-lookup"><span data-stu-id="e2e11-228">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="e2e11-229">Executa um loop <see langword="for" /> (<see langword="For" /> no Visual Basic) com índices de 64 bits no qual as iterações podem ser executadas em paralelo e opções de loop podem ser configuradas.</span><span class="sxs-lookup"><span data-stu-id="e2e11-229">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic) loop with 64-bit indexes in which iterations may run in parallel and loop options can be configured.</span></span></summary>
        <returns><span data-ttu-id="e2e11-230">Uma estrutura que contém informações sobre qual parte do loop foi concluída.</span><span class="sxs-lookup"><span data-stu-id="e2e11-230">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2e11-231">Dá suporte a índices de 64 bits.</span><span class="sxs-lookup"><span data-stu-id="e2e11-231">Supports 64-bit indexes.</span></span> <span data-ttu-id="e2e11-232">O `body` delegado é invocado uma vez para cada valor no intervalo de iteração (`fromInclusive`, `toExclusive`).</span><span class="sxs-lookup"><span data-stu-id="e2e11-232">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="e2e11-233">Ele é fornecido com a contagem de iteração (<xref:System.Int64>) como um parâmetro.</span><span class="sxs-lookup"><span data-stu-id="e2e11-233">It is provided with the iteration count (<xref:System.Int64>) as a parameter.</span></span>  
  
 <span data-ttu-id="e2e11-234">Se `fromInclusive` é maior que ou igual a `toExclusive`, em seguida, o método retornará imediatamente sem executar qualquer iterações.</span><span class="sxs-lookup"><span data-stu-id="e2e11-234">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2e11-235">O exemplo a seguir mostra como usar <xref:System.Threading.Tasks.ParallelOptions> para especificar um agendador de tarefas personalizados:</span><span class="sxs-lookup"><span data-stu-id="e2e11-235">The following example shows how to use <xref:System.Threading.Tasks.ParallelOptions> to specify a custom task scheduler:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#06](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelforwithscheduler.cs#06)]
 [!code-vb[System.Threading.Tasks.Parallel#06](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelforwithscheduler.vb#06)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="e2e11-236">O <see cref="T:System.Threading.CancellationToken" /> no argumento <paramref name="parallelOptions" /> foi cancelado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-236">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2e11-237">O argumento <paramref name="body" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-237">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-238">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-238">-or-</span></span> 
<span data-ttu-id="e2e11-239">O argumento <paramref name="parallelOptions" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-239">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="e2e11-240">A exceção que contém todas as exceções individuais lançadas em todos os threads.</span><span class="sxs-lookup"><span data-stu-id="e2e11-240">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e2e11-241">O <see cref="T:System.Threading.CancellationTokenSource" /> associado ao <see cref="T:System.Threading.CancellationToken" /> no <paramref name="parallelOptions" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-241">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="e2e11-242">Loops paralelos</span><span class="sxs-lookup"><span data-stu-id="e2e11-242">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="For&lt;TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt; (int fromInclusive, int toExclusive, Func&lt;TLocal&gt; localInit, Func&lt;int,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt;(int32 fromInclusive, int32 toExclusive, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;int32, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For(Of TLocal) (fromInclusive As Integer, toExclusive As Integer, localInit As Func(Of TLocal), body As Func(Of Integer, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, Func&lt;TLocal&gt; ^ localInit, Func&lt;int, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member For : int * int * Func&lt;'Local&gt; * Func&lt;int, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;System.Int32,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TLocal"><span data-ttu-id="e2e11-243">O tipo dos dados locais do thread.</span><span class="sxs-lookup"><span data-stu-id="e2e11-243">The type of the thread-local data.</span></span></typeparam>
        <param name="fromInclusive"><span data-ttu-id="e2e11-244">O índice inicial, inclusivo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-244">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="e2e11-245">O índice final, exclusivo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-245">The end index, exclusive.</span></span></param>
        <param name="localInit"><span data-ttu-id="e2e11-246">O delegado da função que retorna o estado inicial dos dados locais para cada tarefa.</span><span class="sxs-lookup"><span data-stu-id="e2e11-246">The function delegate that returns the initial state of the local data for each task.</span></span></param>
        <param name="body"><span data-ttu-id="e2e11-247">O delegado invocado uma vez por iteração.</span><span class="sxs-lookup"><span data-stu-id="e2e11-247">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="e2e11-248">O delegado que executa uma ação final no estado local de cada tarefa.</span><span class="sxs-lookup"><span data-stu-id="e2e11-248">The delegate that performs a final action on the local state of each task.</span></span></param>
        <summary><span data-ttu-id="e2e11-249">Executa um loop <see langword="for" /> (<see langword="For" /> no Visual Basic) com os dados locais de thread no qual as iterações podem ser executadas em paralelo e o estado do loop pode ser monitorado e manipulado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-249">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic) loop with thread-local data in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="e2e11-250">Uma estrutura que contém informações sobre qual parte do loop foi concluída.</span><span class="sxs-lookup"><span data-stu-id="e2e11-250">A  structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2e11-251">O `body` delegado é invocado uma vez para cada valor no intervalo de iteração (`fromInclusive`, `toExclusive`).</span><span class="sxs-lookup"><span data-stu-id="e2e11-251">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="e2e11-252">Ele é fornecido com os seguintes parâmetros: a contagem de iteração (<xref:System.Int32>), um <xref:System.Threading.Tasks.ParallelLoopState> instância que pode ser usada para interromper o loop prematuramente e alguns estados de locais que podem ser compartilhados entre as iterações que executam no mesmo thread.</span><span class="sxs-lookup"><span data-stu-id="e2e11-252">It is provided with the following parameters: the iteration count (<xref:System.Int32>), a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.</span></span>  
  
 <span data-ttu-id="e2e11-253">O `localInit` delegado é invocado uma vez para cada tarefa que participa de execução do loop e retorna o estado local inicial para cada uma dessas tarefas.</span><span class="sxs-lookup"><span data-stu-id="e2e11-253">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="e2e11-254">Esses estados iniciais são passados para o primeiro `body` invocações em cada tarefa.</span><span class="sxs-lookup"><span data-stu-id="e2e11-254">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="e2e11-255">Em seguida, cada invocação subsequente corpo retorna um valor de estado possivelmente modificado que é passado para a próxima invocação de corpo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-255">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="e2e11-256">Por fim, a última chamada do corpo em cada tarefa retorna um valor de estado que é passado para o `localFinally` delegar.</span><span class="sxs-lookup"><span data-stu-id="e2e11-256">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="e2e11-257">O `localFinally` delegado é invocado uma vez por tarefa para executar uma ação final no estado local de cada tarefa.</span><span class="sxs-lookup"><span data-stu-id="e2e11-257">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="e2e11-258">Esse delegado pode ser invocado simultaneamente em várias tarefas; Portanto, você deve sincronizar o acesso a quaisquer variáveis compartilhadas.</span><span class="sxs-lookup"><span data-stu-id="e2e11-258">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="e2e11-259">O <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> método pode usar tarefas mais do que os threads durante a vida útil de sua execução, como as tarefas existentes são concluídas e são substituídas por novas tarefas.</span><span class="sxs-lookup"><span data-stu-id="e2e11-259">The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="e2e11-260">Isso proporciona subjacente <xref:System.Threading.Tasks.TaskScheduler> do objeto a chance de adicionar, alterar ou remover threads que o loop de serviço.</span><span class="sxs-lookup"><span data-stu-id="e2e11-260">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 <span data-ttu-id="e2e11-261">Se `fromInclusive` é maior que ou igual a `toExclusive`, em seguida, o método retornará imediatamente sem executar qualquer iterações.</span><span class="sxs-lookup"><span data-stu-id="e2e11-261">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
 <span data-ttu-id="e2e11-262">Para obter um exemplo que usa esse método, consulte [como: escrever um Loop Parallel. for com variáveis locais de Thread](~/docs/standard/parallel-programming/how-to-write-a-parallel-for-loop-with-thread-local-variables.md).</span><span class="sxs-lookup"><span data-stu-id="e2e11-262">For an example that uses this method, see [How to: Write a Parallel.For Loop with Thread-Local Variables](~/docs/standard/parallel-programming/how-to-write-a-parallel-for-loop-with-thread-local-variables.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2e11-263">O argumento <paramref name="body" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-263">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-264">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-264">-or-</span></span> 
<span data-ttu-id="e2e11-265">O argumento <paramref name="localInit" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-265">The <paramref name="localInit" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-266">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-266">-or-</span></span> 
<span data-ttu-id="e2e11-267">O argumento <paramref name="localFinally" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-267">The <paramref name="localFinally" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="e2e11-268">A exceção que contém todas as exceções individuais lançadas em todos os threads.</span><span class="sxs-lookup"><span data-stu-id="e2e11-268">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="e2e11-269">Loops paralelos</span><span class="sxs-lookup"><span data-stu-id="e2e11-269">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="For&lt;TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt; (long fromInclusive, long toExclusive, Func&lt;TLocal&gt; localInit, Func&lt;long,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt;(int64 fromInclusive, int64 toExclusive, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;int64, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For(Of TLocal) (fromInclusive As Long, toExclusive As Long, localInit As Func(Of TLocal), body As Func(Of Long, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, Func&lt;TLocal&gt; ^ localInit, Func&lt;long, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * Func&lt;'Local&gt; * Func&lt;int64, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;System.Int64,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TLocal"><span data-ttu-id="e2e11-270">O tipo dos dados locais do thread.</span><span class="sxs-lookup"><span data-stu-id="e2e11-270">The type of the thread-local data.</span></span></typeparam>
        <param name="fromInclusive"><span data-ttu-id="e2e11-271">O índice inicial, inclusivo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-271">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="e2e11-272">O índice final, exclusivo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-272">The end index, exclusive.</span></span></param>
        <param name="localInit"><span data-ttu-id="e2e11-273">O delegado da função que retorna o estado inicial dos dados locais para cada tarefa.</span><span class="sxs-lookup"><span data-stu-id="e2e11-273">The function delegate that returns the initial state of the local data for each task.</span></span></param>
        <param name="body"><span data-ttu-id="e2e11-274">O delegado invocado uma vez por iteração.</span><span class="sxs-lookup"><span data-stu-id="e2e11-274">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="e2e11-275">O delegado que executa uma ação final no estado local de cada tarefa.</span><span class="sxs-lookup"><span data-stu-id="e2e11-275">The delegate that performs a final action on the local state of each task.</span></span></param>
        <summary><span data-ttu-id="e2e11-276">Executa um loop <see langword="for" /> (<see langword="For" /> no Visual Basic) com índices de 64 bits e dados locais de thread no qual as iterações podem ser executadas em paralelo e o estado do loop pode ser monitorado e manipulado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-276">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic)  loop with 64-bit indexes and thread-local data in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="e2e11-277">Uma estrutura que contém informações sobre qual parte do loop foi concluída.</span><span class="sxs-lookup"><span data-stu-id="e2e11-277">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2e11-278">O `body` delegado é invocado uma vez para cada valor no intervalo de iteração (`fromInclusive`, `toExclusive`).</span><span class="sxs-lookup"><span data-stu-id="e2e11-278">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="e2e11-279">Ele é fornecido com os seguintes parâmetros: a contagem de iteração (<xref:System.Int64>), um <xref:System.Threading.Tasks.ParallelLoopState> instância que pode ser usada para interromper o loop prematuramente e alguns estados de locais que podem ser compartilhados entre as iterações que são executados na mesma tarefa.</span><span class="sxs-lookup"><span data-stu-id="e2e11-279">It is provided with the following parameters: the iteration count (<xref:System.Int64>), a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same task.</span></span>  
  
 <span data-ttu-id="e2e11-280">O `localInit` delegado é invocado uma vez para cada tarefa que participa de execução do loop e retorna o estado local inicial para cada uma dessas tarefas.</span><span class="sxs-lookup"><span data-stu-id="e2e11-280">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="e2e11-281">Esses estados iniciais são passados para o primeiro `body` invocações em cada tarefa.</span><span class="sxs-lookup"><span data-stu-id="e2e11-281">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="e2e11-282">Em seguida, cada invocação subsequente corpo retorna um valor de estado possivelmente modificado que é passado para a próxima invocação de corpo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-282">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="e2e11-283">Por fim, a última chamada do corpo em cada tarefa retorna um valor de estado que é passado para o `localFinally` delegar.</span><span class="sxs-lookup"><span data-stu-id="e2e11-283">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="e2e11-284">O `localFinally` delegado é invocado uma vez por tarefa para executar uma ação final no estado local de cada tarefa.</span><span class="sxs-lookup"><span data-stu-id="e2e11-284">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="e2e11-285">Esse delegado pode ser invocado simultaneamente em várias tarefas; Portanto, você deve sincronizar o acesso a quaisquer variáveis compartilhadas.</span><span class="sxs-lookup"><span data-stu-id="e2e11-285">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="e2e11-286">O <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> método pode usar tarefas mais do que os threads durante a vida útil de sua execução, como as tarefas existentes são concluídas e são substituídas por novas tarefas.</span><span class="sxs-lookup"><span data-stu-id="e2e11-286">The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="e2e11-287">Isso proporciona subjacente <xref:System.Threading.Tasks.TaskScheduler> do objeto a chance de adicionar, alterar ou remover threads que o loop de serviço.</span><span class="sxs-lookup"><span data-stu-id="e2e11-287">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 <span data-ttu-id="e2e11-288">Se `fromInclusive` é maior que ou igual a `toExclusive`, em seguida, o método retornará imediatamente sem executar qualquer iterações.</span><span class="sxs-lookup"><span data-stu-id="e2e11-288">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
 <span data-ttu-id="e2e11-289">Para obter um exemplo que usa esse método, consulte [como: escrever um Loop Parallel. for com variáveis locais de Thread](~/docs/standard/parallel-programming/how-to-write-a-parallel-for-loop-with-thread-local-variables.md).</span><span class="sxs-lookup"><span data-stu-id="e2e11-289">For an example that uses this method, see [How to: Write a Parallel.For Loop with Thread-Local Variables](~/docs/standard/parallel-programming/how-to-write-a-parallel-for-loop-with-thread-local-variables.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2e11-290">O argumento <paramref name="body" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-290">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-291">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-291">-or-</span></span> 
<span data-ttu-id="e2e11-292">O argumento <paramref name="localInit" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-292">The <paramref name="localInit" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-293">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-293">-or-</span></span> 
<span data-ttu-id="e2e11-294">O argumento <paramref name="localFinally" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-294">The <paramref name="localFinally" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="e2e11-295">A exceção que contém todas as exceções individuais lançadas em todos os threads.</span><span class="sxs-lookup"><span data-stu-id="e2e11-295">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="e2e11-296">Loops paralelos</span><span class="sxs-lookup"><span data-stu-id="e2e11-296">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="For&lt;TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt; (int fromInclusive, int toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;int,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt;(int32 fromInclusive, int32 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;int32, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;int, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member For : int * int * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;int, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;System.Int32,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TLocal"><span data-ttu-id="e2e11-297">O tipo dos dados locais do thread.</span><span class="sxs-lookup"><span data-stu-id="e2e11-297">The type of the thread-local data.</span></span></typeparam>
        <param name="fromInclusive"><span data-ttu-id="e2e11-298">O índice inicial, inclusivo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-298">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="e2e11-299">O índice final, exclusivo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-299">The end index, exclusive.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="e2e11-300">Um objeto que configura o comportamento dessa operação.</span><span class="sxs-lookup"><span data-stu-id="e2e11-300">An object that configures the behavior of this operation.</span></span></param>
        <param name="localInit"><span data-ttu-id="e2e11-301">O delegado da função que retorna o estado inicial dos dados locais para cada tarefa.</span><span class="sxs-lookup"><span data-stu-id="e2e11-301">The function delegate that returns the initial state of the local data for each task.</span></span></param>
        <param name="body"><span data-ttu-id="e2e11-302">O delegado invocado uma vez por iteração.</span><span class="sxs-lookup"><span data-stu-id="e2e11-302">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="e2e11-303">O delegado que executa uma ação final no estado local de cada tarefa.</span><span class="sxs-lookup"><span data-stu-id="e2e11-303">The delegate that performs a final action on the local state of each task.</span></span></param>
        <summary><span data-ttu-id="e2e11-304">Executa um loop <see langword="for" /> (<see langword="For" /> no Visual Basic) com os dados locais do thread nos quais iterações podem ser executadas em paralelo, opções de loop podem ser configuradas e o estado do loop pode ser monitorado e manipulado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-304">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic)  loop with thread-local data in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="e2e11-305">Uma estrutura que contém informações sobre qual parte do loop foi concluída.</span><span class="sxs-lookup"><span data-stu-id="e2e11-305">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2e11-306">O `body` delegado é invocado uma vez para cada valor no intervalo de iteração (`fromInclusive`, `toExclusive`).</span><span class="sxs-lookup"><span data-stu-id="e2e11-306">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="e2e11-307">Ele é fornecido com os seguintes parâmetros: a contagem de iteração (<xref:System.Int32>), um <xref:System.Threading.Tasks.ParallelLoopState> instância que pode ser usada para interromper o loop prematuramente e alguns estados de locais que podem ser compartilhados entre as iterações que são executados na mesma tarefa.</span><span class="sxs-lookup"><span data-stu-id="e2e11-307">It is provided with the following parameters: the iteration count (<xref:System.Int32>), a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same task.</span></span>  
  
 <span data-ttu-id="e2e11-308">O `localInit` delegado é invocado uma vez para cada tarefa que participa de execução do loop e retorna o estado local inicial para cada uma dessas tarefas.</span><span class="sxs-lookup"><span data-stu-id="e2e11-308">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="e2e11-309">Esses estados iniciais são passados para o primeiro `body` invocações em cada tarefa.</span><span class="sxs-lookup"><span data-stu-id="e2e11-309">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="e2e11-310">Em seguida, cada invocação subsequente corpo retorna um valor de estado possivelmente modificado que é passado para a próxima invocação de corpo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-310">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="e2e11-311">Por fim, a última chamada do corpo em cada tarefa retorna um valor de estado que é passado para o `localFinally` delegar.</span><span class="sxs-lookup"><span data-stu-id="e2e11-311">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="e2e11-312">O `localFinally` delegado é invocado uma vez por tarefa para executar uma ação final no estado local de cada tarefa.</span><span class="sxs-lookup"><span data-stu-id="e2e11-312">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="e2e11-313">Esse delegado pode ser invocado simultaneamente em vários threads; Portanto, você deve sincronizar o acesso a quaisquer variáveis compartilhadas.</span><span class="sxs-lookup"><span data-stu-id="e2e11-313">This delegate might be invoked concurrently on multiple threads; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="e2e11-314">O <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> método pode usar tarefas mais do que os threads durante a vida útil de sua execução, como as tarefas existentes são concluídas e são substituídas por novas tarefas.</span><span class="sxs-lookup"><span data-stu-id="e2e11-314">The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="e2e11-315">Isso proporciona subjacente <xref:System.Threading.Tasks.TaskScheduler> do objeto a chance de adicionar, alterar ou remover threads que o loop de serviço.</span><span class="sxs-lookup"><span data-stu-id="e2e11-315">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 <span data-ttu-id="e2e11-316">Se `fromInclusive` é maior que ou igual a `toExclusive`, em seguida, o método retornará imediatamente sem executar qualquer iterações.</span><span class="sxs-lookup"><span data-stu-id="e2e11-316">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2e11-317">O exemplo a seguir usa as variáveis locais de thread para calcular a soma dos resultados de muitas operações demoradas.</span><span class="sxs-lookup"><span data-stu-id="e2e11-317">The following example uses thread-local variables to compute the sum of the results of many lengthy operations.</span></span> <span data-ttu-id="e2e11-318">Este exemplo limita o grau de paralelismo para quatro.</span><span class="sxs-lookup"><span data-stu-id="e2e11-318">This example limits the degree of parallelism to four.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#04](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/threadlocalforwithoptions.cs#04)]
 [!code-vb[System.Threading.Tasks.Parallel#04](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/threadlocalforwithoptions.vb#04)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2e11-319">O argumento <paramref name="body" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-319">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-320">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-320">-or-</span></span> 
<span data-ttu-id="e2e11-321">O argumento <paramref name="localInit" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-321">The <paramref name="localInit" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-322">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-322">-or-</span></span> 
<span data-ttu-id="e2e11-323">O argumento <paramref name="localFinally" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-323">The <paramref name="localFinally" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-324">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-324">-or-</span></span> 
<span data-ttu-id="e2e11-325">O argumento <paramref name="parallelOptions" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-325">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="e2e11-326">O <see cref="T:System.Threading.CancellationToken" /> no argumento <paramref name="parallelOptions" /> foi cancelado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-326">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e2e11-327">O <see cref="T:System.Threading.CancellationTokenSource" /> associado ao <see cref="T:System.Threading.CancellationToken" /> no <paramref name="parallelOptions" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-327">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="e2e11-328">A exceção que contém todas as exceções individuais lançadas em todos os threads.</span><span class="sxs-lookup"><span data-stu-id="e2e11-328">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="e2e11-329">Loops paralelos</span><span class="sxs-lookup"><span data-stu-id="e2e11-329">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="For&lt;TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt; (long fromInclusive, long toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;long,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt;(int64 fromInclusive, int64 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;int64, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;long, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;int64, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;System.Int64,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TLocal"><span data-ttu-id="e2e11-330">O tipo dos dados locais do thread.</span><span class="sxs-lookup"><span data-stu-id="e2e11-330">The type of the thread-local data.</span></span></typeparam>
        <param name="fromInclusive"><span data-ttu-id="e2e11-331">O índice inicial, inclusivo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-331">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="e2e11-332">O índice final, exclusivo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-332">The end index, exclusive.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="e2e11-333">Um objeto que configura o comportamento dessa operação.</span><span class="sxs-lookup"><span data-stu-id="e2e11-333">An object that configures the behavior of this operation.</span></span></param>
        <param name="localInit"><span data-ttu-id="e2e11-334">O delegado da função que retorna o estado inicial dos dados locais para cada thread.</span><span class="sxs-lookup"><span data-stu-id="e2e11-334">The function delegate that returns the initial state of the local data for each thread.</span></span></param>
        <param name="body"><span data-ttu-id="e2e11-335">O delegado invocado uma vez por iteração.</span><span class="sxs-lookup"><span data-stu-id="e2e11-335">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="e2e11-336">O delegado que executa uma ação final no estado local de cada thread.</span><span class="sxs-lookup"><span data-stu-id="e2e11-336">The delegate that performs a final action on the local state of each thread.</span></span></param>
        <summary><span data-ttu-id="e2e11-337">Executa um loop <see langword="for" /> (<see langword="For" /> no Visual Basic) com índices de 64 bits e dados locais do thread nos quais iterações podem ser executadas em paralelo, opções de loop podem ser configuradas e o estado do loop pode ser monitorado e manipulado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-337">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic) loop with 64-bit indexes and thread-local data in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="e2e11-338">Uma estrutura que contém informações sobre qual parte do loop foi concluída.</span><span class="sxs-lookup"><span data-stu-id="e2e11-338">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2e11-339">O `body` delegado é invocado uma vez para cada valor no intervalo de iteração (`fromInclusive`, `toExclusive`).</span><span class="sxs-lookup"><span data-stu-id="e2e11-339">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="e2e11-340">Ele é fornecido com os seguintes parâmetros: a contagem de iteração (<xref:System.Int64>), um <xref:System.Threading.Tasks.ParallelLoopState> instância que pode ser usada para interromper o loop prematuramente e alguns estados de locais que podem ser compartilhados entre as iterações que executam no mesmo thread.</span><span class="sxs-lookup"><span data-stu-id="e2e11-340">It is provided with the following parameters: the iteration count (<xref:System.Int64>), a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.</span></span>  
  
 <span data-ttu-id="e2e11-341">O `localInit` delegado é invocado uma vez para cada thread que participa da execução do loop e retorna o estado local inicial para cada um desses segmentos.</span><span class="sxs-lookup"><span data-stu-id="e2e11-341">The `localInit` delegate is invoked once for each thread that participates in the loop's execution and returns the initial local state for each of those threads.</span></span> <span data-ttu-id="e2e11-342">Esses estados iniciais são passados para o primeiro `body` invocações em cada thread.</span><span class="sxs-lookup"><span data-stu-id="e2e11-342">These initial states are passed to the first `body` invocations on each thread.</span></span> <span data-ttu-id="e2e11-343">Em seguida, cada invocação subsequente corpo retorna um valor de estado possivelmente modificado que é passado para a próxima invocação de corpo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-343">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="e2e11-344">Por fim, a última chamada do corpo em cada thread retorna um valor de estado que é passado para o `localFinally` delegar.</span><span class="sxs-lookup"><span data-stu-id="e2e11-344">Finally, the last body invocation on each thread returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="e2e11-345">O `localFinally` delegado é invocado uma vez por thread para executar uma ação final no estado local de cada thread.</span><span class="sxs-lookup"><span data-stu-id="e2e11-345">The `localFinally` delegate is invoked once per thread to perform a final action on each thread's local state.</span></span> <span data-ttu-id="e2e11-346">Esse delegado pode ser invocado simultaneamente em vários threads; Portanto, você deve sincronizar o acesso a quaisquer variáveis compartilhadas.</span><span class="sxs-lookup"><span data-stu-id="e2e11-346">This delegate might be invoked concurrently on multiple threads; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="e2e11-347">O <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> método pode usar tarefas mais do que os threads durante a vida útil de sua execução, como as tarefas existentes são concluídas e são substituídas por novas tarefas.</span><span class="sxs-lookup"><span data-stu-id="e2e11-347">The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="e2e11-348">Isso proporciona subjacente <xref:System.Threading.Tasks.TaskScheduler> do objeto a chance de adicionar, alterar ou remover threads que o loop de serviço.</span><span class="sxs-lookup"><span data-stu-id="e2e11-348">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 <span data-ttu-id="e2e11-349">Se `fromInclusive` é maior que ou igual a `toExclusive`, em seguida, o método retornará imediatamente sem executar qualquer iterações.</span><span class="sxs-lookup"><span data-stu-id="e2e11-349">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2e11-350">O argumento <paramref name="body" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-350">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-351">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-351">-or-</span></span> 
<span data-ttu-id="e2e11-352">O argumento <paramref name="localInit" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-352">The <paramref name="localInit" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-353">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-353">-or-</span></span> 
<span data-ttu-id="e2e11-354">O argumento <paramref name="localFinally" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-354">The <paramref name="localFinally" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-355">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-355">-or-</span></span> 
<span data-ttu-id="e2e11-356">O argumento <paramref name="parallelOptions" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-356">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="e2e11-357">O <see cref="T:System.Threading.CancellationToken" /> no argumento <paramref name="parallelOptions" /> foi cancelado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-357">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e2e11-358">O <see cref="T:System.Threading.CancellationTokenSource" /> associado ao <see cref="T:System.Threading.CancellationToken" /> no <paramref name="parallelOptions" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-358">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="e2e11-359">A exceção que contém todas as exceções individuais lançadas em todos os threads.</span><span class="sxs-lookup"><span data-stu-id="e2e11-359">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="e2e11-360">Loops paralelos</span><span class="sxs-lookup"><span data-stu-id="e2e11-360">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ForEach&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e2e11-361">Executa uma operação <see langword="foreach" /> (<see langword="For Each " /> no Visual Basic) no qual as iterações podem ser executadas em paralelo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-361">Executes a <see langword="foreach" /> (<see langword="For Each " /> in Visual Basic) operation in which iterations may run in parallel.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt; source, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.OrderablePartitioner`1&lt;!!TSource&gt; source, class System.Action`3&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As OrderablePartitioner(Of TSource), body As Action(Of TSource, ParallelLoopState, Long)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::OrderablePartitioner&lt;TSource&gt; ^ source, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt; * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="e2e11-362">O tipo dos elementos em <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-362">The type of the elements in <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="e2e11-363">O particionador solicitável que contém a fonte de dados original.</span><span class="sxs-lookup"><span data-stu-id="e2e11-363">The orderable partitioner that contains the original data source.</span></span></param>
        <param name="body"><span data-ttu-id="e2e11-364">O delegado invocado uma vez por iteração.</span><span class="sxs-lookup"><span data-stu-id="e2e11-364">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="e2e11-365">Executa uma operação <see langword="foreach" /> (<see langword="For Each" /> no Visual Basic) em um <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" />, no qual as iterações podem ser executadas em paralelo e o estado do loop pode ser monitorado e manipulado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-365">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="e2e11-366">Uma estrutura que contém informações sobre qual parte do loop foi concluída.</span><span class="sxs-lookup"><span data-stu-id="e2e11-366">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2e11-367">Essa sobrecarga é fornecida para cenários em que você deseja substituir o padrão de esquema de particionamento.</span><span class="sxs-lookup"><span data-stu-id="e2e11-367">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="e2e11-368">Por exemplo, corpos de loop pequenos podem se beneficiar do particionamento de intervalo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-368">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="e2e11-369">O <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> particionadores personalizados para dar suporte ao particionamento dinâmico de espera do método.</span><span class="sxs-lookup"><span data-stu-id="e2e11-369">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="e2e11-370">Para obter mais informações, consulte [Particionadores personalizados para PLINQ e TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) e [como: implementar partições dinâmicas](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span><span class="sxs-lookup"><span data-stu-id="e2e11-370">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2e11-371">O argumento <paramref name="source" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-371">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-372">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-372">-or-</span></span> 
<span data-ttu-id="e2e11-373">O argumento <paramref name="body" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-373">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2e11-374">A propriedade <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> no particionador solicitável <paramref name="source" /> retorna <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-374">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> orderable partitioner returns <see langword="false" />.</span></span>  
  
<span data-ttu-id="e2e11-375">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-375">-or-</span></span> 
<span data-ttu-id="e2e11-376">A propriedade <see cref="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized" /> no particionador solicitável de origem retorna <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-376">The <see cref="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized" /> property in the source orderable partitioner returns <see langword="false" />.</span></span>  
  
<span data-ttu-id="e2e11-377">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-377">-or-</span></span> 
<span data-ttu-id="e2e11-378">Quaisquer métodos no particionador solicitável de origem retorna <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-378">Any methods in the source orderable partitioner return <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="e2e11-379">Loops paralelos</span><span class="sxs-lookup"><span data-stu-id="e2e11-379">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Action`2&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As Partitioner(Of TSource), body As Action(Of TSource, ParallelLoopState)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="e2e11-380">O tipo dos elementos em <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-380">The type of the elements in <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="e2e11-381">O particionador que contém a fonte de dados original.</span><span class="sxs-lookup"><span data-stu-id="e2e11-381">The partitioner that contains the original data source.</span></span></param>
        <param name="body"><span data-ttu-id="e2e11-382">O delegado invocado uma vez por iteração.</span><span class="sxs-lookup"><span data-stu-id="e2e11-382">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="e2e11-383">Executa uma operação <see langword="foreach" /> (<see langword="For Each" /> no Visual Basic) em um <see cref="T:System.Collections.Concurrent.Partitioner" />, na qual as iterações podem ser executadas em paralelo e o estado do loop pode ser monitorado e manipulado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-383">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="e2e11-384">Uma estrutura que contém informações sobre qual parte do loop foi concluída.</span><span class="sxs-lookup"><span data-stu-id="e2e11-384">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2e11-385">Essa sobrecarga é fornecida para cenários em que você deseja substituir o padrão de esquema de particionamento.</span><span class="sxs-lookup"><span data-stu-id="e2e11-385">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="e2e11-386">Por exemplo, corpos de loop pequenos podem se beneficiar do particionamento de intervalo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-386">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="e2e11-387">O <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> particionadores personalizados para dar suporte ao particionamento dinâmico de espera do método.</span><span class="sxs-lookup"><span data-stu-id="e2e11-387">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="e2e11-388">Para obter mais informações, consulte [Particionadores personalizados para PLINQ e TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) e [como: implementar partições dinâmicas](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span><span class="sxs-lookup"><span data-stu-id="e2e11-388">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2e11-389">O argumento <paramref name="source" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-389">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-390">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-390">-or-</span></span> 
<span data-ttu-id="e2e11-391">O argumento <paramref name="body" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-391">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2e11-392">A propriedade <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> no particionador <paramref name="source" /> retorna <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-392">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> partitioner returns <see langword="false" />.</span></span>  
  
<span data-ttu-id="e2e11-393">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-393">-or-</span></span> 
<span data-ttu-id="e2e11-394">O método no particionador <paramref name="source" /> retorna <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-394">A method in the <paramref name="source" /> partitioner returns <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-395">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-395">-or-</span></span> 
<span data-ttu-id="e2e11-396">O método <see cref="M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)" /> no particionador <paramref name="source" /> não retorna o número de partições correto.</span><span class="sxs-lookup"><span data-stu-id="e2e11-396">The <see cref="M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)" /> method in the <paramref name="source" /> partitioner does not return the correct number of partitions.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="e2e11-397">Loops paralelos</span><span class="sxs-lookup"><span data-stu-id="e2e11-397">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, Action&lt;TSource&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Action`1&lt;!!TSource&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As Partitioner(Of TSource), body As Action(Of TSource)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, Action&lt;TSource&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * Action&lt;'Source&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="e2e11-398">O tipo dos elementos em <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-398">The type of the elements in <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="e2e11-399">O particionador que contém a fonte de dados original.</span><span class="sxs-lookup"><span data-stu-id="e2e11-399">The partitioner that contains the original data source.</span></span></param>
        <param name="body"><span data-ttu-id="e2e11-400">O delegado invocado uma vez por iteração.</span><span class="sxs-lookup"><span data-stu-id="e2e11-400">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="e2e11-401">Executa uma operação <see langword="foreach" /> (<see langword="For Each" /> no Visual Basic) em um <see cref="T:System.Collections.Concurrent.Partitioner" /> no qual as iterações podem ser executadas em paralelo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-401">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel.</span></span></summary>
        <returns><span data-ttu-id="e2e11-402">Uma estrutura que contém informações sobre qual parte do loop foi concluída.</span><span class="sxs-lookup"><span data-stu-id="e2e11-402">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2e11-403">Essa sobrecarga é fornecida para cenários em que você deseja substituir o padrão de esquema de particionamento.</span><span class="sxs-lookup"><span data-stu-id="e2e11-403">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="e2e11-404">Por exemplo, corpos de loop pequenos podem se beneficiar do particionamento de intervalo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-404">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="e2e11-405">O <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> particionadores personalizados para dar suporte ao particionamento dinâmico de espera do método.</span><span class="sxs-lookup"><span data-stu-id="e2e11-405">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="e2e11-406">Para obter mais informações, consulte [Particionadores personalizados para PLINQ e TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) e [como: implementar partições dinâmicas](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span><span class="sxs-lookup"><span data-stu-id="e2e11-406">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2e11-407">O exemplo a seguir mostra como implementar um particionador de intervalo para uso com <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>:</span><span class="sxs-lookup"><span data-stu-id="e2e11-407">The following example shows how to implement a range partitioner for use with <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel_RangePartitioners#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel_rangepartitioners/cs/rangepartitioner.cs#01)]
 [!code-vb[System.Threading.Tasks.Parallel_RangePartitioners#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel_rangepartitioners/vb/rangepart.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2e11-408">O argumento <paramref name="source" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-408">The <paramref name="source" /> argument is  <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-409">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-409">-or-</span></span> 
<span data-ttu-id="e2e11-410">O argumento <paramref name="body" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-410">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2e11-411">A propriedade <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> no particionador <paramref name="source" /> retorna <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-411">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> partitioner returns <see langword="false" />.</span></span>  
  
<span data-ttu-id="e2e11-412">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-412">-or-</span></span> 
<span data-ttu-id="e2e11-413">A exceção que é gerada quando qualquer método no particionador <paramref name="source" /> retorna <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-413">The exception that is thrown when any methods in the <paramref name="source" /> partitioner return <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-414">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-414">-or-</span></span> 
<span data-ttu-id="e2e11-415">O método <see cref="M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)" /> no particionador <paramref name="source" /> não retorna o número de partições correto.</span><span class="sxs-lookup"><span data-stu-id="e2e11-415">The <see cref="M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)" /> method in the <paramref name="source" /> partitioner does not return the correct number of partitions.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="e2e11-416">Loops paralelos</span><span class="sxs-lookup"><span data-stu-id="e2e11-416">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Action`3&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As IEnumerable(Of TSource), body As Action(Of TSource, ParallelLoopState, Long)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="e2e11-417">O tipo de dados na fonte.</span><span class="sxs-lookup"><span data-stu-id="e2e11-417">The type of the data in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="e2e11-418">Uma fonte de dados enumerável.</span><span class="sxs-lookup"><span data-stu-id="e2e11-418">An enumerable data source.</span></span></param>
        <param name="body"><span data-ttu-id="e2e11-419">O delegado invocado uma vez por iteração.</span><span class="sxs-lookup"><span data-stu-id="e2e11-419">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="e2e11-420">Executa uma operação <see langword="foreach" /> (<see langword="For Each" /> no Visual Basic) com índices de 64 bits em uma <see cref="T:System.Collections.IEnumerable" /> na qual as iterações podem ser executadas em paralelo e o estado do loop pode ser monitorado e manipulado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-420">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with 64-bit indexes on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="e2e11-421">Uma estrutura que contém informações sobre qual parte do loop foi concluída.</span><span class="sxs-lookup"><span data-stu-id="e2e11-421">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2e11-422">O `body` delegado é invocado uma vez para cada elemento no `source` enumerável.</span><span class="sxs-lookup"><span data-stu-id="e2e11-422">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="e2e11-423">Ele é fornecido com os seguintes parâmetros: o elemento atual, uma <xref:System.Threading.Tasks.ParallelLoopState> instância que pode ser usada para interromper o loop prematuramente e o índice do elemento atual (<xref:System.Int64>).</span><span class="sxs-lookup"><span data-stu-id="e2e11-423">It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and the current element's index (<xref:System.Int64>).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2e11-424">O argumento <paramref name="source" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-424">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-425">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-425">-or-</span></span> 
<span data-ttu-id="e2e11-426">O argumento <paramref name="body" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-426">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="e2e11-427">A exceção que contém todas as exceções individuais lançadas em todos os threads.</span><span class="sxs-lookup"><span data-stu-id="e2e11-427">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="e2e11-428">Loops paralelos</span><span class="sxs-lookup"><span data-stu-id="e2e11-428">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Action`2&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As IEnumerable(Of TSource), body As Action(Of TSource, ParallelLoopState)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="e2e11-429">O tipo de dados na fonte.</span><span class="sxs-lookup"><span data-stu-id="e2e11-429">The type of the data in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="e2e11-430">Uma fonte de dados enumerável.</span><span class="sxs-lookup"><span data-stu-id="e2e11-430">An enumerable data source.</span></span></param>
        <param name="body"><span data-ttu-id="e2e11-431">O delegado invocado uma vez por iteração.</span><span class="sxs-lookup"><span data-stu-id="e2e11-431">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="e2e11-432">Executa uma operação <see langword="foreach" /> (<see langword="For Each" /> no Visual Basic) em uma <see cref="T:System.Collections.IEnumerable" /> na qual as iterações podem ser executadas em paralelo e o estado do loop pode ser monitorado e manipulado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-432">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="e2e11-433">Uma estrutura que contém informações sobre qual parte do loop foi concluída.</span><span class="sxs-lookup"><span data-stu-id="e2e11-433">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2e11-434">O `body` delegado é invocado uma vez para cada elemento no `source` enumerável.</span><span class="sxs-lookup"><span data-stu-id="e2e11-434">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="e2e11-435">Ele é fornecido com os seguintes parâmetros: o elemento atual e um <xref:System.Threading.Tasks.ParallelLoopState> instância que pode ser usada para interromper o loop prematuramente.</span><span class="sxs-lookup"><span data-stu-id="e2e11-435">It is provided with the following parameters: the current element, and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2e11-436">O argumento <paramref name="source" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-436">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-437">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-437">-or-</span></span> 
<span data-ttu-id="e2e11-438">O argumento <paramref name="body" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-438">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="e2e11-439">A exceção que contém todas as exceções individuais lançadas em todos os threads.</span><span class="sxs-lookup"><span data-stu-id="e2e11-439">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="e2e11-440">Loops paralelos</span><span class="sxs-lookup"><span data-stu-id="e2e11-440">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Action&lt;TSource&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Action`1&lt;!!TSource&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As IEnumerable(Of TSource), body As Action(Of TSource)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Action&lt;TSource&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * Action&lt;'Source&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="e2e11-441">O tipo de dados na fonte.</span><span class="sxs-lookup"><span data-stu-id="e2e11-441">The type of the data in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="e2e11-442">Uma fonte de dados enumerável.</span><span class="sxs-lookup"><span data-stu-id="e2e11-442">An enumerable data source.</span></span></param>
        <param name="body"><span data-ttu-id="e2e11-443">O delegado invocado uma vez por iteração.</span><span class="sxs-lookup"><span data-stu-id="e2e11-443">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="e2e11-444">Executa uma operação <see langword="foreach" /> (<see langword="For Each" /> no Visual Basic) em um <see cref="T:System.Collections.IEnumerable" /> no qual as iterações podem ser executadas em paralelo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-444">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel.</span></span></summary>
        <returns><span data-ttu-id="e2e11-445">Uma estrutura que contém informações sobre qual parte do loop foi concluída.</span><span class="sxs-lookup"><span data-stu-id="e2e11-445">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2e11-446">O `body` delegado é invocado uma vez para cada elemento no `source` enumerável.</span><span class="sxs-lookup"><span data-stu-id="e2e11-446">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="e2e11-447">Ele é fornecido com o elemento atual como um parâmetro.</span><span class="sxs-lookup"><span data-stu-id="e2e11-447">It is provided with the current element as a parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2e11-448">O exemplo a seguir usa o <xref:System.Threading.Tasks.Parallel.ForEach%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Action%7B%60%600%7D%29> método para contar o número de caracteres de espaço não em branco em um arquivo de texto e vogais.</span><span class="sxs-lookup"><span data-stu-id="e2e11-448">The following example uses the <xref:System.Threading.Tasks.Parallel.ForEach%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Action%7B%60%600%7D%29> method to count the number of vowels and non-white-space characters in a text file.</span></span> <span data-ttu-id="e2e11-449">Nesse caso, o <xref:System.Threading.Tasks.ParallelLoopResult> valor retornado pelo método é ignorado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-449">In this case, the <xref:System.Threading.Tasks.ParallelLoopResult> value returned by the method is ignored.</span></span> <span data-ttu-id="e2e11-450">Observe que, porque as operações podem ser executados em paralelo, você deve garantir que a incrementar as variáveis de contador é uma operação atômica, e que vários threads não tentar acessar as variáveis de contador simultaneamente.</span><span class="sxs-lookup"><span data-stu-id="e2e11-450">Note that, because operations can run in parallel, you must ensure that incrementing the counter variables is an atomic operation, and that multiple threads do not attempt to access the counter variables simultaneously.</span></span> <span data-ttu-id="e2e11-451">Para essa finalidade, o exemplo usa o `lock` instrução (em c#) e o `SyncLock` instrução (no Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="e2e11-451">For this purpose, the example uses the `lock` statement (in C#) and the `SyncLock` statement (in Visual Basic).</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel.ForEach#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel.foreach/cs/foreach1.cs#1)]
 [!code-vb[System.Threading.Tasks.Parallel.ForEach#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel.foreach/vb/foreach1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2e11-452">O argumento <paramref name="source" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-452">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-453">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-453">-or-</span></span> 
<span data-ttu-id="e2e11-454">O argumento <paramref name="body" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-454">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="e2e11-455">A exceção que contém todas as exceções individuais lançadas em todos os threads.</span><span class="sxs-lookup"><span data-stu-id="e2e11-455">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="e2e11-456">Loops paralelos</span><span class="sxs-lookup"><span data-stu-id="e2e11-456">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.OrderablePartitioner`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`3&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::OrderablePartitioner&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="e2e11-457">O tipo dos elementos em <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-457">The type of the elements in <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="e2e11-458">O particionador ordenável que contém a fonte de dados original.</span><span class="sxs-lookup"><span data-stu-id="e2e11-458">The orderable partitioner that contains the original data source.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="e2e11-459">Um objeto que configura o comportamento dessa operação.</span><span class="sxs-lookup"><span data-stu-id="e2e11-459">An object that configures the behavior of this operation.</span></span></param>
        <param name="body"><span data-ttu-id="e2e11-460">O delegado invocado uma vez por iteração.</span><span class="sxs-lookup"><span data-stu-id="e2e11-460">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="e2e11-461">Executa uma operação <see langword="foreach" /> (<see langword="For Each" /> no Visual Basic) em um <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" />, em que iterações podem ser executadas em paralelo, opções de loop podem ser configuradas e o estado do loop pode ser monitorado e manipulado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-461">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="e2e11-462">Uma estrutura que contém informações sobre qual parte do loop foi concluída.</span><span class="sxs-lookup"><span data-stu-id="e2e11-462">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2e11-463">Essa sobrecarga é fornecida para cenários em que você deseja substituir o padrão de esquema de particionamento.</span><span class="sxs-lookup"><span data-stu-id="e2e11-463">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="e2e11-464">Por exemplo, corpos de loop pequenos podem se beneficiar do particionamento de intervalo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-464">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="e2e11-465">O <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> particionadores personalizados para dar suporte ao particionamento dinâmico de espera do método.</span><span class="sxs-lookup"><span data-stu-id="e2e11-465">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="e2e11-466">Para obter mais informações, consulte [Particionadores personalizados para PLINQ e TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) e [como: implementar partições dinâmicas](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span><span class="sxs-lookup"><span data-stu-id="e2e11-466">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="e2e11-467">O <see cref="T:System.Threading.CancellationToken" /> no argumento <paramref name="parallelOptions" /> foi cancelado</span><span class="sxs-lookup"><span data-stu-id="e2e11-467">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2e11-468">O argumento <paramref name="source" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-468">The <paramref name="source" /> argument is  <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-469">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-469">-or-</span></span> 
<span data-ttu-id="e2e11-470">O argumento <paramref name="parallelOptions" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-470">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-471">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-471">-or-</span></span> 
<span data-ttu-id="e2e11-472">O argumento <paramref name="body" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-472">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e2e11-473">O <see cref="T:System.Threading.CancellationTokenSource" /> associado ao <see cref="T:System.Threading.CancellationToken" /> no <paramref name="parallelOptions" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-473">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2e11-474">A propriedade <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> no particionador solicitável <paramref name="source" /> retorna <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-474">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> orderable partitioner returns <see langword="false" />.</span></span>  
  
<span data-ttu-id="e2e11-475">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-475">-or-</span></span> 
<span data-ttu-id="e2e11-476">A propriedade <see cref="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized" /> no particionador solicitável <paramref name="source" /> retorna <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-476">The <see cref="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized" /> property in the <paramref name="source" /> orderable partitioner returns <see langword="false" />.</span></span>  
  
<span data-ttu-id="e2e11-477">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-477">-or-</span></span> 
<span data-ttu-id="e2e11-478">A exceção que é gerada quando qualquer método no particionador solicitável <paramref name="source" /> retorna <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-478">The exception that is thrown when any methods in the <paramref name="source" /> orderable partitioner return <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="e2e11-479">Loops paralelos</span><span class="sxs-lookup"><span data-stu-id="e2e11-479">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`2&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="e2e11-480">O tipo dos elementos em <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-480">The type of the elements in <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="e2e11-481">O particionador que contém a fonte de dados original.</span><span class="sxs-lookup"><span data-stu-id="e2e11-481">The partitioner that contains the original data source.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="e2e11-482">Um objeto que configura o comportamento dessa operação.</span><span class="sxs-lookup"><span data-stu-id="e2e11-482">An object that configures the behavior of this operation.</span></span></param>
        <param name="body"><span data-ttu-id="e2e11-483">O delegado invocado uma vez por iteração.</span><span class="sxs-lookup"><span data-stu-id="e2e11-483">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="e2e11-484">Executa uma operação <see langword="foreach" /> (<see langword="For Each" /> no Visual Basic) em um <see cref="T:System.Collections.Concurrent.Partitioner" />, em que iterações podem ser executadas em paralelo, opções de loop podem ser configuradas e o estado do loop pode ser monitorado e manipulado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-484">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="e2e11-485">Uma estrutura que contém informações sobre qual parte do loop foi concluída.</span><span class="sxs-lookup"><span data-stu-id="e2e11-485">A  structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2e11-486">Essa sobrecarga é fornecida para cenários em que você deseja substituir o padrão de esquema de particionamento.</span><span class="sxs-lookup"><span data-stu-id="e2e11-486">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="e2e11-487">Por exemplo, corpos de loop pequenos podem se beneficiar do particionamento de intervalo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-487">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="e2e11-488">O <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> particionadores personalizados para dar suporte ao particionamento dinâmico de espera do método.</span><span class="sxs-lookup"><span data-stu-id="e2e11-488">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="e2e11-489">Para obter mais informações, consulte [Particionadores personalizados para PLINQ e TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) e [como: implementar partições dinâmicas](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span><span class="sxs-lookup"><span data-stu-id="e2e11-489">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="e2e11-490">O <see cref="T:System.Threading.CancellationToken" /> no argumento <paramref name="parallelOptions" /> foi cancelado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-490">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e2e11-491">O <see cref="T:System.Threading.CancellationTokenSource" /> associado ao <see cref="T:System.Threading.CancellationToken" /> no <paramref name="parallelOptions" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-491">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2e11-492">O argumento <paramref name="source" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-492">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-493">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-493">-or-</span></span> 
<span data-ttu-id="e2e11-494">O argumento <paramref name="parallelOptions" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-494">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-495">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-495">-or-</span></span> 
<span data-ttu-id="e2e11-496">O argumento <paramref name="body" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-496">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2e11-497">A propriedade <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> no particionador <paramref name="source" /> retorna <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-497">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> partitioner returns <see langword="false" />.</span></span>  
  
<span data-ttu-id="e2e11-498">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-498">-or-</span></span> 
<span data-ttu-id="e2e11-499">A exceção que é gerada quando qualquer método no particionador <paramref name="source" /> retorna <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-499">The exception that is thrown when any methods in the <paramref name="source" /> partitioner return <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="e2e11-500">Loops paralelos</span><span class="sxs-lookup"><span data-stu-id="e2e11-500">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`1&lt;!!TSource&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="e2e11-501">O tipo dos elementos em <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-501">The type of the elements in <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="e2e11-502">O particionador que contém a fonte de dados original.</span><span class="sxs-lookup"><span data-stu-id="e2e11-502">The partitioner that contains the original data source.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="e2e11-503">Um objeto que configura o comportamento dessa operação.</span><span class="sxs-lookup"><span data-stu-id="e2e11-503">An object that configures the behavior of this operation.</span></span></param>
        <param name="body"><span data-ttu-id="e2e11-504">O delegado invocado uma vez por iteração.</span><span class="sxs-lookup"><span data-stu-id="e2e11-504">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="e2e11-505">Executa uma operação <see langword="foreach" /> (<see langword="For Each" /> no Visual Basic) em um <see cref="T:System.Collections.Concurrent.Partitioner" /> no qual as iterações podem ser executadas em paralelo e as opções de loop podem ser configuradas.</span><span class="sxs-lookup"><span data-stu-id="e2e11-505">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel and loop options can be configured.</span></span></summary>
        <returns><span data-ttu-id="e2e11-506">Uma estrutura que contém informações sobre qual parte do loop foi concluída.</span><span class="sxs-lookup"><span data-stu-id="e2e11-506">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2e11-507">Essa sobrecarga é fornecida para cenários em que você deseja substituir o padrão de esquema de particionamento.</span><span class="sxs-lookup"><span data-stu-id="e2e11-507">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="e2e11-508">Por exemplo, corpos de loop pequenos podem se beneficiar do particionamento de intervalo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-508">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="e2e11-509">O <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> particionadores personalizados para dar suporte ao particionamento dinâmico de espera do método.</span><span class="sxs-lookup"><span data-stu-id="e2e11-509">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="e2e11-510">Para obter mais informações, consulte [Particionadores personalizados para PLINQ e TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) e [como: implementar partições dinâmicas](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span><span class="sxs-lookup"><span data-stu-id="e2e11-510">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="e2e11-511">O <see cref="T:System.Threading.CancellationToken" /> no argumento <paramref name="parallelOptions" /> foi cancelado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-511">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e2e11-512">O <see cref="T:System.Threading.CancellationTokenSource" /> associado ao <see cref="T:System.Threading.CancellationToken" /> no <paramref name="parallelOptions" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-512">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2e11-513">O argumento <paramref name="source" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-513">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-514">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-514">-or-</span></span> 
<span data-ttu-id="e2e11-515">O argumento <paramref name="parallelOptions" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-515">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-516">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-516">-or-</span></span> 
<span data-ttu-id="e2e11-517">O argumento <paramref name="body" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-517">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2e11-518">A propriedade <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> no particionador <paramref name="source" /> retorna <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-518">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> partitioner returns <see langword="false" />.</span></span>  
  
<span data-ttu-id="e2e11-519">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-519">-or-</span></span> 
<span data-ttu-id="e2e11-520">A exceção que é gerada quando qualquer método no particionador <paramref name="source" /> retorna <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-520">The exception that is thrown when any methods in the <paramref name="source" /> partitioner return <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="e2e11-521">Loops paralelos</span><span class="sxs-lookup"><span data-stu-id="e2e11-521">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`3&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="e2e11-522">O tipo de dados na fonte.</span><span class="sxs-lookup"><span data-stu-id="e2e11-522">The type of the data in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="e2e11-523">Uma fonte de dados enumerável.</span><span class="sxs-lookup"><span data-stu-id="e2e11-523">An enumerable data source.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="e2e11-524">Um objeto que configura o comportamento dessa operação.</span><span class="sxs-lookup"><span data-stu-id="e2e11-524">An object that configures the behavior of this operation.</span></span></param>
        <param name="body"><span data-ttu-id="e2e11-525">O delegado invocado uma vez por iteração.</span><span class="sxs-lookup"><span data-stu-id="e2e11-525">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="e2e11-526">Executa uma operação <see langword="foreach" /> (<see langword="For Each" /> no Visual Basic) em índices de 64 bits em um <see cref="T:System.Collections.IEnumerable" />, no qual iterações podem ser executadas em paralelo, opções de loop podem ser configuradas e o estado de loop pode ser monitorado e manipulado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-526">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with 64-bit indexes on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="e2e11-527">Uma estrutura que contém informações sobre qual parte do loop foi concluída.</span><span class="sxs-lookup"><span data-stu-id="e2e11-527">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2e11-528">O `body` delegado é invocado uma vez para cada elemento no `source` enumerável.</span><span class="sxs-lookup"><span data-stu-id="e2e11-528">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="e2e11-529">Ele é fornecido com os seguintes parâmetros: o elemento atual, uma <xref:System.Threading.Tasks.ParallelLoopState> instância que pode ser usada para interromper o loop prematuramente e o índice do elemento atual (<xref:System.Int64>).</span><span class="sxs-lookup"><span data-stu-id="e2e11-529">It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and the current element's index (<xref:System.Int64>).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="e2e11-530">O <see cref="T:System.Threading.CancellationToken" /> no argumento <paramref name="parallelOptions" /> foi cancelado</span><span class="sxs-lookup"><span data-stu-id="e2e11-530">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2e11-531">O argumento <paramref name="source" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-531">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-532">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-532">-or-</span></span> 
<span data-ttu-id="e2e11-533">O argumento <paramref name="parallelOptions" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-533">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-534">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-534">-or-</span></span> 
<span data-ttu-id="e2e11-535">O argumento <paramref name="body" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-535">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="e2e11-536">A exceção que contém todas as exceções individuais lançadas em todos os threads.</span><span class="sxs-lookup"><span data-stu-id="e2e11-536">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e2e11-537">O <see cref="T:System.Threading.CancellationTokenSource" /> associado ao <see cref="T:System.Threading.CancellationToken" /> no <paramref name="parallelOptions" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-537">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="e2e11-538">Loops paralelos</span><span class="sxs-lookup"><span data-stu-id="e2e11-538">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`2&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="e2e11-539">O tipo de dados na fonte.</span><span class="sxs-lookup"><span data-stu-id="e2e11-539">The type of the data in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="e2e11-540">Uma fonte de dados enumerável.</span><span class="sxs-lookup"><span data-stu-id="e2e11-540">An enumerable data source.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="e2e11-541">Um objeto que configura o comportamento dessa operação.</span><span class="sxs-lookup"><span data-stu-id="e2e11-541">An object that configures the behavior of this operation.</span></span></param>
        <param name="body"><span data-ttu-id="e2e11-542">O delegado invocado uma vez por iteração.</span><span class="sxs-lookup"><span data-stu-id="e2e11-542">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="e2e11-543">Executa uma operação <see langword="foreach" /> (<see langword="For Each" /> no Visual Basic) em um <see cref="T:System.Collections.IEnumerable" />, no qual iterações podem ser executadas em paralelo, opções de loop podem ser configuradas e o estado de loop pode ser monitorado e manipulado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-543">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="e2e11-544">Uma estrutura que contém informações sobre qual parte do loop foi concluída.</span><span class="sxs-lookup"><span data-stu-id="e2e11-544">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2e11-545">O `body` delegado é invocado uma vez para cada elemento no `source` enumerável.</span><span class="sxs-lookup"><span data-stu-id="e2e11-545">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="e2e11-546">Ele é fornecido com os seguintes parâmetros: o elemento atual e um <xref:System.Threading.Tasks.ParallelLoopState> instância que pode ser usada para interromper o loop prematuramente.</span><span class="sxs-lookup"><span data-stu-id="e2e11-546">It is provided with the following parameters: the current element, and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="e2e11-547">O <see cref="T:System.Threading.CancellationToken" /> no argumento <paramref name="parallelOptions" /> foi cancelado</span><span class="sxs-lookup"><span data-stu-id="e2e11-547">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2e11-548">O argumento <paramref name="source" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-548">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-549">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-549">-or-</span></span> 
<span data-ttu-id="e2e11-550">O argumento <paramref name="parallelOptions" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-550">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-551">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-551">-or-</span></span> 
<span data-ttu-id="e2e11-552">O argumento <paramref name="body" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-552">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="e2e11-553">A exceção que contém todas as exceções individuais lançadas em todos os threads.</span><span class="sxs-lookup"><span data-stu-id="e2e11-553">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e2e11-554">O <see cref="T:System.Threading.CancellationTokenSource" /> associado ao <see cref="T:System.Threading.CancellationToken" /> no <paramref name="parallelOptions" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-554">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="e2e11-555">Loops paralelos</span><span class="sxs-lookup"><span data-stu-id="e2e11-555">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`1&lt;!!TSource&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="e2e11-556">O tipo de dados na fonte.</span><span class="sxs-lookup"><span data-stu-id="e2e11-556">The type of the data in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="e2e11-557">Uma fonte de dados enumerável.</span><span class="sxs-lookup"><span data-stu-id="e2e11-557">An enumerable data source.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="e2e11-558">Um objeto que configura o comportamento dessa operação.</span><span class="sxs-lookup"><span data-stu-id="e2e11-558">An object that configures the behavior of this operation.</span></span></param>
        <param name="body"><span data-ttu-id="e2e11-559">O delegado invocado uma vez por iteração.</span><span class="sxs-lookup"><span data-stu-id="e2e11-559">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="e2e11-560">Executa uma operação <see langword="foreach" /> (<see langword="For Each" /> no Visual Basic) em um <see cref="T:System.Collections.IEnumerable" /> no qual as iterações podem ser executadas em paralelo e as opções de loop podem ser configuradas.</span><span class="sxs-lookup"><span data-stu-id="e2e11-560">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel and loop options can be configured.</span></span></summary>
        <returns><span data-ttu-id="e2e11-561">Uma estrutura que contém informações sobre qual parte do loop foi concluída.</span><span class="sxs-lookup"><span data-stu-id="e2e11-561">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2e11-562">O `body` delegado é invocado uma vez para cada elemento no `source` enumerável.</span><span class="sxs-lookup"><span data-stu-id="e2e11-562">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="e2e11-563">Ele é fornecido com o elemento atual como um parâmetro.</span><span class="sxs-lookup"><span data-stu-id="e2e11-563">It is provided with the current element as a parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="e2e11-564">O <see cref="T:System.Threading.CancellationToken" /> no argumento <paramref name="parallelOptions" /> foi cancelado</span><span class="sxs-lookup"><span data-stu-id="e2e11-564">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2e11-565">O argumento <paramref name="source" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-565">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-566">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-566">-or-</span></span> 
<span data-ttu-id="e2e11-567">O argumento <paramref name="parallelOptions" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-567">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-568">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-568">-or-</span></span> 
<span data-ttu-id="e2e11-569">O argumento <paramref name="body" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-569">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="e2e11-570">A exceção que contém todas as exceções individuais lançadas em todos os threads.</span><span class="sxs-lookup"><span data-stu-id="e2e11-570">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e2e11-571">O <see cref="T:System.Threading.CancellationTokenSource" /> associado ao <see cref="T:System.Threading.CancellationToken" /> no <paramref name="parallelOptions" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-571">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="e2e11-572">Loops paralelos</span><span class="sxs-lookup"><span data-stu-id="e2e11-572">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt; source, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Concurrent.OrderablePartitioner`1&lt;!!TSource&gt; source, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`5&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource, TLocal) (source As OrderablePartitioner(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, Long, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::OrderablePartitioner&lt;TSource&gt; ^ source, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt; * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt;" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="e2e11-573">O tipo dos elementos em <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-573">The type of the elements in <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TLocal"><span data-ttu-id="e2e11-574">O tipo dos dados locais do thread.</span><span class="sxs-lookup"><span data-stu-id="e2e11-574">The type of the thread-local data.</span></span></typeparam>
        <param name="source"><span data-ttu-id="e2e11-575">O particionador solicitável que contém a fonte de dados original.</span><span class="sxs-lookup"><span data-stu-id="e2e11-575">The orderable partitioner that contains the original data source.</span></span></param>
        <param name="localInit"><span data-ttu-id="e2e11-576">O delegado da função que retorna o estado inicial dos dados locais para cada tarefa.</span><span class="sxs-lookup"><span data-stu-id="e2e11-576">The function delegate that returns the initial state of the local data for each task.</span></span></param>
        <param name="body"><span data-ttu-id="e2e11-577">O delegado invocado uma vez por iteração.</span><span class="sxs-lookup"><span data-stu-id="e2e11-577">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="e2e11-578">O delegado que executa uma ação final no estado local de cada tarefa.</span><span class="sxs-lookup"><span data-stu-id="e2e11-578">The delegate that performs a final action on the local state of each task.</span></span></param>
        <summary><span data-ttu-id="e2e11-579">Executa uma operação <see langword="foreach" /> (<see langword="For Each" /> no Visual Basic) com os dados locais do thread em um <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" />, no qual iterações podem ser executadas em paralelo, opções de loop podem ser configuradas e o estado do loop pode ser monitorado e manipulado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-579">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data on a <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="e2e11-580">Uma estrutura que contém informações sobre qual parte do loop foi concluída.</span><span class="sxs-lookup"><span data-stu-id="e2e11-580">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2e11-581">Essa sobrecarga é fornecida para cenários em que você deseja substituir o padrão de esquema de particionamento.</span><span class="sxs-lookup"><span data-stu-id="e2e11-581">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="e2e11-582">Por exemplo, corpos de loop pequenos podem se beneficiar do particionamento de intervalo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-582">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="e2e11-583">O <xref:System.Threading.Tasks.Parallel.ForEach%2A> particionadores personalizados para dar suporte ao particionamento dinâmico de espera do método.</span><span class="sxs-lookup"><span data-stu-id="e2e11-583">The <xref:System.Threading.Tasks.Parallel.ForEach%2A> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="e2e11-584">Para obter mais informações, consulte [Particionadores personalizados para PLINQ e TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) e [como: implementar partições dinâmicas](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span><span class="sxs-lookup"><span data-stu-id="e2e11-584">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 <span data-ttu-id="e2e11-585">O `localInit` delegado é invocado uma vez para cada tarefa que participa de execução do loop e retorna o estado local inicial para cada uma dessas tarefas.</span><span class="sxs-lookup"><span data-stu-id="e2e11-585">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="e2e11-586">Esses estados iniciais são passados para o primeiro `body` invocações em cada tarefa.</span><span class="sxs-lookup"><span data-stu-id="e2e11-586">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="e2e11-587">Em seguida, cada invocação subsequente corpo retorna um valor de estado possivelmente modificado que é passado para a próxima invocação de corpo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-587">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="e2e11-588">Por fim, a última chamada do corpo em cada tarefa retorna um valor de estado que é passado para o `localFinally` delegar.</span><span class="sxs-lookup"><span data-stu-id="e2e11-588">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="e2e11-589">O `localFinally` delegado é invocado uma vez por tarefa para executar uma ação final no estado local de cada tarefa.</span><span class="sxs-lookup"><span data-stu-id="e2e11-589">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="e2e11-590">Esse delegado pode ser invocado simultaneamente em várias tarefas; Portanto, você deve sincronizar o acesso a quaisquer variáveis compartilhadas.</span><span class="sxs-lookup"><span data-stu-id="e2e11-590">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="e2e11-591">O <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> método pode usar tarefas mais do que os threads durante a vida útil de sua execução, como as tarefas existentes são concluídas e são substituídas por novas tarefas.</span><span class="sxs-lookup"><span data-stu-id="e2e11-591">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="e2e11-592">Isso proporciona subjacente <xref:System.Threading.Tasks.TaskScheduler> do objeto a chance de adicionar, alterar ou remover threads que o loop de serviço.</span><span class="sxs-lookup"><span data-stu-id="e2e11-592">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2e11-593">O argumento <paramref name="source" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-593">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-594">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-594">-or-</span></span> 
<span data-ttu-id="e2e11-595">O argumento <paramref name="body" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-595">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-596">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-596">-or-</span></span> 
<span data-ttu-id="e2e11-597">O argumento <paramref name="localInit" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-597">The <paramref name="localInit" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-598">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-598">-or-</span></span> 
<span data-ttu-id="e2e11-599">O argumento <paramref name="localFinally" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-599">The <paramref name="localFinally" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2e11-600">A propriedade <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> no <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> retorna <see langword="false" /> ou o particionador retorna partições <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-600">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> returns <see langword="false" /> or the partitioner returns <see langword="null" /> partitions.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="e2e11-601">A exceção que contém todas as exceções individuais lançadas em todos os threads.</span><span class="sxs-lookup"><span data-stu-id="e2e11-601">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="e2e11-602">Loops paralelos</span><span class="sxs-lookup"><span data-stu-id="e2e11-602">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource, TLocal) (source As Partitioner(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="e2e11-603">O tipo dos elementos em <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-603">The type of the elements in <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TLocal"><span data-ttu-id="e2e11-604">O tipo dos dados locais do thread.</span><span class="sxs-lookup"><span data-stu-id="e2e11-604">The type of the thread-local data.</span></span></typeparam>
        <param name="source"><span data-ttu-id="e2e11-605">O particionador que contém a fonte de dados original.</span><span class="sxs-lookup"><span data-stu-id="e2e11-605">The partitioner that contains the original data source.</span></span></param>
        <param name="localInit"><span data-ttu-id="e2e11-606">O delegado da função que retorna o estado inicial dos dados locais para cada tarefa.</span><span class="sxs-lookup"><span data-stu-id="e2e11-606">The function delegate that returns the initial state of the local data for each task.</span></span></param>
        <param name="body"><span data-ttu-id="e2e11-607">O delegado invocado uma vez por iteração.</span><span class="sxs-lookup"><span data-stu-id="e2e11-607">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="e2e11-608">O delegado que executa uma ação final no estado local de cada tarefa.</span><span class="sxs-lookup"><span data-stu-id="e2e11-608">The delegate that performs a final action on the local state of each task.</span></span></param>
        <summary><span data-ttu-id="e2e11-609">Executa uma operação <see langword="foreach" /> (<see langword="For Each" /> no Visual Basic) com os dados de local de thread em um <see cref="T:System.Collections.Concurrent.Partitioner" />, no qual as iterações podem ser executadas em paralelo e o estado do loop pode ser monitorado e manipulado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-609">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="e2e11-610">Uma estrutura que contém informações sobre qual parte do loop foi concluída.</span><span class="sxs-lookup"><span data-stu-id="e2e11-610">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2e11-611">Essa sobrecarga é fornecida para cenários em que você deseja substituir o padrão de esquema de particionamento.</span><span class="sxs-lookup"><span data-stu-id="e2e11-611">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="e2e11-612">Por exemplo, corpos de loop pequenos podem se beneficiar do particionamento de intervalo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-612">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="e2e11-613">O <xref:System.Threading.Tasks.Parallel.ForEach%2A> particionadores personalizados para dar suporte ao particionamento dinâmico de espera do método.</span><span class="sxs-lookup"><span data-stu-id="e2e11-613">The <xref:System.Threading.Tasks.Parallel.ForEach%2A> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="e2e11-614">Para obter mais informações, consulte [Particionadores personalizados para PLINQ e TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) e [como: implementar partições dinâmicas](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span><span class="sxs-lookup"><span data-stu-id="e2e11-614">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 <span data-ttu-id="e2e11-615">O `localInit` delegado é invocado uma vez para cada thread que participa da execução do loop e retorna o estado local inicial para cada uma dessas tarefas.</span><span class="sxs-lookup"><span data-stu-id="e2e11-615">The `localInit` delegate is invoked once for each thread that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="e2e11-616">Esses estados iniciais são passados para o primeiro `body` invocações em cada tarefa.</span><span class="sxs-lookup"><span data-stu-id="e2e11-616">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="e2e11-617">Em seguida, cada invocação subsequente corpo retorna um valor de estado possivelmente modificado que é passado para a próxima invocação de corpo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-617">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="e2e11-618">Por fim, a última chamada do corpo em cada tarefa retorna um valor de estado que é passado para o `localFinally` delegar.</span><span class="sxs-lookup"><span data-stu-id="e2e11-618">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="e2e11-619">O `localFinally` delegado é invocado uma vez por tarefa para executar uma ação final no estado local de cada tarefa.</span><span class="sxs-lookup"><span data-stu-id="e2e11-619">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="e2e11-620">Esse delegado pode ser invocado simultaneamente em várias tarefas; Portanto, você deve sincronizar o acesso a quaisquer variáveis compartilhadas.</span><span class="sxs-lookup"><span data-stu-id="e2e11-620">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="e2e11-621">O <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> método pode usar tarefas mais do que os threads durante a vida útil de sua execução, como as tarefas existentes são concluídas e são substituídas por novas tarefas.</span><span class="sxs-lookup"><span data-stu-id="e2e11-621">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="e2e11-622">Isso proporciona subjacente <xref:System.Threading.Tasks.TaskScheduler> do objeto a chance de adicionar, alterar ou remover threads que o loop de serviço.</span><span class="sxs-lookup"><span data-stu-id="e2e11-622">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2e11-623">O argumento <paramref name="source" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-623">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-624">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-624">-or-</span></span> 
<span data-ttu-id="e2e11-625">O argumento <paramref name="body" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-625">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-626">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-626">-or-</span></span> 
<span data-ttu-id="e2e11-627">O argumento <paramref name="localInit" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-627">The <paramref name="localInit" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-628">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-628">-or-</span></span> 
<span data-ttu-id="e2e11-629">O argumento <paramref name="localFinally" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-629">The <paramref name="localFinally" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2e11-630">A propriedade <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> no <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> retorna <see langword="false" /> ou o particionador retorna partições <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-630">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> returns <see langword="false" /> or the partitioner returns <see langword="null" /> partitions.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="e2e11-631">A exceção que contém todas as exceções individuais lançadas em todos os threads.</span><span class="sxs-lookup"><span data-stu-id="e2e11-631">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="e2e11-632">Loops paralelos</span><span class="sxs-lookup"><span data-stu-id="e2e11-632">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`5&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource, TLocal) (source As IEnumerable(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, Long, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="e2e11-633">O tipo de dados na fonte.</span><span class="sxs-lookup"><span data-stu-id="e2e11-633">The type of the data in the source.</span></span></typeparam>
        <typeparam name="TLocal"><span data-ttu-id="e2e11-634">O tipo dos dados do local de thread.</span><span class="sxs-lookup"><span data-stu-id="e2e11-634">The type of the thread-local data.</span></span></typeparam>
        <param name="source"><span data-ttu-id="e2e11-635">Uma fonte de dados enumerável.</span><span class="sxs-lookup"><span data-stu-id="e2e11-635">An enumerable data source.</span></span></param>
        <param name="localInit"><span data-ttu-id="e2e11-636">O delegado da função que retorna o estado inicial dos dados locais para cada tarefa.</span><span class="sxs-lookup"><span data-stu-id="e2e11-636">The function delegate that returns the initial state of the local data for each task.</span></span></param>
        <param name="body"><span data-ttu-id="e2e11-637">O delegado invocado uma vez por iteração.</span><span class="sxs-lookup"><span data-stu-id="e2e11-637">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="e2e11-638">O delegado que executa uma ação final no estado local de cada tarefa.</span><span class="sxs-lookup"><span data-stu-id="e2e11-638">The delegate that performs a final action on the local state of each task.</span></span></param>
        <summary><span data-ttu-id="e2e11-639">Executa uma operação <see langword="foreach" /> (<see langword="For Each" /> no Visual Basic) com os dados de local de thread em um <see cref="T:System.Collections.IEnumerable" /> no qual as iterações podem ser executadas em paralelo e o estado do loop pode ser monitorado e manipulado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-639">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="e2e11-640">Uma estrutura que contém informações sobre qual parte do loop foi concluída.</span><span class="sxs-lookup"><span data-stu-id="e2e11-640">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2e11-641">O `body` delegado é invocado uma vez para cada elemento no `source` enumerável.</span><span class="sxs-lookup"><span data-stu-id="e2e11-641">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="e2e11-642">Ele é fornecido com os seguintes parâmetros: o elemento atual, uma <xref:System.Threading.Tasks.ParallelLoopState> instância que pode ser usada para interromper o loop prematuramente, o índice do elemento atual (<xref:System.Int64>) e alguns estados de local que podem ser compartilhado entre as iterações que executarem no mesmo thread.</span><span class="sxs-lookup"><span data-stu-id="e2e11-642">It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, the current element's index (<xref:System.Int64>), and some local state that may be shared amongst iterations that execute on the same thread.</span></span>  
  
 <span data-ttu-id="e2e11-643">O `localInit` delegado é invocado uma vez para cada tarefa que participa de execução do loop e retorna o estado local inicial para cada uma dessas tarefas.</span><span class="sxs-lookup"><span data-stu-id="e2e11-643">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="e2e11-644">Esses estados iniciais são passados para o primeiro `body` invocações em cada tarefa.</span><span class="sxs-lookup"><span data-stu-id="e2e11-644">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="e2e11-645">Em seguida, cada invocação subsequente corpo retorna um valor de estado possivelmente modificado que é passado para a próxima invocação de corpo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-645">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="e2e11-646">Por fim, a última chamada do corpo em cada tarefa retorna um valor de estado que é passado para o `localFinally` delegar.</span><span class="sxs-lookup"><span data-stu-id="e2e11-646">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="e2e11-647">O `localFinally` delegado é invocado uma vez por tarefa para executar uma ação final no estado local de cada tarefa.</span><span class="sxs-lookup"><span data-stu-id="e2e11-647">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="e2e11-648">Esse delegado pode ser invocado simultaneamente em várias tarefas; Portanto, você deve sincronizar o acesso a quaisquer variáveis compartilhadas.</span><span class="sxs-lookup"><span data-stu-id="e2e11-648">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="e2e11-649">O <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> método pode usar tarefas mais do que os threads durante a vida útil de sua execução, como as tarefas existentes são concluídas e são substituídas por novas tarefas.</span><span class="sxs-lookup"><span data-stu-id="e2e11-649">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="e2e11-650">Isso proporciona subjacente <xref:System.Threading.Tasks.TaskScheduler> do objeto a chance de adicionar, alterar ou remover threads que o loop de serviço.</span><span class="sxs-lookup"><span data-stu-id="e2e11-650">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2e11-651">O argumento <paramref name="source" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-651">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-652">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-652">-or-</span></span> 
<span data-ttu-id="e2e11-653">O argumento <paramref name="body" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-653">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-654">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-654">-or-</span></span> 
<span data-ttu-id="e2e11-655">O argumento <paramref name="localInit" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-655">The <paramref name="localInit" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-656">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-656">-or-</span></span> 
<span data-ttu-id="e2e11-657">O argumento <paramref name="localFinally" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-657">The <paramref name="localFinally" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="e2e11-658">A exceção que contém todas as exceções individuais lançadas em todos os threads.</span><span class="sxs-lookup"><span data-stu-id="e2e11-658">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="e2e11-659">Loops paralelos</span><span class="sxs-lookup"><span data-stu-id="e2e11-659">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource, TLocal) (source As IEnumerable(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="e2e11-660">O tipo de dados na fonte.</span><span class="sxs-lookup"><span data-stu-id="e2e11-660">The type of the data in the source.</span></span></typeparam>
        <typeparam name="TLocal"><span data-ttu-id="e2e11-661">O tipo dos dados do local de thread.</span><span class="sxs-lookup"><span data-stu-id="e2e11-661">The type of the thread-local data.</span></span></typeparam>
        <param name="source"><span data-ttu-id="e2e11-662">Uma fonte de dados enumerável.</span><span class="sxs-lookup"><span data-stu-id="e2e11-662">An enumerable data source.</span></span></param>
        <param name="localInit"><span data-ttu-id="e2e11-663">O delegado da função que retorna o estado inicial dos dados locais para cada tarefa.</span><span class="sxs-lookup"><span data-stu-id="e2e11-663">The function delegate that returns the initial state of the local data for each task.</span></span></param>
        <param name="body"><span data-ttu-id="e2e11-664">O delegado invocado uma vez por iteração.</span><span class="sxs-lookup"><span data-stu-id="e2e11-664">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="e2e11-665">O delegado que executa uma ação final no estado local de cada tarefa.</span><span class="sxs-lookup"><span data-stu-id="e2e11-665">The delegate that performs a final action on the local state of each task.</span></span></param>
        <summary><span data-ttu-id="e2e11-666">Executa uma operação <see langword="foreach" /> (<see langword="For Each" /> no Visual Basic) com índices de dados de local de thread em um <see cref="T:System.Collections.IEnumerable" />, no qual as iterações podem ser executadas em paralelo e o estado do loop pode ser monitorado e manipulado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-666">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="e2e11-667">Uma estrutura que contém informações sobre qual parte do loop foi concluída.</span><span class="sxs-lookup"><span data-stu-id="e2e11-667">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2e11-668">O `body` delegado é invocado uma vez para cada elemento no `source` enumerável.</span><span class="sxs-lookup"><span data-stu-id="e2e11-668">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="e2e11-669">Ele é fornecido com os seguintes parâmetros: o elemento atual, um <xref:System.Threading.Tasks.ParallelLoopState> instância que pode ser usada para interromper o loop prematuramente e alguns estados de locais que podem ser compartilhados entre as iterações que executam no mesmo thread.</span><span class="sxs-lookup"><span data-stu-id="e2e11-669">It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.</span></span>  
  
 <span data-ttu-id="e2e11-670">O `localInit` delegado é invocado uma vez para cada tarefa que participa de execução do loop e retorna o estado local inicial para cada uma dessas tarefas.</span><span class="sxs-lookup"><span data-stu-id="e2e11-670">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="e2e11-671">Esses estados iniciais são passados para o primeiro `body` invocações em cada tarefa.</span><span class="sxs-lookup"><span data-stu-id="e2e11-671">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="e2e11-672">Em seguida, cada invocação subsequente corpo retorna um valor de estado possivelmente modificado que é passado para a próxima invocação de corpo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-672">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="e2e11-673">Por fim, a última chamada do corpo em cada tarefa retorna um valor de estado que é passado para o `localFinally` delegar.</span><span class="sxs-lookup"><span data-stu-id="e2e11-673">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="e2e11-674">O `localFinally` delegado é invocado uma vez por thread para executar uma ação final no estado local de cada tarefa.</span><span class="sxs-lookup"><span data-stu-id="e2e11-674">The `localFinally` delegate is invoked once per thread to perform a final action on each task's local state.</span></span> <span data-ttu-id="e2e11-675">Esse delegado pode ser invocado simultaneamente em várias tarefas; Portanto, você deve sincronizar o acesso a quaisquer variáveis compartilhadas.</span><span class="sxs-lookup"><span data-stu-id="e2e11-675">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="e2e11-676">O <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> método pode usar tarefas mais do que os threads durante a vida útil de sua execução, como as tarefas existentes são concluídas e são substituídas por novas tarefas.</span><span class="sxs-lookup"><span data-stu-id="e2e11-676">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="e2e11-677">Isso proporciona subjacente <xref:System.Threading.Tasks.TaskScheduler> do objeto a chance de adicionar, alterar ou remover threads que o loop de serviço.</span><span class="sxs-lookup"><span data-stu-id="e2e11-677">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2e11-678">O exemplo a seguir mostra como usar um <xref:System.Threading.Tasks.Parallel.ForEach%2A> método com o estado local:</span><span class="sxs-lookup"><span data-stu-id="e2e11-678">The following example shows how to use a <xref:System.Threading.Tasks.Parallel.ForEach%2A> method with local state:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#02](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelforeach.cs#02)]
 [!code-vb[System.Threading.Tasks.Parallel#02](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelforeach.vb#02)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2e11-679">O argumento <paramref name="source" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-679">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-680">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-680">-or-</span></span> 
<span data-ttu-id="e2e11-681">O argumento <paramref name="body" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-681">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-682">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-682">-or-</span></span> 
<span data-ttu-id="e2e11-683">O argumento <paramref name="localInit" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-683">The <paramref name="localInit" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-684">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-684">-or-</span></span> 
<span data-ttu-id="e2e11-685">O argumento <paramref name="localFinally" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-685">The <paramref name="localFinally" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="e2e11-686">A exceção que contém todas as exceções individuais lançadas em todos os threads.</span><span class="sxs-lookup"><span data-stu-id="e2e11-686">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="e2e11-687">Loops paralelos</span><span class="sxs-lookup"><span data-stu-id="e2e11-687">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Concurrent.OrderablePartitioner`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`5&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::OrderablePartitioner&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="e2e11-688">O tipo dos elementos em <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-688">The type of the elements in <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TLocal"><span data-ttu-id="e2e11-689">O tipo dos dados locais do thread.</span><span class="sxs-lookup"><span data-stu-id="e2e11-689">The type of the thread-local data.</span></span></typeparam>
        <param name="source"><span data-ttu-id="e2e11-690">O particionador solicitável que contém a fonte de dados original.</span><span class="sxs-lookup"><span data-stu-id="e2e11-690">The orderable partitioner that contains the original data source.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="e2e11-691">Um objeto que configura o comportamento dessa operação.</span><span class="sxs-lookup"><span data-stu-id="e2e11-691">An object that configures the behavior of this operation.</span></span></param>
        <param name="localInit"><span data-ttu-id="e2e11-692">O delegado da função que retorna o estado inicial dos dados locais para cada tarefa.</span><span class="sxs-lookup"><span data-stu-id="e2e11-692">The function delegate that returns the initial state of the local data for each task.</span></span></param>
        <param name="body"><span data-ttu-id="e2e11-693">O delegado invocado uma vez por iteração.</span><span class="sxs-lookup"><span data-stu-id="e2e11-693">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="e2e11-694">O delegado que executa uma ação final no estado local de cada tarefa.</span><span class="sxs-lookup"><span data-stu-id="e2e11-694">The delegate that performs a final action on the local state of each task.</span></span></param>
        <summary><span data-ttu-id="e2e11-695">Executa uma operação <see langword="foreach" /> (<see langword="For Each" /> no Visual Basic) com índices de 64 bits e dados locais do thread em um <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" />, no qual iterações podem ser executadas em paralelo, opções de loop podem ser configuradas e o estado do loop pode ser monitorado e manipulado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-695">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with 64-bit indexes and  with thread-local data on a <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> in which iterations may run in parallel , loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="e2e11-696">Uma estrutura que contém informações sobre qual parte do loop foi concluída.</span><span class="sxs-lookup"><span data-stu-id="e2e11-696">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2e11-697">Essa sobrecarga é fornecida para cenários em que você deseja substituir o padrão de esquema de particionamento.</span><span class="sxs-lookup"><span data-stu-id="e2e11-697">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="e2e11-698">Por exemplo, corpos de loop pequenos podem se beneficiar do particionamento de intervalo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-698">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="e2e11-699">O <xref:System.Threading.Tasks.Parallel.ForEach%2A> particionadores personalizados para dar suporte ao particionamento dinâmico de espera do método.</span><span class="sxs-lookup"><span data-stu-id="e2e11-699">The <xref:System.Threading.Tasks.Parallel.ForEach%2A> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="e2e11-700">Para obter mais informações, consulte [Particionadores personalizados para PLINQ e TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) e [como: implementar partições dinâmicas](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span><span class="sxs-lookup"><span data-stu-id="e2e11-700">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 <span data-ttu-id="e2e11-701">O `localInit` delegado é invocado uma vez para cada tarefa que participa de execução do loop e retorna o estado local inicial para cada uma dessas tarefas.</span><span class="sxs-lookup"><span data-stu-id="e2e11-701">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="e2e11-702">Esses estados iniciais são passados para o primeiro `body` invocações em cada tarefa.</span><span class="sxs-lookup"><span data-stu-id="e2e11-702">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="e2e11-703">Em seguida, cada invocação subsequente corpo retorna um valor de estado possivelmente modificado que é passado para a próxima invocação de corpo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-703">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="e2e11-704">Por fim, a última chamada do corpo em cada thread retorna um valor de estado que é passado para o `localFinally` delegar.</span><span class="sxs-lookup"><span data-stu-id="e2e11-704">Finally, the last body invocation on each thread returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="e2e11-705">O `localFinally` delegado é invocado uma vez por tarefa para executar uma ação final no estado local de cada tarefa.</span><span class="sxs-lookup"><span data-stu-id="e2e11-705">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="e2e11-706">Esse delegado pode ser invocado simultaneamente em várias tarefas; Portanto, você deve sincronizar o acesso a quaisquer variáveis compartilhadas.</span><span class="sxs-lookup"><span data-stu-id="e2e11-706">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="e2e11-707">O <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> método pode usar tarefas mais do que os threads durante a vida útil de sua execução, como as tarefas existentes são concluídas e são substituídas por novas tarefas.</span><span class="sxs-lookup"><span data-stu-id="e2e11-707">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="e2e11-708">Isso proporciona subjacente <xref:System.Threading.Tasks.TaskScheduler> do objeto a chance de adicionar, alterar ou remover threads que o loop de serviço.</span><span class="sxs-lookup"><span data-stu-id="e2e11-708">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2e11-709">O argumento <paramref name="source" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-709">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-710">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-710">-or-</span></span> 
<span data-ttu-id="e2e11-711">O argumento <paramref name="parallelOptions" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-711">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-712">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-712">-or-</span></span> 
<span data-ttu-id="e2e11-713">O argumento <paramref name="body" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-713">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-714">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-714">-or-</span></span> 
<span data-ttu-id="e2e11-715">O argumento <paramref name="localInit" /> ou <paramref name="localFinally" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-715">The <paramref name="localInit" /> or <paramref name="localFinally" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2e11-716">A propriedade <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> no <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> retorna <see langword="false" /> ou o particionador retorna partições <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-716">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> returns <see langword="false" /> or the partitioner returns <see langword="null" /> partitions.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="e2e11-717">A exceção que contém todas as exceções individuais geradas em todos os threads.</span><span class="sxs-lookup"><span data-stu-id="e2e11-717">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="e2e11-718">O <see cref="T:System.Threading.CancellationToken" /> no argumento <paramref name="parallelOptions" /> foi cancelado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-718">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e2e11-719">O <see cref="T:System.Threading.CancellationTokenSource" /> associado ao <see cref="T:System.Threading.CancellationToken" /> no <paramref name="parallelOptions" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-719">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="e2e11-720">Loops paralelos</span><span class="sxs-lookup"><span data-stu-id="e2e11-720">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="e2e11-721">O tipo dos elementos em <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-721">The type of the elements in <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TLocal"><span data-ttu-id="e2e11-722">O tipo dos dados locais do thread.</span><span class="sxs-lookup"><span data-stu-id="e2e11-722">The type of the thread-local data.</span></span></typeparam>
        <param name="source"><span data-ttu-id="e2e11-723">O particionador que contém a fonte de dados original.</span><span class="sxs-lookup"><span data-stu-id="e2e11-723">The partitioner that contains the original data source.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="e2e11-724">Um objeto que configura o comportamento dessa operação.</span><span class="sxs-lookup"><span data-stu-id="e2e11-724">An object that configures the behavior of this operation.</span></span></param>
        <param name="localInit"><span data-ttu-id="e2e11-725">O delegado da função que retorna o estado inicial dos dados locais para cada tarefa.</span><span class="sxs-lookup"><span data-stu-id="e2e11-725">The function delegate that returns the initial state of the local data for each task.</span></span></param>
        <param name="body"><span data-ttu-id="e2e11-726">O delegado invocado uma vez por iteração.</span><span class="sxs-lookup"><span data-stu-id="e2e11-726">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="e2e11-727">O delegado que executa uma ação final no estado local de cada tarefa.</span><span class="sxs-lookup"><span data-stu-id="e2e11-727">The delegate that performs a final action on the local state of each task.</span></span></param>
        <summary><span data-ttu-id="e2e11-728">Executa uma operação <see langword="foreach" /> (<see langword="For Each" /> no Visual Basic) com os dados locais do thread em um <see cref="T:System.Collections.Concurrent.Partitioner" />, no qual iterações podem ser executadas em paralelo, opções de loop podem ser configuradas e o estado do loop pode ser monitorado e manipulado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-728">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation  with thread-local data on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="e2e11-729">Uma estrutura que contém informações sobre qual parte do loop foi concluída.</span><span class="sxs-lookup"><span data-stu-id="e2e11-729">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2e11-730">Essa sobrecarga é fornecida para cenários em que você deseja substituir o padrão de esquema de particionamento.</span><span class="sxs-lookup"><span data-stu-id="e2e11-730">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="e2e11-731">Por exemplo, corpos de loop pequenos podem se beneficiar do particionamento de intervalo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-731">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="e2e11-732">O <xref:System.Threading.Tasks.Parallel.ForEach%2A> particionadores personalizados para dar suporte ao particionamento dinâmico de espera do método.</span><span class="sxs-lookup"><span data-stu-id="e2e11-732">The <xref:System.Threading.Tasks.Parallel.ForEach%2A> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="e2e11-733">Essa sobrecarga é fornecida para cenários com corpos de loop pequenos que podem se beneficiar do particionamento de intervalo estático.</span><span class="sxs-lookup"><span data-stu-id="e2e11-733">This overload is provided for scenarios with small loop bodies that might benefit from static range partitioning.</span></span> <span data-ttu-id="e2e11-734">Particionadores devem oferecer suporte a partições dinâmicas.</span><span class="sxs-lookup"><span data-stu-id="e2e11-734">Partitioners must support dynamic partitions.</span></span>  <span data-ttu-id="e2e11-735">Para obter mais informações, consulte [Particionadores personalizados para PLINQ e TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) e [como: implementar partições dinâmicas](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span><span class="sxs-lookup"><span data-stu-id="e2e11-735">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 <span data-ttu-id="e2e11-736">O `localInit` delegado é invocado uma vez para cada tarefa que participa de execução do loop e retorna o estado local inicial para cada uma dessas tarefas.</span><span class="sxs-lookup"><span data-stu-id="e2e11-736">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="e2e11-737">Esses estados iniciais são passados para o primeiro `body` invocações em cada tarefa.</span><span class="sxs-lookup"><span data-stu-id="e2e11-737">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="e2e11-738">Em seguida, cada invocação subsequente corpo retorna um valor de estado possivelmente modificado que é passado para a próxima invocação de corpo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-738">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="e2e11-739">Por fim, a última chamada do corpo em cada tarefa retorna um valor de estado que é passado para o `localFinally` delegar.</span><span class="sxs-lookup"><span data-stu-id="e2e11-739">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="e2e11-740">O `localFinally` delegado é invocado uma vez por tarefa para executar uma ação final no estado local de cada tarefa.</span><span class="sxs-lookup"><span data-stu-id="e2e11-740">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="e2e11-741">Esse delegado pode ser invocado simultaneamente em várias tarefas; Portanto, você deve sincronizar o acesso a quaisquer variáveis compartilhadas.</span><span class="sxs-lookup"><span data-stu-id="e2e11-741">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="e2e11-742">O <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> método pode usar tarefas mais do que os threads durante a vida útil de sua execução, como as tarefas existentes são concluídas e são substituídas por novas tarefas.</span><span class="sxs-lookup"><span data-stu-id="e2e11-742">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="e2e11-743">Isso proporciona subjacente <xref:System.Threading.Tasks.TaskScheduler> do objeto a chance de adicionar, alterar ou remover threads que o loop de serviço.</span><span class="sxs-lookup"><span data-stu-id="e2e11-743">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2e11-744">O argumento <paramref name="source" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-744">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-745">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-745">-or-</span></span> 
<span data-ttu-id="e2e11-746">O argumento <paramref name="parallelOptions" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-746">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-747">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-747">-or-</span></span> 
<span data-ttu-id="e2e11-748">O argumento <paramref name="body" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-748">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-749">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-749">-or-</span></span> 
<span data-ttu-id="e2e11-750">O argumento <paramref name="localInit" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-750">The <paramref name="localInit" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-751">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-751">-or-</span></span> 
<span data-ttu-id="e2e11-752">O argumento <paramref name="localFinally" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-752">The <paramref name="localFinally" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2e11-753">A propriedade <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> no <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> retorna <see langword="false" /> ou o particionador retorna partições <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-753">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> returns <see langword="false" /> or the partitioner returns <see langword="null" /> partitions.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="e2e11-754">A exceção que contém todas as exceções individuais geradas em todos os threads.</span><span class="sxs-lookup"><span data-stu-id="e2e11-754">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="e2e11-755">O <see cref="T:System.Threading.CancellationToken" /> no argumento <paramref name="parallelOptions" /> foi cancelado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-755">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e2e11-756">O <see cref="T:System.Threading.CancellationTokenSource" /> associado ao <see cref="T:System.Threading.CancellationToken" /> no <paramref name="parallelOptions" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-756">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="e2e11-757">Loops paralelos</span><span class="sxs-lookup"><span data-stu-id="e2e11-757">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`5&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="e2e11-758">O tipo de dados na fonte.</span><span class="sxs-lookup"><span data-stu-id="e2e11-758">The type of the data in the source.</span></span></typeparam>
        <typeparam name="TLocal"><span data-ttu-id="e2e11-759">O tipo dos dados do local de thread.</span><span class="sxs-lookup"><span data-stu-id="e2e11-759">The type of the thread-local data.</span></span></typeparam>
        <param name="source"><span data-ttu-id="e2e11-760">Uma fonte de dados enumerável.</span><span class="sxs-lookup"><span data-stu-id="e2e11-760">An enumerable data source.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="e2e11-761">Um objeto que configura o comportamento dessa operação.</span><span class="sxs-lookup"><span data-stu-id="e2e11-761">An object that configures the behavior of this operation.</span></span></param>
        <param name="localInit"><span data-ttu-id="e2e11-762">O delegado da função que retorna o estado inicial dos dados locais para cada tarefa.</span><span class="sxs-lookup"><span data-stu-id="e2e11-762">The function delegate that returns the initial state of the local data for each task.</span></span></param>
        <param name="body"><span data-ttu-id="e2e11-763">O delegado invocado uma vez por iteração.</span><span class="sxs-lookup"><span data-stu-id="e2e11-763">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="e2e11-764">O delegado que executa uma ação final no estado local de cada tarefa.</span><span class="sxs-lookup"><span data-stu-id="e2e11-764">The delegate that performs a final action on the local state of each task.</span></span></param>
        <summary><span data-ttu-id="e2e11-765">Executa uma operação <see langword="foreach" /> (<see langword="For Each" /> no Visual Basic) com os dados locais de thread e índices de 64 bits em um <see cref="T:System.Collections.IEnumerable" />, no qual iterações podem ser executadas em paralelo, opções de loop podem ser configuradas e o estado de loop pode ser monitorado e manipulado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-765">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data and 64-bit indexes on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="e2e11-766">Uma estrutura que contém informações sobre qual parte do loop foi concluída.</span><span class="sxs-lookup"><span data-stu-id="e2e11-766">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2e11-767">O `body` delegado é invocado uma vez para cada elemento no `source` enumerável.</span><span class="sxs-lookup"><span data-stu-id="e2e11-767">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="e2e11-768">Ele é fornecido com os seguintes parâmetros: o elemento atual, uma <xref:System.Threading.Tasks.ParallelLoopState> instância que pode ser usada para interromper o loop prematuramente, o índice do elemento atual (<xref:System.Int64>) e alguns estados de local que podem ser compartilhado entre as iterações que executarem no mesmo thread.</span><span class="sxs-lookup"><span data-stu-id="e2e11-768">It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, the current element's index (<xref:System.Int64>), and some local state that may be shared amongst iterations that execute on the same thread.</span></span>  
  
 <span data-ttu-id="e2e11-769">O `localInit` delegado é invocado uma vez para cada tarefa que participa de execução do loop e retorna o estado local inicial para cada uma dessas tarefas.</span><span class="sxs-lookup"><span data-stu-id="e2e11-769">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="e2e11-770">Esses estados iniciais são passados para o primeiro `body` invocações em cada tarefa.</span><span class="sxs-lookup"><span data-stu-id="e2e11-770">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="e2e11-771">Em seguida, cada invocação subsequente corpo retorna um valor de estado possivelmente modificado que é passado para a próxima invocação de corpo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-771">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="e2e11-772">Por fim, a última chamada do corpo em cada tarefa retorna um valor de estado que é passado para o `localFinally` delegar.</span><span class="sxs-lookup"><span data-stu-id="e2e11-772">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="e2e11-773">O `localFinally` delegado é invocado uma vez por thread para executar uma ação final no estado local de cada tarefa.</span><span class="sxs-lookup"><span data-stu-id="e2e11-773">The `localFinally` delegate is invoked once per thread to perform a final action on each task's local state.</span></span> <span data-ttu-id="e2e11-774">Esse delegado pode ser invocado simultaneamente em várias tarefas; Portanto, você deve sincronizar o acesso a quaisquer variáveis compartilhadas.</span><span class="sxs-lookup"><span data-stu-id="e2e11-774">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="e2e11-775">O <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> método pode usar tarefas mais do que os threads durante a vida útil de sua execução, como as tarefas existentes são concluídas e são substituídas por novas tarefas.</span><span class="sxs-lookup"><span data-stu-id="e2e11-775">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="e2e11-776">Isso proporciona subjacente <xref:System.Threading.Tasks.TaskScheduler> do objeto a chance de adicionar, alterar ou remover threads que o loop de serviço.</span><span class="sxs-lookup"><span data-stu-id="e2e11-776">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2e11-777">O argumento <paramref name="source" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-777">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-778">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-778">-or-</span></span> 
<span data-ttu-id="e2e11-779">O argumento <paramref name="parallelOptions" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-779">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-780">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-780">-or-</span></span> 
<span data-ttu-id="e2e11-781">O argumento <paramref name="body" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-781">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-782">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-782">-or-</span></span> 
<span data-ttu-id="e2e11-783">O argumento <paramref name="localInit" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-783">The <paramref name="localInit" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-784">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-784">-or-</span></span> 
<span data-ttu-id="e2e11-785">O argumento <paramref name="localFinally" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-785">The <paramref name="localFinally" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="e2e11-786">O <see cref="T:System.Threading.CancellationToken" /> no argumento <paramref name="parallelOptions" /> foi cancelado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-786">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e2e11-787">O <see cref="T:System.Threading.CancellationTokenSource" /> associado ao <see cref="T:System.Threading.CancellationToken" /> no <paramref name="parallelOptions" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-787">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="e2e11-788">A exceção que contém todas as exceções individuais lançadas em todos os threads.</span><span class="sxs-lookup"><span data-stu-id="e2e11-788">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="e2e11-789">Loops paralelos</span><span class="sxs-lookup"><span data-stu-id="e2e11-789">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="e2e11-790">O tipo de dados na fonte.</span><span class="sxs-lookup"><span data-stu-id="e2e11-790">The type of the data in the source.</span></span></typeparam>
        <typeparam name="TLocal"><span data-ttu-id="e2e11-791">O tipo dos dados do local de thread.</span><span class="sxs-lookup"><span data-stu-id="e2e11-791">The type of the thread-local data.</span></span></typeparam>
        <param name="source"><span data-ttu-id="e2e11-792">Uma fonte de dados enumerável.</span><span class="sxs-lookup"><span data-stu-id="e2e11-792">An enumerable data source.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="e2e11-793">Um objeto que configura o comportamento dessa operação.</span><span class="sxs-lookup"><span data-stu-id="e2e11-793">An object that configures the behavior of this operation.</span></span></param>
        <param name="localInit"><span data-ttu-id="e2e11-794">O delegado da função que retorna o estado inicial dos dados locais para cada tarefa.</span><span class="sxs-lookup"><span data-stu-id="e2e11-794">The function delegate that returns the initial state of the local data for each task.</span></span></param>
        <param name="body"><span data-ttu-id="e2e11-795">O delegado invocado uma vez por iteração.</span><span class="sxs-lookup"><span data-stu-id="e2e11-795">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="e2e11-796">O delegado que executa uma ação final no estado local de cada tarefa.</span><span class="sxs-lookup"><span data-stu-id="e2e11-796">The delegate that performs a final action on the local state of each task.</span></span></param>
        <summary><span data-ttu-id="e2e11-797">Executa uma operação <see langword="foreach" /> (<see langword="For Each" /> no Visual Basic) com os dados locais do thread em um <see cref="T:System.Collections.IEnumerable" /> no qual as iterações podem ser executadas em paralelo, as opções de loop podem ser configuradas e o estado do loop pode ser monitorado e manipulado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-797">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated..</span></span></summary>
        <returns><span data-ttu-id="e2e11-798">Uma estrutura que contém informações sobre qual parte do loop foi concluída.</span><span class="sxs-lookup"><span data-stu-id="e2e11-798">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2e11-799">O `body` delegado é invocado uma vez para cada elemento no `source` enumerável.</span><span class="sxs-lookup"><span data-stu-id="e2e11-799">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="e2e11-800">Ele é fornecido com os seguintes parâmetros: o elemento atual, um <xref:System.Threading.Tasks.ParallelLoopState> instância que pode ser usada para interromper o loop prematuramente e alguns estados de locais que podem ser compartilhados entre as iterações que executam no mesmo thread.</span><span class="sxs-lookup"><span data-stu-id="e2e11-800">It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.</span></span>  
  
 <span data-ttu-id="e2e11-801">O `localInit` delegado é invocado uma vez para cada tarefa que participa de execução do loop e retorna o estado local inicial para cada uma dessas tarefas.</span><span class="sxs-lookup"><span data-stu-id="e2e11-801">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="e2e11-802">Esses estados iniciais são passados para o primeiro `body` invocações em cada tarefa.</span><span class="sxs-lookup"><span data-stu-id="e2e11-802">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="e2e11-803">Em seguida, cada invocação subsequente corpo retorna um valor de estado possivelmente modificado que é passado para a próxima invocação de corpo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-803">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="e2e11-804">Por fim, a última chamada do corpo em cada tarefa retorna um valor de estado que é passado para o `localFinally` delegar.</span><span class="sxs-lookup"><span data-stu-id="e2e11-804">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="e2e11-805">O `localFinally` delegado é invocado uma vez por thread para executar uma ação final no estado local de cada tarefa.</span><span class="sxs-lookup"><span data-stu-id="e2e11-805">The `localFinally` delegate is invoked once per thread to perform a final action on each task's local state.</span></span> <span data-ttu-id="e2e11-806">Esse delegado pode ser invocado simultaneamente em várias tarefas; Portanto, você deve sincronizar o acesso a quaisquer variáveis compartilhadas.</span><span class="sxs-lookup"><span data-stu-id="e2e11-806">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="e2e11-807">O <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> método pode usar tarefas mais do que os threads durante a vida útil de sua execução, como as tarefas existentes são concluídas e são substituídas por novas tarefas.</span><span class="sxs-lookup"><span data-stu-id="e2e11-807">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="e2e11-808">Isso proporciona subjacente <xref:System.Threading.Tasks.TaskScheduler> do objeto a chance de adicionar, alterar ou remover threads que o loop de serviço.</span><span class="sxs-lookup"><span data-stu-id="e2e11-808">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2e11-809">O argumento <paramref name="source" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-809">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-810">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-810">-or-</span></span> 
<span data-ttu-id="e2e11-811">O argumento <paramref name="parallelOptions" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-811">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-812">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-812">-or-</span></span> 
<span data-ttu-id="e2e11-813">O argumento <paramref name="body" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-813">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-814">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-814">-or-</span></span> 
<span data-ttu-id="e2e11-815">O argumento <paramref name="localInit" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-815">The <paramref name="localInit" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-816">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-816">-or-</span></span> 
<span data-ttu-id="e2e11-817">O argumento <paramref name="localFinally" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-817">The <paramref name="localFinally" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="e2e11-818">O <see cref="T:System.Threading.CancellationToken" /> no argumento <paramref name="parallelOptions" /> foi cancelado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-818">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e2e11-819">O <see cref="T:System.Threading.CancellationTokenSource" /> associado ao <see cref="T:System.Threading.CancellationToken" /> no <paramref name="parallelOptions" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-819">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="e2e11-820">A exceção que contém todas as exceções individuais lançadas em todos os threads.</span><span class="sxs-lookup"><span data-stu-id="e2e11-820">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="e2e11-821">Loops paralelos</span><span class="sxs-lookup"><span data-stu-id="e2e11-821">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e2e11-822">Executa cada uma das ações fornecidas, possivelmente em paralelo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-822">Executes each of the provided actions, possibly in parallel.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static void Invoke (params Action[] actions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Invoke(class System.Action[] actions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.Invoke(System.Action[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Invoke (ParamArray actions As Action())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Invoke(... cli::array &lt;Action ^&gt; ^ actions);" />
      <MemberSignature Language="F#" Value="static member Invoke : Action[] -&gt; unit" Usage="System.Threading.Tasks.Parallel.Invoke actions" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actions" Type="System.Action[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="actions"><span data-ttu-id="e2e11-823">Uma matriz de <see cref="T:System.Action" /> para executar.</span><span class="sxs-lookup"><span data-stu-id="e2e11-823">An array of <see cref="T:System.Action" /> to execute.</span></span></param>
        <summary><span data-ttu-id="e2e11-824">Executa cada uma das ações fornecidas, possivelmente em paralelo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-824">Executes each of the provided actions, possibly in parallel.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2e11-825">Esse método pode ser usado para executar um conjunto de operações, possivelmente em paralelo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-825">This method can be used to execute a set of operations, potentially in parallel.</span></span>  
  
 <span data-ttu-id="e2e11-826">Não há garantias sobre a ordem na qual as operações são executadas ou se elas são executadas em paralelo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-826">No guarantees are made about the order in which the operations execute or whether they execute in parallel.</span></span> <span data-ttu-id="e2e11-827">Esse método não retorna até que cada uma das operações fornecidas for concluída, independentemente se o preenchimento ocorre devido ao encerramento normal ou excepcional.</span><span class="sxs-lookup"><span data-stu-id="e2e11-827">This method does not return until each of the provided operations has completed, regardless of whether completion occurs due to normal or exceptional termination.</span></span>  
  
 <span data-ttu-id="e2e11-828">Para obter mais informações, consulte [Como usar Parallel.Invoke para executar operações em paralelo](~/docs/standard/parallel-programming/how-to-use-parallel-invoke-to-execute-parallel-operations.md).</span><span class="sxs-lookup"><span data-stu-id="e2e11-828">For more information, see [How to: Use Parallel.Invoke to Execute Parallel Operations](~/docs/standard/parallel-programming/how-to-use-parallel-invoke-to-execute-parallel-operations.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2e11-829">Este exemplo demonstra como usar o <xref:System.Threading.Tasks.Parallel.Invoke%2A> método com outros métodos, delegados anônimos e expressões lambda.</span><span class="sxs-lookup"><span data-stu-id="e2e11-829">This example demonstrates how to use the <xref:System.Threading.Tasks.Parallel.Invoke%2A> method with other methods, anonymous delegates, and lambda expressions.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelinvoke.cs#01)]
 [!code-vb[System.Threading.Tasks.Parallel#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelinvoke.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2e11-830">O argumento <paramref name="actions" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-830">The <paramref name="actions" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="e2e11-831">A exceção que é gerada quando qualquer ação na matriz <paramref name="actions" /> gerar uma exceção.</span><span class="sxs-lookup"><span data-stu-id="e2e11-831">The exception that is thrown when any action in the <paramref name="actions" /> array throws an exception.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2e11-832">A matriz <paramref name="actions" /> contém um elemento <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-832">The <paramref name="actions" /> array contains a <see langword="null" /> element.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static void Invoke (System.Threading.Tasks.ParallelOptions parallelOptions, params Action[] actions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Invoke(class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action[] actions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.Invoke(System.Threading.Tasks.ParallelOptions,System.Action[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Invoke(System::Threading::Tasks::ParallelOptions ^ parallelOptions, ... cli::array &lt;Action ^&gt; ^ actions);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Threading.Tasks.ParallelOptions * Action[] -&gt; unit" Usage="System.Threading.Tasks.Parallel.Invoke (parallelOptions, actions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="actions" Type="System.Action[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="parallelOptions"><span data-ttu-id="e2e11-833">Um objeto que configura o comportamento dessa operação.</span><span class="sxs-lookup"><span data-stu-id="e2e11-833">An object that configures the behavior of this operation.</span></span></param>
        <param name="actions"><span data-ttu-id="e2e11-834">Uma matriz de ações a serem executadas.</span><span class="sxs-lookup"><span data-stu-id="e2e11-834">An array of actions to execute.</span></span></param>
        <summary><span data-ttu-id="e2e11-835">Executa cada uma das ações fornecidas, possivelmente em paralelo, a menos que a operação seja cancelada pelo usuário.</span><span class="sxs-lookup"><span data-stu-id="e2e11-835">Executes each of the provided actions, possibly in parallel, unless the operation is cancelled by the user.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2e11-836">Esse método pode ser usado para executar um conjunto de operações, possivelmente em paralelo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-836">This method can be used to execute a set of operations, potentially in parallel.</span></span> <span data-ttu-id="e2e11-837">O token de cancelamento passado com o <xref:System.Threading.Tasks.ParallelOptions> estrutura permite que o chamador cancelar a operação inteira.</span><span class="sxs-lookup"><span data-stu-id="e2e11-837">The cancellation token passed in with the <xref:System.Threading.Tasks.ParallelOptions> structure enables the caller to cancel the entire operation.</span></span> <span data-ttu-id="e2e11-838">Para saber mais, confira [Cancelamento em threads gerenciados](~/docs/standard/threading/cancellation-in-managed-threads.md).</span><span class="sxs-lookup"><span data-stu-id="e2e11-838">For more information, see [Cancellation in Managed Threads](~/docs/standard/threading/cancellation-in-managed-threads.md).</span></span>  
  
 <span data-ttu-id="e2e11-839">Não há garantias sobre a ordem na qual as operações são executadas ou se elas são executadas em paralelo.</span><span class="sxs-lookup"><span data-stu-id="e2e11-839">No guarantees are made about the order in which the operations execute or whether they execute in parallel.</span></span> <span data-ttu-id="e2e11-840">Esse método não retorna até que cada uma das operações fornecidas for concluída, independentemente se o preenchimento ocorre devido ao encerramento normal ou excepcional.</span><span class="sxs-lookup"><span data-stu-id="e2e11-840">This method does not return until each of the provided operations has completed, regardless of whether completion occurs due to normal or exceptional termination.</span></span>  
  
 <span data-ttu-id="e2e11-841">Para obter mais informações, consulte [Como usar Parallel.Invoke para executar operações em paralelo](~/docs/standard/parallel-programming/how-to-use-parallel-invoke-to-execute-parallel-operations.md).</span><span class="sxs-lookup"><span data-stu-id="e2e11-841">For more information, see [How to: Use Parallel.Invoke to Execute Parallel Operations](~/docs/standard/parallel-programming/how-to-use-parallel-invoke-to-execute-parallel-operations.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="e2e11-842">O <see cref="T:System.Threading.CancellationToken" /> no <paramref name="parallelOptions" /> está definido.</span><span class="sxs-lookup"><span data-stu-id="e2e11-842">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> is set.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2e11-843">O argumento <paramref name="actions" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-843">The <paramref name="actions" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e2e11-844">- ou -</span><span class="sxs-lookup"><span data-stu-id="e2e11-844">-or-</span></span> 
<span data-ttu-id="e2e11-845">O argumento <paramref name="parallelOptions" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-845">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="e2e11-846">A exceção que é gerada quando qualquer ação na matriz <paramref name="actions" /> gerar uma exceção.</span><span class="sxs-lookup"><span data-stu-id="e2e11-846">The exception that is thrown when any action in the <paramref name="actions" /> array throws an exception.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2e11-847">A matriz <paramref name="actions" /> contém um elemento <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e2e11-847">The <paramref name="actions" /> array contains a <see langword="null" /> element.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e2e11-848">O <see cref="T:System.Threading.CancellationTokenSource" /> associado ao <see cref="T:System.Threading.CancellationToken" /> no <paramref name="parallelOptions" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="e2e11-848">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>