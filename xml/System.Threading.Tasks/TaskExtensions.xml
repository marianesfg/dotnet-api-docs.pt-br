<Type Name="TaskExtensions" FullName="System.Threading.Tasks.TaskExtensions">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6e5a4f8fd51ef4dcc76cb328576b5051cfa813bd" />
    <Meta Name="ms.sourcegitcommit" Value="d0bb31ec8354fa58c62c2a646057eec11d3e2150" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="08/17/2018" />
    <Meta Name="ms.locfileid" Value="36606624" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class TaskExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit TaskExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.TaskExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module TaskExtensions" />
  <TypeSignature Language="C++ CLI" Value="public ref class TaskExtensions abstract sealed" />
  <TypeSignature Language="F#" Value="type TaskExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="d7f30-101">Fornece um conjunto de métodos estáticos (compartilhado no Visual Basic) para trabalhar com tipos específicos de instâncias <see cref="T:System.Threading.Tasks.Task" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="d7f30-101">Provides a set of static (Shared in Visual Basic) methods for working with specific kinds of <see cref="T:System.Threading.Tasks.Task" /> instances.</span>
      </span>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Unwrap">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Unwrap (this System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&gt; task);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Unwrap(class System.Threading.Tasks.Task`1&lt;class System.Threading.Tasks.Task&gt; task) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task ^ Unwrap(System::Threading::Tasks::Task&lt;System::Threading::Tasks::Task ^&gt; ^ task);" />
      <MemberSignature Language="F#" Value="static member Unwrap : System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&gt; -&gt; System.Threading.Tasks.Task" Usage="System.Threading.Tasks.TaskExtensions.Unwrap task" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="task">
          <span data-ttu-id="d7f30-102">O <see langword="Task&lt;Task&gt;" /> (c#) ou <see langword="Task (Of Task)" /> (Visual Basic) a ser descompactado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f30-102">The <see langword="Task&lt;Task&gt;" /> (C#) or <see langword="Task (Of Task)" /> (Visual Basic) to unwrap.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d7f30-103">cria um proxy <see cref="T:System.Threading.Tasks.Task" /> que representa a operação assíncrona de um <see cref="M:System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f30-103">Creates a proxy <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation of a <see cref="M:System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d7f30-104">Uma tarefa que representa a operação assíncrona do <see langword="System.Threading.Tasks.Task(Of Task)" /> fornecido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f30-104">A Task that represents the asynchronous operation of the provided <see langword="System.Threading.Tasks.Task(Of Task)" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f30-105">Geralmente é útil ser capaz de retornar uma tarefa de um <xref:System.Threading.Tasks.Task%601>, em que a tarefa interna representa o trabalho feito como parte da externo <xref:System.Threading.Tasks.Task%601>.</span><span class="sxs-lookup"><span data-stu-id="d7f30-105">It is often useful to be able to return a Task from a <xref:System.Threading.Tasks.Task%601>, where the inner Task represents work done as part of the outer <xref:System.Threading.Tasks.Task%601>.</span></span> <span data-ttu-id="d7f30-106">No entanto, isso pode resultar em uma `Task<Task>` (c#) ou `Task (Of Task)` (Visual Basic), que, se não foram tratadas com cuidado, pode produzir um comportamento inesperado.</span><span class="sxs-lookup"><span data-stu-id="d7f30-106">However, doing so results in a `Task<Task>` (C#) or `Task (Of Task)` (Visual Basic), which, if not dealt with carefully, could produce unexpected behavior.</span></span> <span data-ttu-id="d7f30-107">Desencapsular resolve esse problema criando um tarefa que representa toda a operação assíncrona de uma tarefa de proxy.</span><span class="sxs-lookup"><span data-stu-id="d7f30-107">Unwrap solves this problem by creating a proxy Task that represents the entire asynchronous operation of such a task.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7f30-108">O exemplo a seguir mostra como desencapsular uma tarefa:</span><span class="sxs-lookup"><span data-stu-id="d7f30-108">The following example shows how to unwrap a task:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.TaskExtensions#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.taskextensions/cs/unwrap.cs#01)]
 [!code-vb[System.Threading.Tasks.TaskExtensions#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.taskextensions/vb/unwrap.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d7f30-109">A exceção lançada se o argumento <paramref name="task" /> for nulo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f30-109">The exception that is thrown if the <paramref name="task" /> argument is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Unwrap&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; Unwrap&lt;TResult&gt; (this System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; task);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; Unwrap&lt;TResult&gt;(class System.Threading.Tasks.Task`1&lt;class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; task) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Unwrap(Of TResult) (task As Task(Of Task(Of TResult))) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ Unwrap(System::Threading::Tasks::Task&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ task);" />
      <MemberSignature Language="F#" Value="static member Unwrap : System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&lt;'Result&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="System.Threading.Tasks.TaskExtensions.Unwrap task" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="task" Type="System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="d7f30-110">O tipo de resultado da tarefa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f30-110">The type of the task's result.</span>
          </span>
        </typeparam>
        <param name="task">
          <span data-ttu-id="d7f30-111">O <see langword="Task&lt;Task&lt;T&gt;&gt;" /> (c#) ou <see langword="Task (Of Task(Of T))" /> (Visual Basic) a ser descompactado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f30-111">The <see langword="Task&lt;Task&lt;T&gt;&gt;" /> (C#) or <see langword="Task (Of Task(Of T))" /> (Visual Basic) to unwrap.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d7f30-112">Cria um proxy <see cref="T:System.Threading.Tasks.Task" /> que representa a operação assíncrona de um <see langword="Task&lt;Task&lt;T&gt;&gt;" /> (C#) ou <see langword="Task (Of Task(Of T))" /> (Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f30-112">Creates a proxy <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation of a <see langword="Task&lt;Task&lt;T&gt;&gt;" /> (C#) or <see langword="Task (Of Task(Of T))" /> (Visual Basic).</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d7f30-113">Um <see cref="T:System.Threading.Tasks.Task" /> que representa a operação assíncrona do <see langword="Task&lt;Task&lt;T&gt;&gt;" /> (C#) ou <see langword="Task (Of Task(Of T))" /> (Visual Basic) fornecido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f30-113">A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation of the provided <see langword="Task&lt;Task&lt;T&gt;&gt;" /> (C#) or <see langword="Task (Of Task(Of T))" /> (Visual Basic).</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f30-114">Geralmente é útil ser capaz de retornar um <xref:System.Threading.Tasks.Task> de um <xref:System.Threading.Tasks.Task>, onde interna <xref:System.Threading.Tasks.Task> representa o trabalho feito como parte da externo <xref:System.Threading.Tasks.Task>.</span><span class="sxs-lookup"><span data-stu-id="d7f30-114">It is often useful to be able to return a <xref:System.Threading.Tasks.Task> from a <xref:System.Threading.Tasks.Task>, where the inner <xref:System.Threading.Tasks.Task> represents work done as part of the outer <xref:System.Threading.Tasks.Task>.</span></span> <span data-ttu-id="d7f30-115">No entanto, isso pode resultar em uma `Task<Task<T>>` (c#) ou `Task (Of Task(Of T))` (Visual Basic), que, se não foram tratadas com cuidado, pode produzir um comportamento inesperado.</span><span class="sxs-lookup"><span data-stu-id="d7f30-115">However, doing so results in a `Task<Task<T>>` (C#) or `Task (Of Task(Of T))` (Visual Basic), which, if not dealt with carefully, could produce unexpected behavior.</span></span> <span data-ttu-id="d7f30-116">Desencapsular resolve esse problema, criando um proxy <xref:System.Threading.Tasks.Task%601> que representa toda a operação assíncrona de tais uma `Task<Task<T>>` (c#) ou `Task (Of Task(Of T))` (Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="d7f30-116">Unwrap solves this problem by creating a proxy <xref:System.Threading.Tasks.Task%601> that represents the entire asynchronous operation of such a `Task<Task<T>>` (C#) or `Task (Of Task(Of T))` (Visual Basic).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d7f30-117">A exceção lançada se o argumento <paramref name="task" /> for nulo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f30-117">The exception that is thrown if the <paramref name="task" /> argument is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>