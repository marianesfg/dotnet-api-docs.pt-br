<Type Name="TaskFactory" FullName="System.Threading.Tasks.TaskFactory">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0840b5646b82fa6e7833718724b56dd16676c685" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52232224" /></Metadata><TypeSignature Language="C#" Value="public class TaskFactory" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TaskFactory extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.TaskFactory" />
  <TypeSignature Language="VB.NET" Value="Public Class TaskFactory" />
  <TypeSignature Language="C++ CLI" Value="public ref class TaskFactory" />
  <TypeSignature Language="F#" Value="type TaskFactory = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="0eb3f-101">Fornece suporte para criação e agendamento de objetos <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-101">Provides support for creating and scheduling <see cref="T:System.Threading.Tasks.Task" /> objects.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eb3f-102">O .NET Framework fornece duas fábricas para criar e agendar tarefas:</span><span class="sxs-lookup"><span data-stu-id="0eb3f-102">The .NET Framework provides two factories for creating and scheduling tasks:</span></span>  
  
-   <span data-ttu-id="0eb3f-103">O <xref:System.Threading.Tasks.TaskFactory> classe, que cria <xref:System.Threading.Tasks.Task> e <xref:System.Threading.Tasks.Task%601> objetos.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-103">The <xref:System.Threading.Tasks.TaskFactory> class, which creates <xref:System.Threading.Tasks.Task> and <xref:System.Threading.Tasks.Task%601> objects.</span></span> <span data-ttu-id="0eb3f-104">Você pode chamar as sobrecargas desse método para criar e executar uma tarefa que requer argumentos não padrão.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-104">You can call the overloads of this method to create and execute a task that requires non-default arguments.</span></span>  
  
    > [!WARNING]
    >  <span data-ttu-id="0eb3f-105">Começando com o [!INCLUDE[net_v45](~/includes/net-v45-md.md)], o <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> método fornece a maneira mais fácil de criar uma tarefa padrão valores de configuração e inicie-o imediatamente.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-105">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> method provides the easiest way to create a task with default configuration values and start it immediately.</span></span>  
  
-   <span data-ttu-id="0eb3f-106">O <xref:System.Threading.Tasks.TaskFactory%601> classe, que cria <xref:System.Threading.Tasks.Task%601> objetos.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-106">The <xref:System.Threading.Tasks.TaskFactory%601> class, which creates <xref:System.Threading.Tasks.Task%601> objects.</span></span>  
  
 <span data-ttu-id="0eb3f-107">O <xref:System.Threading.Tasks.TaskFactory> classe permite que você faça o seguinte:</span><span class="sxs-lookup"><span data-stu-id="0eb3f-107">The <xref:System.Threading.Tasks.TaskFactory> class allows you to do the following:</span></span>  
  
-   <span data-ttu-id="0eb3f-108">Criar uma tarefa e iniciá-lo imediatamente, chamando o <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> método.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-108">Create a task and start it immediately by calling the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method.</span></span>  
  
    > [!WARNING]
    >  <span data-ttu-id="0eb3f-109">Começando com o [!INCLUDE[net_v45](~/includes/net-v45-md.md)], o <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> método fornece a maneira mais fácil de criar uma tarefa padrão valores de configuração e inicie-o imediatamente.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-109">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> method provides the easiest way to create a task with default configuration values and start it immediately.</span></span>  
  
-   <span data-ttu-id="0eb3f-110">Criar uma tarefa que começa quando qualquer uma das tarefas em uma matriz é concluído chamando o <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAny%2A> método.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-110">Create a task that starts when any one of the tasks in an array has completed by calling the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAny%2A> method.</span></span>  
  
-   <span data-ttu-id="0eb3f-111">Criar uma tarefa que é iniciado quando todas as tarefas em uma matriz concluiu chamando o <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> método.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-111">Create a task that starts when all the tasks in an array have completed by calling the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> method.</span></span>  
  
 <span data-ttu-id="0eb3f-112">Estático <xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=nameWithType> propriedade retorna um padrão <xref:System.Threading.Tasks.TaskFactory%601> objeto.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-112">The static <xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=nameWithType> property returns a default <xref:System.Threading.Tasks.TaskFactory%601> object.</span></span> <span data-ttu-id="0eb3f-113">Você também pode chamar um dos <xref:System.Threading.Tasks.TaskFactory> classe construtores para configurar o <xref:System.Threading.Tasks.Task> objetos que o <xref:System.Threading.Tasks.TaskFactory> classe cria.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-113">You can also call one of the <xref:System.Threading.Tasks.TaskFactory> class constructors to configure the <xref:System.Threading.Tasks.Task> objects that  the <xref:System.Threading.Tasks.TaskFactory> class creates.</span></span> <span data-ttu-id="0eb3f-114">O exemplo a seguir configura um novo <xref:System.Threading.Tasks.TaskFactory> objeto para criar tarefas que têm um token de cancelamento especificado, as opções de criação de tarefa, opções de continuação e um agendador de tarefas personalizado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-114">The following example configures a new <xref:System.Threading.Tasks.TaskFactory> object to create tasks that have a specified cancellation token, task creation options, continuation options, and a customized task scheduler.</span></span>  
  
 [!code-csharp[TPL_Factories#1](~/samples/snippets/csharp/VS_Snippets_Misc/tpl_factories/cs/program.cs#1)]
 [!code-vb[TPL_Factories#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/tpl_factories/vb/factories_vb.vb#1)]  
  
 <span data-ttu-id="0eb3f-115">Na maioria dos casos, você não precisa criar um novo <xref:System.Threading.Tasks.TaskFactory> instância.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-115">In most cases, you do not have to instantiate a new <xref:System.Threading.Tasks.TaskFactory> instance.</span></span> <span data-ttu-id="0eb3f-116">Em vez disso, você pode usar o <xref:System.Threading.Tasks.Task.Factory%2A?displayProperty=nameWithType> propriedade, que retorna um objeto de fábrica que usa valores padrão.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-116">Instead, you can use the <xref:System.Threading.Tasks.Task.Factory%2A?displayProperty=nameWithType> property, which returns a factory object that uses default values.</span></span> <span data-ttu-id="0eb3f-117">Em seguida, você pode chamar seus métodos para iniciar novas tarefas ou definir continuações de tarefa.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-117">You can then call its methods to start new tasks or define task continuations.</span></span> <span data-ttu-id="0eb3f-118">Para obter uma ilustração, consulte o exemplo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-118">For an illustration, see the example.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0eb3f-119">O exemplo a seguir usa estático <xref:System.Threading.Tasks.Task.Factory%2A> propriedade para fazer duas chamadas para o <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-119">The following example uses the static <xref:System.Threading.Tasks.Task.Factory%2A> property to make two calls to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="0eb3f-120">A primeira preenche uma matriz com os nomes dos arquivos no diretório de Meus documentos do usuário, enquanto o segundo preenche uma matriz com os nomes dos subdiretórios do diretório MyDocuments do usuário.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-120">The first populates an array with the names of files in the user's MyDocuments directory, while the second populates an array with the names of subdirectories of the user's MyDocuments directory.</span></span> <span data-ttu-id="0eb3f-121">Em seguida, ele chama o <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%29?displayProperty=nameWithType> método, que exibe informações sobre o número de arquivos e diretórios em duas matrizes depois que as duas primeiras tarefas sejam completadas.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-121">It then calls the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%29?displayProperty=nameWithType> method, which displays information about the number of files and directories in the two arrays after the first two tasks have completed execution.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Factory#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.factory/cs/factory1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.Factory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.factory/vb/factory1.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="0eb3f-122">Todos os membros públicos e protegidos da <see cref="T:System.Threading.Tasks.TaskFactory" /> são thread-safe e podem ser usados simultaneamente de vários threads.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-122">All public and protected members of <see cref="T:System.Threading.Tasks.TaskFactory" /> are thread-safe and may be used concurrently from multiple threads.</span></span></threadsafe>
    <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-123">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-123">Task Parallel Library (TPL)</span></span></related>
    <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/Samples-for-Parallel-b4b76364"><span data-ttu-id="0eb3f-124">Exemplos de programação paralela com o .NET Framework</span><span class="sxs-lookup"><span data-stu-id="0eb3f-124">Samples for Parallel Programming with the .NET Framework</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0eb3f-125">Inicializa uma nova instância da classe <see cref="T:System.Threading.Tasks.TaskFactory" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-125">Initializes a new instance of the <see cref="T:System.Threading.Tasks.TaskFactory" /> class.</span></span></summary>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-126">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-126">Task Parallel Library (TPL)</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskFactory ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TaskFactory();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0eb3f-127">Inicializa uma instância de <see cref="T:System.Threading.Tasks.TaskFactory" /> com a configuração padrão.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-127">Initializes a <see cref="T:System.Threading.Tasks.TaskFactory" /> instance with the default configuration.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eb3f-128">Este construtor cria um <xref:System.Threading.Tasks.TaskFactory> instância com uma configuração padrão.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-128">This constructor creates a <xref:System.Threading.Tasks.TaskFactory> instance with a default configuration.</span></span> <span data-ttu-id="0eb3f-129">O <xref:System.Threading.Tasks.TaskCreationOptions> propriedade é inicializada para <xref:System.Threading.Tasks.TaskCreationOptions.None>, o <xref:System.Threading.Tasks.TaskContinuationOptions> propriedade é inicializada para <xref:System.Threading.Tasks.TaskContinuationOptions.None>e o <xref:System.Threading.Tasks.TaskScheduler> propriedade é inicializada para o Agendador atual (consulte <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span><span class="sxs-lookup"><span data-stu-id="0eb3f-129">The <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-130">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-130">Task Parallel Library (TPL)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskFactory (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TaskFactory(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.TaskFactory : System.Threading.CancellationToken -&gt; System.Threading.Tasks.TaskFactory" Usage="new System.Threading.Tasks.TaskFactory cancellationToken" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"><span data-ttu-id="0eb3f-131">O <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> que será atribuído às tarefas criadas por este <see cref="T:System.Threading.Tasks.TaskFactory" />, a menos que outro CancellationToken seja especificado explicitamente ao chamar os métodos de fábrica.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-131">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to tasks created by this <see cref="T:System.Threading.Tasks.TaskFactory" /> unless another CancellationToken is explicitly specified while calling the factory methods.</span></span></param>
        <summary><span data-ttu-id="0eb3f-132">Inicializa uma instância <see cref="T:System.Threading.Tasks.TaskFactory" /> com a configuração especificada.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-132">Initializes a <see cref="T:System.Threading.Tasks.TaskFactory" /> instance with the specified configuration.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eb3f-133">Este construtor cria um <xref:System.Threading.Tasks.TaskFactory> instância com uma configuração padrão.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-133">This constructor creates a <xref:System.Threading.Tasks.TaskFactory> instance with a default configuration.</span></span> <span data-ttu-id="0eb3f-134">O <xref:System.Threading.Tasks.TaskCreationOptions> propriedade é inicializada para <xref:System.Threading.Tasks.TaskCreationOptions.None>, o <xref:System.Threading.Tasks.TaskContinuationOptions> propriedade é inicializada para <xref:System.Threading.Tasks.TaskContinuationOptions.None>e o <xref:System.Threading.Tasks.TaskScheduler> propriedade é inicializada para o Agendador atual (consulte <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span><span class="sxs-lookup"><span data-stu-id="0eb3f-134">The <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-135">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-135">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="0eb3f-136">Cancelamento</span><span class="sxs-lookup"><span data-stu-id="0eb3f-136">Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskFactory (System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (scheduler As TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TaskFactory(System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.TaskFactory : System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.TaskFactory" Usage="new System.Threading.Tasks.TaskFactory scheduler" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="scheduler"><span data-ttu-id="0eb3f-137">O <see cref="T:System.Threading.Tasks.TaskScheduler" /> a ser usado para agendar tarefas criadas com esse TaskFactory.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-137">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to use to schedule any tasks created with this TaskFactory.</span></span> <span data-ttu-id="0eb3f-138">Um valor nulo indica que o TaskScheduler atual deve ser usado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-138">A null value indicates that the current TaskScheduler should be used.</span></span></param>
        <summary><span data-ttu-id="0eb3f-139">Inicializa uma instância <see cref="T:System.Threading.Tasks.TaskFactory" /> com a configuração especificada.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-139">Initializes a <see cref="T:System.Threading.Tasks.TaskFactory" /> instance with the specified configuration.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eb3f-140">Com esse construtor, o <xref:System.Threading.Tasks.TaskCreationOptions> propriedade é inicializada para <xref:System.Threading.Tasks.TaskCreationOptions.None>, o <xref:System.Threading.Tasks.TaskContinuationOptions> propriedade é inicializada para <xref:System.Threading.Tasks.TaskContinuationOptions.None>e o <xref:System.Threading.Tasks.TaskScheduler> propriedade é inicializada para `scheduler`, a menos que ele for nulo, caso em que o propriedade é inicializada para o Agendador atual (consulte <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span><span class="sxs-lookup"><span data-stu-id="0eb3f-140">With this constructor, the <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to `scheduler`, unless it's null, in which case the property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.Tasks.TaskScheduler" />
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-141">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-141">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="0eb3f-142">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="0eb3f-142">Chaining Tasks by Using Continuation Tasks</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskFactory (System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (creationOptions As TaskCreationOptions, continuationOptions As TaskContinuationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TaskFactory(System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.TaskFactory : System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.TaskFactory" Usage="new System.Threading.Tasks.TaskFactory (creationOptions, continuationOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <param name="creationOptions"><span data-ttu-id="0eb3f-143">O <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> padrão a ser usado ao criar tarefas com essa TaskFactory.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-143">The default <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> to use when creating tasks with this TaskFactory.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="0eb3f-144">O <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> padrão a ser usado ao criar tarefas de continuação com essa TaskFactory.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-144">The default <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> to use when creating continuation tasks with this TaskFactory.</span></span></param>
        <summary><span data-ttu-id="0eb3f-145">Inicializa uma instância <see cref="T:System.Threading.Tasks.TaskFactory" /> com a configuração especificada.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-145">Initializes a <see cref="T:System.Threading.Tasks.TaskFactory" /> instance with the specified configuration.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eb3f-146">Com esse construtor, o <xref:System.Threading.Tasks.TaskCreationOptions> propriedade é inicializada para `creationOptions`, o <xref:System.Threading.Tasks.TaskContinuationOptions> propriedade é inicializada para `continuationOptions`e o <xref:System.Threading.Tasks.TaskScheduler> propriedade é inicializada para o Agendador atual (consulte <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span><span class="sxs-lookup"><span data-stu-id="0eb3f-146">With this constructor, the <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to `creationOptions`, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to `continuationOptions`, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0eb3f-147">O argumento <paramref name="creationOptions" /> especifica um valor <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> inválido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-147">The <paramref name="creationOptions" /> argument specifies an invalid <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> value.</span></span> <span data-ttu-id="0eb3f-148">Para obter mais informações, consulte os Comentários sobre <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-148">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span></span>  
  
<span data-ttu-id="0eb3f-149">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-149">-or-</span></span> 
<span data-ttu-id="0eb3f-150">O argumento <paramref name="continuationOptions" /> especifica um valor inválido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-150">The <paramref name="continuationOptions" /> argument specifies an invalid value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-151">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-151">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="0eb3f-152">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="0eb3f-152">Chaining Tasks by Using Continuation Tasks</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskFactory (System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TaskFactory(System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.TaskFactory : System.Threading.CancellationToken * System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.TaskFactory" Usage="new System.Threading.Tasks.TaskFactory (cancellationToken, creationOptions, continuationOptions, scheduler)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"><span data-ttu-id="0eb3f-153">O padrão <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> que serão atribuídos às tarefas criadas por este <see cref="T:System.Threading.Tasks.TaskFactory" />, a menos que outro CancellationToken seja especificado explicitamente ao chamar os métodos de fábrica.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-153">The default <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to tasks created by this <see cref="T:System.Threading.Tasks.TaskFactory" /> unless another CancellationToken is explicitly specified while calling the factory methods.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="0eb3f-154">O <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> padrão a ser usado ao criar tarefas com essa TaskFactory.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-154">The default <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> to use when creating tasks with this TaskFactory.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="0eb3f-155">O <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> padrão a ser usado ao criar tarefas de continuação com essa TaskFactory.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-155">The default <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> to use when creating continuation tasks with this TaskFactory.</span></span></param>
        <param name="scheduler"><span data-ttu-id="0eb3f-156">O <see cref="T:System.Threading.Tasks.TaskScheduler" /> padrão a ser usado para agendar as Tasks criadas com esta TaskFactory.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-156">The default <see cref="T:System.Threading.Tasks.TaskScheduler" /> to use to schedule any Tasks created with this TaskFactory.</span></span> <span data-ttu-id="0eb3f-157">Um valor nulo indica que o TaskScheduler.Current deve ser usado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-157">A null value indicates that TaskScheduler.Current should be used.</span></span></param>
        <summary><span data-ttu-id="0eb3f-158">Inicializa uma instância <see cref="T:System.Threading.Tasks.TaskFactory" /> com a configuração especificada.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-158">Initializes a <see cref="T:System.Threading.Tasks.TaskFactory" /> instance with the specified configuration.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eb3f-159">Com esse construtor, o <xref:System.Threading.Tasks.TaskCreationOptions> propriedade é inicializada para `creationOptions`, o <xref:System.Threading.Tasks.TaskContinuationOptions> propriedade é inicializada para `continuationOptions`e o <xref:System.Threading.Tasks.TaskScheduler> propriedade é inicializada para `scheduler`, a menos que ele for nulo, caso em que o propriedade é inicializada para o Agendador atual (consulte <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span><span class="sxs-lookup"><span data-stu-id="0eb3f-159">With this constructor, the <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to `creationOptions`, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to `continuationOptions`, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to `scheduler`, unless it's null, in which case the property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0eb3f-160">O argumento <paramref name="creationOptions" /> especifica um valor <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> inválido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-160">The <paramref name="creationOptions" /> argument specifies an invalid <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> value.</span></span> <span data-ttu-id="0eb3f-161">Para obter mais informações, consulte os Comentários sobre <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-161">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span></span>  
  
<span data-ttu-id="0eb3f-162">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-162">-or-</span></span> 
<span data-ttu-id="0eb3f-163">O argumento <paramref name="continuationOptions" /> especifica um valor inválido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-163">The <paramref name="continuationOptions" /> argument specifies an invalid value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-164">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-164">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="0eb3f-165">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="0eb3f-165">Chaining Tasks by Using Continuation Tasks</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CancellationToken">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationToken CancellationToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.CancellationToken CancellationToken" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.TaskFactory.CancellationToken" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CancellationToken As CancellationToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::CancellationToken CancellationToken { System::Threading::CancellationToken get(); };" />
      <MemberSignature Language="F#" Value="member this.CancellationToken : System.Threading.CancellationToken" Usage="System.Threading.Tasks.TaskFactory.CancellationToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0eb3f-166">Obtém o token de cancelamento padrão desta fábrica de tarefas.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-166">Gets the default cancellation token for this task factory.</span></span></summary>
        <value><span data-ttu-id="0eb3f-167">O token de cancelamento de tarefas padrão desta fábrica de tarefas.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-167">The default task cancellation token for this task factory.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eb3f-168">Essa propriedade retorna o padrão <xref:System.Threading.CancellationToken> que será atribuído a todas as tarefas criadas por essa fábrica, a menos que outro <xref:System.Threading.CancellationToken> valor for especificado explicitamente durante a chamada para os métodos de fábrica.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-168">This property returns the default <xref:System.Threading.CancellationToken> that will be assigned to all tasks created by this factory, unless another <xref:System.Threading.CancellationToken> value is explicitly specified during the call to the factory methods.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-169">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-169">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="0eb3f-170">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="0eb3f-170">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="0eb3f-171">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="0eb3f-171">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinuationOptions">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.TaskContinuationOptions ContinuationOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.Tasks.TaskContinuationOptions ContinuationOptions" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.TaskFactory.ContinuationOptions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContinuationOptions As TaskContinuationOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Tasks::TaskContinuationOptions ContinuationOptions { System::Threading::Tasks::TaskContinuationOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.ContinuationOptions : System.Threading.Tasks.TaskContinuationOptions" Usage="System.Threading.Tasks.TaskFactory.ContinuationOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskContinuationOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0eb3f-172">Obtém as opções de continuação de tarefas padrão dessa fábrica de tarefas.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-172">Gets the default task continuation options for this task factory.</span></span></summary>
        <value><span data-ttu-id="0eb3f-173">As opções de continuação de tarefas padrão dessa fábrica de tarefas.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-173">The default task continuation options for this task factory.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eb3f-174">O valor da propriedade é usado para criar todas as tarefas de continuação, a menos que outras opções são especificadas explicitamente durante as chamadas para métodos dessa fábrica.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-174">The property value is used to create all continuation tasks, unless other options are explicitly specified during calls to this factory's methods.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-175">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-175">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="0eb3f-176">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="0eb3f-176">Chaining Tasks by Using Continuation Tasks</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ContinueWhenAll">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0eb3f-177">Cria uma tarefa de continuação que começa quando um conjunto de tarefas especificadas foi concluído.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-177">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/Samples-for-Parallel-b4b76364"><span data-ttu-id="0eb3f-178">Exemplos de programação paralela com o .NET Framework</span><span class="sxs-lookup"><span data-stu-id="0eb3f-178">Samples for Parallel Programming with the .NET Framework</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ContinueWhenAll">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Action&lt;System.Threading.Tasks.Task[]&gt; continuationAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAll(class System.Threading.Tasks.Task[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task[]&gt; continuationAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAll (tasks As Task(), continuationAction As Action(Of Task())) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Action&lt;cli::array &lt;System::Threading::Tasks::Task ^&gt; ^&gt; ^ continuationAction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task[] * Action&lt;System.Threading.Tasks.Task[]&gt; -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAll (tasks, continuationAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task[]&gt;" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="0eb3f-179">A matriz de tarefas da qual continuar.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-179">The array of tasks from which to continue.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="0eb3f-180">O delegado de ação a ser executado quando todas as tarefas na matriz do <paramref name="tasks" /> estiverem concluídas.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-180">The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <summary><span data-ttu-id="0eb3f-181">Cria uma tarefa de continuação que começa quando um conjunto de tarefas especificadas foi concluído.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-181">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-182">A nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-182">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eb3f-183">O <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> método executa o `continuationAction` delegado quando todas as tarefas no `tasks` matriz tiver concluído, independentemente de seu status de conclusão.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-183">The <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> method executes the `continuationAction` delegate when all tasks in the `tasks` array have completed, regardless of their completion status.</span></span>  
  
 <span data-ttu-id="0eb3f-184">As exceções geradas por tarefas no `tasks` matriz não estão disponíveis para a tarefa de continuação por meio de manipulação de exceção estruturada.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-184">Exceptions thrown by tasks in the `tasks` array are not available to the continuation task through structured exception handling.</span></span> <span data-ttu-id="0eb3f-185">Você pode determinar quais exceções foram lançadas, examinando os <xref:System.Threading.Tasks.Task.Exception%2A?displayProperty=nameWithType> propriedade de cada tarefa no `tasks` matriz.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-185">You can determine which exceptions were thrown by examining the <xref:System.Threading.Tasks.Task.Exception%2A?displayProperty=nameWithType> property of each task in the `tasks` array.</span></span> <span data-ttu-id="0eb3f-186">Para usar a estruturadas tratamento de exceções para manipular exceções lançadas por tarefas na `tasks` matriz, chame o <xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-186">To use structured exception handling to handle exceptions thrown by tasks in the `tasks` array, call the <xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0eb3f-187">O exemplo a seguir inicia tarefas separadas que usam uma expressão regular para contar o número de palavras em um conjunto de arquivos de texto.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-187">The following example launches separate tasks that use a regular expression to count the number of words in a set of text files.</span></span> <span data-ttu-id="0eb3f-188">O <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> método é usado para iniciar uma tarefa que exibe a contagem total de palavras quando todas as tarefas antecessoras forem concluídas.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-188">The <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> method is used to launch a task that displays the total word count when all the antecedent tasks have completed.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.ContinueWhenAll#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.continuewhenall/cs/continuewhenall1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.ContinueWhenAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.continuewhenall/vb/continuewhenall1.vb#1)]  
  
 <span data-ttu-id="0eb3f-189">A chamada para a tarefa de continuação <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> método não permitem manipular exceções lançadas por tarefas antecedentes, portanto, o exemplo examina a <xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType> propriedade de cada tarefa antecedente para determinar se a tarefa foi bem-sucedida.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-189">The call to the continuation task's <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> method does not allow it to handle exceptions thrown by the antecedent tasks, so the example examines the <xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType> property of each antecedent task to determine whether the task succeeded.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="0eb3f-190">Um elemento na matriz do <paramref name="tasks" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-190">An element in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-191">A matriz do <paramref name="tasks" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-191">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="0eb3f-192">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-192">-or-</span></span> 
<span data-ttu-id="0eb3f-193">O argumento <paramref name="continuationAction" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-193">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0eb3f-194">A matriz do <paramref name="tasks" /> está vazia ou contém um valor nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-194">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-195">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-195">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="0eb3f-196">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="0eb3f-196">Chaining Tasks by Using Continuation Tasks</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Action&lt;System.Threading.Tasks.Task[]&gt; continuationAction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAll(class System.Threading.Tasks.Task[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task[]&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Action&lt;cli::array &lt;System::Threading::Tasks::Task ^&gt; ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task[] * Action&lt;System.Threading.Tasks.Task[]&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAll (tasks, continuationAction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task[]&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="0eb3f-197">A matriz de tarefas da qual continuar.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-197">The array of tasks from which to continue.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="0eb3f-198">O delegado de ação a ser executado quando todas as tarefas na matriz do <paramref name="tasks" /> estiverem concluídas.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-198">The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="0eb3f-199">O token de cancelamento a ser atribuído à nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-199">The cancellation token to assign to the new continuation task.</span></span></param>
        <summary><span data-ttu-id="0eb3f-200">Cria uma tarefa de continuação que começa quando um conjunto de tarefas especificadas foi concluído.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-200">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-201">A nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-201">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eb3f-202">O [\], ação (tarefa\<xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D% 2CSystem.Threading.CancellationToken%29 > método executa o `continuationAction` delegado quando todas as tarefas no `tasks` matriz tiver concluído, independentemente de seu status de conclusão.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-202">The [\], Action(Task\<xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%2CSystem.Threading.CancellationToken%29> method executes the `continuationAction` delegate when all tasks in the `tasks` array have completed, regardless of their completion status.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0eb3f-203">O exemplo a seguir cria um token de cancelamento, ele passa para separar as tarefas que usam uma expressão regular para contar o número de palavras em um conjunto de arquivos de texto.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-203">The following example creates a cancellation token, which it passes to separate tasks that use a regular expression to count the number of words in a set of text files.</span></span> <span data-ttu-id="0eb3f-204">O token de cancelamento será definido se um arquivo não pode ser encontrado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-204">The cancellation token is set if a file cannot be found.</span></span> <span data-ttu-id="0eb3f-205">O [\], ação (tarefa\<XRef:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A > método é usado para iniciar uma tarefa que exibe a contagem total de palavras quando todas as tarefas antecessoras forem concluídas.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-205">The [\], Action(Task\<xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> method is used to launch a task that displays the total word count when all the antecedent tasks have completed.</span></span> <span data-ttu-id="0eb3f-206">Se o token de cancelamento for definido, que indica que uma ou mais tarefas tiverem sido canceladas, ele trata a <xref:System.AggregateException> exceção e exibe uma mensagem de erro.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-206">If the cancellation token is set, which indicates that one or more tasks have been cancelled, it handles the <xref:System.AggregateException> exception and displays an error message.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.ContinueWhenAll#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.continuewhenall/cs/continuewhenall2.cs#2)]
 [!code-vb[System.Threading.Tasks.Task.ContinueWhenAll#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.continuewhenall/vb/continuewhenall2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="0eb3f-207">Um elemento na matriz do <paramref name="tasks" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-207">An element in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="0eb3f-208">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-208">-or-</span></span> 
<span data-ttu-id="0eb3f-209">O <see cref="T:System.Threading.CancellationTokenSource" /> que criou <paramref name="cancellationToken" /> já foi descartado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-209">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-210">A matriz do <paramref name="tasks" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-210">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="0eb3f-211">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-211">-or-</span></span> 
<span data-ttu-id="0eb3f-212">O argumento <paramref name="continuationAction" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-212">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0eb3f-213">A matriz do <paramref name="tasks" /> está vazia ou contém um valor nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-213">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-214">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-214">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="0eb3f-215">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="0eb3f-215">Chaining Tasks by Using Continuation Tasks</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Action&lt;System.Threading.Tasks.Task[]&gt; continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAll(class System.Threading.Tasks.Task[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task[]&gt; continuationAction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAll (tasks As Task(), continuationAction As Action(Of Task()), continuationOptions As TaskContinuationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Action&lt;cli::array &lt;System::Threading::Tasks::Task ^&gt; ^&gt; ^ continuationAction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task[] * Action&lt;System.Threading.Tasks.Task[]&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAll (tasks, continuationAction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task[]&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="0eb3f-216">A matriz de tarefas da qual continuar.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-216">The array of tasks from which to continue.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="0eb3f-217">O delegado de ação a ser executado quando todas as tarefas na matriz do <paramref name="tasks" /> estiverem concluídas.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-217">The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="0eb3f-218">Uma combinação bit a bit dos valores de enumeração que controlam o comportamento da nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-218">A bitwise combination of the enumeration values that control the behavior of the new continuation task.</span></span> <span data-ttu-id="0eb3f-219">Não há suporte para os membros NotOn\* e OnlyOn\*.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-219">The NotOn\* and OnlyOn\* members are not supported.</span></span></param>
        <summary><span data-ttu-id="0eb3f-220">Cria uma tarefa de continuação que começa quando um conjunto de tarefas especificadas foi concluído.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-220">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-221">A nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-221">The new continuation task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="0eb3f-222">Um elemento na matriz do <paramref name="tasks" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-222">An element in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-223">A matriz do <paramref name="tasks" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-223">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="0eb3f-224">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-224">-or-</span></span> 
<span data-ttu-id="0eb3f-225">O argumento <paramref name="continuationAction" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-225">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0eb3f-226">O argumento <paramref name="continuationOptions" /> especifica um valor inválido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-226">The <paramref name="continuationOptions" /> argument specifies an invalid value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0eb3f-227">A matriz do <paramref name="tasks" /> está vazia ou contém um valor nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-227">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-228">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-228">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="0eb3f-229">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="0eb3f-229">Chaining Tasks by Using Continuation Tasks</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Action&lt;System.Threading.Tasks.Task[]&gt; continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAll(class System.Threading.Tasks.Task[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task[]&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Action&lt;cli::array &lt;System::Threading::Tasks::Task ^&gt; ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task[] * Action&lt;System.Threading.Tasks.Task[]&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAll (tasks, continuationAction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task[]&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="0eb3f-230">A matriz de tarefas da qual continuar.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-230">The array of tasks from which to continue.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="0eb3f-231">O delegado de ação a ser executado quando todas as tarefas na matriz do <paramref name="tasks" /> estiverem concluídas.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-231">The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="0eb3f-232">O token de cancelamento a ser atribuído à nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-232">The cancellation token to assign to the new continuation task.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="0eb3f-233">Uma combinação bit a bit dos valores de enumeração que controlam o comportamento da nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-233">A bitwise combination of the enumeration values that control the behavior of the new continuation task.</span></span></param>
        <param name="scheduler"><span data-ttu-id="0eb3f-234">O objeto que é usado para agendar a nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-234">The object that is used to schedule the new continuation task.</span></span></param>
        <summary><span data-ttu-id="0eb3f-235">Cria uma tarefa de continuação que começa quando um conjunto de tarefas especificadas foi concluído.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-235">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-236">A nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-236">The new continuation task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-237">A matriz do <paramref name="tasks" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-237">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="0eb3f-238">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-238">-or-</span></span> 
<span data-ttu-id="0eb3f-239">O argumento <paramref name="continuationAction" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-239">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="0eb3f-240">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-240">-or-</span></span> 
<span data-ttu-id="0eb3f-241">O argumento <paramref name="scheduler" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-241">The <paramref name="scheduler" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0eb3f-242">A matriz do <paramref name="tasks" /> está vazia ou contém um valor nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-242">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-243">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-243">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="0eb3f-244">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="0eb3f-244">Chaining Tasks by Using Continuation Tasks</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAll&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]&gt; continuationAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAll&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[]&gt; continuationAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAll(Of TAntecedentResult) (tasks As Task(Of TAntecedentResult)(), continuationAction As Action(Of Task(Of TAntecedentResult)())) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Action&lt;cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^&gt; ^ continuationAction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Action&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[]&gt; -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAll (tasks, continuationAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="0eb3f-245">O tipo do resultado da antecessora <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-245">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="0eb3f-246">A matriz de tarefas da qual continuar.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-246">The array of tasks from which to continue.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="0eb3f-247">O delegado de ação a ser executado quando todas as tarefas na matriz do <paramref name="tasks" /> estiverem concluídas.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-247">The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <summary><span data-ttu-id="0eb3f-248">Cria uma tarefa de continuação que começa quando um conjunto de tarefas especificadas foi concluído.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-248">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-249">A nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-249">The new continuation task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="0eb3f-250">Um elemento na matriz do <paramref name="tasks" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-250">An element in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-251">A matriz do <paramref name="tasks" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-251">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="0eb3f-252">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-252">-or-</span></span> 
<span data-ttu-id="0eb3f-253">O argumento <paramref name="continuationAction" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-253">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0eb3f-254">A matriz do <paramref name="tasks" /> está vazia ou contém um valor nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-254">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-255">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-255">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="0eb3f-256">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="0eb3f-256">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="0eb3f-257">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="0eb3f-257">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAll&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]&gt; continuationAction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAll&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[]&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Action&lt;cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Action&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[]&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAll (tasks, continuationAction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="0eb3f-258">O tipo do resultado da antecessora <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-258">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="0eb3f-259">A matriz de tarefas da qual continuar.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-259">The array of tasks from which to continue.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="0eb3f-260">O delegado de ação a ser executado quando todas as tarefas na matriz do <paramref name="tasks" /> estiverem concluídas.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-260">The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="0eb3f-261">O token de cancelamento a ser atribuído à nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-261">The cancellation token to assign to the new continuation task.</span></span></param>
        <summary><span data-ttu-id="0eb3f-262">Cria uma tarefa de continuação que começa quando um conjunto de tarefas especificadas foi concluído.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-262">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-263">A nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-263">The new continuation task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="0eb3f-264">Um elemento na matriz do <paramref name="tasks" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-264">An element in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="0eb3f-265">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-265">-or-</span></span> 
<span data-ttu-id="0eb3f-266">O <see cref="T:System.Threading.CancellationTokenSource" /> que criou <paramref name="cancellationToken" /> já foi descartado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-266">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-267">A matriz do <paramref name="tasks" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-267">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="0eb3f-268">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-268">-or-</span></span> 
<span data-ttu-id="0eb3f-269">O argumento <paramref name="continuationAction" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-269">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0eb3f-270">A matriz do <paramref name="tasks" /> está vazia ou contém um valor nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-270">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-271">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-271">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="0eb3f-272">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="0eb3f-272">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="0eb3f-273">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="0eb3f-273">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAll&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]&gt; continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAll&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[]&gt; continuationAction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAll(Of TAntecedentResult) (tasks As Task(Of TAntecedentResult)(), continuationAction As Action(Of Task(Of TAntecedentResult)()), continuationOptions As TaskContinuationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Action&lt;cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^&gt; ^ continuationAction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Action&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[]&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAll (tasks, continuationAction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="0eb3f-274">O tipo do resultado da antecessora <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-274">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="0eb3f-275">A matriz de tarefas da qual continuar.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-275">The array of tasks from which to continue.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="0eb3f-276">O delegado de ação a ser executado quando todas as tarefas na matriz do <paramref name="tasks" /> estiverem concluídas.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-276">The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="0eb3f-277">Uma combinação bit a bit dos valores de enumeração que controlam o comportamento da nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-277">A bitwise combination of the enumeration values that control the behavior of the new continuation task.</span></span> <span data-ttu-id="0eb3f-278">Não há suporte para os membros NotOn\* e OnlyOn\*.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-278">The NotOn\* and OnlyOn\* members are not supported.</span></span></param>
        <summary><span data-ttu-id="0eb3f-279">Cria uma tarefa de continuação que começa quando um conjunto de tarefas especificadas foi concluído.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-279">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-280">A nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-280">The new continuation task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="0eb3f-281">Um elemento na matriz do <paramref name="tasks" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-281">An element in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-282">A matriz do <paramref name="tasks" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-282">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="0eb3f-283">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-283">-or-</span></span> 
<span data-ttu-id="0eb3f-284">O argumento <paramref name="continuationAction" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-284">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0eb3f-285">O argumento <paramref name="continuationOptions" /> especifica um valor inválido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-285">The <paramref name="continuationOptions" /> argument specifies an invalid value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0eb3f-286">A matriz do <paramref name="tasks" /> está vazia ou contém um valor nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-286">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-287">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-287">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="0eb3f-288">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="0eb3f-288">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="0eb3f-289">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="0eb3f-289">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAll&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]&gt; continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAll&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[]&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Action&lt;cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Action&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[]&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAll (tasks, continuationAction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="0eb3f-290">O tipo do resultado da antecessora <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-290">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="0eb3f-291">A matriz de tarefas da qual continuar.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-291">The array of tasks from which to continue.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="0eb3f-292">O delegado de ação a ser executado quando todas as tarefas na matriz do <paramref name="tasks" /> estiverem concluídas.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-292">The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="0eb3f-293">O token de cancelamento a ser atribuído à nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-293">The cancellation token to assign to the new continuation task.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="0eb3f-294">Uma combinação bit a bit dos valores de enumeração que controlam o comportamento da nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-294">A bitwise combination of the enumeration values that control the behavior of the new continuation task.</span></span> <span data-ttu-id="0eb3f-295">Não há suporte para os membros NotOn\* e OnlyOn\*.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-295">The NotOn\* and OnlyOn\* members are not supported.</span></span></param>
        <param name="scheduler"><span data-ttu-id="0eb3f-296">O objeto que é usado para agendar a nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-296">The object that is used to schedule the new continuation task.</span></span></param>
        <summary><span data-ttu-id="0eb3f-297">Cria uma tarefa de continuação que começa quando um conjunto de tarefas especificadas foi concluído.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-297">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-298">A nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-298">The new continuation task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-299">A matriz do <paramref name="tasks" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-299">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="0eb3f-300">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-300">-or-</span></span> 
<span data-ttu-id="0eb3f-301">O argumento <paramref name="continuationAction" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-301">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="0eb3f-302">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-302">-or-</span></span> 
<span data-ttu-id="0eb3f-303">O argumento <paramref name="scheduler" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-303">The <paramref name="scheduler" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0eb3f-304">A matriz do <paramref name="tasks" /> está vazia ou contém um valor nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-304">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-305">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-305">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="0eb3f-306">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="0eb3f-306">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="0eb3f-307">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="0eb3f-307">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TResult&gt; (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task[],TResult&gt; continuationFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAll&lt;TResult&gt;(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task[], !!TResult&gt; continuationFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAll(Of TResult) (tasks As Task(), continuationFunction As Func(Of Task(), TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task ^&gt; ^, TResult&gt; ^ continuationFunction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task[], 'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task[],TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="0eb3f-308">O tipo de resultado retornado pelo <paramref name="continuationFunction" /> delegar e associado com a tarefa criada.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-308">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created task.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="0eb3f-309">A matriz de tarefas da qual continuar.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-309">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="0eb3f-310">O delegado de função a ser executado de forma assíncrona quando todas as tarefas na matriz <paramref name="tasks" /> forem concluídas.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-310">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <summary><span data-ttu-id="0eb3f-311">Cria uma tarefa de continuação que começa quando um conjunto de tarefas especificadas foi concluído.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-311">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-312">A nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-312">The new continuation task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="0eb3f-313">Um elemento na matriz do <paramref name="tasks" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-313">An element in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-314">A matriz do <paramref name="tasks" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-314">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="0eb3f-315">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-315">-or-</span></span> 
<span data-ttu-id="0eb3f-316">O argumento <paramref name="continuationFunction" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-316">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0eb3f-317">A matriz do <paramref name="tasks" /> está vazia ou contém um valor nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-317">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-318">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-318">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="0eb3f-319">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="0eb3f-319">Chaining Tasks by Using Continuation Tasks</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TResult&gt; (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task[],TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAll&lt;TResult&gt;(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task[], !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task ^&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task[], 'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task[],TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="0eb3f-320">O tipo de resultado retornado pelo <paramref name="continuationFunction" /> delegar e associado com a tarefa criada.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-320">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created task.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="0eb3f-321">A matriz de tarefas da qual continuar.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-321">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="0eb3f-322">O delegado de função a ser executado de forma assíncrona quando todas as tarefas na matriz <paramref name="tasks" /> forem concluídas.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-322">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="0eb3f-323">O token de cancelamento a ser atribuído à nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-323">The cancellation token to assign to the new continuation task.</span></span></param>
        <summary><span data-ttu-id="0eb3f-324">Cria uma tarefa de continuação que começa quando um conjunto de tarefas especificadas foi concluído.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-324">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-325">A nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-325">The new continuation task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="0eb3f-326">Um elemento na matriz do <paramref name="tasks" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-326">An element in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="0eb3f-327">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-327">-or-</span></span> 
<span data-ttu-id="0eb3f-328">O <see cref="T:System.Threading.CancellationTokenSource" /> que criou <paramref name="cancellationToken" /> já foi descartado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-328">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-329">A matriz do <paramref name="tasks" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-329">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="0eb3f-330">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-330">-or-</span></span> 
<span data-ttu-id="0eb3f-331">O argumento <paramref name="continuationFunction" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-331">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0eb3f-332">A matriz do <paramref name="tasks" /> está vazia ou contém um valor nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-332">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-333">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-333">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="0eb3f-334">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="0eb3f-334">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="0eb3f-335">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="0eb3f-335">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TResult&gt; (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task[],TResult&gt; continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAll&lt;TResult&gt;(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task[], !!TResult&gt; continuationFunction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAll(Of TResult) (tasks As Task(), continuationFunction As Func(Of Task(), TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task ^&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task[], 'Result&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task[],TResult&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="0eb3f-336">O tipo de resultado retornado pelo <paramref name="continuationFunction" /> delegar e associado com a tarefa criada.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-336">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created task.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="0eb3f-337">A matriz de tarefas da qual continuar.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-337">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="0eb3f-338">O delegado de função a ser executado de forma assíncrona quando todas as tarefas na matriz <paramref name="tasks" /> forem concluídas.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-338">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="0eb3f-339">Uma combinação bit a bit dos valores de enumeração que controlam o comportamento da nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-339">A bitwise combination of the enumeration values that control the behavior of the new continuation task.</span></span> <span data-ttu-id="0eb3f-340">Não há suporte para os membros NotOn\* e OnlyOn\*.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-340">The NotOn\* and OnlyOn\* members are not supported.</span></span></param>
        <summary><span data-ttu-id="0eb3f-341">Cria uma tarefa de continuação que começa quando um conjunto de tarefas especificadas foi concluído.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-341">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-342">A nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-342">The new continuation task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="0eb3f-343">Um elemento na matriz do <paramref name="tasks" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-343">An element in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-344">A matriz do <paramref name="tasks" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-344">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="0eb3f-345">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-345">-or-</span></span> 
<span data-ttu-id="0eb3f-346">O argumento <paramref name="continuationFunction" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-346">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0eb3f-347">O argumento <paramref name="continuationOptions" /> especifica um valor inválido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-347">The <paramref name="continuationOptions" /> argument specifies an invalid value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0eb3f-348">A matriz do <paramref name="tasks" /> está vazia ou contém um valor nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-348">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-349">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-349">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="0eb3f-350">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="0eb3f-350">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="0eb3f-351">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="0eb3f-351">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TResult&gt; (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task[],TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAll&lt;TResult&gt;(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task[], !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task ^&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task[], 'Result&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task[],TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="0eb3f-352">O tipo de resultado retornado pelo <paramref name="continuationFunction" /> delegar e associado com a tarefa criada.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-352">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created task.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="0eb3f-353">A matriz de tarefas da qual continuar.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-353">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="0eb3f-354">O delegado de função a ser executado de forma assíncrona quando todas as tarefas na matriz <paramref name="tasks" /> forem concluídas.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-354">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="0eb3f-355">O token de cancelamento a ser atribuído à nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-355">The cancellation token to assign to the new continuation task.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="0eb3f-356">Uma combinação bit a bit dos valores de enumeração que controlam o comportamento da nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-356">A bitwise combination of the enumeration values that control the behavior of the new continuation task.</span></span> <span data-ttu-id="0eb3f-357">Não há suporte para os membros NotOn\* e OnlyOn\*.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-357">The NotOn\* and OnlyOn\* members are not supported.</span></span></param>
        <param name="scheduler"><span data-ttu-id="0eb3f-358">O objeto que é usado para agendar a nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-358">The object that is used to schedule the new continuation task.</span></span></param>
        <summary><span data-ttu-id="0eb3f-359">Cria uma tarefa de continuação que começa quando um conjunto de tarefas especificadas foi concluído.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-359">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-360">A nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-360">The new continuation task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-361">A matriz do <paramref name="tasks" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-361">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="0eb3f-362">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-362">-or-</span></span> 
<span data-ttu-id="0eb3f-363">O argumento <paramref name="continuationFunction" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-363">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="0eb3f-364">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-364">-or-</span></span> 
<span data-ttu-id="0eb3f-365">O argumento <paramref name="scheduler" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-365">The <paramref name="scheduler" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0eb3f-366">A matriz do <paramref name="tasks" /> está vazia ou contém um valor nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-366">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-367">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-367">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="0eb3f-368">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="0eb3f-368">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="0eb3f-369">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="0eb3f-369">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TAntecedentResult,TResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt; continuationFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAll&lt;TAntecedentResult, TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[], !!TResult&gt; continuationFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAll(Of TAntecedentResult, TResult) (tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult)(), TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^, TResult&gt; ^ continuationFunction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[], 'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="0eb3f-370">O tipo do resultado da antecessora <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-370">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="0eb3f-371">O tipo de resultado retornado pelo <paramref name="continuationFunction" /> delegar e associado com a tarefa criada.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-371">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created task.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="0eb3f-372">A matriz de tarefas da qual continuar.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-372">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="0eb3f-373">O delegado de função a ser executado de forma assíncrona quando todas as tarefas na matriz <paramref name="tasks" /> forem concluídas.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-373">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <summary><span data-ttu-id="0eb3f-374">Cria uma tarefa de continuação que começa quando um conjunto de tarefas especificadas foi concluído.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-374">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-375">A nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-375">The new continuation task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="0eb3f-376">Um elemento na matriz do <paramref name="tasks" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-376">An element in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-377">A matriz do <paramref name="tasks" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-377">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="0eb3f-378">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-378">-or-</span></span> 
<span data-ttu-id="0eb3f-379">O argumento <paramref name="continuationFunction" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-379">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0eb3f-380">A matriz do <paramref name="tasks" /> está vazia ou contém um valor nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-380">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-381">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-381">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="0eb3f-382">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="0eb3f-382">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="0eb3f-383">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="0eb3f-383">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TAntecedentResult,TResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAll&lt;TAntecedentResult, TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[], !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[], 'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="0eb3f-384">O tipo do resultado da antecessora <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-384">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="0eb3f-385">O tipo de resultado retornado pelo <paramref name="continuationFunction" /> delegar e associado com a tarefa criada.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-385">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created task.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="0eb3f-386">A matriz de tarefas da qual continuar.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-386">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="0eb3f-387">O delegado de função a ser executado de forma assíncrona quando todas as tarefas na matriz <paramref name="tasks" /> forem concluídas.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-387">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="0eb3f-388">O token de cancelamento a ser atribuído à nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-388">The cancellation token to assign to the new continuation task.</span></span></param>
        <summary><span data-ttu-id="0eb3f-389">Cria uma tarefa de continuação que começa quando um conjunto de tarefas especificadas foi concluído.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-389">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-390">A nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-390">The new continuation task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="0eb3f-391">Um elemento na matriz do <paramref name="tasks" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-391">An element in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="0eb3f-392">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-392">-or-</span></span> 
<span data-ttu-id="0eb3f-393">O <see cref="T:System.Threading.CancellationTokenSource" /> que criou <paramref name="cancellationToken" /> já foi descartado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-393">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-394">A matriz do <paramref name="tasks" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-394">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="0eb3f-395">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-395">-or-</span></span> 
<span data-ttu-id="0eb3f-396">O argumento <paramref name="continuationFunction" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-396">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0eb3f-397">A matriz do <paramref name="tasks" /> está vazia ou contém um valor nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-397">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-398">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-398">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="0eb3f-399">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="0eb3f-399">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="0eb3f-400">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="0eb3f-400">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TAntecedentResult,TResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt; continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAll&lt;TAntecedentResult, TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[], !!TResult&gt; continuationFunction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAll(Of TAntecedentResult, TResult) (tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult)(), TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[], 'Result&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="0eb3f-401">O tipo do resultado da antecessora <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-401">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="0eb3f-402">O tipo de resultado retornado pelo <paramref name="continuationFunction" /> delegar e associado com a tarefa criada.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-402">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created task.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="0eb3f-403">A matriz de tarefas da qual continuar.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-403">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="0eb3f-404">O delegado de função a ser executado de forma assíncrona quando todas as tarefas na matriz <paramref name="tasks" /> forem concluídas.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-404">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="0eb3f-405">Uma combinação bit a bit dos valores de enumeração que controlam o comportamento da nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-405">A bitwise combination of the enumeration values that control the behavior of the new continuation task.</span></span> <span data-ttu-id="0eb3f-406">Não há suporte para os membros NotOn\* e OnlyOn\*.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-406">The NotOn\* and OnlyOn\* members are not supported.</span></span></param>
        <summary><span data-ttu-id="0eb3f-407">Cria uma tarefa de continuação que começa quando um conjunto de tarefas especificadas foi concluído.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-407">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-408">A nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-408">The new continuation task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="0eb3f-409">Um elemento na matriz do <paramref name="tasks" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-409">An element in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-410">A matriz do <paramref name="tasks" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-410">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="0eb3f-411">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-411">-or-</span></span> 
<span data-ttu-id="0eb3f-412">O argumento <paramref name="continuationFunction" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-412">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0eb3f-413">O argumento <paramref name="continuationOptions" /> especifica um valor inválido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-413">The <paramref name="continuationOptions" /> argument specifies an invalid value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0eb3f-414">A matriz do <paramref name="tasks" /> está vazia ou contém um valor nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-414">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-415">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-415">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="0eb3f-416">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="0eb3f-416">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="0eb3f-417">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="0eb3f-417">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TAntecedentResult,TResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAll&lt;TAntecedentResult, TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[], !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[], 'Result&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="0eb3f-418">O tipo do resultado da antecessora <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-418">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="0eb3f-419">O tipo de resultado retornado pelo <paramref name="continuationFunction" /> delegar e associado com a tarefa criada.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-419">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created task.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="0eb3f-420">A matriz de tarefas da qual continuar.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-420">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="0eb3f-421">O delegado de função a ser executado de forma assíncrona quando todas as tarefas na matriz <paramref name="tasks" /> forem concluídas.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-421">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="0eb3f-422">O token de cancelamento a ser atribuído à nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-422">The cancellation token to assign to the new continuation task.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="0eb3f-423">Uma combinação bit a bit dos valores de enumeração que controlam o comportamento da nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-423">A bitwise combination of the enumeration values that control the behavior of the new continuation task.</span></span> <span data-ttu-id="0eb3f-424">Não há suporte para os membros NotOn\* e OnlyOn\*.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-424">The NotOn\* and OnlyOn\* members are not supported.</span></span></param>
        <param name="scheduler"><span data-ttu-id="0eb3f-425">O objeto que é usado para agendar a nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-425">The object that is used to schedule the new continuation task.</span></span></param>
        <summary><span data-ttu-id="0eb3f-426">Cria uma tarefa de continuação que começa quando um conjunto de tarefas especificadas foi concluído.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-426">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-427">A nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-427">The new continuation task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-428">A matriz do <paramref name="tasks" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-428">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="0eb3f-429">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-429">-or-</span></span> 
<span data-ttu-id="0eb3f-430">O argumento <paramref name="continuationFunction" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-430">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="0eb3f-431">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-431">-or-</span></span> 
<span data-ttu-id="0eb3f-432">O argumento <paramref name="scheduler" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-432">The <paramref name="scheduler" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0eb3f-433">A matriz do <paramref name="tasks" /> está vazia ou contém um valor nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-433">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0eb3f-434">O argumento <paramref name="continuationOptions" /> especifica um valor inválido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-434">The <paramref name="continuationOptions" /> argument specifies an invalid value.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="0eb3f-435">Um elemento na matriz do <paramref name="tasks" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-435">An element in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="0eb3f-436">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-436">-or-</span></span> 
<span data-ttu-id="0eb3f-437">O <see cref="T:System.Threading.CancellationTokenSource" /> que criou <paramref name="cancellationToken" /> já foi descartado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-437">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-438">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-438">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="0eb3f-439">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="0eb3f-439">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="0eb3f-440">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="0eb3f-440">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ContinueWhenAny">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0eb3f-441">Cria um <see cref="T:System.Threading.Tasks.Task" /> de continuação que será iniciado mediante a conclusão de qualquer Tarefa no conjunto fornecido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-441">Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-442">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-442">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="0eb3f-443">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="0eb3f-443">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="0eb3f-444">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="0eb3f-444">Task Cancellation</span></span></related>
        <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/Samples-for-Parallel-b4b76364"><span data-ttu-id="0eb3f-445">Exemplos de programação paralela com o .NET Framework</span><span class="sxs-lookup"><span data-stu-id="0eb3f-445">Samples for Parallel Programming with the .NET Framework</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ContinueWhenAny">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Action&lt;System.Threading.Tasks.Task&gt; continuationAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAny(class System.Threading.Tasks.Task[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAny (tasks As Task(), continuationAction As Action(Of Task)) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Action&lt;System::Threading::Tasks::Task ^&gt; ^ continuationAction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task[] * Action&lt;System.Threading.Tasks.Task&gt; -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAny (tasks, continuationAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="0eb3f-446">A matriz de tarefas da qual continuar quando uma tarefa for concluída.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-446">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="0eb3f-447">O delegado de ação a ser executado quando uma tarefa na matriz <paramref name="tasks" /> for concluída.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-447">The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <summary><span data-ttu-id="0eb3f-448">Cria um <see cref="T:System.Threading.Tasks.Task" /> de continuação que será iniciado mediante a conclusão de qualquer Tarefa no conjunto fornecido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-448">Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-449">O novo <see cref="T:System.Threading.Tasks.Task" /> de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-449">The new continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0eb3f-450">O exemplo a seguir mostra como usar `ContinueWhenAny` e `ContinueWhenAll`:</span><span class="sxs-lookup"><span data-stu-id="0eb3f-450">The following example shows how to use `ContinueWhenAny` and `ContinueWhenAll`:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#05](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/continuewhenmulti.cs#05)]
 [!code-vb[System.Threading.Tasks.Task#05](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/continuewhenmulti.vb#05)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="0eb3f-451">Um dos elementos na matriz <paramref name="tasks" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-451">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-452">A matriz do <paramref name="tasks" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-452">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="0eb3f-453">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-453">-or-</span></span> 
<span data-ttu-id="0eb3f-454">O argumento <paramref name="continuationAction" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-454">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0eb3f-455">A matriz <paramref name="tasks" /> contém um valor <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-455">The <paramref name="tasks" /> array contains a <see langword="null" /> value.</span></span>  
  
<span data-ttu-id="0eb3f-456">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-456">-or-</span></span> 
<span data-ttu-id="0eb3f-457">A matriz <paramref name="tasks" /> está vazia.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-457">The <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-458">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-458">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="0eb3f-459">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="0eb3f-459">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="0eb3f-460">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="0eb3f-460">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Action&lt;System.Threading.Tasks.Task&gt; continuationAction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAny(class System.Threading.Tasks.Task[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Action&lt;System::Threading::Tasks::Task ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task[] * Action&lt;System.Threading.Tasks.Task&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAny (tasks, continuationAction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="0eb3f-461">A matriz de tarefas da qual continuar quando uma tarefa for concluída.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-461">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="0eb3f-462">O delegado de ação a ser executado quando uma tarefa na matriz <paramref name="tasks" /> for concluída.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-462">The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="0eb3f-463">O <see cref="T:System.Threading.CancellationToken" /> que será atribuído à nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-463">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span></span></param>
        <summary><span data-ttu-id="0eb3f-464">Cria um <see cref="T:System.Threading.Tasks.Task" /> de continuação que será iniciado mediante a conclusão de qualquer Tarefa no conjunto fornecido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-464">Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-465">O novo <see cref="T:System.Threading.Tasks.Task" /> de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-465">The new continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="0eb3f-466">Um dos elementos na matriz <paramref name="tasks" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-466">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="0eb3f-467">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-467">-or-</span></span> 
 <span data-ttu-id="0eb3f-468"><paramref name="cancellationToken" /> já foi descartado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-468"><paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-469">A matriz do <paramref name="tasks" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-469">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="0eb3f-470">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-470">-or-</span></span> 
<span data-ttu-id="0eb3f-471">O argumento <paramref name="continuationAction" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-471">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0eb3f-472">A matriz <paramref name="tasks" /> contém um valor <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-472">The <paramref name="tasks" /> array contains a <see langword="null" /> value.</span></span>  
  
<span data-ttu-id="0eb3f-473">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-473">-or-</span></span> 
<span data-ttu-id="0eb3f-474">A matriz <paramref name="tasks" /> está vazia.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-474">The <paramref name="tasks" /> array is empty .</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-475">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-475">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="0eb3f-476">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="0eb3f-476">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="0eb3f-477">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="0eb3f-477">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Action&lt;System.Threading.Tasks.Task&gt; continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAny(class System.Threading.Tasks.Task[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAny (tasks As Task(), continuationAction As Action(Of Task), continuationOptions As TaskContinuationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Action&lt;System::Threading::Tasks::Task ^&gt; ^ continuationAction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task[] * Action&lt;System.Threading.Tasks.Task&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAny (tasks, continuationAction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="0eb3f-478">A matriz de tarefas da qual continuar quando uma tarefa for concluída.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-478">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="0eb3f-479">O delegado de ação a ser executado quando uma tarefa na matriz <paramref name="tasks" /> for concluída.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-479">The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="0eb3f-480">O valor <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> que controla o comportamento da <see cref="T:System.Threading.Tasks.Task" /> de continuação criada.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-480">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></param>
        <summary><span data-ttu-id="0eb3f-481">Cria um <see cref="T:System.Threading.Tasks.Task" /> de continuação que será iniciado mediante a conclusão de qualquer Tarefa no conjunto fornecido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-481">Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-482">O novo <see cref="T:System.Threading.Tasks.Task" /> de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-482">The new continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eb3f-483">O NotOn \* e OnlyOn \* <xref:System.Threading.Tasks.TaskContinuationOptions>, que restringir para as quais <xref:System.Threading.Tasks.TaskStatus> uma continuação será executada, os estados são ilegais com ContinueWhenAny.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-483">The NotOn\* and OnlyOn\* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="0eb3f-484">A exceção gerada quando um dos elementos na matriz <paramref name="tasks" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-484">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-485">A exceção gerada quando a matriz <paramref name="tasks" /> é nula.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-485">The exception that is thrown when the <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="0eb3f-486">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-486">-or-</span></span> 
<span data-ttu-id="0eb3f-487">A exceção lançada quando o argumento <paramref name="continuationAction" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-487">The exception that is thrown when the <paramref name="continuationAction" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0eb3f-488">A exceção gerada quando o argumento <paramref name="continuationOptions" /> especifica um valor de TaskContinuationOptions inválido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-488">The exception that is thrown when the <paramref name="continuationOptions" /> argument specifies an invalid TaskContinuationOptions value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0eb3f-489">A exceção gerada quando a matriz <paramref name="tasks" /> contém um valor nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-489">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="0eb3f-490">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-490">-or-</span></span> 
<span data-ttu-id="0eb3f-491">A exceção gerada quando a matriz <paramref name="tasks" /> está vazia.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-491">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-492">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-492">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="0eb3f-493">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="0eb3f-493">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="0eb3f-494">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="0eb3f-494">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Action&lt;System.Threading.Tasks.Task&gt; continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAny(class System.Threading.Tasks.Task[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Action&lt;System::Threading::Tasks::Task ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task[] * Action&lt;System.Threading.Tasks.Task&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAny (tasks, continuationAction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="0eb3f-495">A matriz de tarefas da qual continuar quando uma tarefa for concluída.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-495">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="0eb3f-496">O delegado de ação a ser executado quando uma tarefa na matriz <paramref name="tasks" /> for concluída.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-496">The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="0eb3f-497">O <see cref="T:System.Threading.CancellationToken" /> que será atribuído à nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-497">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="0eb3f-498">O valor <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> que controla o comportamento da <see cref="T:System.Threading.Tasks.Task" /> de continuação criada.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-498">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></param>
        <param name="scheduler"><span data-ttu-id="0eb3f-499">O <see cref="T:System.Threading.Tasks.TaskScheduler" /> usado para agendar a <see cref="T:System.Threading.Tasks.Task" /> de continuação criada.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-499">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></param>
        <summary><span data-ttu-id="0eb3f-500">Cria um <see cref="T:System.Threading.Tasks.Task" /> de continuação que será iniciado mediante a conclusão de qualquer Tarefa no conjunto fornecido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-500">Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-501">O novo <see cref="T:System.Threading.Tasks.Task" /> de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-501">The new continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-502">A exceção gerada quando a matriz <paramref name="tasks" /> é nula.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-502">The exception that is thrown when the <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="0eb3f-503">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-503">-or-</span></span> 
<span data-ttu-id="0eb3f-504">A exceção lançada quando o argumento <paramref name="continuationAction" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-504">The exception that is thrown when the <paramref name="continuationAction" /> argument is null.</span></span>  
  
<span data-ttu-id="0eb3f-505">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-505">-or-</span></span> 
<span data-ttu-id="0eb3f-506">A exceção lançada quando o argumento <paramref name="scheduler" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-506">The exception that is thrown when the <paramref name="scheduler" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0eb3f-507">A exceção gerada quando a matriz <paramref name="tasks" /> contém um valor nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-507">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="0eb3f-508">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-508">-or-</span></span> 
<span data-ttu-id="0eb3f-509">A exceção gerada quando a matriz <paramref name="tasks" /> está vazia.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-509">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-510">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-510">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="0eb3f-511">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="0eb3f-511">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="0eb3f-512">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="0eb3f-512">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAny&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;&gt; continuationAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAny&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;&gt; continuationAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAny(Of TAntecedentResult) (tasks As Task(Of TAntecedentResult)(), continuationAction As Action(Of Task(Of TAntecedentResult))) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Action&lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ continuationAction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Action&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;&gt; -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAny (tasks, continuationAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="0eb3f-513">O tipo do resultado da antecessora <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-513">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="0eb3f-514">A matriz de tarefas da qual continuar quando uma tarefa for concluída.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-514">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="0eb3f-515">O delegado de ação a ser executado quando uma tarefa na matriz <paramref name="tasks" /> for concluída.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-515">The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <summary><span data-ttu-id="0eb3f-516">Cria um <see cref="T:System.Threading.Tasks.Task" /> de continuação que será iniciado mediante a conclusão de qualquer Tarefa no conjunto fornecido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-516">Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-517">O novo <see cref="T:System.Threading.Tasks.Task" /> de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-517">The new continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="0eb3f-518">A exceção gerada quando um dos elementos na matriz <paramref name="tasks" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-518">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-519">A exceção gerada quando a matriz <paramref name="tasks" /> é nula.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-519">The exception that is thrown when the <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="0eb3f-520">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-520">-or-</span></span> 
<span data-ttu-id="0eb3f-521">A exceção lançada quando o argumento <paramref name="continuationAction" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-521">The exception that is thrown when the <paramref name="continuationAction" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0eb3f-522">A exceção gerada quando a matriz <paramref name="tasks" /> contém um valor nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-522">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="0eb3f-523">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-523">-or-</span></span> 
<span data-ttu-id="0eb3f-524">A exceção gerada quando a matriz <paramref name="tasks" /> está vazia.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-524">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-525">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-525">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="0eb3f-526">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="0eb3f-526">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="0eb3f-527">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="0eb3f-527">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAny&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;&gt; continuationAction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAny&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Action&lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Action&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAny (tasks, continuationAction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="0eb3f-528">O tipo do resultado da antecessora <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-528">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="0eb3f-529">A matriz de tarefas da qual continuar quando uma tarefa for concluída.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-529">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="0eb3f-530">O delegado de ação a ser executado quando uma tarefa na matriz <paramref name="tasks" /> for concluída.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-530">The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="0eb3f-531">O <see cref="T:System.Threading.CancellationToken" /> que será atribuído à nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-531">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span></span></param>
        <summary><span data-ttu-id="0eb3f-532">Cria um <see cref="T:System.Threading.Tasks.Task" /> de continuação que será iniciado mediante a conclusão de qualquer Tarefa no conjunto fornecido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-532">Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-533">O novo <see cref="T:System.Threading.Tasks.Task" /> de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-533">The new continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="0eb3f-534">A exceção gerada quando um dos elementos na matriz <paramref name="tasks" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-534">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="0eb3f-535">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-535">-or-</span></span> 
<span data-ttu-id="0eb3f-536">O <see cref="T:System.Threading.CancellationToken" /> fornecido já foi descartado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-536">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-537">A exceção gerada quando a matriz <paramref name="tasks" /> é nula.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-537">The exception that is thrown when the <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="0eb3f-538">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-538">-or-</span></span> 
<span data-ttu-id="0eb3f-539">A exceção lançada quando o argumento <paramref name="continuationAction" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-539">The exception that is thrown when the <paramref name="continuationAction" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0eb3f-540">A exceção gerada quando a matriz <paramref name="tasks" /> contém um valor nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-540">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="0eb3f-541">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-541">-or-</span></span> 
<span data-ttu-id="0eb3f-542">A exceção gerada quando a matriz <paramref name="tasks" /> está vazia.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-542">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-543">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-543">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="0eb3f-544">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="0eb3f-544">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="0eb3f-545">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="0eb3f-545">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAny&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;&gt; continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAny&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;&gt; continuationAction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAny(Of TAntecedentResult) (tasks As Task(Of TAntecedentResult)(), continuationAction As Action(Of Task(Of TAntecedentResult)), continuationOptions As TaskContinuationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Action&lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ continuationAction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Action&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAny (tasks, continuationAction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="0eb3f-546">O tipo do resultado da antecessora <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-546">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="0eb3f-547">A matriz de tarefas da qual continuar quando uma tarefa for concluída.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-547">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="0eb3f-548">O delegado de ação a ser executado quando uma tarefa na matriz <paramref name="tasks" /> for concluída.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-548">The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="0eb3f-549">O valor <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> que controla o comportamento da <see cref="T:System.Threading.Tasks.Task" /> de continuação criada.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-549">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></param>
        <summary><span data-ttu-id="0eb3f-550">Cria um <see cref="T:System.Threading.Tasks.Task" /> de continuação que será iniciado mediante a conclusão de qualquer Tarefa no conjunto fornecido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-550">Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-551">O novo <see cref="T:System.Threading.Tasks.Task" /> de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-551">The new continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eb3f-552">O NotOn \* e OnlyOn \* <xref:System.Threading.Tasks.TaskContinuationOptions>, que restringir para as quais <xref:System.Threading.Tasks.TaskStatus> uma continuação será executada, os estados são ilegais com ContinueWhenAny.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-552">The NotOn\* and OnlyOn\* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="0eb3f-553">A exceção gerada quando um dos elementos na matriz <paramref name="tasks" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-553">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-554">A exceção gerada quando a matriz <paramref name="tasks" /> é nula.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-554">The exception that is thrown when the <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="0eb3f-555">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-555">-or-</span></span> 
<span data-ttu-id="0eb3f-556">A exceção lançada quando o argumento <paramref name="continuationAction" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-556">The exception that is thrown when the <paramref name="continuationAction" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0eb3f-557">A exceção gerada quando o argumento <paramref name="continuationOptions" /> especifica um valor de TaskContinuationOptions inválido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-557">The exception that is thrown when the <paramref name="continuationOptions" /> argument specifies an invalid TaskContinuationOptions value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0eb3f-558">A exceção gerada quando a matriz <paramref name="tasks" /> contém um valor nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-558">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="0eb3f-559">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-559">-or-</span></span> 
<span data-ttu-id="0eb3f-560">A exceção gerada quando a matriz <paramref name="tasks" /> está vazia.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-560">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-561">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-561">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="0eb3f-562">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="0eb3f-562">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="0eb3f-563">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="0eb3f-563">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAny&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;&gt; continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAny&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Action&lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Action&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAny (tasks, continuationAction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="0eb3f-564">O tipo do resultado da antecessora <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-564">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="0eb3f-565">A matriz de tarefas da qual continuar quando uma tarefa for concluída.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-565">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="0eb3f-566">O delegado de ação a ser executado quando uma tarefa na matriz <paramref name="tasks" /> for concluída.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-566">The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="0eb3f-567">O <see cref="T:System.Threading.CancellationToken" /> que será atribuído à nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-567">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="0eb3f-568">O valor <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> que controla o comportamento da <see cref="T:System.Threading.Tasks.Task" /> de continuação criada.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-568">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></param>
        <param name="scheduler"><span data-ttu-id="0eb3f-569">O <see cref="T:System.Threading.Tasks.TaskScheduler" /> usado para agendar a <see cref="T:System.Threading.Tasks.Task`1" /> de continuação criada.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-569">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="0eb3f-570">Cria um <see cref="T:System.Threading.Tasks.Task" /> de continuação que será iniciado mediante a conclusão de qualquer Tarefa no conjunto fornecido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-570">Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-571">O novo <see cref="T:System.Threading.Tasks.Task" /> de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-571">The new continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eb3f-572">O NotOn \* e OnlyOn \* <xref:System.Threading.Tasks.TaskContinuationOptions>, que restringir para as quais <xref:System.Threading.Tasks.TaskStatus> uma continuação será executada, os estados são ilegais com ContinueWhenAny.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-572">The NotOn\* and OnlyOn\* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-573">A exceção gerada quando a matriz <paramref name="tasks" /> é nula.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-573">The exception that is thrown when the <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="0eb3f-574">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-574">-or-</span></span> 
<span data-ttu-id="0eb3f-575">A exceção lançada quando o argumento <paramref name="continuationAction" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-575">The exception that is thrown when the <paramref name="continuationAction" /> argument is null.</span></span>  
  
<span data-ttu-id="0eb3f-576">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-576">-or-</span></span> 
<span data-ttu-id="0eb3f-577">A exceção lançada quando o argumento <paramref name="scheduler" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-577">The exception that is thrown when the <paramref name="scheduler" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0eb3f-578">A exceção gerada quando a matriz <paramref name="tasks" /> contém um valor nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-578">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="0eb3f-579">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-579">-or-</span></span> 
<span data-ttu-id="0eb3f-580">A exceção gerada quando a matriz <paramref name="tasks" /> está vazia.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-580">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-581">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-581">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="0eb3f-582">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="0eb3f-582">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="0eb3f-583">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="0eb3f-583">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TResult&gt; (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAny&lt;TResult&gt;(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAny(Of TResult) (tasks As Task(), continuationFunction As Func(Of Task, TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task, 'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="0eb3f-584">O tipo de resultado retornado pela <paramref name="continuationFunction" /> delegar e associado com o criado <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-584">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="0eb3f-585">A matriz de tarefas da qual continuar quando uma tarefa for concluída.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-585">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="0eb3f-586">O delegado de função a ser executado de forma assíncrona quando uma tarefa na matriz <paramref name="tasks" /> for concluída.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-586">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <summary><span data-ttu-id="0eb3f-587">Cria um <see cref="T:System.Threading.Tasks.Task`1" /> de continuação que será iniciado mediante a conclusão de qualquer Tarefa no conjunto fornecido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-587">Creates a continuation <see cref="T:System.Threading.Tasks.Task`1" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-588">O novo <see cref="T:System.Threading.Tasks.Task`1" /> de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-588">The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="0eb3f-589">A exceção gerada quando um dos elementos na matriz <paramref name="tasks" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-589">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-590">A exceção gerada quando a matriz <paramref name="tasks" /> é nula.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-590">The exception that is thrown when the <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="0eb3f-591">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-591">-or-</span></span> 
<span data-ttu-id="0eb3f-592">A exceção lançada quando o argumento <paramref name="continuationFunction" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-592">The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0eb3f-593">A exceção gerada quando a matriz <paramref name="tasks" /> contém um valor nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-593">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="0eb3f-594">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-594">-or-</span></span> 
<span data-ttu-id="0eb3f-595">A exceção gerada quando a matriz <paramref name="tasks" /> está vazia.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-595">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-596">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-596">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="0eb3f-597">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="0eb3f-597">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="0eb3f-598">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="0eb3f-598">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TResult&gt; (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAny&lt;TResult&gt;(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task, 'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="0eb3f-599">O tipo de resultado retornado pela <paramref name="continuationFunction" /> delegar e associado com o criado <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-599">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="0eb3f-600">A matriz de tarefas da qual continuar quando uma tarefa for concluída.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-600">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="0eb3f-601">O delegado de função a ser executado de forma assíncrona quando uma tarefa na matriz <paramref name="tasks" /> for concluída.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-601">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="0eb3f-602">O <see cref="T:System.Threading.CancellationToken" /> que será atribuído à nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-602">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span></span></param>
        <summary><span data-ttu-id="0eb3f-603">Cria um <see cref="T:System.Threading.Tasks.Task`1" /> de continuação que será iniciado mediante a conclusão de qualquer Tarefa no conjunto fornecido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-603">Creates a continuation <see cref="T:System.Threading.Tasks.Task`1" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-604">O novo <see cref="T:System.Threading.Tasks.Task`1" /> de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-604">The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="0eb3f-605">A exceção gerada quando um dos elementos na matriz <paramref name="tasks" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-605">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="0eb3f-606">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-606">-or-</span></span> 
<span data-ttu-id="0eb3f-607">O <see cref="T:System.Threading.CancellationToken" /> fornecido já foi descartado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-607">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-608">A exceção gerada quando a matriz <paramref name="tasks" /> é nula.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-608">The exception that is thrown when the <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="0eb3f-609">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-609">-or-</span></span> 
<span data-ttu-id="0eb3f-610">A exceção lançada quando o argumento <paramref name="continuationFunction" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-610">The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0eb3f-611">A exceção gerada quando a matriz <paramref name="tasks" /> contém um valor nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-611">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="0eb3f-612">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-612">-or-</span></span> 
<span data-ttu-id="0eb3f-613">A exceção gerada quando a matriz <paramref name="tasks" /> está vazia.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-613">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-614">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-614">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="0eb3f-615">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="0eb3f-615">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="0eb3f-616">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="0eb3f-616">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TResult&gt; (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAny&lt;TResult&gt;(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAny(Of TResult) (tasks As Task(), continuationFunction As Func(Of Task, TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task, 'Result&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="0eb3f-617">O tipo de resultado retornado pela <paramref name="continuationFunction" /> delegar e associado com o criado <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-617">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="0eb3f-618">A matriz de tarefas da qual continuar quando uma tarefa for concluída.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-618">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="0eb3f-619">O delegado de função a ser executado de forma assíncrona quando uma tarefa na matriz <paramref name="tasks" /> for concluída.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-619">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="0eb3f-620">O valor <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> que controla o comportamento da <see cref="T:System.Threading.Tasks.Task`1" /> de continuação criada.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-620">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="0eb3f-621">Cria um <see cref="T:System.Threading.Tasks.Task`1" /> de continuação que será iniciado mediante a conclusão de qualquer Tarefa no conjunto fornecido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-621">Creates a continuation <see cref="T:System.Threading.Tasks.Task`1" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-622">O novo <see cref="T:System.Threading.Tasks.Task`1" /> de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-622">The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eb3f-623">O NotOn \* e OnlyOn \* <xref:System.Threading.Tasks.TaskContinuationOptions>, que restringir para as quais <xref:System.Threading.Tasks.TaskStatus> uma continuação será executada, os estados são ilegais com ContinueWhenAny.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-623">The NotOn\* and OnlyOn\* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="0eb3f-624">A exceção gerada quando um dos elementos na matriz <paramref name="tasks" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-624">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-625">A exceção gerada quando a matriz <paramref name="tasks" /> é nula.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-625">The exception that is thrown when the <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="0eb3f-626">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-626">-or-</span></span> 
<span data-ttu-id="0eb3f-627">A exceção lançada quando o argumento <paramref name="continuationFunction" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-627">The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0eb3f-628">A exceção gerada quando o argumento <paramref name="continuationOptions" /> especifica um valor de TaskContinuationOptions inválido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-628">The exception that is thrown when the <paramref name="continuationOptions" /> argument specifies an invalid TaskContinuationOptions value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0eb3f-629">A exceção gerada quando a matriz <paramref name="tasks" /> contém um valor nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-629">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="0eb3f-630">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-630">-or-</span></span> 
<span data-ttu-id="0eb3f-631">A exceção gerada quando a matriz <paramref name="tasks" /> está vazia.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-631">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-632">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-632">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="0eb3f-633">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="0eb3f-633">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="0eb3f-634">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="0eb3f-634">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TResult&gt; (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAny&lt;TResult&gt;(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task, 'Result&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="0eb3f-635">O tipo de resultado retornado pela <paramref name="continuationFunction" /> delegar e associado com o criado <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-635">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="0eb3f-636">A matriz de tarefas da qual continuar quando uma tarefa for concluída.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-636">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="0eb3f-637">O delegado de função a ser executado de forma assíncrona quando uma tarefa na matriz <paramref name="tasks" /> for concluída.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-637">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="0eb3f-638">O <see cref="T:System.Threading.CancellationToken" /> que será atribuído à nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-638">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="0eb3f-639">O valor <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> que controla o comportamento da <see cref="T:System.Threading.Tasks.Task`1" /> de continuação criada.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-639">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <param name="scheduler"><span data-ttu-id="0eb3f-640">O <see cref="T:System.Threading.Tasks.TaskScheduler" /> usado para agendar a <see cref="T:System.Threading.Tasks.Task`1" /> de continuação criada.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-640">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="0eb3f-641">Cria um <see cref="T:System.Threading.Tasks.Task`1" /> de continuação que será iniciado mediante a conclusão de qualquer Tarefa no conjunto fornecido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-641">Creates a continuation <see cref="T:System.Threading.Tasks.Task`1" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-642">O novo <see cref="T:System.Threading.Tasks.Task`1" /> de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-642">The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eb3f-643">O NotOn \* e OnlyOn \* <xref:System.Threading.Tasks.TaskContinuationOptions>, que restringir para as quais <xref:System.Threading.Tasks.TaskStatus> uma continuação será executada, os estados são ilegais com ContinueWhenAny.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-643">The NotOn\* and OnlyOn\* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-644">A exceção gerada quando a matriz <paramref name="tasks" /> é nula.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-644">The exception that is thrown when the <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="0eb3f-645">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-645">-or-</span></span> 
<span data-ttu-id="0eb3f-646">A exceção lançada quando o argumento <paramref name="continuationFunction" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-646">The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</span></span>  
  
<span data-ttu-id="0eb3f-647">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-647">-or-</span></span> 
<span data-ttu-id="0eb3f-648">A exceção lançada quando o argumento <paramref name="scheduler" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-648">The exception that is thrown when the <paramref name="scheduler" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0eb3f-649">A exceção gerada quando a matriz <paramref name="tasks" /> contém um valor nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-649">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="0eb3f-650">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-650">-or-</span></span> 
<span data-ttu-id="0eb3f-651">A exceção gerada quando a matriz <paramref name="tasks" /> está vazia.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-651">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-652">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-652">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="0eb3f-653">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="0eb3f-653">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="0eb3f-654">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="0eb3f-654">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TAntecedentResult,TResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt; continuationFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAny&lt;TAntecedentResult, TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;, !!TResult&gt; continuationFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAny(Of TAntecedentResult, TResult) (tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult), TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^, TResult&gt; ^ continuationFunction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;, 'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="0eb3f-655">O tipo do resultado da antecessora <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-655">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="0eb3f-656">O tipo de resultado retornado pela <paramref name="continuationFunction" /> delegar e associado com o criado <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-656">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="0eb3f-657">A matriz de tarefas da qual continuar quando uma tarefa for concluída.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-657">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="0eb3f-658">O delegado de função a ser executado de forma assíncrona quando uma tarefa na matriz <paramref name="tasks" /> for concluída.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-658">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <summary><span data-ttu-id="0eb3f-659">Cria um <see cref="T:System.Threading.Tasks.Task`1" /> de continuação que será iniciado mediante a conclusão de qualquer Tarefa no conjunto fornecido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-659">Creates a continuation <see cref="T:System.Threading.Tasks.Task`1" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-660">O novo <see cref="T:System.Threading.Tasks.Task`1" /> de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-660">The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="0eb3f-661">A exceção gerada quando um dos elementos na matriz <paramref name="tasks" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-661">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-662">A exceção gerada quando a matriz <paramref name="tasks" /> é nula.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-662">The exception that is thrown when the <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="0eb3f-663">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-663">-or-</span></span> 
<span data-ttu-id="0eb3f-664">A exceção lançada quando o argumento <paramref name="continuationFunction" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-664">The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0eb3f-665">A exceção gerada quando a matriz <paramref name="tasks" /> contém um valor nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-665">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="0eb3f-666">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-666">-or-</span></span> 
<span data-ttu-id="0eb3f-667">A exceção gerada quando a matriz <paramref name="tasks" /> está vazia.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-667">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-668">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-668">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="0eb3f-669">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="0eb3f-669">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="0eb3f-670">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="0eb3f-670">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TAntecedentResult,TResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAny&lt;TAntecedentResult, TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;, !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;, 'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="0eb3f-671">O tipo do resultado da antecessora <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-671">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="0eb3f-672">O tipo de resultado retornado pela <paramref name="continuationFunction" /> delegar e associado com o criado <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-672">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="0eb3f-673">A matriz de tarefas da qual continuar quando uma tarefa for concluída.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-673">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="0eb3f-674">O delegado de função a ser executado de forma assíncrona quando uma tarefa na matriz <paramref name="tasks" /> for concluída.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-674">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="0eb3f-675">O <see cref="T:System.Threading.CancellationToken" /> que será atribuído à nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-675">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span></span></param>
        <summary><span data-ttu-id="0eb3f-676">Cria um <see cref="T:System.Threading.Tasks.Task`1" /> de continuação que será iniciado mediante a conclusão de qualquer Tarefa no conjunto fornecido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-676">Creates a continuation <see cref="T:System.Threading.Tasks.Task`1" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-677">O novo <see cref="T:System.Threading.Tasks.Task`1" /> de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-677">The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="0eb3f-678">A exceção gerada quando um dos elementos na matriz <paramref name="tasks" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-678">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="0eb3f-679">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-679">-or-</span></span> 
<span data-ttu-id="0eb3f-680">O <see cref="T:System.Threading.CancellationToken" /> fornecido já foi descartado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-680">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-681">A exceção gerada quando a matriz <paramref name="tasks" /> é nula.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-681">The exception that is thrown when the <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="0eb3f-682">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-682">-or-</span></span> 
<span data-ttu-id="0eb3f-683">A exceção lançada quando o argumento <paramref name="continuationFunction" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-683">The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0eb3f-684">A exceção gerada quando a matriz <paramref name="tasks" /> contém um valor nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-684">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="0eb3f-685">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-685">-or-</span></span> 
<span data-ttu-id="0eb3f-686">A exceção gerada quando a matriz <paramref name="tasks" /> está vazia.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-686">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-687">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-687">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="0eb3f-688">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="0eb3f-688">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="0eb3f-689">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="0eb3f-689">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TAntecedentResult,TResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt; continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAny&lt;TAntecedentResult, TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;, !!TResult&gt; continuationFunction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAny(Of TAntecedentResult, TResult) (tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult), TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;, 'Result&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="0eb3f-690">O tipo do resultado da antecessora <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-690">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="0eb3f-691">O tipo de resultado retornado pela <paramref name="continuationFunction" /> delegar e associado com o criado <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-691">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="0eb3f-692">A matriz de tarefas da qual continuar quando uma tarefa for concluída.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-692">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="0eb3f-693">O delegado de função a ser executado de forma assíncrona quando uma tarefa na matriz <paramref name="tasks" /> for concluída.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-693">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="0eb3f-694">O valor <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> que controla o comportamento da <see cref="T:System.Threading.Tasks.Task`1" /> de continuação criada.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-694">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="0eb3f-695">Cria um <see cref="T:System.Threading.Tasks.Task`1" /> de continuação que será iniciado mediante a conclusão de qualquer Tarefa no conjunto fornecido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-695">Creates a continuation <see cref="T:System.Threading.Tasks.Task`1" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-696">O novo <see cref="T:System.Threading.Tasks.Task`1" /> de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-696">The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eb3f-697">O NotOn \* e OnlyOn \* <xref:System.Threading.Tasks.TaskContinuationOptions>, que restringir para as quais <xref:System.Threading.Tasks.TaskStatus> uma continuação será executada, os estados são ilegais com ContinueWhenAny.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-697">The NotOn\* and OnlyOn\* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="0eb3f-698">A exceção gerada quando um dos elementos na matriz <paramref name="tasks" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-698">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-699">A exceção gerada quando a matriz <paramref name="tasks" /> é nula.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-699">The exception that is thrown when the <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="0eb3f-700">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-700">-or-</span></span> 
<span data-ttu-id="0eb3f-701">A exceção lançada quando o argumento <paramref name="continuationFunction" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-701">The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0eb3f-702">A exceção gerada quando o argumento <paramref name="continuationOptions" /> especifica um valor de TaskContinuationOptions inválido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-702">The exception that is thrown when the <paramref name="continuationOptions" /> argument specifies an invalid TaskContinuationOptions value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0eb3f-703">A exceção gerada quando a matriz <paramref name="tasks" /> contém um valor nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-703">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="0eb3f-704">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-704">-or-</span></span> 
<span data-ttu-id="0eb3f-705">A exceção gerada quando a matriz <paramref name="tasks" /> está vazia.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-705">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-706">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-706">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="0eb3f-707">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="0eb3f-707">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="0eb3f-708">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="0eb3f-708">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TAntecedentResult,TResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAny&lt;TAntecedentResult, TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;, !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;, 'Result&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="0eb3f-709">O tipo do resultado da antecessora <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-709">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="0eb3f-710">O tipo de resultado retornado pela <paramref name="continuationFunction" /> delegar e associado com o criado <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-710">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="0eb3f-711">A matriz de tarefas da qual continuar quando uma tarefa for concluída.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-711">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="0eb3f-712">O delegado de função a ser executado de forma assíncrona quando uma tarefa na matriz <paramref name="tasks" /> for concluída.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-712">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="0eb3f-713">O <see cref="T:System.Threading.CancellationToken" /> que será atribuído à nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-713">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="0eb3f-714">O valor <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> que controla o comportamento da <see cref="T:System.Threading.Tasks.Task`1" /> de continuação criada.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-714">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <param name="scheduler"><span data-ttu-id="0eb3f-715">O <see cref="T:System.Threading.Tasks.TaskScheduler" /> usado para agendar a <see cref="T:System.Threading.Tasks.Task`1" /> de continuação criada.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-715">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="0eb3f-716">Cria um <see cref="T:System.Threading.Tasks.Task`1" /> de continuação que será iniciado mediante a conclusão de qualquer Tarefa no conjunto fornecido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-716">Creates a continuation <see cref="T:System.Threading.Tasks.Task`1" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-717">O novo <see cref="T:System.Threading.Tasks.Task`1" /> de continuação.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-717">The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eb3f-718">O NotOn \* e OnlyOn \* <xref:System.Threading.Tasks.TaskContinuationOptions>, que restringir para as quais <xref:System.Threading.Tasks.TaskStatus> uma continuação será executada, os estados são ilegais com ContinueWhenAny.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-718">The NotOn\* and OnlyOn\* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-719">A exceção gerada quando a matriz <paramref name="tasks" /> é nula.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-719">The exception that is thrown when the <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="0eb3f-720">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-720">-or-</span></span> 
<span data-ttu-id="0eb3f-721">A exceção lançada quando o argumento <paramref name="continuationFunction" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-721">The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</span></span>  
  
<span data-ttu-id="0eb3f-722">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-722">-or-</span></span> 
<span data-ttu-id="0eb3f-723">A exceção lançada quando o argumento <paramref name="scheduler" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-723">The exception that is thrown when the <paramref name="scheduler" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0eb3f-724">A exceção gerada quando a matriz <paramref name="tasks" /> contém um valor nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-724">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="0eb3f-725">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-725">-or-</span></span> 
<span data-ttu-id="0eb3f-726">A exceção gerada quando a matriz <paramref name="tasks" /> está vazia.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-726">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-727">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-727">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="0eb3f-728">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="0eb3f-728">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="0eb3f-729">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="0eb3f-729">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CreationOptions">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.TaskCreationOptions CreationOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.Tasks.TaskCreationOptions CreationOptions" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.TaskFactory.CreationOptions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CreationOptions As TaskCreationOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Tasks::TaskCreationOptions CreationOptions { System::Threading::Tasks::TaskCreationOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.CreationOptions : System.Threading.Tasks.TaskCreationOptions" Usage="System.Threading.Tasks.TaskFactory.CreationOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskCreationOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0eb3f-730">Obtém as opções de criação de tarefa padrão para essa fábrica de tarefas.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-730">Gets the default task creation options for this task factory.</span></span></summary>
        <value><span data-ttu-id="0eb3f-731">As opções de criação de tarefa padrão para essa fábrica de tarefas.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-731">The default task creation options for this task factory.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eb3f-732">O valor da propriedade é usado para criar todas as tarefas, a menos que outras opções são especificadas explicitamente durante as chamadas para métodos dessa fábrica.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-732">The property value is used to create all tasks, unless other options are explicitly specified during calls to this factory's methods.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-733">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-733">Task Parallel Library (TPL)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="FromAsync">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0eb3f-734">Cria um <see cref="T:System.Threading.Tasks.Task" /> que representa um par de métodos begin e end que estão em conformidade com o padrão do Modelo de Programação Assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-734">Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-735">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-735">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="0eb3f-736">Usando TPL com outros padrões assíncronos</span><span class="sxs-lookup"><span data-stu-id="0eb3f-736">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="FromAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync (IAsyncResult asyncResult, Action&lt;IAsyncResult&gt; endMethod);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync(class System.IAsyncResult asyncResult, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult})" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync (asyncResult As IAsyncResult, endMethod As Action(Of IAsyncResult)) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ FromAsync(IAsyncResult ^ asyncResult, Action&lt;IAsyncResult ^&gt; ^ endMethod);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : IAsyncResult * Action&lt;IAsyncResult&gt; -&gt; System.Threading.Tasks.Task" Usage="taskFactory.FromAsync (asyncResult, endMethod)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="0eb3f-737">O IAsyncResult cuja conclusão deve disparar o processamento do <paramref name="endMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-737">The IAsyncResult whose completion should trigger the processing of the <paramref name="endMethod" />.</span></span></param>
        <param name="endMethod"><span data-ttu-id="0eb3f-738">O delegado da ação que processa o <paramref name="asyncResult" /> concluído.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-738">The action delegate that processes the completed <paramref name="asyncResult" />.</span></span></param>
        <summary><span data-ttu-id="0eb3f-739">Cria um <see cref="T:System.Threading.Tasks.Task" /> que executa uma ação do método de encerramento quando um <see cref="T:System.IAsyncResult" /> especificado é concluído.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-739">Creates a <see cref="T:System.Threading.Tasks.Task" /> that executes an end method action when a specified <see cref="T:System.IAsyncResult" /> completes.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-740">Um <see cref="T:System.Threading.Tasks.Task" /> que representa a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-740">A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!TIP]
>  <span data-ttu-id="0eb3f-741">O <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> sobrecargas que aceitam uma `asyncResult` parâmetro não são tão eficientes como as sobrecargas que usam um `beginMethod` parâmetro.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-741">The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter.</span></span> <span data-ttu-id="0eb3f-742">Se o desempenho for um problema, use as sobrecargas que fornecem a `beginMethod` / `endMethod` padrão.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-742">If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-743">A exceção lançada quando o argumento <paramref name="asyncResult" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-743">The exception that is thrown when the <paramref name="asyncResult" /> argument is null.</span></span>  
  
<span data-ttu-id="0eb3f-744">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-744">-or-</span></span> 
<span data-ttu-id="0eb3f-745">A exceção lançada quando o argumento <paramref name="endMethod" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-745">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-746">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-746">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="0eb3f-747">Usando TPL com outros padrões assíncronos</span><span class="sxs-lookup"><span data-stu-id="0eb3f-747">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync (Func&lt;AsyncCallback,object,IAsyncResult&gt; beginMethod, Action&lt;IAsyncResult&gt; endMethod, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync(class System.Func`3&lt;class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync (beginMethod As Func(Of AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), state As Object) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ FromAsync(Func&lt;AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Action&lt;IAsyncResult ^&gt; ^ endMethod, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;AsyncCallback, obj, IAsyncResult&gt; * Action&lt;IAsyncResult&gt; * obj -&gt; System.Threading.Tasks.Task" Usage="taskFactory.FromAsync (beginMethod, endMethod, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="beginMethod"><span data-ttu-id="0eb3f-748">O delegado que inicia a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-748">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="0eb3f-749">O delegado que finaliza a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-749">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="state"><span data-ttu-id="0eb3f-750">Um objeto que contém dados a serem usados pelo delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-750">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <summary><span data-ttu-id="0eb3f-751">Cria um <see cref="T:System.Threading.Tasks.Task" /> que representa um par de métodos begin e end que estão em conformidade com o padrão do Modelo de Programação Assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-751">Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-752">O <see cref="T:System.Threading.Tasks.Task" /> criado que representa a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-752">The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eb3f-753">O `beginMethod` delegado é iniciado no thread que <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> está em execução no.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-753">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span>  <span data-ttu-id="0eb3f-754">Esse método gera as exceções geradas pelo `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-754">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-755">A exceção lançada quando o argumento <paramref name="beginMethod" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-755">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="0eb3f-756">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-756">-or-</span></span> 
<span data-ttu-id="0eb3f-757">A exceção lançada quando o argumento <paramref name="endMethod" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-757">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-758">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-758">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="0eb3f-759">Usando TPL com outros padrões assíncronos</span><span class="sxs-lookup"><span data-stu-id="0eb3f-759">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync (IAsyncResult asyncResult, Action&lt;IAsyncResult&gt; endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync(class System.IAsyncResult asyncResult, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync (asyncResult As IAsyncResult, endMethod As Action(Of IAsyncResult), creationOptions As TaskCreationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ FromAsync(IAsyncResult ^ asyncResult, Action&lt;IAsyncResult ^&gt; ^ endMethod, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : IAsyncResult * Action&lt;IAsyncResult&gt; * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task" Usage="taskFactory.FromAsync (asyncResult, endMethod, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="0eb3f-760">O IAsyncResult cuja conclusão deve disparar o processamento do <paramref name="endMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-760">The IAsyncResult whose completion should trigger the processing of the <paramref name="endMethod" />.</span></span></param>
        <param name="endMethod"><span data-ttu-id="0eb3f-761">O delegado da ação que processa o <paramref name="asyncResult" /> concluído.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-761">The action delegate that processes the completed <paramref name="asyncResult" />.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="0eb3f-762">O valor de TaskCreationOptions que controla o comportamento do <see cref="T:System.Threading.Tasks.Task" /> criado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-762">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" />.</span></span></param>
        <summary><span data-ttu-id="0eb3f-763">Cria um <see cref="T:System.Threading.Tasks.Task" /> que executa uma ação do método de encerramento quando um <see cref="T:System.IAsyncResult" /> especificado é concluído.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-763">Creates a <see cref="T:System.Threading.Tasks.Task" /> that executes an end method action when a specified <see cref="T:System.IAsyncResult" /> completes.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-764">Um <see cref="T:System.Threading.Tasks.Task" /> que representa a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-764">A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!TIP]
>  <span data-ttu-id="0eb3f-765">O <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> sobrecargas que aceitam uma `asyncResult` parâmetro não são tão eficientes como as sobrecargas que usam um `beginMethod` parâmetro.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-765">The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter.</span></span> <span data-ttu-id="0eb3f-766">Se o desempenho for um problema, use as sobrecargas que fornecem a `beginMethod` / `endMethod` padrão.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-766">If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-767">A exceção lançada quando o argumento <paramref name="asyncResult" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-767">The exception that is thrown when the <paramref name="asyncResult" /> argument is null.</span></span>  
  
<span data-ttu-id="0eb3f-768">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-768">-or-</span></span> 
<span data-ttu-id="0eb3f-769">A exceção lançada quando o argumento <paramref name="endMethod" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-769">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0eb3f-770">A exceção lançada quando o argumento <paramref name="creationOptions" /> especifica um valor de TaskCreationOptions inválido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-770">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="0eb3f-771">Para obter mais informações, consulte as Observações para <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span><span class="sxs-lookup"><span data-stu-id="0eb3f-771">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-772">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-772">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="0eb3f-773">Usando TPL com outros padrões assíncronos</span><span class="sxs-lookup"><span data-stu-id="0eb3f-773">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync (Func&lt;AsyncCallback,object,IAsyncResult&gt; beginMethod, Action&lt;IAsyncResult&gt; endMethod, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync(class System.Func`3&lt;class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync (beginMethod As Func(Of AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), state As Object, creationOptions As TaskCreationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ FromAsync(Func&lt;AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Action&lt;IAsyncResult ^&gt; ^ endMethod, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;AsyncCallback, obj, IAsyncResult&gt; * Action&lt;IAsyncResult&gt; * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task" Usage="taskFactory.FromAsync (beginMethod, endMethod, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="beginMethod"><span data-ttu-id="0eb3f-774">O delegado que inicia a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-774">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="0eb3f-775">O delegado que finaliza a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-775">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="state"><span data-ttu-id="0eb3f-776">Um objeto que contém dados a serem usados pelo delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-776">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="0eb3f-777">O valor de TaskCreationOptions que controla o comportamento do <see cref="T:System.Threading.Tasks.Task" /> criado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-777">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" />.</span></span></param>
        <summary><span data-ttu-id="0eb3f-778">Cria um <see cref="T:System.Threading.Tasks.Task" /> que representa um par de métodos begin e end que estão em conformidade com o padrão do Modelo de Programação Assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-778">Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-779">O <see cref="T:System.Threading.Tasks.Task" /> criado que representa a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-779">The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eb3f-780">O `beginMethod` delegado é iniciado no thread que <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> está em execução no.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-780">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="0eb3f-781">Esse método gera as exceções geradas pelo `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-781">This method throws any exceptions thrown by the `beginMethod`.</span></span> <span data-ttu-id="0eb3f-782">O <xref:System.Threading.Tasks.TaskCreationOptions> valores <xref:System.Threading.Tasks.TaskCreationOptions.PreferFairness>, <xref:System.Threading.Tasks.TaskCreationOptions.LongRunning> e <xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent> são mutuamente exclusivos.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-782">The <xref:System.Threading.Tasks.TaskCreationOptions> values <xref:System.Threading.Tasks.TaskCreationOptions.PreferFairness>, <xref:System.Threading.Tasks.TaskCreationOptions.LongRunning> and <xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent> are all mutually exclusive.</span></span> <span data-ttu-id="0eb3f-783">Nos métodos FromAsync, tanto `LongRunning` ou `AttachedToParent` por si só fará com que um <xref:System.ArgumentOutOfRangeException> seja lançada.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-783">In the FromAsync methods, either `LongRunning` or `AttachedToParent` by themselves will cause an <xref:System.ArgumentOutOfRangeException> to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-784">A exceção lançada quando o argumento <paramref name="beginMethod" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-784">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="0eb3f-785">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-785">-or-</span></span> 
<span data-ttu-id="0eb3f-786">A exceção lançada quando o argumento <paramref name="endMethod" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-786">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0eb3f-787">A exceção lançada quando o argumento <paramref name="creationOptions" /> especifica um valor de TaskCreationOptions inválido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-787">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-788">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-788">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="0eb3f-789">Usando TPL com outros padrões assíncronos</span><span class="sxs-lookup"><span data-stu-id="0eb3f-789">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync (IAsyncResult asyncResult, Action&lt;IAsyncResult&gt; endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync(class System.IAsyncResult asyncResult, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync (asyncResult As IAsyncResult, endMethod As Action(Of IAsyncResult), creationOptions As TaskCreationOptions, scheduler As TaskScheduler) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ FromAsync(IAsyncResult ^ asyncResult, Action&lt;IAsyncResult ^&gt; ^ endMethod, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : IAsyncResult * Action&lt;IAsyncResult&gt; * System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="taskFactory.FromAsync (asyncResult, endMethod, creationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="0eb3f-790">O IAsyncResult cuja conclusão deve disparar o processamento do <paramref name="endMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-790">The IAsyncResult whose completion should trigger the processing of the <paramref name="endMethod" />.</span></span></param>
        <param name="endMethod"><span data-ttu-id="0eb3f-791">O delegado da ação que processa o <paramref name="asyncResult" /> concluído.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-791">The action delegate that processes the completed <paramref name="asyncResult" />.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="0eb3f-792">O valor de TaskCreationOptions que controla o comportamento do <see cref="T:System.Threading.Tasks.Task" /> criado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-792">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" />.</span></span></param>
        <param name="scheduler"><span data-ttu-id="0eb3f-793">O <see cref="T:System.Threading.Tasks.TaskScheduler" /> usado para agendar a tarefa que executa o método de encerramento.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-793">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the task that executes the end method.</span></span></param>
        <summary><span data-ttu-id="0eb3f-794">Cria um <see cref="T:System.Threading.Tasks.Task" /> que executa uma ação do método de encerramento quando um <see cref="T:System.IAsyncResult" /> especificado é concluído.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-794">Creates a <see cref="T:System.Threading.Tasks.Task" /> that executes an end method action when a specified <see cref="T:System.IAsyncResult" /> completes.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-795">O <see cref="T:System.Threading.Tasks.Task" /> criado que representa a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-795">The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!TIP]
>  <span data-ttu-id="0eb3f-796">O <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> sobrecargas que aceitam uma `asyncResult` parâmetro não são tão eficientes como as sobrecargas que usam um `beginMethod` parâmetro.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-796">The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter.</span></span> <span data-ttu-id="0eb3f-797">Se o desempenho for um problema, use as sobrecargas que fornecem a `beginMethod` / `endMethod` padrão.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-797">If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-798">A exceção lançada quando o argumento <paramref name="asyncResult" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-798">The exception that is thrown when the <paramref name="asyncResult" /> argument is null.</span></span>  
  
<span data-ttu-id="0eb3f-799">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-799">-or-</span></span> 
<span data-ttu-id="0eb3f-800">A exceção lançada quando o argumento <paramref name="endMethod" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-800">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="0eb3f-801">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-801">-or-</span></span> 
<span data-ttu-id="0eb3f-802">A exceção lançada quando o argumento <paramref name="scheduler" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-802">The exception that is thrown when the <paramref name="scheduler" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0eb3f-803">A exceção lançada quando o argumento <paramref name="creationOptions" /> especifica um valor de TaskCreationOptions inválido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-803">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="0eb3f-804">A exceção lançada quando o argumento <paramref name="creationOptions" /> especifica um valor de TaskCreationOptions inválido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-804">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="0eb3f-805">Para obter mais informações, consulte as Observações para <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span><span class="sxs-lookup"><span data-stu-id="0eb3f-805">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-806">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-806">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="0eb3f-807">Usando TPL com outros padrões assíncronos</span><span class="sxs-lookup"><span data-stu-id="0eb3f-807">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync&lt;TArg1&gt; (Func&lt;TArg1,AsyncCallback,object,IAsyncResult&gt; beginMethod, Action&lt;IAsyncResult&gt; endMethod, TArg1 arg1, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync&lt;TArg1&gt;(class System.Func`4&lt;!!TArg1, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, !!TArg1 arg1, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1) (beginMethod As Func(Of TArg1, AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), arg1 As TArg1, state As Object) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1&gt;&#xA; System::Threading::Tasks::Task ^ FromAsync(Func&lt;TArg1, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Action&lt;IAsyncResult ^&gt; ^ endMethod, TArg1 arg1, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, AsyncCallback, obj, IAsyncResult&gt; * Action&lt;IAsyncResult&gt; * 'TArg1 * obj -&gt; System.Threading.Tasks.Task" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="0eb3f-808">O tipo do primeiro argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-808">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="0eb3f-809">O delegado que inicia a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-809">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="0eb3f-810">O delegado que finaliza a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-810">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="0eb3f-811">O primeiro argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-811">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="0eb3f-812">Um objeto que contém dados a serem usados pelo delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-812">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <summary><span data-ttu-id="0eb3f-813">Cria um <see cref="T:System.Threading.Tasks.Task" /> que representa um par de métodos begin e end que estão em conformidade com o padrão do Modelo de Programação Assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-813">Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-814">O <see cref="T:System.Threading.Tasks.Task" /> criado que representa a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-814">The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eb3f-815">O `beginMethod` delegado é iniciado no thread que <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> está em execução no.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-815">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="0eb3f-816">Esse método gera as exceções geradas pelo `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-816">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-817">A exceção lançada quando o argumento <paramref name="beginMethod" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-817">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="0eb3f-818">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-818">-or-</span></span> 
<span data-ttu-id="0eb3f-819">A exceção lançada quando o argumento <paramref name="endMethod" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-819">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-820">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-820">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="0eb3f-821">Usando TPL com outros padrões assíncronos</span><span class="sxs-lookup"><span data-stu-id="0eb3f-821">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync&lt;TArg1&gt; (Func&lt;TArg1,AsyncCallback,object,IAsyncResult&gt; beginMethod, Action&lt;IAsyncResult&gt; endMethod, TArg1 arg1, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync&lt;TArg1&gt;(class System.Func`4&lt;!!TArg1, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, !!TArg1 arg1, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1) (beginMethod As Func(Of TArg1, AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), arg1 As TArg1, state As Object, creationOptions As TaskCreationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1&gt;&#xA; System::Threading::Tasks::Task ^ FromAsync(Func&lt;TArg1, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Action&lt;IAsyncResult ^&gt; ^ endMethod, TArg1 arg1, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, AsyncCallback, obj, IAsyncResult&gt; * Action&lt;IAsyncResult&gt; * 'TArg1 * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="0eb3f-822">O tipo do primeiro argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-822">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="0eb3f-823">O delegado que inicia a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-823">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="0eb3f-824">O delegado que finaliza a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-824">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="0eb3f-825">O primeiro argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-825">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="0eb3f-826">Um objeto que contém dados a serem usados pelo delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-826">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="0eb3f-827">O valor de TaskCreationOptions que controla o comportamento do <see cref="T:System.Threading.Tasks.Task" /> criado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-827">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" />.</span></span></param>
        <summary><span data-ttu-id="0eb3f-828">Cria um <see cref="T:System.Threading.Tasks.Task" /> que representa um par de métodos begin e end que estão em conformidade com o padrão do Modelo de Programação Assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-828">Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-829">O <see cref="T:System.Threading.Tasks.Task" /> criado que representa a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-829">The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eb3f-830">O `beginMethod` delegado é iniciado no thread que <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> está em execução no.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-830">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="0eb3f-831">Esse método gera as exceções geradas pelo `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-831">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-832">A exceção lançada quando o argumento <paramref name="beginMethod" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-832">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="0eb3f-833">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-833">-or-</span></span> 
<span data-ttu-id="0eb3f-834">A exceção lançada quando o argumento <paramref name="endMethod" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-834">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0eb3f-835">A exceção lançada quando o argumento <paramref name="creationOptions" /> especifica um valor de TaskCreationOptions inválido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-835">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="0eb3f-836">A exceção lançada quando o argumento <paramref name="creationOptions" /> especifica um valor de TaskCreationOptions inválido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-836">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="0eb3f-837">Para obter mais informações, consulte as Observações para <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span><span class="sxs-lookup"><span data-stu-id="0eb3f-837">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-838">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-838">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="0eb3f-839">Usando TPL com outros padrões assíncronos</span><span class="sxs-lookup"><span data-stu-id="0eb3f-839">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TResult&gt; (IAsyncResult asyncResult, Func&lt;IAsyncResult,TResult&gt; endMethod);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TResult&gt;(class System.IAsyncResult asyncResult, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TResult) (asyncResult As IAsyncResult, endMethod As Func(Of IAsyncResult, TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(IAsyncResult ^ asyncResult, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : IAsyncResult * Func&lt;IAsyncResult, 'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (asyncResult, endMethod)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="0eb3f-840">O tipo de resultado disponível por meio de <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-840">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="asyncResult"><span data-ttu-id="0eb3f-841">O IAsyncResult cuja conclusão deve disparar o processamento do <paramref name="endMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-841">The IAsyncResult whose completion should trigger the processing of the <paramref name="endMethod" />.</span></span></param>
        <param name="endMethod"><span data-ttu-id="0eb3f-842">O delegado da função que processa o <paramref name="asyncResult" /> concluído.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-842">The function delegate that processes the completed <paramref name="asyncResult" />.</span></span></param>
        <summary><span data-ttu-id="0eb3f-843">Cria uma <see cref="T:System.Threading.Tasks.Task`1" /> que executa uma função do método de encerramento quando um <see cref="T:System.IAsyncResult" /> especificado é concluído.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-843">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that executes an end method function when a specified <see cref="T:System.IAsyncResult" /> completes.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-844">Um <see cref="T:System.Threading.Tasks.Task`1" /> que representa a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-844">A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!TIP]
>  <span data-ttu-id="0eb3f-845">O <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> sobrecargas que aceitam uma `asyncResult` parâmetro não são tão eficientes como as sobrecargas que usam um `beginMethod` parâmetro.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-845">The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter.</span></span> <span data-ttu-id="0eb3f-846">Se o desempenho for um problema, use as sobrecargas que fornecem a `beginMethod` / `endMethod` padrão.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-846">If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-847">A exceção lançada quando o argumento <paramref name="asyncResult" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-847">The exception that is thrown when the <paramref name="asyncResult" /> argument is null.</span></span>  
  
<span data-ttu-id="0eb3f-848">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-848">-or-</span></span> 
<span data-ttu-id="0eb3f-849">A exceção lançada quando o argumento <paramref name="endMethod" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-849">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-850">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-850">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="0eb3f-851">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="0eb3f-851">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="0eb3f-852">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="0eb3f-852">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TResult&gt; (Func&lt;AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TResult&gt;(class System.Func`3&lt;class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TResult) (beginMethod As Func(Of AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), state As Object) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="0eb3f-853">O tipo de resultado disponível por meio de <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-853">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="0eb3f-854">O delegado que inicia a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-854">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="0eb3f-855">O delegado que finaliza a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-855">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="state"><span data-ttu-id="0eb3f-856">Um objeto que contém dados a serem usados pelo delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-856">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <summary><span data-ttu-id="0eb3f-857">Cria um <see cref="T:System.Threading.Tasks.Task`1" /> que representa um par de métodos begin e end que estão em conformidade com o padrão do Modelo de Programação Assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-857">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-858">O <see cref="T:System.Threading.Tasks.Task`1" /> criado que representa a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-858">The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eb3f-859">Esse método gera as exceções geradas pelo `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-859">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-860">A exceção lançada quando o argumento <paramref name="beginMethod" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-860">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="0eb3f-861">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-861">-or-</span></span> 
<span data-ttu-id="0eb3f-862">A exceção lançada quando o argumento <paramref name="endMethod" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-862">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-863">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-863">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="0eb3f-864">Usando TPL com outros padrões assíncronos</span><span class="sxs-lookup"><span data-stu-id="0eb3f-864">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TResult&gt; (IAsyncResult asyncResult, Func&lt;IAsyncResult,TResult&gt; endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TResult&gt;(class System.IAsyncResult asyncResult, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TResult) (asyncResult As IAsyncResult, endMethod As Func(Of IAsyncResult, TResult), creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(IAsyncResult ^ asyncResult, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : IAsyncResult * Func&lt;IAsyncResult, 'Result&gt; * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (asyncResult, endMethod, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="0eb3f-865">O tipo de resultado disponível por meio de <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-865">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="asyncResult"><span data-ttu-id="0eb3f-866">O IAsyncResult cuja conclusão deve disparar o processamento do <paramref name="endMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-866">The IAsyncResult whose completion should trigger the processing of the <paramref name="endMethod" />.</span></span></param>
        <param name="endMethod"><span data-ttu-id="0eb3f-867">O delegado da função que processa o <paramref name="asyncResult" /> concluído.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-867">The function delegate that processes the completed <paramref name="asyncResult" />.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="0eb3f-868">O valor de TaskCreationOptions que controla o comportamento do <see cref="T:System.Threading.Tasks.Task`1" /> criado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-868">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="0eb3f-869">Cria uma <see cref="T:System.Threading.Tasks.Task`1" /> que executa uma função do método de encerramento quando um <see cref="T:System.IAsyncResult" /> especificado é concluído.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-869">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that executes an end method function when a specified <see cref="T:System.IAsyncResult" /> completes.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-870">Um <see cref="T:System.Threading.Tasks.Task`1" /> que representa a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-870">A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!TIP]
>  <span data-ttu-id="0eb3f-871">O <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> sobrecargas que aceitam uma `asyncResult` parâmetro não são tão eficientes como as sobrecargas que usam um `beginMethod` parâmetro.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-871">The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter.</span></span> <span data-ttu-id="0eb3f-872">Se o desempenho for um problema, use as sobrecargas que fornecem a `beginMethod` / `endMethod` padrão.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-872">If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-873">A exceção lançada quando o argumento <paramref name="asyncResult" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-873">The exception that is thrown when the <paramref name="asyncResult" /> argument is null.</span></span>  
  
<span data-ttu-id="0eb3f-874">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-874">-or-</span></span> 
<span data-ttu-id="0eb3f-875">A exceção lançada quando o argumento <paramref name="endMethod" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-875">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0eb3f-876">A exceção lançada quando o argumento <paramref name="creationOptions" /> especifica um valor de TaskCreationOptions inválido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-876">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="0eb3f-877">A exceção lançada quando o argumento <paramref name="creationOptions" /> especifica um valor de TaskCreationOptions inválido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-877">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="0eb3f-878">Para obter mais informações, consulte as Observações para <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span><span class="sxs-lookup"><span data-stu-id="0eb3f-878">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-879">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-879">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="0eb3f-880">Usando TPL com outros padrões assíncronos</span><span class="sxs-lookup"><span data-stu-id="0eb3f-880">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TResult&gt; (Func&lt;AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TResult&gt;(class System.Func`3&lt;class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TResult) (beginMethod As Func(Of AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="0eb3f-881">O tipo de resultado disponível por meio de <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-881">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="0eb3f-882">O delegado que inicia a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-882">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="0eb3f-883">O delegado que finaliza a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-883">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="state"><span data-ttu-id="0eb3f-884">Um objeto que contém dados a serem usados pelo delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-884">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="0eb3f-885">O valor de TaskCreationOptions que controla o comportamento do <see cref="T:System.Threading.Tasks.Task`1" /> criado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-885">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="0eb3f-886">Cria um <see cref="T:System.Threading.Tasks.Task`1" /> que representa um par de métodos begin e end que estão em conformidade com o padrão do Modelo de Programação Assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-886">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-887">O <see cref="T:System.Threading.Tasks.Task`1" /> criado que representa a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-887">The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eb3f-888">Esse método gera as exceções geradas pelo `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-888">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-889">A exceção lançada quando o argumento <paramref name="beginMethod" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-889">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="0eb3f-890">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-890">-or-</span></span> 
<span data-ttu-id="0eb3f-891">A exceção lançada quando o argumento <paramref name="endMethod" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-891">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0eb3f-892">A exceção lançada quando o argumento <paramref name="creationOptions" /> especifica um valor de TaskCreationOptions inválido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-892">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="0eb3f-893">A exceção lançada quando o argumento <paramref name="creationOptions" /> especifica um valor de TaskCreationOptions inválido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-893">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="0eb3f-894">Para obter mais informações, consulte as Observações para <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span><span class="sxs-lookup"><span data-stu-id="0eb3f-894">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-895">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-895">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="0eb3f-896">Usando TPL com outros padrões assíncronos</span><span class="sxs-lookup"><span data-stu-id="0eb3f-896">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TResult&gt; (IAsyncResult asyncResult, Func&lt;IAsyncResult,TResult&gt; endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TResult&gt;(class System.IAsyncResult asyncResult, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TResult) (asyncResult As IAsyncResult, endMethod As Func(Of IAsyncResult, TResult), creationOptions As TaskCreationOptions, scheduler As TaskScheduler) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(IAsyncResult ^ asyncResult, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : IAsyncResult * Func&lt;IAsyncResult, 'Result&gt; * System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (asyncResult, endMethod, creationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="0eb3f-897">O tipo de resultado disponível por meio de <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-897">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="asyncResult"><span data-ttu-id="0eb3f-898">O IAsyncResult cuja conclusão deve disparar o processamento do <paramref name="endMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-898">The IAsyncResult whose completion should trigger the processing of the <paramref name="endMethod" />.</span></span></param>
        <param name="endMethod"><span data-ttu-id="0eb3f-899">O delegado da função que processa o <paramref name="asyncResult" /> concluído.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-899">The function delegate that processes the completed <paramref name="asyncResult" />.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="0eb3f-900">O valor de TaskCreationOptions que controla o comportamento do <see cref="T:System.Threading.Tasks.Task`1" /> criado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-900">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <param name="scheduler"><span data-ttu-id="0eb3f-901">O <see cref="T:System.Threading.Tasks.TaskScheduler" /> usado para agendar a tarefa que executa o método de encerramento.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-901">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the task that executes the end method.</span></span></param>
        <summary><span data-ttu-id="0eb3f-902">Cria uma <see cref="T:System.Threading.Tasks.Task`1" /> que executa uma função do método de encerramento quando um <see cref="T:System.IAsyncResult" /> especificado é concluído.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-902">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that executes an end method function when a specified <see cref="T:System.IAsyncResult" /> completes.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-903">Um <see cref="T:System.Threading.Tasks.Task`1" /> que representa a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-903">A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!TIP]
>  <span data-ttu-id="0eb3f-904">O <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> sobrecargas que aceitam uma `asyncResult` parâmetro não são tão eficientes como as sobrecargas que usam um `beginMethod` parâmetro.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-904">The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter.</span></span> <span data-ttu-id="0eb3f-905">Se o desempenho for um problema, use as sobrecargas que fornecem a `beginMethod` / `endMethod` padrão.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-905">If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-906">A exceção lançada quando o argumento <paramref name="asyncResult" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-906">The exception that is thrown when the <paramref name="asyncResult" /> argument is null.</span></span>  
  
<span data-ttu-id="0eb3f-907">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-907">-or-</span></span> 
<span data-ttu-id="0eb3f-908">A exceção lançada quando o argumento <paramref name="endMethod" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-908">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="0eb3f-909">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-909">-or-</span></span> 
<span data-ttu-id="0eb3f-910">A exceção lançada quando o argumento <paramref name="scheduler" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-910">The exception that is thrown when the <paramref name="scheduler" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0eb3f-911">A exceção lançada quando o argumento <paramref name="creationOptions" /> especifica um valor de TaskCreationOptions inválido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-911">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="0eb3f-912">A exceção lançada quando o argumento <paramref name="creationOptions" /> especifica um valor de TaskCreationOptions inválido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-912">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="0eb3f-913">Para obter mais informações, consulte as Observações para <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span><span class="sxs-lookup"><span data-stu-id="0eb3f-913">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-914">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-914">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="0eb3f-915">Usando TPL com outros padrões assíncronos</span><span class="sxs-lookup"><span data-stu-id="0eb3f-915">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync&lt;TArg1,TArg2&gt; (Func&lt;TArg1,TArg2,AsyncCallback,object,IAsyncResult&gt; beginMethod, Action&lt;IAsyncResult&gt; endMethod, TArg1 arg1, TArg2 arg2, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync&lt;TArg1, TArg2&gt;(class System.Func`5&lt;!!TArg1, !!TArg2, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TArg2) (beginMethod As Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), arg1 As TArg1, arg2 As TArg2, state As Object) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TArg2&gt;&#xA; System::Threading::Tasks::Task ^ FromAsync(Func&lt;TArg1, TArg2, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Action&lt;IAsyncResult ^&gt; ^ endMethod, TArg1 arg1, TArg2 arg2, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, 'TArg2, AsyncCallback, obj, IAsyncResult&gt; * Action&lt;IAsyncResult&gt; * 'TArg1 * 'TArg2 * obj -&gt; System.Threading.Tasks.Task" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, arg2, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="0eb3f-916">O tipo do segundo argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-916">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg2"><span data-ttu-id="0eb3f-917">O tipo do primeiro argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-917">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="0eb3f-918">O delegado que inicia a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-918">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="0eb3f-919">O delegado que finaliza a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-919">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="0eb3f-920">O primeiro argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-920">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg2"><span data-ttu-id="0eb3f-921">O segundo argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-921">The second argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="0eb3f-922">Um objeto que contém dados a serem usados pelo delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-922">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <summary><span data-ttu-id="0eb3f-923">Cria um <see cref="T:System.Threading.Tasks.Task" /> que representa um par de métodos begin e end que estão em conformidade com o padrão do Modelo de Programação Assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-923">Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-924">O <see cref="T:System.Threading.Tasks.Task" /> criado que representa a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-924">The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eb3f-925">O `beginMethod` delegado é iniciado no thread que <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> está em execução no.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-925">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="0eb3f-926">Esse método gera as exceções geradas pelo `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-926">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-927">A exceção lançada quando o argumento <paramref name="beginMethod" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-927">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="0eb3f-928">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-928">-or-</span></span> 
<span data-ttu-id="0eb3f-929">A exceção lançada quando o argumento <paramref name="endMethod" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-929">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-930">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-930">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="0eb3f-931">Usando TPL com outros padrões assíncronos</span><span class="sxs-lookup"><span data-stu-id="0eb3f-931">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync&lt;TArg1,TArg2&gt; (Func&lt;TArg1,TArg2,AsyncCallback,object,IAsyncResult&gt; beginMethod, Action&lt;IAsyncResult&gt; endMethod, TArg1 arg1, TArg2 arg2, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync&lt;TArg1, TArg2&gt;(class System.Func`5&lt;!!TArg1, !!TArg2, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TArg2) (beginMethod As Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), arg1 As TArg1, arg2 As TArg2, state As Object, creationOptions As TaskCreationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TArg2&gt;&#xA; System::Threading::Tasks::Task ^ FromAsync(Func&lt;TArg1, TArg2, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Action&lt;IAsyncResult ^&gt; ^ endMethod, TArg1 arg1, TArg2 arg2, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, 'TArg2, AsyncCallback, obj, IAsyncResult&gt; * Action&lt;IAsyncResult&gt; * 'TArg1 * 'TArg2 * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, arg2, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="0eb3f-932">O tipo do segundo argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-932">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg2"><span data-ttu-id="0eb3f-933">O tipo do primeiro argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-933">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="0eb3f-934">O delegado que inicia a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-934">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="0eb3f-935">O delegado que finaliza a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-935">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="0eb3f-936">O primeiro argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-936">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg2"><span data-ttu-id="0eb3f-937">O segundo argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-937">The second argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="0eb3f-938">Um objeto que contém dados a serem usados pelo delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-938">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="0eb3f-939">O valor de TaskCreationOptions que controla o comportamento do <see cref="T:System.Threading.Tasks.Task" /> criado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-939">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" />.</span></span></param>
        <summary><span data-ttu-id="0eb3f-940">Cria um <see cref="T:System.Threading.Tasks.Task" /> que representa um par de métodos begin e end que estão em conformidade com o padrão do Modelo de Programação Assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-940">Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-941">O <see cref="T:System.Threading.Tasks.Task" /> criado que representa a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-941">The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eb3f-942">O `beginMethod` delegado é iniciado no thread que <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> está em execução no.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-942">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="0eb3f-943">Esse método gera as exceções geradas pelo `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-943">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-944">A exceção lançada quando o argumento <paramref name="beginMethod" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-944">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="0eb3f-945">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-945">-or-</span></span> 
<span data-ttu-id="0eb3f-946">A exceção lançada quando o argumento <paramref name="endMethod" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-946">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0eb3f-947">A exceção lançada quando o argumento <paramref name="creationOptions" /> especifica um valor de TaskCreationOptions inválido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-947">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="0eb3f-948">A exceção lançada quando o argumento <paramref name="creationOptions" /> especifica um valor de TaskCreationOptions inválido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-948">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="0eb3f-949">Para obter mais informações, consulte as Observações para <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span><span class="sxs-lookup"><span data-stu-id="0eb3f-949">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-950">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-950">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="0eb3f-951">Usando TPL com outros padrões assíncronos</span><span class="sxs-lookup"><span data-stu-id="0eb3f-951">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1,TResult&gt; (Func&lt;TArg1,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TArg1, TResult&gt;(class System.Func`4&lt;!!TArg1, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, !!TArg1 arg1, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TResult) (beginMethod As Func(Of TArg1, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, state As Object) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;TArg1, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, TArg1 arg1, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * 'TArg1 * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="0eb3f-952">O tipo do primeiro argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-952">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="0eb3f-953">O tipo de resultado disponível por meio de <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-953">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="0eb3f-954">O delegado que inicia a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-954">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="0eb3f-955">O delegado que finaliza a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-955">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="0eb3f-956">O primeiro argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-956">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="0eb3f-957">Um objeto que contém dados a serem usados pelo delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-957">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <summary><span data-ttu-id="0eb3f-958">Cria um <see cref="T:System.Threading.Tasks.Task`1" /> que representa um par de métodos begin e end que estão em conformidade com o padrão do Modelo de Programação Assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-958">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-959">O <see cref="T:System.Threading.Tasks.Task`1" /> criado que representa a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-959">The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eb3f-960">O `beginMethod` delegado é iniciado no thread que <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> está em execução no.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-960">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="0eb3f-961">Esse método gera as exceções geradas pelo `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-961">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-962">A exceção lançada quando o argumento <paramref name="beginMethod" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-962">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="0eb3f-963">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-963">-or-</span></span> 
<span data-ttu-id="0eb3f-964">A exceção lançada quando o argumento <paramref name="endMethod" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-964">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-965">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-965">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="0eb3f-966">Usando TPL com outros padrões assíncronos</span><span class="sxs-lookup"><span data-stu-id="0eb3f-966">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1,TResult&gt; (Func&lt;TArg1,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TArg1, TResult&gt;(class System.Func`4&lt;!!TArg1, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, !!TArg1 arg1, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TResult) (beginMethod As Func(Of TArg1, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;TArg1, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, TArg1 arg1, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * 'TArg1 * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="0eb3f-967">O tipo do primeiro argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-967">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="0eb3f-968">O tipo de resultado disponível por meio de <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-968">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="0eb3f-969">O delegado que inicia a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-969">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="0eb3f-970">O delegado que finaliza a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-970">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="0eb3f-971">O primeiro argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-971">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="0eb3f-972">Um objeto que contém dados a serem usados pelo delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-972">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="0eb3f-973">O valor de TaskCreationOptions que controla o comportamento do <see cref="T:System.Threading.Tasks.Task`1" /> criado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-973">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="0eb3f-974">Cria um <see cref="T:System.Threading.Tasks.Task`1" /> que representa um par de métodos begin e end que estão em conformidade com o padrão do Modelo de Programação Assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-974">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-975">O <see cref="T:System.Threading.Tasks.Task`1" /> criado que representa a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-975">The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eb3f-976">O `beginMethod` delegado é iniciado no thread que <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> está em execução no.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-976">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="0eb3f-977">Esse método gera as exceções geradas pelo `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-977">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-978">A exceção lançada quando o argumento <paramref name="beginMethod" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-978">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="0eb3f-979">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-979">-or-</span></span> 
<span data-ttu-id="0eb3f-980">A exceção lançada quando o argumento <paramref name="endMethod" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-980">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0eb3f-981">A exceção lançada quando o argumento <paramref name="creationOptions" /> especifica um valor de TaskCreationOptions inválido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-981">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="0eb3f-982">A exceção lançada quando o argumento <paramref name="creationOptions" /> especifica um valor de TaskCreationOptions inválido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-982">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="0eb3f-983">Para obter mais informações, consulte as Observações para <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span><span class="sxs-lookup"><span data-stu-id="0eb3f-983">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-984">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-984">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="0eb3f-985">Usando TPL com outros padrões assíncronos</span><span class="sxs-lookup"><span data-stu-id="0eb3f-985">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2,TArg3&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync&lt;TArg1,TArg2,TArg3&gt; (Func&lt;TArg1,TArg2,TArg3,AsyncCallback,object,IAsyncResult&gt; beginMethod, Action&lt;IAsyncResult&gt; endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync&lt;TArg1, TArg2, TArg3&gt;(class System.Func`6&lt;!!TArg1, !!TArg2, !!TArg3, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, !!TArg3 arg3, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TArg2, TArg3) (beginMethod As Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, state As Object) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TArg2, typename TArg3&gt;&#xA; System::Threading::Tasks::Task ^ FromAsync(Func&lt;TArg1, TArg2, TArg3, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Action&lt;IAsyncResult ^&gt; ^ endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, 'TArg2, 'TArg3, AsyncCallback, obj, IAsyncResult&gt; * Action&lt;IAsyncResult&gt; * 'TArg1 * 'TArg2 * 'TArg3 * obj -&gt; System.Threading.Tasks.Task" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, arg2, arg3, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TArg3" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="arg3" Type="TArg3" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="0eb3f-986">O tipo do segundo argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-986">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg2"><span data-ttu-id="0eb3f-987">O tipo do terceiro argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-987">The type of the third argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg3"><span data-ttu-id="0eb3f-988">O tipo do primeiro argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-988">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="0eb3f-989">O delegado que inicia a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-989">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="0eb3f-990">O delegado que finaliza a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-990">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="0eb3f-991">O primeiro argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-991">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg2"><span data-ttu-id="0eb3f-992">O segundo argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-992">The second argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg3"><span data-ttu-id="0eb3f-993">O terceiro argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-993">The third argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="0eb3f-994">Um objeto que contém dados a serem usados pelo delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-994">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <summary><span data-ttu-id="0eb3f-995">Cria um <see cref="T:System.Threading.Tasks.Task" /> que representa um par de métodos begin e end que estão em conformidade com o padrão do Modelo de Programação Assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-995">Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-996">O <see cref="T:System.Threading.Tasks.Task" /> criado que representa a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-996">The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eb3f-997">O `beginMethod` delegado é iniciado no thread que <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> está em execução no.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-997">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="0eb3f-998">Esse método gera as exceções geradas pelo `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-998">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-999">A exceção lançada quando o argumento <paramref name="beginMethod" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-999">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="0eb3f-1000">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1000">-or-</span></span> 
<span data-ttu-id="0eb3f-1001">A exceção lançada quando o argumento <paramref name="endMethod" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1001">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-1002">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1002">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="0eb3f-1003">Usando TPL com outros padrões assíncronos</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1003">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2,TArg3&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync&lt;TArg1,TArg2,TArg3&gt; (Func&lt;TArg1,TArg2,TArg3,AsyncCallback,object,IAsyncResult&gt; beginMethod, Action&lt;IAsyncResult&gt; endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync&lt;TArg1, TArg2, TArg3&gt;(class System.Func`6&lt;!!TArg1, !!TArg2, !!TArg3, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, !!TArg3 arg3, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TArg2, TArg3) (beginMethod As Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, state As Object, creationOptions As TaskCreationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TArg2, typename TArg3&gt;&#xA; System::Threading::Tasks::Task ^ FromAsync(Func&lt;TArg1, TArg2, TArg3, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Action&lt;IAsyncResult ^&gt; ^ endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, 'TArg2, 'TArg3, AsyncCallback, obj, IAsyncResult&gt; * Action&lt;IAsyncResult&gt; * 'TArg1 * 'TArg2 * 'TArg3 * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, arg2, arg3, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TArg3" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="arg3" Type="TArg3" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="0eb3f-1004">O tipo do segundo argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1004">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg2"><span data-ttu-id="0eb3f-1005">O tipo do terceiro argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1005">The type of the third argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg3"><span data-ttu-id="0eb3f-1006">O tipo do primeiro argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1006">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="0eb3f-1007">O delegado que inicia a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1007">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="0eb3f-1008">O delegado que finaliza a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1008">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="0eb3f-1009">O primeiro argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1009">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg2"><span data-ttu-id="0eb3f-1010">O segundo argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1010">The second argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg3"><span data-ttu-id="0eb3f-1011">O terceiro argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1011">The third argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="0eb3f-1012">Um objeto que contém dados a serem usados pelo delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1012">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="0eb3f-1013">O valor de TaskCreationOptions que controla o comportamento do <see cref="T:System.Threading.Tasks.Task" /> criado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1013">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" />.</span></span></param>
        <summary><span data-ttu-id="0eb3f-1014">Cria um <see cref="T:System.Threading.Tasks.Task" /> que representa um par de métodos begin e end que estão em conformidade com o padrão do Modelo de Programação Assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1014">Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-1015">O <see cref="T:System.Threading.Tasks.Task" /> criado que representa a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1015">The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eb3f-1016">O `beginMethod` delegado é iniciado no thread que <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> está em execução no.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1016">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="0eb3f-1017">Esse método gera as exceções geradas pelo `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1017">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-1018">A exceção lançada quando o argumento <paramref name="beginMethod" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1018">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="0eb3f-1019">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1019">-or-</span></span> 
<span data-ttu-id="0eb3f-1020">A exceção lançada quando o argumento <paramref name="endMethod" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1020">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0eb3f-1021">A exceção lançada quando o argumento <paramref name="creationOptions" /> especifica um valor de TaskCreationOptions inválido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1021">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="0eb3f-1022">A exceção lançada quando o argumento <paramref name="creationOptions" /> especifica um valor de TaskCreationOptions inválido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1022">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="0eb3f-1023">Para obter mais informações, consulte as Observações para <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span><span class="sxs-lookup"><span data-stu-id="0eb3f-1023">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-1024">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1024">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="0eb3f-1025">Usando TPL com outros padrões assíncronos</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1025">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1,TArg2,TResult&gt; (Func&lt;TArg1,TArg2,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, TArg2 arg2, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TArg1, TArg2, TResult&gt;(class System.Func`5&lt;!!TArg1, !!TArg2, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TArg2, TResult) (beginMethod As Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, state As Object) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TArg2, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;TArg1, TArg2, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, TArg1 arg1, TArg2 arg2, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, 'TArg2, AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * 'TArg1 * 'TArg2 * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, arg2, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="0eb3f-1026">O tipo do segundo argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1026">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg2"><span data-ttu-id="0eb3f-1027">O tipo do primeiro argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1027">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="0eb3f-1028">O tipo de resultado disponível por meio de <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1028">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="0eb3f-1029">O delegado que inicia a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1029">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="0eb3f-1030">O delegado que finaliza a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1030">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="0eb3f-1031">O primeiro argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1031">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg2"><span data-ttu-id="0eb3f-1032">O segundo argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1032">The second argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="0eb3f-1033">Um objeto que contém dados a serem usados pelo delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1033">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <summary><span data-ttu-id="0eb3f-1034">Cria um <see cref="T:System.Threading.Tasks.Task`1" /> que representa um par de métodos begin e end que estão em conformidade com o padrão do Modelo de Programação Assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1034">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-1035">O <see cref="T:System.Threading.Tasks.Task`1" /> criado que representa a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1035">The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eb3f-1036">O `beginMethod` delegado é iniciado no thread que <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> está em execução no.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1036">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="0eb3f-1037">Esse método gera as exceções geradas pelo `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1037">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-1038">A exceção lançada quando o argumento <paramref name="beginMethod" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1038">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="0eb3f-1039">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1039">-or-</span></span> 
<span data-ttu-id="0eb3f-1040">A exceção lançada quando o argumento <paramref name="endMethod" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1040">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-1041">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1041">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="0eb3f-1042">Usando TPL com outros padrões assíncronos</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1042">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1,TArg2,TResult&gt; (Func&lt;TArg1,TArg2,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, TArg2 arg2, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TArg1, TArg2, TResult&gt;(class System.Func`5&lt;!!TArg1, !!TArg2, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TArg2, TResult) (beginMethod As Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TArg2, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;TArg1, TArg2, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, TArg1 arg1, TArg2 arg2, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, 'TArg2, AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * 'TArg1 * 'TArg2 * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, arg2, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="0eb3f-1043">O tipo do segundo argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1043">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg2"><span data-ttu-id="0eb3f-1044">O tipo do primeiro argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1044">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="0eb3f-1045">O tipo de resultado disponível por meio de <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1045">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="0eb3f-1046">O delegado que inicia a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1046">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="0eb3f-1047">O delegado que finaliza a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1047">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="0eb3f-1048">O primeiro argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1048">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg2"><span data-ttu-id="0eb3f-1049">O segundo argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1049">The second argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="0eb3f-1050">Um objeto que contém dados a serem usados pelo delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1050">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="0eb3f-1051">O valor de TaskCreationOptions que controla o comportamento do <see cref="T:System.Threading.Tasks.Task`1" /> criado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1051">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="0eb3f-1052">Cria um <see cref="T:System.Threading.Tasks.Task`1" /> que representa um par de métodos begin e end que estão em conformidade com o padrão do Modelo de Programação Assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1052">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-1053">O <see cref="T:System.Threading.Tasks.Task`1" /> criado que representa a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1053">The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eb3f-1054">O `beginMethod` delegado é iniciado no thread que <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> está em execução no.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1054">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="0eb3f-1055">Esse método gera as exceções geradas pelo `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1055">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-1056">A exceção lançada quando o argumento <paramref name="beginMethod" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1056">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="0eb3f-1057">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1057">-or-</span></span> 
<span data-ttu-id="0eb3f-1058">A exceção lançada quando o argumento <paramref name="endMethod" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1058">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0eb3f-1059">A exceção lançada quando o argumento <paramref name="creationOptions" /> especifica um valor de TaskCreationOptions inválido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1059">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="0eb3f-1060">A exceção lançada quando o argumento <paramref name="creationOptions" /> especifica um valor de TaskCreationOptions inválido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1060">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="0eb3f-1061">Para obter mais informações, consulte as Observações para <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span><span class="sxs-lookup"><span data-stu-id="0eb3f-1061">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-1062">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1062">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="0eb3f-1063">Usando TPL com outros padrões assíncronos</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1063">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2,TArg3,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1,TArg2,TArg3,TResult&gt; (Func&lt;TArg1,TArg2,TArg3,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TArg1, TArg2, TArg3, TResult&gt;(class System.Func`6&lt;!!TArg1, !!TArg2, !!TArg3, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, !!TArg3 arg3, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TArg2, TArg3, TResult) (beginMethod As Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, state As Object) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TArg2, typename TArg3, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;TArg1, TArg2, TArg3, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, 'TArg2, 'TArg3, AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * 'TArg1 * 'TArg2 * 'TArg3 * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, arg2, arg3, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TArg3" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="arg3" Type="TArg3" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="0eb3f-1064">O tipo do segundo argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1064">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg2"><span data-ttu-id="0eb3f-1065">O tipo do terceiro argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1065">The type of the third argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg3"><span data-ttu-id="0eb3f-1066">O tipo do primeiro argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1066">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="0eb3f-1067">O tipo de resultado disponível por meio de <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1067">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="0eb3f-1068">O delegado que inicia a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1068">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="0eb3f-1069">O delegado que finaliza a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1069">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="0eb3f-1070">O primeiro argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1070">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg2"><span data-ttu-id="0eb3f-1071">O segundo argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1071">The second argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg3"><span data-ttu-id="0eb3f-1072">O terceiro argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1072">The third argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="0eb3f-1073">Um objeto que contém dados a serem usados pelo delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1073">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <summary><span data-ttu-id="0eb3f-1074">Cria um <see cref="T:System.Threading.Tasks.Task`1" /> que representa um par de métodos begin e end que estão em conformidade com o padrão do Modelo de Programação Assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1074">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-1075">O <see cref="T:System.Threading.Tasks.Task`1" /> criado que representa a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1075">The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eb3f-1076">O `beginMethod` delegado é iniciado no thread que <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> está em execução no.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1076">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="0eb3f-1077">Esse método gera as exceções geradas pelo `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1077">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-1078">A exceção lançada quando o argumento <paramref name="beginMethod" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1078">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="0eb3f-1079">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1079">-or-</span></span> 
<span data-ttu-id="0eb3f-1080">A exceção lançada quando o argumento <paramref name="endMethod" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1080">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-1081">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1081">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="0eb3f-1082">Usando TPL com outros padrões assíncronos</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1082">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2,TArg3,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1,TArg2,TArg3,TResult&gt; (Func&lt;TArg1,TArg2,TArg3,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TArg1, TArg2, TArg3, TResult&gt;(class System.Func`6&lt;!!TArg1, !!TArg2, !!TArg3, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, !!TArg3 arg3, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TArg2, TArg3, TResult) (beginMethod As Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TArg2, typename TArg3, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;TArg1, TArg2, TArg3, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, 'TArg2, 'TArg3, AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * 'TArg1 * 'TArg2 * 'TArg3 * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, arg2, arg3, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TArg3" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="arg3" Type="TArg3" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="0eb3f-1083">O tipo do segundo argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1083">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg2"><span data-ttu-id="0eb3f-1084">O tipo do terceiro argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1084">The type of the third argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg3"><span data-ttu-id="0eb3f-1085">O tipo do primeiro argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1085">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="0eb3f-1086">O tipo de resultado disponível por meio de <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1086">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="0eb3f-1087">O delegado que inicia a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1087">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="0eb3f-1088">O delegado que finaliza a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1088">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="0eb3f-1089">O primeiro argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1089">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg2"><span data-ttu-id="0eb3f-1090">O segundo argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1090">The second argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg3"><span data-ttu-id="0eb3f-1091">O terceiro argumento passado para o delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1091">The third argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="0eb3f-1092">Um objeto que contém dados a serem usados pelo delegado <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1092">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="0eb3f-1093">O valor de TaskCreationOptions que controla o comportamento do <see cref="T:System.Threading.Tasks.Task`1" /> criado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1093">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="0eb3f-1094">Cria um <see cref="T:System.Threading.Tasks.Task`1" /> que representa um par de métodos begin e end que estão em conformidade com o padrão do Modelo de Programação Assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1094">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-1095">O <see cref="T:System.Threading.Tasks.Task`1" /> criado que representa a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1095">The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eb3f-1096">O `beginMethod` delegado é iniciado no thread que <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> está em execução no.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1096">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="0eb3f-1097">Esse método gera as exceções geradas pelo `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1097">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-1098">A exceção lançada quando o argumento <paramref name="beginMethod" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1098">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="0eb3f-1099">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1099">-or-</span></span> 
<span data-ttu-id="0eb3f-1100">A exceção lançada quando o argumento <paramref name="endMethod" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1100">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0eb3f-1101">A exceção lançada quando o argumento <paramref name="creationOptions" /> especifica um valor de TaskCreationOptions inválido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1101">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="0eb3f-1102">A exceção lançada quando o argumento <paramref name="creationOptions" /> especifica um valor de TaskCreationOptions inválido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1102">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="0eb3f-1103">Para obter mais informações, consulte as Observações para <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span><span class="sxs-lookup"><span data-stu-id="0eb3f-1103">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-1104">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1104">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="0eb3f-1105">Usando TPL com outros padrões assíncronos</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1105">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Scheduler">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.TaskScheduler Scheduler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.Tasks.TaskScheduler Scheduler" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.TaskFactory.Scheduler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Scheduler As TaskScheduler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Tasks::TaskScheduler ^ Scheduler { System::Threading::Tasks::TaskScheduler ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Scheduler : System.Threading.Tasks.TaskScheduler" Usage="System.Threading.Tasks.TaskFactory.Scheduler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskScheduler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0eb3f-1106">Obtém o agendador de tarefas padrão para esta fábrica de tarefas.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1106">Gets the default task scheduler for this task factory.</span></span></summary>
        <value><span data-ttu-id="0eb3f-1107">O agendador de tarefas padrão para esta fábrica de tarefas.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1107">The default task scheduler for this task factory.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eb3f-1108">O valor da propriedade é usado para agendar todas as tarefas, a menos que outro Agendador é explicitamente especificado durante as chamadas para métodos dessa fábrica.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1108">The property value is used to schedule all tasks, unless another scheduler is explicitly specified during calls to this factory's methods.</span></span>  
  
 <span data-ttu-id="0eb3f-1109">Se o valor dessa propriedade é `null`, o valor da <xref:System.Threading.Tasks.TaskScheduler.Current%2A> propriedade é usada.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1109">If this property value is `null`, the value of the <xref:System.Threading.Tasks.TaskScheduler.Current%2A> property is used.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.Tasks.TaskScheduler" />
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-1110">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1110">Task Parallel Library (TPL)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="StartNew">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0eb3f-1111">Cria e inicia um <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1111">Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eb3f-1112">Começando com o [!INCLUDE[net_v45](~/includes/net-v45-md.md)], o <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> método é a maneira recomendada para iniciar uma tarefa associada ao cálculo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1112">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> method is the recommended way to launch a compute-bound task.</span></span> <span data-ttu-id="0eb3f-1113">Use o <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> método somente quando você precisar de um controle refinado para uma tarefa de execução longa e associadas ao cálculo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1113">Use the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method only when you require fine-grained control for a long-running, compute-bound task.</span></span> <span data-ttu-id="0eb3f-1114">Isso inclui cenários em que você deseja controlar o seguinte:</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1114">This includes scenarios in which you want to control the following:</span></span>  
  
-   <span data-ttu-id="0eb3f-1115">Opções de criação de tarefas.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1115">Task creation options.</span></span> <span data-ttu-id="0eb3f-1116">As tarefas criadas pela <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> método por padrão são criados com o <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType> opção.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1116">Tasks created by the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> method by default are created with the <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType> option.</span></span> <span data-ttu-id="0eb3f-1117">Para substituir esse comportamento, ou fornecer outros <xref:System.Threading.Tasks.TaskCreationOptions> opções, chame um <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> de sobrecarga.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1117">To override this behavior, or to provide other <xref:System.Threading.Tasks.TaskCreationOptions> options, call a <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> overload.</span></span>  
  
-   <span data-ttu-id="0eb3f-1118">Passagem de parâmetro.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1118">Parameter passing.</span></span> <span data-ttu-id="0eb3f-1119">As sobrecargas de <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> método permite que você passe um parâmetro para o delegado da tarefa.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1119">The overloads of the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> method do not allow you to pass a parameter to the task delegate.</span></span> <span data-ttu-id="0eb3f-1120">Sobrecargas do <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> método faz.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1120">Overloads of the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method do.</span></span>  
  
-   <span data-ttu-id="0eb3f-1121">O Agendador de tarefas.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1121">The task scheduler.</span></span> <span data-ttu-id="0eb3f-1122">As sobrecargas de <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> método usar o Agendador de tarefas padrão.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1122">The overloads of the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> method use the default task scheduler.</span></span> <span data-ttu-id="0eb3f-1123">Para controlar o Agendador de tarefas, chamar um <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> sobrecarga com um `scheduler` parâmetro.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1123">To control the task scheduler, call a <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> overload with a `scheduler` parameter.</span></span> <span data-ttu-id="0eb3f-1124">Para obter mais informações, consulte <xref:System.Threading.Tasks.TaskScheduler>.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1124">For more information, see <xref:System.Threading.Tasks.TaskScheduler>.</span></span>
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/Samples-for-Parallel-b4b76364"><span data-ttu-id="0eb3f-1125">Exemplos de programação paralela com o .NET Framework</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1125">Samples for Parallel Programming with the .NET Framework</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartNew (Action action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNew(class System.Action action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ StartNew(Action ^ action);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Action -&gt; System.Threading.Tasks.Task" Usage="taskFactory.StartNew action" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="0eb3f-1126">O delegado da ação a ser executado de forma assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1126">The action delegate to execute asynchronously.</span></span></param>
        <summary><span data-ttu-id="0eb3f-1127">Cria e inicia uma tarefa.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1127">Creates and starts a task.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-1128">A tarefa iniciada.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1128">The started task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eb3f-1129">Chamando <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> é funcionalmente equivalente à criação de uma tarefa usando um dos seus construtores e, em seguida, chamar o <xref:System.Threading.Tasks.Task.Start%2A?displayProperty=nameWithType> método para agendar a tarefa para execução.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1129">Calling <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> is functionally equivalent to creating a task by using one of its constructors, and then calling the <xref:System.Threading.Tasks.Task.Start%2A?displayProperty=nameWithType> method to schedule the task for execution.</span></span>  
  
 <span data-ttu-id="0eb3f-1130">Começando com o [!INCLUDE[net_v45](~/includes/net-v45-md.md)], você pode usar o <xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=nameWithType> o método como uma maneira rápida de chamar <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29> com parâmetros padrão.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1130">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=nameWithType> method as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29> with default parameters.</span></span> <span data-ttu-id="0eb3f-1131">No entanto, observe que há uma diferença no comportamento entre os dois métodos em relação ao: <xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=nameWithType> por padrão não permite filho tarefas iniciadas com o <xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent?displayProperty=nameWithType> opção de anexar à atual <xref:System.Threading.Tasks.Task> da instância, ao passo que <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29> faz.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1131">Note, however, that there is a difference in behavior between the two methods regarding : <xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=nameWithType> by default does not allow child tasks started with the <xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent?displayProperty=nameWithType> option to attach to the current <xref:System.Threading.Tasks.Task> instance, whereas <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29> does.</span></span> <span data-ttu-id="0eb3f-1132">Para obter mais informações e exemplos de código, consulte [Task. Run vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) na programação paralela no blog do .NET.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1132">For more information and code examples, see [Task.Run vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0eb3f-1133">O exemplo a seguir usa o <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29> método a ser invocado repetidamente um <xref:System.Action> delegado que gera um número aleatório, interpreta como um ponto de código Unicode, converte-o em uma unidade de código UTF16 codificado e exibe informações sobre resultante caractere ou caracteres.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1133">The following example uses the <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29> method to repeatedly invoke an <xref:System.Action> delegate that generates a random number, interprets it as a Unicode code point, converts it to a UTF16-encoded code unit, and displays information about the resulting character or characters.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.TaskFactory.StartNew#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.taskfactory.startnew/cs/startnew1.cs#1)]
 [!code-vb[System.Threading.Tasks.TaskFactory.StartNew#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.taskfactory.startnew/vb/startnew1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-1134">O argumento <paramref name="action" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1134">The <paramref name="action" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-1135">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1135">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="0eb3f-1136">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1136">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="0eb3f-1137">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1137">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartNew (Action action, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNew(class System.Action action, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ StartNew(Action ^ action, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Action * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="taskFactory.StartNew (action, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="0eb3f-1138">O delegado da ação a ser executado de forma assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1138">The action delegate to execute asynchronously.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="0eb3f-1139">O <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> que será atribuído a nova tarefa.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1139">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new task.</span></span></param>
        <summary><span data-ttu-id="0eb3f-1140">Cria e inicia um <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1140">Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-1141">O <see cref="T:System.Threading.Tasks.Task" /> iniciado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1141">The started <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eb3f-1142">Chamando `StartNew` é funcionalmente equivalente à criação de uma tarefa usando um dos seus construtores e em seguida, chamando <xref:System.Threading.Tasks.Task.Start%2A> agendá-lo para execução.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1142">Calling `StartNew` is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="0eb3f-1143">Começando com o [!INCLUDE[net_v45](~/includes/net-v45-md.md)], você pode usar o <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> o método como uma maneira rápida de chamar <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29> com parâmetros padrão.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1143">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> method as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29> with default parameters.</span></span> <span data-ttu-id="0eb3f-1144">No entanto, observe que há uma diferença no comportamento entre os dois métodos em relação ao: <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> por padrão não permite filho tarefas iniciadas com o <xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent?displayProperty=nameWithType> opção de anexar à atual <xref:System.Threading.Tasks.Task> da instância, ao passo que <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29> faz.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1144">Note, however, that there is a difference in behavior between the two methods regarding : <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> by default does not allow child tasks started with the <xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent?displayProperty=nameWithType> option to attach to the current <xref:System.Threading.Tasks.Task> instance, whereas <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29> does.</span></span> <span data-ttu-id="0eb3f-1145">Para obter mais informações e exemplos de código, consulte [Task. Run vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) na programação paralela no blog do .NET.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1145">For more information and code examples, see [Task.Run vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0eb3f-1146">A exemplo a seguir chama o <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29> método para criar uma tarefa que itera os arquivos no diretório C:\Windows\System32.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1146">The following example calls the <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29> method to create a task that iterates the files in the C:\Windows\System32 directory.</span></span> <span data-ttu-id="0eb3f-1147">A expressão de lambda chama o <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> método para adicionar informações sobre cada arquivo a um <xref:System.Collections.Generic.List%601> objeto.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1147">The lambda expression calls the <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method to add information about each  file to a <xref:System.Collections.Generic.List%601> object.</span></span> <span data-ttu-id="0eb3f-1148">Cada desanexado tarefa aninhada invocada pelo <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> loop verifica o estado do token de cancelamento e, se for solicitado um cancelamento, chama o <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1148">Each detached nested task invoked by the <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> loop checks the state of the cancellation token and, if cancellation is requested, calls the <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="0eb3f-1149">O <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> método lança um <xref:System.OperationCanceledException> exceção que é tratada em um `catch` bloquear quando o thread de chamada chama o <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1149">The <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> method throws an <xref:System.OperationCanceledException> exception that is handled in a `catch` block when the calling thread calls the <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.TaskFactory.StartNew#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.taskfactory.startnew/cs/startnew2.cs#2)]
 [!code-vb[System.Threading.Tasks.TaskFactory.StartNew#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.taskfactory.startnew/vb/startnew2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="0eb3f-1150">O <see cref="T:System.Threading.CancellationToken" /> fornecido já foi descartado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1150">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-1151">A exceção lançada quando o argumento <paramref name="action" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1151">The exception that is thrown when the <paramref name="action" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-1152">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1152">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="0eb3f-1153">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1153">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="0eb3f-1154">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1154">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartNew (Action action, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNew(class System.Action action, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ StartNew(Action ^ action, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Action * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task" Usage="taskFactory.StartNew (action, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="0eb3f-1155">O delegado da ação a ser executado de forma assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1155">The action delegate to execute asynchronously.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="0eb3f-1156">Um valor de TaskCreationOptions que controla o comportamento do <see cref="T:System.Threading.Tasks.Task" /> criado</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1156">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" /></span></span></param>
        <summary><span data-ttu-id="0eb3f-1157">Cria e inicia um <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1157">Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-1158">O <see cref="T:System.Threading.Tasks.Task" /> iniciado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1158">The started <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eb3f-1159">Chamar StartNew é funcionalmente equivalente à criação de uma tarefa usando um dos seus construtores e em seguida, chamando <xref:System.Threading.Tasks.Task.Start%2A> agendá-lo para execução.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1159">Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="0eb3f-1160">Começando com o [!INCLUDE[net_v45](~/includes/net-v45-md.md)], você pode usar o <xref:System.Threading.Tasks.Task.Run%2A> método com um <xref:System.Action> objeto como uma maneira rápida para chamar <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> com parâmetros padrão.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1160">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="0eb3f-1161">Para obter mais informações e exemplos de código, consulte [Task. Run vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) na programação paralela no blog do .NET.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1161">For more information and code examples, see [Task.Run vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-1162">A exceção lançada quando o argumento <paramref name="action" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1162">The exception that is thrown when the <paramref name="action" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0eb3f-1163">A exceção lançada quando o argumento <paramref name="creationOptions" /> especifica um valor de TaskCreationOptions inválido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1163">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-1164">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1164">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="0eb3f-1165">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1165">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="0eb3f-1166">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1166">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartNew (Action&lt;object&gt; action, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNew(class System.Action`1&lt;object&gt; action, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartNew (action As Action(Of Object), state As Object) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ StartNew(Action&lt;System::Object ^&gt; ^ action, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Action&lt;obj&gt; * obj -&gt; System.Threading.Tasks.Task" Usage="taskFactory.StartNew (action, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="0eb3f-1167">O delegado da ação a ser executado de forma assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1167">The action delegate to execute asynchronously.</span></span></param>
        <param name="state"><span data-ttu-id="0eb3f-1168">Um objeto que contém dados a serem usados pelo delegado <paramref name="action" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1168">An object containing data to be used by the <paramref name="action" /> delegate.</span></span></param>
        <summary><span data-ttu-id="0eb3f-1169">Cria e inicia um <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1169">Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-1170">O <see cref="T:System.Threading.Tasks.Task" /> iniciado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1170">The started <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eb3f-1171">Chamando <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> é funcionalmente equivalente à criação de um <xref:System.Threading.Tasks.Task> usando um dos seus construtores e, em seguida, chamar o <xref:System.Threading.Tasks.Task.Start%2A> método agendá-lo para execução.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1171">Calling <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> is functionally equivalent to creating a <xref:System.Threading.Tasks.Task> using one of its constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.</span></span>  
  
 <span data-ttu-id="0eb3f-1172">Começando com o [!INCLUDE[net_v45](~/includes/net-v45-md.md)], você pode usar o <xref:System.Threading.Tasks.Task.Run%2A> método com um <xref:System.Action> objeto como uma maneira rápida para chamar <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> com parâmetros padrão.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1172">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="0eb3f-1173">Para obter mais informações e exemplos de código, consulte [Task. Run vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) na programação paralela no blog do .NET.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1173">For more information and code examples, see [Task.Run vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0eb3f-1174">O exemplo a seguir define uma matriz de palavras de letras de 6.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1174">The following example defines an array of 6-letter words.</span></span> <span data-ttu-id="0eb3f-1175">Cada palavra é então passada para um <xref:System.Action%601> delegado, que embaralha a palavra e exibe a palavra original e sua versão embaralhado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1175">Each word is then passed to an <xref:System.Action%601> delegate, which scrambles the word and displays the original word and its scrambled version.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.TaskFactory.StartNew#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.taskfactory.startnew/cs/startnew3.cs#3)]
 [!code-vb[System.Threading.Tasks.TaskFactory.StartNew#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.taskfactory.startnew/vb/startnew3.vb#3)]  
  
 <span data-ttu-id="0eb3f-1176">Observe que o exemplo inicializa um único número aleatório, que é protegido por um bloqueio.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1176">Note that the example initializes a single random number generator, which is protected by a lock.</span></span> <span data-ttu-id="0eb3f-1177">Para a necessidade de um bloqueio, consulte "A Random classe e o thread de segurança" no <xref:System.Random> tópico da classe.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1177">For the need of a lock, see "The System.Random class and thread safety" in the <xref:System.Random> class topic.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-1178">O argumento <paramref name="action" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1178">The <paramref name="action" /> argument is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-1179">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1179">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="0eb3f-1180">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1180">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="0eb3f-1181">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1181">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartNew (Action&lt;object&gt; action, object state, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNew(class System.Action`1&lt;object&gt; action, object state, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ StartNew(Action&lt;System::Object ^&gt; ^ action, System::Object ^ state, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Action&lt;obj&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="taskFactory.StartNew (action, state, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="0eb3f-1182">O delegado da ação a ser executado de forma assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1182">The action delegate to execute asynchronously.</span></span></param>
        <param name="state"><span data-ttu-id="0eb3f-1183">Um objeto que contém dados a serem usados pelo delegado <paramref name="action" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1183">An object containing data to be used by the <paramref name="action" /> delegate.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="0eb3f-1184">O <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> que será atribuído ao novo <see cref="T:System.Threading.Tasks.Task" /></span><span class="sxs-lookup"><span data-stu-id="0eb3f-1184">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new <see cref="T:System.Threading.Tasks.Task" /></span></span></param>
        <summary><span data-ttu-id="0eb3f-1185">Cria e inicia um <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1185">Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-1186">O <see cref="T:System.Threading.Tasks.Task" /> iniciado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1186">The started <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eb3f-1187">Chamar StartNew é funcionalmente equivalente à criação de uma tarefa usando um dos seus construtores e em seguida, chamando <xref:System.Threading.Tasks.Task.Start%2A> agendá-lo para execução.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1187">Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="0eb3f-1188">Começando com o [!INCLUDE[net_v45](~/includes/net-v45-md.md)], você pode usar o <xref:System.Threading.Tasks.Task.Run%2A> método com um <xref:System.Action> objeto como uma maneira rápida para chamar <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> com parâmetros padrão.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1188">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="0eb3f-1189">Para obter mais informações e exemplos de código, consulte [Task. Run vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) na programação paralela no blog do .NET.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1189">For more information and code examples, see [Task.Run vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0eb3f-1190">O exemplo a seguir define uma matriz de palavras de letras de 6.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1190">The following example defines an array of 6-letter words.</span></span> <span data-ttu-id="0eb3f-1191">Cada palavra é então passada para um <xref:System.Action%601> delegado, que embaralha a palavra e exibe a palavra original e sua versão embaralhado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1191">Each word is then passed to an <xref:System.Action%601> delegate, which scrambles the word and displays the original word and its scrambled version.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.TaskFactory.StartNew#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.taskfactory.startnew/cs/startnew4.cs#4)]
 [!code-vb[System.Threading.Tasks.TaskFactory.StartNew#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.taskfactory.startnew/vb/startnew4.vb#4)]  
  
 <span data-ttu-id="0eb3f-1192">Observe que o exemplo inicializa um único número aleatório, que é protegido por um bloqueio.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1192">Note that the example initializes a single random number generator, which is protected by a lock.</span></span> <span data-ttu-id="0eb3f-1193">Para a necessidade de um bloqueio, consulte "A Random classe e o thread de segurança" no <xref:System.Random> tópico da classe.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1193">For the need of a lock, see "The System.Random class and thread safety" in the <xref:System.Random> class topic.</span></span> <span data-ttu-id="0eb3f-1194">Para lidar com a possibilidade de corrupção do gerador de número aleatório, um token de cancelamento é passado para a tarefa.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1194">To handle the possibility of corruption of the random number generator, a cancellation token is passed to task.</span></span> <span data-ttu-id="0eb3f-1195">Se dois números aleatórios igual a zero, o método pressupõe que o gerador de número aleatório está corrompido e define o token de cancelamento.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1195">If two random numbers equal zero, the method assumes that the random number generator is corrupted and sets the cancellation token.</span></span> <span data-ttu-id="0eb3f-1196">Antes de classificar o `chars` matriz que contém os seis caracteres de palavra, as chamadas de método de <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> método para lançar um <xref:System.OperationCanceledException> se o token foi cancelado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1196">Before sorting the `chars` array that contains the six characters in a word, the method calls the <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> method to throw an <xref:System.OperationCanceledException> if the token has been canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="0eb3f-1197">O <see cref="T:System.Threading.CancellationToken" /> fornecido já foi descartado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1197">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-1198">A exceção lançada quando o argumento <paramref name="action" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1198">The exception that is thrown when the <paramref name="action" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-1199">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1199">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="0eb3f-1200">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1200">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="0eb3f-1201">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1201">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartNew (Action&lt;object&gt; action, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNew(class System.Action`1&lt;object&gt; action, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartNew (action As Action(Of Object), state As Object, creationOptions As TaskCreationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ StartNew(Action&lt;System::Object ^&gt; ^ action, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Action&lt;obj&gt; * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task" Usage="taskFactory.StartNew (action, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="0eb3f-1202">O delegado da ação a ser executado de forma assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1202">The action delegate to execute asynchronously.</span></span></param>
        <param name="state"><span data-ttu-id="0eb3f-1203">Um objeto que contém dados a serem usados pelo delegado <paramref name="action" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1203">An object containing data to be used by the <paramref name="action" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="0eb3f-1204">Um valor de TaskCreationOptions que controla o comportamento do <see cref="T:System.Threading.Tasks.Task" /> criado</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1204">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" /></span></span></param>
        <summary><span data-ttu-id="0eb3f-1205">Cria e inicia um <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1205">Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-1206">O <see cref="T:System.Threading.Tasks.Task" /> iniciado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1206">The started <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eb3f-1207">Chamar StartNew é funcionalmente equivalente à criação de uma tarefa usando um dos seus construtores e em seguida, chamando <xref:System.Threading.Tasks.Task.Start%2A> agendá-lo para execução.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1207">Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="0eb3f-1208">Começando com o [!INCLUDE[net_v45](~/includes/net-v45-md.md)], você pode usar o <xref:System.Threading.Tasks.Task.Run%2A> método com um <xref:System.Action> objeto como uma maneira rápida para chamar <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> com parâmetros padrão.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1208">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="0eb3f-1209">Para obter mais informações e exemplos de código, consulte [Task. Run vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) na programação paralela no blog do .NET.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1209">For more information and code examples, see [Task.Run vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-1210">A exceção lançada quando o argumento <paramref name="action" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1210">The exception that is thrown when the <paramref name="action" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0eb3f-1211">A exceção lançada quando o argumento <paramref name="creationOptions" /> especifica um valor de TaskCreationOptions inválido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1211">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-1212">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1212">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="0eb3f-1213">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1213">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="0eb3f-1214">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1214">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartNew (Action action, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNew(class System.Action action, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ StartNew(Action ^ action, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Action * System.Threading.CancellationToken * System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="taskFactory.StartNew (action, cancellationToken, creationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="0eb3f-1215">O delegado da ação a ser executado de forma assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1215">The action delegate to execute asynchronously.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="0eb3f-1216">O <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> que será atribuído ao novo <see cref="T:System.Threading.Tasks.Task" /></span><span class="sxs-lookup"><span data-stu-id="0eb3f-1216">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new <see cref="T:System.Threading.Tasks.Task" /></span></span></param>
        <param name="creationOptions"><span data-ttu-id="0eb3f-1217">Um valor de TaskCreationOptions que controla o comportamento do <see cref="T:System.Threading.Tasks.Task" /> criado</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1217">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" /></span></span></param>
        <param name="scheduler"><span data-ttu-id="0eb3f-1218">O <see cref="T:System.Threading.Tasks.TaskScheduler" /> usado para agendar o <see cref="T:System.Threading.Tasks.Task" /> criado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1218">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created <see cref="T:System.Threading.Tasks.Task" />.</span></span></param>
        <summary><span data-ttu-id="0eb3f-1219">Cria e inicia um <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1219">Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-1220">O <see cref="T:System.Threading.Tasks.Task" /> iniciado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1220">The started <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eb3f-1221">Chamar StartNew é funcionalmente equivalente à criação de uma tarefa usando um dos seus construtores e em seguida, chamando <xref:System.Threading.Tasks.Task.Start%2A> agendá-lo para execução.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1221">Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="0eb3f-1222">Começando com o [!INCLUDE[net_v45](~/includes/net-v45-md.md)], você pode usar o <xref:System.Threading.Tasks.Task.Run%2A> método com um <xref:System.Action> objeto como uma maneira rápida para chamar <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> com parâmetros padrão.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1222">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="0eb3f-1223">Para obter mais informações e exemplos de código, consulte [Task. Run vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) na programação paralela no blog do .NET.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1223">For more information and code examples, see [Task.Run vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="0eb3f-1224">O <see cref="T:System.Threading.CancellationToken" /> fornecido já foi descartado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1224">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-1225">A exceção lançada quando o argumento <paramref name="action" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1225">The exception that is thrown when the <paramref name="action" /> argument is null.</span></span>  
  
<span data-ttu-id="0eb3f-1226">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1226">-or-</span></span> 
<span data-ttu-id="0eb3f-1227">A exceção lançada quando o argumento <paramref name="scheduler" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1227">The exception that is thrown when the <paramref name="scheduler" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0eb3f-1228">A exceção lançada quando o argumento <paramref name="creationOptions" /> especifica um valor de TaskCreationOptions inválido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1228">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="0eb3f-1229">A exceção lançada quando o argumento <paramref name="creationOptions" /> especifica um valor de TaskCreationOptions inválido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1229">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="0eb3f-1230">Para obter mais informações, consulte as Observações para <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span><span class="sxs-lookup"><span data-stu-id="0eb3f-1230">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-1231">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1231">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="0eb3f-1232">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1232">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="0eb3f-1233">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1233">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartNew (Action&lt;object&gt; action, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNew(class System.Action`1&lt;object&gt; action, object state, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ StartNew(Action&lt;System::Object ^&gt; ^ action, System::Object ^ state, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Action&lt;obj&gt; * obj * System.Threading.CancellationToken * System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="taskFactory.StartNew (action, state, cancellationToken, creationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="0eb3f-1234">O delegado da ação a ser executado de forma assíncrona.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1234">The action delegate to execute asynchronously.</span></span></param>
        <param name="state"><span data-ttu-id="0eb3f-1235">Um objeto que contém dados a serem usados pelo delegado <paramref name="action" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1235">An object containing data to be used by the <paramref name="action" /> delegate.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="0eb3f-1236">O <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> que será atribuído a nova tarefa.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1236">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new task.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="0eb3f-1237">Um valor de TaskCreationOptions que controla o comportamento do <see cref="T:System.Threading.Tasks.Task" /> criado</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1237">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" /></span></span></param>
        <param name="scheduler"><span data-ttu-id="0eb3f-1238">O <see cref="T:System.Threading.Tasks.TaskScheduler" /> usado para agendar o <see cref="T:System.Threading.Tasks.Task" /> criado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1238">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created <see cref="T:System.Threading.Tasks.Task" />.</span></span></param>
        <summary><span data-ttu-id="0eb3f-1239">Cria e inicia um <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1239">Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-1240">O <see cref="T:System.Threading.Tasks.Task" /> iniciado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1240">The started <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eb3f-1241">Chamar StartNew é funcionalmente equivalente à criação de uma tarefa usando um dos seus construtores e em seguida, chamando <xref:System.Threading.Tasks.Task.Start%2A> agendá-lo para execução.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1241">Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="0eb3f-1242">Começando com o [!INCLUDE[net_v45](~/includes/net-v45-md.md)], você pode usar o <xref:System.Threading.Tasks.Task.Run%2A> método com um <xref:System.Action> objeto como uma maneira rápida para chamar <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> com parâmetros padrão.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1242">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="0eb3f-1243">Para obter mais informações e exemplos de código, consulte [Task. Run vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) na programação paralela no blog do .NET.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1243">For more information and code examples, see [Task.Run vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="0eb3f-1244">O <see cref="T:System.Threading.CancellationToken" /> fornecido já foi descartado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1244">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-1245">A exceção lançada quando o argumento <paramref name="action" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1245">The exception that is thrown when the <paramref name="action" /> argument is null.</span></span>  
  
<span data-ttu-id="0eb3f-1246">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1246">-or-</span></span> 
<span data-ttu-id="0eb3f-1247">A exceção lançada quando o argumento <paramref name="scheduler" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1247">The exception that is thrown when the <paramref name="scheduler" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0eb3f-1248">A exceção lançada quando o argumento <paramref name="creationOptions" /> especifica um valor de TaskCreationOptions inválido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1248">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="0eb3f-1249">A exceção lançada quando o argumento <paramref name="creationOptions" /> especifica um valor de TaskCreationOptions inválido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1249">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="0eb3f-1250">Para obter mais informações, consulte as Observações para <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span><span class="sxs-lookup"><span data-stu-id="0eb3f-1250">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-1251">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1251">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="0eb3f-1252">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1252">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="0eb3f-1253">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1253">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew&lt;TResult&gt; (Func&lt;TResult&gt; function);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; StartNew&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; function) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function StartNew(Of TResult) (function As Func(Of TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;TResult&gt; ^ function);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew function" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="0eb3f-1254">O tipo de resultado disponível por meio de <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1254">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="function"><span data-ttu-id="0eb3f-1255">Um delegado de função que retorna o resultado futuro que estará disponível por meio do <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1255">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="0eb3f-1256">Cria e inicia um <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1256">Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-1257">O <see cref="T:System.Threading.Tasks.Task`1" /> iniciado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1257">The started <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eb3f-1258">Chamando <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> é funcionalmente equivalente à criação de um <xref:System.Threading.Tasks.Task%601> usando um dos seus construtores e, em seguida, chamar <xref:System.Threading.Tasks.Task.Start%2A> agendá-lo para execução.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1258">Calling <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="0eb3f-1259">Começando com o [!INCLUDE[net_v45](~/includes/net-v45-md.md)], você pode chamar o <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=nameWithType> o método como uma maneira rápida de chamar <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> com parâmetros padrão.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1259">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can call the <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=nameWithType> method as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="0eb3f-1260">No entanto, observe que há uma diferença no comportamento entre os dois métodos em relação ao: <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=nameWithType> por padrão não permite filho tarefas iniciadas com o <xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent?displayProperty=nameWithType> opção de anexar à atual <xref:System.Threading.Tasks.Task%601> da instância, ao passo que <xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%29> faz.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1260">Note, however, that there is a difference in behavior between the two methods regarding : <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=nameWithType> by default does not allow child tasks started with the <xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent?displayProperty=nameWithType> option to attach to the current <xref:System.Threading.Tasks.Task%601> instance, whereas <xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%29> does.</span></span> <span data-ttu-id="0eb3f-1261">Para obter mais informações e exemplos de código, consulte a entrada [Task. Run vs. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) na programação paralela no blog do .NET.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1261">For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0eb3f-1262">O exemplo a seguir é um aplicativo de adição simples que gera dois números aleatórios e solicita que o usuário insira sua soma.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1262">The following example is a simple addition app that generates two random numbers and prompts the user to enter their sum.</span></span> <span data-ttu-id="0eb3f-1263">Em seguida, indica se a resposta está correta ou, se a resposta do usuário não é um número válido, solicita que o usuário insira novamente um número válido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1263">It then indicates whether the answer is correct or, if the user's response is not a valid number, prompts the user to re-enter a valid number.</span></span> <span data-ttu-id="0eb3f-1264">O <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> é usado para criar o <xref:System.Threading.Tasks.Task%601> objetos que retornam os números aleatórios para adicionar.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1264">The <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> is used to create the <xref:System.Threading.Tasks.Task%601> objects that return the random numbers to add.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/run5.cs#5)]
 [!code-vb[System.Threading.Tasks.Task.Run#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/run5.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-1265">O argumento <paramref name="function" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1265">The <paramref name="function" /> argument is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-1266">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1266">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="0eb3f-1267">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1267">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="0eb3f-1268">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1268">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew&lt;TResult&gt; (Func&lt;object,TResult&gt; function, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; StartNew&lt;TResult&gt;(class System.Func`2&lt;object, !!TResult&gt; function, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartNew(Of TResult) (function As Func(Of Object, TResult), state As Object) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;System::Object ^, TResult&gt; ^ function, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;obj, 'Result&gt; * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="0eb3f-1269">O tipo de resultado disponível por meio de <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1269">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="function"><span data-ttu-id="0eb3f-1270">Um delegado de função que retorna o resultado futuro que estará disponível por meio do <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1270">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <param name="state"><span data-ttu-id="0eb3f-1271">Um objeto que contém dados a serem usados pelo delegado <paramref name="function" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1271">An object containing data to be used by the <paramref name="function" /> delegate.</span></span></param>
        <summary><span data-ttu-id="0eb3f-1272">Cria e inicia um <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1272">Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-1273">O <see cref="T:System.Threading.Tasks.Task`1" /> iniciado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1273">The started <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eb3f-1274">Chamar StartNew é funcionalmente equivalente à criação de um <xref:System.Threading.Tasks.Task%601> usando um dos seus construtores e, em seguida, chamar <xref:System.Threading.Tasks.Task.Start%2A> agendá-lo para execução.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1274">Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="0eb3f-1275">Começando com o [!INCLUDE[net_v45](~/includes/net-v45-md.md)], você pode usar o <xref:System.Threading.Tasks.Task.Run%2A> método com um <xref:System.Action> objeto como uma maneira rápida para chamar <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> com parâmetros padrão.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1275">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="0eb3f-1276">Para obter mais informações e exemplos de código, consulte a entrada [Task. Run vs. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) na programação paralela no blog do .NET.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1276">For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-1277">A exceção lançada quando o argumento <paramref name="function" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1277">The exception that is thrown when the <paramref name="function" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-1278">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1278">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="0eb3f-1279">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1279">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="0eb3f-1280">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1280">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew&lt;TResult&gt; (Func&lt;TResult&gt; function, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; StartNew&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; function, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;TResult&gt; ^ function, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="0eb3f-1281">O tipo de resultado disponível por meio de <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1281">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="function"><span data-ttu-id="0eb3f-1282">Um delegado de função que retorna o resultado futuro que estará disponível por meio do <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1282">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="0eb3f-1283">O <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> que será atribuído ao novo <see cref="T:System.Threading.Tasks.Task" /></span><span class="sxs-lookup"><span data-stu-id="0eb3f-1283">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new <see cref="T:System.Threading.Tasks.Task" /></span></span></param>
        <summary><span data-ttu-id="0eb3f-1284">Cria e inicia um <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1284">Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-1285">O <see cref="T:System.Threading.Tasks.Task`1" /> iniciado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1285">The started <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eb3f-1286">Chamando <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> é funcionalmente equivalente à criação de um <xref:System.Threading.Tasks.Task%601> usando um dos seus construtores e, em seguida, chamar <xref:System.Threading.Tasks.Task.Start%2A> agendá-lo para execução.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1286">Calling <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="0eb3f-1287">Começando com o [!INCLUDE[net_v45](~/includes/net-v45-md.md)], você pode usar o <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> o método como uma maneira rápida de chamar <xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29> com parâmetros padrão.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1287">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> method as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29> with default parameters.</span></span> <span data-ttu-id="0eb3f-1288">No entanto, observe que há uma diferença no comportamento entre os dois métodos em relação ao: <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> por padrão não permite filho tarefas iniciadas com o <xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent?displayProperty=nameWithType> opção de anexar à atual <xref:System.Threading.Tasks.Task%601> da instância, ao passo que <xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29> faz.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1288">Note, however, that there is a difference in behavior between the two methods regarding : <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> by default does not allow child tasks started with the <xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent?displayProperty=nameWithType> option to attach to the current <xref:System.Threading.Tasks.Task%601> instance, whereas <xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29> does.</span></span> <span data-ttu-id="0eb3f-1289">Para obter mais informações e exemplos de código, consulte a entrada [Task. Run vs. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) na programação paralela no blog do .NET.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1289">For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0eb3f-1290">O exemplo a seguir usa duas tarefas para computar a sequência de Fibonacci terminando em F100 = F100 1 + 2 F100 com valores de semente F1 = 1, F2 = 1 e F1 = 0, F2 = 1.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1290">The following example uses two tasks to compute the Fibonacci sequence ending in F100 = F100-1 + F100-2 with seed values F1= 1, F2 = 1 and F1 = 0, F2= 1.</span></span> <span data-ttu-id="0eb3f-1291">Aproximadamente metade do tempo, um token de cancelamento é definido como executar as operações.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1291">Approximately half of the time, a cancellation token is set as the operations execute.</span></span> <span data-ttu-id="0eb3f-1292">A saída do exemplo mostra o resultado se as duas tarefas concluídas com êxito e se o token for cancelado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1292">The output from the example shows the result if the two tasks complete successfully and if the token is cancelled.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/Run9.cs#9)]
 [!code-vb[System.Threading.Tasks.Task.Run#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/Run9.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="0eb3f-1293">O <see cref="T:System.Threading.CancellationToken" /> fornecido já foi descartado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1293">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-1294">A exceção lançada quando o argumento <paramref name="function" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1294">The exception that is thrown when the <paramref name="function" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-1295">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1295">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="0eb3f-1296">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1296">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="0eb3f-1297">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1297">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew&lt;TResult&gt; (Func&lt;TResult&gt; function, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; StartNew&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; function, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartNew(Of TResult) (function As Func(Of TResult), creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;TResult&gt; ^ function, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;'Result&gt; * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="0eb3f-1298">O tipo de resultado disponível por meio de <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1298">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="function"><span data-ttu-id="0eb3f-1299">Um delegado de função que retorna o resultado futuro que estará disponível por meio do <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1299">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="0eb3f-1300">Um valor de TaskCreationOptions que controla o comportamento do <see cref="T:System.Threading.Tasks.Task`1" /> criado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1300">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="0eb3f-1301">Cria e inicia um <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1301">Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-1302">O <see cref="T:System.Threading.Tasks.Task`1" /> iniciado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1302">The started <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eb3f-1303">Chamar StartNew é funcionalmente equivalente à criação de um <xref:System.Threading.Tasks.Task%601> usando um dos seus construtores e, em seguida, chamar <xref:System.Threading.Tasks.Task.Start%2A> agendá-lo para execução.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1303">Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="0eb3f-1304">Começando com o [!INCLUDE[net_v45](~/includes/net-v45-md.md)], você pode usar o <xref:System.Threading.Tasks.Task.Run%2A> método com um <xref:System.Action> objeto como uma maneira rápida para chamar <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> com parâmetros padrão.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1304">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="0eb3f-1305">Para obter mais informações e exemplos de código, consulte a entrada [Task. Run vs. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) na programação paralela no blog do .NET.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1305">For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-1306">A exceção lançada quando o argumento <paramref name="function" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1306">The exception that is thrown when the <paramref name="function" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0eb3f-1307">A exceção lançada quando o argumento <paramref name="creationOptions" /> especifica um valor de TaskCreationOptions inválido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1307">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="0eb3f-1308">A exceção lançada quando o argumento <paramref name="creationOptions" /> especifica um valor de TaskCreationOptions inválido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1308">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="0eb3f-1309">Para obter mais informações, consulte as Observações para <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span><span class="sxs-lookup"><span data-stu-id="0eb3f-1309">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-1310">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1310">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="0eb3f-1311">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1311">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="0eb3f-1312">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1312">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew&lt;TResult&gt; (Func&lt;object,TResult&gt; function, object state, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; StartNew&lt;TResult&gt;(class System.Func`2&lt;object, !!TResult&gt; function, object state, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;System::Object ^, TResult&gt; ^ function, System::Object ^ state, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;obj, 'Result&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, state, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="0eb3f-1313">O tipo de resultado disponível por meio de <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1313">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="function"><span data-ttu-id="0eb3f-1314">Um delegado de função que retorna o resultado futuro que estará disponível por meio do <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1314">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <param name="state"><span data-ttu-id="0eb3f-1315">Um objeto que contém dados a serem usados pelo delegado <paramref name="function" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1315">An object containing data to be used by the <paramref name="function" /> delegate.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="0eb3f-1316">O <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> que será atribuído ao novo <see cref="T:System.Threading.Tasks.Task" /></span><span class="sxs-lookup"><span data-stu-id="0eb3f-1316">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new <see cref="T:System.Threading.Tasks.Task" /></span></span></param>
        <summary><span data-ttu-id="0eb3f-1317">Cria e inicia um <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1317">Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-1318">O <see cref="T:System.Threading.Tasks.Task`1" /> iniciado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1318">The started <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eb3f-1319">Chamar StartNew é funcionalmente equivalente à criação de um <xref:System.Threading.Tasks.Task%601> usando um dos seus construtores e, em seguida, chamar <xref:System.Threading.Tasks.Task.Start%2A> agendá-lo para execução.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1319">Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="0eb3f-1320">Começando com o [!INCLUDE[net_v45](~/includes/net-v45-md.md)], você pode usar o <xref:System.Threading.Tasks.Task.Run%2A> método com um <xref:System.Action> objeto como uma maneira rápida para chamar <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> com parâmetros padrão.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1320">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="0eb3f-1321">Para obter mais informações e exemplos de código, consulte a entrada [Task. Run vs. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) na programação paralela no blog do .NET.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1321">For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="0eb3f-1322">O <see cref="T:System.Threading.CancellationToken" /> fornecido já foi descartado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1322">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-1323">A exceção lançada quando o argumento <paramref name="function" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1323">The exception that is thrown when the <paramref name="function" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-1324">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1324">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="0eb3f-1325">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1325">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="0eb3f-1326">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1326">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew&lt;TResult&gt; (Func&lt;object,TResult&gt; function, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; StartNew&lt;TResult&gt;(class System.Func`2&lt;object, !!TResult&gt; function, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartNew(Of TResult) (function As Func(Of Object, TResult), state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;System::Object ^, TResult&gt; ^ function, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;obj, 'Result&gt; * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="0eb3f-1327">O tipo de resultado disponível por meio de <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1327">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="function"><span data-ttu-id="0eb3f-1328">Um delegado de função que retorna o resultado futuro que estará disponível por meio do <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1328">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <param name="state"><span data-ttu-id="0eb3f-1329">Um objeto que contém dados a serem usados pelo delegado <paramref name="function" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1329">An object containing data to be used by the <paramref name="function" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="0eb3f-1330">Um valor de TaskCreationOptions que controla o comportamento do <see cref="T:System.Threading.Tasks.Task`1" /> criado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1330">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="0eb3f-1331">Cria e inicia um <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1331">Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-1332">O <see cref="T:System.Threading.Tasks.Task`1" /> iniciado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1332">The started <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eb3f-1333">Chamar StartNew é funcionalmente equivalente à criação de um <xref:System.Threading.Tasks.Task%601> usando um dos seus construtores e, em seguida, chamar <xref:System.Threading.Tasks.Task.Start%2A> agendá-lo para execução.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1333">Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="0eb3f-1334">Começando com o [!INCLUDE[net_v45](~/includes/net-v45-md.md)], você pode usar o <xref:System.Threading.Tasks.Task.Run%2A> método com um <xref:System.Action> objeto como uma maneira rápida para chamar <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> com parâmetros padrão.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1334">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="0eb3f-1335">Para obter mais informações e exemplos de código, consulte a entrada [Task. Run vs. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) na programação paralela no blog do .NET.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1335">For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-1336">A exceção lançada quando o argumento <paramref name="function" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1336">The exception that is thrown when the <paramref name="function" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0eb3f-1337">A exceção lançada quando o argumento <paramref name="creationOptions" /> especifica um valor de TaskCreationOptions inválido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1337">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="0eb3f-1338">A exceção lançada quando o argumento <paramref name="creationOptions" /> especifica um valor de TaskCreationOptions inválido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1338">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="0eb3f-1339">Para obter mais informações, consulte as Observações para <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span><span class="sxs-lookup"><span data-stu-id="0eb3f-1339">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-1340">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1340">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="0eb3f-1341">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1341">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="0eb3f-1342">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1342">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew&lt;TResult&gt; (Func&lt;TResult&gt; function, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; StartNew&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; function, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;TResult&gt; ^ function, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;'Result&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, cancellationToken, creationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="0eb3f-1343">O tipo de resultado disponível por meio de <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1343">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="function"><span data-ttu-id="0eb3f-1344">Um delegado de função que retorna o resultado futuro que estará disponível por meio do <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1344">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="0eb3f-1345">O <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> que será atribuído a nova tarefa.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1345">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new task.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="0eb3f-1346">Um valor de TaskCreationOptions que controla o comportamento do <see cref="T:System.Threading.Tasks.Task`1" /> criado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1346">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <param name="scheduler"><span data-ttu-id="0eb3f-1347">O <see cref="T:System.Threading.Tasks.TaskScheduler" /> usado para agendar o <see cref="T:System.Threading.Tasks.Task`1" /> criado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1347">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="0eb3f-1348">Cria e inicia um <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1348">Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-1349">O <see cref="T:System.Threading.Tasks.Task`1" /> iniciado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1349">The started <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eb3f-1350">Chamar StartNew é funcionalmente equivalente à criação de um <xref:System.Threading.Tasks.Task%601> usando um dos seus construtores e, em seguida, chamar <xref:System.Threading.Tasks.Task.Start%2A> agendá-lo para execução.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1350">Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="0eb3f-1351">Começando com o [!INCLUDE[net_v45](~/includes/net-v45-md.md)], você pode usar o <xref:System.Threading.Tasks.Task.Run%2A> método com um <xref:System.Action> objeto como uma maneira rápida para chamar <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> com parâmetros padrão.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1351">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="0eb3f-1352">Para obter mais informações e exemplos de código, consulte a entrada [Task. Run vs. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) na programação paralela no blog do .NET.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1352">For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="0eb3f-1353">O <see cref="T:System.Threading.CancellationToken" /> fornecido já foi descartado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1353">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-1354">A exceção lançada quando o argumento <paramref name="function" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1354">The exception that is thrown when the <paramref name="function" /> argument is null.</span></span>  
  
<span data-ttu-id="0eb3f-1355">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1355">-or-</span></span> 
<span data-ttu-id="0eb3f-1356">A exceção lançada quando o argumento <paramref name="scheduler" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1356">The exception that is thrown when the <paramref name="scheduler" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0eb3f-1357">A exceção lançada quando o argumento <paramref name="creationOptions" /> especifica um valor de TaskCreationOptions inválido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1357">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="0eb3f-1358">A exceção lançada quando o argumento <paramref name="creationOptions" /> especifica um valor de TaskCreationOptions inválido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1358">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="0eb3f-1359">Para obter mais informações, consulte as Observações para <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span><span class="sxs-lookup"><span data-stu-id="0eb3f-1359">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-1360">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1360">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="0eb3f-1361">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1361">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="0eb3f-1362">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1362">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew&lt;TResult&gt; (Func&lt;object,TResult&gt; function, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; StartNew&lt;TResult&gt;(class System.Func`2&lt;object, !!TResult&gt; function, object state, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;System::Object ^, TResult&gt; ^ function, System::Object ^ state, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;obj, 'Result&gt; * obj * System.Threading.CancellationToken * System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, state, cancellationToken, creationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="0eb3f-1363">O tipo de resultado disponível por meio de <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1363">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="function"><span data-ttu-id="0eb3f-1364">Um delegado de função que retorna o resultado futuro que estará disponível por meio do <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1364">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <param name="state"><span data-ttu-id="0eb3f-1365">Um objeto que contém dados a serem usados pelo delegado <paramref name="function" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1365">An object containing data to be used by the <paramref name="function" /> delegate.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="0eb3f-1366">O <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> que será atribuído a nova tarefa.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1366">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new task.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="0eb3f-1367">Um valor de TaskCreationOptions que controla o comportamento do <see cref="T:System.Threading.Tasks.Task`1" /> criado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1367">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <param name="scheduler"><span data-ttu-id="0eb3f-1368">O <see cref="T:System.Threading.Tasks.TaskScheduler" /> usado para agendar o <see cref="T:System.Threading.Tasks.Task`1" /> criado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1368">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="0eb3f-1369">Cria e inicia um <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1369">Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></summary>
        <returns><span data-ttu-id="0eb3f-1370">O <see cref="T:System.Threading.Tasks.Task`1" /> iniciado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1370">The started <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eb3f-1371">Chamar StartNew é funcionalmente equivalente à criação de um <xref:System.Threading.Tasks.Task%601> usando um dos seus construtores e, em seguida, chamar <xref:System.Threading.Tasks.Task.Start%2A> agendá-lo para execução.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1371">Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="0eb3f-1372">Começando com o [!INCLUDE[net_v45](~/includes/net-v45-md.md)], você pode usar o <xref:System.Threading.Tasks.Task.Run%2A> método com um <xref:System.Action> objeto como uma maneira rápida para chamar <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> com parâmetros padrão.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1372">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="0eb3f-1373">Para obter mais informações e exemplos de código, consulte a entrada [Task. Run vs. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) na programação paralela no blog do .NET.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1373">For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="0eb3f-1374">O <see cref="T:System.Threading.CancellationToken" /> fornecido já foi descartado.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1374">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0eb3f-1375">A exceção lançada quando o argumento <paramref name="function" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1375">The exception that is thrown when the <paramref name="function" /> argument is null.</span></span>  
  
<span data-ttu-id="0eb3f-1376">- ou -</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1376">-or-</span></span> 
<span data-ttu-id="0eb3f-1377">A exceção lançada quando o argumento <paramref name="scheduler" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1377">The exception that is thrown when the <paramref name="scheduler" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0eb3f-1378">A exceção lançada quando o argumento <paramref name="creationOptions" /> especifica um valor de TaskCreationOptions inválido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1378">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="0eb3f-1379">A exceção lançada quando o argumento <paramref name="creationOptions" /> especifica um valor de TaskCreationOptions inválido.</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1379">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="0eb3f-1380">Para obter mais informações, consulte as Observações para <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span><span class="sxs-lookup"><span data-stu-id="0eb3f-1380">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <altmember cref="T:System.Threading.Tasks.TaskScheduler" />
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="0eb3f-1381">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1381">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="0eb3f-1382">Encadeando tarefas com tarefas de continuação</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1382">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="0eb3f-1383">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="0eb3f-1383">Task Cancellation</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>